<?php
/**
 * ModQuizApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * ModQuizApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ModQuizApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'modQuizAddRandomQuestions' => [
            'application/json',
        ],
        'modQuizGetAttemptAccessInformation' => [
            'application/json',
        ],
        'modQuizGetAttemptData' => [
            'application/json',
        ],
        'modQuizGetAttemptReview' => [
            'application/json',
        ],
        'modQuizGetAttemptSummary' => [
            'application/json',
        ],
        'modQuizGetCombinedReviewOptions' => [
            'application/json',
        ],
        'modQuizGetQuizAccessInformation' => [
            'application/json',
        ],
        'modQuizGetQuizFeedbackForGrade' => [
            'application/json',
        ],
        'modQuizGetQuizRequiredQtypes' => [
            'application/json',
        ],
        'modQuizGetQuizzesByCourses' => [
            'application/json',
        ],
        'modQuizGetReopenAttemptConfirmation' => [
            'application/json',
        ],
        'modQuizGetUserAttempts' => [
            'application/json',
        ],
        'modQuizGetUserBestGrade' => [
            'application/json',
        ],
        'modQuizProcessAttempt' => [
            'application/json',
        ],
        'modQuizReopenAttempt' => [
            'application/json',
        ],
        'modQuizSaveAttempt' => [
            'application/json',
        ],
        'modQuizSetQuestionVersion' => [
            'application/json',
        ],
        'modQuizStartAttempt' => [
            'application/json',
        ],
        'modQuizUpdateFilterCondition' => [
            'application/json',
        ],
        'modQuizViewAttempt' => [
            'application/json',
        ],
        'modQuizViewAttemptReview' => [
            'application/json',
        ],
        'modQuizViewAttemptSummary' => [
            'application/json',
        ],
        'modQuizViewQuiz' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation modQuizAddRandomQuestions
     *
     * Add a number of random questions to a quiz.
     *
     * @param  \OpenAPI\Client\Model\ModQuizAddRandomQuestionsRequest $mod_quiz_add_random_questions_request mod_quiz_add_random_questions_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizAddRandomQuestions'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModQuizAddRandomQuestions200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modQuizAddRandomQuestions($mod_quiz_add_random_questions_request, string $contentType = self::contentTypes['modQuizAddRandomQuestions'][0])
    {
        list($response) = $this->modQuizAddRandomQuestionsWithHttpInfo($mod_quiz_add_random_questions_request, $contentType);
        return $response;
    }

    /**
     * Operation modQuizAddRandomQuestionsWithHttpInfo
     *
     * Add a number of random questions to a quiz.
     *
     * @param  \OpenAPI\Client\Model\ModQuizAddRandomQuestionsRequest $mod_quiz_add_random_questions_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizAddRandomQuestions'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModQuizAddRandomQuestions200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modQuizAddRandomQuestionsWithHttpInfo($mod_quiz_add_random_questions_request, string $contentType = self::contentTypes['modQuizAddRandomQuestions'][0])
    {
        $request = $this->modQuizAddRandomQuestionsRequest($mod_quiz_add_random_questions_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModQuizAddRandomQuestions200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModQuizAddRandomQuestions200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModQuizAddRandomQuestions200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModQuizAddRandomQuestions200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModQuizAddRandomQuestions200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modQuizAddRandomQuestionsAsync
     *
     * Add a number of random questions to a quiz.
     *
     * @param  \OpenAPI\Client\Model\ModQuizAddRandomQuestionsRequest $mod_quiz_add_random_questions_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizAddRandomQuestions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modQuizAddRandomQuestionsAsync($mod_quiz_add_random_questions_request, string $contentType = self::contentTypes['modQuizAddRandomQuestions'][0])
    {
        return $this->modQuizAddRandomQuestionsAsyncWithHttpInfo($mod_quiz_add_random_questions_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modQuizAddRandomQuestionsAsyncWithHttpInfo
     *
     * Add a number of random questions to a quiz.
     *
     * @param  \OpenAPI\Client\Model\ModQuizAddRandomQuestionsRequest $mod_quiz_add_random_questions_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizAddRandomQuestions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modQuizAddRandomQuestionsAsyncWithHttpInfo($mod_quiz_add_random_questions_request, string $contentType = self::contentTypes['modQuizAddRandomQuestions'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModQuizAddRandomQuestions200Response';
        $request = $this->modQuizAddRandomQuestionsRequest($mod_quiz_add_random_questions_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modQuizAddRandomQuestions'
     *
     * @param  \OpenAPI\Client\Model\ModQuizAddRandomQuestionsRequest $mod_quiz_add_random_questions_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizAddRandomQuestions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modQuizAddRandomQuestionsRequest($mod_quiz_add_random_questions_request, string $contentType = self::contentTypes['modQuizAddRandomQuestions'][0])
    {

        // verify the required parameter 'mod_quiz_add_random_questions_request' is set
        if ($mod_quiz_add_random_questions_request === null || (is_array($mod_quiz_add_random_questions_request) && count($mod_quiz_add_random_questions_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_quiz_add_random_questions_request when calling modQuizAddRandomQuestions'
            );
        }


        $resourcePath = '/mod_quiz_add_random_questions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_quiz_add_random_questions_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_quiz_add_random_questions_request));
            } else {
                $httpBody = $mod_quiz_add_random_questions_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modQuizGetAttemptAccessInformation
     *
     * Return access information for a given attempt in a quiz.
     *
     * @param  \OpenAPI\Client\Model\ModQuizGetAttemptAccessInformationRequest $mod_quiz_get_attempt_access_information_request mod_quiz_get_attempt_access_information_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizGetAttemptAccessInformation'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModQuizGetAttemptAccessInformation200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modQuizGetAttemptAccessInformation($mod_quiz_get_attempt_access_information_request, string $contentType = self::contentTypes['modQuizGetAttemptAccessInformation'][0])
    {
        list($response) = $this->modQuizGetAttemptAccessInformationWithHttpInfo($mod_quiz_get_attempt_access_information_request, $contentType);
        return $response;
    }

    /**
     * Operation modQuizGetAttemptAccessInformationWithHttpInfo
     *
     * Return access information for a given attempt in a quiz.
     *
     * @param  \OpenAPI\Client\Model\ModQuizGetAttemptAccessInformationRequest $mod_quiz_get_attempt_access_information_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizGetAttemptAccessInformation'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModQuizGetAttemptAccessInformation200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modQuizGetAttemptAccessInformationWithHttpInfo($mod_quiz_get_attempt_access_information_request, string $contentType = self::contentTypes['modQuizGetAttemptAccessInformation'][0])
    {
        $request = $this->modQuizGetAttemptAccessInformationRequest($mod_quiz_get_attempt_access_information_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModQuizGetAttemptAccessInformation200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModQuizGetAttemptAccessInformation200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModQuizGetAttemptAccessInformation200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModQuizGetAttemptAccessInformation200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModQuizGetAttemptAccessInformation200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modQuizGetAttemptAccessInformationAsync
     *
     * Return access information for a given attempt in a quiz.
     *
     * @param  \OpenAPI\Client\Model\ModQuizGetAttemptAccessInformationRequest $mod_quiz_get_attempt_access_information_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizGetAttemptAccessInformation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modQuizGetAttemptAccessInformationAsync($mod_quiz_get_attempt_access_information_request, string $contentType = self::contentTypes['modQuizGetAttemptAccessInformation'][0])
    {
        return $this->modQuizGetAttemptAccessInformationAsyncWithHttpInfo($mod_quiz_get_attempt_access_information_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modQuizGetAttemptAccessInformationAsyncWithHttpInfo
     *
     * Return access information for a given attempt in a quiz.
     *
     * @param  \OpenAPI\Client\Model\ModQuizGetAttemptAccessInformationRequest $mod_quiz_get_attempt_access_information_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizGetAttemptAccessInformation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modQuizGetAttemptAccessInformationAsyncWithHttpInfo($mod_quiz_get_attempt_access_information_request, string $contentType = self::contentTypes['modQuizGetAttemptAccessInformation'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModQuizGetAttemptAccessInformation200Response';
        $request = $this->modQuizGetAttemptAccessInformationRequest($mod_quiz_get_attempt_access_information_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modQuizGetAttemptAccessInformation'
     *
     * @param  \OpenAPI\Client\Model\ModQuizGetAttemptAccessInformationRequest $mod_quiz_get_attempt_access_information_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizGetAttemptAccessInformation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modQuizGetAttemptAccessInformationRequest($mod_quiz_get_attempt_access_information_request, string $contentType = self::contentTypes['modQuizGetAttemptAccessInformation'][0])
    {

        // verify the required parameter 'mod_quiz_get_attempt_access_information_request' is set
        if ($mod_quiz_get_attempt_access_information_request === null || (is_array($mod_quiz_get_attempt_access_information_request) && count($mod_quiz_get_attempt_access_information_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_quiz_get_attempt_access_information_request when calling modQuizGetAttemptAccessInformation'
            );
        }


        $resourcePath = '/mod_quiz_get_attempt_access_information';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_quiz_get_attempt_access_information_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_quiz_get_attempt_access_information_request));
            } else {
                $httpBody = $mod_quiz_get_attempt_access_information_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modQuizGetAttemptData
     *
     * Returns information for the given attempt page for a quiz attempt in progress.
     *
     * @param  \OpenAPI\Client\Model\ModQuizGetAttemptDataRequest $mod_quiz_get_attempt_data_request mod_quiz_get_attempt_data_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizGetAttemptData'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModQuizGetAttemptData200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modQuizGetAttemptData($mod_quiz_get_attempt_data_request, string $contentType = self::contentTypes['modQuizGetAttemptData'][0])
    {
        list($response) = $this->modQuizGetAttemptDataWithHttpInfo($mod_quiz_get_attempt_data_request, $contentType);
        return $response;
    }

    /**
     * Operation modQuizGetAttemptDataWithHttpInfo
     *
     * Returns information for the given attempt page for a quiz attempt in progress.
     *
     * @param  \OpenAPI\Client\Model\ModQuizGetAttemptDataRequest $mod_quiz_get_attempt_data_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizGetAttemptData'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModQuizGetAttemptData200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modQuizGetAttemptDataWithHttpInfo($mod_quiz_get_attempt_data_request, string $contentType = self::contentTypes['modQuizGetAttemptData'][0])
    {
        $request = $this->modQuizGetAttemptDataRequest($mod_quiz_get_attempt_data_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModQuizGetAttemptData200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModQuizGetAttemptData200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModQuizGetAttemptData200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModQuizGetAttemptData200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModQuizGetAttemptData200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modQuizGetAttemptDataAsync
     *
     * Returns information for the given attempt page for a quiz attempt in progress.
     *
     * @param  \OpenAPI\Client\Model\ModQuizGetAttemptDataRequest $mod_quiz_get_attempt_data_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizGetAttemptData'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modQuizGetAttemptDataAsync($mod_quiz_get_attempt_data_request, string $contentType = self::contentTypes['modQuizGetAttemptData'][0])
    {
        return $this->modQuizGetAttemptDataAsyncWithHttpInfo($mod_quiz_get_attempt_data_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modQuizGetAttemptDataAsyncWithHttpInfo
     *
     * Returns information for the given attempt page for a quiz attempt in progress.
     *
     * @param  \OpenAPI\Client\Model\ModQuizGetAttemptDataRequest $mod_quiz_get_attempt_data_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizGetAttemptData'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modQuizGetAttemptDataAsyncWithHttpInfo($mod_quiz_get_attempt_data_request, string $contentType = self::contentTypes['modQuizGetAttemptData'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModQuizGetAttemptData200Response';
        $request = $this->modQuizGetAttemptDataRequest($mod_quiz_get_attempt_data_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modQuizGetAttemptData'
     *
     * @param  \OpenAPI\Client\Model\ModQuizGetAttemptDataRequest $mod_quiz_get_attempt_data_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizGetAttemptData'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modQuizGetAttemptDataRequest($mod_quiz_get_attempt_data_request, string $contentType = self::contentTypes['modQuizGetAttemptData'][0])
    {

        // verify the required parameter 'mod_quiz_get_attempt_data_request' is set
        if ($mod_quiz_get_attempt_data_request === null || (is_array($mod_quiz_get_attempt_data_request) && count($mod_quiz_get_attempt_data_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_quiz_get_attempt_data_request when calling modQuizGetAttemptData'
            );
        }


        $resourcePath = '/mod_quiz_get_attempt_data';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_quiz_get_attempt_data_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_quiz_get_attempt_data_request));
            } else {
                $httpBody = $mod_quiz_get_attempt_data_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modQuizGetAttemptReview
     *
     * Returns review information for the given finished attempt, can be used by users or teachers.
     *
     * @param  \OpenAPI\Client\Model\ModQuizGetAttemptReviewRequest $mod_quiz_get_attempt_review_request mod_quiz_get_attempt_review_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizGetAttemptReview'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModQuizGetAttemptReview200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modQuizGetAttemptReview($mod_quiz_get_attempt_review_request, string $contentType = self::contentTypes['modQuizGetAttemptReview'][0])
    {
        list($response) = $this->modQuizGetAttemptReviewWithHttpInfo($mod_quiz_get_attempt_review_request, $contentType);
        return $response;
    }

    /**
     * Operation modQuizGetAttemptReviewWithHttpInfo
     *
     * Returns review information for the given finished attempt, can be used by users or teachers.
     *
     * @param  \OpenAPI\Client\Model\ModQuizGetAttemptReviewRequest $mod_quiz_get_attempt_review_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizGetAttemptReview'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModQuizGetAttemptReview200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modQuizGetAttemptReviewWithHttpInfo($mod_quiz_get_attempt_review_request, string $contentType = self::contentTypes['modQuizGetAttemptReview'][0])
    {
        $request = $this->modQuizGetAttemptReviewRequest($mod_quiz_get_attempt_review_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModQuizGetAttemptReview200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModQuizGetAttemptReview200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModQuizGetAttemptReview200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModQuizGetAttemptReview200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModQuizGetAttemptReview200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modQuizGetAttemptReviewAsync
     *
     * Returns review information for the given finished attempt, can be used by users or teachers.
     *
     * @param  \OpenAPI\Client\Model\ModQuizGetAttemptReviewRequest $mod_quiz_get_attempt_review_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizGetAttemptReview'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modQuizGetAttemptReviewAsync($mod_quiz_get_attempt_review_request, string $contentType = self::contentTypes['modQuizGetAttemptReview'][0])
    {
        return $this->modQuizGetAttemptReviewAsyncWithHttpInfo($mod_quiz_get_attempt_review_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modQuizGetAttemptReviewAsyncWithHttpInfo
     *
     * Returns review information for the given finished attempt, can be used by users or teachers.
     *
     * @param  \OpenAPI\Client\Model\ModQuizGetAttemptReviewRequest $mod_quiz_get_attempt_review_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizGetAttemptReview'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modQuizGetAttemptReviewAsyncWithHttpInfo($mod_quiz_get_attempt_review_request, string $contentType = self::contentTypes['modQuizGetAttemptReview'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModQuizGetAttemptReview200Response';
        $request = $this->modQuizGetAttemptReviewRequest($mod_quiz_get_attempt_review_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modQuizGetAttemptReview'
     *
     * @param  \OpenAPI\Client\Model\ModQuizGetAttemptReviewRequest $mod_quiz_get_attempt_review_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizGetAttemptReview'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modQuizGetAttemptReviewRequest($mod_quiz_get_attempt_review_request, string $contentType = self::contentTypes['modQuizGetAttemptReview'][0])
    {

        // verify the required parameter 'mod_quiz_get_attempt_review_request' is set
        if ($mod_quiz_get_attempt_review_request === null || (is_array($mod_quiz_get_attempt_review_request) && count($mod_quiz_get_attempt_review_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_quiz_get_attempt_review_request when calling modQuizGetAttemptReview'
            );
        }


        $resourcePath = '/mod_quiz_get_attempt_review';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_quiz_get_attempt_review_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_quiz_get_attempt_review_request));
            } else {
                $httpBody = $mod_quiz_get_attempt_review_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modQuizGetAttemptSummary
     *
     * Returns a summary of a quiz attempt before it is submitted.
     *
     * @param  \OpenAPI\Client\Model\ModQuizGetAttemptSummaryRequest $mod_quiz_get_attempt_summary_request mod_quiz_get_attempt_summary_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizGetAttemptSummary'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModQuizGetAttemptSummary200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modQuizGetAttemptSummary($mod_quiz_get_attempt_summary_request, string $contentType = self::contentTypes['modQuizGetAttemptSummary'][0])
    {
        list($response) = $this->modQuizGetAttemptSummaryWithHttpInfo($mod_quiz_get_attempt_summary_request, $contentType);
        return $response;
    }

    /**
     * Operation modQuizGetAttemptSummaryWithHttpInfo
     *
     * Returns a summary of a quiz attempt before it is submitted.
     *
     * @param  \OpenAPI\Client\Model\ModQuizGetAttemptSummaryRequest $mod_quiz_get_attempt_summary_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizGetAttemptSummary'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModQuizGetAttemptSummary200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modQuizGetAttemptSummaryWithHttpInfo($mod_quiz_get_attempt_summary_request, string $contentType = self::contentTypes['modQuizGetAttemptSummary'][0])
    {
        $request = $this->modQuizGetAttemptSummaryRequest($mod_quiz_get_attempt_summary_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModQuizGetAttemptSummary200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModQuizGetAttemptSummary200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModQuizGetAttemptSummary200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModQuizGetAttemptSummary200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModQuizGetAttemptSummary200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modQuizGetAttemptSummaryAsync
     *
     * Returns a summary of a quiz attempt before it is submitted.
     *
     * @param  \OpenAPI\Client\Model\ModQuizGetAttemptSummaryRequest $mod_quiz_get_attempt_summary_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizGetAttemptSummary'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modQuizGetAttemptSummaryAsync($mod_quiz_get_attempt_summary_request, string $contentType = self::contentTypes['modQuizGetAttemptSummary'][0])
    {
        return $this->modQuizGetAttemptSummaryAsyncWithHttpInfo($mod_quiz_get_attempt_summary_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modQuizGetAttemptSummaryAsyncWithHttpInfo
     *
     * Returns a summary of a quiz attempt before it is submitted.
     *
     * @param  \OpenAPI\Client\Model\ModQuizGetAttemptSummaryRequest $mod_quiz_get_attempt_summary_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizGetAttemptSummary'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modQuizGetAttemptSummaryAsyncWithHttpInfo($mod_quiz_get_attempt_summary_request, string $contentType = self::contentTypes['modQuizGetAttemptSummary'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModQuizGetAttemptSummary200Response';
        $request = $this->modQuizGetAttemptSummaryRequest($mod_quiz_get_attempt_summary_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modQuizGetAttemptSummary'
     *
     * @param  \OpenAPI\Client\Model\ModQuizGetAttemptSummaryRequest $mod_quiz_get_attempt_summary_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizGetAttemptSummary'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modQuizGetAttemptSummaryRequest($mod_quiz_get_attempt_summary_request, string $contentType = self::contentTypes['modQuizGetAttemptSummary'][0])
    {

        // verify the required parameter 'mod_quiz_get_attempt_summary_request' is set
        if ($mod_quiz_get_attempt_summary_request === null || (is_array($mod_quiz_get_attempt_summary_request) && count($mod_quiz_get_attempt_summary_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_quiz_get_attempt_summary_request when calling modQuizGetAttemptSummary'
            );
        }


        $resourcePath = '/mod_quiz_get_attempt_summary';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_quiz_get_attempt_summary_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_quiz_get_attempt_summary_request));
            } else {
                $httpBody = $mod_quiz_get_attempt_summary_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modQuizGetCombinedReviewOptions
     *
     * Combines the review options from a number of different quiz attempts.
     *
     * @param  \OpenAPI\Client\Model\ModQuizGetCombinedReviewOptionsRequest $mod_quiz_get_combined_review_options_request mod_quiz_get_combined_review_options_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizGetCombinedReviewOptions'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModQuizGetCombinedReviewOptions200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modQuizGetCombinedReviewOptions($mod_quiz_get_combined_review_options_request, string $contentType = self::contentTypes['modQuizGetCombinedReviewOptions'][0])
    {
        list($response) = $this->modQuizGetCombinedReviewOptionsWithHttpInfo($mod_quiz_get_combined_review_options_request, $contentType);
        return $response;
    }

    /**
     * Operation modQuizGetCombinedReviewOptionsWithHttpInfo
     *
     * Combines the review options from a number of different quiz attempts.
     *
     * @param  \OpenAPI\Client\Model\ModQuizGetCombinedReviewOptionsRequest $mod_quiz_get_combined_review_options_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizGetCombinedReviewOptions'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModQuizGetCombinedReviewOptions200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modQuizGetCombinedReviewOptionsWithHttpInfo($mod_quiz_get_combined_review_options_request, string $contentType = self::contentTypes['modQuizGetCombinedReviewOptions'][0])
    {
        $request = $this->modQuizGetCombinedReviewOptionsRequest($mod_quiz_get_combined_review_options_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModQuizGetCombinedReviewOptions200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModQuizGetCombinedReviewOptions200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModQuizGetCombinedReviewOptions200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModQuizGetCombinedReviewOptions200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModQuizGetCombinedReviewOptions200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modQuizGetCombinedReviewOptionsAsync
     *
     * Combines the review options from a number of different quiz attempts.
     *
     * @param  \OpenAPI\Client\Model\ModQuizGetCombinedReviewOptionsRequest $mod_quiz_get_combined_review_options_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizGetCombinedReviewOptions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modQuizGetCombinedReviewOptionsAsync($mod_quiz_get_combined_review_options_request, string $contentType = self::contentTypes['modQuizGetCombinedReviewOptions'][0])
    {
        return $this->modQuizGetCombinedReviewOptionsAsyncWithHttpInfo($mod_quiz_get_combined_review_options_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modQuizGetCombinedReviewOptionsAsyncWithHttpInfo
     *
     * Combines the review options from a number of different quiz attempts.
     *
     * @param  \OpenAPI\Client\Model\ModQuizGetCombinedReviewOptionsRequest $mod_quiz_get_combined_review_options_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizGetCombinedReviewOptions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modQuizGetCombinedReviewOptionsAsyncWithHttpInfo($mod_quiz_get_combined_review_options_request, string $contentType = self::contentTypes['modQuizGetCombinedReviewOptions'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModQuizGetCombinedReviewOptions200Response';
        $request = $this->modQuizGetCombinedReviewOptionsRequest($mod_quiz_get_combined_review_options_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modQuizGetCombinedReviewOptions'
     *
     * @param  \OpenAPI\Client\Model\ModQuizGetCombinedReviewOptionsRequest $mod_quiz_get_combined_review_options_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizGetCombinedReviewOptions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modQuizGetCombinedReviewOptionsRequest($mod_quiz_get_combined_review_options_request, string $contentType = self::contentTypes['modQuizGetCombinedReviewOptions'][0])
    {

        // verify the required parameter 'mod_quiz_get_combined_review_options_request' is set
        if ($mod_quiz_get_combined_review_options_request === null || (is_array($mod_quiz_get_combined_review_options_request) && count($mod_quiz_get_combined_review_options_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_quiz_get_combined_review_options_request when calling modQuizGetCombinedReviewOptions'
            );
        }


        $resourcePath = '/mod_quiz_get_combined_review_options';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_quiz_get_combined_review_options_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_quiz_get_combined_review_options_request));
            } else {
                $httpBody = $mod_quiz_get_combined_review_options_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modQuizGetQuizAccessInformation
     *
     * Return access information for a given quiz.
     *
     * @param  \OpenAPI\Client\Model\ModQuizGetQuizAccessInformationRequest $mod_quiz_get_quiz_access_information_request mod_quiz_get_quiz_access_information_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizGetQuizAccessInformation'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModQuizGetQuizAccessInformation200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modQuizGetQuizAccessInformation($mod_quiz_get_quiz_access_information_request, string $contentType = self::contentTypes['modQuizGetQuizAccessInformation'][0])
    {
        list($response) = $this->modQuizGetQuizAccessInformationWithHttpInfo($mod_quiz_get_quiz_access_information_request, $contentType);
        return $response;
    }

    /**
     * Operation modQuizGetQuizAccessInformationWithHttpInfo
     *
     * Return access information for a given quiz.
     *
     * @param  \OpenAPI\Client\Model\ModQuizGetQuizAccessInformationRequest $mod_quiz_get_quiz_access_information_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizGetQuizAccessInformation'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModQuizGetQuizAccessInformation200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modQuizGetQuizAccessInformationWithHttpInfo($mod_quiz_get_quiz_access_information_request, string $contentType = self::contentTypes['modQuizGetQuizAccessInformation'][0])
    {
        $request = $this->modQuizGetQuizAccessInformationRequest($mod_quiz_get_quiz_access_information_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModQuizGetQuizAccessInformation200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModQuizGetQuizAccessInformation200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModQuizGetQuizAccessInformation200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModQuizGetQuizAccessInformation200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModQuizGetQuizAccessInformation200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modQuizGetQuizAccessInformationAsync
     *
     * Return access information for a given quiz.
     *
     * @param  \OpenAPI\Client\Model\ModQuizGetQuizAccessInformationRequest $mod_quiz_get_quiz_access_information_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizGetQuizAccessInformation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modQuizGetQuizAccessInformationAsync($mod_quiz_get_quiz_access_information_request, string $contentType = self::contentTypes['modQuizGetQuizAccessInformation'][0])
    {
        return $this->modQuizGetQuizAccessInformationAsyncWithHttpInfo($mod_quiz_get_quiz_access_information_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modQuizGetQuizAccessInformationAsyncWithHttpInfo
     *
     * Return access information for a given quiz.
     *
     * @param  \OpenAPI\Client\Model\ModQuizGetQuizAccessInformationRequest $mod_quiz_get_quiz_access_information_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizGetQuizAccessInformation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modQuizGetQuizAccessInformationAsyncWithHttpInfo($mod_quiz_get_quiz_access_information_request, string $contentType = self::contentTypes['modQuizGetQuizAccessInformation'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModQuizGetQuizAccessInformation200Response';
        $request = $this->modQuizGetQuizAccessInformationRequest($mod_quiz_get_quiz_access_information_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modQuizGetQuizAccessInformation'
     *
     * @param  \OpenAPI\Client\Model\ModQuizGetQuizAccessInformationRequest $mod_quiz_get_quiz_access_information_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizGetQuizAccessInformation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modQuizGetQuizAccessInformationRequest($mod_quiz_get_quiz_access_information_request, string $contentType = self::contentTypes['modQuizGetQuizAccessInformation'][0])
    {

        // verify the required parameter 'mod_quiz_get_quiz_access_information_request' is set
        if ($mod_quiz_get_quiz_access_information_request === null || (is_array($mod_quiz_get_quiz_access_information_request) && count($mod_quiz_get_quiz_access_information_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_quiz_get_quiz_access_information_request when calling modQuizGetQuizAccessInformation'
            );
        }


        $resourcePath = '/mod_quiz_get_quiz_access_information';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_quiz_get_quiz_access_information_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_quiz_get_quiz_access_information_request));
            } else {
                $httpBody = $mod_quiz_get_quiz_access_information_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modQuizGetQuizFeedbackForGrade
     *
     * Get the feedback text that should be show to a student who got the given grade in the given quiz.
     *
     * @param  \OpenAPI\Client\Model\ModQuizGetQuizFeedbackForGradeRequest $mod_quiz_get_quiz_feedback_for_grade_request mod_quiz_get_quiz_feedback_for_grade_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizGetQuizFeedbackForGrade'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModQuizGetQuizFeedbackForGrade200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modQuizGetQuizFeedbackForGrade($mod_quiz_get_quiz_feedback_for_grade_request, string $contentType = self::contentTypes['modQuizGetQuizFeedbackForGrade'][0])
    {
        list($response) = $this->modQuizGetQuizFeedbackForGradeWithHttpInfo($mod_quiz_get_quiz_feedback_for_grade_request, $contentType);
        return $response;
    }

    /**
     * Operation modQuizGetQuizFeedbackForGradeWithHttpInfo
     *
     * Get the feedback text that should be show to a student who got the given grade in the given quiz.
     *
     * @param  \OpenAPI\Client\Model\ModQuizGetQuizFeedbackForGradeRequest $mod_quiz_get_quiz_feedback_for_grade_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizGetQuizFeedbackForGrade'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModQuizGetQuizFeedbackForGrade200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modQuizGetQuizFeedbackForGradeWithHttpInfo($mod_quiz_get_quiz_feedback_for_grade_request, string $contentType = self::contentTypes['modQuizGetQuizFeedbackForGrade'][0])
    {
        $request = $this->modQuizGetQuizFeedbackForGradeRequest($mod_quiz_get_quiz_feedback_for_grade_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModQuizGetQuizFeedbackForGrade200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModQuizGetQuizFeedbackForGrade200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModQuizGetQuizFeedbackForGrade200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModQuizGetQuizFeedbackForGrade200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModQuizGetQuizFeedbackForGrade200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modQuizGetQuizFeedbackForGradeAsync
     *
     * Get the feedback text that should be show to a student who got the given grade in the given quiz.
     *
     * @param  \OpenAPI\Client\Model\ModQuizGetQuizFeedbackForGradeRequest $mod_quiz_get_quiz_feedback_for_grade_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizGetQuizFeedbackForGrade'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modQuizGetQuizFeedbackForGradeAsync($mod_quiz_get_quiz_feedback_for_grade_request, string $contentType = self::contentTypes['modQuizGetQuizFeedbackForGrade'][0])
    {
        return $this->modQuizGetQuizFeedbackForGradeAsyncWithHttpInfo($mod_quiz_get_quiz_feedback_for_grade_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modQuizGetQuizFeedbackForGradeAsyncWithHttpInfo
     *
     * Get the feedback text that should be show to a student who got the given grade in the given quiz.
     *
     * @param  \OpenAPI\Client\Model\ModQuizGetQuizFeedbackForGradeRequest $mod_quiz_get_quiz_feedback_for_grade_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizGetQuizFeedbackForGrade'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modQuizGetQuizFeedbackForGradeAsyncWithHttpInfo($mod_quiz_get_quiz_feedback_for_grade_request, string $contentType = self::contentTypes['modQuizGetQuizFeedbackForGrade'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModQuizGetQuizFeedbackForGrade200Response';
        $request = $this->modQuizGetQuizFeedbackForGradeRequest($mod_quiz_get_quiz_feedback_for_grade_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modQuizGetQuizFeedbackForGrade'
     *
     * @param  \OpenAPI\Client\Model\ModQuizGetQuizFeedbackForGradeRequest $mod_quiz_get_quiz_feedback_for_grade_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizGetQuizFeedbackForGrade'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modQuizGetQuizFeedbackForGradeRequest($mod_quiz_get_quiz_feedback_for_grade_request, string $contentType = self::contentTypes['modQuizGetQuizFeedbackForGrade'][0])
    {

        // verify the required parameter 'mod_quiz_get_quiz_feedback_for_grade_request' is set
        if ($mod_quiz_get_quiz_feedback_for_grade_request === null || (is_array($mod_quiz_get_quiz_feedback_for_grade_request) && count($mod_quiz_get_quiz_feedback_for_grade_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_quiz_get_quiz_feedback_for_grade_request when calling modQuizGetQuizFeedbackForGrade'
            );
        }


        $resourcePath = '/mod_quiz_get_quiz_feedback_for_grade';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_quiz_get_quiz_feedback_for_grade_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_quiz_get_quiz_feedback_for_grade_request));
            } else {
                $httpBody = $mod_quiz_get_quiz_feedback_for_grade_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modQuizGetQuizRequiredQtypes
     *
     * Return the potential question types that would be required for a given quiz.
     *
     * @param  \OpenAPI\Client\Model\ModQuizGetQuizAccessInformationRequest $mod_quiz_get_quiz_access_information_request mod_quiz_get_quiz_access_information_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizGetQuizRequiredQtypes'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModQuizGetQuizRequiredQtypes200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modQuizGetQuizRequiredQtypes($mod_quiz_get_quiz_access_information_request, string $contentType = self::contentTypes['modQuizGetQuizRequiredQtypes'][0])
    {
        list($response) = $this->modQuizGetQuizRequiredQtypesWithHttpInfo($mod_quiz_get_quiz_access_information_request, $contentType);
        return $response;
    }

    /**
     * Operation modQuizGetQuizRequiredQtypesWithHttpInfo
     *
     * Return the potential question types that would be required for a given quiz.
     *
     * @param  \OpenAPI\Client\Model\ModQuizGetQuizAccessInformationRequest $mod_quiz_get_quiz_access_information_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizGetQuizRequiredQtypes'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModQuizGetQuizRequiredQtypes200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modQuizGetQuizRequiredQtypesWithHttpInfo($mod_quiz_get_quiz_access_information_request, string $contentType = self::contentTypes['modQuizGetQuizRequiredQtypes'][0])
    {
        $request = $this->modQuizGetQuizRequiredQtypesRequest($mod_quiz_get_quiz_access_information_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModQuizGetQuizRequiredQtypes200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModQuizGetQuizRequiredQtypes200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModQuizGetQuizRequiredQtypes200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModQuizGetQuizRequiredQtypes200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModQuizGetQuizRequiredQtypes200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modQuizGetQuizRequiredQtypesAsync
     *
     * Return the potential question types that would be required for a given quiz.
     *
     * @param  \OpenAPI\Client\Model\ModQuizGetQuizAccessInformationRequest $mod_quiz_get_quiz_access_information_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizGetQuizRequiredQtypes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modQuizGetQuizRequiredQtypesAsync($mod_quiz_get_quiz_access_information_request, string $contentType = self::contentTypes['modQuizGetQuizRequiredQtypes'][0])
    {
        return $this->modQuizGetQuizRequiredQtypesAsyncWithHttpInfo($mod_quiz_get_quiz_access_information_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modQuizGetQuizRequiredQtypesAsyncWithHttpInfo
     *
     * Return the potential question types that would be required for a given quiz.
     *
     * @param  \OpenAPI\Client\Model\ModQuizGetQuizAccessInformationRequest $mod_quiz_get_quiz_access_information_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizGetQuizRequiredQtypes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modQuizGetQuizRequiredQtypesAsyncWithHttpInfo($mod_quiz_get_quiz_access_information_request, string $contentType = self::contentTypes['modQuizGetQuizRequiredQtypes'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModQuizGetQuizRequiredQtypes200Response';
        $request = $this->modQuizGetQuizRequiredQtypesRequest($mod_quiz_get_quiz_access_information_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modQuizGetQuizRequiredQtypes'
     *
     * @param  \OpenAPI\Client\Model\ModQuizGetQuizAccessInformationRequest $mod_quiz_get_quiz_access_information_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizGetQuizRequiredQtypes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modQuizGetQuizRequiredQtypesRequest($mod_quiz_get_quiz_access_information_request, string $contentType = self::contentTypes['modQuizGetQuizRequiredQtypes'][0])
    {

        // verify the required parameter 'mod_quiz_get_quiz_access_information_request' is set
        if ($mod_quiz_get_quiz_access_information_request === null || (is_array($mod_quiz_get_quiz_access_information_request) && count($mod_quiz_get_quiz_access_information_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_quiz_get_quiz_access_information_request when calling modQuizGetQuizRequiredQtypes'
            );
        }


        $resourcePath = '/mod_quiz_get_quiz_required_qtypes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_quiz_get_quiz_access_information_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_quiz_get_quiz_access_information_request));
            } else {
                $httpBody = $mod_quiz_get_quiz_access_information_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modQuizGetQuizzesByCourses
     *
     * Returns a list of quizzes in a provided list of courses,                             if no list is provided all quizzes that the user can view will be returned.
     *
     * @param  \OpenAPI\Client\Model\ModChatGetChatsByCoursesRequest $mod_chat_get_chats_by_courses_request mod_chat_get_chats_by_courses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizGetQuizzesByCourses'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModQuizGetQuizzesByCourses200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modQuizGetQuizzesByCourses($mod_chat_get_chats_by_courses_request, string $contentType = self::contentTypes['modQuizGetQuizzesByCourses'][0])
    {
        list($response) = $this->modQuizGetQuizzesByCoursesWithHttpInfo($mod_chat_get_chats_by_courses_request, $contentType);
        return $response;
    }

    /**
     * Operation modQuizGetQuizzesByCoursesWithHttpInfo
     *
     * Returns a list of quizzes in a provided list of courses,                             if no list is provided all quizzes that the user can view will be returned.
     *
     * @param  \OpenAPI\Client\Model\ModChatGetChatsByCoursesRequest $mod_chat_get_chats_by_courses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizGetQuizzesByCourses'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModQuizGetQuizzesByCourses200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modQuizGetQuizzesByCoursesWithHttpInfo($mod_chat_get_chats_by_courses_request, string $contentType = self::contentTypes['modQuizGetQuizzesByCourses'][0])
    {
        $request = $this->modQuizGetQuizzesByCoursesRequest($mod_chat_get_chats_by_courses_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModQuizGetQuizzesByCourses200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModQuizGetQuizzesByCourses200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModQuizGetQuizzesByCourses200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModQuizGetQuizzesByCourses200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModQuizGetQuizzesByCourses200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modQuizGetQuizzesByCoursesAsync
     *
     * Returns a list of quizzes in a provided list of courses,                             if no list is provided all quizzes that the user can view will be returned.
     *
     * @param  \OpenAPI\Client\Model\ModChatGetChatsByCoursesRequest $mod_chat_get_chats_by_courses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizGetQuizzesByCourses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modQuizGetQuizzesByCoursesAsync($mod_chat_get_chats_by_courses_request, string $contentType = self::contentTypes['modQuizGetQuizzesByCourses'][0])
    {
        return $this->modQuizGetQuizzesByCoursesAsyncWithHttpInfo($mod_chat_get_chats_by_courses_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modQuizGetQuizzesByCoursesAsyncWithHttpInfo
     *
     * Returns a list of quizzes in a provided list of courses,                             if no list is provided all quizzes that the user can view will be returned.
     *
     * @param  \OpenAPI\Client\Model\ModChatGetChatsByCoursesRequest $mod_chat_get_chats_by_courses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizGetQuizzesByCourses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modQuizGetQuizzesByCoursesAsyncWithHttpInfo($mod_chat_get_chats_by_courses_request, string $contentType = self::contentTypes['modQuizGetQuizzesByCourses'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModQuizGetQuizzesByCourses200Response';
        $request = $this->modQuizGetQuizzesByCoursesRequest($mod_chat_get_chats_by_courses_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modQuizGetQuizzesByCourses'
     *
     * @param  \OpenAPI\Client\Model\ModChatGetChatsByCoursesRequest $mod_chat_get_chats_by_courses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizGetQuizzesByCourses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modQuizGetQuizzesByCoursesRequest($mod_chat_get_chats_by_courses_request, string $contentType = self::contentTypes['modQuizGetQuizzesByCourses'][0])
    {

        // verify the required parameter 'mod_chat_get_chats_by_courses_request' is set
        if ($mod_chat_get_chats_by_courses_request === null || (is_array($mod_chat_get_chats_by_courses_request) && count($mod_chat_get_chats_by_courses_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_chat_get_chats_by_courses_request when calling modQuizGetQuizzesByCourses'
            );
        }


        $resourcePath = '/mod_quiz_get_quizzes_by_courses';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_chat_get_chats_by_courses_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_chat_get_chats_by_courses_request));
            } else {
                $httpBody = $mod_chat_get_chats_by_courses_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modQuizGetReopenAttemptConfirmation
     *
     * Verify it is OK to re-open a given quiz attempt, and if so, return a suitable confirmation message.
     *
     * @param  \OpenAPI\Client\Model\ModQuizGetReopenAttemptConfirmationRequest $mod_quiz_get_reopen_attempt_confirmation_request mod_quiz_get_reopen_attempt_confirmation_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizGetReopenAttemptConfirmation'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modQuizGetReopenAttemptConfirmation($mod_quiz_get_reopen_attempt_confirmation_request, string $contentType = self::contentTypes['modQuizGetReopenAttemptConfirmation'][0])
    {
        list($response) = $this->modQuizGetReopenAttemptConfirmationWithHttpInfo($mod_quiz_get_reopen_attempt_confirmation_request, $contentType);
        return $response;
    }

    /**
     * Operation modQuizGetReopenAttemptConfirmationWithHttpInfo
     *
     * Verify it is OK to re-open a given quiz attempt, and if so, return a suitable confirmation message.
     *
     * @param  \OpenAPI\Client\Model\ModQuizGetReopenAttemptConfirmationRequest $mod_quiz_get_reopen_attempt_confirmation_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizGetReopenAttemptConfirmation'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modQuizGetReopenAttemptConfirmationWithHttpInfo($mod_quiz_get_reopen_attempt_confirmation_request, string $contentType = self::contentTypes['modQuizGetReopenAttemptConfirmation'][0])
    {
        $request = $this->modQuizGetReopenAttemptConfirmationRequest($mod_quiz_get_reopen_attempt_confirmation_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modQuizGetReopenAttemptConfirmationAsync
     *
     * Verify it is OK to re-open a given quiz attempt, and if so, return a suitable confirmation message.
     *
     * @param  \OpenAPI\Client\Model\ModQuizGetReopenAttemptConfirmationRequest $mod_quiz_get_reopen_attempt_confirmation_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizGetReopenAttemptConfirmation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modQuizGetReopenAttemptConfirmationAsync($mod_quiz_get_reopen_attempt_confirmation_request, string $contentType = self::contentTypes['modQuizGetReopenAttemptConfirmation'][0])
    {
        return $this->modQuizGetReopenAttemptConfirmationAsyncWithHttpInfo($mod_quiz_get_reopen_attempt_confirmation_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modQuizGetReopenAttemptConfirmationAsyncWithHttpInfo
     *
     * Verify it is OK to re-open a given quiz attempt, and if so, return a suitable confirmation message.
     *
     * @param  \OpenAPI\Client\Model\ModQuizGetReopenAttemptConfirmationRequest $mod_quiz_get_reopen_attempt_confirmation_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizGetReopenAttemptConfirmation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modQuizGetReopenAttemptConfirmationAsyncWithHttpInfo($mod_quiz_get_reopen_attempt_confirmation_request, string $contentType = self::contentTypes['modQuizGetReopenAttemptConfirmation'][0])
    {
        $returnType = 'object';
        $request = $this->modQuizGetReopenAttemptConfirmationRequest($mod_quiz_get_reopen_attempt_confirmation_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modQuizGetReopenAttemptConfirmation'
     *
     * @param  \OpenAPI\Client\Model\ModQuizGetReopenAttemptConfirmationRequest $mod_quiz_get_reopen_attempt_confirmation_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizGetReopenAttemptConfirmation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modQuizGetReopenAttemptConfirmationRequest($mod_quiz_get_reopen_attempt_confirmation_request, string $contentType = self::contentTypes['modQuizGetReopenAttemptConfirmation'][0])
    {

        // verify the required parameter 'mod_quiz_get_reopen_attempt_confirmation_request' is set
        if ($mod_quiz_get_reopen_attempt_confirmation_request === null || (is_array($mod_quiz_get_reopen_attempt_confirmation_request) && count($mod_quiz_get_reopen_attempt_confirmation_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_quiz_get_reopen_attempt_confirmation_request when calling modQuizGetReopenAttemptConfirmation'
            );
        }


        $resourcePath = '/mod_quiz_get_reopen_attempt_confirmation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_quiz_get_reopen_attempt_confirmation_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_quiz_get_reopen_attempt_confirmation_request));
            } else {
                $httpBody = $mod_quiz_get_reopen_attempt_confirmation_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modQuizGetUserAttempts
     *
     * Return a list of attempts for the given quiz and user.
     *
     * @param  \OpenAPI\Client\Model\ModQuizGetUserAttemptsRequest $mod_quiz_get_user_attempts_request mod_quiz_get_user_attempts_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizGetUserAttempts'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModQuizGetUserAttempts200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modQuizGetUserAttempts($mod_quiz_get_user_attempts_request, string $contentType = self::contentTypes['modQuizGetUserAttempts'][0])
    {
        list($response) = $this->modQuizGetUserAttemptsWithHttpInfo($mod_quiz_get_user_attempts_request, $contentType);
        return $response;
    }

    /**
     * Operation modQuizGetUserAttemptsWithHttpInfo
     *
     * Return a list of attempts for the given quiz and user.
     *
     * @param  \OpenAPI\Client\Model\ModQuizGetUserAttemptsRequest $mod_quiz_get_user_attempts_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizGetUserAttempts'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModQuizGetUserAttempts200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modQuizGetUserAttemptsWithHttpInfo($mod_quiz_get_user_attempts_request, string $contentType = self::contentTypes['modQuizGetUserAttempts'][0])
    {
        $request = $this->modQuizGetUserAttemptsRequest($mod_quiz_get_user_attempts_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModQuizGetUserAttempts200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModQuizGetUserAttempts200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModQuizGetUserAttempts200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModQuizGetUserAttempts200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModQuizGetUserAttempts200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modQuizGetUserAttemptsAsync
     *
     * Return a list of attempts for the given quiz and user.
     *
     * @param  \OpenAPI\Client\Model\ModQuizGetUserAttemptsRequest $mod_quiz_get_user_attempts_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizGetUserAttempts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modQuizGetUserAttemptsAsync($mod_quiz_get_user_attempts_request, string $contentType = self::contentTypes['modQuizGetUserAttempts'][0])
    {
        return $this->modQuizGetUserAttemptsAsyncWithHttpInfo($mod_quiz_get_user_attempts_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modQuizGetUserAttemptsAsyncWithHttpInfo
     *
     * Return a list of attempts for the given quiz and user.
     *
     * @param  \OpenAPI\Client\Model\ModQuizGetUserAttemptsRequest $mod_quiz_get_user_attempts_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizGetUserAttempts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modQuizGetUserAttemptsAsyncWithHttpInfo($mod_quiz_get_user_attempts_request, string $contentType = self::contentTypes['modQuizGetUserAttempts'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModQuizGetUserAttempts200Response';
        $request = $this->modQuizGetUserAttemptsRequest($mod_quiz_get_user_attempts_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modQuizGetUserAttempts'
     *
     * @param  \OpenAPI\Client\Model\ModQuizGetUserAttemptsRequest $mod_quiz_get_user_attempts_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizGetUserAttempts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modQuizGetUserAttemptsRequest($mod_quiz_get_user_attempts_request, string $contentType = self::contentTypes['modQuizGetUserAttempts'][0])
    {

        // verify the required parameter 'mod_quiz_get_user_attempts_request' is set
        if ($mod_quiz_get_user_attempts_request === null || (is_array($mod_quiz_get_user_attempts_request) && count($mod_quiz_get_user_attempts_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_quiz_get_user_attempts_request when calling modQuizGetUserAttempts'
            );
        }


        $resourcePath = '/mod_quiz_get_user_attempts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_quiz_get_user_attempts_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_quiz_get_user_attempts_request));
            } else {
                $httpBody = $mod_quiz_get_user_attempts_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modQuizGetUserBestGrade
     *
     * Get the best current grade for the given user on a quiz.
     *
     * @param  \OpenAPI\Client\Model\ModQuizGetUserBestGradeRequest $mod_quiz_get_user_best_grade_request mod_quiz_get_user_best_grade_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizGetUserBestGrade'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModQuizGetUserBestGrade200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modQuizGetUserBestGrade($mod_quiz_get_user_best_grade_request, string $contentType = self::contentTypes['modQuizGetUserBestGrade'][0])
    {
        list($response) = $this->modQuizGetUserBestGradeWithHttpInfo($mod_quiz_get_user_best_grade_request, $contentType);
        return $response;
    }

    /**
     * Operation modQuizGetUserBestGradeWithHttpInfo
     *
     * Get the best current grade for the given user on a quiz.
     *
     * @param  \OpenAPI\Client\Model\ModQuizGetUserBestGradeRequest $mod_quiz_get_user_best_grade_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizGetUserBestGrade'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModQuizGetUserBestGrade200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modQuizGetUserBestGradeWithHttpInfo($mod_quiz_get_user_best_grade_request, string $contentType = self::contentTypes['modQuizGetUserBestGrade'][0])
    {
        $request = $this->modQuizGetUserBestGradeRequest($mod_quiz_get_user_best_grade_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModQuizGetUserBestGrade200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModQuizGetUserBestGrade200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModQuizGetUserBestGrade200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModQuizGetUserBestGrade200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModQuizGetUserBestGrade200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modQuizGetUserBestGradeAsync
     *
     * Get the best current grade for the given user on a quiz.
     *
     * @param  \OpenAPI\Client\Model\ModQuizGetUserBestGradeRequest $mod_quiz_get_user_best_grade_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizGetUserBestGrade'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modQuizGetUserBestGradeAsync($mod_quiz_get_user_best_grade_request, string $contentType = self::contentTypes['modQuizGetUserBestGrade'][0])
    {
        return $this->modQuizGetUserBestGradeAsyncWithHttpInfo($mod_quiz_get_user_best_grade_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modQuizGetUserBestGradeAsyncWithHttpInfo
     *
     * Get the best current grade for the given user on a quiz.
     *
     * @param  \OpenAPI\Client\Model\ModQuizGetUserBestGradeRequest $mod_quiz_get_user_best_grade_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizGetUserBestGrade'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modQuizGetUserBestGradeAsyncWithHttpInfo($mod_quiz_get_user_best_grade_request, string $contentType = self::contentTypes['modQuizGetUserBestGrade'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModQuizGetUserBestGrade200Response';
        $request = $this->modQuizGetUserBestGradeRequest($mod_quiz_get_user_best_grade_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modQuizGetUserBestGrade'
     *
     * @param  \OpenAPI\Client\Model\ModQuizGetUserBestGradeRequest $mod_quiz_get_user_best_grade_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizGetUserBestGrade'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modQuizGetUserBestGradeRequest($mod_quiz_get_user_best_grade_request, string $contentType = self::contentTypes['modQuizGetUserBestGrade'][0])
    {

        // verify the required parameter 'mod_quiz_get_user_best_grade_request' is set
        if ($mod_quiz_get_user_best_grade_request === null || (is_array($mod_quiz_get_user_best_grade_request) && count($mod_quiz_get_user_best_grade_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_quiz_get_user_best_grade_request when calling modQuizGetUserBestGrade'
            );
        }


        $resourcePath = '/mod_quiz_get_user_best_grade';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_quiz_get_user_best_grade_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_quiz_get_user_best_grade_request));
            } else {
                $httpBody = $mod_quiz_get_user_best_grade_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modQuizProcessAttempt
     *
     * Process responses during an attempt at a quiz and also deals with attempts finishing.
     *
     * @param  \OpenAPI\Client\Model\ModQuizProcessAttemptRequest $mod_quiz_process_attempt_request mod_quiz_process_attempt_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizProcessAttempt'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModQuizProcessAttempt200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modQuizProcessAttempt($mod_quiz_process_attempt_request, string $contentType = self::contentTypes['modQuizProcessAttempt'][0])
    {
        list($response) = $this->modQuizProcessAttemptWithHttpInfo($mod_quiz_process_attempt_request, $contentType);
        return $response;
    }

    /**
     * Operation modQuizProcessAttemptWithHttpInfo
     *
     * Process responses during an attempt at a quiz and also deals with attempts finishing.
     *
     * @param  \OpenAPI\Client\Model\ModQuizProcessAttemptRequest $mod_quiz_process_attempt_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizProcessAttempt'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModQuizProcessAttempt200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modQuizProcessAttemptWithHttpInfo($mod_quiz_process_attempt_request, string $contentType = self::contentTypes['modQuizProcessAttempt'][0])
    {
        $request = $this->modQuizProcessAttemptRequest($mod_quiz_process_attempt_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModQuizProcessAttempt200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModQuizProcessAttempt200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModQuizProcessAttempt200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModQuizProcessAttempt200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModQuizProcessAttempt200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modQuizProcessAttemptAsync
     *
     * Process responses during an attempt at a quiz and also deals with attempts finishing.
     *
     * @param  \OpenAPI\Client\Model\ModQuizProcessAttemptRequest $mod_quiz_process_attempt_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizProcessAttempt'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modQuizProcessAttemptAsync($mod_quiz_process_attempt_request, string $contentType = self::contentTypes['modQuizProcessAttempt'][0])
    {
        return $this->modQuizProcessAttemptAsyncWithHttpInfo($mod_quiz_process_attempt_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modQuizProcessAttemptAsyncWithHttpInfo
     *
     * Process responses during an attempt at a quiz and also deals with attempts finishing.
     *
     * @param  \OpenAPI\Client\Model\ModQuizProcessAttemptRequest $mod_quiz_process_attempt_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizProcessAttempt'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modQuizProcessAttemptAsyncWithHttpInfo($mod_quiz_process_attempt_request, string $contentType = self::contentTypes['modQuizProcessAttempt'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModQuizProcessAttempt200Response';
        $request = $this->modQuizProcessAttemptRequest($mod_quiz_process_attempt_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modQuizProcessAttempt'
     *
     * @param  \OpenAPI\Client\Model\ModQuizProcessAttemptRequest $mod_quiz_process_attempt_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizProcessAttempt'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modQuizProcessAttemptRequest($mod_quiz_process_attempt_request, string $contentType = self::contentTypes['modQuizProcessAttempt'][0])
    {

        // verify the required parameter 'mod_quiz_process_attempt_request' is set
        if ($mod_quiz_process_attempt_request === null || (is_array($mod_quiz_process_attempt_request) && count($mod_quiz_process_attempt_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_quiz_process_attempt_request when calling modQuizProcessAttempt'
            );
        }


        $resourcePath = '/mod_quiz_process_attempt';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_quiz_process_attempt_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_quiz_process_attempt_request));
            } else {
                $httpBody = $mod_quiz_process_attempt_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modQuizReopenAttempt
     *
     * Re-open an attempt that is currently in the never submitted state.
     *
     * @param  \OpenAPI\Client\Model\ModQuizReopenAttemptRequest $mod_quiz_reopen_attempt_request mod_quiz_reopen_attempt_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizReopenAttempt'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modQuizReopenAttempt($mod_quiz_reopen_attempt_request, string $contentType = self::contentTypes['modQuizReopenAttempt'][0])
    {
        list($response) = $this->modQuizReopenAttemptWithHttpInfo($mod_quiz_reopen_attempt_request, $contentType);
        return $response;
    }

    /**
     * Operation modQuizReopenAttemptWithHttpInfo
     *
     * Re-open an attempt that is currently in the never submitted state.
     *
     * @param  \OpenAPI\Client\Model\ModQuizReopenAttemptRequest $mod_quiz_reopen_attempt_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizReopenAttempt'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modQuizReopenAttemptWithHttpInfo($mod_quiz_reopen_attempt_request, string $contentType = self::contentTypes['modQuizReopenAttempt'][0])
    {
        $request = $this->modQuizReopenAttemptRequest($mod_quiz_reopen_attempt_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modQuizReopenAttemptAsync
     *
     * Re-open an attempt that is currently in the never submitted state.
     *
     * @param  \OpenAPI\Client\Model\ModQuizReopenAttemptRequest $mod_quiz_reopen_attempt_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizReopenAttempt'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modQuizReopenAttemptAsync($mod_quiz_reopen_attempt_request, string $contentType = self::contentTypes['modQuizReopenAttempt'][0])
    {
        return $this->modQuizReopenAttemptAsyncWithHttpInfo($mod_quiz_reopen_attempt_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modQuizReopenAttemptAsyncWithHttpInfo
     *
     * Re-open an attempt that is currently in the never submitted state.
     *
     * @param  \OpenAPI\Client\Model\ModQuizReopenAttemptRequest $mod_quiz_reopen_attempt_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizReopenAttempt'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modQuizReopenAttemptAsyncWithHttpInfo($mod_quiz_reopen_attempt_request, string $contentType = self::contentTypes['modQuizReopenAttempt'][0])
    {
        $returnType = 'object';
        $request = $this->modQuizReopenAttemptRequest($mod_quiz_reopen_attempt_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modQuizReopenAttempt'
     *
     * @param  \OpenAPI\Client\Model\ModQuizReopenAttemptRequest $mod_quiz_reopen_attempt_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizReopenAttempt'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modQuizReopenAttemptRequest($mod_quiz_reopen_attempt_request, string $contentType = self::contentTypes['modQuizReopenAttempt'][0])
    {

        // verify the required parameter 'mod_quiz_reopen_attempt_request' is set
        if ($mod_quiz_reopen_attempt_request === null || (is_array($mod_quiz_reopen_attempt_request) && count($mod_quiz_reopen_attempt_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_quiz_reopen_attempt_request when calling modQuizReopenAttempt'
            );
        }


        $resourcePath = '/mod_quiz_reopen_attempt';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_quiz_reopen_attempt_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_quiz_reopen_attempt_request));
            } else {
                $httpBody = $mod_quiz_reopen_attempt_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modQuizSaveAttempt
     *
     * Processes save requests during the quiz.                             This function is intended for the quiz auto-save feature.
     *
     * @param  \OpenAPI\Client\Model\ModQuizSaveAttemptRequest $mod_quiz_save_attempt_request mod_quiz_save_attempt_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizSaveAttempt'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modQuizSaveAttempt($mod_quiz_save_attempt_request, string $contentType = self::contentTypes['modQuizSaveAttempt'][0])
    {
        list($response) = $this->modQuizSaveAttemptWithHttpInfo($mod_quiz_save_attempt_request, $contentType);
        return $response;
    }

    /**
     * Operation modQuizSaveAttemptWithHttpInfo
     *
     * Processes save requests during the quiz.                             This function is intended for the quiz auto-save feature.
     *
     * @param  \OpenAPI\Client\Model\ModQuizSaveAttemptRequest $mod_quiz_save_attempt_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizSaveAttempt'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modQuizSaveAttemptWithHttpInfo($mod_quiz_save_attempt_request, string $contentType = self::contentTypes['modQuizSaveAttempt'][0])
    {
        $request = $this->modQuizSaveAttemptRequest($mod_quiz_save_attempt_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modQuizSaveAttemptAsync
     *
     * Processes save requests during the quiz.                             This function is intended for the quiz auto-save feature.
     *
     * @param  \OpenAPI\Client\Model\ModQuizSaveAttemptRequest $mod_quiz_save_attempt_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizSaveAttempt'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modQuizSaveAttemptAsync($mod_quiz_save_attempt_request, string $contentType = self::contentTypes['modQuizSaveAttempt'][0])
    {
        return $this->modQuizSaveAttemptAsyncWithHttpInfo($mod_quiz_save_attempt_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modQuizSaveAttemptAsyncWithHttpInfo
     *
     * Processes save requests during the quiz.                             This function is intended for the quiz auto-save feature.
     *
     * @param  \OpenAPI\Client\Model\ModQuizSaveAttemptRequest $mod_quiz_save_attempt_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizSaveAttempt'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modQuizSaveAttemptAsyncWithHttpInfo($mod_quiz_save_attempt_request, string $contentType = self::contentTypes['modQuizSaveAttempt'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response';
        $request = $this->modQuizSaveAttemptRequest($mod_quiz_save_attempt_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modQuizSaveAttempt'
     *
     * @param  \OpenAPI\Client\Model\ModQuizSaveAttemptRequest $mod_quiz_save_attempt_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizSaveAttempt'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modQuizSaveAttemptRequest($mod_quiz_save_attempt_request, string $contentType = self::contentTypes['modQuizSaveAttempt'][0])
    {

        // verify the required parameter 'mod_quiz_save_attempt_request' is set
        if ($mod_quiz_save_attempt_request === null || (is_array($mod_quiz_save_attempt_request) && count($mod_quiz_save_attempt_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_quiz_save_attempt_request when calling modQuizSaveAttempt'
            );
        }


        $resourcePath = '/mod_quiz_save_attempt';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_quiz_save_attempt_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_quiz_save_attempt_request));
            } else {
                $httpBody = $mod_quiz_save_attempt_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modQuizSetQuestionVersion
     *
     * Set the version of question that would be required for a given quiz.
     *
     * @param  \OpenAPI\Client\Model\ModQuizSetQuestionVersionRequest $mod_quiz_set_question_version_request mod_quiz_set_question_version_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizSetQuestionVersion'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModQuizSetQuestionVersion200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modQuizSetQuestionVersion($mod_quiz_set_question_version_request, string $contentType = self::contentTypes['modQuizSetQuestionVersion'][0])
    {
        list($response) = $this->modQuizSetQuestionVersionWithHttpInfo($mod_quiz_set_question_version_request, $contentType);
        return $response;
    }

    /**
     * Operation modQuizSetQuestionVersionWithHttpInfo
     *
     * Set the version of question that would be required for a given quiz.
     *
     * @param  \OpenAPI\Client\Model\ModQuizSetQuestionVersionRequest $mod_quiz_set_question_version_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizSetQuestionVersion'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModQuizSetQuestionVersion200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modQuizSetQuestionVersionWithHttpInfo($mod_quiz_set_question_version_request, string $contentType = self::contentTypes['modQuizSetQuestionVersion'][0])
    {
        $request = $this->modQuizSetQuestionVersionRequest($mod_quiz_set_question_version_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModQuizSetQuestionVersion200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModQuizSetQuestionVersion200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModQuizSetQuestionVersion200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModQuizSetQuestionVersion200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModQuizSetQuestionVersion200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modQuizSetQuestionVersionAsync
     *
     * Set the version of question that would be required for a given quiz.
     *
     * @param  \OpenAPI\Client\Model\ModQuizSetQuestionVersionRequest $mod_quiz_set_question_version_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizSetQuestionVersion'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modQuizSetQuestionVersionAsync($mod_quiz_set_question_version_request, string $contentType = self::contentTypes['modQuizSetQuestionVersion'][0])
    {
        return $this->modQuizSetQuestionVersionAsyncWithHttpInfo($mod_quiz_set_question_version_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modQuizSetQuestionVersionAsyncWithHttpInfo
     *
     * Set the version of question that would be required for a given quiz.
     *
     * @param  \OpenAPI\Client\Model\ModQuizSetQuestionVersionRequest $mod_quiz_set_question_version_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizSetQuestionVersion'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modQuizSetQuestionVersionAsyncWithHttpInfo($mod_quiz_set_question_version_request, string $contentType = self::contentTypes['modQuizSetQuestionVersion'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModQuizSetQuestionVersion200Response';
        $request = $this->modQuizSetQuestionVersionRequest($mod_quiz_set_question_version_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modQuizSetQuestionVersion'
     *
     * @param  \OpenAPI\Client\Model\ModQuizSetQuestionVersionRequest $mod_quiz_set_question_version_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizSetQuestionVersion'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modQuizSetQuestionVersionRequest($mod_quiz_set_question_version_request, string $contentType = self::contentTypes['modQuizSetQuestionVersion'][0])
    {

        // verify the required parameter 'mod_quiz_set_question_version_request' is set
        if ($mod_quiz_set_question_version_request === null || (is_array($mod_quiz_set_question_version_request) && count($mod_quiz_set_question_version_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_quiz_set_question_version_request when calling modQuizSetQuestionVersion'
            );
        }


        $resourcePath = '/mod_quiz_set_question_version';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_quiz_set_question_version_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_quiz_set_question_version_request));
            } else {
                $httpBody = $mod_quiz_set_question_version_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modQuizStartAttempt
     *
     * Starts a new attempt at a quiz.
     *
     * @param  \OpenAPI\Client\Model\ModQuizStartAttemptRequest $mod_quiz_start_attempt_request mod_quiz_start_attempt_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizStartAttempt'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModQuizStartAttempt200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modQuizStartAttempt($mod_quiz_start_attempt_request, string $contentType = self::contentTypes['modQuizStartAttempt'][0])
    {
        list($response) = $this->modQuizStartAttemptWithHttpInfo($mod_quiz_start_attempt_request, $contentType);
        return $response;
    }

    /**
     * Operation modQuizStartAttemptWithHttpInfo
     *
     * Starts a new attempt at a quiz.
     *
     * @param  \OpenAPI\Client\Model\ModQuizStartAttemptRequest $mod_quiz_start_attempt_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizStartAttempt'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModQuizStartAttempt200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modQuizStartAttemptWithHttpInfo($mod_quiz_start_attempt_request, string $contentType = self::contentTypes['modQuizStartAttempt'][0])
    {
        $request = $this->modQuizStartAttemptRequest($mod_quiz_start_attempt_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModQuizStartAttempt200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModQuizStartAttempt200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModQuizStartAttempt200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModQuizStartAttempt200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModQuizStartAttempt200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modQuizStartAttemptAsync
     *
     * Starts a new attempt at a quiz.
     *
     * @param  \OpenAPI\Client\Model\ModQuizStartAttemptRequest $mod_quiz_start_attempt_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizStartAttempt'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modQuizStartAttemptAsync($mod_quiz_start_attempt_request, string $contentType = self::contentTypes['modQuizStartAttempt'][0])
    {
        return $this->modQuizStartAttemptAsyncWithHttpInfo($mod_quiz_start_attempt_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modQuizStartAttemptAsyncWithHttpInfo
     *
     * Starts a new attempt at a quiz.
     *
     * @param  \OpenAPI\Client\Model\ModQuizStartAttemptRequest $mod_quiz_start_attempt_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizStartAttempt'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modQuizStartAttemptAsyncWithHttpInfo($mod_quiz_start_attempt_request, string $contentType = self::contentTypes['modQuizStartAttempt'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModQuizStartAttempt200Response';
        $request = $this->modQuizStartAttemptRequest($mod_quiz_start_attempt_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modQuizStartAttempt'
     *
     * @param  \OpenAPI\Client\Model\ModQuizStartAttemptRequest $mod_quiz_start_attempt_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizStartAttempt'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modQuizStartAttemptRequest($mod_quiz_start_attempt_request, string $contentType = self::contentTypes['modQuizStartAttempt'][0])
    {

        // verify the required parameter 'mod_quiz_start_attempt_request' is set
        if ($mod_quiz_start_attempt_request === null || (is_array($mod_quiz_start_attempt_request) && count($mod_quiz_start_attempt_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_quiz_start_attempt_request when calling modQuizStartAttempt'
            );
        }


        $resourcePath = '/mod_quiz_start_attempt';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_quiz_start_attempt_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_quiz_start_attempt_request));
            } else {
                $httpBody = $mod_quiz_start_attempt_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modQuizUpdateFilterCondition
     *
     * Update filter condition for a random question slot.
     *
     * @param  \OpenAPI\Client\Model\ModQuizUpdateFilterConditionRequest $mod_quiz_update_filter_condition_request mod_quiz_update_filter_condition_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizUpdateFilterCondition'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModQuizAddRandomQuestions200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modQuizUpdateFilterCondition($mod_quiz_update_filter_condition_request, string $contentType = self::contentTypes['modQuizUpdateFilterCondition'][0])
    {
        list($response) = $this->modQuizUpdateFilterConditionWithHttpInfo($mod_quiz_update_filter_condition_request, $contentType);
        return $response;
    }

    /**
     * Operation modQuizUpdateFilterConditionWithHttpInfo
     *
     * Update filter condition for a random question slot.
     *
     * @param  \OpenAPI\Client\Model\ModQuizUpdateFilterConditionRequest $mod_quiz_update_filter_condition_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizUpdateFilterCondition'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModQuizAddRandomQuestions200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modQuizUpdateFilterConditionWithHttpInfo($mod_quiz_update_filter_condition_request, string $contentType = self::contentTypes['modQuizUpdateFilterCondition'][0])
    {
        $request = $this->modQuizUpdateFilterConditionRequest($mod_quiz_update_filter_condition_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModQuizAddRandomQuestions200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModQuizAddRandomQuestions200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModQuizAddRandomQuestions200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModQuizAddRandomQuestions200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModQuizAddRandomQuestions200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modQuizUpdateFilterConditionAsync
     *
     * Update filter condition for a random question slot.
     *
     * @param  \OpenAPI\Client\Model\ModQuizUpdateFilterConditionRequest $mod_quiz_update_filter_condition_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizUpdateFilterCondition'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modQuizUpdateFilterConditionAsync($mod_quiz_update_filter_condition_request, string $contentType = self::contentTypes['modQuizUpdateFilterCondition'][0])
    {
        return $this->modQuizUpdateFilterConditionAsyncWithHttpInfo($mod_quiz_update_filter_condition_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modQuizUpdateFilterConditionAsyncWithHttpInfo
     *
     * Update filter condition for a random question slot.
     *
     * @param  \OpenAPI\Client\Model\ModQuizUpdateFilterConditionRequest $mod_quiz_update_filter_condition_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizUpdateFilterCondition'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modQuizUpdateFilterConditionAsyncWithHttpInfo($mod_quiz_update_filter_condition_request, string $contentType = self::contentTypes['modQuizUpdateFilterCondition'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModQuizAddRandomQuestions200Response';
        $request = $this->modQuizUpdateFilterConditionRequest($mod_quiz_update_filter_condition_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modQuizUpdateFilterCondition'
     *
     * @param  \OpenAPI\Client\Model\ModQuizUpdateFilterConditionRequest $mod_quiz_update_filter_condition_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizUpdateFilterCondition'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modQuizUpdateFilterConditionRequest($mod_quiz_update_filter_condition_request, string $contentType = self::contentTypes['modQuizUpdateFilterCondition'][0])
    {

        // verify the required parameter 'mod_quiz_update_filter_condition_request' is set
        if ($mod_quiz_update_filter_condition_request === null || (is_array($mod_quiz_update_filter_condition_request) && count($mod_quiz_update_filter_condition_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_quiz_update_filter_condition_request when calling modQuizUpdateFilterCondition'
            );
        }


        $resourcePath = '/mod_quiz_update_filter_condition';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_quiz_update_filter_condition_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_quiz_update_filter_condition_request));
            } else {
                $httpBody = $mod_quiz_update_filter_condition_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modQuizViewAttempt
     *
     * Trigger the attempt viewed event.
     *
     * @param  \OpenAPI\Client\Model\ModQuizViewAttemptRequest $mod_quiz_view_attempt_request mod_quiz_view_attempt_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizViewAttempt'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modQuizViewAttempt($mod_quiz_view_attempt_request, string $contentType = self::contentTypes['modQuizViewAttempt'][0])
    {
        list($response) = $this->modQuizViewAttemptWithHttpInfo($mod_quiz_view_attempt_request, $contentType);
        return $response;
    }

    /**
     * Operation modQuizViewAttemptWithHttpInfo
     *
     * Trigger the attempt viewed event.
     *
     * @param  \OpenAPI\Client\Model\ModQuizViewAttemptRequest $mod_quiz_view_attempt_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizViewAttempt'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modQuizViewAttemptWithHttpInfo($mod_quiz_view_attempt_request, string $contentType = self::contentTypes['modQuizViewAttempt'][0])
    {
        $request = $this->modQuizViewAttemptRequest($mod_quiz_view_attempt_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modQuizViewAttemptAsync
     *
     * Trigger the attempt viewed event.
     *
     * @param  \OpenAPI\Client\Model\ModQuizViewAttemptRequest $mod_quiz_view_attempt_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizViewAttempt'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modQuizViewAttemptAsync($mod_quiz_view_attempt_request, string $contentType = self::contentTypes['modQuizViewAttempt'][0])
    {
        return $this->modQuizViewAttemptAsyncWithHttpInfo($mod_quiz_view_attempt_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modQuizViewAttemptAsyncWithHttpInfo
     *
     * Trigger the attempt viewed event.
     *
     * @param  \OpenAPI\Client\Model\ModQuizViewAttemptRequest $mod_quiz_view_attempt_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizViewAttempt'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modQuizViewAttemptAsyncWithHttpInfo($mod_quiz_view_attempt_request, string $contentType = self::contentTypes['modQuizViewAttempt'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response';
        $request = $this->modQuizViewAttemptRequest($mod_quiz_view_attempt_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modQuizViewAttempt'
     *
     * @param  \OpenAPI\Client\Model\ModQuizViewAttemptRequest $mod_quiz_view_attempt_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizViewAttempt'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modQuizViewAttemptRequest($mod_quiz_view_attempt_request, string $contentType = self::contentTypes['modQuizViewAttempt'][0])
    {

        // verify the required parameter 'mod_quiz_view_attempt_request' is set
        if ($mod_quiz_view_attempt_request === null || (is_array($mod_quiz_view_attempt_request) && count($mod_quiz_view_attempt_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_quiz_view_attempt_request when calling modQuizViewAttempt'
            );
        }


        $resourcePath = '/mod_quiz_view_attempt';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_quiz_view_attempt_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_quiz_view_attempt_request));
            } else {
                $httpBody = $mod_quiz_view_attempt_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modQuizViewAttemptReview
     *
     * Trigger the attempt reviewed event.
     *
     * @param  \OpenAPI\Client\Model\ModQuizViewAttemptReviewRequest $mod_quiz_view_attempt_review_request mod_quiz_view_attempt_review_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizViewAttemptReview'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modQuizViewAttemptReview($mod_quiz_view_attempt_review_request, string $contentType = self::contentTypes['modQuizViewAttemptReview'][0])
    {
        list($response) = $this->modQuizViewAttemptReviewWithHttpInfo($mod_quiz_view_attempt_review_request, $contentType);
        return $response;
    }

    /**
     * Operation modQuizViewAttemptReviewWithHttpInfo
     *
     * Trigger the attempt reviewed event.
     *
     * @param  \OpenAPI\Client\Model\ModQuizViewAttemptReviewRequest $mod_quiz_view_attempt_review_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizViewAttemptReview'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modQuizViewAttemptReviewWithHttpInfo($mod_quiz_view_attempt_review_request, string $contentType = self::contentTypes['modQuizViewAttemptReview'][0])
    {
        $request = $this->modQuizViewAttemptReviewRequest($mod_quiz_view_attempt_review_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modQuizViewAttemptReviewAsync
     *
     * Trigger the attempt reviewed event.
     *
     * @param  \OpenAPI\Client\Model\ModQuizViewAttemptReviewRequest $mod_quiz_view_attempt_review_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizViewAttemptReview'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modQuizViewAttemptReviewAsync($mod_quiz_view_attempt_review_request, string $contentType = self::contentTypes['modQuizViewAttemptReview'][0])
    {
        return $this->modQuizViewAttemptReviewAsyncWithHttpInfo($mod_quiz_view_attempt_review_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modQuizViewAttemptReviewAsyncWithHttpInfo
     *
     * Trigger the attempt reviewed event.
     *
     * @param  \OpenAPI\Client\Model\ModQuizViewAttemptReviewRequest $mod_quiz_view_attempt_review_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizViewAttemptReview'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modQuizViewAttemptReviewAsyncWithHttpInfo($mod_quiz_view_attempt_review_request, string $contentType = self::contentTypes['modQuizViewAttemptReview'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response';
        $request = $this->modQuizViewAttemptReviewRequest($mod_quiz_view_attempt_review_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modQuizViewAttemptReview'
     *
     * @param  \OpenAPI\Client\Model\ModQuizViewAttemptReviewRequest $mod_quiz_view_attempt_review_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizViewAttemptReview'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modQuizViewAttemptReviewRequest($mod_quiz_view_attempt_review_request, string $contentType = self::contentTypes['modQuizViewAttemptReview'][0])
    {

        // verify the required parameter 'mod_quiz_view_attempt_review_request' is set
        if ($mod_quiz_view_attempt_review_request === null || (is_array($mod_quiz_view_attempt_review_request) && count($mod_quiz_view_attempt_review_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_quiz_view_attempt_review_request when calling modQuizViewAttemptReview'
            );
        }


        $resourcePath = '/mod_quiz_view_attempt_review';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_quiz_view_attempt_review_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_quiz_view_attempt_review_request));
            } else {
                $httpBody = $mod_quiz_view_attempt_review_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modQuizViewAttemptSummary
     *
     * Trigger the attempt summary viewed event.
     *
     * @param  \OpenAPI\Client\Model\ModQuizGetAttemptSummaryRequest $mod_quiz_get_attempt_summary_request mod_quiz_get_attempt_summary_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizViewAttemptSummary'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modQuizViewAttemptSummary($mod_quiz_get_attempt_summary_request, string $contentType = self::contentTypes['modQuizViewAttemptSummary'][0])
    {
        list($response) = $this->modQuizViewAttemptSummaryWithHttpInfo($mod_quiz_get_attempt_summary_request, $contentType);
        return $response;
    }

    /**
     * Operation modQuizViewAttemptSummaryWithHttpInfo
     *
     * Trigger the attempt summary viewed event.
     *
     * @param  \OpenAPI\Client\Model\ModQuizGetAttemptSummaryRequest $mod_quiz_get_attempt_summary_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizViewAttemptSummary'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modQuizViewAttemptSummaryWithHttpInfo($mod_quiz_get_attempt_summary_request, string $contentType = self::contentTypes['modQuizViewAttemptSummary'][0])
    {
        $request = $this->modQuizViewAttemptSummaryRequest($mod_quiz_get_attempt_summary_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modQuizViewAttemptSummaryAsync
     *
     * Trigger the attempt summary viewed event.
     *
     * @param  \OpenAPI\Client\Model\ModQuizGetAttemptSummaryRequest $mod_quiz_get_attempt_summary_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizViewAttemptSummary'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modQuizViewAttemptSummaryAsync($mod_quiz_get_attempt_summary_request, string $contentType = self::contentTypes['modQuizViewAttemptSummary'][0])
    {
        return $this->modQuizViewAttemptSummaryAsyncWithHttpInfo($mod_quiz_get_attempt_summary_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modQuizViewAttemptSummaryAsyncWithHttpInfo
     *
     * Trigger the attempt summary viewed event.
     *
     * @param  \OpenAPI\Client\Model\ModQuizGetAttemptSummaryRequest $mod_quiz_get_attempt_summary_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizViewAttemptSummary'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modQuizViewAttemptSummaryAsyncWithHttpInfo($mod_quiz_get_attempt_summary_request, string $contentType = self::contentTypes['modQuizViewAttemptSummary'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response';
        $request = $this->modQuizViewAttemptSummaryRequest($mod_quiz_get_attempt_summary_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modQuizViewAttemptSummary'
     *
     * @param  \OpenAPI\Client\Model\ModQuizGetAttemptSummaryRequest $mod_quiz_get_attempt_summary_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizViewAttemptSummary'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modQuizViewAttemptSummaryRequest($mod_quiz_get_attempt_summary_request, string $contentType = self::contentTypes['modQuizViewAttemptSummary'][0])
    {

        // verify the required parameter 'mod_quiz_get_attempt_summary_request' is set
        if ($mod_quiz_get_attempt_summary_request === null || (is_array($mod_quiz_get_attempt_summary_request) && count($mod_quiz_get_attempt_summary_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_quiz_get_attempt_summary_request when calling modQuizViewAttemptSummary'
            );
        }


        $resourcePath = '/mod_quiz_view_attempt_summary';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_quiz_get_attempt_summary_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_quiz_get_attempt_summary_request));
            } else {
                $httpBody = $mod_quiz_get_attempt_summary_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modQuizViewQuiz
     *
     * Trigger the course module viewed event and update the module completion status.
     *
     * @param  \OpenAPI\Client\Model\ModQuizGetQuizAccessInformationRequest $mod_quiz_get_quiz_access_information_request mod_quiz_get_quiz_access_information_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizViewQuiz'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modQuizViewQuiz($mod_quiz_get_quiz_access_information_request, string $contentType = self::contentTypes['modQuizViewQuiz'][0])
    {
        list($response) = $this->modQuizViewQuizWithHttpInfo($mod_quiz_get_quiz_access_information_request, $contentType);
        return $response;
    }

    /**
     * Operation modQuizViewQuizWithHttpInfo
     *
     * Trigger the course module viewed event and update the module completion status.
     *
     * @param  \OpenAPI\Client\Model\ModQuizGetQuizAccessInformationRequest $mod_quiz_get_quiz_access_information_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizViewQuiz'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modQuizViewQuizWithHttpInfo($mod_quiz_get_quiz_access_information_request, string $contentType = self::contentTypes['modQuizViewQuiz'][0])
    {
        $request = $this->modQuizViewQuizRequest($mod_quiz_get_quiz_access_information_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modQuizViewQuizAsync
     *
     * Trigger the course module viewed event and update the module completion status.
     *
     * @param  \OpenAPI\Client\Model\ModQuizGetQuizAccessInformationRequest $mod_quiz_get_quiz_access_information_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizViewQuiz'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modQuizViewQuizAsync($mod_quiz_get_quiz_access_information_request, string $contentType = self::contentTypes['modQuizViewQuiz'][0])
    {
        return $this->modQuizViewQuizAsyncWithHttpInfo($mod_quiz_get_quiz_access_information_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modQuizViewQuizAsyncWithHttpInfo
     *
     * Trigger the course module viewed event and update the module completion status.
     *
     * @param  \OpenAPI\Client\Model\ModQuizGetQuizAccessInformationRequest $mod_quiz_get_quiz_access_information_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizViewQuiz'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modQuizViewQuizAsyncWithHttpInfo($mod_quiz_get_quiz_access_information_request, string $contentType = self::contentTypes['modQuizViewQuiz'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response';
        $request = $this->modQuizViewQuizRequest($mod_quiz_get_quiz_access_information_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modQuizViewQuiz'
     *
     * @param  \OpenAPI\Client\Model\ModQuizGetQuizAccessInformationRequest $mod_quiz_get_quiz_access_information_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modQuizViewQuiz'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modQuizViewQuizRequest($mod_quiz_get_quiz_access_information_request, string $contentType = self::contentTypes['modQuizViewQuiz'][0])
    {

        // verify the required parameter 'mod_quiz_get_quiz_access_information_request' is set
        if ($mod_quiz_get_quiz_access_information_request === null || (is_array($mod_quiz_get_quiz_access_information_request) && count($mod_quiz_get_quiz_access_information_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_quiz_get_quiz_access_information_request when calling modQuizViewQuiz'
            );
        }


        $resourcePath = '/mod_quiz_view_quiz';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_quiz_get_quiz_access_information_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_quiz_get_quiz_access_information_request));
            } else {
                $httpBody = $mod_quiz_get_quiz_access_information_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
