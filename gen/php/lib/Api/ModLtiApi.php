<?php
/**
 * ModLtiApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * ModLtiApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ModLtiApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'modLtiCreateToolProxy' => [
            'application/json',
        ],
        'modLtiCreateToolType' => [
            'application/json',
        ],
        'modLtiDeleteCourseToolType' => [
            'application/json',
        ],
        'modLtiDeleteToolProxy' => [
            'application/json',
        ],
        'modLtiDeleteToolType' => [
            'application/json',
        ],
        'modLtiGetLtisByCourses' => [
            'application/json',
        ],
        'modLtiGetToolLaunchData' => [
            'application/json',
        ],
        'modLtiGetToolProxies' => [
            'application/json',
        ],
        'modLtiGetToolProxyRegistrationRequest' => [
            'application/json',
        ],
        'modLtiGetToolTypes' => [
            'application/json',
        ],
        'modLtiGetToolTypesAndProxies' => [
            'application/json',
        ],
        'modLtiGetToolTypesAndProxiesCount' => [
            'application/json',
        ],
        'modLtiIsCartridge' => [
            'application/json',
        ],
        'modLtiToggleShowinactivitychooser' => [
            'application/json',
        ],
        'modLtiUpdateToolType' => [
            'application/json',
        ],
        'modLtiViewLti' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation modLtiCreateToolProxy
     *
     * Create a tool proxy
     *
     * @param  \OpenAPI\Client\Model\ModLtiCreateToolProxyRequest $mod_lti_create_tool_proxy_request mod_lti_create_tool_proxy_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLtiCreateToolProxy'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModLtiCreateToolProxy200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modLtiCreateToolProxy($mod_lti_create_tool_proxy_request, string $contentType = self::contentTypes['modLtiCreateToolProxy'][0])
    {
        list($response) = $this->modLtiCreateToolProxyWithHttpInfo($mod_lti_create_tool_proxy_request, $contentType);
        return $response;
    }

    /**
     * Operation modLtiCreateToolProxyWithHttpInfo
     *
     * Create a tool proxy
     *
     * @param  \OpenAPI\Client\Model\ModLtiCreateToolProxyRequest $mod_lti_create_tool_proxy_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLtiCreateToolProxy'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModLtiCreateToolProxy200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modLtiCreateToolProxyWithHttpInfo($mod_lti_create_tool_proxy_request, string $contentType = self::contentTypes['modLtiCreateToolProxy'][0])
    {
        $request = $this->modLtiCreateToolProxyRequest($mod_lti_create_tool_proxy_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModLtiCreateToolProxy200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModLtiCreateToolProxy200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModLtiCreateToolProxy200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModLtiCreateToolProxy200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModLtiCreateToolProxy200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modLtiCreateToolProxyAsync
     *
     * Create a tool proxy
     *
     * @param  \OpenAPI\Client\Model\ModLtiCreateToolProxyRequest $mod_lti_create_tool_proxy_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLtiCreateToolProxy'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modLtiCreateToolProxyAsync($mod_lti_create_tool_proxy_request, string $contentType = self::contentTypes['modLtiCreateToolProxy'][0])
    {
        return $this->modLtiCreateToolProxyAsyncWithHttpInfo($mod_lti_create_tool_proxy_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modLtiCreateToolProxyAsyncWithHttpInfo
     *
     * Create a tool proxy
     *
     * @param  \OpenAPI\Client\Model\ModLtiCreateToolProxyRequest $mod_lti_create_tool_proxy_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLtiCreateToolProxy'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modLtiCreateToolProxyAsyncWithHttpInfo($mod_lti_create_tool_proxy_request, string $contentType = self::contentTypes['modLtiCreateToolProxy'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModLtiCreateToolProxy200Response';
        $request = $this->modLtiCreateToolProxyRequest($mod_lti_create_tool_proxy_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modLtiCreateToolProxy'
     *
     * @param  \OpenAPI\Client\Model\ModLtiCreateToolProxyRequest $mod_lti_create_tool_proxy_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLtiCreateToolProxy'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modLtiCreateToolProxyRequest($mod_lti_create_tool_proxy_request, string $contentType = self::contentTypes['modLtiCreateToolProxy'][0])
    {

        // verify the required parameter 'mod_lti_create_tool_proxy_request' is set
        if ($mod_lti_create_tool_proxy_request === null || (is_array($mod_lti_create_tool_proxy_request) && count($mod_lti_create_tool_proxy_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_lti_create_tool_proxy_request when calling modLtiCreateToolProxy'
            );
        }


        $resourcePath = '/mod_lti_create_tool_proxy';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_lti_create_tool_proxy_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_lti_create_tool_proxy_request));
            } else {
                $httpBody = $mod_lti_create_tool_proxy_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modLtiCreateToolType
     *
     * Create a tool type
     *
     * @param  \OpenAPI\Client\Model\ModLtiCreateToolTypeRequest $mod_lti_create_tool_type_request mod_lti_create_tool_type_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLtiCreateToolType'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModLtiCreateToolType200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modLtiCreateToolType($mod_lti_create_tool_type_request, string $contentType = self::contentTypes['modLtiCreateToolType'][0])
    {
        list($response) = $this->modLtiCreateToolTypeWithHttpInfo($mod_lti_create_tool_type_request, $contentType);
        return $response;
    }

    /**
     * Operation modLtiCreateToolTypeWithHttpInfo
     *
     * Create a tool type
     *
     * @param  \OpenAPI\Client\Model\ModLtiCreateToolTypeRequest $mod_lti_create_tool_type_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLtiCreateToolType'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModLtiCreateToolType200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modLtiCreateToolTypeWithHttpInfo($mod_lti_create_tool_type_request, string $contentType = self::contentTypes['modLtiCreateToolType'][0])
    {
        $request = $this->modLtiCreateToolTypeRequest($mod_lti_create_tool_type_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModLtiCreateToolType200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModLtiCreateToolType200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModLtiCreateToolType200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModLtiCreateToolType200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModLtiCreateToolType200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modLtiCreateToolTypeAsync
     *
     * Create a tool type
     *
     * @param  \OpenAPI\Client\Model\ModLtiCreateToolTypeRequest $mod_lti_create_tool_type_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLtiCreateToolType'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modLtiCreateToolTypeAsync($mod_lti_create_tool_type_request, string $contentType = self::contentTypes['modLtiCreateToolType'][0])
    {
        return $this->modLtiCreateToolTypeAsyncWithHttpInfo($mod_lti_create_tool_type_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modLtiCreateToolTypeAsyncWithHttpInfo
     *
     * Create a tool type
     *
     * @param  \OpenAPI\Client\Model\ModLtiCreateToolTypeRequest $mod_lti_create_tool_type_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLtiCreateToolType'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modLtiCreateToolTypeAsyncWithHttpInfo($mod_lti_create_tool_type_request, string $contentType = self::contentTypes['modLtiCreateToolType'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModLtiCreateToolType200Response';
        $request = $this->modLtiCreateToolTypeRequest($mod_lti_create_tool_type_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modLtiCreateToolType'
     *
     * @param  \OpenAPI\Client\Model\ModLtiCreateToolTypeRequest $mod_lti_create_tool_type_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLtiCreateToolType'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modLtiCreateToolTypeRequest($mod_lti_create_tool_type_request, string $contentType = self::contentTypes['modLtiCreateToolType'][0])
    {

        // verify the required parameter 'mod_lti_create_tool_type_request' is set
        if ($mod_lti_create_tool_type_request === null || (is_array($mod_lti_create_tool_type_request) && count($mod_lti_create_tool_type_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_lti_create_tool_type_request when calling modLtiCreateToolType'
            );
        }


        $resourcePath = '/mod_lti_create_tool_type';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_lti_create_tool_type_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_lti_create_tool_type_request));
            } else {
                $httpBody = $mod_lti_create_tool_type_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modLtiDeleteCourseToolType
     *
     * Delete a course tool type
     *
     * @param  \OpenAPI\Client\Model\ModLtiDeleteCourseToolTypeRequest $mod_lti_delete_course_tool_type_request mod_lti_delete_course_tool_type_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLtiDeleteCourseToolType'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modLtiDeleteCourseToolType($mod_lti_delete_course_tool_type_request, string $contentType = self::contentTypes['modLtiDeleteCourseToolType'][0])
    {
        list($response) = $this->modLtiDeleteCourseToolTypeWithHttpInfo($mod_lti_delete_course_tool_type_request, $contentType);
        return $response;
    }

    /**
     * Operation modLtiDeleteCourseToolTypeWithHttpInfo
     *
     * Delete a course tool type
     *
     * @param  \OpenAPI\Client\Model\ModLtiDeleteCourseToolTypeRequest $mod_lti_delete_course_tool_type_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLtiDeleteCourseToolType'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modLtiDeleteCourseToolTypeWithHttpInfo($mod_lti_delete_course_tool_type_request, string $contentType = self::contentTypes['modLtiDeleteCourseToolType'][0])
    {
        $request = $this->modLtiDeleteCourseToolTypeRequest($mod_lti_delete_course_tool_type_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modLtiDeleteCourseToolTypeAsync
     *
     * Delete a course tool type
     *
     * @param  \OpenAPI\Client\Model\ModLtiDeleteCourseToolTypeRequest $mod_lti_delete_course_tool_type_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLtiDeleteCourseToolType'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modLtiDeleteCourseToolTypeAsync($mod_lti_delete_course_tool_type_request, string $contentType = self::contentTypes['modLtiDeleteCourseToolType'][0])
    {
        return $this->modLtiDeleteCourseToolTypeAsyncWithHttpInfo($mod_lti_delete_course_tool_type_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modLtiDeleteCourseToolTypeAsyncWithHttpInfo
     *
     * Delete a course tool type
     *
     * @param  \OpenAPI\Client\Model\ModLtiDeleteCourseToolTypeRequest $mod_lti_delete_course_tool_type_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLtiDeleteCourseToolType'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modLtiDeleteCourseToolTypeAsyncWithHttpInfo($mod_lti_delete_course_tool_type_request, string $contentType = self::contentTypes['modLtiDeleteCourseToolType'][0])
    {
        $returnType = 'object';
        $request = $this->modLtiDeleteCourseToolTypeRequest($mod_lti_delete_course_tool_type_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modLtiDeleteCourseToolType'
     *
     * @param  \OpenAPI\Client\Model\ModLtiDeleteCourseToolTypeRequest $mod_lti_delete_course_tool_type_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLtiDeleteCourseToolType'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modLtiDeleteCourseToolTypeRequest($mod_lti_delete_course_tool_type_request, string $contentType = self::contentTypes['modLtiDeleteCourseToolType'][0])
    {

        // verify the required parameter 'mod_lti_delete_course_tool_type_request' is set
        if ($mod_lti_delete_course_tool_type_request === null || (is_array($mod_lti_delete_course_tool_type_request) && count($mod_lti_delete_course_tool_type_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_lti_delete_course_tool_type_request when calling modLtiDeleteCourseToolType'
            );
        }


        $resourcePath = '/mod_lti_delete_course_tool_type';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_lti_delete_course_tool_type_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_lti_delete_course_tool_type_request));
            } else {
                $httpBody = $mod_lti_delete_course_tool_type_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modLtiDeleteToolProxy
     *
     * Delete a tool proxy
     *
     * @param  \OpenAPI\Client\Model\ModLtiDeleteToolProxyRequest $mod_lti_delete_tool_proxy_request mod_lti_delete_tool_proxy_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLtiDeleteToolProxy'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModLtiDeleteToolProxy200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modLtiDeleteToolProxy($mod_lti_delete_tool_proxy_request, string $contentType = self::contentTypes['modLtiDeleteToolProxy'][0])
    {
        list($response) = $this->modLtiDeleteToolProxyWithHttpInfo($mod_lti_delete_tool_proxy_request, $contentType);
        return $response;
    }

    /**
     * Operation modLtiDeleteToolProxyWithHttpInfo
     *
     * Delete a tool proxy
     *
     * @param  \OpenAPI\Client\Model\ModLtiDeleteToolProxyRequest $mod_lti_delete_tool_proxy_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLtiDeleteToolProxy'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModLtiDeleteToolProxy200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modLtiDeleteToolProxyWithHttpInfo($mod_lti_delete_tool_proxy_request, string $contentType = self::contentTypes['modLtiDeleteToolProxy'][0])
    {
        $request = $this->modLtiDeleteToolProxyRequest($mod_lti_delete_tool_proxy_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModLtiDeleteToolProxy200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModLtiDeleteToolProxy200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModLtiDeleteToolProxy200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModLtiDeleteToolProxy200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModLtiDeleteToolProxy200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modLtiDeleteToolProxyAsync
     *
     * Delete a tool proxy
     *
     * @param  \OpenAPI\Client\Model\ModLtiDeleteToolProxyRequest $mod_lti_delete_tool_proxy_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLtiDeleteToolProxy'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modLtiDeleteToolProxyAsync($mod_lti_delete_tool_proxy_request, string $contentType = self::contentTypes['modLtiDeleteToolProxy'][0])
    {
        return $this->modLtiDeleteToolProxyAsyncWithHttpInfo($mod_lti_delete_tool_proxy_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modLtiDeleteToolProxyAsyncWithHttpInfo
     *
     * Delete a tool proxy
     *
     * @param  \OpenAPI\Client\Model\ModLtiDeleteToolProxyRequest $mod_lti_delete_tool_proxy_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLtiDeleteToolProxy'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modLtiDeleteToolProxyAsyncWithHttpInfo($mod_lti_delete_tool_proxy_request, string $contentType = self::contentTypes['modLtiDeleteToolProxy'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModLtiDeleteToolProxy200Response';
        $request = $this->modLtiDeleteToolProxyRequest($mod_lti_delete_tool_proxy_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modLtiDeleteToolProxy'
     *
     * @param  \OpenAPI\Client\Model\ModLtiDeleteToolProxyRequest $mod_lti_delete_tool_proxy_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLtiDeleteToolProxy'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modLtiDeleteToolProxyRequest($mod_lti_delete_tool_proxy_request, string $contentType = self::contentTypes['modLtiDeleteToolProxy'][0])
    {

        // verify the required parameter 'mod_lti_delete_tool_proxy_request' is set
        if ($mod_lti_delete_tool_proxy_request === null || (is_array($mod_lti_delete_tool_proxy_request) && count($mod_lti_delete_tool_proxy_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_lti_delete_tool_proxy_request when calling modLtiDeleteToolProxy'
            );
        }


        $resourcePath = '/mod_lti_delete_tool_proxy';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_lti_delete_tool_proxy_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_lti_delete_tool_proxy_request));
            } else {
                $httpBody = $mod_lti_delete_tool_proxy_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modLtiDeleteToolType
     *
     * Delete a tool type
     *
     * @param  \OpenAPI\Client\Model\ModLtiDeleteToolTypeRequest $mod_lti_delete_tool_type_request mod_lti_delete_tool_type_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLtiDeleteToolType'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModLtiDeleteToolTypeRequest|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modLtiDeleteToolType($mod_lti_delete_tool_type_request, string $contentType = self::contentTypes['modLtiDeleteToolType'][0])
    {
        list($response) = $this->modLtiDeleteToolTypeWithHttpInfo($mod_lti_delete_tool_type_request, $contentType);
        return $response;
    }

    /**
     * Operation modLtiDeleteToolTypeWithHttpInfo
     *
     * Delete a tool type
     *
     * @param  \OpenAPI\Client\Model\ModLtiDeleteToolTypeRequest $mod_lti_delete_tool_type_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLtiDeleteToolType'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModLtiDeleteToolTypeRequest|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modLtiDeleteToolTypeWithHttpInfo($mod_lti_delete_tool_type_request, string $contentType = self::contentTypes['modLtiDeleteToolType'][0])
    {
        $request = $this->modLtiDeleteToolTypeRequest($mod_lti_delete_tool_type_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModLtiDeleteToolTypeRequest' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModLtiDeleteToolTypeRequest' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModLtiDeleteToolTypeRequest', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModLtiDeleteToolTypeRequest';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModLtiDeleteToolTypeRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modLtiDeleteToolTypeAsync
     *
     * Delete a tool type
     *
     * @param  \OpenAPI\Client\Model\ModLtiDeleteToolTypeRequest $mod_lti_delete_tool_type_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLtiDeleteToolType'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modLtiDeleteToolTypeAsync($mod_lti_delete_tool_type_request, string $contentType = self::contentTypes['modLtiDeleteToolType'][0])
    {
        return $this->modLtiDeleteToolTypeAsyncWithHttpInfo($mod_lti_delete_tool_type_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modLtiDeleteToolTypeAsyncWithHttpInfo
     *
     * Delete a tool type
     *
     * @param  \OpenAPI\Client\Model\ModLtiDeleteToolTypeRequest $mod_lti_delete_tool_type_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLtiDeleteToolType'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modLtiDeleteToolTypeAsyncWithHttpInfo($mod_lti_delete_tool_type_request, string $contentType = self::contentTypes['modLtiDeleteToolType'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModLtiDeleteToolTypeRequest';
        $request = $this->modLtiDeleteToolTypeRequest($mod_lti_delete_tool_type_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modLtiDeleteToolType'
     *
     * @param  \OpenAPI\Client\Model\ModLtiDeleteToolTypeRequest $mod_lti_delete_tool_type_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLtiDeleteToolType'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modLtiDeleteToolTypeRequest($mod_lti_delete_tool_type_request, string $contentType = self::contentTypes['modLtiDeleteToolType'][0])
    {

        // verify the required parameter 'mod_lti_delete_tool_type_request' is set
        if ($mod_lti_delete_tool_type_request === null || (is_array($mod_lti_delete_tool_type_request) && count($mod_lti_delete_tool_type_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_lti_delete_tool_type_request when calling modLtiDeleteToolType'
            );
        }


        $resourcePath = '/mod_lti_delete_tool_type';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_lti_delete_tool_type_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_lti_delete_tool_type_request));
            } else {
                $httpBody = $mod_lti_delete_tool_type_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modLtiGetLtisByCourses
     *
     * Returns a list of external tool instances in a provided set of courses, if                             no courses are provided then all the external tool instances the user has access to will be returned.
     *
     * @param  \OpenAPI\Client\Model\ModChatGetChatsByCoursesRequest $mod_chat_get_chats_by_courses_request mod_chat_get_chats_by_courses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLtiGetLtisByCourses'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModLtiGetLtisByCourses200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modLtiGetLtisByCourses($mod_chat_get_chats_by_courses_request, string $contentType = self::contentTypes['modLtiGetLtisByCourses'][0])
    {
        list($response) = $this->modLtiGetLtisByCoursesWithHttpInfo($mod_chat_get_chats_by_courses_request, $contentType);
        return $response;
    }

    /**
     * Operation modLtiGetLtisByCoursesWithHttpInfo
     *
     * Returns a list of external tool instances in a provided set of courses, if                             no courses are provided then all the external tool instances the user has access to will be returned.
     *
     * @param  \OpenAPI\Client\Model\ModChatGetChatsByCoursesRequest $mod_chat_get_chats_by_courses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLtiGetLtisByCourses'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModLtiGetLtisByCourses200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modLtiGetLtisByCoursesWithHttpInfo($mod_chat_get_chats_by_courses_request, string $contentType = self::contentTypes['modLtiGetLtisByCourses'][0])
    {
        $request = $this->modLtiGetLtisByCoursesRequest($mod_chat_get_chats_by_courses_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModLtiGetLtisByCourses200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModLtiGetLtisByCourses200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModLtiGetLtisByCourses200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModLtiGetLtisByCourses200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModLtiGetLtisByCourses200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modLtiGetLtisByCoursesAsync
     *
     * Returns a list of external tool instances in a provided set of courses, if                             no courses are provided then all the external tool instances the user has access to will be returned.
     *
     * @param  \OpenAPI\Client\Model\ModChatGetChatsByCoursesRequest $mod_chat_get_chats_by_courses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLtiGetLtisByCourses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modLtiGetLtisByCoursesAsync($mod_chat_get_chats_by_courses_request, string $contentType = self::contentTypes['modLtiGetLtisByCourses'][0])
    {
        return $this->modLtiGetLtisByCoursesAsyncWithHttpInfo($mod_chat_get_chats_by_courses_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modLtiGetLtisByCoursesAsyncWithHttpInfo
     *
     * Returns a list of external tool instances in a provided set of courses, if                             no courses are provided then all the external tool instances the user has access to will be returned.
     *
     * @param  \OpenAPI\Client\Model\ModChatGetChatsByCoursesRequest $mod_chat_get_chats_by_courses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLtiGetLtisByCourses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modLtiGetLtisByCoursesAsyncWithHttpInfo($mod_chat_get_chats_by_courses_request, string $contentType = self::contentTypes['modLtiGetLtisByCourses'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModLtiGetLtisByCourses200Response';
        $request = $this->modLtiGetLtisByCoursesRequest($mod_chat_get_chats_by_courses_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modLtiGetLtisByCourses'
     *
     * @param  \OpenAPI\Client\Model\ModChatGetChatsByCoursesRequest $mod_chat_get_chats_by_courses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLtiGetLtisByCourses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modLtiGetLtisByCoursesRequest($mod_chat_get_chats_by_courses_request, string $contentType = self::contentTypes['modLtiGetLtisByCourses'][0])
    {

        // verify the required parameter 'mod_chat_get_chats_by_courses_request' is set
        if ($mod_chat_get_chats_by_courses_request === null || (is_array($mod_chat_get_chats_by_courses_request) && count($mod_chat_get_chats_by_courses_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_chat_get_chats_by_courses_request when calling modLtiGetLtisByCourses'
            );
        }


        $resourcePath = '/mod_lti_get_ltis_by_courses';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_chat_get_chats_by_courses_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_chat_get_chats_by_courses_request));
            } else {
                $httpBody = $mod_chat_get_chats_by_courses_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modLtiGetToolLaunchData
     *
     * Return the launch data for a given external tool.
     *
     * @param  \OpenAPI\Client\Model\ModLtiGetToolLaunchDataRequest $mod_lti_get_tool_launch_data_request mod_lti_get_tool_launch_data_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLtiGetToolLaunchData'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModLtiGetToolLaunchData200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modLtiGetToolLaunchData($mod_lti_get_tool_launch_data_request, string $contentType = self::contentTypes['modLtiGetToolLaunchData'][0])
    {
        list($response) = $this->modLtiGetToolLaunchDataWithHttpInfo($mod_lti_get_tool_launch_data_request, $contentType);
        return $response;
    }

    /**
     * Operation modLtiGetToolLaunchDataWithHttpInfo
     *
     * Return the launch data for a given external tool.
     *
     * @param  \OpenAPI\Client\Model\ModLtiGetToolLaunchDataRequest $mod_lti_get_tool_launch_data_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLtiGetToolLaunchData'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModLtiGetToolLaunchData200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modLtiGetToolLaunchDataWithHttpInfo($mod_lti_get_tool_launch_data_request, string $contentType = self::contentTypes['modLtiGetToolLaunchData'][0])
    {
        $request = $this->modLtiGetToolLaunchDataRequest($mod_lti_get_tool_launch_data_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModLtiGetToolLaunchData200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModLtiGetToolLaunchData200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModLtiGetToolLaunchData200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModLtiGetToolLaunchData200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModLtiGetToolLaunchData200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modLtiGetToolLaunchDataAsync
     *
     * Return the launch data for a given external tool.
     *
     * @param  \OpenAPI\Client\Model\ModLtiGetToolLaunchDataRequest $mod_lti_get_tool_launch_data_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLtiGetToolLaunchData'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modLtiGetToolLaunchDataAsync($mod_lti_get_tool_launch_data_request, string $contentType = self::contentTypes['modLtiGetToolLaunchData'][0])
    {
        return $this->modLtiGetToolLaunchDataAsyncWithHttpInfo($mod_lti_get_tool_launch_data_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modLtiGetToolLaunchDataAsyncWithHttpInfo
     *
     * Return the launch data for a given external tool.
     *
     * @param  \OpenAPI\Client\Model\ModLtiGetToolLaunchDataRequest $mod_lti_get_tool_launch_data_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLtiGetToolLaunchData'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modLtiGetToolLaunchDataAsyncWithHttpInfo($mod_lti_get_tool_launch_data_request, string $contentType = self::contentTypes['modLtiGetToolLaunchData'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModLtiGetToolLaunchData200Response';
        $request = $this->modLtiGetToolLaunchDataRequest($mod_lti_get_tool_launch_data_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modLtiGetToolLaunchData'
     *
     * @param  \OpenAPI\Client\Model\ModLtiGetToolLaunchDataRequest $mod_lti_get_tool_launch_data_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLtiGetToolLaunchData'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modLtiGetToolLaunchDataRequest($mod_lti_get_tool_launch_data_request, string $contentType = self::contentTypes['modLtiGetToolLaunchData'][0])
    {

        // verify the required parameter 'mod_lti_get_tool_launch_data_request' is set
        if ($mod_lti_get_tool_launch_data_request === null || (is_array($mod_lti_get_tool_launch_data_request) && count($mod_lti_get_tool_launch_data_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_lti_get_tool_launch_data_request when calling modLtiGetToolLaunchData'
            );
        }


        $resourcePath = '/mod_lti_get_tool_launch_data';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_lti_get_tool_launch_data_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_lti_get_tool_launch_data_request));
            } else {
                $httpBody = $mod_lti_get_tool_launch_data_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modLtiGetToolProxies
     *
     * Get a list of the tool proxies
     *
     * @param  \OpenAPI\Client\Model\ModLtiGetToolProxiesRequest $mod_lti_get_tool_proxies_request mod_lti_get_tool_proxies_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLtiGetToolProxies'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modLtiGetToolProxies($mod_lti_get_tool_proxies_request, string $contentType = self::contentTypes['modLtiGetToolProxies'][0])
    {
        list($response) = $this->modLtiGetToolProxiesWithHttpInfo($mod_lti_get_tool_proxies_request, $contentType);
        return $response;
    }

    /**
     * Operation modLtiGetToolProxiesWithHttpInfo
     *
     * Get a list of the tool proxies
     *
     * @param  \OpenAPI\Client\Model\ModLtiGetToolProxiesRequest $mod_lti_get_tool_proxies_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLtiGetToolProxies'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modLtiGetToolProxiesWithHttpInfo($mod_lti_get_tool_proxies_request, string $contentType = self::contentTypes['modLtiGetToolProxies'][0])
    {
        $request = $this->modLtiGetToolProxiesRequest($mod_lti_get_tool_proxies_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modLtiGetToolProxiesAsync
     *
     * Get a list of the tool proxies
     *
     * @param  \OpenAPI\Client\Model\ModLtiGetToolProxiesRequest $mod_lti_get_tool_proxies_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLtiGetToolProxies'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modLtiGetToolProxiesAsync($mod_lti_get_tool_proxies_request, string $contentType = self::contentTypes['modLtiGetToolProxies'][0])
    {
        return $this->modLtiGetToolProxiesAsyncWithHttpInfo($mod_lti_get_tool_proxies_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modLtiGetToolProxiesAsyncWithHttpInfo
     *
     * Get a list of the tool proxies
     *
     * @param  \OpenAPI\Client\Model\ModLtiGetToolProxiesRequest $mod_lti_get_tool_proxies_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLtiGetToolProxies'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modLtiGetToolProxiesAsyncWithHttpInfo($mod_lti_get_tool_proxies_request, string $contentType = self::contentTypes['modLtiGetToolProxies'][0])
    {
        $returnType = 'object';
        $request = $this->modLtiGetToolProxiesRequest($mod_lti_get_tool_proxies_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modLtiGetToolProxies'
     *
     * @param  \OpenAPI\Client\Model\ModLtiGetToolProxiesRequest $mod_lti_get_tool_proxies_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLtiGetToolProxies'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modLtiGetToolProxiesRequest($mod_lti_get_tool_proxies_request, string $contentType = self::contentTypes['modLtiGetToolProxies'][0])
    {

        // verify the required parameter 'mod_lti_get_tool_proxies_request' is set
        if ($mod_lti_get_tool_proxies_request === null || (is_array($mod_lti_get_tool_proxies_request) && count($mod_lti_get_tool_proxies_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_lti_get_tool_proxies_request when calling modLtiGetToolProxies'
            );
        }


        $resourcePath = '/mod_lti_get_tool_proxies';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_lti_get_tool_proxies_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_lti_get_tool_proxies_request));
            } else {
                $httpBody = $mod_lti_get_tool_proxies_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modLtiGetToolProxyRegistrationRequest
     *
     * Get a registration request for a tool proxy
     *
     * @param  \OpenAPI\Client\Model\ModLtiDeleteToolProxyRequest $mod_lti_delete_tool_proxy_request mod_lti_delete_tool_proxy_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLtiGetToolProxyRegistrationRequest'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModLtiGetToolProxyRegistrationRequest200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modLtiGetToolProxyRegistrationRequest($mod_lti_delete_tool_proxy_request, string $contentType = self::contentTypes['modLtiGetToolProxyRegistrationRequest'][0])
    {
        list($response) = $this->modLtiGetToolProxyRegistrationRequestWithHttpInfo($mod_lti_delete_tool_proxy_request, $contentType);
        return $response;
    }

    /**
     * Operation modLtiGetToolProxyRegistrationRequestWithHttpInfo
     *
     * Get a registration request for a tool proxy
     *
     * @param  \OpenAPI\Client\Model\ModLtiDeleteToolProxyRequest $mod_lti_delete_tool_proxy_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLtiGetToolProxyRegistrationRequest'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModLtiGetToolProxyRegistrationRequest200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modLtiGetToolProxyRegistrationRequestWithHttpInfo($mod_lti_delete_tool_proxy_request, string $contentType = self::contentTypes['modLtiGetToolProxyRegistrationRequest'][0])
    {
        $request = $this->modLtiGetToolProxyRegistrationRequestRequest($mod_lti_delete_tool_proxy_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModLtiGetToolProxyRegistrationRequest200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModLtiGetToolProxyRegistrationRequest200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModLtiGetToolProxyRegistrationRequest200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModLtiGetToolProxyRegistrationRequest200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModLtiGetToolProxyRegistrationRequest200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modLtiGetToolProxyRegistrationRequestAsync
     *
     * Get a registration request for a tool proxy
     *
     * @param  \OpenAPI\Client\Model\ModLtiDeleteToolProxyRequest $mod_lti_delete_tool_proxy_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLtiGetToolProxyRegistrationRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modLtiGetToolProxyRegistrationRequestAsync($mod_lti_delete_tool_proxy_request, string $contentType = self::contentTypes['modLtiGetToolProxyRegistrationRequest'][0])
    {
        return $this->modLtiGetToolProxyRegistrationRequestAsyncWithHttpInfo($mod_lti_delete_tool_proxy_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modLtiGetToolProxyRegistrationRequestAsyncWithHttpInfo
     *
     * Get a registration request for a tool proxy
     *
     * @param  \OpenAPI\Client\Model\ModLtiDeleteToolProxyRequest $mod_lti_delete_tool_proxy_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLtiGetToolProxyRegistrationRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modLtiGetToolProxyRegistrationRequestAsyncWithHttpInfo($mod_lti_delete_tool_proxy_request, string $contentType = self::contentTypes['modLtiGetToolProxyRegistrationRequest'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModLtiGetToolProxyRegistrationRequest200Response';
        $request = $this->modLtiGetToolProxyRegistrationRequestRequest($mod_lti_delete_tool_proxy_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modLtiGetToolProxyRegistrationRequest'
     *
     * @param  \OpenAPI\Client\Model\ModLtiDeleteToolProxyRequest $mod_lti_delete_tool_proxy_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLtiGetToolProxyRegistrationRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modLtiGetToolProxyRegistrationRequestRequest($mod_lti_delete_tool_proxy_request, string $contentType = self::contentTypes['modLtiGetToolProxyRegistrationRequest'][0])
    {

        // verify the required parameter 'mod_lti_delete_tool_proxy_request' is set
        if ($mod_lti_delete_tool_proxy_request === null || (is_array($mod_lti_delete_tool_proxy_request) && count($mod_lti_delete_tool_proxy_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_lti_delete_tool_proxy_request when calling modLtiGetToolProxyRegistrationRequest'
            );
        }


        $resourcePath = '/mod_lti_get_tool_proxy_registration_request';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_lti_delete_tool_proxy_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_lti_delete_tool_proxy_request));
            } else {
                $httpBody = $mod_lti_delete_tool_proxy_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modLtiGetToolTypes
     *
     * Get a list of the tool types
     *
     * @param  \OpenAPI\Client\Model\ModLtiGetToolTypesRequest $mod_lti_get_tool_types_request mod_lti_get_tool_types_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLtiGetToolTypes'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modLtiGetToolTypes($mod_lti_get_tool_types_request, string $contentType = self::contentTypes['modLtiGetToolTypes'][0])
    {
        list($response) = $this->modLtiGetToolTypesWithHttpInfo($mod_lti_get_tool_types_request, $contentType);
        return $response;
    }

    /**
     * Operation modLtiGetToolTypesWithHttpInfo
     *
     * Get a list of the tool types
     *
     * @param  \OpenAPI\Client\Model\ModLtiGetToolTypesRequest $mod_lti_get_tool_types_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLtiGetToolTypes'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modLtiGetToolTypesWithHttpInfo($mod_lti_get_tool_types_request, string $contentType = self::contentTypes['modLtiGetToolTypes'][0])
    {
        $request = $this->modLtiGetToolTypesRequest($mod_lti_get_tool_types_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modLtiGetToolTypesAsync
     *
     * Get a list of the tool types
     *
     * @param  \OpenAPI\Client\Model\ModLtiGetToolTypesRequest $mod_lti_get_tool_types_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLtiGetToolTypes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modLtiGetToolTypesAsync($mod_lti_get_tool_types_request, string $contentType = self::contentTypes['modLtiGetToolTypes'][0])
    {
        return $this->modLtiGetToolTypesAsyncWithHttpInfo($mod_lti_get_tool_types_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modLtiGetToolTypesAsyncWithHttpInfo
     *
     * Get a list of the tool types
     *
     * @param  \OpenAPI\Client\Model\ModLtiGetToolTypesRequest $mod_lti_get_tool_types_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLtiGetToolTypes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modLtiGetToolTypesAsyncWithHttpInfo($mod_lti_get_tool_types_request, string $contentType = self::contentTypes['modLtiGetToolTypes'][0])
    {
        $returnType = 'object';
        $request = $this->modLtiGetToolTypesRequest($mod_lti_get_tool_types_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modLtiGetToolTypes'
     *
     * @param  \OpenAPI\Client\Model\ModLtiGetToolTypesRequest $mod_lti_get_tool_types_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLtiGetToolTypes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modLtiGetToolTypesRequest($mod_lti_get_tool_types_request, string $contentType = self::contentTypes['modLtiGetToolTypes'][0])
    {

        // verify the required parameter 'mod_lti_get_tool_types_request' is set
        if ($mod_lti_get_tool_types_request === null || (is_array($mod_lti_get_tool_types_request) && count($mod_lti_get_tool_types_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_lti_get_tool_types_request when calling modLtiGetToolTypes'
            );
        }


        $resourcePath = '/mod_lti_get_tool_types';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_lti_get_tool_types_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_lti_get_tool_types_request));
            } else {
                $httpBody = $mod_lti_get_tool_types_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modLtiGetToolTypesAndProxies
     *
     * Get a list of the tool types and tool proxies
     *
     * @param  \OpenAPI\Client\Model\ModLtiGetToolTypesAndProxiesRequest $mod_lti_get_tool_types_and_proxies_request mod_lti_get_tool_types_and_proxies_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLtiGetToolTypesAndProxies'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModLtiGetToolTypesAndProxies200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modLtiGetToolTypesAndProxies($mod_lti_get_tool_types_and_proxies_request, string $contentType = self::contentTypes['modLtiGetToolTypesAndProxies'][0])
    {
        list($response) = $this->modLtiGetToolTypesAndProxiesWithHttpInfo($mod_lti_get_tool_types_and_proxies_request, $contentType);
        return $response;
    }

    /**
     * Operation modLtiGetToolTypesAndProxiesWithHttpInfo
     *
     * Get a list of the tool types and tool proxies
     *
     * @param  \OpenAPI\Client\Model\ModLtiGetToolTypesAndProxiesRequest $mod_lti_get_tool_types_and_proxies_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLtiGetToolTypesAndProxies'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModLtiGetToolTypesAndProxies200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modLtiGetToolTypesAndProxiesWithHttpInfo($mod_lti_get_tool_types_and_proxies_request, string $contentType = self::contentTypes['modLtiGetToolTypesAndProxies'][0])
    {
        $request = $this->modLtiGetToolTypesAndProxiesRequest($mod_lti_get_tool_types_and_proxies_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModLtiGetToolTypesAndProxies200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModLtiGetToolTypesAndProxies200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModLtiGetToolTypesAndProxies200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModLtiGetToolTypesAndProxies200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModLtiGetToolTypesAndProxies200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modLtiGetToolTypesAndProxiesAsync
     *
     * Get a list of the tool types and tool proxies
     *
     * @param  \OpenAPI\Client\Model\ModLtiGetToolTypesAndProxiesRequest $mod_lti_get_tool_types_and_proxies_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLtiGetToolTypesAndProxies'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modLtiGetToolTypesAndProxiesAsync($mod_lti_get_tool_types_and_proxies_request, string $contentType = self::contentTypes['modLtiGetToolTypesAndProxies'][0])
    {
        return $this->modLtiGetToolTypesAndProxiesAsyncWithHttpInfo($mod_lti_get_tool_types_and_proxies_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modLtiGetToolTypesAndProxiesAsyncWithHttpInfo
     *
     * Get a list of the tool types and tool proxies
     *
     * @param  \OpenAPI\Client\Model\ModLtiGetToolTypesAndProxiesRequest $mod_lti_get_tool_types_and_proxies_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLtiGetToolTypesAndProxies'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modLtiGetToolTypesAndProxiesAsyncWithHttpInfo($mod_lti_get_tool_types_and_proxies_request, string $contentType = self::contentTypes['modLtiGetToolTypesAndProxies'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModLtiGetToolTypesAndProxies200Response';
        $request = $this->modLtiGetToolTypesAndProxiesRequest($mod_lti_get_tool_types_and_proxies_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modLtiGetToolTypesAndProxies'
     *
     * @param  \OpenAPI\Client\Model\ModLtiGetToolTypesAndProxiesRequest $mod_lti_get_tool_types_and_proxies_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLtiGetToolTypesAndProxies'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modLtiGetToolTypesAndProxiesRequest($mod_lti_get_tool_types_and_proxies_request, string $contentType = self::contentTypes['modLtiGetToolTypesAndProxies'][0])
    {

        // verify the required parameter 'mod_lti_get_tool_types_and_proxies_request' is set
        if ($mod_lti_get_tool_types_and_proxies_request === null || (is_array($mod_lti_get_tool_types_and_proxies_request) && count($mod_lti_get_tool_types_and_proxies_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_lti_get_tool_types_and_proxies_request when calling modLtiGetToolTypesAndProxies'
            );
        }


        $resourcePath = '/mod_lti_get_tool_types_and_proxies';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_lti_get_tool_types_and_proxies_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_lti_get_tool_types_and_proxies_request));
            } else {
                $httpBody = $mod_lti_get_tool_types_and_proxies_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modLtiGetToolTypesAndProxiesCount
     *
     * Get total number of the tool types and tool proxies
     *
     * @param  \OpenAPI\Client\Model\ModLtiGetToolTypesAndProxiesCountRequest $mod_lti_get_tool_types_and_proxies_count_request mod_lti_get_tool_types_and_proxies_count_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLtiGetToolTypesAndProxiesCount'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModLtiGetToolTypesAndProxiesCount200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modLtiGetToolTypesAndProxiesCount($mod_lti_get_tool_types_and_proxies_count_request, string $contentType = self::contentTypes['modLtiGetToolTypesAndProxiesCount'][0])
    {
        list($response) = $this->modLtiGetToolTypesAndProxiesCountWithHttpInfo($mod_lti_get_tool_types_and_proxies_count_request, $contentType);
        return $response;
    }

    /**
     * Operation modLtiGetToolTypesAndProxiesCountWithHttpInfo
     *
     * Get total number of the tool types and tool proxies
     *
     * @param  \OpenAPI\Client\Model\ModLtiGetToolTypesAndProxiesCountRequest $mod_lti_get_tool_types_and_proxies_count_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLtiGetToolTypesAndProxiesCount'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModLtiGetToolTypesAndProxiesCount200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modLtiGetToolTypesAndProxiesCountWithHttpInfo($mod_lti_get_tool_types_and_proxies_count_request, string $contentType = self::contentTypes['modLtiGetToolTypesAndProxiesCount'][0])
    {
        $request = $this->modLtiGetToolTypesAndProxiesCountRequest($mod_lti_get_tool_types_and_proxies_count_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModLtiGetToolTypesAndProxiesCount200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModLtiGetToolTypesAndProxiesCount200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModLtiGetToolTypesAndProxiesCount200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModLtiGetToolTypesAndProxiesCount200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModLtiGetToolTypesAndProxiesCount200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modLtiGetToolTypesAndProxiesCountAsync
     *
     * Get total number of the tool types and tool proxies
     *
     * @param  \OpenAPI\Client\Model\ModLtiGetToolTypesAndProxiesCountRequest $mod_lti_get_tool_types_and_proxies_count_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLtiGetToolTypesAndProxiesCount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modLtiGetToolTypesAndProxiesCountAsync($mod_lti_get_tool_types_and_proxies_count_request, string $contentType = self::contentTypes['modLtiGetToolTypesAndProxiesCount'][0])
    {
        return $this->modLtiGetToolTypesAndProxiesCountAsyncWithHttpInfo($mod_lti_get_tool_types_and_proxies_count_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modLtiGetToolTypesAndProxiesCountAsyncWithHttpInfo
     *
     * Get total number of the tool types and tool proxies
     *
     * @param  \OpenAPI\Client\Model\ModLtiGetToolTypesAndProxiesCountRequest $mod_lti_get_tool_types_and_proxies_count_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLtiGetToolTypesAndProxiesCount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modLtiGetToolTypesAndProxiesCountAsyncWithHttpInfo($mod_lti_get_tool_types_and_proxies_count_request, string $contentType = self::contentTypes['modLtiGetToolTypesAndProxiesCount'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModLtiGetToolTypesAndProxiesCount200Response';
        $request = $this->modLtiGetToolTypesAndProxiesCountRequest($mod_lti_get_tool_types_and_proxies_count_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modLtiGetToolTypesAndProxiesCount'
     *
     * @param  \OpenAPI\Client\Model\ModLtiGetToolTypesAndProxiesCountRequest $mod_lti_get_tool_types_and_proxies_count_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLtiGetToolTypesAndProxiesCount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modLtiGetToolTypesAndProxiesCountRequest($mod_lti_get_tool_types_and_proxies_count_request, string $contentType = self::contentTypes['modLtiGetToolTypesAndProxiesCount'][0])
    {

        // verify the required parameter 'mod_lti_get_tool_types_and_proxies_count_request' is set
        if ($mod_lti_get_tool_types_and_proxies_count_request === null || (is_array($mod_lti_get_tool_types_and_proxies_count_request) && count($mod_lti_get_tool_types_and_proxies_count_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_lti_get_tool_types_and_proxies_count_request when calling modLtiGetToolTypesAndProxiesCount'
            );
        }


        $resourcePath = '/mod_lti_get_tool_types_and_proxies_count';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_lti_get_tool_types_and_proxies_count_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_lti_get_tool_types_and_proxies_count_request));
            } else {
                $httpBody = $mod_lti_get_tool_types_and_proxies_count_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modLtiIsCartridge
     *
     * Determine if the given url is for a cartridge
     *
     * @param  \OpenAPI\Client\Model\ModLtiIsCartridgeRequest $mod_lti_is_cartridge_request mod_lti_is_cartridge_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLtiIsCartridge'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModLtiIsCartridge200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modLtiIsCartridge($mod_lti_is_cartridge_request, string $contentType = self::contentTypes['modLtiIsCartridge'][0])
    {
        list($response) = $this->modLtiIsCartridgeWithHttpInfo($mod_lti_is_cartridge_request, $contentType);
        return $response;
    }

    /**
     * Operation modLtiIsCartridgeWithHttpInfo
     *
     * Determine if the given url is for a cartridge
     *
     * @param  \OpenAPI\Client\Model\ModLtiIsCartridgeRequest $mod_lti_is_cartridge_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLtiIsCartridge'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModLtiIsCartridge200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modLtiIsCartridgeWithHttpInfo($mod_lti_is_cartridge_request, string $contentType = self::contentTypes['modLtiIsCartridge'][0])
    {
        $request = $this->modLtiIsCartridgeRequest($mod_lti_is_cartridge_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModLtiIsCartridge200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModLtiIsCartridge200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModLtiIsCartridge200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModLtiIsCartridge200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModLtiIsCartridge200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modLtiIsCartridgeAsync
     *
     * Determine if the given url is for a cartridge
     *
     * @param  \OpenAPI\Client\Model\ModLtiIsCartridgeRequest $mod_lti_is_cartridge_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLtiIsCartridge'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modLtiIsCartridgeAsync($mod_lti_is_cartridge_request, string $contentType = self::contentTypes['modLtiIsCartridge'][0])
    {
        return $this->modLtiIsCartridgeAsyncWithHttpInfo($mod_lti_is_cartridge_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modLtiIsCartridgeAsyncWithHttpInfo
     *
     * Determine if the given url is for a cartridge
     *
     * @param  \OpenAPI\Client\Model\ModLtiIsCartridgeRequest $mod_lti_is_cartridge_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLtiIsCartridge'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modLtiIsCartridgeAsyncWithHttpInfo($mod_lti_is_cartridge_request, string $contentType = self::contentTypes['modLtiIsCartridge'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModLtiIsCartridge200Response';
        $request = $this->modLtiIsCartridgeRequest($mod_lti_is_cartridge_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modLtiIsCartridge'
     *
     * @param  \OpenAPI\Client\Model\ModLtiIsCartridgeRequest $mod_lti_is_cartridge_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLtiIsCartridge'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modLtiIsCartridgeRequest($mod_lti_is_cartridge_request, string $contentType = self::contentTypes['modLtiIsCartridge'][0])
    {

        // verify the required parameter 'mod_lti_is_cartridge_request' is set
        if ($mod_lti_is_cartridge_request === null || (is_array($mod_lti_is_cartridge_request) && count($mod_lti_is_cartridge_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_lti_is_cartridge_request when calling modLtiIsCartridge'
            );
        }


        $resourcePath = '/mod_lti_is_cartridge';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_lti_is_cartridge_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_lti_is_cartridge_request));
            } else {
                $httpBody = $mod_lti_is_cartridge_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modLtiToggleShowinactivitychooser
     *
     * Toggle showinactivitychooser for a tool type in a course
     *
     * @param  \OpenAPI\Client\Model\ModLtiToggleShowinactivitychooserRequest $mod_lti_toggle_showinactivitychooser_request mod_lti_toggle_showinactivitychooser_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLtiToggleShowinactivitychooser'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modLtiToggleShowinactivitychooser($mod_lti_toggle_showinactivitychooser_request, string $contentType = self::contentTypes['modLtiToggleShowinactivitychooser'][0])
    {
        list($response) = $this->modLtiToggleShowinactivitychooserWithHttpInfo($mod_lti_toggle_showinactivitychooser_request, $contentType);
        return $response;
    }

    /**
     * Operation modLtiToggleShowinactivitychooserWithHttpInfo
     *
     * Toggle showinactivitychooser for a tool type in a course
     *
     * @param  \OpenAPI\Client\Model\ModLtiToggleShowinactivitychooserRequest $mod_lti_toggle_showinactivitychooser_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLtiToggleShowinactivitychooser'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modLtiToggleShowinactivitychooserWithHttpInfo($mod_lti_toggle_showinactivitychooser_request, string $contentType = self::contentTypes['modLtiToggleShowinactivitychooser'][0])
    {
        $request = $this->modLtiToggleShowinactivitychooserRequest($mod_lti_toggle_showinactivitychooser_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modLtiToggleShowinactivitychooserAsync
     *
     * Toggle showinactivitychooser for a tool type in a course
     *
     * @param  \OpenAPI\Client\Model\ModLtiToggleShowinactivitychooserRequest $mod_lti_toggle_showinactivitychooser_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLtiToggleShowinactivitychooser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modLtiToggleShowinactivitychooserAsync($mod_lti_toggle_showinactivitychooser_request, string $contentType = self::contentTypes['modLtiToggleShowinactivitychooser'][0])
    {
        return $this->modLtiToggleShowinactivitychooserAsyncWithHttpInfo($mod_lti_toggle_showinactivitychooser_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modLtiToggleShowinactivitychooserAsyncWithHttpInfo
     *
     * Toggle showinactivitychooser for a tool type in a course
     *
     * @param  \OpenAPI\Client\Model\ModLtiToggleShowinactivitychooserRequest $mod_lti_toggle_showinactivitychooser_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLtiToggleShowinactivitychooser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modLtiToggleShowinactivitychooserAsyncWithHttpInfo($mod_lti_toggle_showinactivitychooser_request, string $contentType = self::contentTypes['modLtiToggleShowinactivitychooser'][0])
    {
        $returnType = 'object';
        $request = $this->modLtiToggleShowinactivitychooserRequest($mod_lti_toggle_showinactivitychooser_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modLtiToggleShowinactivitychooser'
     *
     * @param  \OpenAPI\Client\Model\ModLtiToggleShowinactivitychooserRequest $mod_lti_toggle_showinactivitychooser_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLtiToggleShowinactivitychooser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modLtiToggleShowinactivitychooserRequest($mod_lti_toggle_showinactivitychooser_request, string $contentType = self::contentTypes['modLtiToggleShowinactivitychooser'][0])
    {

        // verify the required parameter 'mod_lti_toggle_showinactivitychooser_request' is set
        if ($mod_lti_toggle_showinactivitychooser_request === null || (is_array($mod_lti_toggle_showinactivitychooser_request) && count($mod_lti_toggle_showinactivitychooser_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_lti_toggle_showinactivitychooser_request when calling modLtiToggleShowinactivitychooser'
            );
        }


        $resourcePath = '/mod_lti_toggle_showinactivitychooser';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_lti_toggle_showinactivitychooser_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_lti_toggle_showinactivitychooser_request));
            } else {
                $httpBody = $mod_lti_toggle_showinactivitychooser_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modLtiUpdateToolType
     *
     * Update a tool type
     *
     * @param  \OpenAPI\Client\Model\ModLtiUpdateToolTypeRequest $mod_lti_update_tool_type_request mod_lti_update_tool_type_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLtiUpdateToolType'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModLtiUpdateToolType200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modLtiUpdateToolType($mod_lti_update_tool_type_request, string $contentType = self::contentTypes['modLtiUpdateToolType'][0])
    {
        list($response) = $this->modLtiUpdateToolTypeWithHttpInfo($mod_lti_update_tool_type_request, $contentType);
        return $response;
    }

    /**
     * Operation modLtiUpdateToolTypeWithHttpInfo
     *
     * Update a tool type
     *
     * @param  \OpenAPI\Client\Model\ModLtiUpdateToolTypeRequest $mod_lti_update_tool_type_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLtiUpdateToolType'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModLtiUpdateToolType200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modLtiUpdateToolTypeWithHttpInfo($mod_lti_update_tool_type_request, string $contentType = self::contentTypes['modLtiUpdateToolType'][0])
    {
        $request = $this->modLtiUpdateToolTypeRequest($mod_lti_update_tool_type_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModLtiUpdateToolType200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModLtiUpdateToolType200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModLtiUpdateToolType200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModLtiUpdateToolType200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModLtiUpdateToolType200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modLtiUpdateToolTypeAsync
     *
     * Update a tool type
     *
     * @param  \OpenAPI\Client\Model\ModLtiUpdateToolTypeRequest $mod_lti_update_tool_type_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLtiUpdateToolType'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modLtiUpdateToolTypeAsync($mod_lti_update_tool_type_request, string $contentType = self::contentTypes['modLtiUpdateToolType'][0])
    {
        return $this->modLtiUpdateToolTypeAsyncWithHttpInfo($mod_lti_update_tool_type_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modLtiUpdateToolTypeAsyncWithHttpInfo
     *
     * Update a tool type
     *
     * @param  \OpenAPI\Client\Model\ModLtiUpdateToolTypeRequest $mod_lti_update_tool_type_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLtiUpdateToolType'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modLtiUpdateToolTypeAsyncWithHttpInfo($mod_lti_update_tool_type_request, string $contentType = self::contentTypes['modLtiUpdateToolType'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModLtiUpdateToolType200Response';
        $request = $this->modLtiUpdateToolTypeRequest($mod_lti_update_tool_type_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modLtiUpdateToolType'
     *
     * @param  \OpenAPI\Client\Model\ModLtiUpdateToolTypeRequest $mod_lti_update_tool_type_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLtiUpdateToolType'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modLtiUpdateToolTypeRequest($mod_lti_update_tool_type_request, string $contentType = self::contentTypes['modLtiUpdateToolType'][0])
    {

        // verify the required parameter 'mod_lti_update_tool_type_request' is set
        if ($mod_lti_update_tool_type_request === null || (is_array($mod_lti_update_tool_type_request) && count($mod_lti_update_tool_type_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_lti_update_tool_type_request when calling modLtiUpdateToolType'
            );
        }


        $resourcePath = '/mod_lti_update_tool_type';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_lti_update_tool_type_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_lti_update_tool_type_request));
            } else {
                $httpBody = $mod_lti_update_tool_type_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modLtiViewLti
     *
     * Trigger the course module viewed event and update the module completion status.
     *
     * @param  \OpenAPI\Client\Model\ModLtiViewLtiRequest $mod_lti_view_lti_request mod_lti_view_lti_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLtiViewLti'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modLtiViewLti($mod_lti_view_lti_request, string $contentType = self::contentTypes['modLtiViewLti'][0])
    {
        list($response) = $this->modLtiViewLtiWithHttpInfo($mod_lti_view_lti_request, $contentType);
        return $response;
    }

    /**
     * Operation modLtiViewLtiWithHttpInfo
     *
     * Trigger the course module viewed event and update the module completion status.
     *
     * @param  \OpenAPI\Client\Model\ModLtiViewLtiRequest $mod_lti_view_lti_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLtiViewLti'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modLtiViewLtiWithHttpInfo($mod_lti_view_lti_request, string $contentType = self::contentTypes['modLtiViewLti'][0])
    {
        $request = $this->modLtiViewLtiRequest($mod_lti_view_lti_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modLtiViewLtiAsync
     *
     * Trigger the course module viewed event and update the module completion status.
     *
     * @param  \OpenAPI\Client\Model\ModLtiViewLtiRequest $mod_lti_view_lti_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLtiViewLti'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modLtiViewLtiAsync($mod_lti_view_lti_request, string $contentType = self::contentTypes['modLtiViewLti'][0])
    {
        return $this->modLtiViewLtiAsyncWithHttpInfo($mod_lti_view_lti_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modLtiViewLtiAsyncWithHttpInfo
     *
     * Trigger the course module viewed event and update the module completion status.
     *
     * @param  \OpenAPI\Client\Model\ModLtiViewLtiRequest $mod_lti_view_lti_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLtiViewLti'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modLtiViewLtiAsyncWithHttpInfo($mod_lti_view_lti_request, string $contentType = self::contentTypes['modLtiViewLti'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response';
        $request = $this->modLtiViewLtiRequest($mod_lti_view_lti_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modLtiViewLti'
     *
     * @param  \OpenAPI\Client\Model\ModLtiViewLtiRequest $mod_lti_view_lti_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLtiViewLti'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modLtiViewLtiRequest($mod_lti_view_lti_request, string $contentType = self::contentTypes['modLtiViewLti'][0])
    {

        // verify the required parameter 'mod_lti_view_lti_request' is set
        if ($mod_lti_view_lti_request === null || (is_array($mod_lti_view_lti_request) && count($mod_lti_view_lti_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_lti_view_lti_request when calling modLtiViewLti'
            );
        }


        $resourcePath = '/mod_lti_view_lti';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_lti_view_lti_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_lti_view_lti_request));
            } else {
                $httpBody = $mod_lti_view_lti_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
