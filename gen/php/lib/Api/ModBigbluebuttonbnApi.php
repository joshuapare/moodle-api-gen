<?php
/**
 * ModBigbluebuttonbnApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * ModBigbluebuttonbnApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ModBigbluebuttonbnApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'modBigbluebuttonbnCanJoin' => [
            'application/json',
        ],
        'modBigbluebuttonbnCompletionValidate' => [
            'application/json',
        ],
        'modBigbluebuttonbnEndMeeting' => [
            'application/json',
        ],
        'modBigbluebuttonbnGetBigbluebuttonbnsByCourses' => [
            'application/json',
        ],
        'modBigbluebuttonbnGetJoinUrl' => [
            'application/json',
        ],
        'modBigbluebuttonbnGetRecordings' => [
            'application/json',
        ],
        'modBigbluebuttonbnGetRecordingsToImport' => [
            'application/json',
        ],
        'modBigbluebuttonbnMeetingInfo' => [
            'application/json',
        ],
        'modBigbluebuttonbnUpdateRecording' => [
            'application/json',
        ],
        'modBigbluebuttonbnViewBigbluebuttonbn' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation modBigbluebuttonbnCanJoin
     *
     * Returns information if the current user can join or not.
     *
     * @param  \OpenAPI\Client\Model\ModBigbluebuttonbnCanJoinRequest $mod_bigbluebuttonbn_can_join_request mod_bigbluebuttonbn_can_join_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modBigbluebuttonbnCanJoin'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModBigbluebuttonbnCanJoin200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modBigbluebuttonbnCanJoin($mod_bigbluebuttonbn_can_join_request, string $contentType = self::contentTypes['modBigbluebuttonbnCanJoin'][0])
    {
        list($response) = $this->modBigbluebuttonbnCanJoinWithHttpInfo($mod_bigbluebuttonbn_can_join_request, $contentType);
        return $response;
    }

    /**
     * Operation modBigbluebuttonbnCanJoinWithHttpInfo
     *
     * Returns information if the current user can join or not.
     *
     * @param  \OpenAPI\Client\Model\ModBigbluebuttonbnCanJoinRequest $mod_bigbluebuttonbn_can_join_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modBigbluebuttonbnCanJoin'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModBigbluebuttonbnCanJoin200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modBigbluebuttonbnCanJoinWithHttpInfo($mod_bigbluebuttonbn_can_join_request, string $contentType = self::contentTypes['modBigbluebuttonbnCanJoin'][0])
    {
        $request = $this->modBigbluebuttonbnCanJoinRequest($mod_bigbluebuttonbn_can_join_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModBigbluebuttonbnCanJoin200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModBigbluebuttonbnCanJoin200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModBigbluebuttonbnCanJoin200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModBigbluebuttonbnCanJoin200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModBigbluebuttonbnCanJoin200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modBigbluebuttonbnCanJoinAsync
     *
     * Returns information if the current user can join or not.
     *
     * @param  \OpenAPI\Client\Model\ModBigbluebuttonbnCanJoinRequest $mod_bigbluebuttonbn_can_join_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modBigbluebuttonbnCanJoin'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modBigbluebuttonbnCanJoinAsync($mod_bigbluebuttonbn_can_join_request, string $contentType = self::contentTypes['modBigbluebuttonbnCanJoin'][0])
    {
        return $this->modBigbluebuttonbnCanJoinAsyncWithHttpInfo($mod_bigbluebuttonbn_can_join_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modBigbluebuttonbnCanJoinAsyncWithHttpInfo
     *
     * Returns information if the current user can join or not.
     *
     * @param  \OpenAPI\Client\Model\ModBigbluebuttonbnCanJoinRequest $mod_bigbluebuttonbn_can_join_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modBigbluebuttonbnCanJoin'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modBigbluebuttonbnCanJoinAsyncWithHttpInfo($mod_bigbluebuttonbn_can_join_request, string $contentType = self::contentTypes['modBigbluebuttonbnCanJoin'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModBigbluebuttonbnCanJoin200Response';
        $request = $this->modBigbluebuttonbnCanJoinRequest($mod_bigbluebuttonbn_can_join_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modBigbluebuttonbnCanJoin'
     *
     * @param  \OpenAPI\Client\Model\ModBigbluebuttonbnCanJoinRequest $mod_bigbluebuttonbn_can_join_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modBigbluebuttonbnCanJoin'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modBigbluebuttonbnCanJoinRequest($mod_bigbluebuttonbn_can_join_request, string $contentType = self::contentTypes['modBigbluebuttonbnCanJoin'][0])
    {

        // verify the required parameter 'mod_bigbluebuttonbn_can_join_request' is set
        if ($mod_bigbluebuttonbn_can_join_request === null || (is_array($mod_bigbluebuttonbn_can_join_request) && count($mod_bigbluebuttonbn_can_join_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_bigbluebuttonbn_can_join_request when calling modBigbluebuttonbnCanJoin'
            );
        }


        $resourcePath = '/mod_bigbluebuttonbn_can_join';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_bigbluebuttonbn_can_join_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_bigbluebuttonbn_can_join_request));
            } else {
                $httpBody = $mod_bigbluebuttonbn_can_join_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modBigbluebuttonbnCompletionValidate
     *
     * Validate completion
     *
     * @param  \OpenAPI\Client\Model\ModBigbluebuttonbnCompletionValidateRequest $mod_bigbluebuttonbn_completion_validate_request mod_bigbluebuttonbn_completion_validate_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modBigbluebuttonbnCompletionValidate'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CoreCohortAddCohortMembers200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modBigbluebuttonbnCompletionValidate($mod_bigbluebuttonbn_completion_validate_request, string $contentType = self::contentTypes['modBigbluebuttonbnCompletionValidate'][0])
    {
        list($response) = $this->modBigbluebuttonbnCompletionValidateWithHttpInfo($mod_bigbluebuttonbn_completion_validate_request, $contentType);
        return $response;
    }

    /**
     * Operation modBigbluebuttonbnCompletionValidateWithHttpInfo
     *
     * Validate completion
     *
     * @param  \OpenAPI\Client\Model\ModBigbluebuttonbnCompletionValidateRequest $mod_bigbluebuttonbn_completion_validate_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modBigbluebuttonbnCompletionValidate'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CoreCohortAddCohortMembers200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modBigbluebuttonbnCompletionValidateWithHttpInfo($mod_bigbluebuttonbn_completion_validate_request, string $contentType = self::contentTypes['modBigbluebuttonbnCompletionValidate'][0])
    {
        $request = $this->modBigbluebuttonbnCompletionValidateRequest($mod_bigbluebuttonbn_completion_validate_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CoreCohortAddCohortMembers200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CoreCohortAddCohortMembers200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CoreCohortAddCohortMembers200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CoreCohortAddCohortMembers200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CoreCohortAddCohortMembers200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modBigbluebuttonbnCompletionValidateAsync
     *
     * Validate completion
     *
     * @param  \OpenAPI\Client\Model\ModBigbluebuttonbnCompletionValidateRequest $mod_bigbluebuttonbn_completion_validate_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modBigbluebuttonbnCompletionValidate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modBigbluebuttonbnCompletionValidateAsync($mod_bigbluebuttonbn_completion_validate_request, string $contentType = self::contentTypes['modBigbluebuttonbnCompletionValidate'][0])
    {
        return $this->modBigbluebuttonbnCompletionValidateAsyncWithHttpInfo($mod_bigbluebuttonbn_completion_validate_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modBigbluebuttonbnCompletionValidateAsyncWithHttpInfo
     *
     * Validate completion
     *
     * @param  \OpenAPI\Client\Model\ModBigbluebuttonbnCompletionValidateRequest $mod_bigbluebuttonbn_completion_validate_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modBigbluebuttonbnCompletionValidate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modBigbluebuttonbnCompletionValidateAsyncWithHttpInfo($mod_bigbluebuttonbn_completion_validate_request, string $contentType = self::contentTypes['modBigbluebuttonbnCompletionValidate'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CoreCohortAddCohortMembers200Response';
        $request = $this->modBigbluebuttonbnCompletionValidateRequest($mod_bigbluebuttonbn_completion_validate_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modBigbluebuttonbnCompletionValidate'
     *
     * @param  \OpenAPI\Client\Model\ModBigbluebuttonbnCompletionValidateRequest $mod_bigbluebuttonbn_completion_validate_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modBigbluebuttonbnCompletionValidate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modBigbluebuttonbnCompletionValidateRequest($mod_bigbluebuttonbn_completion_validate_request, string $contentType = self::contentTypes['modBigbluebuttonbnCompletionValidate'][0])
    {

        // verify the required parameter 'mod_bigbluebuttonbn_completion_validate_request' is set
        if ($mod_bigbluebuttonbn_completion_validate_request === null || (is_array($mod_bigbluebuttonbn_completion_validate_request) && count($mod_bigbluebuttonbn_completion_validate_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_bigbluebuttonbn_completion_validate_request when calling modBigbluebuttonbnCompletionValidate'
            );
        }


        $resourcePath = '/mod_bigbluebuttonbn_completion_validate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_bigbluebuttonbn_completion_validate_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_bigbluebuttonbn_completion_validate_request));
            } else {
                $httpBody = $mod_bigbluebuttonbn_completion_validate_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modBigbluebuttonbnEndMeeting
     *
     * End a meeting
     *
     * @param  \OpenAPI\Client\Model\ModBigbluebuttonbnEndMeetingRequest $mod_bigbluebuttonbn_end_meeting_request mod_bigbluebuttonbn_end_meeting_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modBigbluebuttonbnEndMeeting'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CoreCohortAddCohortMembers200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modBigbluebuttonbnEndMeeting($mod_bigbluebuttonbn_end_meeting_request, string $contentType = self::contentTypes['modBigbluebuttonbnEndMeeting'][0])
    {
        list($response) = $this->modBigbluebuttonbnEndMeetingWithHttpInfo($mod_bigbluebuttonbn_end_meeting_request, $contentType);
        return $response;
    }

    /**
     * Operation modBigbluebuttonbnEndMeetingWithHttpInfo
     *
     * End a meeting
     *
     * @param  \OpenAPI\Client\Model\ModBigbluebuttonbnEndMeetingRequest $mod_bigbluebuttonbn_end_meeting_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modBigbluebuttonbnEndMeeting'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CoreCohortAddCohortMembers200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modBigbluebuttonbnEndMeetingWithHttpInfo($mod_bigbluebuttonbn_end_meeting_request, string $contentType = self::contentTypes['modBigbluebuttonbnEndMeeting'][0])
    {
        $request = $this->modBigbluebuttonbnEndMeetingRequest($mod_bigbluebuttonbn_end_meeting_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CoreCohortAddCohortMembers200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CoreCohortAddCohortMembers200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CoreCohortAddCohortMembers200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CoreCohortAddCohortMembers200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CoreCohortAddCohortMembers200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modBigbluebuttonbnEndMeetingAsync
     *
     * End a meeting
     *
     * @param  \OpenAPI\Client\Model\ModBigbluebuttonbnEndMeetingRequest $mod_bigbluebuttonbn_end_meeting_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modBigbluebuttonbnEndMeeting'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modBigbluebuttonbnEndMeetingAsync($mod_bigbluebuttonbn_end_meeting_request, string $contentType = self::contentTypes['modBigbluebuttonbnEndMeeting'][0])
    {
        return $this->modBigbluebuttonbnEndMeetingAsyncWithHttpInfo($mod_bigbluebuttonbn_end_meeting_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modBigbluebuttonbnEndMeetingAsyncWithHttpInfo
     *
     * End a meeting
     *
     * @param  \OpenAPI\Client\Model\ModBigbluebuttonbnEndMeetingRequest $mod_bigbluebuttonbn_end_meeting_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modBigbluebuttonbnEndMeeting'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modBigbluebuttonbnEndMeetingAsyncWithHttpInfo($mod_bigbluebuttonbn_end_meeting_request, string $contentType = self::contentTypes['modBigbluebuttonbnEndMeeting'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CoreCohortAddCohortMembers200Response';
        $request = $this->modBigbluebuttonbnEndMeetingRequest($mod_bigbluebuttonbn_end_meeting_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modBigbluebuttonbnEndMeeting'
     *
     * @param  \OpenAPI\Client\Model\ModBigbluebuttonbnEndMeetingRequest $mod_bigbluebuttonbn_end_meeting_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modBigbluebuttonbnEndMeeting'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modBigbluebuttonbnEndMeetingRequest($mod_bigbluebuttonbn_end_meeting_request, string $contentType = self::contentTypes['modBigbluebuttonbnEndMeeting'][0])
    {

        // verify the required parameter 'mod_bigbluebuttonbn_end_meeting_request' is set
        if ($mod_bigbluebuttonbn_end_meeting_request === null || (is_array($mod_bigbluebuttonbn_end_meeting_request) && count($mod_bigbluebuttonbn_end_meeting_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_bigbluebuttonbn_end_meeting_request when calling modBigbluebuttonbnEndMeeting'
            );
        }


        $resourcePath = '/mod_bigbluebuttonbn_end_meeting';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_bigbluebuttonbn_end_meeting_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_bigbluebuttonbn_end_meeting_request));
            } else {
                $httpBody = $mod_bigbluebuttonbn_end_meeting_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modBigbluebuttonbnGetBigbluebuttonbnsByCourses
     *
     * Returns a list of bigbluebuttonbns in a provided list of courses, if no list is provided                             all bigbluebuttonbns that the user can view will be returned.
     *
     * @param  \OpenAPI\Client\Model\ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest $mod_bigbluebuttonbn_get_bigbluebuttonbns_by_courses_request mod_bigbluebuttonbn_get_bigbluebuttonbns_by_courses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modBigbluebuttonbnGetBigbluebuttonbnsByCourses'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModBigbluebuttonbnGetBigbluebuttonbnsByCourses200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modBigbluebuttonbnGetBigbluebuttonbnsByCourses($mod_bigbluebuttonbn_get_bigbluebuttonbns_by_courses_request, string $contentType = self::contentTypes['modBigbluebuttonbnGetBigbluebuttonbnsByCourses'][0])
    {
        list($response) = $this->modBigbluebuttonbnGetBigbluebuttonbnsByCoursesWithHttpInfo($mod_bigbluebuttonbn_get_bigbluebuttonbns_by_courses_request, $contentType);
        return $response;
    }

    /**
     * Operation modBigbluebuttonbnGetBigbluebuttonbnsByCoursesWithHttpInfo
     *
     * Returns a list of bigbluebuttonbns in a provided list of courses, if no list is provided                             all bigbluebuttonbns that the user can view will be returned.
     *
     * @param  \OpenAPI\Client\Model\ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest $mod_bigbluebuttonbn_get_bigbluebuttonbns_by_courses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modBigbluebuttonbnGetBigbluebuttonbnsByCourses'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModBigbluebuttonbnGetBigbluebuttonbnsByCourses200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modBigbluebuttonbnGetBigbluebuttonbnsByCoursesWithHttpInfo($mod_bigbluebuttonbn_get_bigbluebuttonbns_by_courses_request, string $contentType = self::contentTypes['modBigbluebuttonbnGetBigbluebuttonbnsByCourses'][0])
    {
        $request = $this->modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest($mod_bigbluebuttonbn_get_bigbluebuttonbns_by_courses_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModBigbluebuttonbnGetBigbluebuttonbnsByCourses200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModBigbluebuttonbnGetBigbluebuttonbnsByCourses200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModBigbluebuttonbnGetBigbluebuttonbnsByCourses200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModBigbluebuttonbnGetBigbluebuttonbnsByCourses200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModBigbluebuttonbnGetBigbluebuttonbnsByCourses200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modBigbluebuttonbnGetBigbluebuttonbnsByCoursesAsync
     *
     * Returns a list of bigbluebuttonbns in a provided list of courses, if no list is provided                             all bigbluebuttonbns that the user can view will be returned.
     *
     * @param  \OpenAPI\Client\Model\ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest $mod_bigbluebuttonbn_get_bigbluebuttonbns_by_courses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modBigbluebuttonbnGetBigbluebuttonbnsByCourses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modBigbluebuttonbnGetBigbluebuttonbnsByCoursesAsync($mod_bigbluebuttonbn_get_bigbluebuttonbns_by_courses_request, string $contentType = self::contentTypes['modBigbluebuttonbnGetBigbluebuttonbnsByCourses'][0])
    {
        return $this->modBigbluebuttonbnGetBigbluebuttonbnsByCoursesAsyncWithHttpInfo($mod_bigbluebuttonbn_get_bigbluebuttonbns_by_courses_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modBigbluebuttonbnGetBigbluebuttonbnsByCoursesAsyncWithHttpInfo
     *
     * Returns a list of bigbluebuttonbns in a provided list of courses, if no list is provided                             all bigbluebuttonbns that the user can view will be returned.
     *
     * @param  \OpenAPI\Client\Model\ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest $mod_bigbluebuttonbn_get_bigbluebuttonbns_by_courses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modBigbluebuttonbnGetBigbluebuttonbnsByCourses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modBigbluebuttonbnGetBigbluebuttonbnsByCoursesAsyncWithHttpInfo($mod_bigbluebuttonbn_get_bigbluebuttonbns_by_courses_request, string $contentType = self::contentTypes['modBigbluebuttonbnGetBigbluebuttonbnsByCourses'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModBigbluebuttonbnGetBigbluebuttonbnsByCourses200Response';
        $request = $this->modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest($mod_bigbluebuttonbn_get_bigbluebuttonbns_by_courses_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modBigbluebuttonbnGetBigbluebuttonbnsByCourses'
     *
     * @param  \OpenAPI\Client\Model\ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest $mod_bigbluebuttonbn_get_bigbluebuttonbns_by_courses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modBigbluebuttonbnGetBigbluebuttonbnsByCourses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest($mod_bigbluebuttonbn_get_bigbluebuttonbns_by_courses_request, string $contentType = self::contentTypes['modBigbluebuttonbnGetBigbluebuttonbnsByCourses'][0])
    {

        // verify the required parameter 'mod_bigbluebuttonbn_get_bigbluebuttonbns_by_courses_request' is set
        if ($mod_bigbluebuttonbn_get_bigbluebuttonbns_by_courses_request === null || (is_array($mod_bigbluebuttonbn_get_bigbluebuttonbns_by_courses_request) && count($mod_bigbluebuttonbn_get_bigbluebuttonbns_by_courses_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_bigbluebuttonbn_get_bigbluebuttonbns_by_courses_request when calling modBigbluebuttonbnGetBigbluebuttonbnsByCourses'
            );
        }


        $resourcePath = '/mod_bigbluebuttonbn_get_bigbluebuttonbns_by_courses';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_bigbluebuttonbn_get_bigbluebuttonbns_by_courses_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_bigbluebuttonbn_get_bigbluebuttonbns_by_courses_request));
            } else {
                $httpBody = $mod_bigbluebuttonbn_get_bigbluebuttonbns_by_courses_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modBigbluebuttonbnGetJoinUrl
     *
     * Get the join URL for the meeting and create if it does not exist.
     *
     * @param  \OpenAPI\Client\Model\ModBigbluebuttonbnCanJoinRequest $mod_bigbluebuttonbn_can_join_request mod_bigbluebuttonbn_can_join_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modBigbluebuttonbnGetJoinUrl'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModBigbluebuttonbnGetJoinUrl200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modBigbluebuttonbnGetJoinUrl($mod_bigbluebuttonbn_can_join_request, string $contentType = self::contentTypes['modBigbluebuttonbnGetJoinUrl'][0])
    {
        list($response) = $this->modBigbluebuttonbnGetJoinUrlWithHttpInfo($mod_bigbluebuttonbn_can_join_request, $contentType);
        return $response;
    }

    /**
     * Operation modBigbluebuttonbnGetJoinUrlWithHttpInfo
     *
     * Get the join URL for the meeting and create if it does not exist.
     *
     * @param  \OpenAPI\Client\Model\ModBigbluebuttonbnCanJoinRequest $mod_bigbluebuttonbn_can_join_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modBigbluebuttonbnGetJoinUrl'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModBigbluebuttonbnGetJoinUrl200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modBigbluebuttonbnGetJoinUrlWithHttpInfo($mod_bigbluebuttonbn_can_join_request, string $contentType = self::contentTypes['modBigbluebuttonbnGetJoinUrl'][0])
    {
        $request = $this->modBigbluebuttonbnGetJoinUrlRequest($mod_bigbluebuttonbn_can_join_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModBigbluebuttonbnGetJoinUrl200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModBigbluebuttonbnGetJoinUrl200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModBigbluebuttonbnGetJoinUrl200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModBigbluebuttonbnGetJoinUrl200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModBigbluebuttonbnGetJoinUrl200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modBigbluebuttonbnGetJoinUrlAsync
     *
     * Get the join URL for the meeting and create if it does not exist.
     *
     * @param  \OpenAPI\Client\Model\ModBigbluebuttonbnCanJoinRequest $mod_bigbluebuttonbn_can_join_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modBigbluebuttonbnGetJoinUrl'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modBigbluebuttonbnGetJoinUrlAsync($mod_bigbluebuttonbn_can_join_request, string $contentType = self::contentTypes['modBigbluebuttonbnGetJoinUrl'][0])
    {
        return $this->modBigbluebuttonbnGetJoinUrlAsyncWithHttpInfo($mod_bigbluebuttonbn_can_join_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modBigbluebuttonbnGetJoinUrlAsyncWithHttpInfo
     *
     * Get the join URL for the meeting and create if it does not exist.
     *
     * @param  \OpenAPI\Client\Model\ModBigbluebuttonbnCanJoinRequest $mod_bigbluebuttonbn_can_join_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modBigbluebuttonbnGetJoinUrl'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modBigbluebuttonbnGetJoinUrlAsyncWithHttpInfo($mod_bigbluebuttonbn_can_join_request, string $contentType = self::contentTypes['modBigbluebuttonbnGetJoinUrl'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModBigbluebuttonbnGetJoinUrl200Response';
        $request = $this->modBigbluebuttonbnGetJoinUrlRequest($mod_bigbluebuttonbn_can_join_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modBigbluebuttonbnGetJoinUrl'
     *
     * @param  \OpenAPI\Client\Model\ModBigbluebuttonbnCanJoinRequest $mod_bigbluebuttonbn_can_join_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modBigbluebuttonbnGetJoinUrl'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modBigbluebuttonbnGetJoinUrlRequest($mod_bigbluebuttonbn_can_join_request, string $contentType = self::contentTypes['modBigbluebuttonbnGetJoinUrl'][0])
    {

        // verify the required parameter 'mod_bigbluebuttonbn_can_join_request' is set
        if ($mod_bigbluebuttonbn_can_join_request === null || (is_array($mod_bigbluebuttonbn_can_join_request) && count($mod_bigbluebuttonbn_can_join_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_bigbluebuttonbn_can_join_request when calling modBigbluebuttonbnGetJoinUrl'
            );
        }


        $resourcePath = '/mod_bigbluebuttonbn_get_join_url';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_bigbluebuttonbn_can_join_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_bigbluebuttonbn_can_join_request));
            } else {
                $httpBody = $mod_bigbluebuttonbn_can_join_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modBigbluebuttonbnGetRecordings
     *
     * Returns a list of recordings ready to be processed by a datatable.
     *
     * @param  \OpenAPI\Client\Model\ModBigbluebuttonbnGetRecordingsRequest $mod_bigbluebuttonbn_get_recordings_request mod_bigbluebuttonbn_get_recordings_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modBigbluebuttonbnGetRecordings'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModBigbluebuttonbnGetRecordings200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modBigbluebuttonbnGetRecordings($mod_bigbluebuttonbn_get_recordings_request, string $contentType = self::contentTypes['modBigbluebuttonbnGetRecordings'][0])
    {
        list($response) = $this->modBigbluebuttonbnGetRecordingsWithHttpInfo($mod_bigbluebuttonbn_get_recordings_request, $contentType);
        return $response;
    }

    /**
     * Operation modBigbluebuttonbnGetRecordingsWithHttpInfo
     *
     * Returns a list of recordings ready to be processed by a datatable.
     *
     * @param  \OpenAPI\Client\Model\ModBigbluebuttonbnGetRecordingsRequest $mod_bigbluebuttonbn_get_recordings_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modBigbluebuttonbnGetRecordings'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModBigbluebuttonbnGetRecordings200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modBigbluebuttonbnGetRecordingsWithHttpInfo($mod_bigbluebuttonbn_get_recordings_request, string $contentType = self::contentTypes['modBigbluebuttonbnGetRecordings'][0])
    {
        $request = $this->modBigbluebuttonbnGetRecordingsRequest($mod_bigbluebuttonbn_get_recordings_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModBigbluebuttonbnGetRecordings200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModBigbluebuttonbnGetRecordings200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModBigbluebuttonbnGetRecordings200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModBigbluebuttonbnGetRecordings200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModBigbluebuttonbnGetRecordings200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modBigbluebuttonbnGetRecordingsAsync
     *
     * Returns a list of recordings ready to be processed by a datatable.
     *
     * @param  \OpenAPI\Client\Model\ModBigbluebuttonbnGetRecordingsRequest $mod_bigbluebuttonbn_get_recordings_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modBigbluebuttonbnGetRecordings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modBigbluebuttonbnGetRecordingsAsync($mod_bigbluebuttonbn_get_recordings_request, string $contentType = self::contentTypes['modBigbluebuttonbnGetRecordings'][0])
    {
        return $this->modBigbluebuttonbnGetRecordingsAsyncWithHttpInfo($mod_bigbluebuttonbn_get_recordings_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modBigbluebuttonbnGetRecordingsAsyncWithHttpInfo
     *
     * Returns a list of recordings ready to be processed by a datatable.
     *
     * @param  \OpenAPI\Client\Model\ModBigbluebuttonbnGetRecordingsRequest $mod_bigbluebuttonbn_get_recordings_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modBigbluebuttonbnGetRecordings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modBigbluebuttonbnGetRecordingsAsyncWithHttpInfo($mod_bigbluebuttonbn_get_recordings_request, string $contentType = self::contentTypes['modBigbluebuttonbnGetRecordings'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModBigbluebuttonbnGetRecordings200Response';
        $request = $this->modBigbluebuttonbnGetRecordingsRequest($mod_bigbluebuttonbn_get_recordings_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modBigbluebuttonbnGetRecordings'
     *
     * @param  \OpenAPI\Client\Model\ModBigbluebuttonbnGetRecordingsRequest $mod_bigbluebuttonbn_get_recordings_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modBigbluebuttonbnGetRecordings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modBigbluebuttonbnGetRecordingsRequest($mod_bigbluebuttonbn_get_recordings_request, string $contentType = self::contentTypes['modBigbluebuttonbnGetRecordings'][0])
    {

        // verify the required parameter 'mod_bigbluebuttonbn_get_recordings_request' is set
        if ($mod_bigbluebuttonbn_get_recordings_request === null || (is_array($mod_bigbluebuttonbn_get_recordings_request) && count($mod_bigbluebuttonbn_get_recordings_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_bigbluebuttonbn_get_recordings_request when calling modBigbluebuttonbnGetRecordings'
            );
        }


        $resourcePath = '/mod_bigbluebuttonbn_get_recordings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_bigbluebuttonbn_get_recordings_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_bigbluebuttonbn_get_recordings_request));
            } else {
                $httpBody = $mod_bigbluebuttonbn_get_recordings_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modBigbluebuttonbnGetRecordingsToImport
     *
     * Returns a list of recordings ready to import to be processed by a datatable.
     *
     * @param  \OpenAPI\Client\Model\ModBigbluebuttonbnGetRecordingsToImportRequest $mod_bigbluebuttonbn_get_recordings_to_import_request mod_bigbluebuttonbn_get_recordings_to_import_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modBigbluebuttonbnGetRecordingsToImport'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModBigbluebuttonbnGetRecordingsToImport200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modBigbluebuttonbnGetRecordingsToImport($mod_bigbluebuttonbn_get_recordings_to_import_request, string $contentType = self::contentTypes['modBigbluebuttonbnGetRecordingsToImport'][0])
    {
        list($response) = $this->modBigbluebuttonbnGetRecordingsToImportWithHttpInfo($mod_bigbluebuttonbn_get_recordings_to_import_request, $contentType);
        return $response;
    }

    /**
     * Operation modBigbluebuttonbnGetRecordingsToImportWithHttpInfo
     *
     * Returns a list of recordings ready to import to be processed by a datatable.
     *
     * @param  \OpenAPI\Client\Model\ModBigbluebuttonbnGetRecordingsToImportRequest $mod_bigbluebuttonbn_get_recordings_to_import_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modBigbluebuttonbnGetRecordingsToImport'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModBigbluebuttonbnGetRecordingsToImport200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modBigbluebuttonbnGetRecordingsToImportWithHttpInfo($mod_bigbluebuttonbn_get_recordings_to_import_request, string $contentType = self::contentTypes['modBigbluebuttonbnGetRecordingsToImport'][0])
    {
        $request = $this->modBigbluebuttonbnGetRecordingsToImportRequest($mod_bigbluebuttonbn_get_recordings_to_import_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModBigbluebuttonbnGetRecordingsToImport200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModBigbluebuttonbnGetRecordingsToImport200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModBigbluebuttonbnGetRecordingsToImport200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModBigbluebuttonbnGetRecordingsToImport200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModBigbluebuttonbnGetRecordingsToImport200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modBigbluebuttonbnGetRecordingsToImportAsync
     *
     * Returns a list of recordings ready to import to be processed by a datatable.
     *
     * @param  \OpenAPI\Client\Model\ModBigbluebuttonbnGetRecordingsToImportRequest $mod_bigbluebuttonbn_get_recordings_to_import_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modBigbluebuttonbnGetRecordingsToImport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modBigbluebuttonbnGetRecordingsToImportAsync($mod_bigbluebuttonbn_get_recordings_to_import_request, string $contentType = self::contentTypes['modBigbluebuttonbnGetRecordingsToImport'][0])
    {
        return $this->modBigbluebuttonbnGetRecordingsToImportAsyncWithHttpInfo($mod_bigbluebuttonbn_get_recordings_to_import_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modBigbluebuttonbnGetRecordingsToImportAsyncWithHttpInfo
     *
     * Returns a list of recordings ready to import to be processed by a datatable.
     *
     * @param  \OpenAPI\Client\Model\ModBigbluebuttonbnGetRecordingsToImportRequest $mod_bigbluebuttonbn_get_recordings_to_import_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modBigbluebuttonbnGetRecordingsToImport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modBigbluebuttonbnGetRecordingsToImportAsyncWithHttpInfo($mod_bigbluebuttonbn_get_recordings_to_import_request, string $contentType = self::contentTypes['modBigbluebuttonbnGetRecordingsToImport'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModBigbluebuttonbnGetRecordingsToImport200Response';
        $request = $this->modBigbluebuttonbnGetRecordingsToImportRequest($mod_bigbluebuttonbn_get_recordings_to_import_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modBigbluebuttonbnGetRecordingsToImport'
     *
     * @param  \OpenAPI\Client\Model\ModBigbluebuttonbnGetRecordingsToImportRequest $mod_bigbluebuttonbn_get_recordings_to_import_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modBigbluebuttonbnGetRecordingsToImport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modBigbluebuttonbnGetRecordingsToImportRequest($mod_bigbluebuttonbn_get_recordings_to_import_request, string $contentType = self::contentTypes['modBigbluebuttonbnGetRecordingsToImport'][0])
    {

        // verify the required parameter 'mod_bigbluebuttonbn_get_recordings_to_import_request' is set
        if ($mod_bigbluebuttonbn_get_recordings_to_import_request === null || (is_array($mod_bigbluebuttonbn_get_recordings_to_import_request) && count($mod_bigbluebuttonbn_get_recordings_to_import_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_bigbluebuttonbn_get_recordings_to_import_request when calling modBigbluebuttonbnGetRecordingsToImport'
            );
        }


        $resourcePath = '/mod_bigbluebuttonbn_get_recordings_to_import';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_bigbluebuttonbn_get_recordings_to_import_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_bigbluebuttonbn_get_recordings_to_import_request));
            } else {
                $httpBody = $mod_bigbluebuttonbn_get_recordings_to_import_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modBigbluebuttonbnMeetingInfo
     *
     * Get displayable information on the meeting
     *
     * @param  \OpenAPI\Client\Model\ModBigbluebuttonbnMeetingInfoRequest $mod_bigbluebuttonbn_meeting_info_request mod_bigbluebuttonbn_meeting_info_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modBigbluebuttonbnMeetingInfo'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModBigbluebuttonbnMeetingInfo200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modBigbluebuttonbnMeetingInfo($mod_bigbluebuttonbn_meeting_info_request, string $contentType = self::contentTypes['modBigbluebuttonbnMeetingInfo'][0])
    {
        list($response) = $this->modBigbluebuttonbnMeetingInfoWithHttpInfo($mod_bigbluebuttonbn_meeting_info_request, $contentType);
        return $response;
    }

    /**
     * Operation modBigbluebuttonbnMeetingInfoWithHttpInfo
     *
     * Get displayable information on the meeting
     *
     * @param  \OpenAPI\Client\Model\ModBigbluebuttonbnMeetingInfoRequest $mod_bigbluebuttonbn_meeting_info_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modBigbluebuttonbnMeetingInfo'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModBigbluebuttonbnMeetingInfo200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modBigbluebuttonbnMeetingInfoWithHttpInfo($mod_bigbluebuttonbn_meeting_info_request, string $contentType = self::contentTypes['modBigbluebuttonbnMeetingInfo'][0])
    {
        $request = $this->modBigbluebuttonbnMeetingInfoRequest($mod_bigbluebuttonbn_meeting_info_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModBigbluebuttonbnMeetingInfo200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModBigbluebuttonbnMeetingInfo200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModBigbluebuttonbnMeetingInfo200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModBigbluebuttonbnMeetingInfo200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModBigbluebuttonbnMeetingInfo200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modBigbluebuttonbnMeetingInfoAsync
     *
     * Get displayable information on the meeting
     *
     * @param  \OpenAPI\Client\Model\ModBigbluebuttonbnMeetingInfoRequest $mod_bigbluebuttonbn_meeting_info_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modBigbluebuttonbnMeetingInfo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modBigbluebuttonbnMeetingInfoAsync($mod_bigbluebuttonbn_meeting_info_request, string $contentType = self::contentTypes['modBigbluebuttonbnMeetingInfo'][0])
    {
        return $this->modBigbluebuttonbnMeetingInfoAsyncWithHttpInfo($mod_bigbluebuttonbn_meeting_info_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modBigbluebuttonbnMeetingInfoAsyncWithHttpInfo
     *
     * Get displayable information on the meeting
     *
     * @param  \OpenAPI\Client\Model\ModBigbluebuttonbnMeetingInfoRequest $mod_bigbluebuttonbn_meeting_info_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modBigbluebuttonbnMeetingInfo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modBigbluebuttonbnMeetingInfoAsyncWithHttpInfo($mod_bigbluebuttonbn_meeting_info_request, string $contentType = self::contentTypes['modBigbluebuttonbnMeetingInfo'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModBigbluebuttonbnMeetingInfo200Response';
        $request = $this->modBigbluebuttonbnMeetingInfoRequest($mod_bigbluebuttonbn_meeting_info_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modBigbluebuttonbnMeetingInfo'
     *
     * @param  \OpenAPI\Client\Model\ModBigbluebuttonbnMeetingInfoRequest $mod_bigbluebuttonbn_meeting_info_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modBigbluebuttonbnMeetingInfo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modBigbluebuttonbnMeetingInfoRequest($mod_bigbluebuttonbn_meeting_info_request, string $contentType = self::contentTypes['modBigbluebuttonbnMeetingInfo'][0])
    {

        // verify the required parameter 'mod_bigbluebuttonbn_meeting_info_request' is set
        if ($mod_bigbluebuttonbn_meeting_info_request === null || (is_array($mod_bigbluebuttonbn_meeting_info_request) && count($mod_bigbluebuttonbn_meeting_info_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_bigbluebuttonbn_meeting_info_request when calling modBigbluebuttonbnMeetingInfo'
            );
        }


        $resourcePath = '/mod_bigbluebuttonbn_meeting_info';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_bigbluebuttonbn_meeting_info_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_bigbluebuttonbn_meeting_info_request));
            } else {
                $httpBody = $mod_bigbluebuttonbn_meeting_info_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modBigbluebuttonbnUpdateRecording
     *
     * Update a single recording
     *
     * @param  \OpenAPI\Client\Model\ModBigbluebuttonbnUpdateRecordingRequest $mod_bigbluebuttonbn_update_recording_request mod_bigbluebuttonbn_update_recording_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modBigbluebuttonbnUpdateRecording'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modBigbluebuttonbnUpdateRecording($mod_bigbluebuttonbn_update_recording_request, string $contentType = self::contentTypes['modBigbluebuttonbnUpdateRecording'][0])
    {
        list($response) = $this->modBigbluebuttonbnUpdateRecordingWithHttpInfo($mod_bigbluebuttonbn_update_recording_request, $contentType);
        return $response;
    }

    /**
     * Operation modBigbluebuttonbnUpdateRecordingWithHttpInfo
     *
     * Update a single recording
     *
     * @param  \OpenAPI\Client\Model\ModBigbluebuttonbnUpdateRecordingRequest $mod_bigbluebuttonbn_update_recording_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modBigbluebuttonbnUpdateRecording'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modBigbluebuttonbnUpdateRecordingWithHttpInfo($mod_bigbluebuttonbn_update_recording_request, string $contentType = self::contentTypes['modBigbluebuttonbnUpdateRecording'][0])
    {
        $request = $this->modBigbluebuttonbnUpdateRecordingRequest($mod_bigbluebuttonbn_update_recording_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modBigbluebuttonbnUpdateRecordingAsync
     *
     * Update a single recording
     *
     * @param  \OpenAPI\Client\Model\ModBigbluebuttonbnUpdateRecordingRequest $mod_bigbluebuttonbn_update_recording_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modBigbluebuttonbnUpdateRecording'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modBigbluebuttonbnUpdateRecordingAsync($mod_bigbluebuttonbn_update_recording_request, string $contentType = self::contentTypes['modBigbluebuttonbnUpdateRecording'][0])
    {
        return $this->modBigbluebuttonbnUpdateRecordingAsyncWithHttpInfo($mod_bigbluebuttonbn_update_recording_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modBigbluebuttonbnUpdateRecordingAsyncWithHttpInfo
     *
     * Update a single recording
     *
     * @param  \OpenAPI\Client\Model\ModBigbluebuttonbnUpdateRecordingRequest $mod_bigbluebuttonbn_update_recording_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modBigbluebuttonbnUpdateRecording'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modBigbluebuttonbnUpdateRecordingAsyncWithHttpInfo($mod_bigbluebuttonbn_update_recording_request, string $contentType = self::contentTypes['modBigbluebuttonbnUpdateRecording'][0])
    {
        $returnType = 'object';
        $request = $this->modBigbluebuttonbnUpdateRecordingRequest($mod_bigbluebuttonbn_update_recording_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modBigbluebuttonbnUpdateRecording'
     *
     * @param  \OpenAPI\Client\Model\ModBigbluebuttonbnUpdateRecordingRequest $mod_bigbluebuttonbn_update_recording_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modBigbluebuttonbnUpdateRecording'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modBigbluebuttonbnUpdateRecordingRequest($mod_bigbluebuttonbn_update_recording_request, string $contentType = self::contentTypes['modBigbluebuttonbnUpdateRecording'][0])
    {

        // verify the required parameter 'mod_bigbluebuttonbn_update_recording_request' is set
        if ($mod_bigbluebuttonbn_update_recording_request === null || (is_array($mod_bigbluebuttonbn_update_recording_request) && count($mod_bigbluebuttonbn_update_recording_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_bigbluebuttonbn_update_recording_request when calling modBigbluebuttonbnUpdateRecording'
            );
        }


        $resourcePath = '/mod_bigbluebuttonbn_update_recording';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_bigbluebuttonbn_update_recording_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_bigbluebuttonbn_update_recording_request));
            } else {
                $httpBody = $mod_bigbluebuttonbn_update_recording_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modBigbluebuttonbnViewBigbluebuttonbn
     *
     * Trigger the course module viewed event and update the module completion status.
     *
     * @param  \OpenAPI\Client\Model\ModBigbluebuttonbnViewBigbluebuttonbnRequest $mod_bigbluebuttonbn_view_bigbluebuttonbn_request mod_bigbluebuttonbn_view_bigbluebuttonbn_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modBigbluebuttonbnViewBigbluebuttonbn'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modBigbluebuttonbnViewBigbluebuttonbn($mod_bigbluebuttonbn_view_bigbluebuttonbn_request, string $contentType = self::contentTypes['modBigbluebuttonbnViewBigbluebuttonbn'][0])
    {
        list($response) = $this->modBigbluebuttonbnViewBigbluebuttonbnWithHttpInfo($mod_bigbluebuttonbn_view_bigbluebuttonbn_request, $contentType);
        return $response;
    }

    /**
     * Operation modBigbluebuttonbnViewBigbluebuttonbnWithHttpInfo
     *
     * Trigger the course module viewed event and update the module completion status.
     *
     * @param  \OpenAPI\Client\Model\ModBigbluebuttonbnViewBigbluebuttonbnRequest $mod_bigbluebuttonbn_view_bigbluebuttonbn_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modBigbluebuttonbnViewBigbluebuttonbn'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modBigbluebuttonbnViewBigbluebuttonbnWithHttpInfo($mod_bigbluebuttonbn_view_bigbluebuttonbn_request, string $contentType = self::contentTypes['modBigbluebuttonbnViewBigbluebuttonbn'][0])
    {
        $request = $this->modBigbluebuttonbnViewBigbluebuttonbnRequest($mod_bigbluebuttonbn_view_bigbluebuttonbn_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modBigbluebuttonbnViewBigbluebuttonbnAsync
     *
     * Trigger the course module viewed event and update the module completion status.
     *
     * @param  \OpenAPI\Client\Model\ModBigbluebuttonbnViewBigbluebuttonbnRequest $mod_bigbluebuttonbn_view_bigbluebuttonbn_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modBigbluebuttonbnViewBigbluebuttonbn'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modBigbluebuttonbnViewBigbluebuttonbnAsync($mod_bigbluebuttonbn_view_bigbluebuttonbn_request, string $contentType = self::contentTypes['modBigbluebuttonbnViewBigbluebuttonbn'][0])
    {
        return $this->modBigbluebuttonbnViewBigbluebuttonbnAsyncWithHttpInfo($mod_bigbluebuttonbn_view_bigbluebuttonbn_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modBigbluebuttonbnViewBigbluebuttonbnAsyncWithHttpInfo
     *
     * Trigger the course module viewed event and update the module completion status.
     *
     * @param  \OpenAPI\Client\Model\ModBigbluebuttonbnViewBigbluebuttonbnRequest $mod_bigbluebuttonbn_view_bigbluebuttonbn_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modBigbluebuttonbnViewBigbluebuttonbn'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modBigbluebuttonbnViewBigbluebuttonbnAsyncWithHttpInfo($mod_bigbluebuttonbn_view_bigbluebuttonbn_request, string $contentType = self::contentTypes['modBigbluebuttonbnViewBigbluebuttonbn'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response';
        $request = $this->modBigbluebuttonbnViewBigbluebuttonbnRequest($mod_bigbluebuttonbn_view_bigbluebuttonbn_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modBigbluebuttonbnViewBigbluebuttonbn'
     *
     * @param  \OpenAPI\Client\Model\ModBigbluebuttonbnViewBigbluebuttonbnRequest $mod_bigbluebuttonbn_view_bigbluebuttonbn_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modBigbluebuttonbnViewBigbluebuttonbn'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modBigbluebuttonbnViewBigbluebuttonbnRequest($mod_bigbluebuttonbn_view_bigbluebuttonbn_request, string $contentType = self::contentTypes['modBigbluebuttonbnViewBigbluebuttonbn'][0])
    {

        // verify the required parameter 'mod_bigbluebuttonbn_view_bigbluebuttonbn_request' is set
        if ($mod_bigbluebuttonbn_view_bigbluebuttonbn_request === null || (is_array($mod_bigbluebuttonbn_view_bigbluebuttonbn_request) && count($mod_bigbluebuttonbn_view_bigbluebuttonbn_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_bigbluebuttonbn_view_bigbluebuttonbn_request when calling modBigbluebuttonbnViewBigbluebuttonbn'
            );
        }


        $resourcePath = '/mod_bigbluebuttonbn_view_bigbluebuttonbn';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_bigbluebuttonbn_view_bigbluebuttonbn_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_bigbluebuttonbn_view_bigbluebuttonbn_request));
            } else {
                $httpBody = $mod_bigbluebuttonbn_view_bigbluebuttonbn_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
