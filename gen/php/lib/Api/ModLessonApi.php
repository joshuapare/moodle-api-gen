<?php
/**
 * ModLessonApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * ModLessonApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ModLessonApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'modLessonFinishAttempt' => [
            'application/json',
        ],
        'modLessonGetAttemptsOverview' => [
            'application/json',
        ],
        'modLessonGetContentPagesViewed' => [
            'application/json',
        ],
        'modLessonGetLesson' => [
            'application/json',
        ],
        'modLessonGetLessonAccessInformation' => [
            'application/json',
        ],
        'modLessonGetLessonsByCourses' => [
            'application/json',
        ],
        'modLessonGetPageData' => [
            'application/json',
        ],
        'modLessonGetPages' => [
            'application/json',
        ],
        'modLessonGetPagesPossibleJumps' => [
            'application/json',
        ],
        'modLessonGetQuestionsAttempts' => [
            'application/json',
        ],
        'modLessonGetUserAttempt' => [
            'application/json',
        ],
        'modLessonGetUserAttemptGrade' => [
            'application/json',
        ],
        'modLessonGetUserGrade' => [
            'application/json',
        ],
        'modLessonGetUserTimers' => [
            'application/json',
        ],
        'modLessonLaunchAttempt' => [
            'application/json',
        ],
        'modLessonProcessPage' => [
            'application/json',
        ],
        'modLessonViewLesson' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation modLessonFinishAttempt
     *
     * Finishes the current attempt.
     *
     * @param  \OpenAPI\Client\Model\ModLessonFinishAttemptRequest $mod_lesson_finish_attempt_request mod_lesson_finish_attempt_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLessonFinishAttempt'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModLessonFinishAttempt200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modLessonFinishAttempt($mod_lesson_finish_attempt_request, string $contentType = self::contentTypes['modLessonFinishAttempt'][0])
    {
        list($response) = $this->modLessonFinishAttemptWithHttpInfo($mod_lesson_finish_attempt_request, $contentType);
        return $response;
    }

    /**
     * Operation modLessonFinishAttemptWithHttpInfo
     *
     * Finishes the current attempt.
     *
     * @param  \OpenAPI\Client\Model\ModLessonFinishAttemptRequest $mod_lesson_finish_attempt_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLessonFinishAttempt'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModLessonFinishAttempt200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modLessonFinishAttemptWithHttpInfo($mod_lesson_finish_attempt_request, string $contentType = self::contentTypes['modLessonFinishAttempt'][0])
    {
        $request = $this->modLessonFinishAttemptRequest($mod_lesson_finish_attempt_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModLessonFinishAttempt200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModLessonFinishAttempt200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModLessonFinishAttempt200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModLessonFinishAttempt200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModLessonFinishAttempt200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modLessonFinishAttemptAsync
     *
     * Finishes the current attempt.
     *
     * @param  \OpenAPI\Client\Model\ModLessonFinishAttemptRequest $mod_lesson_finish_attempt_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLessonFinishAttempt'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modLessonFinishAttemptAsync($mod_lesson_finish_attempt_request, string $contentType = self::contentTypes['modLessonFinishAttempt'][0])
    {
        return $this->modLessonFinishAttemptAsyncWithHttpInfo($mod_lesson_finish_attempt_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modLessonFinishAttemptAsyncWithHttpInfo
     *
     * Finishes the current attempt.
     *
     * @param  \OpenAPI\Client\Model\ModLessonFinishAttemptRequest $mod_lesson_finish_attempt_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLessonFinishAttempt'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modLessonFinishAttemptAsyncWithHttpInfo($mod_lesson_finish_attempt_request, string $contentType = self::contentTypes['modLessonFinishAttempt'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModLessonFinishAttempt200Response';
        $request = $this->modLessonFinishAttemptRequest($mod_lesson_finish_attempt_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modLessonFinishAttempt'
     *
     * @param  \OpenAPI\Client\Model\ModLessonFinishAttemptRequest $mod_lesson_finish_attempt_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLessonFinishAttempt'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modLessonFinishAttemptRequest($mod_lesson_finish_attempt_request, string $contentType = self::contentTypes['modLessonFinishAttempt'][0])
    {

        // verify the required parameter 'mod_lesson_finish_attempt_request' is set
        if ($mod_lesson_finish_attempt_request === null || (is_array($mod_lesson_finish_attempt_request) && count($mod_lesson_finish_attempt_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_lesson_finish_attempt_request when calling modLessonFinishAttempt'
            );
        }


        $resourcePath = '/mod_lesson_finish_attempt';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_lesson_finish_attempt_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_lesson_finish_attempt_request));
            } else {
                $httpBody = $mod_lesson_finish_attempt_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modLessonGetAttemptsOverview
     *
     * Get a list of all the attempts made by users in a lesson.
     *
     * @param  \OpenAPI\Client\Model\ModLessonGetAttemptsOverviewRequest $mod_lesson_get_attempts_overview_request mod_lesson_get_attempts_overview_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLessonGetAttemptsOverview'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModLessonGetAttemptsOverview200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modLessonGetAttemptsOverview($mod_lesson_get_attempts_overview_request, string $contentType = self::contentTypes['modLessonGetAttemptsOverview'][0])
    {
        list($response) = $this->modLessonGetAttemptsOverviewWithHttpInfo($mod_lesson_get_attempts_overview_request, $contentType);
        return $response;
    }

    /**
     * Operation modLessonGetAttemptsOverviewWithHttpInfo
     *
     * Get a list of all the attempts made by users in a lesson.
     *
     * @param  \OpenAPI\Client\Model\ModLessonGetAttemptsOverviewRequest $mod_lesson_get_attempts_overview_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLessonGetAttemptsOverview'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModLessonGetAttemptsOverview200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modLessonGetAttemptsOverviewWithHttpInfo($mod_lesson_get_attempts_overview_request, string $contentType = self::contentTypes['modLessonGetAttemptsOverview'][0])
    {
        $request = $this->modLessonGetAttemptsOverviewRequest($mod_lesson_get_attempts_overview_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModLessonGetAttemptsOverview200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModLessonGetAttemptsOverview200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModLessonGetAttemptsOverview200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModLessonGetAttemptsOverview200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModLessonGetAttemptsOverview200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modLessonGetAttemptsOverviewAsync
     *
     * Get a list of all the attempts made by users in a lesson.
     *
     * @param  \OpenAPI\Client\Model\ModLessonGetAttemptsOverviewRequest $mod_lesson_get_attempts_overview_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLessonGetAttemptsOverview'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modLessonGetAttemptsOverviewAsync($mod_lesson_get_attempts_overview_request, string $contentType = self::contentTypes['modLessonGetAttemptsOverview'][0])
    {
        return $this->modLessonGetAttemptsOverviewAsyncWithHttpInfo($mod_lesson_get_attempts_overview_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modLessonGetAttemptsOverviewAsyncWithHttpInfo
     *
     * Get a list of all the attempts made by users in a lesson.
     *
     * @param  \OpenAPI\Client\Model\ModLessonGetAttemptsOverviewRequest $mod_lesson_get_attempts_overview_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLessonGetAttemptsOverview'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modLessonGetAttemptsOverviewAsyncWithHttpInfo($mod_lesson_get_attempts_overview_request, string $contentType = self::contentTypes['modLessonGetAttemptsOverview'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModLessonGetAttemptsOverview200Response';
        $request = $this->modLessonGetAttemptsOverviewRequest($mod_lesson_get_attempts_overview_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modLessonGetAttemptsOverview'
     *
     * @param  \OpenAPI\Client\Model\ModLessonGetAttemptsOverviewRequest $mod_lesson_get_attempts_overview_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLessonGetAttemptsOverview'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modLessonGetAttemptsOverviewRequest($mod_lesson_get_attempts_overview_request, string $contentType = self::contentTypes['modLessonGetAttemptsOverview'][0])
    {

        // verify the required parameter 'mod_lesson_get_attempts_overview_request' is set
        if ($mod_lesson_get_attempts_overview_request === null || (is_array($mod_lesson_get_attempts_overview_request) && count($mod_lesson_get_attempts_overview_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_lesson_get_attempts_overview_request when calling modLessonGetAttemptsOverview'
            );
        }


        $resourcePath = '/mod_lesson_get_attempts_overview';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_lesson_get_attempts_overview_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_lesson_get_attempts_overview_request));
            } else {
                $httpBody = $mod_lesson_get_attempts_overview_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modLessonGetContentPagesViewed
     *
     * Return the list of content pages viewed by a user during a lesson attempt.
     *
     * @param  \OpenAPI\Client\Model\ModLessonGetContentPagesViewedRequest $mod_lesson_get_content_pages_viewed_request mod_lesson_get_content_pages_viewed_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLessonGetContentPagesViewed'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModLessonGetContentPagesViewed200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modLessonGetContentPagesViewed($mod_lesson_get_content_pages_viewed_request, string $contentType = self::contentTypes['modLessonGetContentPagesViewed'][0])
    {
        list($response) = $this->modLessonGetContentPagesViewedWithHttpInfo($mod_lesson_get_content_pages_viewed_request, $contentType);
        return $response;
    }

    /**
     * Operation modLessonGetContentPagesViewedWithHttpInfo
     *
     * Return the list of content pages viewed by a user during a lesson attempt.
     *
     * @param  \OpenAPI\Client\Model\ModLessonGetContentPagesViewedRequest $mod_lesson_get_content_pages_viewed_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLessonGetContentPagesViewed'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModLessonGetContentPagesViewed200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modLessonGetContentPagesViewedWithHttpInfo($mod_lesson_get_content_pages_viewed_request, string $contentType = self::contentTypes['modLessonGetContentPagesViewed'][0])
    {
        $request = $this->modLessonGetContentPagesViewedRequest($mod_lesson_get_content_pages_viewed_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModLessonGetContentPagesViewed200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModLessonGetContentPagesViewed200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModLessonGetContentPagesViewed200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModLessonGetContentPagesViewed200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModLessonGetContentPagesViewed200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modLessonGetContentPagesViewedAsync
     *
     * Return the list of content pages viewed by a user during a lesson attempt.
     *
     * @param  \OpenAPI\Client\Model\ModLessonGetContentPagesViewedRequest $mod_lesson_get_content_pages_viewed_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLessonGetContentPagesViewed'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modLessonGetContentPagesViewedAsync($mod_lesson_get_content_pages_viewed_request, string $contentType = self::contentTypes['modLessonGetContentPagesViewed'][0])
    {
        return $this->modLessonGetContentPagesViewedAsyncWithHttpInfo($mod_lesson_get_content_pages_viewed_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modLessonGetContentPagesViewedAsyncWithHttpInfo
     *
     * Return the list of content pages viewed by a user during a lesson attempt.
     *
     * @param  \OpenAPI\Client\Model\ModLessonGetContentPagesViewedRequest $mod_lesson_get_content_pages_viewed_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLessonGetContentPagesViewed'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modLessonGetContentPagesViewedAsyncWithHttpInfo($mod_lesson_get_content_pages_viewed_request, string $contentType = self::contentTypes['modLessonGetContentPagesViewed'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModLessonGetContentPagesViewed200Response';
        $request = $this->modLessonGetContentPagesViewedRequest($mod_lesson_get_content_pages_viewed_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modLessonGetContentPagesViewed'
     *
     * @param  \OpenAPI\Client\Model\ModLessonGetContentPagesViewedRequest $mod_lesson_get_content_pages_viewed_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLessonGetContentPagesViewed'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modLessonGetContentPagesViewedRequest($mod_lesson_get_content_pages_viewed_request, string $contentType = self::contentTypes['modLessonGetContentPagesViewed'][0])
    {

        // verify the required parameter 'mod_lesson_get_content_pages_viewed_request' is set
        if ($mod_lesson_get_content_pages_viewed_request === null || (is_array($mod_lesson_get_content_pages_viewed_request) && count($mod_lesson_get_content_pages_viewed_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_lesson_get_content_pages_viewed_request when calling modLessonGetContentPagesViewed'
            );
        }


        $resourcePath = '/mod_lesson_get_content_pages_viewed';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_lesson_get_content_pages_viewed_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_lesson_get_content_pages_viewed_request));
            } else {
                $httpBody = $mod_lesson_get_content_pages_viewed_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modLessonGetLesson
     *
     * Return information of a given lesson.
     *
     * @param  \OpenAPI\Client\Model\ModLessonGetLessonRequest $mod_lesson_get_lesson_request mod_lesson_get_lesson_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLessonGetLesson'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModLessonGetLesson200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modLessonGetLesson($mod_lesson_get_lesson_request, string $contentType = self::contentTypes['modLessonGetLesson'][0])
    {
        list($response) = $this->modLessonGetLessonWithHttpInfo($mod_lesson_get_lesson_request, $contentType);
        return $response;
    }

    /**
     * Operation modLessonGetLessonWithHttpInfo
     *
     * Return information of a given lesson.
     *
     * @param  \OpenAPI\Client\Model\ModLessonGetLessonRequest $mod_lesson_get_lesson_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLessonGetLesson'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModLessonGetLesson200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modLessonGetLessonWithHttpInfo($mod_lesson_get_lesson_request, string $contentType = self::contentTypes['modLessonGetLesson'][0])
    {
        $request = $this->modLessonGetLessonRequest($mod_lesson_get_lesson_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModLessonGetLesson200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModLessonGetLesson200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModLessonGetLesson200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModLessonGetLesson200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModLessonGetLesson200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modLessonGetLessonAsync
     *
     * Return information of a given lesson.
     *
     * @param  \OpenAPI\Client\Model\ModLessonGetLessonRequest $mod_lesson_get_lesson_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLessonGetLesson'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modLessonGetLessonAsync($mod_lesson_get_lesson_request, string $contentType = self::contentTypes['modLessonGetLesson'][0])
    {
        return $this->modLessonGetLessonAsyncWithHttpInfo($mod_lesson_get_lesson_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modLessonGetLessonAsyncWithHttpInfo
     *
     * Return information of a given lesson.
     *
     * @param  \OpenAPI\Client\Model\ModLessonGetLessonRequest $mod_lesson_get_lesson_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLessonGetLesson'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modLessonGetLessonAsyncWithHttpInfo($mod_lesson_get_lesson_request, string $contentType = self::contentTypes['modLessonGetLesson'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModLessonGetLesson200Response';
        $request = $this->modLessonGetLessonRequest($mod_lesson_get_lesson_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modLessonGetLesson'
     *
     * @param  \OpenAPI\Client\Model\ModLessonGetLessonRequest $mod_lesson_get_lesson_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLessonGetLesson'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modLessonGetLessonRequest($mod_lesson_get_lesson_request, string $contentType = self::contentTypes['modLessonGetLesson'][0])
    {

        // verify the required parameter 'mod_lesson_get_lesson_request' is set
        if ($mod_lesson_get_lesson_request === null || (is_array($mod_lesson_get_lesson_request) && count($mod_lesson_get_lesson_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_lesson_get_lesson_request when calling modLessonGetLesson'
            );
        }


        $resourcePath = '/mod_lesson_get_lesson';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_lesson_get_lesson_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_lesson_get_lesson_request));
            } else {
                $httpBody = $mod_lesson_get_lesson_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modLessonGetLessonAccessInformation
     *
     * Return access information for a given lesson.
     *
     * @param  \OpenAPI\Client\Model\ModLessonGetLessonAccessInformationRequest $mod_lesson_get_lesson_access_information_request mod_lesson_get_lesson_access_information_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLessonGetLessonAccessInformation'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModLessonGetLessonAccessInformation200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modLessonGetLessonAccessInformation($mod_lesson_get_lesson_access_information_request, string $contentType = self::contentTypes['modLessonGetLessonAccessInformation'][0])
    {
        list($response) = $this->modLessonGetLessonAccessInformationWithHttpInfo($mod_lesson_get_lesson_access_information_request, $contentType);
        return $response;
    }

    /**
     * Operation modLessonGetLessonAccessInformationWithHttpInfo
     *
     * Return access information for a given lesson.
     *
     * @param  \OpenAPI\Client\Model\ModLessonGetLessonAccessInformationRequest $mod_lesson_get_lesson_access_information_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLessonGetLessonAccessInformation'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModLessonGetLessonAccessInformation200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modLessonGetLessonAccessInformationWithHttpInfo($mod_lesson_get_lesson_access_information_request, string $contentType = self::contentTypes['modLessonGetLessonAccessInformation'][0])
    {
        $request = $this->modLessonGetLessonAccessInformationRequest($mod_lesson_get_lesson_access_information_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModLessonGetLessonAccessInformation200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModLessonGetLessonAccessInformation200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModLessonGetLessonAccessInformation200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModLessonGetLessonAccessInformation200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModLessonGetLessonAccessInformation200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modLessonGetLessonAccessInformationAsync
     *
     * Return access information for a given lesson.
     *
     * @param  \OpenAPI\Client\Model\ModLessonGetLessonAccessInformationRequest $mod_lesson_get_lesson_access_information_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLessonGetLessonAccessInformation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modLessonGetLessonAccessInformationAsync($mod_lesson_get_lesson_access_information_request, string $contentType = self::contentTypes['modLessonGetLessonAccessInformation'][0])
    {
        return $this->modLessonGetLessonAccessInformationAsyncWithHttpInfo($mod_lesson_get_lesson_access_information_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modLessonGetLessonAccessInformationAsyncWithHttpInfo
     *
     * Return access information for a given lesson.
     *
     * @param  \OpenAPI\Client\Model\ModLessonGetLessonAccessInformationRequest $mod_lesson_get_lesson_access_information_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLessonGetLessonAccessInformation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modLessonGetLessonAccessInformationAsyncWithHttpInfo($mod_lesson_get_lesson_access_information_request, string $contentType = self::contentTypes['modLessonGetLessonAccessInformation'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModLessonGetLessonAccessInformation200Response';
        $request = $this->modLessonGetLessonAccessInformationRequest($mod_lesson_get_lesson_access_information_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modLessonGetLessonAccessInformation'
     *
     * @param  \OpenAPI\Client\Model\ModLessonGetLessonAccessInformationRequest $mod_lesson_get_lesson_access_information_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLessonGetLessonAccessInformation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modLessonGetLessonAccessInformationRequest($mod_lesson_get_lesson_access_information_request, string $contentType = self::contentTypes['modLessonGetLessonAccessInformation'][0])
    {

        // verify the required parameter 'mod_lesson_get_lesson_access_information_request' is set
        if ($mod_lesson_get_lesson_access_information_request === null || (is_array($mod_lesson_get_lesson_access_information_request) && count($mod_lesson_get_lesson_access_information_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_lesson_get_lesson_access_information_request when calling modLessonGetLessonAccessInformation'
            );
        }


        $resourcePath = '/mod_lesson_get_lesson_access_information';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_lesson_get_lesson_access_information_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_lesson_get_lesson_access_information_request));
            } else {
                $httpBody = $mod_lesson_get_lesson_access_information_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modLessonGetLessonsByCourses
     *
     * Returns a list of lessons in a provided list of courses,                             if no list is provided all lessons that the user can view will be returned.
     *
     * @param  \OpenAPI\Client\Model\ModChatGetChatsByCoursesRequest $mod_chat_get_chats_by_courses_request mod_chat_get_chats_by_courses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLessonGetLessonsByCourses'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModLessonGetLessonsByCourses200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modLessonGetLessonsByCourses($mod_chat_get_chats_by_courses_request, string $contentType = self::contentTypes['modLessonGetLessonsByCourses'][0])
    {
        list($response) = $this->modLessonGetLessonsByCoursesWithHttpInfo($mod_chat_get_chats_by_courses_request, $contentType);
        return $response;
    }

    /**
     * Operation modLessonGetLessonsByCoursesWithHttpInfo
     *
     * Returns a list of lessons in a provided list of courses,                             if no list is provided all lessons that the user can view will be returned.
     *
     * @param  \OpenAPI\Client\Model\ModChatGetChatsByCoursesRequest $mod_chat_get_chats_by_courses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLessonGetLessonsByCourses'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModLessonGetLessonsByCourses200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modLessonGetLessonsByCoursesWithHttpInfo($mod_chat_get_chats_by_courses_request, string $contentType = self::contentTypes['modLessonGetLessonsByCourses'][0])
    {
        $request = $this->modLessonGetLessonsByCoursesRequest($mod_chat_get_chats_by_courses_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModLessonGetLessonsByCourses200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModLessonGetLessonsByCourses200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModLessonGetLessonsByCourses200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModLessonGetLessonsByCourses200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModLessonGetLessonsByCourses200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modLessonGetLessonsByCoursesAsync
     *
     * Returns a list of lessons in a provided list of courses,                             if no list is provided all lessons that the user can view will be returned.
     *
     * @param  \OpenAPI\Client\Model\ModChatGetChatsByCoursesRequest $mod_chat_get_chats_by_courses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLessonGetLessonsByCourses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modLessonGetLessonsByCoursesAsync($mod_chat_get_chats_by_courses_request, string $contentType = self::contentTypes['modLessonGetLessonsByCourses'][0])
    {
        return $this->modLessonGetLessonsByCoursesAsyncWithHttpInfo($mod_chat_get_chats_by_courses_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modLessonGetLessonsByCoursesAsyncWithHttpInfo
     *
     * Returns a list of lessons in a provided list of courses,                             if no list is provided all lessons that the user can view will be returned.
     *
     * @param  \OpenAPI\Client\Model\ModChatGetChatsByCoursesRequest $mod_chat_get_chats_by_courses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLessonGetLessonsByCourses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modLessonGetLessonsByCoursesAsyncWithHttpInfo($mod_chat_get_chats_by_courses_request, string $contentType = self::contentTypes['modLessonGetLessonsByCourses'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModLessonGetLessonsByCourses200Response';
        $request = $this->modLessonGetLessonsByCoursesRequest($mod_chat_get_chats_by_courses_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modLessonGetLessonsByCourses'
     *
     * @param  \OpenAPI\Client\Model\ModChatGetChatsByCoursesRequest $mod_chat_get_chats_by_courses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLessonGetLessonsByCourses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modLessonGetLessonsByCoursesRequest($mod_chat_get_chats_by_courses_request, string $contentType = self::contentTypes['modLessonGetLessonsByCourses'][0])
    {

        // verify the required parameter 'mod_chat_get_chats_by_courses_request' is set
        if ($mod_chat_get_chats_by_courses_request === null || (is_array($mod_chat_get_chats_by_courses_request) && count($mod_chat_get_chats_by_courses_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_chat_get_chats_by_courses_request when calling modLessonGetLessonsByCourses'
            );
        }


        $resourcePath = '/mod_lesson_get_lessons_by_courses';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_chat_get_chats_by_courses_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_chat_get_chats_by_courses_request));
            } else {
                $httpBody = $mod_chat_get_chats_by_courses_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modLessonGetPageData
     *
     * Return information of a given page, including its contents.
     *
     * @param  \OpenAPI\Client\Model\ModLessonGetPageDataRequest $mod_lesson_get_page_data_request mod_lesson_get_page_data_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLessonGetPageData'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModLessonGetPageData200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modLessonGetPageData($mod_lesson_get_page_data_request, string $contentType = self::contentTypes['modLessonGetPageData'][0])
    {
        list($response) = $this->modLessonGetPageDataWithHttpInfo($mod_lesson_get_page_data_request, $contentType);
        return $response;
    }

    /**
     * Operation modLessonGetPageDataWithHttpInfo
     *
     * Return information of a given page, including its contents.
     *
     * @param  \OpenAPI\Client\Model\ModLessonGetPageDataRequest $mod_lesson_get_page_data_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLessonGetPageData'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModLessonGetPageData200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modLessonGetPageDataWithHttpInfo($mod_lesson_get_page_data_request, string $contentType = self::contentTypes['modLessonGetPageData'][0])
    {
        $request = $this->modLessonGetPageDataRequest($mod_lesson_get_page_data_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModLessonGetPageData200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModLessonGetPageData200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModLessonGetPageData200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModLessonGetPageData200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModLessonGetPageData200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modLessonGetPageDataAsync
     *
     * Return information of a given page, including its contents.
     *
     * @param  \OpenAPI\Client\Model\ModLessonGetPageDataRequest $mod_lesson_get_page_data_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLessonGetPageData'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modLessonGetPageDataAsync($mod_lesson_get_page_data_request, string $contentType = self::contentTypes['modLessonGetPageData'][0])
    {
        return $this->modLessonGetPageDataAsyncWithHttpInfo($mod_lesson_get_page_data_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modLessonGetPageDataAsyncWithHttpInfo
     *
     * Return information of a given page, including its contents.
     *
     * @param  \OpenAPI\Client\Model\ModLessonGetPageDataRequest $mod_lesson_get_page_data_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLessonGetPageData'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modLessonGetPageDataAsyncWithHttpInfo($mod_lesson_get_page_data_request, string $contentType = self::contentTypes['modLessonGetPageData'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModLessonGetPageData200Response';
        $request = $this->modLessonGetPageDataRequest($mod_lesson_get_page_data_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modLessonGetPageData'
     *
     * @param  \OpenAPI\Client\Model\ModLessonGetPageDataRequest $mod_lesson_get_page_data_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLessonGetPageData'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modLessonGetPageDataRequest($mod_lesson_get_page_data_request, string $contentType = self::contentTypes['modLessonGetPageData'][0])
    {

        // verify the required parameter 'mod_lesson_get_page_data_request' is set
        if ($mod_lesson_get_page_data_request === null || (is_array($mod_lesson_get_page_data_request) && count($mod_lesson_get_page_data_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_lesson_get_page_data_request when calling modLessonGetPageData'
            );
        }


        $resourcePath = '/mod_lesson_get_page_data';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_lesson_get_page_data_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_lesson_get_page_data_request));
            } else {
                $httpBody = $mod_lesson_get_page_data_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modLessonGetPages
     *
     * Return the list of pages in a lesson (based on the user permissions).
     *
     * @param  \OpenAPI\Client\Model\ModLessonGetPagesRequest $mod_lesson_get_pages_request mod_lesson_get_pages_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLessonGetPages'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModLessonGetPages200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modLessonGetPages($mod_lesson_get_pages_request, string $contentType = self::contentTypes['modLessonGetPages'][0])
    {
        list($response) = $this->modLessonGetPagesWithHttpInfo($mod_lesson_get_pages_request, $contentType);
        return $response;
    }

    /**
     * Operation modLessonGetPagesWithHttpInfo
     *
     * Return the list of pages in a lesson (based on the user permissions).
     *
     * @param  \OpenAPI\Client\Model\ModLessonGetPagesRequest $mod_lesson_get_pages_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLessonGetPages'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModLessonGetPages200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modLessonGetPagesWithHttpInfo($mod_lesson_get_pages_request, string $contentType = self::contentTypes['modLessonGetPages'][0])
    {
        $request = $this->modLessonGetPagesRequest($mod_lesson_get_pages_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModLessonGetPages200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModLessonGetPages200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModLessonGetPages200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModLessonGetPages200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModLessonGetPages200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modLessonGetPagesAsync
     *
     * Return the list of pages in a lesson (based on the user permissions).
     *
     * @param  \OpenAPI\Client\Model\ModLessonGetPagesRequest $mod_lesson_get_pages_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLessonGetPages'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modLessonGetPagesAsync($mod_lesson_get_pages_request, string $contentType = self::contentTypes['modLessonGetPages'][0])
    {
        return $this->modLessonGetPagesAsyncWithHttpInfo($mod_lesson_get_pages_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modLessonGetPagesAsyncWithHttpInfo
     *
     * Return the list of pages in a lesson (based on the user permissions).
     *
     * @param  \OpenAPI\Client\Model\ModLessonGetPagesRequest $mod_lesson_get_pages_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLessonGetPages'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modLessonGetPagesAsyncWithHttpInfo($mod_lesson_get_pages_request, string $contentType = self::contentTypes['modLessonGetPages'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModLessonGetPages200Response';
        $request = $this->modLessonGetPagesRequest($mod_lesson_get_pages_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modLessonGetPages'
     *
     * @param  \OpenAPI\Client\Model\ModLessonGetPagesRequest $mod_lesson_get_pages_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLessonGetPages'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modLessonGetPagesRequest($mod_lesson_get_pages_request, string $contentType = self::contentTypes['modLessonGetPages'][0])
    {

        // verify the required parameter 'mod_lesson_get_pages_request' is set
        if ($mod_lesson_get_pages_request === null || (is_array($mod_lesson_get_pages_request) && count($mod_lesson_get_pages_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_lesson_get_pages_request when calling modLessonGetPages'
            );
        }


        $resourcePath = '/mod_lesson_get_pages';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_lesson_get_pages_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_lesson_get_pages_request));
            } else {
                $httpBody = $mod_lesson_get_pages_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modLessonGetPagesPossibleJumps
     *
     * Return all the possible jumps for the pages in a given lesson.
     *
     * @param  \OpenAPI\Client\Model\ModLessonGetLessonAccessInformationRequest $mod_lesson_get_lesson_access_information_request mod_lesson_get_lesson_access_information_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLessonGetPagesPossibleJumps'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModLessonGetPagesPossibleJumps200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modLessonGetPagesPossibleJumps($mod_lesson_get_lesson_access_information_request, string $contentType = self::contentTypes['modLessonGetPagesPossibleJumps'][0])
    {
        list($response) = $this->modLessonGetPagesPossibleJumpsWithHttpInfo($mod_lesson_get_lesson_access_information_request, $contentType);
        return $response;
    }

    /**
     * Operation modLessonGetPagesPossibleJumpsWithHttpInfo
     *
     * Return all the possible jumps for the pages in a given lesson.
     *
     * @param  \OpenAPI\Client\Model\ModLessonGetLessonAccessInformationRequest $mod_lesson_get_lesson_access_information_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLessonGetPagesPossibleJumps'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModLessonGetPagesPossibleJumps200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modLessonGetPagesPossibleJumpsWithHttpInfo($mod_lesson_get_lesson_access_information_request, string $contentType = self::contentTypes['modLessonGetPagesPossibleJumps'][0])
    {
        $request = $this->modLessonGetPagesPossibleJumpsRequest($mod_lesson_get_lesson_access_information_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModLessonGetPagesPossibleJumps200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModLessonGetPagesPossibleJumps200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModLessonGetPagesPossibleJumps200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModLessonGetPagesPossibleJumps200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModLessonGetPagesPossibleJumps200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modLessonGetPagesPossibleJumpsAsync
     *
     * Return all the possible jumps for the pages in a given lesson.
     *
     * @param  \OpenAPI\Client\Model\ModLessonGetLessonAccessInformationRequest $mod_lesson_get_lesson_access_information_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLessonGetPagesPossibleJumps'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modLessonGetPagesPossibleJumpsAsync($mod_lesson_get_lesson_access_information_request, string $contentType = self::contentTypes['modLessonGetPagesPossibleJumps'][0])
    {
        return $this->modLessonGetPagesPossibleJumpsAsyncWithHttpInfo($mod_lesson_get_lesson_access_information_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modLessonGetPagesPossibleJumpsAsyncWithHttpInfo
     *
     * Return all the possible jumps for the pages in a given lesson.
     *
     * @param  \OpenAPI\Client\Model\ModLessonGetLessonAccessInformationRequest $mod_lesson_get_lesson_access_information_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLessonGetPagesPossibleJumps'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modLessonGetPagesPossibleJumpsAsyncWithHttpInfo($mod_lesson_get_lesson_access_information_request, string $contentType = self::contentTypes['modLessonGetPagesPossibleJumps'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModLessonGetPagesPossibleJumps200Response';
        $request = $this->modLessonGetPagesPossibleJumpsRequest($mod_lesson_get_lesson_access_information_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modLessonGetPagesPossibleJumps'
     *
     * @param  \OpenAPI\Client\Model\ModLessonGetLessonAccessInformationRequest $mod_lesson_get_lesson_access_information_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLessonGetPagesPossibleJumps'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modLessonGetPagesPossibleJumpsRequest($mod_lesson_get_lesson_access_information_request, string $contentType = self::contentTypes['modLessonGetPagesPossibleJumps'][0])
    {

        // verify the required parameter 'mod_lesson_get_lesson_access_information_request' is set
        if ($mod_lesson_get_lesson_access_information_request === null || (is_array($mod_lesson_get_lesson_access_information_request) && count($mod_lesson_get_lesson_access_information_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_lesson_get_lesson_access_information_request when calling modLessonGetPagesPossibleJumps'
            );
        }


        $resourcePath = '/mod_lesson_get_pages_possible_jumps';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_lesson_get_lesson_access_information_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_lesson_get_lesson_access_information_request));
            } else {
                $httpBody = $mod_lesson_get_lesson_access_information_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modLessonGetQuestionsAttempts
     *
     * Return the list of questions attempts in a given lesson.
     *
     * @param  \OpenAPI\Client\Model\ModLessonGetQuestionsAttemptsRequest $mod_lesson_get_questions_attempts_request mod_lesson_get_questions_attempts_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLessonGetQuestionsAttempts'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModLessonGetQuestionsAttempts200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modLessonGetQuestionsAttempts($mod_lesson_get_questions_attempts_request, string $contentType = self::contentTypes['modLessonGetQuestionsAttempts'][0])
    {
        list($response) = $this->modLessonGetQuestionsAttemptsWithHttpInfo($mod_lesson_get_questions_attempts_request, $contentType);
        return $response;
    }

    /**
     * Operation modLessonGetQuestionsAttemptsWithHttpInfo
     *
     * Return the list of questions attempts in a given lesson.
     *
     * @param  \OpenAPI\Client\Model\ModLessonGetQuestionsAttemptsRequest $mod_lesson_get_questions_attempts_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLessonGetQuestionsAttempts'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModLessonGetQuestionsAttempts200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modLessonGetQuestionsAttemptsWithHttpInfo($mod_lesson_get_questions_attempts_request, string $contentType = self::contentTypes['modLessonGetQuestionsAttempts'][0])
    {
        $request = $this->modLessonGetQuestionsAttemptsRequest($mod_lesson_get_questions_attempts_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModLessonGetQuestionsAttempts200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModLessonGetQuestionsAttempts200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModLessonGetQuestionsAttempts200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModLessonGetQuestionsAttempts200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModLessonGetQuestionsAttempts200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modLessonGetQuestionsAttemptsAsync
     *
     * Return the list of questions attempts in a given lesson.
     *
     * @param  \OpenAPI\Client\Model\ModLessonGetQuestionsAttemptsRequest $mod_lesson_get_questions_attempts_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLessonGetQuestionsAttempts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modLessonGetQuestionsAttemptsAsync($mod_lesson_get_questions_attempts_request, string $contentType = self::contentTypes['modLessonGetQuestionsAttempts'][0])
    {
        return $this->modLessonGetQuestionsAttemptsAsyncWithHttpInfo($mod_lesson_get_questions_attempts_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modLessonGetQuestionsAttemptsAsyncWithHttpInfo
     *
     * Return the list of questions attempts in a given lesson.
     *
     * @param  \OpenAPI\Client\Model\ModLessonGetQuestionsAttemptsRequest $mod_lesson_get_questions_attempts_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLessonGetQuestionsAttempts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modLessonGetQuestionsAttemptsAsyncWithHttpInfo($mod_lesson_get_questions_attempts_request, string $contentType = self::contentTypes['modLessonGetQuestionsAttempts'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModLessonGetQuestionsAttempts200Response';
        $request = $this->modLessonGetQuestionsAttemptsRequest($mod_lesson_get_questions_attempts_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modLessonGetQuestionsAttempts'
     *
     * @param  \OpenAPI\Client\Model\ModLessonGetQuestionsAttemptsRequest $mod_lesson_get_questions_attempts_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLessonGetQuestionsAttempts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modLessonGetQuestionsAttemptsRequest($mod_lesson_get_questions_attempts_request, string $contentType = self::contentTypes['modLessonGetQuestionsAttempts'][0])
    {

        // verify the required parameter 'mod_lesson_get_questions_attempts_request' is set
        if ($mod_lesson_get_questions_attempts_request === null || (is_array($mod_lesson_get_questions_attempts_request) && count($mod_lesson_get_questions_attempts_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_lesson_get_questions_attempts_request when calling modLessonGetQuestionsAttempts'
            );
        }


        $resourcePath = '/mod_lesson_get_questions_attempts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_lesson_get_questions_attempts_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_lesson_get_questions_attempts_request));
            } else {
                $httpBody = $mod_lesson_get_questions_attempts_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modLessonGetUserAttempt
     *
     * Return information about the given user attempt (including answers).
     *
     * @param  \OpenAPI\Client\Model\ModLessonGetUserAttemptRequest $mod_lesson_get_user_attempt_request mod_lesson_get_user_attempt_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLessonGetUserAttempt'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModLessonGetUserAttempt200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modLessonGetUserAttempt($mod_lesson_get_user_attempt_request, string $contentType = self::contentTypes['modLessonGetUserAttempt'][0])
    {
        list($response) = $this->modLessonGetUserAttemptWithHttpInfo($mod_lesson_get_user_attempt_request, $contentType);
        return $response;
    }

    /**
     * Operation modLessonGetUserAttemptWithHttpInfo
     *
     * Return information about the given user attempt (including answers).
     *
     * @param  \OpenAPI\Client\Model\ModLessonGetUserAttemptRequest $mod_lesson_get_user_attempt_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLessonGetUserAttempt'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModLessonGetUserAttempt200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modLessonGetUserAttemptWithHttpInfo($mod_lesson_get_user_attempt_request, string $contentType = self::contentTypes['modLessonGetUserAttempt'][0])
    {
        $request = $this->modLessonGetUserAttemptRequest($mod_lesson_get_user_attempt_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModLessonGetUserAttempt200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModLessonGetUserAttempt200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModLessonGetUserAttempt200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModLessonGetUserAttempt200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModLessonGetUserAttempt200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modLessonGetUserAttemptAsync
     *
     * Return information about the given user attempt (including answers).
     *
     * @param  \OpenAPI\Client\Model\ModLessonGetUserAttemptRequest $mod_lesson_get_user_attempt_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLessonGetUserAttempt'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modLessonGetUserAttemptAsync($mod_lesson_get_user_attempt_request, string $contentType = self::contentTypes['modLessonGetUserAttempt'][0])
    {
        return $this->modLessonGetUserAttemptAsyncWithHttpInfo($mod_lesson_get_user_attempt_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modLessonGetUserAttemptAsyncWithHttpInfo
     *
     * Return information about the given user attempt (including answers).
     *
     * @param  \OpenAPI\Client\Model\ModLessonGetUserAttemptRequest $mod_lesson_get_user_attempt_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLessonGetUserAttempt'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modLessonGetUserAttemptAsyncWithHttpInfo($mod_lesson_get_user_attempt_request, string $contentType = self::contentTypes['modLessonGetUserAttempt'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModLessonGetUserAttempt200Response';
        $request = $this->modLessonGetUserAttemptRequest($mod_lesson_get_user_attempt_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modLessonGetUserAttempt'
     *
     * @param  \OpenAPI\Client\Model\ModLessonGetUserAttemptRequest $mod_lesson_get_user_attempt_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLessonGetUserAttempt'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modLessonGetUserAttemptRequest($mod_lesson_get_user_attempt_request, string $contentType = self::contentTypes['modLessonGetUserAttempt'][0])
    {

        // verify the required parameter 'mod_lesson_get_user_attempt_request' is set
        if ($mod_lesson_get_user_attempt_request === null || (is_array($mod_lesson_get_user_attempt_request) && count($mod_lesson_get_user_attempt_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_lesson_get_user_attempt_request when calling modLessonGetUserAttempt'
            );
        }


        $resourcePath = '/mod_lesson_get_user_attempt';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_lesson_get_user_attempt_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_lesson_get_user_attempt_request));
            } else {
                $httpBody = $mod_lesson_get_user_attempt_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modLessonGetUserAttemptGrade
     *
     * Return grade information in the attempt for a given user.
     *
     * @param  \OpenAPI\Client\Model\ModLessonGetUserAttemptGradeRequest $mod_lesson_get_user_attempt_grade_request mod_lesson_get_user_attempt_grade_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLessonGetUserAttemptGrade'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModLessonGetUserAttemptGrade200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modLessonGetUserAttemptGrade($mod_lesson_get_user_attempt_grade_request, string $contentType = self::contentTypes['modLessonGetUserAttemptGrade'][0])
    {
        list($response) = $this->modLessonGetUserAttemptGradeWithHttpInfo($mod_lesson_get_user_attempt_grade_request, $contentType);
        return $response;
    }

    /**
     * Operation modLessonGetUserAttemptGradeWithHttpInfo
     *
     * Return grade information in the attempt for a given user.
     *
     * @param  \OpenAPI\Client\Model\ModLessonGetUserAttemptGradeRequest $mod_lesson_get_user_attempt_grade_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLessonGetUserAttemptGrade'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModLessonGetUserAttemptGrade200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modLessonGetUserAttemptGradeWithHttpInfo($mod_lesson_get_user_attempt_grade_request, string $contentType = self::contentTypes['modLessonGetUserAttemptGrade'][0])
    {
        $request = $this->modLessonGetUserAttemptGradeRequest($mod_lesson_get_user_attempt_grade_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModLessonGetUserAttemptGrade200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModLessonGetUserAttemptGrade200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModLessonGetUserAttemptGrade200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModLessonGetUserAttemptGrade200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModLessonGetUserAttemptGrade200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modLessonGetUserAttemptGradeAsync
     *
     * Return grade information in the attempt for a given user.
     *
     * @param  \OpenAPI\Client\Model\ModLessonGetUserAttemptGradeRequest $mod_lesson_get_user_attempt_grade_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLessonGetUserAttemptGrade'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modLessonGetUserAttemptGradeAsync($mod_lesson_get_user_attempt_grade_request, string $contentType = self::contentTypes['modLessonGetUserAttemptGrade'][0])
    {
        return $this->modLessonGetUserAttemptGradeAsyncWithHttpInfo($mod_lesson_get_user_attempt_grade_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modLessonGetUserAttemptGradeAsyncWithHttpInfo
     *
     * Return grade information in the attempt for a given user.
     *
     * @param  \OpenAPI\Client\Model\ModLessonGetUserAttemptGradeRequest $mod_lesson_get_user_attempt_grade_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLessonGetUserAttemptGrade'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modLessonGetUserAttemptGradeAsyncWithHttpInfo($mod_lesson_get_user_attempt_grade_request, string $contentType = self::contentTypes['modLessonGetUserAttemptGrade'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModLessonGetUserAttemptGrade200Response';
        $request = $this->modLessonGetUserAttemptGradeRequest($mod_lesson_get_user_attempt_grade_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modLessonGetUserAttemptGrade'
     *
     * @param  \OpenAPI\Client\Model\ModLessonGetUserAttemptGradeRequest $mod_lesson_get_user_attempt_grade_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLessonGetUserAttemptGrade'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modLessonGetUserAttemptGradeRequest($mod_lesson_get_user_attempt_grade_request, string $contentType = self::contentTypes['modLessonGetUserAttemptGrade'][0])
    {

        // verify the required parameter 'mod_lesson_get_user_attempt_grade_request' is set
        if ($mod_lesson_get_user_attempt_grade_request === null || (is_array($mod_lesson_get_user_attempt_grade_request) && count($mod_lesson_get_user_attempt_grade_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_lesson_get_user_attempt_grade_request when calling modLessonGetUserAttemptGrade'
            );
        }


        $resourcePath = '/mod_lesson_get_user_attempt_grade';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_lesson_get_user_attempt_grade_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_lesson_get_user_attempt_grade_request));
            } else {
                $httpBody = $mod_lesson_get_user_attempt_grade_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modLessonGetUserGrade
     *
     * Return the final grade in the lesson for the given user.
     *
     * @param  \OpenAPI\Client\Model\ModLessonGetUserGradeRequest $mod_lesson_get_user_grade_request mod_lesson_get_user_grade_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLessonGetUserGrade'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModLessonGetUserGrade200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modLessonGetUserGrade($mod_lesson_get_user_grade_request, string $contentType = self::contentTypes['modLessonGetUserGrade'][0])
    {
        list($response) = $this->modLessonGetUserGradeWithHttpInfo($mod_lesson_get_user_grade_request, $contentType);
        return $response;
    }

    /**
     * Operation modLessonGetUserGradeWithHttpInfo
     *
     * Return the final grade in the lesson for the given user.
     *
     * @param  \OpenAPI\Client\Model\ModLessonGetUserGradeRequest $mod_lesson_get_user_grade_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLessonGetUserGrade'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModLessonGetUserGrade200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modLessonGetUserGradeWithHttpInfo($mod_lesson_get_user_grade_request, string $contentType = self::contentTypes['modLessonGetUserGrade'][0])
    {
        $request = $this->modLessonGetUserGradeRequest($mod_lesson_get_user_grade_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModLessonGetUserGrade200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModLessonGetUserGrade200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModLessonGetUserGrade200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModLessonGetUserGrade200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModLessonGetUserGrade200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modLessonGetUserGradeAsync
     *
     * Return the final grade in the lesson for the given user.
     *
     * @param  \OpenAPI\Client\Model\ModLessonGetUserGradeRequest $mod_lesson_get_user_grade_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLessonGetUserGrade'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modLessonGetUserGradeAsync($mod_lesson_get_user_grade_request, string $contentType = self::contentTypes['modLessonGetUserGrade'][0])
    {
        return $this->modLessonGetUserGradeAsyncWithHttpInfo($mod_lesson_get_user_grade_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modLessonGetUserGradeAsyncWithHttpInfo
     *
     * Return the final grade in the lesson for the given user.
     *
     * @param  \OpenAPI\Client\Model\ModLessonGetUserGradeRequest $mod_lesson_get_user_grade_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLessonGetUserGrade'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modLessonGetUserGradeAsyncWithHttpInfo($mod_lesson_get_user_grade_request, string $contentType = self::contentTypes['modLessonGetUserGrade'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModLessonGetUserGrade200Response';
        $request = $this->modLessonGetUserGradeRequest($mod_lesson_get_user_grade_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modLessonGetUserGrade'
     *
     * @param  \OpenAPI\Client\Model\ModLessonGetUserGradeRequest $mod_lesson_get_user_grade_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLessonGetUserGrade'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modLessonGetUserGradeRequest($mod_lesson_get_user_grade_request, string $contentType = self::contentTypes['modLessonGetUserGrade'][0])
    {

        // verify the required parameter 'mod_lesson_get_user_grade_request' is set
        if ($mod_lesson_get_user_grade_request === null || (is_array($mod_lesson_get_user_grade_request) && count($mod_lesson_get_user_grade_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_lesson_get_user_grade_request when calling modLessonGetUserGrade'
            );
        }


        $resourcePath = '/mod_lesson_get_user_grade';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_lesson_get_user_grade_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_lesson_get_user_grade_request));
            } else {
                $httpBody = $mod_lesson_get_user_grade_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modLessonGetUserTimers
     *
     * Return the timers in the current lesson for the given user.
     *
     * @param  \OpenAPI\Client\Model\ModLessonGetUserGradeRequest $mod_lesson_get_user_grade_request mod_lesson_get_user_grade_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLessonGetUserTimers'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModLessonGetUserTimers200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modLessonGetUserTimers($mod_lesson_get_user_grade_request, string $contentType = self::contentTypes['modLessonGetUserTimers'][0])
    {
        list($response) = $this->modLessonGetUserTimersWithHttpInfo($mod_lesson_get_user_grade_request, $contentType);
        return $response;
    }

    /**
     * Operation modLessonGetUserTimersWithHttpInfo
     *
     * Return the timers in the current lesson for the given user.
     *
     * @param  \OpenAPI\Client\Model\ModLessonGetUserGradeRequest $mod_lesson_get_user_grade_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLessonGetUserTimers'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModLessonGetUserTimers200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modLessonGetUserTimersWithHttpInfo($mod_lesson_get_user_grade_request, string $contentType = self::contentTypes['modLessonGetUserTimers'][0])
    {
        $request = $this->modLessonGetUserTimersRequest($mod_lesson_get_user_grade_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModLessonGetUserTimers200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModLessonGetUserTimers200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModLessonGetUserTimers200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModLessonGetUserTimers200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModLessonGetUserTimers200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modLessonGetUserTimersAsync
     *
     * Return the timers in the current lesson for the given user.
     *
     * @param  \OpenAPI\Client\Model\ModLessonGetUserGradeRequest $mod_lesson_get_user_grade_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLessonGetUserTimers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modLessonGetUserTimersAsync($mod_lesson_get_user_grade_request, string $contentType = self::contentTypes['modLessonGetUserTimers'][0])
    {
        return $this->modLessonGetUserTimersAsyncWithHttpInfo($mod_lesson_get_user_grade_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modLessonGetUserTimersAsyncWithHttpInfo
     *
     * Return the timers in the current lesson for the given user.
     *
     * @param  \OpenAPI\Client\Model\ModLessonGetUserGradeRequest $mod_lesson_get_user_grade_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLessonGetUserTimers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modLessonGetUserTimersAsyncWithHttpInfo($mod_lesson_get_user_grade_request, string $contentType = self::contentTypes['modLessonGetUserTimers'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModLessonGetUserTimers200Response';
        $request = $this->modLessonGetUserTimersRequest($mod_lesson_get_user_grade_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modLessonGetUserTimers'
     *
     * @param  \OpenAPI\Client\Model\ModLessonGetUserGradeRequest $mod_lesson_get_user_grade_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLessonGetUserTimers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modLessonGetUserTimersRequest($mod_lesson_get_user_grade_request, string $contentType = self::contentTypes['modLessonGetUserTimers'][0])
    {

        // verify the required parameter 'mod_lesson_get_user_grade_request' is set
        if ($mod_lesson_get_user_grade_request === null || (is_array($mod_lesson_get_user_grade_request) && count($mod_lesson_get_user_grade_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_lesson_get_user_grade_request when calling modLessonGetUserTimers'
            );
        }


        $resourcePath = '/mod_lesson_get_user_timers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_lesson_get_user_grade_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_lesson_get_user_grade_request));
            } else {
                $httpBody = $mod_lesson_get_user_grade_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modLessonLaunchAttempt
     *
     * Starts a new attempt or continues an existing one.
     *
     * @param  \OpenAPI\Client\Model\ModLessonLaunchAttemptRequest $mod_lesson_launch_attempt_request mod_lesson_launch_attempt_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLessonLaunchAttempt'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModLessonLaunchAttempt200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modLessonLaunchAttempt($mod_lesson_launch_attempt_request, string $contentType = self::contentTypes['modLessonLaunchAttempt'][0])
    {
        list($response) = $this->modLessonLaunchAttemptWithHttpInfo($mod_lesson_launch_attempt_request, $contentType);
        return $response;
    }

    /**
     * Operation modLessonLaunchAttemptWithHttpInfo
     *
     * Starts a new attempt or continues an existing one.
     *
     * @param  \OpenAPI\Client\Model\ModLessonLaunchAttemptRequest $mod_lesson_launch_attempt_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLessonLaunchAttempt'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModLessonLaunchAttempt200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modLessonLaunchAttemptWithHttpInfo($mod_lesson_launch_attempt_request, string $contentType = self::contentTypes['modLessonLaunchAttempt'][0])
    {
        $request = $this->modLessonLaunchAttemptRequest($mod_lesson_launch_attempt_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModLessonLaunchAttempt200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModLessonLaunchAttempt200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModLessonLaunchAttempt200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModLessonLaunchAttempt200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModLessonLaunchAttempt200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modLessonLaunchAttemptAsync
     *
     * Starts a new attempt or continues an existing one.
     *
     * @param  \OpenAPI\Client\Model\ModLessonLaunchAttemptRequest $mod_lesson_launch_attempt_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLessonLaunchAttempt'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modLessonLaunchAttemptAsync($mod_lesson_launch_attempt_request, string $contentType = self::contentTypes['modLessonLaunchAttempt'][0])
    {
        return $this->modLessonLaunchAttemptAsyncWithHttpInfo($mod_lesson_launch_attempt_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modLessonLaunchAttemptAsyncWithHttpInfo
     *
     * Starts a new attempt or continues an existing one.
     *
     * @param  \OpenAPI\Client\Model\ModLessonLaunchAttemptRequest $mod_lesson_launch_attempt_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLessonLaunchAttempt'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modLessonLaunchAttemptAsyncWithHttpInfo($mod_lesson_launch_attempt_request, string $contentType = self::contentTypes['modLessonLaunchAttempt'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModLessonLaunchAttempt200Response';
        $request = $this->modLessonLaunchAttemptRequest($mod_lesson_launch_attempt_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modLessonLaunchAttempt'
     *
     * @param  \OpenAPI\Client\Model\ModLessonLaunchAttemptRequest $mod_lesson_launch_attempt_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLessonLaunchAttempt'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modLessonLaunchAttemptRequest($mod_lesson_launch_attempt_request, string $contentType = self::contentTypes['modLessonLaunchAttempt'][0])
    {

        // verify the required parameter 'mod_lesson_launch_attempt_request' is set
        if ($mod_lesson_launch_attempt_request === null || (is_array($mod_lesson_launch_attempt_request) && count($mod_lesson_launch_attempt_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_lesson_launch_attempt_request when calling modLessonLaunchAttempt'
            );
        }


        $resourcePath = '/mod_lesson_launch_attempt';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_lesson_launch_attempt_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_lesson_launch_attempt_request));
            } else {
                $httpBody = $mod_lesson_launch_attempt_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modLessonProcessPage
     *
     * Processes page responses.
     *
     * @param  \OpenAPI\Client\Model\ModLessonProcessPageRequest $mod_lesson_process_page_request mod_lesson_process_page_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLessonProcessPage'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModLessonProcessPage200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modLessonProcessPage($mod_lesson_process_page_request, string $contentType = self::contentTypes['modLessonProcessPage'][0])
    {
        list($response) = $this->modLessonProcessPageWithHttpInfo($mod_lesson_process_page_request, $contentType);
        return $response;
    }

    /**
     * Operation modLessonProcessPageWithHttpInfo
     *
     * Processes page responses.
     *
     * @param  \OpenAPI\Client\Model\ModLessonProcessPageRequest $mod_lesson_process_page_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLessonProcessPage'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModLessonProcessPage200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modLessonProcessPageWithHttpInfo($mod_lesson_process_page_request, string $contentType = self::contentTypes['modLessonProcessPage'][0])
    {
        $request = $this->modLessonProcessPageRequest($mod_lesson_process_page_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModLessonProcessPage200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModLessonProcessPage200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModLessonProcessPage200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModLessonProcessPage200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModLessonProcessPage200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modLessonProcessPageAsync
     *
     * Processes page responses.
     *
     * @param  \OpenAPI\Client\Model\ModLessonProcessPageRequest $mod_lesson_process_page_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLessonProcessPage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modLessonProcessPageAsync($mod_lesson_process_page_request, string $contentType = self::contentTypes['modLessonProcessPage'][0])
    {
        return $this->modLessonProcessPageAsyncWithHttpInfo($mod_lesson_process_page_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modLessonProcessPageAsyncWithHttpInfo
     *
     * Processes page responses.
     *
     * @param  \OpenAPI\Client\Model\ModLessonProcessPageRequest $mod_lesson_process_page_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLessonProcessPage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modLessonProcessPageAsyncWithHttpInfo($mod_lesson_process_page_request, string $contentType = self::contentTypes['modLessonProcessPage'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModLessonProcessPage200Response';
        $request = $this->modLessonProcessPageRequest($mod_lesson_process_page_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modLessonProcessPage'
     *
     * @param  \OpenAPI\Client\Model\ModLessonProcessPageRequest $mod_lesson_process_page_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLessonProcessPage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modLessonProcessPageRequest($mod_lesson_process_page_request, string $contentType = self::contentTypes['modLessonProcessPage'][0])
    {

        // verify the required parameter 'mod_lesson_process_page_request' is set
        if ($mod_lesson_process_page_request === null || (is_array($mod_lesson_process_page_request) && count($mod_lesson_process_page_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_lesson_process_page_request when calling modLessonProcessPage'
            );
        }


        $resourcePath = '/mod_lesson_process_page';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_lesson_process_page_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_lesson_process_page_request));
            } else {
                $httpBody = $mod_lesson_process_page_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modLessonViewLesson
     *
     * Trigger the course module viewed event and update the module completion status.
     *
     * @param  \OpenAPI\Client\Model\ModLessonGetLessonRequest $mod_lesson_get_lesson_request mod_lesson_get_lesson_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLessonViewLesson'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modLessonViewLesson($mod_lesson_get_lesson_request, string $contentType = self::contentTypes['modLessonViewLesson'][0])
    {
        list($response) = $this->modLessonViewLessonWithHttpInfo($mod_lesson_get_lesson_request, $contentType);
        return $response;
    }

    /**
     * Operation modLessonViewLessonWithHttpInfo
     *
     * Trigger the course module viewed event and update the module completion status.
     *
     * @param  \OpenAPI\Client\Model\ModLessonGetLessonRequest $mod_lesson_get_lesson_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLessonViewLesson'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modLessonViewLessonWithHttpInfo($mod_lesson_get_lesson_request, string $contentType = self::contentTypes['modLessonViewLesson'][0])
    {
        $request = $this->modLessonViewLessonRequest($mod_lesson_get_lesson_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modLessonViewLessonAsync
     *
     * Trigger the course module viewed event and update the module completion status.
     *
     * @param  \OpenAPI\Client\Model\ModLessonGetLessonRequest $mod_lesson_get_lesson_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLessonViewLesson'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modLessonViewLessonAsync($mod_lesson_get_lesson_request, string $contentType = self::contentTypes['modLessonViewLesson'][0])
    {
        return $this->modLessonViewLessonAsyncWithHttpInfo($mod_lesson_get_lesson_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modLessonViewLessonAsyncWithHttpInfo
     *
     * Trigger the course module viewed event and update the module completion status.
     *
     * @param  \OpenAPI\Client\Model\ModLessonGetLessonRequest $mod_lesson_get_lesson_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLessonViewLesson'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modLessonViewLessonAsyncWithHttpInfo($mod_lesson_get_lesson_request, string $contentType = self::contentTypes['modLessonViewLesson'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response';
        $request = $this->modLessonViewLessonRequest($mod_lesson_get_lesson_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modLessonViewLesson'
     *
     * @param  \OpenAPI\Client\Model\ModLessonGetLessonRequest $mod_lesson_get_lesson_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modLessonViewLesson'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modLessonViewLessonRequest($mod_lesson_get_lesson_request, string $contentType = self::contentTypes['modLessonViewLesson'][0])
    {

        // verify the required parameter 'mod_lesson_get_lesson_request' is set
        if ($mod_lesson_get_lesson_request === null || (is_array($mod_lesson_get_lesson_request) && count($mod_lesson_get_lesson_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_lesson_get_lesson_request when calling modLessonViewLesson'
            );
        }


        $resourcePath = '/mod_lesson_view_lesson';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_lesson_get_lesson_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_lesson_get_lesson_request));
            } else {
                $httpBody = $mod_lesson_get_lesson_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
