<?php
/**
 * ToolLpApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * ToolLpApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ToolLpApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'toolLpDataForCompetenciesManagePage' => [
            'application/json',
        ],
        'toolLpDataForCompetencyFrameworksManagePage' => [
            'application/json',
        ],
        'toolLpDataForCompetencySummary' => [
            'application/json',
        ],
        'toolLpDataForCourseCompetenciesPage' => [
            'application/json',
        ],
        'toolLpDataForPlanPage' => [
            'application/json',
        ],
        'toolLpDataForPlansPage' => [
            'application/json',
        ],
        'toolLpDataForRelatedCompetenciesSection' => [
            'application/json',
        ],
        'toolLpDataForTemplateCompetenciesPage' => [
            'application/json',
        ],
        'toolLpDataForTemplatesManagePage' => [
            'application/json',
        ],
        'toolLpDataForUserCompetencySummary' => [
            'application/json',
        ],
        'toolLpDataForUserCompetencySummaryInCourse' => [
            'application/json',
        ],
        'toolLpDataForUserCompetencySummaryInPlan' => [
            'application/json',
        ],
        'toolLpDataForUserEvidenceListPage' => [
            'application/json',
        ],
        'toolLpDataForUserEvidencePage' => [
            'application/json',
        ],
        'toolLpListCoursesUsingCompetency' => [
            'application/json',
        ],
        'toolLpSearchCohorts' => [
            'application/json',
        ],
        'toolLpSearchUsers' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation toolLpDataForCompetenciesManagePage
     *
     * Load the data for the competencies manage page template
     *
     * @param  \OpenAPI\Client\Model\ToolLpDataForCompetenciesManagePageRequest $tool_lp_data_for_competencies_manage_page_request tool_lp_data_for_competencies_manage_page_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolLpDataForCompetenciesManagePage'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ToolLpDataForCompetenciesManagePage200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function toolLpDataForCompetenciesManagePage($tool_lp_data_for_competencies_manage_page_request, string $contentType = self::contentTypes['toolLpDataForCompetenciesManagePage'][0])
    {
        list($response) = $this->toolLpDataForCompetenciesManagePageWithHttpInfo($tool_lp_data_for_competencies_manage_page_request, $contentType);
        return $response;
    }

    /**
     * Operation toolLpDataForCompetenciesManagePageWithHttpInfo
     *
     * Load the data for the competencies manage page template
     *
     * @param  \OpenAPI\Client\Model\ToolLpDataForCompetenciesManagePageRequest $tool_lp_data_for_competencies_manage_page_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolLpDataForCompetenciesManagePage'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ToolLpDataForCompetenciesManagePage200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function toolLpDataForCompetenciesManagePageWithHttpInfo($tool_lp_data_for_competencies_manage_page_request, string $contentType = self::contentTypes['toolLpDataForCompetenciesManagePage'][0])
    {
        $request = $this->toolLpDataForCompetenciesManagePageRequest($tool_lp_data_for_competencies_manage_page_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ToolLpDataForCompetenciesManagePage200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ToolLpDataForCompetenciesManagePage200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ToolLpDataForCompetenciesManagePage200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ToolLpDataForCompetenciesManagePage200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ToolLpDataForCompetenciesManagePage200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation toolLpDataForCompetenciesManagePageAsync
     *
     * Load the data for the competencies manage page template
     *
     * @param  \OpenAPI\Client\Model\ToolLpDataForCompetenciesManagePageRequest $tool_lp_data_for_competencies_manage_page_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolLpDataForCompetenciesManagePage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function toolLpDataForCompetenciesManagePageAsync($tool_lp_data_for_competencies_manage_page_request, string $contentType = self::contentTypes['toolLpDataForCompetenciesManagePage'][0])
    {
        return $this->toolLpDataForCompetenciesManagePageAsyncWithHttpInfo($tool_lp_data_for_competencies_manage_page_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation toolLpDataForCompetenciesManagePageAsyncWithHttpInfo
     *
     * Load the data for the competencies manage page template
     *
     * @param  \OpenAPI\Client\Model\ToolLpDataForCompetenciesManagePageRequest $tool_lp_data_for_competencies_manage_page_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolLpDataForCompetenciesManagePage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function toolLpDataForCompetenciesManagePageAsyncWithHttpInfo($tool_lp_data_for_competencies_manage_page_request, string $contentType = self::contentTypes['toolLpDataForCompetenciesManagePage'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ToolLpDataForCompetenciesManagePage200Response';
        $request = $this->toolLpDataForCompetenciesManagePageRequest($tool_lp_data_for_competencies_manage_page_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'toolLpDataForCompetenciesManagePage'
     *
     * @param  \OpenAPI\Client\Model\ToolLpDataForCompetenciesManagePageRequest $tool_lp_data_for_competencies_manage_page_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolLpDataForCompetenciesManagePage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function toolLpDataForCompetenciesManagePageRequest($tool_lp_data_for_competencies_manage_page_request, string $contentType = self::contentTypes['toolLpDataForCompetenciesManagePage'][0])
    {

        // verify the required parameter 'tool_lp_data_for_competencies_manage_page_request' is set
        if ($tool_lp_data_for_competencies_manage_page_request === null || (is_array($tool_lp_data_for_competencies_manage_page_request) && count($tool_lp_data_for_competencies_manage_page_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tool_lp_data_for_competencies_manage_page_request when calling toolLpDataForCompetenciesManagePage'
            );
        }


        $resourcePath = '/tool_lp_data_for_competencies_manage_page';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($tool_lp_data_for_competencies_manage_page_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($tool_lp_data_for_competencies_manage_page_request));
            } else {
                $httpBody = $tool_lp_data_for_competencies_manage_page_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation toolLpDataForCompetencyFrameworksManagePage
     *
     * Load the data for the competency frameworks manage page template
     *
     * @param  \OpenAPI\Client\Model\ToolLpDataForCompetencyFrameworksManagePageRequest $tool_lp_data_for_competency_frameworks_manage_page_request tool_lp_data_for_competency_frameworks_manage_page_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolLpDataForCompetencyFrameworksManagePage'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ToolLpDataForCompetencyFrameworksManagePage200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function toolLpDataForCompetencyFrameworksManagePage($tool_lp_data_for_competency_frameworks_manage_page_request, string $contentType = self::contentTypes['toolLpDataForCompetencyFrameworksManagePage'][0])
    {
        list($response) = $this->toolLpDataForCompetencyFrameworksManagePageWithHttpInfo($tool_lp_data_for_competency_frameworks_manage_page_request, $contentType);
        return $response;
    }

    /**
     * Operation toolLpDataForCompetencyFrameworksManagePageWithHttpInfo
     *
     * Load the data for the competency frameworks manage page template
     *
     * @param  \OpenAPI\Client\Model\ToolLpDataForCompetencyFrameworksManagePageRequest $tool_lp_data_for_competency_frameworks_manage_page_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolLpDataForCompetencyFrameworksManagePage'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ToolLpDataForCompetencyFrameworksManagePage200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function toolLpDataForCompetencyFrameworksManagePageWithHttpInfo($tool_lp_data_for_competency_frameworks_manage_page_request, string $contentType = self::contentTypes['toolLpDataForCompetencyFrameworksManagePage'][0])
    {
        $request = $this->toolLpDataForCompetencyFrameworksManagePageRequest($tool_lp_data_for_competency_frameworks_manage_page_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ToolLpDataForCompetencyFrameworksManagePage200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ToolLpDataForCompetencyFrameworksManagePage200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ToolLpDataForCompetencyFrameworksManagePage200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ToolLpDataForCompetencyFrameworksManagePage200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ToolLpDataForCompetencyFrameworksManagePage200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation toolLpDataForCompetencyFrameworksManagePageAsync
     *
     * Load the data for the competency frameworks manage page template
     *
     * @param  \OpenAPI\Client\Model\ToolLpDataForCompetencyFrameworksManagePageRequest $tool_lp_data_for_competency_frameworks_manage_page_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolLpDataForCompetencyFrameworksManagePage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function toolLpDataForCompetencyFrameworksManagePageAsync($tool_lp_data_for_competency_frameworks_manage_page_request, string $contentType = self::contentTypes['toolLpDataForCompetencyFrameworksManagePage'][0])
    {
        return $this->toolLpDataForCompetencyFrameworksManagePageAsyncWithHttpInfo($tool_lp_data_for_competency_frameworks_manage_page_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation toolLpDataForCompetencyFrameworksManagePageAsyncWithHttpInfo
     *
     * Load the data for the competency frameworks manage page template
     *
     * @param  \OpenAPI\Client\Model\ToolLpDataForCompetencyFrameworksManagePageRequest $tool_lp_data_for_competency_frameworks_manage_page_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolLpDataForCompetencyFrameworksManagePage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function toolLpDataForCompetencyFrameworksManagePageAsyncWithHttpInfo($tool_lp_data_for_competency_frameworks_manage_page_request, string $contentType = self::contentTypes['toolLpDataForCompetencyFrameworksManagePage'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ToolLpDataForCompetencyFrameworksManagePage200Response';
        $request = $this->toolLpDataForCompetencyFrameworksManagePageRequest($tool_lp_data_for_competency_frameworks_manage_page_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'toolLpDataForCompetencyFrameworksManagePage'
     *
     * @param  \OpenAPI\Client\Model\ToolLpDataForCompetencyFrameworksManagePageRequest $tool_lp_data_for_competency_frameworks_manage_page_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolLpDataForCompetencyFrameworksManagePage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function toolLpDataForCompetencyFrameworksManagePageRequest($tool_lp_data_for_competency_frameworks_manage_page_request, string $contentType = self::contentTypes['toolLpDataForCompetencyFrameworksManagePage'][0])
    {

        // verify the required parameter 'tool_lp_data_for_competency_frameworks_manage_page_request' is set
        if ($tool_lp_data_for_competency_frameworks_manage_page_request === null || (is_array($tool_lp_data_for_competency_frameworks_manage_page_request) && count($tool_lp_data_for_competency_frameworks_manage_page_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tool_lp_data_for_competency_frameworks_manage_page_request when calling toolLpDataForCompetencyFrameworksManagePage'
            );
        }


        $resourcePath = '/tool_lp_data_for_competency_frameworks_manage_page';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($tool_lp_data_for_competency_frameworks_manage_page_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($tool_lp_data_for_competency_frameworks_manage_page_request));
            } else {
                $httpBody = $tool_lp_data_for_competency_frameworks_manage_page_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation toolLpDataForCompetencySummary
     *
     * Load competency data for summary template.
     *
     * @param  \OpenAPI\Client\Model\ToolLpDataForCompetencySummaryRequest $tool_lp_data_for_competency_summary_request tool_lp_data_for_competency_summary_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolLpDataForCompetencySummary'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ToolLpDataForCompetencySummary200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function toolLpDataForCompetencySummary($tool_lp_data_for_competency_summary_request, string $contentType = self::contentTypes['toolLpDataForCompetencySummary'][0])
    {
        list($response) = $this->toolLpDataForCompetencySummaryWithHttpInfo($tool_lp_data_for_competency_summary_request, $contentType);
        return $response;
    }

    /**
     * Operation toolLpDataForCompetencySummaryWithHttpInfo
     *
     * Load competency data for summary template.
     *
     * @param  \OpenAPI\Client\Model\ToolLpDataForCompetencySummaryRequest $tool_lp_data_for_competency_summary_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolLpDataForCompetencySummary'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ToolLpDataForCompetencySummary200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function toolLpDataForCompetencySummaryWithHttpInfo($tool_lp_data_for_competency_summary_request, string $contentType = self::contentTypes['toolLpDataForCompetencySummary'][0])
    {
        $request = $this->toolLpDataForCompetencySummaryRequest($tool_lp_data_for_competency_summary_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ToolLpDataForCompetencySummary200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ToolLpDataForCompetencySummary200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ToolLpDataForCompetencySummary200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ToolLpDataForCompetencySummary200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ToolLpDataForCompetencySummary200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation toolLpDataForCompetencySummaryAsync
     *
     * Load competency data for summary template.
     *
     * @param  \OpenAPI\Client\Model\ToolLpDataForCompetencySummaryRequest $tool_lp_data_for_competency_summary_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolLpDataForCompetencySummary'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function toolLpDataForCompetencySummaryAsync($tool_lp_data_for_competency_summary_request, string $contentType = self::contentTypes['toolLpDataForCompetencySummary'][0])
    {
        return $this->toolLpDataForCompetencySummaryAsyncWithHttpInfo($tool_lp_data_for_competency_summary_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation toolLpDataForCompetencySummaryAsyncWithHttpInfo
     *
     * Load competency data for summary template.
     *
     * @param  \OpenAPI\Client\Model\ToolLpDataForCompetencySummaryRequest $tool_lp_data_for_competency_summary_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolLpDataForCompetencySummary'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function toolLpDataForCompetencySummaryAsyncWithHttpInfo($tool_lp_data_for_competency_summary_request, string $contentType = self::contentTypes['toolLpDataForCompetencySummary'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ToolLpDataForCompetencySummary200Response';
        $request = $this->toolLpDataForCompetencySummaryRequest($tool_lp_data_for_competency_summary_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'toolLpDataForCompetencySummary'
     *
     * @param  \OpenAPI\Client\Model\ToolLpDataForCompetencySummaryRequest $tool_lp_data_for_competency_summary_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolLpDataForCompetencySummary'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function toolLpDataForCompetencySummaryRequest($tool_lp_data_for_competency_summary_request, string $contentType = self::contentTypes['toolLpDataForCompetencySummary'][0])
    {

        // verify the required parameter 'tool_lp_data_for_competency_summary_request' is set
        if ($tool_lp_data_for_competency_summary_request === null || (is_array($tool_lp_data_for_competency_summary_request) && count($tool_lp_data_for_competency_summary_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tool_lp_data_for_competency_summary_request when calling toolLpDataForCompetencySummary'
            );
        }


        $resourcePath = '/tool_lp_data_for_competency_summary';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($tool_lp_data_for_competency_summary_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($tool_lp_data_for_competency_summary_request));
            } else {
                $httpBody = $tool_lp_data_for_competency_summary_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation toolLpDataForCourseCompetenciesPage
     *
     * Load the data for the course competencies page template.
     *
     * @param  \OpenAPI\Client\Model\ToolLpDataForCourseCompetenciesPageRequest $tool_lp_data_for_course_competencies_page_request tool_lp_data_for_course_competencies_page_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolLpDataForCourseCompetenciesPage'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ToolLpDataForCourseCompetenciesPage200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function toolLpDataForCourseCompetenciesPage($tool_lp_data_for_course_competencies_page_request, string $contentType = self::contentTypes['toolLpDataForCourseCompetenciesPage'][0])
    {
        list($response) = $this->toolLpDataForCourseCompetenciesPageWithHttpInfo($tool_lp_data_for_course_competencies_page_request, $contentType);
        return $response;
    }

    /**
     * Operation toolLpDataForCourseCompetenciesPageWithHttpInfo
     *
     * Load the data for the course competencies page template.
     *
     * @param  \OpenAPI\Client\Model\ToolLpDataForCourseCompetenciesPageRequest $tool_lp_data_for_course_competencies_page_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolLpDataForCourseCompetenciesPage'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ToolLpDataForCourseCompetenciesPage200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function toolLpDataForCourseCompetenciesPageWithHttpInfo($tool_lp_data_for_course_competencies_page_request, string $contentType = self::contentTypes['toolLpDataForCourseCompetenciesPage'][0])
    {
        $request = $this->toolLpDataForCourseCompetenciesPageRequest($tool_lp_data_for_course_competencies_page_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ToolLpDataForCourseCompetenciesPage200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ToolLpDataForCourseCompetenciesPage200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ToolLpDataForCourseCompetenciesPage200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ToolLpDataForCourseCompetenciesPage200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ToolLpDataForCourseCompetenciesPage200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation toolLpDataForCourseCompetenciesPageAsync
     *
     * Load the data for the course competencies page template.
     *
     * @param  \OpenAPI\Client\Model\ToolLpDataForCourseCompetenciesPageRequest $tool_lp_data_for_course_competencies_page_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolLpDataForCourseCompetenciesPage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function toolLpDataForCourseCompetenciesPageAsync($tool_lp_data_for_course_competencies_page_request, string $contentType = self::contentTypes['toolLpDataForCourseCompetenciesPage'][0])
    {
        return $this->toolLpDataForCourseCompetenciesPageAsyncWithHttpInfo($tool_lp_data_for_course_competencies_page_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation toolLpDataForCourseCompetenciesPageAsyncWithHttpInfo
     *
     * Load the data for the course competencies page template.
     *
     * @param  \OpenAPI\Client\Model\ToolLpDataForCourseCompetenciesPageRequest $tool_lp_data_for_course_competencies_page_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolLpDataForCourseCompetenciesPage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function toolLpDataForCourseCompetenciesPageAsyncWithHttpInfo($tool_lp_data_for_course_competencies_page_request, string $contentType = self::contentTypes['toolLpDataForCourseCompetenciesPage'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ToolLpDataForCourseCompetenciesPage200Response';
        $request = $this->toolLpDataForCourseCompetenciesPageRequest($tool_lp_data_for_course_competencies_page_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'toolLpDataForCourseCompetenciesPage'
     *
     * @param  \OpenAPI\Client\Model\ToolLpDataForCourseCompetenciesPageRequest $tool_lp_data_for_course_competencies_page_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolLpDataForCourseCompetenciesPage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function toolLpDataForCourseCompetenciesPageRequest($tool_lp_data_for_course_competencies_page_request, string $contentType = self::contentTypes['toolLpDataForCourseCompetenciesPage'][0])
    {

        // verify the required parameter 'tool_lp_data_for_course_competencies_page_request' is set
        if ($tool_lp_data_for_course_competencies_page_request === null || (is_array($tool_lp_data_for_course_competencies_page_request) && count($tool_lp_data_for_course_competencies_page_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tool_lp_data_for_course_competencies_page_request when calling toolLpDataForCourseCompetenciesPage'
            );
        }


        $resourcePath = '/tool_lp_data_for_course_competencies_page';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($tool_lp_data_for_course_competencies_page_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($tool_lp_data_for_course_competencies_page_request));
            } else {
                $httpBody = $tool_lp_data_for_course_competencies_page_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation toolLpDataForPlanPage
     *
     * Load the data for the plan page template.
     *
     * @param  \OpenAPI\Client\Model\CoreCompetencyCompletePlanRequest $core_competency_complete_plan_request core_competency_complete_plan_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolLpDataForPlanPage'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ToolLpDataForPlanPage200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function toolLpDataForPlanPage($core_competency_complete_plan_request, string $contentType = self::contentTypes['toolLpDataForPlanPage'][0])
    {
        list($response) = $this->toolLpDataForPlanPageWithHttpInfo($core_competency_complete_plan_request, $contentType);
        return $response;
    }

    /**
     * Operation toolLpDataForPlanPageWithHttpInfo
     *
     * Load the data for the plan page template.
     *
     * @param  \OpenAPI\Client\Model\CoreCompetencyCompletePlanRequest $core_competency_complete_plan_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolLpDataForPlanPage'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ToolLpDataForPlanPage200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function toolLpDataForPlanPageWithHttpInfo($core_competency_complete_plan_request, string $contentType = self::contentTypes['toolLpDataForPlanPage'][0])
    {
        $request = $this->toolLpDataForPlanPageRequest($core_competency_complete_plan_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ToolLpDataForPlanPage200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ToolLpDataForPlanPage200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ToolLpDataForPlanPage200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ToolLpDataForPlanPage200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ToolLpDataForPlanPage200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation toolLpDataForPlanPageAsync
     *
     * Load the data for the plan page template.
     *
     * @param  \OpenAPI\Client\Model\CoreCompetencyCompletePlanRequest $core_competency_complete_plan_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolLpDataForPlanPage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function toolLpDataForPlanPageAsync($core_competency_complete_plan_request, string $contentType = self::contentTypes['toolLpDataForPlanPage'][0])
    {
        return $this->toolLpDataForPlanPageAsyncWithHttpInfo($core_competency_complete_plan_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation toolLpDataForPlanPageAsyncWithHttpInfo
     *
     * Load the data for the plan page template.
     *
     * @param  \OpenAPI\Client\Model\CoreCompetencyCompletePlanRequest $core_competency_complete_plan_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolLpDataForPlanPage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function toolLpDataForPlanPageAsyncWithHttpInfo($core_competency_complete_plan_request, string $contentType = self::contentTypes['toolLpDataForPlanPage'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ToolLpDataForPlanPage200Response';
        $request = $this->toolLpDataForPlanPageRequest($core_competency_complete_plan_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'toolLpDataForPlanPage'
     *
     * @param  \OpenAPI\Client\Model\CoreCompetencyCompletePlanRequest $core_competency_complete_plan_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolLpDataForPlanPage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function toolLpDataForPlanPageRequest($core_competency_complete_plan_request, string $contentType = self::contentTypes['toolLpDataForPlanPage'][0])
    {

        // verify the required parameter 'core_competency_complete_plan_request' is set
        if ($core_competency_complete_plan_request === null || (is_array($core_competency_complete_plan_request) && count($core_competency_complete_plan_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $core_competency_complete_plan_request when calling toolLpDataForPlanPage'
            );
        }


        $resourcePath = '/tool_lp_data_for_plan_page';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($core_competency_complete_plan_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($core_competency_complete_plan_request));
            } else {
                $httpBody = $core_competency_complete_plan_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation toolLpDataForPlansPage
     *
     * Load the data for the plans page template
     *
     * @param  \OpenAPI\Client\Model\ToolLpDataForPlansPageRequest $tool_lp_data_for_plans_page_request tool_lp_data_for_plans_page_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolLpDataForPlansPage'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ToolLpDataForPlansPage200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function toolLpDataForPlansPage($tool_lp_data_for_plans_page_request, string $contentType = self::contentTypes['toolLpDataForPlansPage'][0])
    {
        list($response) = $this->toolLpDataForPlansPageWithHttpInfo($tool_lp_data_for_plans_page_request, $contentType);
        return $response;
    }

    /**
     * Operation toolLpDataForPlansPageWithHttpInfo
     *
     * Load the data for the plans page template
     *
     * @param  \OpenAPI\Client\Model\ToolLpDataForPlansPageRequest $tool_lp_data_for_plans_page_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolLpDataForPlansPage'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ToolLpDataForPlansPage200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function toolLpDataForPlansPageWithHttpInfo($tool_lp_data_for_plans_page_request, string $contentType = self::contentTypes['toolLpDataForPlansPage'][0])
    {
        $request = $this->toolLpDataForPlansPageRequest($tool_lp_data_for_plans_page_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ToolLpDataForPlansPage200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ToolLpDataForPlansPage200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ToolLpDataForPlansPage200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ToolLpDataForPlansPage200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ToolLpDataForPlansPage200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation toolLpDataForPlansPageAsync
     *
     * Load the data for the plans page template
     *
     * @param  \OpenAPI\Client\Model\ToolLpDataForPlansPageRequest $tool_lp_data_for_plans_page_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolLpDataForPlansPage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function toolLpDataForPlansPageAsync($tool_lp_data_for_plans_page_request, string $contentType = self::contentTypes['toolLpDataForPlansPage'][0])
    {
        return $this->toolLpDataForPlansPageAsyncWithHttpInfo($tool_lp_data_for_plans_page_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation toolLpDataForPlansPageAsyncWithHttpInfo
     *
     * Load the data for the plans page template
     *
     * @param  \OpenAPI\Client\Model\ToolLpDataForPlansPageRequest $tool_lp_data_for_plans_page_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolLpDataForPlansPage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function toolLpDataForPlansPageAsyncWithHttpInfo($tool_lp_data_for_plans_page_request, string $contentType = self::contentTypes['toolLpDataForPlansPage'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ToolLpDataForPlansPage200Response';
        $request = $this->toolLpDataForPlansPageRequest($tool_lp_data_for_plans_page_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'toolLpDataForPlansPage'
     *
     * @param  \OpenAPI\Client\Model\ToolLpDataForPlansPageRequest $tool_lp_data_for_plans_page_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolLpDataForPlansPage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function toolLpDataForPlansPageRequest($tool_lp_data_for_plans_page_request, string $contentType = self::contentTypes['toolLpDataForPlansPage'][0])
    {

        // verify the required parameter 'tool_lp_data_for_plans_page_request' is set
        if ($tool_lp_data_for_plans_page_request === null || (is_array($tool_lp_data_for_plans_page_request) && count($tool_lp_data_for_plans_page_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tool_lp_data_for_plans_page_request when calling toolLpDataForPlansPage'
            );
        }


        $resourcePath = '/tool_lp_data_for_plans_page';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($tool_lp_data_for_plans_page_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($tool_lp_data_for_plans_page_request));
            } else {
                $httpBody = $tool_lp_data_for_plans_page_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation toolLpDataForRelatedCompetenciesSection
     *
     * Load the data for the related competencies template.
     *
     * @param  \OpenAPI\Client\Model\ToolLpDataForRelatedCompetenciesSectionRequest $tool_lp_data_for_related_competencies_section_request tool_lp_data_for_related_competencies_section_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolLpDataForRelatedCompetenciesSection'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ToolLpDataForRelatedCompetenciesSection200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function toolLpDataForRelatedCompetenciesSection($tool_lp_data_for_related_competencies_section_request, string $contentType = self::contentTypes['toolLpDataForRelatedCompetenciesSection'][0])
    {
        list($response) = $this->toolLpDataForRelatedCompetenciesSectionWithHttpInfo($tool_lp_data_for_related_competencies_section_request, $contentType);
        return $response;
    }

    /**
     * Operation toolLpDataForRelatedCompetenciesSectionWithHttpInfo
     *
     * Load the data for the related competencies template.
     *
     * @param  \OpenAPI\Client\Model\ToolLpDataForRelatedCompetenciesSectionRequest $tool_lp_data_for_related_competencies_section_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolLpDataForRelatedCompetenciesSection'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ToolLpDataForRelatedCompetenciesSection200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function toolLpDataForRelatedCompetenciesSectionWithHttpInfo($tool_lp_data_for_related_competencies_section_request, string $contentType = self::contentTypes['toolLpDataForRelatedCompetenciesSection'][0])
    {
        $request = $this->toolLpDataForRelatedCompetenciesSectionRequest($tool_lp_data_for_related_competencies_section_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ToolLpDataForRelatedCompetenciesSection200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ToolLpDataForRelatedCompetenciesSection200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ToolLpDataForRelatedCompetenciesSection200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ToolLpDataForRelatedCompetenciesSection200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ToolLpDataForRelatedCompetenciesSection200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation toolLpDataForRelatedCompetenciesSectionAsync
     *
     * Load the data for the related competencies template.
     *
     * @param  \OpenAPI\Client\Model\ToolLpDataForRelatedCompetenciesSectionRequest $tool_lp_data_for_related_competencies_section_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolLpDataForRelatedCompetenciesSection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function toolLpDataForRelatedCompetenciesSectionAsync($tool_lp_data_for_related_competencies_section_request, string $contentType = self::contentTypes['toolLpDataForRelatedCompetenciesSection'][0])
    {
        return $this->toolLpDataForRelatedCompetenciesSectionAsyncWithHttpInfo($tool_lp_data_for_related_competencies_section_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation toolLpDataForRelatedCompetenciesSectionAsyncWithHttpInfo
     *
     * Load the data for the related competencies template.
     *
     * @param  \OpenAPI\Client\Model\ToolLpDataForRelatedCompetenciesSectionRequest $tool_lp_data_for_related_competencies_section_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolLpDataForRelatedCompetenciesSection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function toolLpDataForRelatedCompetenciesSectionAsyncWithHttpInfo($tool_lp_data_for_related_competencies_section_request, string $contentType = self::contentTypes['toolLpDataForRelatedCompetenciesSection'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ToolLpDataForRelatedCompetenciesSection200Response';
        $request = $this->toolLpDataForRelatedCompetenciesSectionRequest($tool_lp_data_for_related_competencies_section_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'toolLpDataForRelatedCompetenciesSection'
     *
     * @param  \OpenAPI\Client\Model\ToolLpDataForRelatedCompetenciesSectionRequest $tool_lp_data_for_related_competencies_section_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolLpDataForRelatedCompetenciesSection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function toolLpDataForRelatedCompetenciesSectionRequest($tool_lp_data_for_related_competencies_section_request, string $contentType = self::contentTypes['toolLpDataForRelatedCompetenciesSection'][0])
    {

        // verify the required parameter 'tool_lp_data_for_related_competencies_section_request' is set
        if ($tool_lp_data_for_related_competencies_section_request === null || (is_array($tool_lp_data_for_related_competencies_section_request) && count($tool_lp_data_for_related_competencies_section_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tool_lp_data_for_related_competencies_section_request when calling toolLpDataForRelatedCompetenciesSection'
            );
        }


        $resourcePath = '/tool_lp_data_for_related_competencies_section';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($tool_lp_data_for_related_competencies_section_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($tool_lp_data_for_related_competencies_section_request));
            } else {
                $httpBody = $tool_lp_data_for_related_competencies_section_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation toolLpDataForTemplateCompetenciesPage
     *
     * Load the data for the template competencies page template.
     *
     * @param  \OpenAPI\Client\Model\ToolLpDataForTemplateCompetenciesPageRequest $tool_lp_data_for_template_competencies_page_request tool_lp_data_for_template_competencies_page_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolLpDataForTemplateCompetenciesPage'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ToolLpDataForTemplateCompetenciesPage200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function toolLpDataForTemplateCompetenciesPage($tool_lp_data_for_template_competencies_page_request, string $contentType = self::contentTypes['toolLpDataForTemplateCompetenciesPage'][0])
    {
        list($response) = $this->toolLpDataForTemplateCompetenciesPageWithHttpInfo($tool_lp_data_for_template_competencies_page_request, $contentType);
        return $response;
    }

    /**
     * Operation toolLpDataForTemplateCompetenciesPageWithHttpInfo
     *
     * Load the data for the template competencies page template.
     *
     * @param  \OpenAPI\Client\Model\ToolLpDataForTemplateCompetenciesPageRequest $tool_lp_data_for_template_competencies_page_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolLpDataForTemplateCompetenciesPage'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ToolLpDataForTemplateCompetenciesPage200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function toolLpDataForTemplateCompetenciesPageWithHttpInfo($tool_lp_data_for_template_competencies_page_request, string $contentType = self::contentTypes['toolLpDataForTemplateCompetenciesPage'][0])
    {
        $request = $this->toolLpDataForTemplateCompetenciesPageRequest($tool_lp_data_for_template_competencies_page_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ToolLpDataForTemplateCompetenciesPage200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ToolLpDataForTemplateCompetenciesPage200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ToolLpDataForTemplateCompetenciesPage200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ToolLpDataForTemplateCompetenciesPage200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ToolLpDataForTemplateCompetenciesPage200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation toolLpDataForTemplateCompetenciesPageAsync
     *
     * Load the data for the template competencies page template.
     *
     * @param  \OpenAPI\Client\Model\ToolLpDataForTemplateCompetenciesPageRequest $tool_lp_data_for_template_competencies_page_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolLpDataForTemplateCompetenciesPage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function toolLpDataForTemplateCompetenciesPageAsync($tool_lp_data_for_template_competencies_page_request, string $contentType = self::contentTypes['toolLpDataForTemplateCompetenciesPage'][0])
    {
        return $this->toolLpDataForTemplateCompetenciesPageAsyncWithHttpInfo($tool_lp_data_for_template_competencies_page_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation toolLpDataForTemplateCompetenciesPageAsyncWithHttpInfo
     *
     * Load the data for the template competencies page template.
     *
     * @param  \OpenAPI\Client\Model\ToolLpDataForTemplateCompetenciesPageRequest $tool_lp_data_for_template_competencies_page_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolLpDataForTemplateCompetenciesPage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function toolLpDataForTemplateCompetenciesPageAsyncWithHttpInfo($tool_lp_data_for_template_competencies_page_request, string $contentType = self::contentTypes['toolLpDataForTemplateCompetenciesPage'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ToolLpDataForTemplateCompetenciesPage200Response';
        $request = $this->toolLpDataForTemplateCompetenciesPageRequest($tool_lp_data_for_template_competencies_page_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'toolLpDataForTemplateCompetenciesPage'
     *
     * @param  \OpenAPI\Client\Model\ToolLpDataForTemplateCompetenciesPageRequest $tool_lp_data_for_template_competencies_page_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolLpDataForTemplateCompetenciesPage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function toolLpDataForTemplateCompetenciesPageRequest($tool_lp_data_for_template_competencies_page_request, string $contentType = self::contentTypes['toolLpDataForTemplateCompetenciesPage'][0])
    {

        // verify the required parameter 'tool_lp_data_for_template_competencies_page_request' is set
        if ($tool_lp_data_for_template_competencies_page_request === null || (is_array($tool_lp_data_for_template_competencies_page_request) && count($tool_lp_data_for_template_competencies_page_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tool_lp_data_for_template_competencies_page_request when calling toolLpDataForTemplateCompetenciesPage'
            );
        }


        $resourcePath = '/tool_lp_data_for_template_competencies_page';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($tool_lp_data_for_template_competencies_page_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($tool_lp_data_for_template_competencies_page_request));
            } else {
                $httpBody = $tool_lp_data_for_template_competencies_page_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation toolLpDataForTemplatesManagePage
     *
     * Load the data for the learning plan templates manage page template
     *
     * @param  \OpenAPI\Client\Model\ToolLpDataForCompetencyFrameworksManagePageRequest $tool_lp_data_for_competency_frameworks_manage_page_request tool_lp_data_for_competency_frameworks_manage_page_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolLpDataForTemplatesManagePage'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ToolLpDataForTemplatesManagePage200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function toolLpDataForTemplatesManagePage($tool_lp_data_for_competency_frameworks_manage_page_request, string $contentType = self::contentTypes['toolLpDataForTemplatesManagePage'][0])
    {
        list($response) = $this->toolLpDataForTemplatesManagePageWithHttpInfo($tool_lp_data_for_competency_frameworks_manage_page_request, $contentType);
        return $response;
    }

    /**
     * Operation toolLpDataForTemplatesManagePageWithHttpInfo
     *
     * Load the data for the learning plan templates manage page template
     *
     * @param  \OpenAPI\Client\Model\ToolLpDataForCompetencyFrameworksManagePageRequest $tool_lp_data_for_competency_frameworks_manage_page_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolLpDataForTemplatesManagePage'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ToolLpDataForTemplatesManagePage200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function toolLpDataForTemplatesManagePageWithHttpInfo($tool_lp_data_for_competency_frameworks_manage_page_request, string $contentType = self::contentTypes['toolLpDataForTemplatesManagePage'][0])
    {
        $request = $this->toolLpDataForTemplatesManagePageRequest($tool_lp_data_for_competency_frameworks_manage_page_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ToolLpDataForTemplatesManagePage200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ToolLpDataForTemplatesManagePage200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ToolLpDataForTemplatesManagePage200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ToolLpDataForTemplatesManagePage200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ToolLpDataForTemplatesManagePage200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation toolLpDataForTemplatesManagePageAsync
     *
     * Load the data for the learning plan templates manage page template
     *
     * @param  \OpenAPI\Client\Model\ToolLpDataForCompetencyFrameworksManagePageRequest $tool_lp_data_for_competency_frameworks_manage_page_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolLpDataForTemplatesManagePage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function toolLpDataForTemplatesManagePageAsync($tool_lp_data_for_competency_frameworks_manage_page_request, string $contentType = self::contentTypes['toolLpDataForTemplatesManagePage'][0])
    {
        return $this->toolLpDataForTemplatesManagePageAsyncWithHttpInfo($tool_lp_data_for_competency_frameworks_manage_page_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation toolLpDataForTemplatesManagePageAsyncWithHttpInfo
     *
     * Load the data for the learning plan templates manage page template
     *
     * @param  \OpenAPI\Client\Model\ToolLpDataForCompetencyFrameworksManagePageRequest $tool_lp_data_for_competency_frameworks_manage_page_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolLpDataForTemplatesManagePage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function toolLpDataForTemplatesManagePageAsyncWithHttpInfo($tool_lp_data_for_competency_frameworks_manage_page_request, string $contentType = self::contentTypes['toolLpDataForTemplatesManagePage'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ToolLpDataForTemplatesManagePage200Response';
        $request = $this->toolLpDataForTemplatesManagePageRequest($tool_lp_data_for_competency_frameworks_manage_page_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'toolLpDataForTemplatesManagePage'
     *
     * @param  \OpenAPI\Client\Model\ToolLpDataForCompetencyFrameworksManagePageRequest $tool_lp_data_for_competency_frameworks_manage_page_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolLpDataForTemplatesManagePage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function toolLpDataForTemplatesManagePageRequest($tool_lp_data_for_competency_frameworks_manage_page_request, string $contentType = self::contentTypes['toolLpDataForTemplatesManagePage'][0])
    {

        // verify the required parameter 'tool_lp_data_for_competency_frameworks_manage_page_request' is set
        if ($tool_lp_data_for_competency_frameworks_manage_page_request === null || (is_array($tool_lp_data_for_competency_frameworks_manage_page_request) && count($tool_lp_data_for_competency_frameworks_manage_page_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tool_lp_data_for_competency_frameworks_manage_page_request when calling toolLpDataForTemplatesManagePage'
            );
        }


        $resourcePath = '/tool_lp_data_for_templates_manage_page';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($tool_lp_data_for_competency_frameworks_manage_page_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($tool_lp_data_for_competency_frameworks_manage_page_request));
            } else {
                $httpBody = $tool_lp_data_for_competency_frameworks_manage_page_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation toolLpDataForUserCompetencySummary
     *
     * Load a summary of a user competency.
     *
     * @param  \OpenAPI\Client\Model\ToolLpDataForUserCompetencySummaryRequest $tool_lp_data_for_user_competency_summary_request tool_lp_data_for_user_competency_summary_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolLpDataForUserCompetencySummary'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ToolLpDataForUserCompetencySummary200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function toolLpDataForUserCompetencySummary($tool_lp_data_for_user_competency_summary_request, string $contentType = self::contentTypes['toolLpDataForUserCompetencySummary'][0])
    {
        list($response) = $this->toolLpDataForUserCompetencySummaryWithHttpInfo($tool_lp_data_for_user_competency_summary_request, $contentType);
        return $response;
    }

    /**
     * Operation toolLpDataForUserCompetencySummaryWithHttpInfo
     *
     * Load a summary of a user competency.
     *
     * @param  \OpenAPI\Client\Model\ToolLpDataForUserCompetencySummaryRequest $tool_lp_data_for_user_competency_summary_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolLpDataForUserCompetencySummary'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ToolLpDataForUserCompetencySummary200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function toolLpDataForUserCompetencySummaryWithHttpInfo($tool_lp_data_for_user_competency_summary_request, string $contentType = self::contentTypes['toolLpDataForUserCompetencySummary'][0])
    {
        $request = $this->toolLpDataForUserCompetencySummaryRequest($tool_lp_data_for_user_competency_summary_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ToolLpDataForUserCompetencySummary200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ToolLpDataForUserCompetencySummary200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ToolLpDataForUserCompetencySummary200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ToolLpDataForUserCompetencySummary200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ToolLpDataForUserCompetencySummary200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation toolLpDataForUserCompetencySummaryAsync
     *
     * Load a summary of a user competency.
     *
     * @param  \OpenAPI\Client\Model\ToolLpDataForUserCompetencySummaryRequest $tool_lp_data_for_user_competency_summary_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolLpDataForUserCompetencySummary'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function toolLpDataForUserCompetencySummaryAsync($tool_lp_data_for_user_competency_summary_request, string $contentType = self::contentTypes['toolLpDataForUserCompetencySummary'][0])
    {
        return $this->toolLpDataForUserCompetencySummaryAsyncWithHttpInfo($tool_lp_data_for_user_competency_summary_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation toolLpDataForUserCompetencySummaryAsyncWithHttpInfo
     *
     * Load a summary of a user competency.
     *
     * @param  \OpenAPI\Client\Model\ToolLpDataForUserCompetencySummaryRequest $tool_lp_data_for_user_competency_summary_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolLpDataForUserCompetencySummary'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function toolLpDataForUserCompetencySummaryAsyncWithHttpInfo($tool_lp_data_for_user_competency_summary_request, string $contentType = self::contentTypes['toolLpDataForUserCompetencySummary'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ToolLpDataForUserCompetencySummary200Response';
        $request = $this->toolLpDataForUserCompetencySummaryRequest($tool_lp_data_for_user_competency_summary_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'toolLpDataForUserCompetencySummary'
     *
     * @param  \OpenAPI\Client\Model\ToolLpDataForUserCompetencySummaryRequest $tool_lp_data_for_user_competency_summary_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolLpDataForUserCompetencySummary'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function toolLpDataForUserCompetencySummaryRequest($tool_lp_data_for_user_competency_summary_request, string $contentType = self::contentTypes['toolLpDataForUserCompetencySummary'][0])
    {

        // verify the required parameter 'tool_lp_data_for_user_competency_summary_request' is set
        if ($tool_lp_data_for_user_competency_summary_request === null || (is_array($tool_lp_data_for_user_competency_summary_request) && count($tool_lp_data_for_user_competency_summary_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tool_lp_data_for_user_competency_summary_request when calling toolLpDataForUserCompetencySummary'
            );
        }


        $resourcePath = '/tool_lp_data_for_user_competency_summary';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($tool_lp_data_for_user_competency_summary_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($tool_lp_data_for_user_competency_summary_request));
            } else {
                $httpBody = $tool_lp_data_for_user_competency_summary_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation toolLpDataForUserCompetencySummaryInCourse
     *
     * Load a summary of a user competency.
     *
     * @param  \OpenAPI\Client\Model\ToolLpDataForUserCompetencySummaryInCourseRequest $tool_lp_data_for_user_competency_summary_in_course_request tool_lp_data_for_user_competency_summary_in_course_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolLpDataForUserCompetencySummaryInCourse'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ToolLpDataForUserCompetencySummaryInCourse200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function toolLpDataForUserCompetencySummaryInCourse($tool_lp_data_for_user_competency_summary_in_course_request, string $contentType = self::contentTypes['toolLpDataForUserCompetencySummaryInCourse'][0])
    {
        list($response) = $this->toolLpDataForUserCompetencySummaryInCourseWithHttpInfo($tool_lp_data_for_user_competency_summary_in_course_request, $contentType);
        return $response;
    }

    /**
     * Operation toolLpDataForUserCompetencySummaryInCourseWithHttpInfo
     *
     * Load a summary of a user competency.
     *
     * @param  \OpenAPI\Client\Model\ToolLpDataForUserCompetencySummaryInCourseRequest $tool_lp_data_for_user_competency_summary_in_course_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolLpDataForUserCompetencySummaryInCourse'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ToolLpDataForUserCompetencySummaryInCourse200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function toolLpDataForUserCompetencySummaryInCourseWithHttpInfo($tool_lp_data_for_user_competency_summary_in_course_request, string $contentType = self::contentTypes['toolLpDataForUserCompetencySummaryInCourse'][0])
    {
        $request = $this->toolLpDataForUserCompetencySummaryInCourseRequest($tool_lp_data_for_user_competency_summary_in_course_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ToolLpDataForUserCompetencySummaryInCourse200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ToolLpDataForUserCompetencySummaryInCourse200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ToolLpDataForUserCompetencySummaryInCourse200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ToolLpDataForUserCompetencySummaryInCourse200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ToolLpDataForUserCompetencySummaryInCourse200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation toolLpDataForUserCompetencySummaryInCourseAsync
     *
     * Load a summary of a user competency.
     *
     * @param  \OpenAPI\Client\Model\ToolLpDataForUserCompetencySummaryInCourseRequest $tool_lp_data_for_user_competency_summary_in_course_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolLpDataForUserCompetencySummaryInCourse'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function toolLpDataForUserCompetencySummaryInCourseAsync($tool_lp_data_for_user_competency_summary_in_course_request, string $contentType = self::contentTypes['toolLpDataForUserCompetencySummaryInCourse'][0])
    {
        return $this->toolLpDataForUserCompetencySummaryInCourseAsyncWithHttpInfo($tool_lp_data_for_user_competency_summary_in_course_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation toolLpDataForUserCompetencySummaryInCourseAsyncWithHttpInfo
     *
     * Load a summary of a user competency.
     *
     * @param  \OpenAPI\Client\Model\ToolLpDataForUserCompetencySummaryInCourseRequest $tool_lp_data_for_user_competency_summary_in_course_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolLpDataForUserCompetencySummaryInCourse'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function toolLpDataForUserCompetencySummaryInCourseAsyncWithHttpInfo($tool_lp_data_for_user_competency_summary_in_course_request, string $contentType = self::contentTypes['toolLpDataForUserCompetencySummaryInCourse'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ToolLpDataForUserCompetencySummaryInCourse200Response';
        $request = $this->toolLpDataForUserCompetencySummaryInCourseRequest($tool_lp_data_for_user_competency_summary_in_course_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'toolLpDataForUserCompetencySummaryInCourse'
     *
     * @param  \OpenAPI\Client\Model\ToolLpDataForUserCompetencySummaryInCourseRequest $tool_lp_data_for_user_competency_summary_in_course_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolLpDataForUserCompetencySummaryInCourse'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function toolLpDataForUserCompetencySummaryInCourseRequest($tool_lp_data_for_user_competency_summary_in_course_request, string $contentType = self::contentTypes['toolLpDataForUserCompetencySummaryInCourse'][0])
    {

        // verify the required parameter 'tool_lp_data_for_user_competency_summary_in_course_request' is set
        if ($tool_lp_data_for_user_competency_summary_in_course_request === null || (is_array($tool_lp_data_for_user_competency_summary_in_course_request) && count($tool_lp_data_for_user_competency_summary_in_course_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tool_lp_data_for_user_competency_summary_in_course_request when calling toolLpDataForUserCompetencySummaryInCourse'
            );
        }


        $resourcePath = '/tool_lp_data_for_user_competency_summary_in_course';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($tool_lp_data_for_user_competency_summary_in_course_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($tool_lp_data_for_user_competency_summary_in_course_request));
            } else {
                $httpBody = $tool_lp_data_for_user_competency_summary_in_course_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation toolLpDataForUserCompetencySummaryInPlan
     *
     * Load a summary of a user competency.
     *
     * @param  \OpenAPI\Client\Model\ToolLpDataForUserCompetencySummaryInPlanRequest $tool_lp_data_for_user_competency_summary_in_plan_request tool_lp_data_for_user_competency_summary_in_plan_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolLpDataForUserCompetencySummaryInPlan'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ToolLpDataForUserCompetencySummaryInPlan200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function toolLpDataForUserCompetencySummaryInPlan($tool_lp_data_for_user_competency_summary_in_plan_request, string $contentType = self::contentTypes['toolLpDataForUserCompetencySummaryInPlan'][0])
    {
        list($response) = $this->toolLpDataForUserCompetencySummaryInPlanWithHttpInfo($tool_lp_data_for_user_competency_summary_in_plan_request, $contentType);
        return $response;
    }

    /**
     * Operation toolLpDataForUserCompetencySummaryInPlanWithHttpInfo
     *
     * Load a summary of a user competency.
     *
     * @param  \OpenAPI\Client\Model\ToolLpDataForUserCompetencySummaryInPlanRequest $tool_lp_data_for_user_competency_summary_in_plan_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolLpDataForUserCompetencySummaryInPlan'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ToolLpDataForUserCompetencySummaryInPlan200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function toolLpDataForUserCompetencySummaryInPlanWithHttpInfo($tool_lp_data_for_user_competency_summary_in_plan_request, string $contentType = self::contentTypes['toolLpDataForUserCompetencySummaryInPlan'][0])
    {
        $request = $this->toolLpDataForUserCompetencySummaryInPlanRequest($tool_lp_data_for_user_competency_summary_in_plan_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ToolLpDataForUserCompetencySummaryInPlan200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ToolLpDataForUserCompetencySummaryInPlan200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ToolLpDataForUserCompetencySummaryInPlan200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ToolLpDataForUserCompetencySummaryInPlan200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ToolLpDataForUserCompetencySummaryInPlan200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation toolLpDataForUserCompetencySummaryInPlanAsync
     *
     * Load a summary of a user competency.
     *
     * @param  \OpenAPI\Client\Model\ToolLpDataForUserCompetencySummaryInPlanRequest $tool_lp_data_for_user_competency_summary_in_plan_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolLpDataForUserCompetencySummaryInPlan'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function toolLpDataForUserCompetencySummaryInPlanAsync($tool_lp_data_for_user_competency_summary_in_plan_request, string $contentType = self::contentTypes['toolLpDataForUserCompetencySummaryInPlan'][0])
    {
        return $this->toolLpDataForUserCompetencySummaryInPlanAsyncWithHttpInfo($tool_lp_data_for_user_competency_summary_in_plan_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation toolLpDataForUserCompetencySummaryInPlanAsyncWithHttpInfo
     *
     * Load a summary of a user competency.
     *
     * @param  \OpenAPI\Client\Model\ToolLpDataForUserCompetencySummaryInPlanRequest $tool_lp_data_for_user_competency_summary_in_plan_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolLpDataForUserCompetencySummaryInPlan'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function toolLpDataForUserCompetencySummaryInPlanAsyncWithHttpInfo($tool_lp_data_for_user_competency_summary_in_plan_request, string $contentType = self::contentTypes['toolLpDataForUserCompetencySummaryInPlan'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ToolLpDataForUserCompetencySummaryInPlan200Response';
        $request = $this->toolLpDataForUserCompetencySummaryInPlanRequest($tool_lp_data_for_user_competency_summary_in_plan_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'toolLpDataForUserCompetencySummaryInPlan'
     *
     * @param  \OpenAPI\Client\Model\ToolLpDataForUserCompetencySummaryInPlanRequest $tool_lp_data_for_user_competency_summary_in_plan_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolLpDataForUserCompetencySummaryInPlan'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function toolLpDataForUserCompetencySummaryInPlanRequest($tool_lp_data_for_user_competency_summary_in_plan_request, string $contentType = self::contentTypes['toolLpDataForUserCompetencySummaryInPlan'][0])
    {

        // verify the required parameter 'tool_lp_data_for_user_competency_summary_in_plan_request' is set
        if ($tool_lp_data_for_user_competency_summary_in_plan_request === null || (is_array($tool_lp_data_for_user_competency_summary_in_plan_request) && count($tool_lp_data_for_user_competency_summary_in_plan_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tool_lp_data_for_user_competency_summary_in_plan_request when calling toolLpDataForUserCompetencySummaryInPlan'
            );
        }


        $resourcePath = '/tool_lp_data_for_user_competency_summary_in_plan';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($tool_lp_data_for_user_competency_summary_in_plan_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($tool_lp_data_for_user_competency_summary_in_plan_request));
            } else {
                $httpBody = $tool_lp_data_for_user_competency_summary_in_plan_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation toolLpDataForUserEvidenceListPage
     *
     * Load the data for the user evidence list page template
     *
     * @param  \OpenAPI\Client\Model\ToolLpDataForUserEvidenceListPageRequest $tool_lp_data_for_user_evidence_list_page_request tool_lp_data_for_user_evidence_list_page_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolLpDataForUserEvidenceListPage'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ToolLpDataForUserEvidenceListPage200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function toolLpDataForUserEvidenceListPage($tool_lp_data_for_user_evidence_list_page_request, string $contentType = self::contentTypes['toolLpDataForUserEvidenceListPage'][0])
    {
        list($response) = $this->toolLpDataForUserEvidenceListPageWithHttpInfo($tool_lp_data_for_user_evidence_list_page_request, $contentType);
        return $response;
    }

    /**
     * Operation toolLpDataForUserEvidenceListPageWithHttpInfo
     *
     * Load the data for the user evidence list page template
     *
     * @param  \OpenAPI\Client\Model\ToolLpDataForUserEvidenceListPageRequest $tool_lp_data_for_user_evidence_list_page_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolLpDataForUserEvidenceListPage'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ToolLpDataForUserEvidenceListPage200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function toolLpDataForUserEvidenceListPageWithHttpInfo($tool_lp_data_for_user_evidence_list_page_request, string $contentType = self::contentTypes['toolLpDataForUserEvidenceListPage'][0])
    {
        $request = $this->toolLpDataForUserEvidenceListPageRequest($tool_lp_data_for_user_evidence_list_page_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ToolLpDataForUserEvidenceListPage200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ToolLpDataForUserEvidenceListPage200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ToolLpDataForUserEvidenceListPage200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ToolLpDataForUserEvidenceListPage200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ToolLpDataForUserEvidenceListPage200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation toolLpDataForUserEvidenceListPageAsync
     *
     * Load the data for the user evidence list page template
     *
     * @param  \OpenAPI\Client\Model\ToolLpDataForUserEvidenceListPageRequest $tool_lp_data_for_user_evidence_list_page_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolLpDataForUserEvidenceListPage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function toolLpDataForUserEvidenceListPageAsync($tool_lp_data_for_user_evidence_list_page_request, string $contentType = self::contentTypes['toolLpDataForUserEvidenceListPage'][0])
    {
        return $this->toolLpDataForUserEvidenceListPageAsyncWithHttpInfo($tool_lp_data_for_user_evidence_list_page_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation toolLpDataForUserEvidenceListPageAsyncWithHttpInfo
     *
     * Load the data for the user evidence list page template
     *
     * @param  \OpenAPI\Client\Model\ToolLpDataForUserEvidenceListPageRequest $tool_lp_data_for_user_evidence_list_page_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolLpDataForUserEvidenceListPage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function toolLpDataForUserEvidenceListPageAsyncWithHttpInfo($tool_lp_data_for_user_evidence_list_page_request, string $contentType = self::contentTypes['toolLpDataForUserEvidenceListPage'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ToolLpDataForUserEvidenceListPage200Response';
        $request = $this->toolLpDataForUserEvidenceListPageRequest($tool_lp_data_for_user_evidence_list_page_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'toolLpDataForUserEvidenceListPage'
     *
     * @param  \OpenAPI\Client\Model\ToolLpDataForUserEvidenceListPageRequest $tool_lp_data_for_user_evidence_list_page_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolLpDataForUserEvidenceListPage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function toolLpDataForUserEvidenceListPageRequest($tool_lp_data_for_user_evidence_list_page_request, string $contentType = self::contentTypes['toolLpDataForUserEvidenceListPage'][0])
    {

        // verify the required parameter 'tool_lp_data_for_user_evidence_list_page_request' is set
        if ($tool_lp_data_for_user_evidence_list_page_request === null || (is_array($tool_lp_data_for_user_evidence_list_page_request) && count($tool_lp_data_for_user_evidence_list_page_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tool_lp_data_for_user_evidence_list_page_request when calling toolLpDataForUserEvidenceListPage'
            );
        }


        $resourcePath = '/tool_lp_data_for_user_evidence_list_page';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($tool_lp_data_for_user_evidence_list_page_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($tool_lp_data_for_user_evidence_list_page_request));
            } else {
                $httpBody = $tool_lp_data_for_user_evidence_list_page_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation toolLpDataForUserEvidencePage
     *
     * Load the data for the user evidence page template
     *
     * @param  \OpenAPI\Client\Model\ToolLpDataForUserEvidencePageRequest $tool_lp_data_for_user_evidence_page_request tool_lp_data_for_user_evidence_page_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolLpDataForUserEvidencePage'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ToolLpDataForUserEvidencePage200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function toolLpDataForUserEvidencePage($tool_lp_data_for_user_evidence_page_request, string $contentType = self::contentTypes['toolLpDataForUserEvidencePage'][0])
    {
        list($response) = $this->toolLpDataForUserEvidencePageWithHttpInfo($tool_lp_data_for_user_evidence_page_request, $contentType);
        return $response;
    }

    /**
     * Operation toolLpDataForUserEvidencePageWithHttpInfo
     *
     * Load the data for the user evidence page template
     *
     * @param  \OpenAPI\Client\Model\ToolLpDataForUserEvidencePageRequest $tool_lp_data_for_user_evidence_page_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolLpDataForUserEvidencePage'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ToolLpDataForUserEvidencePage200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function toolLpDataForUserEvidencePageWithHttpInfo($tool_lp_data_for_user_evidence_page_request, string $contentType = self::contentTypes['toolLpDataForUserEvidencePage'][0])
    {
        $request = $this->toolLpDataForUserEvidencePageRequest($tool_lp_data_for_user_evidence_page_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ToolLpDataForUserEvidencePage200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ToolLpDataForUserEvidencePage200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ToolLpDataForUserEvidencePage200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ToolLpDataForUserEvidencePage200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ToolLpDataForUserEvidencePage200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation toolLpDataForUserEvidencePageAsync
     *
     * Load the data for the user evidence page template
     *
     * @param  \OpenAPI\Client\Model\ToolLpDataForUserEvidencePageRequest $tool_lp_data_for_user_evidence_page_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolLpDataForUserEvidencePage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function toolLpDataForUserEvidencePageAsync($tool_lp_data_for_user_evidence_page_request, string $contentType = self::contentTypes['toolLpDataForUserEvidencePage'][0])
    {
        return $this->toolLpDataForUserEvidencePageAsyncWithHttpInfo($tool_lp_data_for_user_evidence_page_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation toolLpDataForUserEvidencePageAsyncWithHttpInfo
     *
     * Load the data for the user evidence page template
     *
     * @param  \OpenAPI\Client\Model\ToolLpDataForUserEvidencePageRequest $tool_lp_data_for_user_evidence_page_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolLpDataForUserEvidencePage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function toolLpDataForUserEvidencePageAsyncWithHttpInfo($tool_lp_data_for_user_evidence_page_request, string $contentType = self::contentTypes['toolLpDataForUserEvidencePage'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ToolLpDataForUserEvidencePage200Response';
        $request = $this->toolLpDataForUserEvidencePageRequest($tool_lp_data_for_user_evidence_page_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'toolLpDataForUserEvidencePage'
     *
     * @param  \OpenAPI\Client\Model\ToolLpDataForUserEvidencePageRequest $tool_lp_data_for_user_evidence_page_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolLpDataForUserEvidencePage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function toolLpDataForUserEvidencePageRequest($tool_lp_data_for_user_evidence_page_request, string $contentType = self::contentTypes['toolLpDataForUserEvidencePage'][0])
    {

        // verify the required parameter 'tool_lp_data_for_user_evidence_page_request' is set
        if ($tool_lp_data_for_user_evidence_page_request === null || (is_array($tool_lp_data_for_user_evidence_page_request) && count($tool_lp_data_for_user_evidence_page_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tool_lp_data_for_user_evidence_page_request when calling toolLpDataForUserEvidencePage'
            );
        }


        $resourcePath = '/tool_lp_data_for_user_evidence_page';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($tool_lp_data_for_user_evidence_page_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($tool_lp_data_for_user_evidence_page_request));
            } else {
                $httpBody = $tool_lp_data_for_user_evidence_page_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation toolLpListCoursesUsingCompetency
     *
     * List the courses using a competency
     *
     * @param  \OpenAPI\Client\Model\CoreCompetencyCompetencyViewedRequest $core_competency_competency_viewed_request core_competency_competency_viewed_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolLpListCoursesUsingCompetency'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object|\OpenAPI\Client\Model\ErrorResponse
     */
    public function toolLpListCoursesUsingCompetency($core_competency_competency_viewed_request, string $contentType = self::contentTypes['toolLpListCoursesUsingCompetency'][0])
    {
        list($response) = $this->toolLpListCoursesUsingCompetencyWithHttpInfo($core_competency_competency_viewed_request, $contentType);
        return $response;
    }

    /**
     * Operation toolLpListCoursesUsingCompetencyWithHttpInfo
     *
     * List the courses using a competency
     *
     * @param  \OpenAPI\Client\Model\CoreCompetencyCompetencyViewedRequest $core_competency_competency_viewed_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolLpListCoursesUsingCompetency'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function toolLpListCoursesUsingCompetencyWithHttpInfo($core_competency_competency_viewed_request, string $contentType = self::contentTypes['toolLpListCoursesUsingCompetency'][0])
    {
        $request = $this->toolLpListCoursesUsingCompetencyRequest($core_competency_competency_viewed_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation toolLpListCoursesUsingCompetencyAsync
     *
     * List the courses using a competency
     *
     * @param  \OpenAPI\Client\Model\CoreCompetencyCompetencyViewedRequest $core_competency_competency_viewed_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolLpListCoursesUsingCompetency'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function toolLpListCoursesUsingCompetencyAsync($core_competency_competency_viewed_request, string $contentType = self::contentTypes['toolLpListCoursesUsingCompetency'][0])
    {
        return $this->toolLpListCoursesUsingCompetencyAsyncWithHttpInfo($core_competency_competency_viewed_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation toolLpListCoursesUsingCompetencyAsyncWithHttpInfo
     *
     * List the courses using a competency
     *
     * @param  \OpenAPI\Client\Model\CoreCompetencyCompetencyViewedRequest $core_competency_competency_viewed_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolLpListCoursesUsingCompetency'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function toolLpListCoursesUsingCompetencyAsyncWithHttpInfo($core_competency_competency_viewed_request, string $contentType = self::contentTypes['toolLpListCoursesUsingCompetency'][0])
    {
        $returnType = 'object';
        $request = $this->toolLpListCoursesUsingCompetencyRequest($core_competency_competency_viewed_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'toolLpListCoursesUsingCompetency'
     *
     * @param  \OpenAPI\Client\Model\CoreCompetencyCompetencyViewedRequest $core_competency_competency_viewed_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolLpListCoursesUsingCompetency'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function toolLpListCoursesUsingCompetencyRequest($core_competency_competency_viewed_request, string $contentType = self::contentTypes['toolLpListCoursesUsingCompetency'][0])
    {

        // verify the required parameter 'core_competency_competency_viewed_request' is set
        if ($core_competency_competency_viewed_request === null || (is_array($core_competency_competency_viewed_request) && count($core_competency_competency_viewed_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $core_competency_competency_viewed_request when calling toolLpListCoursesUsingCompetency'
            );
        }


        $resourcePath = '/tool_lp_list_courses_using_competency';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($core_competency_competency_viewed_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($core_competency_competency_viewed_request));
            } else {
                $httpBody = $core_competency_competency_viewed_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation toolLpSearchCohorts
     *
     * Search for cohorts. This method is deprecated, please call &#39;core_cohort_search_cohorts&#39; instead
     *
     * @param  \OpenAPI\Client\Model\ToolLpSearchCohortsRequest $tool_lp_search_cohorts_request tool_lp_search_cohorts_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolLpSearchCohorts'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ToolLpSearchCohorts200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function toolLpSearchCohorts($tool_lp_search_cohorts_request, string $contentType = self::contentTypes['toolLpSearchCohorts'][0])
    {
        list($response) = $this->toolLpSearchCohortsWithHttpInfo($tool_lp_search_cohorts_request, $contentType);
        return $response;
    }

    /**
     * Operation toolLpSearchCohortsWithHttpInfo
     *
     * Search for cohorts. This method is deprecated, please call &#39;core_cohort_search_cohorts&#39; instead
     *
     * @param  \OpenAPI\Client\Model\ToolLpSearchCohortsRequest $tool_lp_search_cohorts_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolLpSearchCohorts'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ToolLpSearchCohorts200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function toolLpSearchCohortsWithHttpInfo($tool_lp_search_cohorts_request, string $contentType = self::contentTypes['toolLpSearchCohorts'][0])
    {
        $request = $this->toolLpSearchCohortsRequest($tool_lp_search_cohorts_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ToolLpSearchCohorts200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ToolLpSearchCohorts200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ToolLpSearchCohorts200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ToolLpSearchCohorts200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ToolLpSearchCohorts200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation toolLpSearchCohortsAsync
     *
     * Search for cohorts. This method is deprecated, please call &#39;core_cohort_search_cohorts&#39; instead
     *
     * @param  \OpenAPI\Client\Model\ToolLpSearchCohortsRequest $tool_lp_search_cohorts_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolLpSearchCohorts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function toolLpSearchCohortsAsync($tool_lp_search_cohorts_request, string $contentType = self::contentTypes['toolLpSearchCohorts'][0])
    {
        return $this->toolLpSearchCohortsAsyncWithHttpInfo($tool_lp_search_cohorts_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation toolLpSearchCohortsAsyncWithHttpInfo
     *
     * Search for cohorts. This method is deprecated, please call &#39;core_cohort_search_cohorts&#39; instead
     *
     * @param  \OpenAPI\Client\Model\ToolLpSearchCohortsRequest $tool_lp_search_cohorts_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolLpSearchCohorts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function toolLpSearchCohortsAsyncWithHttpInfo($tool_lp_search_cohorts_request, string $contentType = self::contentTypes['toolLpSearchCohorts'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ToolLpSearchCohorts200Response';
        $request = $this->toolLpSearchCohortsRequest($tool_lp_search_cohorts_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'toolLpSearchCohorts'
     *
     * @param  \OpenAPI\Client\Model\ToolLpSearchCohortsRequest $tool_lp_search_cohorts_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolLpSearchCohorts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function toolLpSearchCohortsRequest($tool_lp_search_cohorts_request, string $contentType = self::contentTypes['toolLpSearchCohorts'][0])
    {

        // verify the required parameter 'tool_lp_search_cohorts_request' is set
        if ($tool_lp_search_cohorts_request === null || (is_array($tool_lp_search_cohorts_request) && count($tool_lp_search_cohorts_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tool_lp_search_cohorts_request when calling toolLpSearchCohorts'
            );
        }


        $resourcePath = '/tool_lp_search_cohorts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($tool_lp_search_cohorts_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($tool_lp_search_cohorts_request));
            } else {
                $httpBody = $tool_lp_search_cohorts_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation toolLpSearchUsers
     *
     * Search for users.
     *
     * @param  \OpenAPI\Client\Model\ToolLpSearchUsersRequest $tool_lp_search_users_request tool_lp_search_users_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolLpSearchUsers'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ToolLpSearchUsers200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function toolLpSearchUsers($tool_lp_search_users_request, string $contentType = self::contentTypes['toolLpSearchUsers'][0])
    {
        list($response) = $this->toolLpSearchUsersWithHttpInfo($tool_lp_search_users_request, $contentType);
        return $response;
    }

    /**
     * Operation toolLpSearchUsersWithHttpInfo
     *
     * Search for users.
     *
     * @param  \OpenAPI\Client\Model\ToolLpSearchUsersRequest $tool_lp_search_users_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolLpSearchUsers'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ToolLpSearchUsers200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function toolLpSearchUsersWithHttpInfo($tool_lp_search_users_request, string $contentType = self::contentTypes['toolLpSearchUsers'][0])
    {
        $request = $this->toolLpSearchUsersRequest($tool_lp_search_users_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ToolLpSearchUsers200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ToolLpSearchUsers200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ToolLpSearchUsers200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ToolLpSearchUsers200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ToolLpSearchUsers200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation toolLpSearchUsersAsync
     *
     * Search for users.
     *
     * @param  \OpenAPI\Client\Model\ToolLpSearchUsersRequest $tool_lp_search_users_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolLpSearchUsers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function toolLpSearchUsersAsync($tool_lp_search_users_request, string $contentType = self::contentTypes['toolLpSearchUsers'][0])
    {
        return $this->toolLpSearchUsersAsyncWithHttpInfo($tool_lp_search_users_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation toolLpSearchUsersAsyncWithHttpInfo
     *
     * Search for users.
     *
     * @param  \OpenAPI\Client\Model\ToolLpSearchUsersRequest $tool_lp_search_users_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolLpSearchUsers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function toolLpSearchUsersAsyncWithHttpInfo($tool_lp_search_users_request, string $contentType = self::contentTypes['toolLpSearchUsers'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ToolLpSearchUsers200Response';
        $request = $this->toolLpSearchUsersRequest($tool_lp_search_users_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'toolLpSearchUsers'
     *
     * @param  \OpenAPI\Client\Model\ToolLpSearchUsersRequest $tool_lp_search_users_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolLpSearchUsers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function toolLpSearchUsersRequest($tool_lp_search_users_request, string $contentType = self::contentTypes['toolLpSearchUsers'][0])
    {

        // verify the required parameter 'tool_lp_search_users_request' is set
        if ($tool_lp_search_users_request === null || (is_array($tool_lp_search_users_request) && count($tool_lp_search_users_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tool_lp_search_users_request when calling toolLpSearchUsers'
            );
        }


        $resourcePath = '/tool_lp_search_users';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($tool_lp_search_users_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($tool_lp_search_users_request));
            } else {
                $httpBody = $tool_lp_search_users_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
