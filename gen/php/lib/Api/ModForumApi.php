<?php
/**
 * ModForumApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * ModForumApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ModForumApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'modForumAddDiscussion' => [
            'application/json',
        ],
        'modForumAddDiscussionPost' => [
            'application/json',
        ],
        'modForumCanAddDiscussion' => [
            'application/json',
        ],
        'modForumDeletePost' => [
            'application/json',
        ],
        'modForumGetDiscussionPost' => [
            'application/json',
        ],
        'modForumGetDiscussionPosts' => [
            'application/json',
        ],
        'modForumGetDiscussionPostsByUserid' => [
            'application/json',
        ],
        'modForumGetForumAccessInformation' => [
            'application/json',
        ],
        'modForumGetForumDiscussions' => [
            'application/json',
        ],
        'modForumGetForumDiscussionsPaginated' => [
            'application/json',
        ],
        'modForumGetForumsByCourses' => [
            'application/json',
        ],
        'modForumPrepareDraftAreaForPost' => [
            'application/json',
        ],
        'modForumSetLockState' => [
            'application/json',
        ],
        'modForumSetPinState' => [
            'application/json',
        ],
        'modForumSetSubscriptionState' => [
            'application/json',
        ],
        'modForumToggleFavouriteState' => [
            'application/json',
        ],
        'modForumUpdateDiscussionPost' => [
            'application/json',
        ],
        'modForumViewForum' => [
            'application/json',
        ],
        'modForumViewForumDiscussion' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation modForumAddDiscussion
     *
     * Add a new discussion into an existing forum.
     *
     * @param  \OpenAPI\Client\Model\ModForumAddDiscussionRequest $mod_forum_add_discussion_request mod_forum_add_discussion_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modForumAddDiscussion'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModForumAddDiscussion200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modForumAddDiscussion($mod_forum_add_discussion_request, string $contentType = self::contentTypes['modForumAddDiscussion'][0])
    {
        list($response) = $this->modForumAddDiscussionWithHttpInfo($mod_forum_add_discussion_request, $contentType);
        return $response;
    }

    /**
     * Operation modForumAddDiscussionWithHttpInfo
     *
     * Add a new discussion into an existing forum.
     *
     * @param  \OpenAPI\Client\Model\ModForumAddDiscussionRequest $mod_forum_add_discussion_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modForumAddDiscussion'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModForumAddDiscussion200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modForumAddDiscussionWithHttpInfo($mod_forum_add_discussion_request, string $contentType = self::contentTypes['modForumAddDiscussion'][0])
    {
        $request = $this->modForumAddDiscussionRequest($mod_forum_add_discussion_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModForumAddDiscussion200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModForumAddDiscussion200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModForumAddDiscussion200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModForumAddDiscussion200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModForumAddDiscussion200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modForumAddDiscussionAsync
     *
     * Add a new discussion into an existing forum.
     *
     * @param  \OpenAPI\Client\Model\ModForumAddDiscussionRequest $mod_forum_add_discussion_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modForumAddDiscussion'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modForumAddDiscussionAsync($mod_forum_add_discussion_request, string $contentType = self::contentTypes['modForumAddDiscussion'][0])
    {
        return $this->modForumAddDiscussionAsyncWithHttpInfo($mod_forum_add_discussion_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modForumAddDiscussionAsyncWithHttpInfo
     *
     * Add a new discussion into an existing forum.
     *
     * @param  \OpenAPI\Client\Model\ModForumAddDiscussionRequest $mod_forum_add_discussion_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modForumAddDiscussion'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modForumAddDiscussionAsyncWithHttpInfo($mod_forum_add_discussion_request, string $contentType = self::contentTypes['modForumAddDiscussion'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModForumAddDiscussion200Response';
        $request = $this->modForumAddDiscussionRequest($mod_forum_add_discussion_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modForumAddDiscussion'
     *
     * @param  \OpenAPI\Client\Model\ModForumAddDiscussionRequest $mod_forum_add_discussion_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modForumAddDiscussion'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modForumAddDiscussionRequest($mod_forum_add_discussion_request, string $contentType = self::contentTypes['modForumAddDiscussion'][0])
    {

        // verify the required parameter 'mod_forum_add_discussion_request' is set
        if ($mod_forum_add_discussion_request === null || (is_array($mod_forum_add_discussion_request) && count($mod_forum_add_discussion_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_forum_add_discussion_request when calling modForumAddDiscussion'
            );
        }


        $resourcePath = '/mod_forum_add_discussion';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_forum_add_discussion_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_forum_add_discussion_request));
            } else {
                $httpBody = $mod_forum_add_discussion_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modForumAddDiscussionPost
     *
     * Create new posts into an existing discussion.
     *
     * @param  \OpenAPI\Client\Model\ModForumAddDiscussionPostRequest $mod_forum_add_discussion_post_request mod_forum_add_discussion_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modForumAddDiscussionPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModForumAddDiscussionPost200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modForumAddDiscussionPost($mod_forum_add_discussion_post_request, string $contentType = self::contentTypes['modForumAddDiscussionPost'][0])
    {
        list($response) = $this->modForumAddDiscussionPostWithHttpInfo($mod_forum_add_discussion_post_request, $contentType);
        return $response;
    }

    /**
     * Operation modForumAddDiscussionPostWithHttpInfo
     *
     * Create new posts into an existing discussion.
     *
     * @param  \OpenAPI\Client\Model\ModForumAddDiscussionPostRequest $mod_forum_add_discussion_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modForumAddDiscussionPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModForumAddDiscussionPost200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modForumAddDiscussionPostWithHttpInfo($mod_forum_add_discussion_post_request, string $contentType = self::contentTypes['modForumAddDiscussionPost'][0])
    {
        $request = $this->modForumAddDiscussionPostRequest($mod_forum_add_discussion_post_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModForumAddDiscussionPost200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModForumAddDiscussionPost200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModForumAddDiscussionPost200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModForumAddDiscussionPost200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModForumAddDiscussionPost200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modForumAddDiscussionPostAsync
     *
     * Create new posts into an existing discussion.
     *
     * @param  \OpenAPI\Client\Model\ModForumAddDiscussionPostRequest $mod_forum_add_discussion_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modForumAddDiscussionPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modForumAddDiscussionPostAsync($mod_forum_add_discussion_post_request, string $contentType = self::contentTypes['modForumAddDiscussionPost'][0])
    {
        return $this->modForumAddDiscussionPostAsyncWithHttpInfo($mod_forum_add_discussion_post_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modForumAddDiscussionPostAsyncWithHttpInfo
     *
     * Create new posts into an existing discussion.
     *
     * @param  \OpenAPI\Client\Model\ModForumAddDiscussionPostRequest $mod_forum_add_discussion_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modForumAddDiscussionPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modForumAddDiscussionPostAsyncWithHttpInfo($mod_forum_add_discussion_post_request, string $contentType = self::contentTypes['modForumAddDiscussionPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModForumAddDiscussionPost200Response';
        $request = $this->modForumAddDiscussionPostRequest($mod_forum_add_discussion_post_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modForumAddDiscussionPost'
     *
     * @param  \OpenAPI\Client\Model\ModForumAddDiscussionPostRequest $mod_forum_add_discussion_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modForumAddDiscussionPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modForumAddDiscussionPostRequest($mod_forum_add_discussion_post_request, string $contentType = self::contentTypes['modForumAddDiscussionPost'][0])
    {

        // verify the required parameter 'mod_forum_add_discussion_post_request' is set
        if ($mod_forum_add_discussion_post_request === null || (is_array($mod_forum_add_discussion_post_request) && count($mod_forum_add_discussion_post_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_forum_add_discussion_post_request when calling modForumAddDiscussionPost'
            );
        }


        $resourcePath = '/mod_forum_add_discussion_post';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_forum_add_discussion_post_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_forum_add_discussion_post_request));
            } else {
                $httpBody = $mod_forum_add_discussion_post_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modForumCanAddDiscussion
     *
     * Check if the current user can add discussions in the given forum (and optionally for the given group).
     *
     * @param  \OpenAPI\Client\Model\ModForumCanAddDiscussionRequest $mod_forum_can_add_discussion_request mod_forum_can_add_discussion_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modForumCanAddDiscussion'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModForumCanAddDiscussion200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modForumCanAddDiscussion($mod_forum_can_add_discussion_request, string $contentType = self::contentTypes['modForumCanAddDiscussion'][0])
    {
        list($response) = $this->modForumCanAddDiscussionWithHttpInfo($mod_forum_can_add_discussion_request, $contentType);
        return $response;
    }

    /**
     * Operation modForumCanAddDiscussionWithHttpInfo
     *
     * Check if the current user can add discussions in the given forum (and optionally for the given group).
     *
     * @param  \OpenAPI\Client\Model\ModForumCanAddDiscussionRequest $mod_forum_can_add_discussion_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modForumCanAddDiscussion'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModForumCanAddDiscussion200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modForumCanAddDiscussionWithHttpInfo($mod_forum_can_add_discussion_request, string $contentType = self::contentTypes['modForumCanAddDiscussion'][0])
    {
        $request = $this->modForumCanAddDiscussionRequest($mod_forum_can_add_discussion_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModForumCanAddDiscussion200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModForumCanAddDiscussion200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModForumCanAddDiscussion200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModForumCanAddDiscussion200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModForumCanAddDiscussion200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modForumCanAddDiscussionAsync
     *
     * Check if the current user can add discussions in the given forum (and optionally for the given group).
     *
     * @param  \OpenAPI\Client\Model\ModForumCanAddDiscussionRequest $mod_forum_can_add_discussion_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modForumCanAddDiscussion'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modForumCanAddDiscussionAsync($mod_forum_can_add_discussion_request, string $contentType = self::contentTypes['modForumCanAddDiscussion'][0])
    {
        return $this->modForumCanAddDiscussionAsyncWithHttpInfo($mod_forum_can_add_discussion_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modForumCanAddDiscussionAsyncWithHttpInfo
     *
     * Check if the current user can add discussions in the given forum (and optionally for the given group).
     *
     * @param  \OpenAPI\Client\Model\ModForumCanAddDiscussionRequest $mod_forum_can_add_discussion_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modForumCanAddDiscussion'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modForumCanAddDiscussionAsyncWithHttpInfo($mod_forum_can_add_discussion_request, string $contentType = self::contentTypes['modForumCanAddDiscussion'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModForumCanAddDiscussion200Response';
        $request = $this->modForumCanAddDiscussionRequest($mod_forum_can_add_discussion_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modForumCanAddDiscussion'
     *
     * @param  \OpenAPI\Client\Model\ModForumCanAddDiscussionRequest $mod_forum_can_add_discussion_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modForumCanAddDiscussion'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modForumCanAddDiscussionRequest($mod_forum_can_add_discussion_request, string $contentType = self::contentTypes['modForumCanAddDiscussion'][0])
    {

        // verify the required parameter 'mod_forum_can_add_discussion_request' is set
        if ($mod_forum_can_add_discussion_request === null || (is_array($mod_forum_can_add_discussion_request) && count($mod_forum_can_add_discussion_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_forum_can_add_discussion_request when calling modForumCanAddDiscussion'
            );
        }


        $resourcePath = '/mod_forum_can_add_discussion';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_forum_can_add_discussion_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_forum_can_add_discussion_request));
            } else {
                $httpBody = $mod_forum_can_add_discussion_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modForumDeletePost
     *
     * Deletes a post or a discussion completely when the post is the discussion topic.
     *
     * @param  \OpenAPI\Client\Model\ModForumDeletePostRequest $mod_forum_delete_post_request mod_forum_delete_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modForumDeletePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModForumDeletePost200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modForumDeletePost($mod_forum_delete_post_request, string $contentType = self::contentTypes['modForumDeletePost'][0])
    {
        list($response) = $this->modForumDeletePostWithHttpInfo($mod_forum_delete_post_request, $contentType);
        return $response;
    }

    /**
     * Operation modForumDeletePostWithHttpInfo
     *
     * Deletes a post or a discussion completely when the post is the discussion topic.
     *
     * @param  \OpenAPI\Client\Model\ModForumDeletePostRequest $mod_forum_delete_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modForumDeletePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModForumDeletePost200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modForumDeletePostWithHttpInfo($mod_forum_delete_post_request, string $contentType = self::contentTypes['modForumDeletePost'][0])
    {
        $request = $this->modForumDeletePostRequest($mod_forum_delete_post_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModForumDeletePost200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModForumDeletePost200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModForumDeletePost200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModForumDeletePost200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModForumDeletePost200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modForumDeletePostAsync
     *
     * Deletes a post or a discussion completely when the post is the discussion topic.
     *
     * @param  \OpenAPI\Client\Model\ModForumDeletePostRequest $mod_forum_delete_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modForumDeletePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modForumDeletePostAsync($mod_forum_delete_post_request, string $contentType = self::contentTypes['modForumDeletePost'][0])
    {
        return $this->modForumDeletePostAsyncWithHttpInfo($mod_forum_delete_post_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modForumDeletePostAsyncWithHttpInfo
     *
     * Deletes a post or a discussion completely when the post is the discussion topic.
     *
     * @param  \OpenAPI\Client\Model\ModForumDeletePostRequest $mod_forum_delete_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modForumDeletePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modForumDeletePostAsyncWithHttpInfo($mod_forum_delete_post_request, string $contentType = self::contentTypes['modForumDeletePost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModForumDeletePost200Response';
        $request = $this->modForumDeletePostRequest($mod_forum_delete_post_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modForumDeletePost'
     *
     * @param  \OpenAPI\Client\Model\ModForumDeletePostRequest $mod_forum_delete_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modForumDeletePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modForumDeletePostRequest($mod_forum_delete_post_request, string $contentType = self::contentTypes['modForumDeletePost'][0])
    {

        // verify the required parameter 'mod_forum_delete_post_request' is set
        if ($mod_forum_delete_post_request === null || (is_array($mod_forum_delete_post_request) && count($mod_forum_delete_post_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_forum_delete_post_request when calling modForumDeletePost'
            );
        }


        $resourcePath = '/mod_forum_delete_post';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_forum_delete_post_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_forum_delete_post_request));
            } else {
                $httpBody = $mod_forum_delete_post_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modForumGetDiscussionPost
     *
     * Get a particular discussion post.
     *
     * @param  \OpenAPI\Client\Model\ModForumGetDiscussionPostRequest $mod_forum_get_discussion_post_request mod_forum_get_discussion_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modForumGetDiscussionPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModForumGetDiscussionPost200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modForumGetDiscussionPost($mod_forum_get_discussion_post_request, string $contentType = self::contentTypes['modForumGetDiscussionPost'][0])
    {
        list($response) = $this->modForumGetDiscussionPostWithHttpInfo($mod_forum_get_discussion_post_request, $contentType);
        return $response;
    }

    /**
     * Operation modForumGetDiscussionPostWithHttpInfo
     *
     * Get a particular discussion post.
     *
     * @param  \OpenAPI\Client\Model\ModForumGetDiscussionPostRequest $mod_forum_get_discussion_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modForumGetDiscussionPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModForumGetDiscussionPost200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modForumGetDiscussionPostWithHttpInfo($mod_forum_get_discussion_post_request, string $contentType = self::contentTypes['modForumGetDiscussionPost'][0])
    {
        $request = $this->modForumGetDiscussionPostRequest($mod_forum_get_discussion_post_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModForumGetDiscussionPost200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModForumGetDiscussionPost200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModForumGetDiscussionPost200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModForumGetDiscussionPost200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModForumGetDiscussionPost200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modForumGetDiscussionPostAsync
     *
     * Get a particular discussion post.
     *
     * @param  \OpenAPI\Client\Model\ModForumGetDiscussionPostRequest $mod_forum_get_discussion_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modForumGetDiscussionPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modForumGetDiscussionPostAsync($mod_forum_get_discussion_post_request, string $contentType = self::contentTypes['modForumGetDiscussionPost'][0])
    {
        return $this->modForumGetDiscussionPostAsyncWithHttpInfo($mod_forum_get_discussion_post_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modForumGetDiscussionPostAsyncWithHttpInfo
     *
     * Get a particular discussion post.
     *
     * @param  \OpenAPI\Client\Model\ModForumGetDiscussionPostRequest $mod_forum_get_discussion_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modForumGetDiscussionPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modForumGetDiscussionPostAsyncWithHttpInfo($mod_forum_get_discussion_post_request, string $contentType = self::contentTypes['modForumGetDiscussionPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModForumGetDiscussionPost200Response';
        $request = $this->modForumGetDiscussionPostRequest($mod_forum_get_discussion_post_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modForumGetDiscussionPost'
     *
     * @param  \OpenAPI\Client\Model\ModForumGetDiscussionPostRequest $mod_forum_get_discussion_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modForumGetDiscussionPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modForumGetDiscussionPostRequest($mod_forum_get_discussion_post_request, string $contentType = self::contentTypes['modForumGetDiscussionPost'][0])
    {

        // verify the required parameter 'mod_forum_get_discussion_post_request' is set
        if ($mod_forum_get_discussion_post_request === null || (is_array($mod_forum_get_discussion_post_request) && count($mod_forum_get_discussion_post_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_forum_get_discussion_post_request when calling modForumGetDiscussionPost'
            );
        }


        $resourcePath = '/mod_forum_get_discussion_post';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_forum_get_discussion_post_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_forum_get_discussion_post_request));
            } else {
                $httpBody = $mod_forum_get_discussion_post_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modForumGetDiscussionPosts
     *
     * Returns a list of forum posts for a discussion.
     *
     * @param  \OpenAPI\Client\Model\ModForumGetDiscussionPostsRequest $mod_forum_get_discussion_posts_request mod_forum_get_discussion_posts_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modForumGetDiscussionPosts'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModForumGetDiscussionPosts200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modForumGetDiscussionPosts($mod_forum_get_discussion_posts_request, string $contentType = self::contentTypes['modForumGetDiscussionPosts'][0])
    {
        list($response) = $this->modForumGetDiscussionPostsWithHttpInfo($mod_forum_get_discussion_posts_request, $contentType);
        return $response;
    }

    /**
     * Operation modForumGetDiscussionPostsWithHttpInfo
     *
     * Returns a list of forum posts for a discussion.
     *
     * @param  \OpenAPI\Client\Model\ModForumGetDiscussionPostsRequest $mod_forum_get_discussion_posts_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modForumGetDiscussionPosts'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModForumGetDiscussionPosts200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modForumGetDiscussionPostsWithHttpInfo($mod_forum_get_discussion_posts_request, string $contentType = self::contentTypes['modForumGetDiscussionPosts'][0])
    {
        $request = $this->modForumGetDiscussionPostsRequest($mod_forum_get_discussion_posts_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModForumGetDiscussionPosts200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModForumGetDiscussionPosts200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModForumGetDiscussionPosts200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModForumGetDiscussionPosts200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModForumGetDiscussionPosts200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modForumGetDiscussionPostsAsync
     *
     * Returns a list of forum posts for a discussion.
     *
     * @param  \OpenAPI\Client\Model\ModForumGetDiscussionPostsRequest $mod_forum_get_discussion_posts_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modForumGetDiscussionPosts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modForumGetDiscussionPostsAsync($mod_forum_get_discussion_posts_request, string $contentType = self::contentTypes['modForumGetDiscussionPosts'][0])
    {
        return $this->modForumGetDiscussionPostsAsyncWithHttpInfo($mod_forum_get_discussion_posts_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modForumGetDiscussionPostsAsyncWithHttpInfo
     *
     * Returns a list of forum posts for a discussion.
     *
     * @param  \OpenAPI\Client\Model\ModForumGetDiscussionPostsRequest $mod_forum_get_discussion_posts_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modForumGetDiscussionPosts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modForumGetDiscussionPostsAsyncWithHttpInfo($mod_forum_get_discussion_posts_request, string $contentType = self::contentTypes['modForumGetDiscussionPosts'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModForumGetDiscussionPosts200Response';
        $request = $this->modForumGetDiscussionPostsRequest($mod_forum_get_discussion_posts_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modForumGetDiscussionPosts'
     *
     * @param  \OpenAPI\Client\Model\ModForumGetDiscussionPostsRequest $mod_forum_get_discussion_posts_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modForumGetDiscussionPosts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modForumGetDiscussionPostsRequest($mod_forum_get_discussion_posts_request, string $contentType = self::contentTypes['modForumGetDiscussionPosts'][0])
    {

        // verify the required parameter 'mod_forum_get_discussion_posts_request' is set
        if ($mod_forum_get_discussion_posts_request === null || (is_array($mod_forum_get_discussion_posts_request) && count($mod_forum_get_discussion_posts_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_forum_get_discussion_posts_request when calling modForumGetDiscussionPosts'
            );
        }


        $resourcePath = '/mod_forum_get_discussion_posts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_forum_get_discussion_posts_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_forum_get_discussion_posts_request));
            } else {
                $httpBody = $mod_forum_get_discussion_posts_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modForumGetDiscussionPostsByUserid
     *
     * Returns a list of forum posts for a discussion for a user.
     *
     * @param  \OpenAPI\Client\Model\ModForumGetDiscussionPostsByUseridRequest $mod_forum_get_discussion_posts_by_userid_request mod_forum_get_discussion_posts_by_userid_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modForumGetDiscussionPostsByUserid'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModForumGetDiscussionPostsByUserid200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modForumGetDiscussionPostsByUserid($mod_forum_get_discussion_posts_by_userid_request, string $contentType = self::contentTypes['modForumGetDiscussionPostsByUserid'][0])
    {
        list($response) = $this->modForumGetDiscussionPostsByUseridWithHttpInfo($mod_forum_get_discussion_posts_by_userid_request, $contentType);
        return $response;
    }

    /**
     * Operation modForumGetDiscussionPostsByUseridWithHttpInfo
     *
     * Returns a list of forum posts for a discussion for a user.
     *
     * @param  \OpenAPI\Client\Model\ModForumGetDiscussionPostsByUseridRequest $mod_forum_get_discussion_posts_by_userid_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modForumGetDiscussionPostsByUserid'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModForumGetDiscussionPostsByUserid200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modForumGetDiscussionPostsByUseridWithHttpInfo($mod_forum_get_discussion_posts_by_userid_request, string $contentType = self::contentTypes['modForumGetDiscussionPostsByUserid'][0])
    {
        $request = $this->modForumGetDiscussionPostsByUseridRequest($mod_forum_get_discussion_posts_by_userid_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModForumGetDiscussionPostsByUserid200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModForumGetDiscussionPostsByUserid200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModForumGetDiscussionPostsByUserid200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModForumGetDiscussionPostsByUserid200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModForumGetDiscussionPostsByUserid200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modForumGetDiscussionPostsByUseridAsync
     *
     * Returns a list of forum posts for a discussion for a user.
     *
     * @param  \OpenAPI\Client\Model\ModForumGetDiscussionPostsByUseridRequest $mod_forum_get_discussion_posts_by_userid_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modForumGetDiscussionPostsByUserid'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modForumGetDiscussionPostsByUseridAsync($mod_forum_get_discussion_posts_by_userid_request, string $contentType = self::contentTypes['modForumGetDiscussionPostsByUserid'][0])
    {
        return $this->modForumGetDiscussionPostsByUseridAsyncWithHttpInfo($mod_forum_get_discussion_posts_by_userid_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modForumGetDiscussionPostsByUseridAsyncWithHttpInfo
     *
     * Returns a list of forum posts for a discussion for a user.
     *
     * @param  \OpenAPI\Client\Model\ModForumGetDiscussionPostsByUseridRequest $mod_forum_get_discussion_posts_by_userid_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modForumGetDiscussionPostsByUserid'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modForumGetDiscussionPostsByUseridAsyncWithHttpInfo($mod_forum_get_discussion_posts_by_userid_request, string $contentType = self::contentTypes['modForumGetDiscussionPostsByUserid'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModForumGetDiscussionPostsByUserid200Response';
        $request = $this->modForumGetDiscussionPostsByUseridRequest($mod_forum_get_discussion_posts_by_userid_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modForumGetDiscussionPostsByUserid'
     *
     * @param  \OpenAPI\Client\Model\ModForumGetDiscussionPostsByUseridRequest $mod_forum_get_discussion_posts_by_userid_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modForumGetDiscussionPostsByUserid'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modForumGetDiscussionPostsByUseridRequest($mod_forum_get_discussion_posts_by_userid_request, string $contentType = self::contentTypes['modForumGetDiscussionPostsByUserid'][0])
    {

        // verify the required parameter 'mod_forum_get_discussion_posts_by_userid_request' is set
        if ($mod_forum_get_discussion_posts_by_userid_request === null || (is_array($mod_forum_get_discussion_posts_by_userid_request) && count($mod_forum_get_discussion_posts_by_userid_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_forum_get_discussion_posts_by_userid_request when calling modForumGetDiscussionPostsByUserid'
            );
        }


        $resourcePath = '/mod_forum_get_discussion_posts_by_userid';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_forum_get_discussion_posts_by_userid_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_forum_get_discussion_posts_by_userid_request));
            } else {
                $httpBody = $mod_forum_get_discussion_posts_by_userid_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modForumGetForumAccessInformation
     *
     * Return capabilities information for a given forum.
     *
     * @param  \OpenAPI\Client\Model\ModForumGetForumAccessInformationRequest $mod_forum_get_forum_access_information_request mod_forum_get_forum_access_information_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modForumGetForumAccessInformation'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModForumGetForumAccessInformation200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modForumGetForumAccessInformation($mod_forum_get_forum_access_information_request, string $contentType = self::contentTypes['modForumGetForumAccessInformation'][0])
    {
        list($response) = $this->modForumGetForumAccessInformationWithHttpInfo($mod_forum_get_forum_access_information_request, $contentType);
        return $response;
    }

    /**
     * Operation modForumGetForumAccessInformationWithHttpInfo
     *
     * Return capabilities information for a given forum.
     *
     * @param  \OpenAPI\Client\Model\ModForumGetForumAccessInformationRequest $mod_forum_get_forum_access_information_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modForumGetForumAccessInformation'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModForumGetForumAccessInformation200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modForumGetForumAccessInformationWithHttpInfo($mod_forum_get_forum_access_information_request, string $contentType = self::contentTypes['modForumGetForumAccessInformation'][0])
    {
        $request = $this->modForumGetForumAccessInformationRequest($mod_forum_get_forum_access_information_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModForumGetForumAccessInformation200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModForumGetForumAccessInformation200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModForumGetForumAccessInformation200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModForumGetForumAccessInformation200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModForumGetForumAccessInformation200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modForumGetForumAccessInformationAsync
     *
     * Return capabilities information for a given forum.
     *
     * @param  \OpenAPI\Client\Model\ModForumGetForumAccessInformationRequest $mod_forum_get_forum_access_information_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modForumGetForumAccessInformation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modForumGetForumAccessInformationAsync($mod_forum_get_forum_access_information_request, string $contentType = self::contentTypes['modForumGetForumAccessInformation'][0])
    {
        return $this->modForumGetForumAccessInformationAsyncWithHttpInfo($mod_forum_get_forum_access_information_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modForumGetForumAccessInformationAsyncWithHttpInfo
     *
     * Return capabilities information for a given forum.
     *
     * @param  \OpenAPI\Client\Model\ModForumGetForumAccessInformationRequest $mod_forum_get_forum_access_information_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modForumGetForumAccessInformation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modForumGetForumAccessInformationAsyncWithHttpInfo($mod_forum_get_forum_access_information_request, string $contentType = self::contentTypes['modForumGetForumAccessInformation'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModForumGetForumAccessInformation200Response';
        $request = $this->modForumGetForumAccessInformationRequest($mod_forum_get_forum_access_information_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modForumGetForumAccessInformation'
     *
     * @param  \OpenAPI\Client\Model\ModForumGetForumAccessInformationRequest $mod_forum_get_forum_access_information_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modForumGetForumAccessInformation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modForumGetForumAccessInformationRequest($mod_forum_get_forum_access_information_request, string $contentType = self::contentTypes['modForumGetForumAccessInformation'][0])
    {

        // verify the required parameter 'mod_forum_get_forum_access_information_request' is set
        if ($mod_forum_get_forum_access_information_request === null || (is_array($mod_forum_get_forum_access_information_request) && count($mod_forum_get_forum_access_information_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_forum_get_forum_access_information_request when calling modForumGetForumAccessInformation'
            );
        }


        $resourcePath = '/mod_forum_get_forum_access_information';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_forum_get_forum_access_information_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_forum_get_forum_access_information_request));
            } else {
                $httpBody = $mod_forum_get_forum_access_information_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modForumGetForumDiscussions
     *
     * Returns a list of forum discussions optionally sorted and paginated.
     *
     * @param  \OpenAPI\Client\Model\ModForumGetForumDiscussionsRequest $mod_forum_get_forum_discussions_request mod_forum_get_forum_discussions_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modForumGetForumDiscussions'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModForumGetForumDiscussions200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modForumGetForumDiscussions($mod_forum_get_forum_discussions_request, string $contentType = self::contentTypes['modForumGetForumDiscussions'][0])
    {
        list($response) = $this->modForumGetForumDiscussionsWithHttpInfo($mod_forum_get_forum_discussions_request, $contentType);
        return $response;
    }

    /**
     * Operation modForumGetForumDiscussionsWithHttpInfo
     *
     * Returns a list of forum discussions optionally sorted and paginated.
     *
     * @param  \OpenAPI\Client\Model\ModForumGetForumDiscussionsRequest $mod_forum_get_forum_discussions_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modForumGetForumDiscussions'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModForumGetForumDiscussions200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modForumGetForumDiscussionsWithHttpInfo($mod_forum_get_forum_discussions_request, string $contentType = self::contentTypes['modForumGetForumDiscussions'][0])
    {
        $request = $this->modForumGetForumDiscussionsRequest($mod_forum_get_forum_discussions_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModForumGetForumDiscussions200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModForumGetForumDiscussions200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModForumGetForumDiscussions200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModForumGetForumDiscussions200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModForumGetForumDiscussions200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modForumGetForumDiscussionsAsync
     *
     * Returns a list of forum discussions optionally sorted and paginated.
     *
     * @param  \OpenAPI\Client\Model\ModForumGetForumDiscussionsRequest $mod_forum_get_forum_discussions_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modForumGetForumDiscussions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modForumGetForumDiscussionsAsync($mod_forum_get_forum_discussions_request, string $contentType = self::contentTypes['modForumGetForumDiscussions'][0])
    {
        return $this->modForumGetForumDiscussionsAsyncWithHttpInfo($mod_forum_get_forum_discussions_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modForumGetForumDiscussionsAsyncWithHttpInfo
     *
     * Returns a list of forum discussions optionally sorted and paginated.
     *
     * @param  \OpenAPI\Client\Model\ModForumGetForumDiscussionsRequest $mod_forum_get_forum_discussions_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modForumGetForumDiscussions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modForumGetForumDiscussionsAsyncWithHttpInfo($mod_forum_get_forum_discussions_request, string $contentType = self::contentTypes['modForumGetForumDiscussions'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModForumGetForumDiscussions200Response';
        $request = $this->modForumGetForumDiscussionsRequest($mod_forum_get_forum_discussions_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modForumGetForumDiscussions'
     *
     * @param  \OpenAPI\Client\Model\ModForumGetForumDiscussionsRequest $mod_forum_get_forum_discussions_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modForumGetForumDiscussions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modForumGetForumDiscussionsRequest($mod_forum_get_forum_discussions_request, string $contentType = self::contentTypes['modForumGetForumDiscussions'][0])
    {

        // verify the required parameter 'mod_forum_get_forum_discussions_request' is set
        if ($mod_forum_get_forum_discussions_request === null || (is_array($mod_forum_get_forum_discussions_request) && count($mod_forum_get_forum_discussions_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_forum_get_forum_discussions_request when calling modForumGetForumDiscussions'
            );
        }


        $resourcePath = '/mod_forum_get_forum_discussions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_forum_get_forum_discussions_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_forum_get_forum_discussions_request));
            } else {
                $httpBody = $mod_forum_get_forum_discussions_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modForumGetForumDiscussionsPaginated
     *
     * ** DEPRECATED ** Please do not call this function any more.                           Returns a list of forum discussions optionally sorted and paginated.
     *
     * @param  \OpenAPI\Client\Model\ModForumGetForumDiscussionsPaginatedRequest $mod_forum_get_forum_discussions_paginated_request mod_forum_get_forum_discussions_paginated_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modForumGetForumDiscussionsPaginated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModForumGetForumDiscussionsPaginated200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modForumGetForumDiscussionsPaginated($mod_forum_get_forum_discussions_paginated_request, string $contentType = self::contentTypes['modForumGetForumDiscussionsPaginated'][0])
    {
        list($response) = $this->modForumGetForumDiscussionsPaginatedWithHttpInfo($mod_forum_get_forum_discussions_paginated_request, $contentType);
        return $response;
    }

    /**
     * Operation modForumGetForumDiscussionsPaginatedWithHttpInfo
     *
     * ** DEPRECATED ** Please do not call this function any more.                           Returns a list of forum discussions optionally sorted and paginated.
     *
     * @param  \OpenAPI\Client\Model\ModForumGetForumDiscussionsPaginatedRequest $mod_forum_get_forum_discussions_paginated_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modForumGetForumDiscussionsPaginated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModForumGetForumDiscussionsPaginated200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modForumGetForumDiscussionsPaginatedWithHttpInfo($mod_forum_get_forum_discussions_paginated_request, string $contentType = self::contentTypes['modForumGetForumDiscussionsPaginated'][0])
    {
        $request = $this->modForumGetForumDiscussionsPaginatedRequest($mod_forum_get_forum_discussions_paginated_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModForumGetForumDiscussionsPaginated200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModForumGetForumDiscussionsPaginated200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModForumGetForumDiscussionsPaginated200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModForumGetForumDiscussionsPaginated200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModForumGetForumDiscussionsPaginated200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modForumGetForumDiscussionsPaginatedAsync
     *
     * ** DEPRECATED ** Please do not call this function any more.                           Returns a list of forum discussions optionally sorted and paginated.
     *
     * @param  \OpenAPI\Client\Model\ModForumGetForumDiscussionsPaginatedRequest $mod_forum_get_forum_discussions_paginated_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modForumGetForumDiscussionsPaginated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modForumGetForumDiscussionsPaginatedAsync($mod_forum_get_forum_discussions_paginated_request, string $contentType = self::contentTypes['modForumGetForumDiscussionsPaginated'][0])
    {
        return $this->modForumGetForumDiscussionsPaginatedAsyncWithHttpInfo($mod_forum_get_forum_discussions_paginated_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modForumGetForumDiscussionsPaginatedAsyncWithHttpInfo
     *
     * ** DEPRECATED ** Please do not call this function any more.                           Returns a list of forum discussions optionally sorted and paginated.
     *
     * @param  \OpenAPI\Client\Model\ModForumGetForumDiscussionsPaginatedRequest $mod_forum_get_forum_discussions_paginated_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modForumGetForumDiscussionsPaginated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modForumGetForumDiscussionsPaginatedAsyncWithHttpInfo($mod_forum_get_forum_discussions_paginated_request, string $contentType = self::contentTypes['modForumGetForumDiscussionsPaginated'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModForumGetForumDiscussionsPaginated200Response';
        $request = $this->modForumGetForumDiscussionsPaginatedRequest($mod_forum_get_forum_discussions_paginated_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modForumGetForumDiscussionsPaginated'
     *
     * @param  \OpenAPI\Client\Model\ModForumGetForumDiscussionsPaginatedRequest $mod_forum_get_forum_discussions_paginated_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modForumGetForumDiscussionsPaginated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modForumGetForumDiscussionsPaginatedRequest($mod_forum_get_forum_discussions_paginated_request, string $contentType = self::contentTypes['modForumGetForumDiscussionsPaginated'][0])
    {

        // verify the required parameter 'mod_forum_get_forum_discussions_paginated_request' is set
        if ($mod_forum_get_forum_discussions_paginated_request === null || (is_array($mod_forum_get_forum_discussions_paginated_request) && count($mod_forum_get_forum_discussions_paginated_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_forum_get_forum_discussions_paginated_request when calling modForumGetForumDiscussionsPaginated'
            );
        }


        $resourcePath = '/mod_forum_get_forum_discussions_paginated';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_forum_get_forum_discussions_paginated_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_forum_get_forum_discussions_paginated_request));
            } else {
                $httpBody = $mod_forum_get_forum_discussions_paginated_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modForumGetForumsByCourses
     *
     * Returns a list of forum instances in a provided set of courses, if             no courses are provided then all the forum instances the user has access to will be             returned.
     *
     * @param  \OpenAPI\Client\Model\ModForumGetForumsByCoursesRequest $mod_forum_get_forums_by_courses_request mod_forum_get_forums_by_courses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modForumGetForumsByCourses'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modForumGetForumsByCourses($mod_forum_get_forums_by_courses_request, string $contentType = self::contentTypes['modForumGetForumsByCourses'][0])
    {
        list($response) = $this->modForumGetForumsByCoursesWithHttpInfo($mod_forum_get_forums_by_courses_request, $contentType);
        return $response;
    }

    /**
     * Operation modForumGetForumsByCoursesWithHttpInfo
     *
     * Returns a list of forum instances in a provided set of courses, if             no courses are provided then all the forum instances the user has access to will be             returned.
     *
     * @param  \OpenAPI\Client\Model\ModForumGetForumsByCoursesRequest $mod_forum_get_forums_by_courses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modForumGetForumsByCourses'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modForumGetForumsByCoursesWithHttpInfo($mod_forum_get_forums_by_courses_request, string $contentType = self::contentTypes['modForumGetForumsByCourses'][0])
    {
        $request = $this->modForumGetForumsByCoursesRequest($mod_forum_get_forums_by_courses_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modForumGetForumsByCoursesAsync
     *
     * Returns a list of forum instances in a provided set of courses, if             no courses are provided then all the forum instances the user has access to will be             returned.
     *
     * @param  \OpenAPI\Client\Model\ModForumGetForumsByCoursesRequest $mod_forum_get_forums_by_courses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modForumGetForumsByCourses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modForumGetForumsByCoursesAsync($mod_forum_get_forums_by_courses_request, string $contentType = self::contentTypes['modForumGetForumsByCourses'][0])
    {
        return $this->modForumGetForumsByCoursesAsyncWithHttpInfo($mod_forum_get_forums_by_courses_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modForumGetForumsByCoursesAsyncWithHttpInfo
     *
     * Returns a list of forum instances in a provided set of courses, if             no courses are provided then all the forum instances the user has access to will be             returned.
     *
     * @param  \OpenAPI\Client\Model\ModForumGetForumsByCoursesRequest $mod_forum_get_forums_by_courses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modForumGetForumsByCourses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modForumGetForumsByCoursesAsyncWithHttpInfo($mod_forum_get_forums_by_courses_request, string $contentType = self::contentTypes['modForumGetForumsByCourses'][0])
    {
        $returnType = 'object';
        $request = $this->modForumGetForumsByCoursesRequest($mod_forum_get_forums_by_courses_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modForumGetForumsByCourses'
     *
     * @param  \OpenAPI\Client\Model\ModForumGetForumsByCoursesRequest $mod_forum_get_forums_by_courses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modForumGetForumsByCourses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modForumGetForumsByCoursesRequest($mod_forum_get_forums_by_courses_request, string $contentType = self::contentTypes['modForumGetForumsByCourses'][0])
    {

        // verify the required parameter 'mod_forum_get_forums_by_courses_request' is set
        if ($mod_forum_get_forums_by_courses_request === null || (is_array($mod_forum_get_forums_by_courses_request) && count($mod_forum_get_forums_by_courses_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_forum_get_forums_by_courses_request when calling modForumGetForumsByCourses'
            );
        }


        $resourcePath = '/mod_forum_get_forums_by_courses';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_forum_get_forums_by_courses_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_forum_get_forums_by_courses_request));
            } else {
                $httpBody = $mod_forum_get_forums_by_courses_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modForumPrepareDraftAreaForPost
     *
     * Prepares a draft area for editing a post.
     *
     * @param  \OpenAPI\Client\Model\ModForumPrepareDraftAreaForPostRequest $mod_forum_prepare_draft_area_for_post_request mod_forum_prepare_draft_area_for_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modForumPrepareDraftAreaForPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModForumPrepareDraftAreaForPost200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modForumPrepareDraftAreaForPost($mod_forum_prepare_draft_area_for_post_request, string $contentType = self::contentTypes['modForumPrepareDraftAreaForPost'][0])
    {
        list($response) = $this->modForumPrepareDraftAreaForPostWithHttpInfo($mod_forum_prepare_draft_area_for_post_request, $contentType);
        return $response;
    }

    /**
     * Operation modForumPrepareDraftAreaForPostWithHttpInfo
     *
     * Prepares a draft area for editing a post.
     *
     * @param  \OpenAPI\Client\Model\ModForumPrepareDraftAreaForPostRequest $mod_forum_prepare_draft_area_for_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modForumPrepareDraftAreaForPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModForumPrepareDraftAreaForPost200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modForumPrepareDraftAreaForPostWithHttpInfo($mod_forum_prepare_draft_area_for_post_request, string $contentType = self::contentTypes['modForumPrepareDraftAreaForPost'][0])
    {
        $request = $this->modForumPrepareDraftAreaForPostRequest($mod_forum_prepare_draft_area_for_post_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModForumPrepareDraftAreaForPost200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModForumPrepareDraftAreaForPost200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModForumPrepareDraftAreaForPost200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModForumPrepareDraftAreaForPost200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModForumPrepareDraftAreaForPost200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modForumPrepareDraftAreaForPostAsync
     *
     * Prepares a draft area for editing a post.
     *
     * @param  \OpenAPI\Client\Model\ModForumPrepareDraftAreaForPostRequest $mod_forum_prepare_draft_area_for_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modForumPrepareDraftAreaForPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modForumPrepareDraftAreaForPostAsync($mod_forum_prepare_draft_area_for_post_request, string $contentType = self::contentTypes['modForumPrepareDraftAreaForPost'][0])
    {
        return $this->modForumPrepareDraftAreaForPostAsyncWithHttpInfo($mod_forum_prepare_draft_area_for_post_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modForumPrepareDraftAreaForPostAsyncWithHttpInfo
     *
     * Prepares a draft area for editing a post.
     *
     * @param  \OpenAPI\Client\Model\ModForumPrepareDraftAreaForPostRequest $mod_forum_prepare_draft_area_for_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modForumPrepareDraftAreaForPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modForumPrepareDraftAreaForPostAsyncWithHttpInfo($mod_forum_prepare_draft_area_for_post_request, string $contentType = self::contentTypes['modForumPrepareDraftAreaForPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModForumPrepareDraftAreaForPost200Response';
        $request = $this->modForumPrepareDraftAreaForPostRequest($mod_forum_prepare_draft_area_for_post_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modForumPrepareDraftAreaForPost'
     *
     * @param  \OpenAPI\Client\Model\ModForumPrepareDraftAreaForPostRequest $mod_forum_prepare_draft_area_for_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modForumPrepareDraftAreaForPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modForumPrepareDraftAreaForPostRequest($mod_forum_prepare_draft_area_for_post_request, string $contentType = self::contentTypes['modForumPrepareDraftAreaForPost'][0])
    {

        // verify the required parameter 'mod_forum_prepare_draft_area_for_post_request' is set
        if ($mod_forum_prepare_draft_area_for_post_request === null || (is_array($mod_forum_prepare_draft_area_for_post_request) && count($mod_forum_prepare_draft_area_for_post_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_forum_prepare_draft_area_for_post_request when calling modForumPrepareDraftAreaForPost'
            );
        }


        $resourcePath = '/mod_forum_prepare_draft_area_for_post';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_forum_prepare_draft_area_for_post_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_forum_prepare_draft_area_for_post_request));
            } else {
                $httpBody = $mod_forum_prepare_draft_area_for_post_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modForumSetLockState
     *
     * Set the lock state for the discussion
     *
     * @param  \OpenAPI\Client\Model\ModForumSetLockStateRequest $mod_forum_set_lock_state_request mod_forum_set_lock_state_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modForumSetLockState'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModForumSetLockState200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modForumSetLockState($mod_forum_set_lock_state_request, string $contentType = self::contentTypes['modForumSetLockState'][0])
    {
        list($response) = $this->modForumSetLockStateWithHttpInfo($mod_forum_set_lock_state_request, $contentType);
        return $response;
    }

    /**
     * Operation modForumSetLockStateWithHttpInfo
     *
     * Set the lock state for the discussion
     *
     * @param  \OpenAPI\Client\Model\ModForumSetLockStateRequest $mod_forum_set_lock_state_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modForumSetLockState'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModForumSetLockState200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modForumSetLockStateWithHttpInfo($mod_forum_set_lock_state_request, string $contentType = self::contentTypes['modForumSetLockState'][0])
    {
        $request = $this->modForumSetLockStateRequest($mod_forum_set_lock_state_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModForumSetLockState200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModForumSetLockState200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModForumSetLockState200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModForumSetLockState200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModForumSetLockState200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modForumSetLockStateAsync
     *
     * Set the lock state for the discussion
     *
     * @param  \OpenAPI\Client\Model\ModForumSetLockStateRequest $mod_forum_set_lock_state_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modForumSetLockState'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modForumSetLockStateAsync($mod_forum_set_lock_state_request, string $contentType = self::contentTypes['modForumSetLockState'][0])
    {
        return $this->modForumSetLockStateAsyncWithHttpInfo($mod_forum_set_lock_state_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modForumSetLockStateAsyncWithHttpInfo
     *
     * Set the lock state for the discussion
     *
     * @param  \OpenAPI\Client\Model\ModForumSetLockStateRequest $mod_forum_set_lock_state_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modForumSetLockState'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modForumSetLockStateAsyncWithHttpInfo($mod_forum_set_lock_state_request, string $contentType = self::contentTypes['modForumSetLockState'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModForumSetLockState200Response';
        $request = $this->modForumSetLockStateRequest($mod_forum_set_lock_state_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modForumSetLockState'
     *
     * @param  \OpenAPI\Client\Model\ModForumSetLockStateRequest $mod_forum_set_lock_state_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modForumSetLockState'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modForumSetLockStateRequest($mod_forum_set_lock_state_request, string $contentType = self::contentTypes['modForumSetLockState'][0])
    {

        // verify the required parameter 'mod_forum_set_lock_state_request' is set
        if ($mod_forum_set_lock_state_request === null || (is_array($mod_forum_set_lock_state_request) && count($mod_forum_set_lock_state_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_forum_set_lock_state_request when calling modForumSetLockState'
            );
        }


        $resourcePath = '/mod_forum_set_lock_state';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_forum_set_lock_state_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_forum_set_lock_state_request));
            } else {
                $httpBody = $mod_forum_set_lock_state_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modForumSetPinState
     *
     * Set the pin state
     *
     * @param  \OpenAPI\Client\Model\ModForumSetPinStateRequest $mod_forum_set_pin_state_request mod_forum_set_pin_state_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modForumSetPinState'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModForumSetPinState200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modForumSetPinState($mod_forum_set_pin_state_request, string $contentType = self::contentTypes['modForumSetPinState'][0])
    {
        list($response) = $this->modForumSetPinStateWithHttpInfo($mod_forum_set_pin_state_request, $contentType);
        return $response;
    }

    /**
     * Operation modForumSetPinStateWithHttpInfo
     *
     * Set the pin state
     *
     * @param  \OpenAPI\Client\Model\ModForumSetPinStateRequest $mod_forum_set_pin_state_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modForumSetPinState'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModForumSetPinState200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modForumSetPinStateWithHttpInfo($mod_forum_set_pin_state_request, string $contentType = self::contentTypes['modForumSetPinState'][0])
    {
        $request = $this->modForumSetPinStateRequest($mod_forum_set_pin_state_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModForumSetPinState200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModForumSetPinState200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModForumSetPinState200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModForumSetPinState200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModForumSetPinState200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modForumSetPinStateAsync
     *
     * Set the pin state
     *
     * @param  \OpenAPI\Client\Model\ModForumSetPinStateRequest $mod_forum_set_pin_state_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modForumSetPinState'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modForumSetPinStateAsync($mod_forum_set_pin_state_request, string $contentType = self::contentTypes['modForumSetPinState'][0])
    {
        return $this->modForumSetPinStateAsyncWithHttpInfo($mod_forum_set_pin_state_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modForumSetPinStateAsyncWithHttpInfo
     *
     * Set the pin state
     *
     * @param  \OpenAPI\Client\Model\ModForumSetPinStateRequest $mod_forum_set_pin_state_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modForumSetPinState'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modForumSetPinStateAsyncWithHttpInfo($mod_forum_set_pin_state_request, string $contentType = self::contentTypes['modForumSetPinState'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModForumSetPinState200Response';
        $request = $this->modForumSetPinStateRequest($mod_forum_set_pin_state_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modForumSetPinState'
     *
     * @param  \OpenAPI\Client\Model\ModForumSetPinStateRequest $mod_forum_set_pin_state_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modForumSetPinState'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modForumSetPinStateRequest($mod_forum_set_pin_state_request, string $contentType = self::contentTypes['modForumSetPinState'][0])
    {

        // verify the required parameter 'mod_forum_set_pin_state_request' is set
        if ($mod_forum_set_pin_state_request === null || (is_array($mod_forum_set_pin_state_request) && count($mod_forum_set_pin_state_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_forum_set_pin_state_request when calling modForumSetPinState'
            );
        }


        $resourcePath = '/mod_forum_set_pin_state';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_forum_set_pin_state_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_forum_set_pin_state_request));
            } else {
                $httpBody = $mod_forum_set_pin_state_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modForumSetSubscriptionState
     *
     * Set the subscription state
     *
     * @param  \OpenAPI\Client\Model\ModForumSetSubscriptionStateRequest $mod_forum_set_subscription_state_request mod_forum_set_subscription_state_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modForumSetSubscriptionState'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModForumSetSubscriptionState200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modForumSetSubscriptionState($mod_forum_set_subscription_state_request, string $contentType = self::contentTypes['modForumSetSubscriptionState'][0])
    {
        list($response) = $this->modForumSetSubscriptionStateWithHttpInfo($mod_forum_set_subscription_state_request, $contentType);
        return $response;
    }

    /**
     * Operation modForumSetSubscriptionStateWithHttpInfo
     *
     * Set the subscription state
     *
     * @param  \OpenAPI\Client\Model\ModForumSetSubscriptionStateRequest $mod_forum_set_subscription_state_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modForumSetSubscriptionState'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModForumSetSubscriptionState200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modForumSetSubscriptionStateWithHttpInfo($mod_forum_set_subscription_state_request, string $contentType = self::contentTypes['modForumSetSubscriptionState'][0])
    {
        $request = $this->modForumSetSubscriptionStateRequest($mod_forum_set_subscription_state_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModForumSetSubscriptionState200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModForumSetSubscriptionState200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModForumSetSubscriptionState200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModForumSetSubscriptionState200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModForumSetSubscriptionState200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modForumSetSubscriptionStateAsync
     *
     * Set the subscription state
     *
     * @param  \OpenAPI\Client\Model\ModForumSetSubscriptionStateRequest $mod_forum_set_subscription_state_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modForumSetSubscriptionState'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modForumSetSubscriptionStateAsync($mod_forum_set_subscription_state_request, string $contentType = self::contentTypes['modForumSetSubscriptionState'][0])
    {
        return $this->modForumSetSubscriptionStateAsyncWithHttpInfo($mod_forum_set_subscription_state_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modForumSetSubscriptionStateAsyncWithHttpInfo
     *
     * Set the subscription state
     *
     * @param  \OpenAPI\Client\Model\ModForumSetSubscriptionStateRequest $mod_forum_set_subscription_state_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modForumSetSubscriptionState'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modForumSetSubscriptionStateAsyncWithHttpInfo($mod_forum_set_subscription_state_request, string $contentType = self::contentTypes['modForumSetSubscriptionState'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModForumSetSubscriptionState200Response';
        $request = $this->modForumSetSubscriptionStateRequest($mod_forum_set_subscription_state_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modForumSetSubscriptionState'
     *
     * @param  \OpenAPI\Client\Model\ModForumSetSubscriptionStateRequest $mod_forum_set_subscription_state_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modForumSetSubscriptionState'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modForumSetSubscriptionStateRequest($mod_forum_set_subscription_state_request, string $contentType = self::contentTypes['modForumSetSubscriptionState'][0])
    {

        // verify the required parameter 'mod_forum_set_subscription_state_request' is set
        if ($mod_forum_set_subscription_state_request === null || (is_array($mod_forum_set_subscription_state_request) && count($mod_forum_set_subscription_state_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_forum_set_subscription_state_request when calling modForumSetSubscriptionState'
            );
        }


        $resourcePath = '/mod_forum_set_subscription_state';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_forum_set_subscription_state_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_forum_set_subscription_state_request));
            } else {
                $httpBody = $mod_forum_set_subscription_state_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modForumToggleFavouriteState
     *
     * Toggle the favourite state
     *
     * @param  \OpenAPI\Client\Model\ModForumToggleFavouriteStateRequest $mod_forum_toggle_favourite_state_request mod_forum_toggle_favourite_state_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modForumToggleFavouriteState'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModForumSetSubscriptionState200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modForumToggleFavouriteState($mod_forum_toggle_favourite_state_request, string $contentType = self::contentTypes['modForumToggleFavouriteState'][0])
    {
        list($response) = $this->modForumToggleFavouriteStateWithHttpInfo($mod_forum_toggle_favourite_state_request, $contentType);
        return $response;
    }

    /**
     * Operation modForumToggleFavouriteStateWithHttpInfo
     *
     * Toggle the favourite state
     *
     * @param  \OpenAPI\Client\Model\ModForumToggleFavouriteStateRequest $mod_forum_toggle_favourite_state_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modForumToggleFavouriteState'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModForumSetSubscriptionState200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modForumToggleFavouriteStateWithHttpInfo($mod_forum_toggle_favourite_state_request, string $contentType = self::contentTypes['modForumToggleFavouriteState'][0])
    {
        $request = $this->modForumToggleFavouriteStateRequest($mod_forum_toggle_favourite_state_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModForumSetSubscriptionState200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModForumSetSubscriptionState200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModForumSetSubscriptionState200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModForumSetSubscriptionState200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModForumSetSubscriptionState200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modForumToggleFavouriteStateAsync
     *
     * Toggle the favourite state
     *
     * @param  \OpenAPI\Client\Model\ModForumToggleFavouriteStateRequest $mod_forum_toggle_favourite_state_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modForumToggleFavouriteState'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modForumToggleFavouriteStateAsync($mod_forum_toggle_favourite_state_request, string $contentType = self::contentTypes['modForumToggleFavouriteState'][0])
    {
        return $this->modForumToggleFavouriteStateAsyncWithHttpInfo($mod_forum_toggle_favourite_state_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modForumToggleFavouriteStateAsyncWithHttpInfo
     *
     * Toggle the favourite state
     *
     * @param  \OpenAPI\Client\Model\ModForumToggleFavouriteStateRequest $mod_forum_toggle_favourite_state_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modForumToggleFavouriteState'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modForumToggleFavouriteStateAsyncWithHttpInfo($mod_forum_toggle_favourite_state_request, string $contentType = self::contentTypes['modForumToggleFavouriteState'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModForumSetSubscriptionState200Response';
        $request = $this->modForumToggleFavouriteStateRequest($mod_forum_toggle_favourite_state_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modForumToggleFavouriteState'
     *
     * @param  \OpenAPI\Client\Model\ModForumToggleFavouriteStateRequest $mod_forum_toggle_favourite_state_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modForumToggleFavouriteState'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modForumToggleFavouriteStateRequest($mod_forum_toggle_favourite_state_request, string $contentType = self::contentTypes['modForumToggleFavouriteState'][0])
    {

        // verify the required parameter 'mod_forum_toggle_favourite_state_request' is set
        if ($mod_forum_toggle_favourite_state_request === null || (is_array($mod_forum_toggle_favourite_state_request) && count($mod_forum_toggle_favourite_state_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_forum_toggle_favourite_state_request when calling modForumToggleFavouriteState'
            );
        }


        $resourcePath = '/mod_forum_toggle_favourite_state';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_forum_toggle_favourite_state_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_forum_toggle_favourite_state_request));
            } else {
                $httpBody = $mod_forum_toggle_favourite_state_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modForumUpdateDiscussionPost
     *
     * Updates a post or a discussion topic post.
     *
     * @param  \OpenAPI\Client\Model\ModForumUpdateDiscussionPostRequest $mod_forum_update_discussion_post_request mod_forum_update_discussion_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modForumUpdateDiscussionPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModForumUpdateDiscussionPost200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modForumUpdateDiscussionPost($mod_forum_update_discussion_post_request, string $contentType = self::contentTypes['modForumUpdateDiscussionPost'][0])
    {
        list($response) = $this->modForumUpdateDiscussionPostWithHttpInfo($mod_forum_update_discussion_post_request, $contentType);
        return $response;
    }

    /**
     * Operation modForumUpdateDiscussionPostWithHttpInfo
     *
     * Updates a post or a discussion topic post.
     *
     * @param  \OpenAPI\Client\Model\ModForumUpdateDiscussionPostRequest $mod_forum_update_discussion_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modForumUpdateDiscussionPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModForumUpdateDiscussionPost200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modForumUpdateDiscussionPostWithHttpInfo($mod_forum_update_discussion_post_request, string $contentType = self::contentTypes['modForumUpdateDiscussionPost'][0])
    {
        $request = $this->modForumUpdateDiscussionPostRequest($mod_forum_update_discussion_post_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModForumUpdateDiscussionPost200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModForumUpdateDiscussionPost200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModForumUpdateDiscussionPost200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModForumUpdateDiscussionPost200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModForumUpdateDiscussionPost200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modForumUpdateDiscussionPostAsync
     *
     * Updates a post or a discussion topic post.
     *
     * @param  \OpenAPI\Client\Model\ModForumUpdateDiscussionPostRequest $mod_forum_update_discussion_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modForumUpdateDiscussionPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modForumUpdateDiscussionPostAsync($mod_forum_update_discussion_post_request, string $contentType = self::contentTypes['modForumUpdateDiscussionPost'][0])
    {
        return $this->modForumUpdateDiscussionPostAsyncWithHttpInfo($mod_forum_update_discussion_post_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modForumUpdateDiscussionPostAsyncWithHttpInfo
     *
     * Updates a post or a discussion topic post.
     *
     * @param  \OpenAPI\Client\Model\ModForumUpdateDiscussionPostRequest $mod_forum_update_discussion_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modForumUpdateDiscussionPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modForumUpdateDiscussionPostAsyncWithHttpInfo($mod_forum_update_discussion_post_request, string $contentType = self::contentTypes['modForumUpdateDiscussionPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModForumUpdateDiscussionPost200Response';
        $request = $this->modForumUpdateDiscussionPostRequest($mod_forum_update_discussion_post_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modForumUpdateDiscussionPost'
     *
     * @param  \OpenAPI\Client\Model\ModForumUpdateDiscussionPostRequest $mod_forum_update_discussion_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modForumUpdateDiscussionPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modForumUpdateDiscussionPostRequest($mod_forum_update_discussion_post_request, string $contentType = self::contentTypes['modForumUpdateDiscussionPost'][0])
    {

        // verify the required parameter 'mod_forum_update_discussion_post_request' is set
        if ($mod_forum_update_discussion_post_request === null || (is_array($mod_forum_update_discussion_post_request) && count($mod_forum_update_discussion_post_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_forum_update_discussion_post_request when calling modForumUpdateDiscussionPost'
            );
        }


        $resourcePath = '/mod_forum_update_discussion_post';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_forum_update_discussion_post_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_forum_update_discussion_post_request));
            } else {
                $httpBody = $mod_forum_update_discussion_post_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modForumViewForum
     *
     * Trigger the course module viewed event and update the module completion status.
     *
     * @param  \OpenAPI\Client\Model\ModForumViewForumRequest $mod_forum_view_forum_request mod_forum_view_forum_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modForumViewForum'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modForumViewForum($mod_forum_view_forum_request, string $contentType = self::contentTypes['modForumViewForum'][0])
    {
        list($response) = $this->modForumViewForumWithHttpInfo($mod_forum_view_forum_request, $contentType);
        return $response;
    }

    /**
     * Operation modForumViewForumWithHttpInfo
     *
     * Trigger the course module viewed event and update the module completion status.
     *
     * @param  \OpenAPI\Client\Model\ModForumViewForumRequest $mod_forum_view_forum_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modForumViewForum'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modForumViewForumWithHttpInfo($mod_forum_view_forum_request, string $contentType = self::contentTypes['modForumViewForum'][0])
    {
        $request = $this->modForumViewForumRequest($mod_forum_view_forum_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modForumViewForumAsync
     *
     * Trigger the course module viewed event and update the module completion status.
     *
     * @param  \OpenAPI\Client\Model\ModForumViewForumRequest $mod_forum_view_forum_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modForumViewForum'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modForumViewForumAsync($mod_forum_view_forum_request, string $contentType = self::contentTypes['modForumViewForum'][0])
    {
        return $this->modForumViewForumAsyncWithHttpInfo($mod_forum_view_forum_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modForumViewForumAsyncWithHttpInfo
     *
     * Trigger the course module viewed event and update the module completion status.
     *
     * @param  \OpenAPI\Client\Model\ModForumViewForumRequest $mod_forum_view_forum_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modForumViewForum'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modForumViewForumAsyncWithHttpInfo($mod_forum_view_forum_request, string $contentType = self::contentTypes['modForumViewForum'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response';
        $request = $this->modForumViewForumRequest($mod_forum_view_forum_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modForumViewForum'
     *
     * @param  \OpenAPI\Client\Model\ModForumViewForumRequest $mod_forum_view_forum_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modForumViewForum'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modForumViewForumRequest($mod_forum_view_forum_request, string $contentType = self::contentTypes['modForumViewForum'][0])
    {

        // verify the required parameter 'mod_forum_view_forum_request' is set
        if ($mod_forum_view_forum_request === null || (is_array($mod_forum_view_forum_request) && count($mod_forum_view_forum_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_forum_view_forum_request when calling modForumViewForum'
            );
        }


        $resourcePath = '/mod_forum_view_forum';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_forum_view_forum_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_forum_view_forum_request));
            } else {
                $httpBody = $mod_forum_view_forum_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modForumViewForumDiscussion
     *
     * Trigger the forum discussion viewed event.
     *
     * @param  \OpenAPI\Client\Model\ModForumViewForumDiscussionRequest $mod_forum_view_forum_discussion_request mod_forum_view_forum_discussion_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modForumViewForumDiscussion'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modForumViewForumDiscussion($mod_forum_view_forum_discussion_request, string $contentType = self::contentTypes['modForumViewForumDiscussion'][0])
    {
        list($response) = $this->modForumViewForumDiscussionWithHttpInfo($mod_forum_view_forum_discussion_request, $contentType);
        return $response;
    }

    /**
     * Operation modForumViewForumDiscussionWithHttpInfo
     *
     * Trigger the forum discussion viewed event.
     *
     * @param  \OpenAPI\Client\Model\ModForumViewForumDiscussionRequest $mod_forum_view_forum_discussion_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modForumViewForumDiscussion'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modForumViewForumDiscussionWithHttpInfo($mod_forum_view_forum_discussion_request, string $contentType = self::contentTypes['modForumViewForumDiscussion'][0])
    {
        $request = $this->modForumViewForumDiscussionRequest($mod_forum_view_forum_discussion_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modForumViewForumDiscussionAsync
     *
     * Trigger the forum discussion viewed event.
     *
     * @param  \OpenAPI\Client\Model\ModForumViewForumDiscussionRequest $mod_forum_view_forum_discussion_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modForumViewForumDiscussion'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modForumViewForumDiscussionAsync($mod_forum_view_forum_discussion_request, string $contentType = self::contentTypes['modForumViewForumDiscussion'][0])
    {
        return $this->modForumViewForumDiscussionAsyncWithHttpInfo($mod_forum_view_forum_discussion_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modForumViewForumDiscussionAsyncWithHttpInfo
     *
     * Trigger the forum discussion viewed event.
     *
     * @param  \OpenAPI\Client\Model\ModForumViewForumDiscussionRequest $mod_forum_view_forum_discussion_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modForumViewForumDiscussion'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modForumViewForumDiscussionAsyncWithHttpInfo($mod_forum_view_forum_discussion_request, string $contentType = self::contentTypes['modForumViewForumDiscussion'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response';
        $request = $this->modForumViewForumDiscussionRequest($mod_forum_view_forum_discussion_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modForumViewForumDiscussion'
     *
     * @param  \OpenAPI\Client\Model\ModForumViewForumDiscussionRequest $mod_forum_view_forum_discussion_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modForumViewForumDiscussion'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modForumViewForumDiscussionRequest($mod_forum_view_forum_discussion_request, string $contentType = self::contentTypes['modForumViewForumDiscussion'][0])
    {

        // verify the required parameter 'mod_forum_view_forum_discussion_request' is set
        if ($mod_forum_view_forum_discussion_request === null || (is_array($mod_forum_view_forum_discussion_request) && count($mod_forum_view_forum_discussion_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_forum_view_forum_discussion_request when calling modForumViewForumDiscussion'
            );
        }


        $resourcePath = '/mod_forum_view_forum_discussion';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_forum_view_forum_discussion_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_forum_view_forum_discussion_request));
            } else {
                $httpBody = $mod_forum_view_forum_discussion_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
