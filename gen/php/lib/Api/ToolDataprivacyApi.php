<?php
/**
 * ToolDataprivacyApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * ToolDataprivacyApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ToolDataprivacyApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'toolDataprivacyApproveDataRequest' => [
            'application/json',
        ],
        'toolDataprivacyBulkApproveDataRequests' => [
            'application/json',
        ],
        'toolDataprivacyBulkDenyDataRequests' => [
            'application/json',
        ],
        'toolDataprivacyCancelDataRequest' => [
            'application/json',
        ],
        'toolDataprivacyConfirmContextsForDeletion' => [
            'application/json',
        ],
        'toolDataprivacyContactDpo' => [
            'application/json',
        ],
        'toolDataprivacyCreateCategoryForm' => [
            'application/json',
        ],
        'toolDataprivacyCreatePurposeForm' => [
            'application/json',
        ],
        'toolDataprivacyDeleteCategory' => [
            'application/json',
        ],
        'toolDataprivacyDeletePurpose' => [
            'application/json',
        ],
        'toolDataprivacyDenyDataRequest' => [
            'application/json',
        ],
        'toolDataprivacyGetActivityOptions' => [
            'application/json',
        ],
        'toolDataprivacyGetCategoryOptions' => [
            'application/json',
        ],
        'toolDataprivacyGetDataRequest' => [
            'application/json',
        ],
        'toolDataprivacyGetPurposeOptions' => [
            'application/json',
        ],
        'toolDataprivacyGetUsers' => [
            'application/json',
        ],
        'toolDataprivacyMarkComplete' => [
            'application/json',
        ],
        'toolDataprivacySetContextDefaults' => [
            'application/json',
        ],
        'toolDataprivacySetContextForm' => [
            'application/json',
        ],
        'toolDataprivacySetContextlevelForm' => [
            'application/json',
        ],
        'toolDataprivacySubmitSelectedCoursesForm' => [
            'application/json',
        ],
        'toolDataprivacyTreeExtraBranches' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation toolDataprivacyApproveDataRequest
     *
     * Approve a data request
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacyApproveDataRequestRequest $tool_dataprivacy_approve_data_request_request tool_dataprivacy_approve_data_request_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacyApproveDataRequest'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CoreContentbankRenameContent200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function toolDataprivacyApproveDataRequest($tool_dataprivacy_approve_data_request_request, string $contentType = self::contentTypes['toolDataprivacyApproveDataRequest'][0])
    {
        list($response) = $this->toolDataprivacyApproveDataRequestWithHttpInfo($tool_dataprivacy_approve_data_request_request, $contentType);
        return $response;
    }

    /**
     * Operation toolDataprivacyApproveDataRequestWithHttpInfo
     *
     * Approve a data request
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacyApproveDataRequestRequest $tool_dataprivacy_approve_data_request_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacyApproveDataRequest'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CoreContentbankRenameContent200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function toolDataprivacyApproveDataRequestWithHttpInfo($tool_dataprivacy_approve_data_request_request, string $contentType = self::contentTypes['toolDataprivacyApproveDataRequest'][0])
    {
        $request = $this->toolDataprivacyApproveDataRequestRequest($tool_dataprivacy_approve_data_request_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CoreContentbankRenameContent200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CoreContentbankRenameContent200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CoreContentbankRenameContent200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CoreContentbankRenameContent200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CoreContentbankRenameContent200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation toolDataprivacyApproveDataRequestAsync
     *
     * Approve a data request
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacyApproveDataRequestRequest $tool_dataprivacy_approve_data_request_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacyApproveDataRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function toolDataprivacyApproveDataRequestAsync($tool_dataprivacy_approve_data_request_request, string $contentType = self::contentTypes['toolDataprivacyApproveDataRequest'][0])
    {
        return $this->toolDataprivacyApproveDataRequestAsyncWithHttpInfo($tool_dataprivacy_approve_data_request_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation toolDataprivacyApproveDataRequestAsyncWithHttpInfo
     *
     * Approve a data request
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacyApproveDataRequestRequest $tool_dataprivacy_approve_data_request_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacyApproveDataRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function toolDataprivacyApproveDataRequestAsyncWithHttpInfo($tool_dataprivacy_approve_data_request_request, string $contentType = self::contentTypes['toolDataprivacyApproveDataRequest'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CoreContentbankRenameContent200Response';
        $request = $this->toolDataprivacyApproveDataRequestRequest($tool_dataprivacy_approve_data_request_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'toolDataprivacyApproveDataRequest'
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacyApproveDataRequestRequest $tool_dataprivacy_approve_data_request_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacyApproveDataRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function toolDataprivacyApproveDataRequestRequest($tool_dataprivacy_approve_data_request_request, string $contentType = self::contentTypes['toolDataprivacyApproveDataRequest'][0])
    {

        // verify the required parameter 'tool_dataprivacy_approve_data_request_request' is set
        if ($tool_dataprivacy_approve_data_request_request === null || (is_array($tool_dataprivacy_approve_data_request_request) && count($tool_dataprivacy_approve_data_request_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tool_dataprivacy_approve_data_request_request when calling toolDataprivacyApproveDataRequest'
            );
        }


        $resourcePath = '/tool_dataprivacy_approve_data_request';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($tool_dataprivacy_approve_data_request_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($tool_dataprivacy_approve_data_request_request));
            } else {
                $httpBody = $tool_dataprivacy_approve_data_request_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation toolDataprivacyBulkApproveDataRequests
     *
     * Bulk approve data requests
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacyBulkApproveDataRequestsRequest $tool_dataprivacy_bulk_approve_data_requests_request tool_dataprivacy_bulk_approve_data_requests_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacyBulkApproveDataRequests'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CoreContentbankRenameContent200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function toolDataprivacyBulkApproveDataRequests($tool_dataprivacy_bulk_approve_data_requests_request, string $contentType = self::contentTypes['toolDataprivacyBulkApproveDataRequests'][0])
    {
        list($response) = $this->toolDataprivacyBulkApproveDataRequestsWithHttpInfo($tool_dataprivacy_bulk_approve_data_requests_request, $contentType);
        return $response;
    }

    /**
     * Operation toolDataprivacyBulkApproveDataRequestsWithHttpInfo
     *
     * Bulk approve data requests
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacyBulkApproveDataRequestsRequest $tool_dataprivacy_bulk_approve_data_requests_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacyBulkApproveDataRequests'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CoreContentbankRenameContent200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function toolDataprivacyBulkApproveDataRequestsWithHttpInfo($tool_dataprivacy_bulk_approve_data_requests_request, string $contentType = self::contentTypes['toolDataprivacyBulkApproveDataRequests'][0])
    {
        $request = $this->toolDataprivacyBulkApproveDataRequestsRequest($tool_dataprivacy_bulk_approve_data_requests_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CoreContentbankRenameContent200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CoreContentbankRenameContent200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CoreContentbankRenameContent200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CoreContentbankRenameContent200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CoreContentbankRenameContent200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation toolDataprivacyBulkApproveDataRequestsAsync
     *
     * Bulk approve data requests
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacyBulkApproveDataRequestsRequest $tool_dataprivacy_bulk_approve_data_requests_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacyBulkApproveDataRequests'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function toolDataprivacyBulkApproveDataRequestsAsync($tool_dataprivacy_bulk_approve_data_requests_request, string $contentType = self::contentTypes['toolDataprivacyBulkApproveDataRequests'][0])
    {
        return $this->toolDataprivacyBulkApproveDataRequestsAsyncWithHttpInfo($tool_dataprivacy_bulk_approve_data_requests_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation toolDataprivacyBulkApproveDataRequestsAsyncWithHttpInfo
     *
     * Bulk approve data requests
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacyBulkApproveDataRequestsRequest $tool_dataprivacy_bulk_approve_data_requests_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacyBulkApproveDataRequests'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function toolDataprivacyBulkApproveDataRequestsAsyncWithHttpInfo($tool_dataprivacy_bulk_approve_data_requests_request, string $contentType = self::contentTypes['toolDataprivacyBulkApproveDataRequests'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CoreContentbankRenameContent200Response';
        $request = $this->toolDataprivacyBulkApproveDataRequestsRequest($tool_dataprivacy_bulk_approve_data_requests_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'toolDataprivacyBulkApproveDataRequests'
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacyBulkApproveDataRequestsRequest $tool_dataprivacy_bulk_approve_data_requests_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacyBulkApproveDataRequests'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function toolDataprivacyBulkApproveDataRequestsRequest($tool_dataprivacy_bulk_approve_data_requests_request, string $contentType = self::contentTypes['toolDataprivacyBulkApproveDataRequests'][0])
    {

        // verify the required parameter 'tool_dataprivacy_bulk_approve_data_requests_request' is set
        if ($tool_dataprivacy_bulk_approve_data_requests_request === null || (is_array($tool_dataprivacy_bulk_approve_data_requests_request) && count($tool_dataprivacy_bulk_approve_data_requests_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tool_dataprivacy_bulk_approve_data_requests_request when calling toolDataprivacyBulkApproveDataRequests'
            );
        }


        $resourcePath = '/tool_dataprivacy_bulk_approve_data_requests';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($tool_dataprivacy_bulk_approve_data_requests_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($tool_dataprivacy_bulk_approve_data_requests_request));
            } else {
                $httpBody = $tool_dataprivacy_bulk_approve_data_requests_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation toolDataprivacyBulkDenyDataRequests
     *
     * Bulk deny data requests
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacyBulkDenyDataRequestsRequest $tool_dataprivacy_bulk_deny_data_requests_request tool_dataprivacy_bulk_deny_data_requests_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacyBulkDenyDataRequests'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CoreContentbankRenameContent200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function toolDataprivacyBulkDenyDataRequests($tool_dataprivacy_bulk_deny_data_requests_request, string $contentType = self::contentTypes['toolDataprivacyBulkDenyDataRequests'][0])
    {
        list($response) = $this->toolDataprivacyBulkDenyDataRequestsWithHttpInfo($tool_dataprivacy_bulk_deny_data_requests_request, $contentType);
        return $response;
    }

    /**
     * Operation toolDataprivacyBulkDenyDataRequestsWithHttpInfo
     *
     * Bulk deny data requests
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacyBulkDenyDataRequestsRequest $tool_dataprivacy_bulk_deny_data_requests_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacyBulkDenyDataRequests'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CoreContentbankRenameContent200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function toolDataprivacyBulkDenyDataRequestsWithHttpInfo($tool_dataprivacy_bulk_deny_data_requests_request, string $contentType = self::contentTypes['toolDataprivacyBulkDenyDataRequests'][0])
    {
        $request = $this->toolDataprivacyBulkDenyDataRequestsRequest($tool_dataprivacy_bulk_deny_data_requests_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CoreContentbankRenameContent200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CoreContentbankRenameContent200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CoreContentbankRenameContent200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CoreContentbankRenameContent200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CoreContentbankRenameContent200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation toolDataprivacyBulkDenyDataRequestsAsync
     *
     * Bulk deny data requests
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacyBulkDenyDataRequestsRequest $tool_dataprivacy_bulk_deny_data_requests_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacyBulkDenyDataRequests'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function toolDataprivacyBulkDenyDataRequestsAsync($tool_dataprivacy_bulk_deny_data_requests_request, string $contentType = self::contentTypes['toolDataprivacyBulkDenyDataRequests'][0])
    {
        return $this->toolDataprivacyBulkDenyDataRequestsAsyncWithHttpInfo($tool_dataprivacy_bulk_deny_data_requests_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation toolDataprivacyBulkDenyDataRequestsAsyncWithHttpInfo
     *
     * Bulk deny data requests
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacyBulkDenyDataRequestsRequest $tool_dataprivacy_bulk_deny_data_requests_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacyBulkDenyDataRequests'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function toolDataprivacyBulkDenyDataRequestsAsyncWithHttpInfo($tool_dataprivacy_bulk_deny_data_requests_request, string $contentType = self::contentTypes['toolDataprivacyBulkDenyDataRequests'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CoreContentbankRenameContent200Response';
        $request = $this->toolDataprivacyBulkDenyDataRequestsRequest($tool_dataprivacy_bulk_deny_data_requests_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'toolDataprivacyBulkDenyDataRequests'
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacyBulkDenyDataRequestsRequest $tool_dataprivacy_bulk_deny_data_requests_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacyBulkDenyDataRequests'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function toolDataprivacyBulkDenyDataRequestsRequest($tool_dataprivacy_bulk_deny_data_requests_request, string $contentType = self::contentTypes['toolDataprivacyBulkDenyDataRequests'][0])
    {

        // verify the required parameter 'tool_dataprivacy_bulk_deny_data_requests_request' is set
        if ($tool_dataprivacy_bulk_deny_data_requests_request === null || (is_array($tool_dataprivacy_bulk_deny_data_requests_request) && count($tool_dataprivacy_bulk_deny_data_requests_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tool_dataprivacy_bulk_deny_data_requests_request when calling toolDataprivacyBulkDenyDataRequests'
            );
        }


        $resourcePath = '/tool_dataprivacy_bulk_deny_data_requests';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($tool_dataprivacy_bulk_deny_data_requests_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($tool_dataprivacy_bulk_deny_data_requests_request));
            } else {
                $httpBody = $tool_dataprivacy_bulk_deny_data_requests_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation toolDataprivacyCancelDataRequest
     *
     * Cancel the data request made by the user
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacyCancelDataRequestRequest $tool_dataprivacy_cancel_data_request_request tool_dataprivacy_cancel_data_request_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacyCancelDataRequest'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CoreContentbankRenameContent200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function toolDataprivacyCancelDataRequest($tool_dataprivacy_cancel_data_request_request, string $contentType = self::contentTypes['toolDataprivacyCancelDataRequest'][0])
    {
        list($response) = $this->toolDataprivacyCancelDataRequestWithHttpInfo($tool_dataprivacy_cancel_data_request_request, $contentType);
        return $response;
    }

    /**
     * Operation toolDataprivacyCancelDataRequestWithHttpInfo
     *
     * Cancel the data request made by the user
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacyCancelDataRequestRequest $tool_dataprivacy_cancel_data_request_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacyCancelDataRequest'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CoreContentbankRenameContent200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function toolDataprivacyCancelDataRequestWithHttpInfo($tool_dataprivacy_cancel_data_request_request, string $contentType = self::contentTypes['toolDataprivacyCancelDataRequest'][0])
    {
        $request = $this->toolDataprivacyCancelDataRequestRequest($tool_dataprivacy_cancel_data_request_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CoreContentbankRenameContent200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CoreContentbankRenameContent200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CoreContentbankRenameContent200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CoreContentbankRenameContent200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CoreContentbankRenameContent200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation toolDataprivacyCancelDataRequestAsync
     *
     * Cancel the data request made by the user
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacyCancelDataRequestRequest $tool_dataprivacy_cancel_data_request_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacyCancelDataRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function toolDataprivacyCancelDataRequestAsync($tool_dataprivacy_cancel_data_request_request, string $contentType = self::contentTypes['toolDataprivacyCancelDataRequest'][0])
    {
        return $this->toolDataprivacyCancelDataRequestAsyncWithHttpInfo($tool_dataprivacy_cancel_data_request_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation toolDataprivacyCancelDataRequestAsyncWithHttpInfo
     *
     * Cancel the data request made by the user
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacyCancelDataRequestRequest $tool_dataprivacy_cancel_data_request_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacyCancelDataRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function toolDataprivacyCancelDataRequestAsyncWithHttpInfo($tool_dataprivacy_cancel_data_request_request, string $contentType = self::contentTypes['toolDataprivacyCancelDataRequest'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CoreContentbankRenameContent200Response';
        $request = $this->toolDataprivacyCancelDataRequestRequest($tool_dataprivacy_cancel_data_request_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'toolDataprivacyCancelDataRequest'
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacyCancelDataRequestRequest $tool_dataprivacy_cancel_data_request_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacyCancelDataRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function toolDataprivacyCancelDataRequestRequest($tool_dataprivacy_cancel_data_request_request, string $contentType = self::contentTypes['toolDataprivacyCancelDataRequest'][0])
    {

        // verify the required parameter 'tool_dataprivacy_cancel_data_request_request' is set
        if ($tool_dataprivacy_cancel_data_request_request === null || (is_array($tool_dataprivacy_cancel_data_request_request) && count($tool_dataprivacy_cancel_data_request_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tool_dataprivacy_cancel_data_request_request when calling toolDataprivacyCancelDataRequest'
            );
        }


        $resourcePath = '/tool_dataprivacy_cancel_data_request';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($tool_dataprivacy_cancel_data_request_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($tool_dataprivacy_cancel_data_request_request));
            } else {
                $httpBody = $tool_dataprivacy_cancel_data_request_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation toolDataprivacyConfirmContextsForDeletion
     *
     * Mark the selected expired contexts as confirmed for deletion
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacyConfirmContextsForDeletionRequest $tool_dataprivacy_confirm_contexts_for_deletion_request tool_dataprivacy_confirm_contexts_for_deletion_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacyConfirmContextsForDeletion'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ToolDataprivacyConfirmContextsForDeletion200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function toolDataprivacyConfirmContextsForDeletion($tool_dataprivacy_confirm_contexts_for_deletion_request, string $contentType = self::contentTypes['toolDataprivacyConfirmContextsForDeletion'][0])
    {
        list($response) = $this->toolDataprivacyConfirmContextsForDeletionWithHttpInfo($tool_dataprivacy_confirm_contexts_for_deletion_request, $contentType);
        return $response;
    }

    /**
     * Operation toolDataprivacyConfirmContextsForDeletionWithHttpInfo
     *
     * Mark the selected expired contexts as confirmed for deletion
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacyConfirmContextsForDeletionRequest $tool_dataprivacy_confirm_contexts_for_deletion_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacyConfirmContextsForDeletion'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ToolDataprivacyConfirmContextsForDeletion200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function toolDataprivacyConfirmContextsForDeletionWithHttpInfo($tool_dataprivacy_confirm_contexts_for_deletion_request, string $contentType = self::contentTypes['toolDataprivacyConfirmContextsForDeletion'][0])
    {
        $request = $this->toolDataprivacyConfirmContextsForDeletionRequest($tool_dataprivacy_confirm_contexts_for_deletion_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ToolDataprivacyConfirmContextsForDeletion200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ToolDataprivacyConfirmContextsForDeletion200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ToolDataprivacyConfirmContextsForDeletion200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ToolDataprivacyConfirmContextsForDeletion200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ToolDataprivacyConfirmContextsForDeletion200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation toolDataprivacyConfirmContextsForDeletionAsync
     *
     * Mark the selected expired contexts as confirmed for deletion
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacyConfirmContextsForDeletionRequest $tool_dataprivacy_confirm_contexts_for_deletion_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacyConfirmContextsForDeletion'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function toolDataprivacyConfirmContextsForDeletionAsync($tool_dataprivacy_confirm_contexts_for_deletion_request, string $contentType = self::contentTypes['toolDataprivacyConfirmContextsForDeletion'][0])
    {
        return $this->toolDataprivacyConfirmContextsForDeletionAsyncWithHttpInfo($tool_dataprivacy_confirm_contexts_for_deletion_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation toolDataprivacyConfirmContextsForDeletionAsyncWithHttpInfo
     *
     * Mark the selected expired contexts as confirmed for deletion
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacyConfirmContextsForDeletionRequest $tool_dataprivacy_confirm_contexts_for_deletion_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacyConfirmContextsForDeletion'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function toolDataprivacyConfirmContextsForDeletionAsyncWithHttpInfo($tool_dataprivacy_confirm_contexts_for_deletion_request, string $contentType = self::contentTypes['toolDataprivacyConfirmContextsForDeletion'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ToolDataprivacyConfirmContextsForDeletion200Response';
        $request = $this->toolDataprivacyConfirmContextsForDeletionRequest($tool_dataprivacy_confirm_contexts_for_deletion_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'toolDataprivacyConfirmContextsForDeletion'
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacyConfirmContextsForDeletionRequest $tool_dataprivacy_confirm_contexts_for_deletion_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacyConfirmContextsForDeletion'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function toolDataprivacyConfirmContextsForDeletionRequest($tool_dataprivacy_confirm_contexts_for_deletion_request, string $contentType = self::contentTypes['toolDataprivacyConfirmContextsForDeletion'][0])
    {

        // verify the required parameter 'tool_dataprivacy_confirm_contexts_for_deletion_request' is set
        if ($tool_dataprivacy_confirm_contexts_for_deletion_request === null || (is_array($tool_dataprivacy_confirm_contexts_for_deletion_request) && count($tool_dataprivacy_confirm_contexts_for_deletion_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tool_dataprivacy_confirm_contexts_for_deletion_request when calling toolDataprivacyConfirmContextsForDeletion'
            );
        }


        $resourcePath = '/tool_dataprivacy_confirm_contexts_for_deletion';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($tool_dataprivacy_confirm_contexts_for_deletion_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($tool_dataprivacy_confirm_contexts_for_deletion_request));
            } else {
                $httpBody = $tool_dataprivacy_confirm_contexts_for_deletion_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation toolDataprivacyContactDpo
     *
     * Contact the site Data Protection Officer(s)
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacyContactDpoRequest $tool_dataprivacy_contact_dpo_request tool_dataprivacy_contact_dpo_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacyContactDpo'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CoreContentbankRenameContent200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function toolDataprivacyContactDpo($tool_dataprivacy_contact_dpo_request, string $contentType = self::contentTypes['toolDataprivacyContactDpo'][0])
    {
        list($response) = $this->toolDataprivacyContactDpoWithHttpInfo($tool_dataprivacy_contact_dpo_request, $contentType);
        return $response;
    }

    /**
     * Operation toolDataprivacyContactDpoWithHttpInfo
     *
     * Contact the site Data Protection Officer(s)
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacyContactDpoRequest $tool_dataprivacy_contact_dpo_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacyContactDpo'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CoreContentbankRenameContent200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function toolDataprivacyContactDpoWithHttpInfo($tool_dataprivacy_contact_dpo_request, string $contentType = self::contentTypes['toolDataprivacyContactDpo'][0])
    {
        $request = $this->toolDataprivacyContactDpoRequest($tool_dataprivacy_contact_dpo_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CoreContentbankRenameContent200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CoreContentbankRenameContent200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CoreContentbankRenameContent200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CoreContentbankRenameContent200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CoreContentbankRenameContent200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation toolDataprivacyContactDpoAsync
     *
     * Contact the site Data Protection Officer(s)
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacyContactDpoRequest $tool_dataprivacy_contact_dpo_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacyContactDpo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function toolDataprivacyContactDpoAsync($tool_dataprivacy_contact_dpo_request, string $contentType = self::contentTypes['toolDataprivacyContactDpo'][0])
    {
        return $this->toolDataprivacyContactDpoAsyncWithHttpInfo($tool_dataprivacy_contact_dpo_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation toolDataprivacyContactDpoAsyncWithHttpInfo
     *
     * Contact the site Data Protection Officer(s)
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacyContactDpoRequest $tool_dataprivacy_contact_dpo_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacyContactDpo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function toolDataprivacyContactDpoAsyncWithHttpInfo($tool_dataprivacy_contact_dpo_request, string $contentType = self::contentTypes['toolDataprivacyContactDpo'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CoreContentbankRenameContent200Response';
        $request = $this->toolDataprivacyContactDpoRequest($tool_dataprivacy_contact_dpo_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'toolDataprivacyContactDpo'
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacyContactDpoRequest $tool_dataprivacy_contact_dpo_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacyContactDpo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function toolDataprivacyContactDpoRequest($tool_dataprivacy_contact_dpo_request, string $contentType = self::contentTypes['toolDataprivacyContactDpo'][0])
    {

        // verify the required parameter 'tool_dataprivacy_contact_dpo_request' is set
        if ($tool_dataprivacy_contact_dpo_request === null || (is_array($tool_dataprivacy_contact_dpo_request) && count($tool_dataprivacy_contact_dpo_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tool_dataprivacy_contact_dpo_request when calling toolDataprivacyContactDpo'
            );
        }


        $resourcePath = '/tool_dataprivacy_contact_dpo';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($tool_dataprivacy_contact_dpo_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($tool_dataprivacy_contact_dpo_request));
            } else {
                $httpBody = $tool_dataprivacy_contact_dpo_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation toolDataprivacyCreateCategoryForm
     *
     * Adds a data category
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacyCreateCategoryFormRequest $tool_dataprivacy_create_category_form_request tool_dataprivacy_create_category_form_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacyCreateCategoryForm'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ToolDataprivacyCreateCategoryForm200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function toolDataprivacyCreateCategoryForm($tool_dataprivacy_create_category_form_request, string $contentType = self::contentTypes['toolDataprivacyCreateCategoryForm'][0])
    {
        list($response) = $this->toolDataprivacyCreateCategoryFormWithHttpInfo($tool_dataprivacy_create_category_form_request, $contentType);
        return $response;
    }

    /**
     * Operation toolDataprivacyCreateCategoryFormWithHttpInfo
     *
     * Adds a data category
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacyCreateCategoryFormRequest $tool_dataprivacy_create_category_form_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacyCreateCategoryForm'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ToolDataprivacyCreateCategoryForm200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function toolDataprivacyCreateCategoryFormWithHttpInfo($tool_dataprivacy_create_category_form_request, string $contentType = self::contentTypes['toolDataprivacyCreateCategoryForm'][0])
    {
        $request = $this->toolDataprivacyCreateCategoryFormRequest($tool_dataprivacy_create_category_form_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ToolDataprivacyCreateCategoryForm200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ToolDataprivacyCreateCategoryForm200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ToolDataprivacyCreateCategoryForm200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ToolDataprivacyCreateCategoryForm200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ToolDataprivacyCreateCategoryForm200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation toolDataprivacyCreateCategoryFormAsync
     *
     * Adds a data category
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacyCreateCategoryFormRequest $tool_dataprivacy_create_category_form_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacyCreateCategoryForm'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function toolDataprivacyCreateCategoryFormAsync($tool_dataprivacy_create_category_form_request, string $contentType = self::contentTypes['toolDataprivacyCreateCategoryForm'][0])
    {
        return $this->toolDataprivacyCreateCategoryFormAsyncWithHttpInfo($tool_dataprivacy_create_category_form_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation toolDataprivacyCreateCategoryFormAsyncWithHttpInfo
     *
     * Adds a data category
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacyCreateCategoryFormRequest $tool_dataprivacy_create_category_form_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacyCreateCategoryForm'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function toolDataprivacyCreateCategoryFormAsyncWithHttpInfo($tool_dataprivacy_create_category_form_request, string $contentType = self::contentTypes['toolDataprivacyCreateCategoryForm'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ToolDataprivacyCreateCategoryForm200Response';
        $request = $this->toolDataprivacyCreateCategoryFormRequest($tool_dataprivacy_create_category_form_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'toolDataprivacyCreateCategoryForm'
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacyCreateCategoryFormRequest $tool_dataprivacy_create_category_form_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacyCreateCategoryForm'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function toolDataprivacyCreateCategoryFormRequest($tool_dataprivacy_create_category_form_request, string $contentType = self::contentTypes['toolDataprivacyCreateCategoryForm'][0])
    {

        // verify the required parameter 'tool_dataprivacy_create_category_form_request' is set
        if ($tool_dataprivacy_create_category_form_request === null || (is_array($tool_dataprivacy_create_category_form_request) && count($tool_dataprivacy_create_category_form_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tool_dataprivacy_create_category_form_request when calling toolDataprivacyCreateCategoryForm'
            );
        }


        $resourcePath = '/tool_dataprivacy_create_category_form';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($tool_dataprivacy_create_category_form_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($tool_dataprivacy_create_category_form_request));
            } else {
                $httpBody = $tool_dataprivacy_create_category_form_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation toolDataprivacyCreatePurposeForm
     *
     * Adds a data purpose
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacyCreatePurposeFormRequest $tool_dataprivacy_create_purpose_form_request tool_dataprivacy_create_purpose_form_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacyCreatePurposeForm'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ToolDataprivacyCreatePurposeForm200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function toolDataprivacyCreatePurposeForm($tool_dataprivacy_create_purpose_form_request, string $contentType = self::contentTypes['toolDataprivacyCreatePurposeForm'][0])
    {
        list($response) = $this->toolDataprivacyCreatePurposeFormWithHttpInfo($tool_dataprivacy_create_purpose_form_request, $contentType);
        return $response;
    }

    /**
     * Operation toolDataprivacyCreatePurposeFormWithHttpInfo
     *
     * Adds a data purpose
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacyCreatePurposeFormRequest $tool_dataprivacy_create_purpose_form_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacyCreatePurposeForm'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ToolDataprivacyCreatePurposeForm200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function toolDataprivacyCreatePurposeFormWithHttpInfo($tool_dataprivacy_create_purpose_form_request, string $contentType = self::contentTypes['toolDataprivacyCreatePurposeForm'][0])
    {
        $request = $this->toolDataprivacyCreatePurposeFormRequest($tool_dataprivacy_create_purpose_form_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ToolDataprivacyCreatePurposeForm200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ToolDataprivacyCreatePurposeForm200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ToolDataprivacyCreatePurposeForm200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ToolDataprivacyCreatePurposeForm200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ToolDataprivacyCreatePurposeForm200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation toolDataprivacyCreatePurposeFormAsync
     *
     * Adds a data purpose
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacyCreatePurposeFormRequest $tool_dataprivacy_create_purpose_form_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacyCreatePurposeForm'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function toolDataprivacyCreatePurposeFormAsync($tool_dataprivacy_create_purpose_form_request, string $contentType = self::contentTypes['toolDataprivacyCreatePurposeForm'][0])
    {
        return $this->toolDataprivacyCreatePurposeFormAsyncWithHttpInfo($tool_dataprivacy_create_purpose_form_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation toolDataprivacyCreatePurposeFormAsyncWithHttpInfo
     *
     * Adds a data purpose
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacyCreatePurposeFormRequest $tool_dataprivacy_create_purpose_form_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacyCreatePurposeForm'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function toolDataprivacyCreatePurposeFormAsyncWithHttpInfo($tool_dataprivacy_create_purpose_form_request, string $contentType = self::contentTypes['toolDataprivacyCreatePurposeForm'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ToolDataprivacyCreatePurposeForm200Response';
        $request = $this->toolDataprivacyCreatePurposeFormRequest($tool_dataprivacy_create_purpose_form_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'toolDataprivacyCreatePurposeForm'
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacyCreatePurposeFormRequest $tool_dataprivacy_create_purpose_form_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacyCreatePurposeForm'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function toolDataprivacyCreatePurposeFormRequest($tool_dataprivacy_create_purpose_form_request, string $contentType = self::contentTypes['toolDataprivacyCreatePurposeForm'][0])
    {

        // verify the required parameter 'tool_dataprivacy_create_purpose_form_request' is set
        if ($tool_dataprivacy_create_purpose_form_request === null || (is_array($tool_dataprivacy_create_purpose_form_request) && count($tool_dataprivacy_create_purpose_form_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tool_dataprivacy_create_purpose_form_request when calling toolDataprivacyCreatePurposeForm'
            );
        }


        $resourcePath = '/tool_dataprivacy_create_purpose_form';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($tool_dataprivacy_create_purpose_form_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($tool_dataprivacy_create_purpose_form_request));
            } else {
                $httpBody = $tool_dataprivacy_create_purpose_form_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation toolDataprivacyDeleteCategory
     *
     * Deletes an existing data category
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacyDeleteCategoryRequest $tool_dataprivacy_delete_category_request tool_dataprivacy_delete_category_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacyDeleteCategory'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CoreContentbankRenameContent200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function toolDataprivacyDeleteCategory($tool_dataprivacy_delete_category_request, string $contentType = self::contentTypes['toolDataprivacyDeleteCategory'][0])
    {
        list($response) = $this->toolDataprivacyDeleteCategoryWithHttpInfo($tool_dataprivacy_delete_category_request, $contentType);
        return $response;
    }

    /**
     * Operation toolDataprivacyDeleteCategoryWithHttpInfo
     *
     * Deletes an existing data category
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacyDeleteCategoryRequest $tool_dataprivacy_delete_category_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacyDeleteCategory'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CoreContentbankRenameContent200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function toolDataprivacyDeleteCategoryWithHttpInfo($tool_dataprivacy_delete_category_request, string $contentType = self::contentTypes['toolDataprivacyDeleteCategory'][0])
    {
        $request = $this->toolDataprivacyDeleteCategoryRequest($tool_dataprivacy_delete_category_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CoreContentbankRenameContent200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CoreContentbankRenameContent200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CoreContentbankRenameContent200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CoreContentbankRenameContent200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CoreContentbankRenameContent200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation toolDataprivacyDeleteCategoryAsync
     *
     * Deletes an existing data category
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacyDeleteCategoryRequest $tool_dataprivacy_delete_category_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacyDeleteCategory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function toolDataprivacyDeleteCategoryAsync($tool_dataprivacy_delete_category_request, string $contentType = self::contentTypes['toolDataprivacyDeleteCategory'][0])
    {
        return $this->toolDataprivacyDeleteCategoryAsyncWithHttpInfo($tool_dataprivacy_delete_category_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation toolDataprivacyDeleteCategoryAsyncWithHttpInfo
     *
     * Deletes an existing data category
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacyDeleteCategoryRequest $tool_dataprivacy_delete_category_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacyDeleteCategory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function toolDataprivacyDeleteCategoryAsyncWithHttpInfo($tool_dataprivacy_delete_category_request, string $contentType = self::contentTypes['toolDataprivacyDeleteCategory'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CoreContentbankRenameContent200Response';
        $request = $this->toolDataprivacyDeleteCategoryRequest($tool_dataprivacy_delete_category_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'toolDataprivacyDeleteCategory'
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacyDeleteCategoryRequest $tool_dataprivacy_delete_category_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacyDeleteCategory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function toolDataprivacyDeleteCategoryRequest($tool_dataprivacy_delete_category_request, string $contentType = self::contentTypes['toolDataprivacyDeleteCategory'][0])
    {

        // verify the required parameter 'tool_dataprivacy_delete_category_request' is set
        if ($tool_dataprivacy_delete_category_request === null || (is_array($tool_dataprivacy_delete_category_request) && count($tool_dataprivacy_delete_category_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tool_dataprivacy_delete_category_request when calling toolDataprivacyDeleteCategory'
            );
        }


        $resourcePath = '/tool_dataprivacy_delete_category';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($tool_dataprivacy_delete_category_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($tool_dataprivacy_delete_category_request));
            } else {
                $httpBody = $tool_dataprivacy_delete_category_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation toolDataprivacyDeletePurpose
     *
     * Deletes an existing data purpose
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacyDeletePurposeRequest $tool_dataprivacy_delete_purpose_request tool_dataprivacy_delete_purpose_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacyDeletePurpose'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CoreContentbankRenameContent200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function toolDataprivacyDeletePurpose($tool_dataprivacy_delete_purpose_request, string $contentType = self::contentTypes['toolDataprivacyDeletePurpose'][0])
    {
        list($response) = $this->toolDataprivacyDeletePurposeWithHttpInfo($tool_dataprivacy_delete_purpose_request, $contentType);
        return $response;
    }

    /**
     * Operation toolDataprivacyDeletePurposeWithHttpInfo
     *
     * Deletes an existing data purpose
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacyDeletePurposeRequest $tool_dataprivacy_delete_purpose_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacyDeletePurpose'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CoreContentbankRenameContent200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function toolDataprivacyDeletePurposeWithHttpInfo($tool_dataprivacy_delete_purpose_request, string $contentType = self::contentTypes['toolDataprivacyDeletePurpose'][0])
    {
        $request = $this->toolDataprivacyDeletePurposeRequest($tool_dataprivacy_delete_purpose_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CoreContentbankRenameContent200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CoreContentbankRenameContent200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CoreContentbankRenameContent200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CoreContentbankRenameContent200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CoreContentbankRenameContent200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation toolDataprivacyDeletePurposeAsync
     *
     * Deletes an existing data purpose
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacyDeletePurposeRequest $tool_dataprivacy_delete_purpose_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacyDeletePurpose'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function toolDataprivacyDeletePurposeAsync($tool_dataprivacy_delete_purpose_request, string $contentType = self::contentTypes['toolDataprivacyDeletePurpose'][0])
    {
        return $this->toolDataprivacyDeletePurposeAsyncWithHttpInfo($tool_dataprivacy_delete_purpose_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation toolDataprivacyDeletePurposeAsyncWithHttpInfo
     *
     * Deletes an existing data purpose
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacyDeletePurposeRequest $tool_dataprivacy_delete_purpose_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacyDeletePurpose'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function toolDataprivacyDeletePurposeAsyncWithHttpInfo($tool_dataprivacy_delete_purpose_request, string $contentType = self::contentTypes['toolDataprivacyDeletePurpose'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CoreContentbankRenameContent200Response';
        $request = $this->toolDataprivacyDeletePurposeRequest($tool_dataprivacy_delete_purpose_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'toolDataprivacyDeletePurpose'
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacyDeletePurposeRequest $tool_dataprivacy_delete_purpose_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacyDeletePurpose'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function toolDataprivacyDeletePurposeRequest($tool_dataprivacy_delete_purpose_request, string $contentType = self::contentTypes['toolDataprivacyDeletePurpose'][0])
    {

        // verify the required parameter 'tool_dataprivacy_delete_purpose_request' is set
        if ($tool_dataprivacy_delete_purpose_request === null || (is_array($tool_dataprivacy_delete_purpose_request) && count($tool_dataprivacy_delete_purpose_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tool_dataprivacy_delete_purpose_request when calling toolDataprivacyDeletePurpose'
            );
        }


        $resourcePath = '/tool_dataprivacy_delete_purpose';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($tool_dataprivacy_delete_purpose_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($tool_dataprivacy_delete_purpose_request));
            } else {
                $httpBody = $tool_dataprivacy_delete_purpose_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation toolDataprivacyDenyDataRequest
     *
     * Deny a data request
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacyCancelDataRequestRequest $tool_dataprivacy_cancel_data_request_request tool_dataprivacy_cancel_data_request_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacyDenyDataRequest'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CoreContentbankRenameContent200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function toolDataprivacyDenyDataRequest($tool_dataprivacy_cancel_data_request_request, string $contentType = self::contentTypes['toolDataprivacyDenyDataRequest'][0])
    {
        list($response) = $this->toolDataprivacyDenyDataRequestWithHttpInfo($tool_dataprivacy_cancel_data_request_request, $contentType);
        return $response;
    }

    /**
     * Operation toolDataprivacyDenyDataRequestWithHttpInfo
     *
     * Deny a data request
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacyCancelDataRequestRequest $tool_dataprivacy_cancel_data_request_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacyDenyDataRequest'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CoreContentbankRenameContent200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function toolDataprivacyDenyDataRequestWithHttpInfo($tool_dataprivacy_cancel_data_request_request, string $contentType = self::contentTypes['toolDataprivacyDenyDataRequest'][0])
    {
        $request = $this->toolDataprivacyDenyDataRequestRequest($tool_dataprivacy_cancel_data_request_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CoreContentbankRenameContent200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CoreContentbankRenameContent200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CoreContentbankRenameContent200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CoreContentbankRenameContent200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CoreContentbankRenameContent200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation toolDataprivacyDenyDataRequestAsync
     *
     * Deny a data request
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacyCancelDataRequestRequest $tool_dataprivacy_cancel_data_request_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacyDenyDataRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function toolDataprivacyDenyDataRequestAsync($tool_dataprivacy_cancel_data_request_request, string $contentType = self::contentTypes['toolDataprivacyDenyDataRequest'][0])
    {
        return $this->toolDataprivacyDenyDataRequestAsyncWithHttpInfo($tool_dataprivacy_cancel_data_request_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation toolDataprivacyDenyDataRequestAsyncWithHttpInfo
     *
     * Deny a data request
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacyCancelDataRequestRequest $tool_dataprivacy_cancel_data_request_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacyDenyDataRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function toolDataprivacyDenyDataRequestAsyncWithHttpInfo($tool_dataprivacy_cancel_data_request_request, string $contentType = self::contentTypes['toolDataprivacyDenyDataRequest'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CoreContentbankRenameContent200Response';
        $request = $this->toolDataprivacyDenyDataRequestRequest($tool_dataprivacy_cancel_data_request_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'toolDataprivacyDenyDataRequest'
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacyCancelDataRequestRequest $tool_dataprivacy_cancel_data_request_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacyDenyDataRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function toolDataprivacyDenyDataRequestRequest($tool_dataprivacy_cancel_data_request_request, string $contentType = self::contentTypes['toolDataprivacyDenyDataRequest'][0])
    {

        // verify the required parameter 'tool_dataprivacy_cancel_data_request_request' is set
        if ($tool_dataprivacy_cancel_data_request_request === null || (is_array($tool_dataprivacy_cancel_data_request_request) && count($tool_dataprivacy_cancel_data_request_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tool_dataprivacy_cancel_data_request_request when calling toolDataprivacyDenyDataRequest'
            );
        }


        $resourcePath = '/tool_dataprivacy_deny_data_request';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($tool_dataprivacy_cancel_data_request_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($tool_dataprivacy_cancel_data_request_request));
            } else {
                $httpBody = $tool_dataprivacy_cancel_data_request_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation toolDataprivacyGetActivityOptions
     *
     * Fetches a list of activity options
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacyGetActivityOptionsRequest $tool_dataprivacy_get_activity_options_request tool_dataprivacy_get_activity_options_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacyGetActivityOptions'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ToolDataprivacyGetActivityOptions200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function toolDataprivacyGetActivityOptions($tool_dataprivacy_get_activity_options_request, string $contentType = self::contentTypes['toolDataprivacyGetActivityOptions'][0])
    {
        list($response) = $this->toolDataprivacyGetActivityOptionsWithHttpInfo($tool_dataprivacy_get_activity_options_request, $contentType);
        return $response;
    }

    /**
     * Operation toolDataprivacyGetActivityOptionsWithHttpInfo
     *
     * Fetches a list of activity options
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacyGetActivityOptionsRequest $tool_dataprivacy_get_activity_options_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacyGetActivityOptions'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ToolDataprivacyGetActivityOptions200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function toolDataprivacyGetActivityOptionsWithHttpInfo($tool_dataprivacy_get_activity_options_request, string $contentType = self::contentTypes['toolDataprivacyGetActivityOptions'][0])
    {
        $request = $this->toolDataprivacyGetActivityOptionsRequest($tool_dataprivacy_get_activity_options_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ToolDataprivacyGetActivityOptions200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ToolDataprivacyGetActivityOptions200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ToolDataprivacyGetActivityOptions200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ToolDataprivacyGetActivityOptions200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ToolDataprivacyGetActivityOptions200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation toolDataprivacyGetActivityOptionsAsync
     *
     * Fetches a list of activity options
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacyGetActivityOptionsRequest $tool_dataprivacy_get_activity_options_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacyGetActivityOptions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function toolDataprivacyGetActivityOptionsAsync($tool_dataprivacy_get_activity_options_request, string $contentType = self::contentTypes['toolDataprivacyGetActivityOptions'][0])
    {
        return $this->toolDataprivacyGetActivityOptionsAsyncWithHttpInfo($tool_dataprivacy_get_activity_options_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation toolDataprivacyGetActivityOptionsAsyncWithHttpInfo
     *
     * Fetches a list of activity options
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacyGetActivityOptionsRequest $tool_dataprivacy_get_activity_options_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacyGetActivityOptions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function toolDataprivacyGetActivityOptionsAsyncWithHttpInfo($tool_dataprivacy_get_activity_options_request, string $contentType = self::contentTypes['toolDataprivacyGetActivityOptions'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ToolDataprivacyGetActivityOptions200Response';
        $request = $this->toolDataprivacyGetActivityOptionsRequest($tool_dataprivacy_get_activity_options_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'toolDataprivacyGetActivityOptions'
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacyGetActivityOptionsRequest $tool_dataprivacy_get_activity_options_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacyGetActivityOptions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function toolDataprivacyGetActivityOptionsRequest($tool_dataprivacy_get_activity_options_request, string $contentType = self::contentTypes['toolDataprivacyGetActivityOptions'][0])
    {

        // verify the required parameter 'tool_dataprivacy_get_activity_options_request' is set
        if ($tool_dataprivacy_get_activity_options_request === null || (is_array($tool_dataprivacy_get_activity_options_request) && count($tool_dataprivacy_get_activity_options_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tool_dataprivacy_get_activity_options_request when calling toolDataprivacyGetActivityOptions'
            );
        }


        $resourcePath = '/tool_dataprivacy_get_activity_options';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($tool_dataprivacy_get_activity_options_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($tool_dataprivacy_get_activity_options_request));
            } else {
                $httpBody = $tool_dataprivacy_get_activity_options_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation toolDataprivacyGetCategoryOptions
     *
     * Fetches a list of data category options
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacyGetCategoryOptionsRequest $tool_dataprivacy_get_category_options_request tool_dataprivacy_get_category_options_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacyGetCategoryOptions'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ToolDataprivacyGetCategoryOptions200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function toolDataprivacyGetCategoryOptions($tool_dataprivacy_get_category_options_request, string $contentType = self::contentTypes['toolDataprivacyGetCategoryOptions'][0])
    {
        list($response) = $this->toolDataprivacyGetCategoryOptionsWithHttpInfo($tool_dataprivacy_get_category_options_request, $contentType);
        return $response;
    }

    /**
     * Operation toolDataprivacyGetCategoryOptionsWithHttpInfo
     *
     * Fetches a list of data category options
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacyGetCategoryOptionsRequest $tool_dataprivacy_get_category_options_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacyGetCategoryOptions'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ToolDataprivacyGetCategoryOptions200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function toolDataprivacyGetCategoryOptionsWithHttpInfo($tool_dataprivacy_get_category_options_request, string $contentType = self::contentTypes['toolDataprivacyGetCategoryOptions'][0])
    {
        $request = $this->toolDataprivacyGetCategoryOptionsRequest($tool_dataprivacy_get_category_options_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ToolDataprivacyGetCategoryOptions200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ToolDataprivacyGetCategoryOptions200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ToolDataprivacyGetCategoryOptions200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ToolDataprivacyGetCategoryOptions200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ToolDataprivacyGetCategoryOptions200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation toolDataprivacyGetCategoryOptionsAsync
     *
     * Fetches a list of data category options
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacyGetCategoryOptionsRequest $tool_dataprivacy_get_category_options_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacyGetCategoryOptions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function toolDataprivacyGetCategoryOptionsAsync($tool_dataprivacy_get_category_options_request, string $contentType = self::contentTypes['toolDataprivacyGetCategoryOptions'][0])
    {
        return $this->toolDataprivacyGetCategoryOptionsAsyncWithHttpInfo($tool_dataprivacy_get_category_options_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation toolDataprivacyGetCategoryOptionsAsyncWithHttpInfo
     *
     * Fetches a list of data category options
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacyGetCategoryOptionsRequest $tool_dataprivacy_get_category_options_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacyGetCategoryOptions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function toolDataprivacyGetCategoryOptionsAsyncWithHttpInfo($tool_dataprivacy_get_category_options_request, string $contentType = self::contentTypes['toolDataprivacyGetCategoryOptions'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ToolDataprivacyGetCategoryOptions200Response';
        $request = $this->toolDataprivacyGetCategoryOptionsRequest($tool_dataprivacy_get_category_options_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'toolDataprivacyGetCategoryOptions'
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacyGetCategoryOptionsRequest $tool_dataprivacy_get_category_options_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacyGetCategoryOptions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function toolDataprivacyGetCategoryOptionsRequest($tool_dataprivacy_get_category_options_request, string $contentType = self::contentTypes['toolDataprivacyGetCategoryOptions'][0])
    {

        // verify the required parameter 'tool_dataprivacy_get_category_options_request' is set
        if ($tool_dataprivacy_get_category_options_request === null || (is_array($tool_dataprivacy_get_category_options_request) && count($tool_dataprivacy_get_category_options_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tool_dataprivacy_get_category_options_request when calling toolDataprivacyGetCategoryOptions'
            );
        }


        $resourcePath = '/tool_dataprivacy_get_category_options';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($tool_dataprivacy_get_category_options_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($tool_dataprivacy_get_category_options_request));
            } else {
                $httpBody = $tool_dataprivacy_get_category_options_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation toolDataprivacyGetDataRequest
     *
     * Fetch the details of a user&#39;s data request
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacyCancelDataRequestRequest $tool_dataprivacy_cancel_data_request_request tool_dataprivacy_cancel_data_request_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacyGetDataRequest'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ToolDataprivacyGetDataRequest200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function toolDataprivacyGetDataRequest($tool_dataprivacy_cancel_data_request_request, string $contentType = self::contentTypes['toolDataprivacyGetDataRequest'][0])
    {
        list($response) = $this->toolDataprivacyGetDataRequestWithHttpInfo($tool_dataprivacy_cancel_data_request_request, $contentType);
        return $response;
    }

    /**
     * Operation toolDataprivacyGetDataRequestWithHttpInfo
     *
     * Fetch the details of a user&#39;s data request
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacyCancelDataRequestRequest $tool_dataprivacy_cancel_data_request_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacyGetDataRequest'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ToolDataprivacyGetDataRequest200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function toolDataprivacyGetDataRequestWithHttpInfo($tool_dataprivacy_cancel_data_request_request, string $contentType = self::contentTypes['toolDataprivacyGetDataRequest'][0])
    {
        $request = $this->toolDataprivacyGetDataRequestRequest($tool_dataprivacy_cancel_data_request_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ToolDataprivacyGetDataRequest200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ToolDataprivacyGetDataRequest200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ToolDataprivacyGetDataRequest200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ToolDataprivacyGetDataRequest200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ToolDataprivacyGetDataRequest200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation toolDataprivacyGetDataRequestAsync
     *
     * Fetch the details of a user&#39;s data request
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacyCancelDataRequestRequest $tool_dataprivacy_cancel_data_request_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacyGetDataRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function toolDataprivacyGetDataRequestAsync($tool_dataprivacy_cancel_data_request_request, string $contentType = self::contentTypes['toolDataprivacyGetDataRequest'][0])
    {
        return $this->toolDataprivacyGetDataRequestAsyncWithHttpInfo($tool_dataprivacy_cancel_data_request_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation toolDataprivacyGetDataRequestAsyncWithHttpInfo
     *
     * Fetch the details of a user&#39;s data request
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacyCancelDataRequestRequest $tool_dataprivacy_cancel_data_request_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacyGetDataRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function toolDataprivacyGetDataRequestAsyncWithHttpInfo($tool_dataprivacy_cancel_data_request_request, string $contentType = self::contentTypes['toolDataprivacyGetDataRequest'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ToolDataprivacyGetDataRequest200Response';
        $request = $this->toolDataprivacyGetDataRequestRequest($tool_dataprivacy_cancel_data_request_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'toolDataprivacyGetDataRequest'
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacyCancelDataRequestRequest $tool_dataprivacy_cancel_data_request_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacyGetDataRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function toolDataprivacyGetDataRequestRequest($tool_dataprivacy_cancel_data_request_request, string $contentType = self::contentTypes['toolDataprivacyGetDataRequest'][0])
    {

        // verify the required parameter 'tool_dataprivacy_cancel_data_request_request' is set
        if ($tool_dataprivacy_cancel_data_request_request === null || (is_array($tool_dataprivacy_cancel_data_request_request) && count($tool_dataprivacy_cancel_data_request_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tool_dataprivacy_cancel_data_request_request when calling toolDataprivacyGetDataRequest'
            );
        }


        $resourcePath = '/tool_dataprivacy_get_data_request';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($tool_dataprivacy_cancel_data_request_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($tool_dataprivacy_cancel_data_request_request));
            } else {
                $httpBody = $tool_dataprivacy_cancel_data_request_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation toolDataprivacyGetPurposeOptions
     *
     * Fetches a list of data storage purpose options
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacyGetCategoryOptionsRequest $tool_dataprivacy_get_category_options_request tool_dataprivacy_get_category_options_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacyGetPurposeOptions'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ToolDataprivacyGetPurposeOptions200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function toolDataprivacyGetPurposeOptions($tool_dataprivacy_get_category_options_request, string $contentType = self::contentTypes['toolDataprivacyGetPurposeOptions'][0])
    {
        list($response) = $this->toolDataprivacyGetPurposeOptionsWithHttpInfo($tool_dataprivacy_get_category_options_request, $contentType);
        return $response;
    }

    /**
     * Operation toolDataprivacyGetPurposeOptionsWithHttpInfo
     *
     * Fetches a list of data storage purpose options
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacyGetCategoryOptionsRequest $tool_dataprivacy_get_category_options_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacyGetPurposeOptions'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ToolDataprivacyGetPurposeOptions200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function toolDataprivacyGetPurposeOptionsWithHttpInfo($tool_dataprivacy_get_category_options_request, string $contentType = self::contentTypes['toolDataprivacyGetPurposeOptions'][0])
    {
        $request = $this->toolDataprivacyGetPurposeOptionsRequest($tool_dataprivacy_get_category_options_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ToolDataprivacyGetPurposeOptions200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ToolDataprivacyGetPurposeOptions200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ToolDataprivacyGetPurposeOptions200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ToolDataprivacyGetPurposeOptions200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ToolDataprivacyGetPurposeOptions200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation toolDataprivacyGetPurposeOptionsAsync
     *
     * Fetches a list of data storage purpose options
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacyGetCategoryOptionsRequest $tool_dataprivacy_get_category_options_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacyGetPurposeOptions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function toolDataprivacyGetPurposeOptionsAsync($tool_dataprivacy_get_category_options_request, string $contentType = self::contentTypes['toolDataprivacyGetPurposeOptions'][0])
    {
        return $this->toolDataprivacyGetPurposeOptionsAsyncWithHttpInfo($tool_dataprivacy_get_category_options_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation toolDataprivacyGetPurposeOptionsAsyncWithHttpInfo
     *
     * Fetches a list of data storage purpose options
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacyGetCategoryOptionsRequest $tool_dataprivacy_get_category_options_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacyGetPurposeOptions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function toolDataprivacyGetPurposeOptionsAsyncWithHttpInfo($tool_dataprivacy_get_category_options_request, string $contentType = self::contentTypes['toolDataprivacyGetPurposeOptions'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ToolDataprivacyGetPurposeOptions200Response';
        $request = $this->toolDataprivacyGetPurposeOptionsRequest($tool_dataprivacy_get_category_options_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'toolDataprivacyGetPurposeOptions'
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacyGetCategoryOptionsRequest $tool_dataprivacy_get_category_options_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacyGetPurposeOptions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function toolDataprivacyGetPurposeOptionsRequest($tool_dataprivacy_get_category_options_request, string $contentType = self::contentTypes['toolDataprivacyGetPurposeOptions'][0])
    {

        // verify the required parameter 'tool_dataprivacy_get_category_options_request' is set
        if ($tool_dataprivacy_get_category_options_request === null || (is_array($tool_dataprivacy_get_category_options_request) && count($tool_dataprivacy_get_category_options_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tool_dataprivacy_get_category_options_request when calling toolDataprivacyGetPurposeOptions'
            );
        }


        $resourcePath = '/tool_dataprivacy_get_purpose_options';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($tool_dataprivacy_get_category_options_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($tool_dataprivacy_get_category_options_request));
            } else {
                $httpBody = $tool_dataprivacy_get_category_options_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation toolDataprivacyGetUsers
     *
     * Fetches a list of users
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacyGetUsersRequest $tool_dataprivacy_get_users_request tool_dataprivacy_get_users_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacyGetUsers'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object|\OpenAPI\Client\Model\ErrorResponse
     */
    public function toolDataprivacyGetUsers($tool_dataprivacy_get_users_request, string $contentType = self::contentTypes['toolDataprivacyGetUsers'][0])
    {
        list($response) = $this->toolDataprivacyGetUsersWithHttpInfo($tool_dataprivacy_get_users_request, $contentType);
        return $response;
    }

    /**
     * Operation toolDataprivacyGetUsersWithHttpInfo
     *
     * Fetches a list of users
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacyGetUsersRequest $tool_dataprivacy_get_users_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacyGetUsers'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function toolDataprivacyGetUsersWithHttpInfo($tool_dataprivacy_get_users_request, string $contentType = self::contentTypes['toolDataprivacyGetUsers'][0])
    {
        $request = $this->toolDataprivacyGetUsersRequest($tool_dataprivacy_get_users_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation toolDataprivacyGetUsersAsync
     *
     * Fetches a list of users
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacyGetUsersRequest $tool_dataprivacy_get_users_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacyGetUsers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function toolDataprivacyGetUsersAsync($tool_dataprivacy_get_users_request, string $contentType = self::contentTypes['toolDataprivacyGetUsers'][0])
    {
        return $this->toolDataprivacyGetUsersAsyncWithHttpInfo($tool_dataprivacy_get_users_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation toolDataprivacyGetUsersAsyncWithHttpInfo
     *
     * Fetches a list of users
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacyGetUsersRequest $tool_dataprivacy_get_users_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacyGetUsers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function toolDataprivacyGetUsersAsyncWithHttpInfo($tool_dataprivacy_get_users_request, string $contentType = self::contentTypes['toolDataprivacyGetUsers'][0])
    {
        $returnType = 'object';
        $request = $this->toolDataprivacyGetUsersRequest($tool_dataprivacy_get_users_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'toolDataprivacyGetUsers'
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacyGetUsersRequest $tool_dataprivacy_get_users_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacyGetUsers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function toolDataprivacyGetUsersRequest($tool_dataprivacy_get_users_request, string $contentType = self::contentTypes['toolDataprivacyGetUsers'][0])
    {

        // verify the required parameter 'tool_dataprivacy_get_users_request' is set
        if ($tool_dataprivacy_get_users_request === null || (is_array($tool_dataprivacy_get_users_request) && count($tool_dataprivacy_get_users_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tool_dataprivacy_get_users_request when calling toolDataprivacyGetUsers'
            );
        }


        $resourcePath = '/tool_dataprivacy_get_users';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($tool_dataprivacy_get_users_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($tool_dataprivacy_get_users_request));
            } else {
                $httpBody = $tool_dataprivacy_get_users_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation toolDataprivacyMarkComplete
     *
     * Mark a user&#39;s general enquiry as complete
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacyCancelDataRequestRequest $tool_dataprivacy_cancel_data_request_request tool_dataprivacy_cancel_data_request_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacyMarkComplete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CoreContentbankRenameContent200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function toolDataprivacyMarkComplete($tool_dataprivacy_cancel_data_request_request, string $contentType = self::contentTypes['toolDataprivacyMarkComplete'][0])
    {
        list($response) = $this->toolDataprivacyMarkCompleteWithHttpInfo($tool_dataprivacy_cancel_data_request_request, $contentType);
        return $response;
    }

    /**
     * Operation toolDataprivacyMarkCompleteWithHttpInfo
     *
     * Mark a user&#39;s general enquiry as complete
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacyCancelDataRequestRequest $tool_dataprivacy_cancel_data_request_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacyMarkComplete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CoreContentbankRenameContent200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function toolDataprivacyMarkCompleteWithHttpInfo($tool_dataprivacy_cancel_data_request_request, string $contentType = self::contentTypes['toolDataprivacyMarkComplete'][0])
    {
        $request = $this->toolDataprivacyMarkCompleteRequest($tool_dataprivacy_cancel_data_request_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CoreContentbankRenameContent200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CoreContentbankRenameContent200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CoreContentbankRenameContent200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CoreContentbankRenameContent200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CoreContentbankRenameContent200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation toolDataprivacyMarkCompleteAsync
     *
     * Mark a user&#39;s general enquiry as complete
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacyCancelDataRequestRequest $tool_dataprivacy_cancel_data_request_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacyMarkComplete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function toolDataprivacyMarkCompleteAsync($tool_dataprivacy_cancel_data_request_request, string $contentType = self::contentTypes['toolDataprivacyMarkComplete'][0])
    {
        return $this->toolDataprivacyMarkCompleteAsyncWithHttpInfo($tool_dataprivacy_cancel_data_request_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation toolDataprivacyMarkCompleteAsyncWithHttpInfo
     *
     * Mark a user&#39;s general enquiry as complete
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacyCancelDataRequestRequest $tool_dataprivacy_cancel_data_request_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacyMarkComplete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function toolDataprivacyMarkCompleteAsyncWithHttpInfo($tool_dataprivacy_cancel_data_request_request, string $contentType = self::contentTypes['toolDataprivacyMarkComplete'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CoreContentbankRenameContent200Response';
        $request = $this->toolDataprivacyMarkCompleteRequest($tool_dataprivacy_cancel_data_request_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'toolDataprivacyMarkComplete'
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacyCancelDataRequestRequest $tool_dataprivacy_cancel_data_request_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacyMarkComplete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function toolDataprivacyMarkCompleteRequest($tool_dataprivacy_cancel_data_request_request, string $contentType = self::contentTypes['toolDataprivacyMarkComplete'][0])
    {

        // verify the required parameter 'tool_dataprivacy_cancel_data_request_request' is set
        if ($tool_dataprivacy_cancel_data_request_request === null || (is_array($tool_dataprivacy_cancel_data_request_request) && count($tool_dataprivacy_cancel_data_request_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tool_dataprivacy_cancel_data_request_request when calling toolDataprivacyMarkComplete'
            );
        }


        $resourcePath = '/tool_dataprivacy_mark_complete';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($tool_dataprivacy_cancel_data_request_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($tool_dataprivacy_cancel_data_request_request));
            } else {
                $httpBody = $tool_dataprivacy_cancel_data_request_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation toolDataprivacySetContextDefaults
     *
     * Updates the default category and purpose for a given context level (and optionally, a plugin)
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacySetContextDefaultsRequest $tool_dataprivacy_set_context_defaults_request tool_dataprivacy_set_context_defaults_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacySetContextDefaults'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ToolDataprivacySetContextDefaults200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function toolDataprivacySetContextDefaults($tool_dataprivacy_set_context_defaults_request, string $contentType = self::contentTypes['toolDataprivacySetContextDefaults'][0])
    {
        list($response) = $this->toolDataprivacySetContextDefaultsWithHttpInfo($tool_dataprivacy_set_context_defaults_request, $contentType);
        return $response;
    }

    /**
     * Operation toolDataprivacySetContextDefaultsWithHttpInfo
     *
     * Updates the default category and purpose for a given context level (and optionally, a plugin)
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacySetContextDefaultsRequest $tool_dataprivacy_set_context_defaults_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacySetContextDefaults'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ToolDataprivacySetContextDefaults200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function toolDataprivacySetContextDefaultsWithHttpInfo($tool_dataprivacy_set_context_defaults_request, string $contentType = self::contentTypes['toolDataprivacySetContextDefaults'][0])
    {
        $request = $this->toolDataprivacySetContextDefaultsRequest($tool_dataprivacy_set_context_defaults_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ToolDataprivacySetContextDefaults200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ToolDataprivacySetContextDefaults200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ToolDataprivacySetContextDefaults200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ToolDataprivacySetContextDefaults200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ToolDataprivacySetContextDefaults200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation toolDataprivacySetContextDefaultsAsync
     *
     * Updates the default category and purpose for a given context level (and optionally, a plugin)
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacySetContextDefaultsRequest $tool_dataprivacy_set_context_defaults_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacySetContextDefaults'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function toolDataprivacySetContextDefaultsAsync($tool_dataprivacy_set_context_defaults_request, string $contentType = self::contentTypes['toolDataprivacySetContextDefaults'][0])
    {
        return $this->toolDataprivacySetContextDefaultsAsyncWithHttpInfo($tool_dataprivacy_set_context_defaults_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation toolDataprivacySetContextDefaultsAsyncWithHttpInfo
     *
     * Updates the default category and purpose for a given context level (and optionally, a plugin)
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacySetContextDefaultsRequest $tool_dataprivacy_set_context_defaults_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacySetContextDefaults'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function toolDataprivacySetContextDefaultsAsyncWithHttpInfo($tool_dataprivacy_set_context_defaults_request, string $contentType = self::contentTypes['toolDataprivacySetContextDefaults'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ToolDataprivacySetContextDefaults200Response';
        $request = $this->toolDataprivacySetContextDefaultsRequest($tool_dataprivacy_set_context_defaults_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'toolDataprivacySetContextDefaults'
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacySetContextDefaultsRequest $tool_dataprivacy_set_context_defaults_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacySetContextDefaults'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function toolDataprivacySetContextDefaultsRequest($tool_dataprivacy_set_context_defaults_request, string $contentType = self::contentTypes['toolDataprivacySetContextDefaults'][0])
    {

        // verify the required parameter 'tool_dataprivacy_set_context_defaults_request' is set
        if ($tool_dataprivacy_set_context_defaults_request === null || (is_array($tool_dataprivacy_set_context_defaults_request) && count($tool_dataprivacy_set_context_defaults_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tool_dataprivacy_set_context_defaults_request when calling toolDataprivacySetContextDefaults'
            );
        }


        $resourcePath = '/tool_dataprivacy_set_context_defaults';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($tool_dataprivacy_set_context_defaults_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($tool_dataprivacy_set_context_defaults_request));
            } else {
                $httpBody = $tool_dataprivacy_set_context_defaults_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation toolDataprivacySetContextForm
     *
     * Sets purpose and category for a specific context
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacySetContextFormRequest $tool_dataprivacy_set_context_form_request tool_dataprivacy_set_context_form_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacySetContextForm'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ToolDataprivacySetContextForm200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function toolDataprivacySetContextForm($tool_dataprivacy_set_context_form_request, string $contentType = self::contentTypes['toolDataprivacySetContextForm'][0])
    {
        list($response) = $this->toolDataprivacySetContextFormWithHttpInfo($tool_dataprivacy_set_context_form_request, $contentType);
        return $response;
    }

    /**
     * Operation toolDataprivacySetContextFormWithHttpInfo
     *
     * Sets purpose and category for a specific context
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacySetContextFormRequest $tool_dataprivacy_set_context_form_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacySetContextForm'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ToolDataprivacySetContextForm200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function toolDataprivacySetContextFormWithHttpInfo($tool_dataprivacy_set_context_form_request, string $contentType = self::contentTypes['toolDataprivacySetContextForm'][0])
    {
        $request = $this->toolDataprivacySetContextFormRequest($tool_dataprivacy_set_context_form_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ToolDataprivacySetContextForm200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ToolDataprivacySetContextForm200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ToolDataprivacySetContextForm200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ToolDataprivacySetContextForm200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ToolDataprivacySetContextForm200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation toolDataprivacySetContextFormAsync
     *
     * Sets purpose and category for a specific context
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacySetContextFormRequest $tool_dataprivacy_set_context_form_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacySetContextForm'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function toolDataprivacySetContextFormAsync($tool_dataprivacy_set_context_form_request, string $contentType = self::contentTypes['toolDataprivacySetContextForm'][0])
    {
        return $this->toolDataprivacySetContextFormAsyncWithHttpInfo($tool_dataprivacy_set_context_form_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation toolDataprivacySetContextFormAsyncWithHttpInfo
     *
     * Sets purpose and category for a specific context
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacySetContextFormRequest $tool_dataprivacy_set_context_form_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacySetContextForm'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function toolDataprivacySetContextFormAsyncWithHttpInfo($tool_dataprivacy_set_context_form_request, string $contentType = self::contentTypes['toolDataprivacySetContextForm'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ToolDataprivacySetContextForm200Response';
        $request = $this->toolDataprivacySetContextFormRequest($tool_dataprivacy_set_context_form_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'toolDataprivacySetContextForm'
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacySetContextFormRequest $tool_dataprivacy_set_context_form_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacySetContextForm'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function toolDataprivacySetContextFormRequest($tool_dataprivacy_set_context_form_request, string $contentType = self::contentTypes['toolDataprivacySetContextForm'][0])
    {

        // verify the required parameter 'tool_dataprivacy_set_context_form_request' is set
        if ($tool_dataprivacy_set_context_form_request === null || (is_array($tool_dataprivacy_set_context_form_request) && count($tool_dataprivacy_set_context_form_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tool_dataprivacy_set_context_form_request when calling toolDataprivacySetContextForm'
            );
        }


        $resourcePath = '/tool_dataprivacy_set_context_form';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($tool_dataprivacy_set_context_form_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($tool_dataprivacy_set_context_form_request));
            } else {
                $httpBody = $tool_dataprivacy_set_context_form_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation toolDataprivacySetContextlevelForm
     *
     * Sets purpose and category across a context level
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacySetContextlevelFormRequest $tool_dataprivacy_set_contextlevel_form_request tool_dataprivacy_set_contextlevel_form_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacySetContextlevelForm'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ToolDataprivacySetContextlevelForm200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function toolDataprivacySetContextlevelForm($tool_dataprivacy_set_contextlevel_form_request, string $contentType = self::contentTypes['toolDataprivacySetContextlevelForm'][0])
    {
        list($response) = $this->toolDataprivacySetContextlevelFormWithHttpInfo($tool_dataprivacy_set_contextlevel_form_request, $contentType);
        return $response;
    }

    /**
     * Operation toolDataprivacySetContextlevelFormWithHttpInfo
     *
     * Sets purpose and category across a context level
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacySetContextlevelFormRequest $tool_dataprivacy_set_contextlevel_form_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacySetContextlevelForm'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ToolDataprivacySetContextlevelForm200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function toolDataprivacySetContextlevelFormWithHttpInfo($tool_dataprivacy_set_contextlevel_form_request, string $contentType = self::contentTypes['toolDataprivacySetContextlevelForm'][0])
    {
        $request = $this->toolDataprivacySetContextlevelFormRequest($tool_dataprivacy_set_contextlevel_form_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ToolDataprivacySetContextlevelForm200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ToolDataprivacySetContextlevelForm200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ToolDataprivacySetContextlevelForm200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ToolDataprivacySetContextlevelForm200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ToolDataprivacySetContextlevelForm200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation toolDataprivacySetContextlevelFormAsync
     *
     * Sets purpose and category across a context level
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacySetContextlevelFormRequest $tool_dataprivacy_set_contextlevel_form_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacySetContextlevelForm'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function toolDataprivacySetContextlevelFormAsync($tool_dataprivacy_set_contextlevel_form_request, string $contentType = self::contentTypes['toolDataprivacySetContextlevelForm'][0])
    {
        return $this->toolDataprivacySetContextlevelFormAsyncWithHttpInfo($tool_dataprivacy_set_contextlevel_form_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation toolDataprivacySetContextlevelFormAsyncWithHttpInfo
     *
     * Sets purpose and category across a context level
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacySetContextlevelFormRequest $tool_dataprivacy_set_contextlevel_form_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacySetContextlevelForm'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function toolDataprivacySetContextlevelFormAsyncWithHttpInfo($tool_dataprivacy_set_contextlevel_form_request, string $contentType = self::contentTypes['toolDataprivacySetContextlevelForm'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ToolDataprivacySetContextlevelForm200Response';
        $request = $this->toolDataprivacySetContextlevelFormRequest($tool_dataprivacy_set_contextlevel_form_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'toolDataprivacySetContextlevelForm'
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacySetContextlevelFormRequest $tool_dataprivacy_set_contextlevel_form_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacySetContextlevelForm'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function toolDataprivacySetContextlevelFormRequest($tool_dataprivacy_set_contextlevel_form_request, string $contentType = self::contentTypes['toolDataprivacySetContextlevelForm'][0])
    {

        // verify the required parameter 'tool_dataprivacy_set_contextlevel_form_request' is set
        if ($tool_dataprivacy_set_contextlevel_form_request === null || (is_array($tool_dataprivacy_set_contextlevel_form_request) && count($tool_dataprivacy_set_contextlevel_form_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tool_dataprivacy_set_contextlevel_form_request when calling toolDataprivacySetContextlevelForm'
            );
        }


        $resourcePath = '/tool_dataprivacy_set_contextlevel_form';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($tool_dataprivacy_set_contextlevel_form_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($tool_dataprivacy_set_contextlevel_form_request));
            } else {
                $httpBody = $tool_dataprivacy_set_contextlevel_form_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation toolDataprivacySubmitSelectedCoursesForm
     *
     * Save list of selected courses for export
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacySubmitSelectedCoursesFormRequest $tool_dataprivacy_submit_selected_courses_form_request tool_dataprivacy_submit_selected_courses_form_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacySubmitSelectedCoursesForm'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CoreContentbankRenameContent200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function toolDataprivacySubmitSelectedCoursesForm($tool_dataprivacy_submit_selected_courses_form_request, string $contentType = self::contentTypes['toolDataprivacySubmitSelectedCoursesForm'][0])
    {
        list($response) = $this->toolDataprivacySubmitSelectedCoursesFormWithHttpInfo($tool_dataprivacy_submit_selected_courses_form_request, $contentType);
        return $response;
    }

    /**
     * Operation toolDataprivacySubmitSelectedCoursesFormWithHttpInfo
     *
     * Save list of selected courses for export
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacySubmitSelectedCoursesFormRequest $tool_dataprivacy_submit_selected_courses_form_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacySubmitSelectedCoursesForm'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CoreContentbankRenameContent200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function toolDataprivacySubmitSelectedCoursesFormWithHttpInfo($tool_dataprivacy_submit_selected_courses_form_request, string $contentType = self::contentTypes['toolDataprivacySubmitSelectedCoursesForm'][0])
    {
        $request = $this->toolDataprivacySubmitSelectedCoursesFormRequest($tool_dataprivacy_submit_selected_courses_form_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CoreContentbankRenameContent200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CoreContentbankRenameContent200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CoreContentbankRenameContent200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CoreContentbankRenameContent200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CoreContentbankRenameContent200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation toolDataprivacySubmitSelectedCoursesFormAsync
     *
     * Save list of selected courses for export
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacySubmitSelectedCoursesFormRequest $tool_dataprivacy_submit_selected_courses_form_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacySubmitSelectedCoursesForm'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function toolDataprivacySubmitSelectedCoursesFormAsync($tool_dataprivacy_submit_selected_courses_form_request, string $contentType = self::contentTypes['toolDataprivacySubmitSelectedCoursesForm'][0])
    {
        return $this->toolDataprivacySubmitSelectedCoursesFormAsyncWithHttpInfo($tool_dataprivacy_submit_selected_courses_form_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation toolDataprivacySubmitSelectedCoursesFormAsyncWithHttpInfo
     *
     * Save list of selected courses for export
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacySubmitSelectedCoursesFormRequest $tool_dataprivacy_submit_selected_courses_form_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacySubmitSelectedCoursesForm'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function toolDataprivacySubmitSelectedCoursesFormAsyncWithHttpInfo($tool_dataprivacy_submit_selected_courses_form_request, string $contentType = self::contentTypes['toolDataprivacySubmitSelectedCoursesForm'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CoreContentbankRenameContent200Response';
        $request = $this->toolDataprivacySubmitSelectedCoursesFormRequest($tool_dataprivacy_submit_selected_courses_form_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'toolDataprivacySubmitSelectedCoursesForm'
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacySubmitSelectedCoursesFormRequest $tool_dataprivacy_submit_selected_courses_form_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacySubmitSelectedCoursesForm'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function toolDataprivacySubmitSelectedCoursesFormRequest($tool_dataprivacy_submit_selected_courses_form_request, string $contentType = self::contentTypes['toolDataprivacySubmitSelectedCoursesForm'][0])
    {

        // verify the required parameter 'tool_dataprivacy_submit_selected_courses_form_request' is set
        if ($tool_dataprivacy_submit_selected_courses_form_request === null || (is_array($tool_dataprivacy_submit_selected_courses_form_request) && count($tool_dataprivacy_submit_selected_courses_form_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tool_dataprivacy_submit_selected_courses_form_request when calling toolDataprivacySubmitSelectedCoursesForm'
            );
        }


        $resourcePath = '/tool_dataprivacy_submit_selected_courses_form';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($tool_dataprivacy_submit_selected_courses_form_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($tool_dataprivacy_submit_selected_courses_form_request));
            } else {
                $httpBody = $tool_dataprivacy_submit_selected_courses_form_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation toolDataprivacyTreeExtraBranches
     *
     * Return branches for the context tree
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacyTreeExtraBranchesRequest $tool_dataprivacy_tree_extra_branches_request tool_dataprivacy_tree_extra_branches_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacyTreeExtraBranches'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ToolDataprivacyTreeExtraBranches200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function toolDataprivacyTreeExtraBranches($tool_dataprivacy_tree_extra_branches_request, string $contentType = self::contentTypes['toolDataprivacyTreeExtraBranches'][0])
    {
        list($response) = $this->toolDataprivacyTreeExtraBranchesWithHttpInfo($tool_dataprivacy_tree_extra_branches_request, $contentType);
        return $response;
    }

    /**
     * Operation toolDataprivacyTreeExtraBranchesWithHttpInfo
     *
     * Return branches for the context tree
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacyTreeExtraBranchesRequest $tool_dataprivacy_tree_extra_branches_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacyTreeExtraBranches'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ToolDataprivacyTreeExtraBranches200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function toolDataprivacyTreeExtraBranchesWithHttpInfo($tool_dataprivacy_tree_extra_branches_request, string $contentType = self::contentTypes['toolDataprivacyTreeExtraBranches'][0])
    {
        $request = $this->toolDataprivacyTreeExtraBranchesRequest($tool_dataprivacy_tree_extra_branches_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ToolDataprivacyTreeExtraBranches200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ToolDataprivacyTreeExtraBranches200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ToolDataprivacyTreeExtraBranches200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ToolDataprivacyTreeExtraBranches200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ToolDataprivacyTreeExtraBranches200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation toolDataprivacyTreeExtraBranchesAsync
     *
     * Return branches for the context tree
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacyTreeExtraBranchesRequest $tool_dataprivacy_tree_extra_branches_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacyTreeExtraBranches'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function toolDataprivacyTreeExtraBranchesAsync($tool_dataprivacy_tree_extra_branches_request, string $contentType = self::contentTypes['toolDataprivacyTreeExtraBranches'][0])
    {
        return $this->toolDataprivacyTreeExtraBranchesAsyncWithHttpInfo($tool_dataprivacy_tree_extra_branches_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation toolDataprivacyTreeExtraBranchesAsyncWithHttpInfo
     *
     * Return branches for the context tree
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacyTreeExtraBranchesRequest $tool_dataprivacy_tree_extra_branches_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacyTreeExtraBranches'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function toolDataprivacyTreeExtraBranchesAsyncWithHttpInfo($tool_dataprivacy_tree_extra_branches_request, string $contentType = self::contentTypes['toolDataprivacyTreeExtraBranches'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ToolDataprivacyTreeExtraBranches200Response';
        $request = $this->toolDataprivacyTreeExtraBranchesRequest($tool_dataprivacy_tree_extra_branches_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'toolDataprivacyTreeExtraBranches'
     *
     * @param  \OpenAPI\Client\Model\ToolDataprivacyTreeExtraBranchesRequest $tool_dataprivacy_tree_extra_branches_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolDataprivacyTreeExtraBranches'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function toolDataprivacyTreeExtraBranchesRequest($tool_dataprivacy_tree_extra_branches_request, string $contentType = self::contentTypes['toolDataprivacyTreeExtraBranches'][0])
    {

        // verify the required parameter 'tool_dataprivacy_tree_extra_branches_request' is set
        if ($tool_dataprivacy_tree_extra_branches_request === null || (is_array($tool_dataprivacy_tree_extra_branches_request) && count($tool_dataprivacy_tree_extra_branches_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tool_dataprivacy_tree_extra_branches_request when calling toolDataprivacyTreeExtraBranches'
            );
        }


        $resourcePath = '/tool_dataprivacy_tree_extra_branches';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($tool_dataprivacy_tree_extra_branches_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($tool_dataprivacy_tree_extra_branches_request));
            } else {
                $httpBody = $tool_dataprivacy_tree_extra_branches_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
