<?php
/**
 * ModGlossaryApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * ModGlossaryApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ModGlossaryApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'modGlossaryAddEntry' => [
            'application/json',
        ],
        'modGlossaryDeleteEntry' => [
            'application/json',
        ],
        'modGlossaryGetAuthors' => [
            'application/json',
        ],
        'modGlossaryGetCategories' => [
            'application/json',
        ],
        'modGlossaryGetEntriesByAuthor' => [
            'application/json',
        ],
        'modGlossaryGetEntriesByAuthorId' => [
            'application/json',
        ],
        'modGlossaryGetEntriesByCategory' => [
            'application/json',
        ],
        'modGlossaryGetEntriesByDate' => [
            'application/json',
        ],
        'modGlossaryGetEntriesByLetter' => [
            'application/json',
        ],
        'modGlossaryGetEntriesBySearch' => [
            'application/json',
        ],
        'modGlossaryGetEntriesByTerm' => [
            'application/json',
        ],
        'modGlossaryGetEntriesToApprove' => [
            'application/json',
        ],
        'modGlossaryGetEntryById' => [
            'application/json',
        ],
        'modGlossaryGetGlossariesByCourses' => [
            'application/json',
        ],
        'modGlossaryPrepareEntryForEdition' => [
            'application/json',
        ],
        'modGlossaryUpdateEntry' => [
            'application/json',
        ],
        'modGlossaryViewEntry' => [
            'application/json',
        ],
        'modGlossaryViewGlossary' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation modGlossaryAddEntry
     *
     * Add a new entry to a given glossary
     *
     * @param  \OpenAPI\Client\Model\ModGlossaryAddEntryRequest $mod_glossary_add_entry_request mod_glossary_add_entry_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modGlossaryAddEntry'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModGlossaryAddEntry200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modGlossaryAddEntry($mod_glossary_add_entry_request, string $contentType = self::contentTypes['modGlossaryAddEntry'][0])
    {
        list($response) = $this->modGlossaryAddEntryWithHttpInfo($mod_glossary_add_entry_request, $contentType);
        return $response;
    }

    /**
     * Operation modGlossaryAddEntryWithHttpInfo
     *
     * Add a new entry to a given glossary
     *
     * @param  \OpenAPI\Client\Model\ModGlossaryAddEntryRequest $mod_glossary_add_entry_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modGlossaryAddEntry'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModGlossaryAddEntry200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modGlossaryAddEntryWithHttpInfo($mod_glossary_add_entry_request, string $contentType = self::contentTypes['modGlossaryAddEntry'][0])
    {
        $request = $this->modGlossaryAddEntryRequest($mod_glossary_add_entry_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModGlossaryAddEntry200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModGlossaryAddEntry200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModGlossaryAddEntry200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModGlossaryAddEntry200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModGlossaryAddEntry200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modGlossaryAddEntryAsync
     *
     * Add a new entry to a given glossary
     *
     * @param  \OpenAPI\Client\Model\ModGlossaryAddEntryRequest $mod_glossary_add_entry_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modGlossaryAddEntry'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modGlossaryAddEntryAsync($mod_glossary_add_entry_request, string $contentType = self::contentTypes['modGlossaryAddEntry'][0])
    {
        return $this->modGlossaryAddEntryAsyncWithHttpInfo($mod_glossary_add_entry_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modGlossaryAddEntryAsyncWithHttpInfo
     *
     * Add a new entry to a given glossary
     *
     * @param  \OpenAPI\Client\Model\ModGlossaryAddEntryRequest $mod_glossary_add_entry_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modGlossaryAddEntry'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modGlossaryAddEntryAsyncWithHttpInfo($mod_glossary_add_entry_request, string $contentType = self::contentTypes['modGlossaryAddEntry'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModGlossaryAddEntry200Response';
        $request = $this->modGlossaryAddEntryRequest($mod_glossary_add_entry_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modGlossaryAddEntry'
     *
     * @param  \OpenAPI\Client\Model\ModGlossaryAddEntryRequest $mod_glossary_add_entry_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modGlossaryAddEntry'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modGlossaryAddEntryRequest($mod_glossary_add_entry_request, string $contentType = self::contentTypes['modGlossaryAddEntry'][0])
    {

        // verify the required parameter 'mod_glossary_add_entry_request' is set
        if ($mod_glossary_add_entry_request === null || (is_array($mod_glossary_add_entry_request) && count($mod_glossary_add_entry_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_glossary_add_entry_request when calling modGlossaryAddEntry'
            );
        }


        $resourcePath = '/mod_glossary_add_entry';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_glossary_add_entry_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_glossary_add_entry_request));
            } else {
                $httpBody = $mod_glossary_add_entry_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modGlossaryDeleteEntry
     *
     * Delete the given entry from the glossary.
     *
     * @param  \OpenAPI\Client\Model\ModGlossaryDeleteEntryRequest $mod_glossary_delete_entry_request mod_glossary_delete_entry_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modGlossaryDeleteEntry'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CoreContentbankRenameContent200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modGlossaryDeleteEntry($mod_glossary_delete_entry_request, string $contentType = self::contentTypes['modGlossaryDeleteEntry'][0])
    {
        list($response) = $this->modGlossaryDeleteEntryWithHttpInfo($mod_glossary_delete_entry_request, $contentType);
        return $response;
    }

    /**
     * Operation modGlossaryDeleteEntryWithHttpInfo
     *
     * Delete the given entry from the glossary.
     *
     * @param  \OpenAPI\Client\Model\ModGlossaryDeleteEntryRequest $mod_glossary_delete_entry_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modGlossaryDeleteEntry'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CoreContentbankRenameContent200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modGlossaryDeleteEntryWithHttpInfo($mod_glossary_delete_entry_request, string $contentType = self::contentTypes['modGlossaryDeleteEntry'][0])
    {
        $request = $this->modGlossaryDeleteEntryRequest($mod_glossary_delete_entry_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CoreContentbankRenameContent200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CoreContentbankRenameContent200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CoreContentbankRenameContent200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CoreContentbankRenameContent200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CoreContentbankRenameContent200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modGlossaryDeleteEntryAsync
     *
     * Delete the given entry from the glossary.
     *
     * @param  \OpenAPI\Client\Model\ModGlossaryDeleteEntryRequest $mod_glossary_delete_entry_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modGlossaryDeleteEntry'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modGlossaryDeleteEntryAsync($mod_glossary_delete_entry_request, string $contentType = self::contentTypes['modGlossaryDeleteEntry'][0])
    {
        return $this->modGlossaryDeleteEntryAsyncWithHttpInfo($mod_glossary_delete_entry_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modGlossaryDeleteEntryAsyncWithHttpInfo
     *
     * Delete the given entry from the glossary.
     *
     * @param  \OpenAPI\Client\Model\ModGlossaryDeleteEntryRequest $mod_glossary_delete_entry_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modGlossaryDeleteEntry'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modGlossaryDeleteEntryAsyncWithHttpInfo($mod_glossary_delete_entry_request, string $contentType = self::contentTypes['modGlossaryDeleteEntry'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CoreContentbankRenameContent200Response';
        $request = $this->modGlossaryDeleteEntryRequest($mod_glossary_delete_entry_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modGlossaryDeleteEntry'
     *
     * @param  \OpenAPI\Client\Model\ModGlossaryDeleteEntryRequest $mod_glossary_delete_entry_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modGlossaryDeleteEntry'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modGlossaryDeleteEntryRequest($mod_glossary_delete_entry_request, string $contentType = self::contentTypes['modGlossaryDeleteEntry'][0])
    {

        // verify the required parameter 'mod_glossary_delete_entry_request' is set
        if ($mod_glossary_delete_entry_request === null || (is_array($mod_glossary_delete_entry_request) && count($mod_glossary_delete_entry_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_glossary_delete_entry_request when calling modGlossaryDeleteEntry'
            );
        }


        $resourcePath = '/mod_glossary_delete_entry';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_glossary_delete_entry_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_glossary_delete_entry_request));
            } else {
                $httpBody = $mod_glossary_delete_entry_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modGlossaryGetAuthors
     *
     * Get the authors.
     *
     * @param  \OpenAPI\Client\Model\ModGlossaryGetAuthorsRequest $mod_glossary_get_authors_request mod_glossary_get_authors_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modGlossaryGetAuthors'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModGlossaryGetAuthors200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modGlossaryGetAuthors($mod_glossary_get_authors_request, string $contentType = self::contentTypes['modGlossaryGetAuthors'][0])
    {
        list($response) = $this->modGlossaryGetAuthorsWithHttpInfo($mod_glossary_get_authors_request, $contentType);
        return $response;
    }

    /**
     * Operation modGlossaryGetAuthorsWithHttpInfo
     *
     * Get the authors.
     *
     * @param  \OpenAPI\Client\Model\ModGlossaryGetAuthorsRequest $mod_glossary_get_authors_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modGlossaryGetAuthors'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModGlossaryGetAuthors200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modGlossaryGetAuthorsWithHttpInfo($mod_glossary_get_authors_request, string $contentType = self::contentTypes['modGlossaryGetAuthors'][0])
    {
        $request = $this->modGlossaryGetAuthorsRequest($mod_glossary_get_authors_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModGlossaryGetAuthors200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModGlossaryGetAuthors200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModGlossaryGetAuthors200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModGlossaryGetAuthors200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModGlossaryGetAuthors200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modGlossaryGetAuthorsAsync
     *
     * Get the authors.
     *
     * @param  \OpenAPI\Client\Model\ModGlossaryGetAuthorsRequest $mod_glossary_get_authors_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modGlossaryGetAuthors'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modGlossaryGetAuthorsAsync($mod_glossary_get_authors_request, string $contentType = self::contentTypes['modGlossaryGetAuthors'][0])
    {
        return $this->modGlossaryGetAuthorsAsyncWithHttpInfo($mod_glossary_get_authors_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modGlossaryGetAuthorsAsyncWithHttpInfo
     *
     * Get the authors.
     *
     * @param  \OpenAPI\Client\Model\ModGlossaryGetAuthorsRequest $mod_glossary_get_authors_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modGlossaryGetAuthors'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modGlossaryGetAuthorsAsyncWithHttpInfo($mod_glossary_get_authors_request, string $contentType = self::contentTypes['modGlossaryGetAuthors'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModGlossaryGetAuthors200Response';
        $request = $this->modGlossaryGetAuthorsRequest($mod_glossary_get_authors_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modGlossaryGetAuthors'
     *
     * @param  \OpenAPI\Client\Model\ModGlossaryGetAuthorsRequest $mod_glossary_get_authors_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modGlossaryGetAuthors'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modGlossaryGetAuthorsRequest($mod_glossary_get_authors_request, string $contentType = self::contentTypes['modGlossaryGetAuthors'][0])
    {

        // verify the required parameter 'mod_glossary_get_authors_request' is set
        if ($mod_glossary_get_authors_request === null || (is_array($mod_glossary_get_authors_request) && count($mod_glossary_get_authors_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_glossary_get_authors_request when calling modGlossaryGetAuthors'
            );
        }


        $resourcePath = '/mod_glossary_get_authors';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_glossary_get_authors_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_glossary_get_authors_request));
            } else {
                $httpBody = $mod_glossary_get_authors_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modGlossaryGetCategories
     *
     * Get the categories.
     *
     * @param  \OpenAPI\Client\Model\ModGlossaryGetCategoriesRequest $mod_glossary_get_categories_request mod_glossary_get_categories_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modGlossaryGetCategories'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModGlossaryGetCategories200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modGlossaryGetCategories($mod_glossary_get_categories_request, string $contentType = self::contentTypes['modGlossaryGetCategories'][0])
    {
        list($response) = $this->modGlossaryGetCategoriesWithHttpInfo($mod_glossary_get_categories_request, $contentType);
        return $response;
    }

    /**
     * Operation modGlossaryGetCategoriesWithHttpInfo
     *
     * Get the categories.
     *
     * @param  \OpenAPI\Client\Model\ModGlossaryGetCategoriesRequest $mod_glossary_get_categories_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modGlossaryGetCategories'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModGlossaryGetCategories200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modGlossaryGetCategoriesWithHttpInfo($mod_glossary_get_categories_request, string $contentType = self::contentTypes['modGlossaryGetCategories'][0])
    {
        $request = $this->modGlossaryGetCategoriesRequest($mod_glossary_get_categories_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModGlossaryGetCategories200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModGlossaryGetCategories200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModGlossaryGetCategories200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModGlossaryGetCategories200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModGlossaryGetCategories200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modGlossaryGetCategoriesAsync
     *
     * Get the categories.
     *
     * @param  \OpenAPI\Client\Model\ModGlossaryGetCategoriesRequest $mod_glossary_get_categories_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modGlossaryGetCategories'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modGlossaryGetCategoriesAsync($mod_glossary_get_categories_request, string $contentType = self::contentTypes['modGlossaryGetCategories'][0])
    {
        return $this->modGlossaryGetCategoriesAsyncWithHttpInfo($mod_glossary_get_categories_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modGlossaryGetCategoriesAsyncWithHttpInfo
     *
     * Get the categories.
     *
     * @param  \OpenAPI\Client\Model\ModGlossaryGetCategoriesRequest $mod_glossary_get_categories_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modGlossaryGetCategories'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modGlossaryGetCategoriesAsyncWithHttpInfo($mod_glossary_get_categories_request, string $contentType = self::contentTypes['modGlossaryGetCategories'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModGlossaryGetCategories200Response';
        $request = $this->modGlossaryGetCategoriesRequest($mod_glossary_get_categories_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modGlossaryGetCategories'
     *
     * @param  \OpenAPI\Client\Model\ModGlossaryGetCategoriesRequest $mod_glossary_get_categories_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modGlossaryGetCategories'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modGlossaryGetCategoriesRequest($mod_glossary_get_categories_request, string $contentType = self::contentTypes['modGlossaryGetCategories'][0])
    {

        // verify the required parameter 'mod_glossary_get_categories_request' is set
        if ($mod_glossary_get_categories_request === null || (is_array($mod_glossary_get_categories_request) && count($mod_glossary_get_categories_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_glossary_get_categories_request when calling modGlossaryGetCategories'
            );
        }


        $resourcePath = '/mod_glossary_get_categories';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_glossary_get_categories_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_glossary_get_categories_request));
            } else {
                $httpBody = $mod_glossary_get_categories_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modGlossaryGetEntriesByAuthor
     *
     * Browse entries by author.
     *
     * @param  \OpenAPI\Client\Model\ModGlossaryGetEntriesByAuthorRequest $mod_glossary_get_entries_by_author_request mod_glossary_get_entries_by_author_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modGlossaryGetEntriesByAuthor'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModGlossaryGetEntriesByAuthor200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modGlossaryGetEntriesByAuthor($mod_glossary_get_entries_by_author_request, string $contentType = self::contentTypes['modGlossaryGetEntriesByAuthor'][0])
    {
        list($response) = $this->modGlossaryGetEntriesByAuthorWithHttpInfo($mod_glossary_get_entries_by_author_request, $contentType);
        return $response;
    }

    /**
     * Operation modGlossaryGetEntriesByAuthorWithHttpInfo
     *
     * Browse entries by author.
     *
     * @param  \OpenAPI\Client\Model\ModGlossaryGetEntriesByAuthorRequest $mod_glossary_get_entries_by_author_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modGlossaryGetEntriesByAuthor'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModGlossaryGetEntriesByAuthor200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modGlossaryGetEntriesByAuthorWithHttpInfo($mod_glossary_get_entries_by_author_request, string $contentType = self::contentTypes['modGlossaryGetEntriesByAuthor'][0])
    {
        $request = $this->modGlossaryGetEntriesByAuthorRequest($mod_glossary_get_entries_by_author_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModGlossaryGetEntriesByAuthor200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModGlossaryGetEntriesByAuthor200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModGlossaryGetEntriesByAuthor200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModGlossaryGetEntriesByAuthor200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModGlossaryGetEntriesByAuthor200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modGlossaryGetEntriesByAuthorAsync
     *
     * Browse entries by author.
     *
     * @param  \OpenAPI\Client\Model\ModGlossaryGetEntriesByAuthorRequest $mod_glossary_get_entries_by_author_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modGlossaryGetEntriesByAuthor'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modGlossaryGetEntriesByAuthorAsync($mod_glossary_get_entries_by_author_request, string $contentType = self::contentTypes['modGlossaryGetEntriesByAuthor'][0])
    {
        return $this->modGlossaryGetEntriesByAuthorAsyncWithHttpInfo($mod_glossary_get_entries_by_author_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modGlossaryGetEntriesByAuthorAsyncWithHttpInfo
     *
     * Browse entries by author.
     *
     * @param  \OpenAPI\Client\Model\ModGlossaryGetEntriesByAuthorRequest $mod_glossary_get_entries_by_author_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modGlossaryGetEntriesByAuthor'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modGlossaryGetEntriesByAuthorAsyncWithHttpInfo($mod_glossary_get_entries_by_author_request, string $contentType = self::contentTypes['modGlossaryGetEntriesByAuthor'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModGlossaryGetEntriesByAuthor200Response';
        $request = $this->modGlossaryGetEntriesByAuthorRequest($mod_glossary_get_entries_by_author_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modGlossaryGetEntriesByAuthor'
     *
     * @param  \OpenAPI\Client\Model\ModGlossaryGetEntriesByAuthorRequest $mod_glossary_get_entries_by_author_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modGlossaryGetEntriesByAuthor'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modGlossaryGetEntriesByAuthorRequest($mod_glossary_get_entries_by_author_request, string $contentType = self::contentTypes['modGlossaryGetEntriesByAuthor'][0])
    {

        // verify the required parameter 'mod_glossary_get_entries_by_author_request' is set
        if ($mod_glossary_get_entries_by_author_request === null || (is_array($mod_glossary_get_entries_by_author_request) && count($mod_glossary_get_entries_by_author_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_glossary_get_entries_by_author_request when calling modGlossaryGetEntriesByAuthor'
            );
        }


        $resourcePath = '/mod_glossary_get_entries_by_author';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_glossary_get_entries_by_author_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_glossary_get_entries_by_author_request));
            } else {
                $httpBody = $mod_glossary_get_entries_by_author_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modGlossaryGetEntriesByAuthorId
     *
     * Browse entries by author ID.
     *
     * @param  \OpenAPI\Client\Model\ModGlossaryGetEntriesByAuthorIdRequest $mod_glossary_get_entries_by_author_id_request mod_glossary_get_entries_by_author_id_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modGlossaryGetEntriesByAuthorId'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModGlossaryGetEntriesByAuthorId200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modGlossaryGetEntriesByAuthorId($mod_glossary_get_entries_by_author_id_request, string $contentType = self::contentTypes['modGlossaryGetEntriesByAuthorId'][0])
    {
        list($response) = $this->modGlossaryGetEntriesByAuthorIdWithHttpInfo($mod_glossary_get_entries_by_author_id_request, $contentType);
        return $response;
    }

    /**
     * Operation modGlossaryGetEntriesByAuthorIdWithHttpInfo
     *
     * Browse entries by author ID.
     *
     * @param  \OpenAPI\Client\Model\ModGlossaryGetEntriesByAuthorIdRequest $mod_glossary_get_entries_by_author_id_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modGlossaryGetEntriesByAuthorId'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModGlossaryGetEntriesByAuthorId200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modGlossaryGetEntriesByAuthorIdWithHttpInfo($mod_glossary_get_entries_by_author_id_request, string $contentType = self::contentTypes['modGlossaryGetEntriesByAuthorId'][0])
    {
        $request = $this->modGlossaryGetEntriesByAuthorIdRequest($mod_glossary_get_entries_by_author_id_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModGlossaryGetEntriesByAuthorId200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModGlossaryGetEntriesByAuthorId200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModGlossaryGetEntriesByAuthorId200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModGlossaryGetEntriesByAuthorId200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModGlossaryGetEntriesByAuthorId200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modGlossaryGetEntriesByAuthorIdAsync
     *
     * Browse entries by author ID.
     *
     * @param  \OpenAPI\Client\Model\ModGlossaryGetEntriesByAuthorIdRequest $mod_glossary_get_entries_by_author_id_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modGlossaryGetEntriesByAuthorId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modGlossaryGetEntriesByAuthorIdAsync($mod_glossary_get_entries_by_author_id_request, string $contentType = self::contentTypes['modGlossaryGetEntriesByAuthorId'][0])
    {
        return $this->modGlossaryGetEntriesByAuthorIdAsyncWithHttpInfo($mod_glossary_get_entries_by_author_id_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modGlossaryGetEntriesByAuthorIdAsyncWithHttpInfo
     *
     * Browse entries by author ID.
     *
     * @param  \OpenAPI\Client\Model\ModGlossaryGetEntriesByAuthorIdRequest $mod_glossary_get_entries_by_author_id_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modGlossaryGetEntriesByAuthorId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modGlossaryGetEntriesByAuthorIdAsyncWithHttpInfo($mod_glossary_get_entries_by_author_id_request, string $contentType = self::contentTypes['modGlossaryGetEntriesByAuthorId'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModGlossaryGetEntriesByAuthorId200Response';
        $request = $this->modGlossaryGetEntriesByAuthorIdRequest($mod_glossary_get_entries_by_author_id_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modGlossaryGetEntriesByAuthorId'
     *
     * @param  \OpenAPI\Client\Model\ModGlossaryGetEntriesByAuthorIdRequest $mod_glossary_get_entries_by_author_id_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modGlossaryGetEntriesByAuthorId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modGlossaryGetEntriesByAuthorIdRequest($mod_glossary_get_entries_by_author_id_request, string $contentType = self::contentTypes['modGlossaryGetEntriesByAuthorId'][0])
    {

        // verify the required parameter 'mod_glossary_get_entries_by_author_id_request' is set
        if ($mod_glossary_get_entries_by_author_id_request === null || (is_array($mod_glossary_get_entries_by_author_id_request) && count($mod_glossary_get_entries_by_author_id_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_glossary_get_entries_by_author_id_request when calling modGlossaryGetEntriesByAuthorId'
            );
        }


        $resourcePath = '/mod_glossary_get_entries_by_author_id';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_glossary_get_entries_by_author_id_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_glossary_get_entries_by_author_id_request));
            } else {
                $httpBody = $mod_glossary_get_entries_by_author_id_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modGlossaryGetEntriesByCategory
     *
     * Browse entries by category.
     *
     * @param  \OpenAPI\Client\Model\ModGlossaryGetEntriesByCategoryRequest $mod_glossary_get_entries_by_category_request mod_glossary_get_entries_by_category_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modGlossaryGetEntriesByCategory'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModGlossaryGetEntriesByCategory200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modGlossaryGetEntriesByCategory($mod_glossary_get_entries_by_category_request, string $contentType = self::contentTypes['modGlossaryGetEntriesByCategory'][0])
    {
        list($response) = $this->modGlossaryGetEntriesByCategoryWithHttpInfo($mod_glossary_get_entries_by_category_request, $contentType);
        return $response;
    }

    /**
     * Operation modGlossaryGetEntriesByCategoryWithHttpInfo
     *
     * Browse entries by category.
     *
     * @param  \OpenAPI\Client\Model\ModGlossaryGetEntriesByCategoryRequest $mod_glossary_get_entries_by_category_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modGlossaryGetEntriesByCategory'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModGlossaryGetEntriesByCategory200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modGlossaryGetEntriesByCategoryWithHttpInfo($mod_glossary_get_entries_by_category_request, string $contentType = self::contentTypes['modGlossaryGetEntriesByCategory'][0])
    {
        $request = $this->modGlossaryGetEntriesByCategoryRequest($mod_glossary_get_entries_by_category_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModGlossaryGetEntriesByCategory200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModGlossaryGetEntriesByCategory200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModGlossaryGetEntriesByCategory200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModGlossaryGetEntriesByCategory200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModGlossaryGetEntriesByCategory200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modGlossaryGetEntriesByCategoryAsync
     *
     * Browse entries by category.
     *
     * @param  \OpenAPI\Client\Model\ModGlossaryGetEntriesByCategoryRequest $mod_glossary_get_entries_by_category_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modGlossaryGetEntriesByCategory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modGlossaryGetEntriesByCategoryAsync($mod_glossary_get_entries_by_category_request, string $contentType = self::contentTypes['modGlossaryGetEntriesByCategory'][0])
    {
        return $this->modGlossaryGetEntriesByCategoryAsyncWithHttpInfo($mod_glossary_get_entries_by_category_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modGlossaryGetEntriesByCategoryAsyncWithHttpInfo
     *
     * Browse entries by category.
     *
     * @param  \OpenAPI\Client\Model\ModGlossaryGetEntriesByCategoryRequest $mod_glossary_get_entries_by_category_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modGlossaryGetEntriesByCategory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modGlossaryGetEntriesByCategoryAsyncWithHttpInfo($mod_glossary_get_entries_by_category_request, string $contentType = self::contentTypes['modGlossaryGetEntriesByCategory'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModGlossaryGetEntriesByCategory200Response';
        $request = $this->modGlossaryGetEntriesByCategoryRequest($mod_glossary_get_entries_by_category_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modGlossaryGetEntriesByCategory'
     *
     * @param  \OpenAPI\Client\Model\ModGlossaryGetEntriesByCategoryRequest $mod_glossary_get_entries_by_category_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modGlossaryGetEntriesByCategory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modGlossaryGetEntriesByCategoryRequest($mod_glossary_get_entries_by_category_request, string $contentType = self::contentTypes['modGlossaryGetEntriesByCategory'][0])
    {

        // verify the required parameter 'mod_glossary_get_entries_by_category_request' is set
        if ($mod_glossary_get_entries_by_category_request === null || (is_array($mod_glossary_get_entries_by_category_request) && count($mod_glossary_get_entries_by_category_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_glossary_get_entries_by_category_request when calling modGlossaryGetEntriesByCategory'
            );
        }


        $resourcePath = '/mod_glossary_get_entries_by_category';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_glossary_get_entries_by_category_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_glossary_get_entries_by_category_request));
            } else {
                $httpBody = $mod_glossary_get_entries_by_category_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modGlossaryGetEntriesByDate
     *
     * Browse entries by date.
     *
     * @param  \OpenAPI\Client\Model\ModGlossaryGetEntriesByDateRequest $mod_glossary_get_entries_by_date_request mod_glossary_get_entries_by_date_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modGlossaryGetEntriesByDate'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModGlossaryGetEntriesByAuthorId200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modGlossaryGetEntriesByDate($mod_glossary_get_entries_by_date_request, string $contentType = self::contentTypes['modGlossaryGetEntriesByDate'][0])
    {
        list($response) = $this->modGlossaryGetEntriesByDateWithHttpInfo($mod_glossary_get_entries_by_date_request, $contentType);
        return $response;
    }

    /**
     * Operation modGlossaryGetEntriesByDateWithHttpInfo
     *
     * Browse entries by date.
     *
     * @param  \OpenAPI\Client\Model\ModGlossaryGetEntriesByDateRequest $mod_glossary_get_entries_by_date_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modGlossaryGetEntriesByDate'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModGlossaryGetEntriesByAuthorId200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modGlossaryGetEntriesByDateWithHttpInfo($mod_glossary_get_entries_by_date_request, string $contentType = self::contentTypes['modGlossaryGetEntriesByDate'][0])
    {
        $request = $this->modGlossaryGetEntriesByDateRequest($mod_glossary_get_entries_by_date_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModGlossaryGetEntriesByAuthorId200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModGlossaryGetEntriesByAuthorId200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModGlossaryGetEntriesByAuthorId200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModGlossaryGetEntriesByAuthorId200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModGlossaryGetEntriesByAuthorId200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modGlossaryGetEntriesByDateAsync
     *
     * Browse entries by date.
     *
     * @param  \OpenAPI\Client\Model\ModGlossaryGetEntriesByDateRequest $mod_glossary_get_entries_by_date_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modGlossaryGetEntriesByDate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modGlossaryGetEntriesByDateAsync($mod_glossary_get_entries_by_date_request, string $contentType = self::contentTypes['modGlossaryGetEntriesByDate'][0])
    {
        return $this->modGlossaryGetEntriesByDateAsyncWithHttpInfo($mod_glossary_get_entries_by_date_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modGlossaryGetEntriesByDateAsyncWithHttpInfo
     *
     * Browse entries by date.
     *
     * @param  \OpenAPI\Client\Model\ModGlossaryGetEntriesByDateRequest $mod_glossary_get_entries_by_date_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modGlossaryGetEntriesByDate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modGlossaryGetEntriesByDateAsyncWithHttpInfo($mod_glossary_get_entries_by_date_request, string $contentType = self::contentTypes['modGlossaryGetEntriesByDate'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModGlossaryGetEntriesByAuthorId200Response';
        $request = $this->modGlossaryGetEntriesByDateRequest($mod_glossary_get_entries_by_date_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modGlossaryGetEntriesByDate'
     *
     * @param  \OpenAPI\Client\Model\ModGlossaryGetEntriesByDateRequest $mod_glossary_get_entries_by_date_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modGlossaryGetEntriesByDate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modGlossaryGetEntriesByDateRequest($mod_glossary_get_entries_by_date_request, string $contentType = self::contentTypes['modGlossaryGetEntriesByDate'][0])
    {

        // verify the required parameter 'mod_glossary_get_entries_by_date_request' is set
        if ($mod_glossary_get_entries_by_date_request === null || (is_array($mod_glossary_get_entries_by_date_request) && count($mod_glossary_get_entries_by_date_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_glossary_get_entries_by_date_request when calling modGlossaryGetEntriesByDate'
            );
        }


        $resourcePath = '/mod_glossary_get_entries_by_date';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_glossary_get_entries_by_date_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_glossary_get_entries_by_date_request));
            } else {
                $httpBody = $mod_glossary_get_entries_by_date_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modGlossaryGetEntriesByLetter
     *
     * Browse entries by letter.
     *
     * @param  \OpenAPI\Client\Model\ModGlossaryGetEntriesByLetterRequest $mod_glossary_get_entries_by_letter_request mod_glossary_get_entries_by_letter_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modGlossaryGetEntriesByLetter'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModGlossaryGetEntriesByAuthorId200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modGlossaryGetEntriesByLetter($mod_glossary_get_entries_by_letter_request, string $contentType = self::contentTypes['modGlossaryGetEntriesByLetter'][0])
    {
        list($response) = $this->modGlossaryGetEntriesByLetterWithHttpInfo($mod_glossary_get_entries_by_letter_request, $contentType);
        return $response;
    }

    /**
     * Operation modGlossaryGetEntriesByLetterWithHttpInfo
     *
     * Browse entries by letter.
     *
     * @param  \OpenAPI\Client\Model\ModGlossaryGetEntriesByLetterRequest $mod_glossary_get_entries_by_letter_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modGlossaryGetEntriesByLetter'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModGlossaryGetEntriesByAuthorId200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modGlossaryGetEntriesByLetterWithHttpInfo($mod_glossary_get_entries_by_letter_request, string $contentType = self::contentTypes['modGlossaryGetEntriesByLetter'][0])
    {
        $request = $this->modGlossaryGetEntriesByLetterRequest($mod_glossary_get_entries_by_letter_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModGlossaryGetEntriesByAuthorId200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModGlossaryGetEntriesByAuthorId200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModGlossaryGetEntriesByAuthorId200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModGlossaryGetEntriesByAuthorId200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModGlossaryGetEntriesByAuthorId200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modGlossaryGetEntriesByLetterAsync
     *
     * Browse entries by letter.
     *
     * @param  \OpenAPI\Client\Model\ModGlossaryGetEntriesByLetterRequest $mod_glossary_get_entries_by_letter_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modGlossaryGetEntriesByLetter'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modGlossaryGetEntriesByLetterAsync($mod_glossary_get_entries_by_letter_request, string $contentType = self::contentTypes['modGlossaryGetEntriesByLetter'][0])
    {
        return $this->modGlossaryGetEntriesByLetterAsyncWithHttpInfo($mod_glossary_get_entries_by_letter_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modGlossaryGetEntriesByLetterAsyncWithHttpInfo
     *
     * Browse entries by letter.
     *
     * @param  \OpenAPI\Client\Model\ModGlossaryGetEntriesByLetterRequest $mod_glossary_get_entries_by_letter_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modGlossaryGetEntriesByLetter'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modGlossaryGetEntriesByLetterAsyncWithHttpInfo($mod_glossary_get_entries_by_letter_request, string $contentType = self::contentTypes['modGlossaryGetEntriesByLetter'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModGlossaryGetEntriesByAuthorId200Response';
        $request = $this->modGlossaryGetEntriesByLetterRequest($mod_glossary_get_entries_by_letter_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modGlossaryGetEntriesByLetter'
     *
     * @param  \OpenAPI\Client\Model\ModGlossaryGetEntriesByLetterRequest $mod_glossary_get_entries_by_letter_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modGlossaryGetEntriesByLetter'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modGlossaryGetEntriesByLetterRequest($mod_glossary_get_entries_by_letter_request, string $contentType = self::contentTypes['modGlossaryGetEntriesByLetter'][0])
    {

        // verify the required parameter 'mod_glossary_get_entries_by_letter_request' is set
        if ($mod_glossary_get_entries_by_letter_request === null || (is_array($mod_glossary_get_entries_by_letter_request) && count($mod_glossary_get_entries_by_letter_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_glossary_get_entries_by_letter_request when calling modGlossaryGetEntriesByLetter'
            );
        }


        $resourcePath = '/mod_glossary_get_entries_by_letter';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_glossary_get_entries_by_letter_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_glossary_get_entries_by_letter_request));
            } else {
                $httpBody = $mod_glossary_get_entries_by_letter_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modGlossaryGetEntriesBySearch
     *
     * Browse entries by search query.
     *
     * @param  \OpenAPI\Client\Model\ModGlossaryGetEntriesBySearchRequest $mod_glossary_get_entries_by_search_request mod_glossary_get_entries_by_search_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modGlossaryGetEntriesBySearch'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModGlossaryGetEntriesByAuthorId200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modGlossaryGetEntriesBySearch($mod_glossary_get_entries_by_search_request, string $contentType = self::contentTypes['modGlossaryGetEntriesBySearch'][0])
    {
        list($response) = $this->modGlossaryGetEntriesBySearchWithHttpInfo($mod_glossary_get_entries_by_search_request, $contentType);
        return $response;
    }

    /**
     * Operation modGlossaryGetEntriesBySearchWithHttpInfo
     *
     * Browse entries by search query.
     *
     * @param  \OpenAPI\Client\Model\ModGlossaryGetEntriesBySearchRequest $mod_glossary_get_entries_by_search_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modGlossaryGetEntriesBySearch'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModGlossaryGetEntriesByAuthorId200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modGlossaryGetEntriesBySearchWithHttpInfo($mod_glossary_get_entries_by_search_request, string $contentType = self::contentTypes['modGlossaryGetEntriesBySearch'][0])
    {
        $request = $this->modGlossaryGetEntriesBySearchRequest($mod_glossary_get_entries_by_search_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModGlossaryGetEntriesByAuthorId200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModGlossaryGetEntriesByAuthorId200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModGlossaryGetEntriesByAuthorId200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModGlossaryGetEntriesByAuthorId200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModGlossaryGetEntriesByAuthorId200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modGlossaryGetEntriesBySearchAsync
     *
     * Browse entries by search query.
     *
     * @param  \OpenAPI\Client\Model\ModGlossaryGetEntriesBySearchRequest $mod_glossary_get_entries_by_search_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modGlossaryGetEntriesBySearch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modGlossaryGetEntriesBySearchAsync($mod_glossary_get_entries_by_search_request, string $contentType = self::contentTypes['modGlossaryGetEntriesBySearch'][0])
    {
        return $this->modGlossaryGetEntriesBySearchAsyncWithHttpInfo($mod_glossary_get_entries_by_search_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modGlossaryGetEntriesBySearchAsyncWithHttpInfo
     *
     * Browse entries by search query.
     *
     * @param  \OpenAPI\Client\Model\ModGlossaryGetEntriesBySearchRequest $mod_glossary_get_entries_by_search_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modGlossaryGetEntriesBySearch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modGlossaryGetEntriesBySearchAsyncWithHttpInfo($mod_glossary_get_entries_by_search_request, string $contentType = self::contentTypes['modGlossaryGetEntriesBySearch'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModGlossaryGetEntriesByAuthorId200Response';
        $request = $this->modGlossaryGetEntriesBySearchRequest($mod_glossary_get_entries_by_search_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modGlossaryGetEntriesBySearch'
     *
     * @param  \OpenAPI\Client\Model\ModGlossaryGetEntriesBySearchRequest $mod_glossary_get_entries_by_search_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modGlossaryGetEntriesBySearch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modGlossaryGetEntriesBySearchRequest($mod_glossary_get_entries_by_search_request, string $contentType = self::contentTypes['modGlossaryGetEntriesBySearch'][0])
    {

        // verify the required parameter 'mod_glossary_get_entries_by_search_request' is set
        if ($mod_glossary_get_entries_by_search_request === null || (is_array($mod_glossary_get_entries_by_search_request) && count($mod_glossary_get_entries_by_search_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_glossary_get_entries_by_search_request when calling modGlossaryGetEntriesBySearch'
            );
        }


        $resourcePath = '/mod_glossary_get_entries_by_search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_glossary_get_entries_by_search_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_glossary_get_entries_by_search_request));
            } else {
                $httpBody = $mod_glossary_get_entries_by_search_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modGlossaryGetEntriesByTerm
     *
     * Browse entries by term (concept or alias).
     *
     * @param  \OpenAPI\Client\Model\ModGlossaryGetEntriesByTermRequest $mod_glossary_get_entries_by_term_request mod_glossary_get_entries_by_term_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modGlossaryGetEntriesByTerm'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModGlossaryGetEntriesByAuthorId200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modGlossaryGetEntriesByTerm($mod_glossary_get_entries_by_term_request, string $contentType = self::contentTypes['modGlossaryGetEntriesByTerm'][0])
    {
        list($response) = $this->modGlossaryGetEntriesByTermWithHttpInfo($mod_glossary_get_entries_by_term_request, $contentType);
        return $response;
    }

    /**
     * Operation modGlossaryGetEntriesByTermWithHttpInfo
     *
     * Browse entries by term (concept or alias).
     *
     * @param  \OpenAPI\Client\Model\ModGlossaryGetEntriesByTermRequest $mod_glossary_get_entries_by_term_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modGlossaryGetEntriesByTerm'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModGlossaryGetEntriesByAuthorId200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modGlossaryGetEntriesByTermWithHttpInfo($mod_glossary_get_entries_by_term_request, string $contentType = self::contentTypes['modGlossaryGetEntriesByTerm'][0])
    {
        $request = $this->modGlossaryGetEntriesByTermRequest($mod_glossary_get_entries_by_term_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModGlossaryGetEntriesByAuthorId200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModGlossaryGetEntriesByAuthorId200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModGlossaryGetEntriesByAuthorId200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModGlossaryGetEntriesByAuthorId200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModGlossaryGetEntriesByAuthorId200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modGlossaryGetEntriesByTermAsync
     *
     * Browse entries by term (concept or alias).
     *
     * @param  \OpenAPI\Client\Model\ModGlossaryGetEntriesByTermRequest $mod_glossary_get_entries_by_term_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modGlossaryGetEntriesByTerm'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modGlossaryGetEntriesByTermAsync($mod_glossary_get_entries_by_term_request, string $contentType = self::contentTypes['modGlossaryGetEntriesByTerm'][0])
    {
        return $this->modGlossaryGetEntriesByTermAsyncWithHttpInfo($mod_glossary_get_entries_by_term_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modGlossaryGetEntriesByTermAsyncWithHttpInfo
     *
     * Browse entries by term (concept or alias).
     *
     * @param  \OpenAPI\Client\Model\ModGlossaryGetEntriesByTermRequest $mod_glossary_get_entries_by_term_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modGlossaryGetEntriesByTerm'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modGlossaryGetEntriesByTermAsyncWithHttpInfo($mod_glossary_get_entries_by_term_request, string $contentType = self::contentTypes['modGlossaryGetEntriesByTerm'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModGlossaryGetEntriesByAuthorId200Response';
        $request = $this->modGlossaryGetEntriesByTermRequest($mod_glossary_get_entries_by_term_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modGlossaryGetEntriesByTerm'
     *
     * @param  \OpenAPI\Client\Model\ModGlossaryGetEntriesByTermRequest $mod_glossary_get_entries_by_term_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modGlossaryGetEntriesByTerm'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modGlossaryGetEntriesByTermRequest($mod_glossary_get_entries_by_term_request, string $contentType = self::contentTypes['modGlossaryGetEntriesByTerm'][0])
    {

        // verify the required parameter 'mod_glossary_get_entries_by_term_request' is set
        if ($mod_glossary_get_entries_by_term_request === null || (is_array($mod_glossary_get_entries_by_term_request) && count($mod_glossary_get_entries_by_term_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_glossary_get_entries_by_term_request when calling modGlossaryGetEntriesByTerm'
            );
        }


        $resourcePath = '/mod_glossary_get_entries_by_term';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_glossary_get_entries_by_term_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_glossary_get_entries_by_term_request));
            } else {
                $httpBody = $mod_glossary_get_entries_by_term_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modGlossaryGetEntriesToApprove
     *
     * Browse entries to be approved.
     *
     * @param  \OpenAPI\Client\Model\ModGlossaryGetEntriesToApproveRequest $mod_glossary_get_entries_to_approve_request mod_glossary_get_entries_to_approve_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modGlossaryGetEntriesToApprove'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModGlossaryGetEntriesByAuthorId200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modGlossaryGetEntriesToApprove($mod_glossary_get_entries_to_approve_request, string $contentType = self::contentTypes['modGlossaryGetEntriesToApprove'][0])
    {
        list($response) = $this->modGlossaryGetEntriesToApproveWithHttpInfo($mod_glossary_get_entries_to_approve_request, $contentType);
        return $response;
    }

    /**
     * Operation modGlossaryGetEntriesToApproveWithHttpInfo
     *
     * Browse entries to be approved.
     *
     * @param  \OpenAPI\Client\Model\ModGlossaryGetEntriesToApproveRequest $mod_glossary_get_entries_to_approve_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modGlossaryGetEntriesToApprove'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModGlossaryGetEntriesByAuthorId200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modGlossaryGetEntriesToApproveWithHttpInfo($mod_glossary_get_entries_to_approve_request, string $contentType = self::contentTypes['modGlossaryGetEntriesToApprove'][0])
    {
        $request = $this->modGlossaryGetEntriesToApproveRequest($mod_glossary_get_entries_to_approve_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModGlossaryGetEntriesByAuthorId200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModGlossaryGetEntriesByAuthorId200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModGlossaryGetEntriesByAuthorId200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModGlossaryGetEntriesByAuthorId200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModGlossaryGetEntriesByAuthorId200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modGlossaryGetEntriesToApproveAsync
     *
     * Browse entries to be approved.
     *
     * @param  \OpenAPI\Client\Model\ModGlossaryGetEntriesToApproveRequest $mod_glossary_get_entries_to_approve_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modGlossaryGetEntriesToApprove'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modGlossaryGetEntriesToApproveAsync($mod_glossary_get_entries_to_approve_request, string $contentType = self::contentTypes['modGlossaryGetEntriesToApprove'][0])
    {
        return $this->modGlossaryGetEntriesToApproveAsyncWithHttpInfo($mod_glossary_get_entries_to_approve_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modGlossaryGetEntriesToApproveAsyncWithHttpInfo
     *
     * Browse entries to be approved.
     *
     * @param  \OpenAPI\Client\Model\ModGlossaryGetEntriesToApproveRequest $mod_glossary_get_entries_to_approve_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modGlossaryGetEntriesToApprove'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modGlossaryGetEntriesToApproveAsyncWithHttpInfo($mod_glossary_get_entries_to_approve_request, string $contentType = self::contentTypes['modGlossaryGetEntriesToApprove'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModGlossaryGetEntriesByAuthorId200Response';
        $request = $this->modGlossaryGetEntriesToApproveRequest($mod_glossary_get_entries_to_approve_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modGlossaryGetEntriesToApprove'
     *
     * @param  \OpenAPI\Client\Model\ModGlossaryGetEntriesToApproveRequest $mod_glossary_get_entries_to_approve_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modGlossaryGetEntriesToApprove'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modGlossaryGetEntriesToApproveRequest($mod_glossary_get_entries_to_approve_request, string $contentType = self::contentTypes['modGlossaryGetEntriesToApprove'][0])
    {

        // verify the required parameter 'mod_glossary_get_entries_to_approve_request' is set
        if ($mod_glossary_get_entries_to_approve_request === null || (is_array($mod_glossary_get_entries_to_approve_request) && count($mod_glossary_get_entries_to_approve_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_glossary_get_entries_to_approve_request when calling modGlossaryGetEntriesToApprove'
            );
        }


        $resourcePath = '/mod_glossary_get_entries_to_approve';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_glossary_get_entries_to_approve_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_glossary_get_entries_to_approve_request));
            } else {
                $httpBody = $mod_glossary_get_entries_to_approve_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modGlossaryGetEntryById
     *
     * Get an entry by ID
     *
     * @param  \OpenAPI\Client\Model\ModGlossaryGetEntryByIdRequest $mod_glossary_get_entry_by_id_request mod_glossary_get_entry_by_id_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modGlossaryGetEntryById'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModGlossaryGetEntryById200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modGlossaryGetEntryById($mod_glossary_get_entry_by_id_request, string $contentType = self::contentTypes['modGlossaryGetEntryById'][0])
    {
        list($response) = $this->modGlossaryGetEntryByIdWithHttpInfo($mod_glossary_get_entry_by_id_request, $contentType);
        return $response;
    }

    /**
     * Operation modGlossaryGetEntryByIdWithHttpInfo
     *
     * Get an entry by ID
     *
     * @param  \OpenAPI\Client\Model\ModGlossaryGetEntryByIdRequest $mod_glossary_get_entry_by_id_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modGlossaryGetEntryById'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModGlossaryGetEntryById200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modGlossaryGetEntryByIdWithHttpInfo($mod_glossary_get_entry_by_id_request, string $contentType = self::contentTypes['modGlossaryGetEntryById'][0])
    {
        $request = $this->modGlossaryGetEntryByIdRequest($mod_glossary_get_entry_by_id_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModGlossaryGetEntryById200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModGlossaryGetEntryById200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModGlossaryGetEntryById200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModGlossaryGetEntryById200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModGlossaryGetEntryById200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modGlossaryGetEntryByIdAsync
     *
     * Get an entry by ID
     *
     * @param  \OpenAPI\Client\Model\ModGlossaryGetEntryByIdRequest $mod_glossary_get_entry_by_id_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modGlossaryGetEntryById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modGlossaryGetEntryByIdAsync($mod_glossary_get_entry_by_id_request, string $contentType = self::contentTypes['modGlossaryGetEntryById'][0])
    {
        return $this->modGlossaryGetEntryByIdAsyncWithHttpInfo($mod_glossary_get_entry_by_id_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modGlossaryGetEntryByIdAsyncWithHttpInfo
     *
     * Get an entry by ID
     *
     * @param  \OpenAPI\Client\Model\ModGlossaryGetEntryByIdRequest $mod_glossary_get_entry_by_id_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modGlossaryGetEntryById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modGlossaryGetEntryByIdAsyncWithHttpInfo($mod_glossary_get_entry_by_id_request, string $contentType = self::contentTypes['modGlossaryGetEntryById'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModGlossaryGetEntryById200Response';
        $request = $this->modGlossaryGetEntryByIdRequest($mod_glossary_get_entry_by_id_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modGlossaryGetEntryById'
     *
     * @param  \OpenAPI\Client\Model\ModGlossaryGetEntryByIdRequest $mod_glossary_get_entry_by_id_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modGlossaryGetEntryById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modGlossaryGetEntryByIdRequest($mod_glossary_get_entry_by_id_request, string $contentType = self::contentTypes['modGlossaryGetEntryById'][0])
    {

        // verify the required parameter 'mod_glossary_get_entry_by_id_request' is set
        if ($mod_glossary_get_entry_by_id_request === null || (is_array($mod_glossary_get_entry_by_id_request) && count($mod_glossary_get_entry_by_id_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_glossary_get_entry_by_id_request when calling modGlossaryGetEntryById'
            );
        }


        $resourcePath = '/mod_glossary_get_entry_by_id';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_glossary_get_entry_by_id_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_glossary_get_entry_by_id_request));
            } else {
                $httpBody = $mod_glossary_get_entry_by_id_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modGlossaryGetGlossariesByCourses
     *
     * Retrieve a list of glossaries from several courses.
     *
     * @param  \OpenAPI\Client\Model\ModChatGetChatsByCoursesRequest $mod_chat_get_chats_by_courses_request mod_chat_get_chats_by_courses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modGlossaryGetGlossariesByCourses'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModGlossaryGetGlossariesByCourses200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modGlossaryGetGlossariesByCourses($mod_chat_get_chats_by_courses_request, string $contentType = self::contentTypes['modGlossaryGetGlossariesByCourses'][0])
    {
        list($response) = $this->modGlossaryGetGlossariesByCoursesWithHttpInfo($mod_chat_get_chats_by_courses_request, $contentType);
        return $response;
    }

    /**
     * Operation modGlossaryGetGlossariesByCoursesWithHttpInfo
     *
     * Retrieve a list of glossaries from several courses.
     *
     * @param  \OpenAPI\Client\Model\ModChatGetChatsByCoursesRequest $mod_chat_get_chats_by_courses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modGlossaryGetGlossariesByCourses'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModGlossaryGetGlossariesByCourses200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modGlossaryGetGlossariesByCoursesWithHttpInfo($mod_chat_get_chats_by_courses_request, string $contentType = self::contentTypes['modGlossaryGetGlossariesByCourses'][0])
    {
        $request = $this->modGlossaryGetGlossariesByCoursesRequest($mod_chat_get_chats_by_courses_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModGlossaryGetGlossariesByCourses200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModGlossaryGetGlossariesByCourses200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModGlossaryGetGlossariesByCourses200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModGlossaryGetGlossariesByCourses200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModGlossaryGetGlossariesByCourses200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modGlossaryGetGlossariesByCoursesAsync
     *
     * Retrieve a list of glossaries from several courses.
     *
     * @param  \OpenAPI\Client\Model\ModChatGetChatsByCoursesRequest $mod_chat_get_chats_by_courses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modGlossaryGetGlossariesByCourses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modGlossaryGetGlossariesByCoursesAsync($mod_chat_get_chats_by_courses_request, string $contentType = self::contentTypes['modGlossaryGetGlossariesByCourses'][0])
    {
        return $this->modGlossaryGetGlossariesByCoursesAsyncWithHttpInfo($mod_chat_get_chats_by_courses_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modGlossaryGetGlossariesByCoursesAsyncWithHttpInfo
     *
     * Retrieve a list of glossaries from several courses.
     *
     * @param  \OpenAPI\Client\Model\ModChatGetChatsByCoursesRequest $mod_chat_get_chats_by_courses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modGlossaryGetGlossariesByCourses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modGlossaryGetGlossariesByCoursesAsyncWithHttpInfo($mod_chat_get_chats_by_courses_request, string $contentType = self::contentTypes['modGlossaryGetGlossariesByCourses'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModGlossaryGetGlossariesByCourses200Response';
        $request = $this->modGlossaryGetGlossariesByCoursesRequest($mod_chat_get_chats_by_courses_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modGlossaryGetGlossariesByCourses'
     *
     * @param  \OpenAPI\Client\Model\ModChatGetChatsByCoursesRequest $mod_chat_get_chats_by_courses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modGlossaryGetGlossariesByCourses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modGlossaryGetGlossariesByCoursesRequest($mod_chat_get_chats_by_courses_request, string $contentType = self::contentTypes['modGlossaryGetGlossariesByCourses'][0])
    {

        // verify the required parameter 'mod_chat_get_chats_by_courses_request' is set
        if ($mod_chat_get_chats_by_courses_request === null || (is_array($mod_chat_get_chats_by_courses_request) && count($mod_chat_get_chats_by_courses_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_chat_get_chats_by_courses_request when calling modGlossaryGetGlossariesByCourses'
            );
        }


        $resourcePath = '/mod_glossary_get_glossaries_by_courses';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_chat_get_chats_by_courses_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_chat_get_chats_by_courses_request));
            } else {
                $httpBody = $mod_chat_get_chats_by_courses_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modGlossaryPrepareEntryForEdition
     *
     * Prepares the given entry for edition returning draft item areas and file areas information.
     *
     * @param  \OpenAPI\Client\Model\ModGlossaryPrepareEntryForEditionRequest $mod_glossary_prepare_entry_for_edition_request mod_glossary_prepare_entry_for_edition_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modGlossaryPrepareEntryForEdition'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModGlossaryPrepareEntryForEdition200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modGlossaryPrepareEntryForEdition($mod_glossary_prepare_entry_for_edition_request, string $contentType = self::contentTypes['modGlossaryPrepareEntryForEdition'][0])
    {
        list($response) = $this->modGlossaryPrepareEntryForEditionWithHttpInfo($mod_glossary_prepare_entry_for_edition_request, $contentType);
        return $response;
    }

    /**
     * Operation modGlossaryPrepareEntryForEditionWithHttpInfo
     *
     * Prepares the given entry for edition returning draft item areas and file areas information.
     *
     * @param  \OpenAPI\Client\Model\ModGlossaryPrepareEntryForEditionRequest $mod_glossary_prepare_entry_for_edition_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modGlossaryPrepareEntryForEdition'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModGlossaryPrepareEntryForEdition200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modGlossaryPrepareEntryForEditionWithHttpInfo($mod_glossary_prepare_entry_for_edition_request, string $contentType = self::contentTypes['modGlossaryPrepareEntryForEdition'][0])
    {
        $request = $this->modGlossaryPrepareEntryForEditionRequest($mod_glossary_prepare_entry_for_edition_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModGlossaryPrepareEntryForEdition200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModGlossaryPrepareEntryForEdition200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModGlossaryPrepareEntryForEdition200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModGlossaryPrepareEntryForEdition200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModGlossaryPrepareEntryForEdition200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modGlossaryPrepareEntryForEditionAsync
     *
     * Prepares the given entry for edition returning draft item areas and file areas information.
     *
     * @param  \OpenAPI\Client\Model\ModGlossaryPrepareEntryForEditionRequest $mod_glossary_prepare_entry_for_edition_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modGlossaryPrepareEntryForEdition'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modGlossaryPrepareEntryForEditionAsync($mod_glossary_prepare_entry_for_edition_request, string $contentType = self::contentTypes['modGlossaryPrepareEntryForEdition'][0])
    {
        return $this->modGlossaryPrepareEntryForEditionAsyncWithHttpInfo($mod_glossary_prepare_entry_for_edition_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modGlossaryPrepareEntryForEditionAsyncWithHttpInfo
     *
     * Prepares the given entry for edition returning draft item areas and file areas information.
     *
     * @param  \OpenAPI\Client\Model\ModGlossaryPrepareEntryForEditionRequest $mod_glossary_prepare_entry_for_edition_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modGlossaryPrepareEntryForEdition'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modGlossaryPrepareEntryForEditionAsyncWithHttpInfo($mod_glossary_prepare_entry_for_edition_request, string $contentType = self::contentTypes['modGlossaryPrepareEntryForEdition'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModGlossaryPrepareEntryForEdition200Response';
        $request = $this->modGlossaryPrepareEntryForEditionRequest($mod_glossary_prepare_entry_for_edition_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modGlossaryPrepareEntryForEdition'
     *
     * @param  \OpenAPI\Client\Model\ModGlossaryPrepareEntryForEditionRequest $mod_glossary_prepare_entry_for_edition_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modGlossaryPrepareEntryForEdition'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modGlossaryPrepareEntryForEditionRequest($mod_glossary_prepare_entry_for_edition_request, string $contentType = self::contentTypes['modGlossaryPrepareEntryForEdition'][0])
    {

        // verify the required parameter 'mod_glossary_prepare_entry_for_edition_request' is set
        if ($mod_glossary_prepare_entry_for_edition_request === null || (is_array($mod_glossary_prepare_entry_for_edition_request) && count($mod_glossary_prepare_entry_for_edition_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_glossary_prepare_entry_for_edition_request when calling modGlossaryPrepareEntryForEdition'
            );
        }


        $resourcePath = '/mod_glossary_prepare_entry_for_edition';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_glossary_prepare_entry_for_edition_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_glossary_prepare_entry_for_edition_request));
            } else {
                $httpBody = $mod_glossary_prepare_entry_for_edition_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modGlossaryUpdateEntry
     *
     * Updates the given glossary entry.
     *
     * @param  \OpenAPI\Client\Model\ModGlossaryUpdateEntryRequest $mod_glossary_update_entry_request mod_glossary_update_entry_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modGlossaryUpdateEntry'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModGlossaryUpdateEntry200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modGlossaryUpdateEntry($mod_glossary_update_entry_request, string $contentType = self::contentTypes['modGlossaryUpdateEntry'][0])
    {
        list($response) = $this->modGlossaryUpdateEntryWithHttpInfo($mod_glossary_update_entry_request, $contentType);
        return $response;
    }

    /**
     * Operation modGlossaryUpdateEntryWithHttpInfo
     *
     * Updates the given glossary entry.
     *
     * @param  \OpenAPI\Client\Model\ModGlossaryUpdateEntryRequest $mod_glossary_update_entry_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modGlossaryUpdateEntry'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModGlossaryUpdateEntry200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modGlossaryUpdateEntryWithHttpInfo($mod_glossary_update_entry_request, string $contentType = self::contentTypes['modGlossaryUpdateEntry'][0])
    {
        $request = $this->modGlossaryUpdateEntryRequest($mod_glossary_update_entry_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModGlossaryUpdateEntry200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModGlossaryUpdateEntry200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModGlossaryUpdateEntry200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModGlossaryUpdateEntry200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModGlossaryUpdateEntry200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modGlossaryUpdateEntryAsync
     *
     * Updates the given glossary entry.
     *
     * @param  \OpenAPI\Client\Model\ModGlossaryUpdateEntryRequest $mod_glossary_update_entry_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modGlossaryUpdateEntry'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modGlossaryUpdateEntryAsync($mod_glossary_update_entry_request, string $contentType = self::contentTypes['modGlossaryUpdateEntry'][0])
    {
        return $this->modGlossaryUpdateEntryAsyncWithHttpInfo($mod_glossary_update_entry_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modGlossaryUpdateEntryAsyncWithHttpInfo
     *
     * Updates the given glossary entry.
     *
     * @param  \OpenAPI\Client\Model\ModGlossaryUpdateEntryRequest $mod_glossary_update_entry_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modGlossaryUpdateEntry'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modGlossaryUpdateEntryAsyncWithHttpInfo($mod_glossary_update_entry_request, string $contentType = self::contentTypes['modGlossaryUpdateEntry'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModGlossaryUpdateEntry200Response';
        $request = $this->modGlossaryUpdateEntryRequest($mod_glossary_update_entry_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modGlossaryUpdateEntry'
     *
     * @param  \OpenAPI\Client\Model\ModGlossaryUpdateEntryRequest $mod_glossary_update_entry_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modGlossaryUpdateEntry'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modGlossaryUpdateEntryRequest($mod_glossary_update_entry_request, string $contentType = self::contentTypes['modGlossaryUpdateEntry'][0])
    {

        // verify the required parameter 'mod_glossary_update_entry_request' is set
        if ($mod_glossary_update_entry_request === null || (is_array($mod_glossary_update_entry_request) && count($mod_glossary_update_entry_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_glossary_update_entry_request when calling modGlossaryUpdateEntry'
            );
        }


        $resourcePath = '/mod_glossary_update_entry';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_glossary_update_entry_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_glossary_update_entry_request));
            } else {
                $httpBody = $mod_glossary_update_entry_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modGlossaryViewEntry
     *
     * Notify a glossary entry as being viewed.
     *
     * @param  \OpenAPI\Client\Model\ModGlossaryGetEntryByIdRequest $mod_glossary_get_entry_by_id_request mod_glossary_get_entry_by_id_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modGlossaryViewEntry'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModGlossaryViewEntry200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modGlossaryViewEntry($mod_glossary_get_entry_by_id_request, string $contentType = self::contentTypes['modGlossaryViewEntry'][0])
    {
        list($response) = $this->modGlossaryViewEntryWithHttpInfo($mod_glossary_get_entry_by_id_request, $contentType);
        return $response;
    }

    /**
     * Operation modGlossaryViewEntryWithHttpInfo
     *
     * Notify a glossary entry as being viewed.
     *
     * @param  \OpenAPI\Client\Model\ModGlossaryGetEntryByIdRequest $mod_glossary_get_entry_by_id_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modGlossaryViewEntry'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModGlossaryViewEntry200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modGlossaryViewEntryWithHttpInfo($mod_glossary_get_entry_by_id_request, string $contentType = self::contentTypes['modGlossaryViewEntry'][0])
    {
        $request = $this->modGlossaryViewEntryRequest($mod_glossary_get_entry_by_id_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModGlossaryViewEntry200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModGlossaryViewEntry200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModGlossaryViewEntry200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModGlossaryViewEntry200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModGlossaryViewEntry200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modGlossaryViewEntryAsync
     *
     * Notify a glossary entry as being viewed.
     *
     * @param  \OpenAPI\Client\Model\ModGlossaryGetEntryByIdRequest $mod_glossary_get_entry_by_id_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modGlossaryViewEntry'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modGlossaryViewEntryAsync($mod_glossary_get_entry_by_id_request, string $contentType = self::contentTypes['modGlossaryViewEntry'][0])
    {
        return $this->modGlossaryViewEntryAsyncWithHttpInfo($mod_glossary_get_entry_by_id_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modGlossaryViewEntryAsyncWithHttpInfo
     *
     * Notify a glossary entry as being viewed.
     *
     * @param  \OpenAPI\Client\Model\ModGlossaryGetEntryByIdRequest $mod_glossary_get_entry_by_id_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modGlossaryViewEntry'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modGlossaryViewEntryAsyncWithHttpInfo($mod_glossary_get_entry_by_id_request, string $contentType = self::contentTypes['modGlossaryViewEntry'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModGlossaryViewEntry200Response';
        $request = $this->modGlossaryViewEntryRequest($mod_glossary_get_entry_by_id_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modGlossaryViewEntry'
     *
     * @param  \OpenAPI\Client\Model\ModGlossaryGetEntryByIdRequest $mod_glossary_get_entry_by_id_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modGlossaryViewEntry'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modGlossaryViewEntryRequest($mod_glossary_get_entry_by_id_request, string $contentType = self::contentTypes['modGlossaryViewEntry'][0])
    {

        // verify the required parameter 'mod_glossary_get_entry_by_id_request' is set
        if ($mod_glossary_get_entry_by_id_request === null || (is_array($mod_glossary_get_entry_by_id_request) && count($mod_glossary_get_entry_by_id_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_glossary_get_entry_by_id_request when calling modGlossaryViewEntry'
            );
        }


        $resourcePath = '/mod_glossary_view_entry';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_glossary_get_entry_by_id_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_glossary_get_entry_by_id_request));
            } else {
                $httpBody = $mod_glossary_get_entry_by_id_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modGlossaryViewGlossary
     *
     * Notify the glossary as being viewed.
     *
     * @param  \OpenAPI\Client\Model\ModGlossaryViewGlossaryRequest $mod_glossary_view_glossary_request mod_glossary_view_glossary_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modGlossaryViewGlossary'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModGlossaryViewGlossary200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modGlossaryViewGlossary($mod_glossary_view_glossary_request, string $contentType = self::contentTypes['modGlossaryViewGlossary'][0])
    {
        list($response) = $this->modGlossaryViewGlossaryWithHttpInfo($mod_glossary_view_glossary_request, $contentType);
        return $response;
    }

    /**
     * Operation modGlossaryViewGlossaryWithHttpInfo
     *
     * Notify the glossary as being viewed.
     *
     * @param  \OpenAPI\Client\Model\ModGlossaryViewGlossaryRequest $mod_glossary_view_glossary_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modGlossaryViewGlossary'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModGlossaryViewGlossary200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modGlossaryViewGlossaryWithHttpInfo($mod_glossary_view_glossary_request, string $contentType = self::contentTypes['modGlossaryViewGlossary'][0])
    {
        $request = $this->modGlossaryViewGlossaryRequest($mod_glossary_view_glossary_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModGlossaryViewGlossary200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModGlossaryViewGlossary200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModGlossaryViewGlossary200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModGlossaryViewGlossary200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModGlossaryViewGlossary200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modGlossaryViewGlossaryAsync
     *
     * Notify the glossary as being viewed.
     *
     * @param  \OpenAPI\Client\Model\ModGlossaryViewGlossaryRequest $mod_glossary_view_glossary_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modGlossaryViewGlossary'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modGlossaryViewGlossaryAsync($mod_glossary_view_glossary_request, string $contentType = self::contentTypes['modGlossaryViewGlossary'][0])
    {
        return $this->modGlossaryViewGlossaryAsyncWithHttpInfo($mod_glossary_view_glossary_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modGlossaryViewGlossaryAsyncWithHttpInfo
     *
     * Notify the glossary as being viewed.
     *
     * @param  \OpenAPI\Client\Model\ModGlossaryViewGlossaryRequest $mod_glossary_view_glossary_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modGlossaryViewGlossary'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modGlossaryViewGlossaryAsyncWithHttpInfo($mod_glossary_view_glossary_request, string $contentType = self::contentTypes['modGlossaryViewGlossary'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModGlossaryViewGlossary200Response';
        $request = $this->modGlossaryViewGlossaryRequest($mod_glossary_view_glossary_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modGlossaryViewGlossary'
     *
     * @param  \OpenAPI\Client\Model\ModGlossaryViewGlossaryRequest $mod_glossary_view_glossary_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modGlossaryViewGlossary'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modGlossaryViewGlossaryRequest($mod_glossary_view_glossary_request, string $contentType = self::contentTypes['modGlossaryViewGlossary'][0])
    {

        // verify the required parameter 'mod_glossary_view_glossary_request' is set
        if ($mod_glossary_view_glossary_request === null || (is_array($mod_glossary_view_glossary_request) && count($mod_glossary_view_glossary_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_glossary_view_glossary_request when calling modGlossaryViewGlossary'
            );
        }


        $resourcePath = '/mod_glossary_view_glossary';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_glossary_view_glossary_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_glossary_view_glossary_request));
            } else {
                $httpBody = $mod_glossary_view_glossary_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
