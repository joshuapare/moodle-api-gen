<?php
/**
 * BlockIomadCompanyAdminApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * BlockIomadCompanyAdminApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class BlockIomadCompanyAdminApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'blockIomadCompanyAdminAllocateLicenses' => [
            'application/json',
        ],
        'blockIomadCompanyAdminAssignCourses' => [
            'application/json',
        ],
        'blockIomadCompanyAdminAssignUsers' => [
            'application/json',
        ],
        'blockIomadCompanyAdminCapabilityDeleteTemplate' => [
            'application/json',
        ],
        'blockIomadCompanyAdminCheckToken' => [
            'application/json',
        ],
        'blockIomadCompanyAdminCreateCompanies' => [
            'application/json',
        ],
        'blockIomadCompanyAdminCreateLicenses' => [
            'application/json',
        ],
        'blockIomadCompanyAdminDeleteLicenses' => [
            'application/json',
        ],
        'blockIomadCompanyAdminEditCompanies' => [
            'application/json',
        ],
        'blockIomadCompanyAdminEditLicenses' => [
            'application/json',
        ],
        'blockIomadCompanyAdminEnrolUsers' => [
            'application/json',
        ],
        'blockIomadCompanyAdminGetCompanies' => [
            'application/json',
        ],
        'blockIomadCompanyAdminGetCompanyCourses' => [
            'application/json',
        ],
        'blockIomadCompanyAdminGetCourseInfo' => [
            'application/json',
        ],
        'blockIomadCompanyAdminGetDepartmentUsers' => [
            'application/json',
        ],
        'blockIomadCompanyAdminGetDepartments' => [
            'application/json',
        ],
        'blockIomadCompanyAdminGetLicenseFromId' => [
            'application/json',
        ],
        'blockIomadCompanyAdminGetLicenseInfo' => [
            'application/json',
        ],
        'blockIomadCompanyAdminMoveUsers' => [
            'application/json',
        ],
        'blockIomadCompanyAdminRestrictCapability' => [
            'application/json',
        ],
        'blockIomadCompanyAdminSyncUsers' => [
            'application/json',
        ],
        'blockIomadCompanyAdminUnallocateLicenses' => [
            'application/json',
        ],
        'blockIomadCompanyAdminUnassignCourses' => [
            'application/json',
        ],
        'blockIomadCompanyAdminUnassignUsers' => [
            'application/json',
        ],
        'blockIomadCompanyAdminUpdateCourses' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation blockIomadCompanyAdminAllocateLicenses
     *
     * Allocate course licenses to a user
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminAllocateLicensesRequest $block_iomad_company_admin_allocate_licenses_request block_iomad_company_admin_allocate_licenses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminAllocateLicenses'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object|\OpenAPI\Client\Model\ErrorResponse
     */
    public function blockIomadCompanyAdminAllocateLicenses($block_iomad_company_admin_allocate_licenses_request, string $contentType = self::contentTypes['blockIomadCompanyAdminAllocateLicenses'][0])
    {
        list($response) = $this->blockIomadCompanyAdminAllocateLicensesWithHttpInfo($block_iomad_company_admin_allocate_licenses_request, $contentType);
        return $response;
    }

    /**
     * Operation blockIomadCompanyAdminAllocateLicensesWithHttpInfo
     *
     * Allocate course licenses to a user
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminAllocateLicensesRequest $block_iomad_company_admin_allocate_licenses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminAllocateLicenses'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function blockIomadCompanyAdminAllocateLicensesWithHttpInfo($block_iomad_company_admin_allocate_licenses_request, string $contentType = self::contentTypes['blockIomadCompanyAdminAllocateLicenses'][0])
    {
        $request = $this->blockIomadCompanyAdminAllocateLicensesRequest($block_iomad_company_admin_allocate_licenses_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation blockIomadCompanyAdminAllocateLicensesAsync
     *
     * Allocate course licenses to a user
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminAllocateLicensesRequest $block_iomad_company_admin_allocate_licenses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminAllocateLicenses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function blockIomadCompanyAdminAllocateLicensesAsync($block_iomad_company_admin_allocate_licenses_request, string $contentType = self::contentTypes['blockIomadCompanyAdminAllocateLicenses'][0])
    {
        return $this->blockIomadCompanyAdminAllocateLicensesAsyncWithHttpInfo($block_iomad_company_admin_allocate_licenses_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation blockIomadCompanyAdminAllocateLicensesAsyncWithHttpInfo
     *
     * Allocate course licenses to a user
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminAllocateLicensesRequest $block_iomad_company_admin_allocate_licenses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminAllocateLicenses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function blockIomadCompanyAdminAllocateLicensesAsyncWithHttpInfo($block_iomad_company_admin_allocate_licenses_request, string $contentType = self::contentTypes['blockIomadCompanyAdminAllocateLicenses'][0])
    {
        $returnType = 'object';
        $request = $this->blockIomadCompanyAdminAllocateLicensesRequest($block_iomad_company_admin_allocate_licenses_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'blockIomadCompanyAdminAllocateLicenses'
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminAllocateLicensesRequest $block_iomad_company_admin_allocate_licenses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminAllocateLicenses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function blockIomadCompanyAdminAllocateLicensesRequest($block_iomad_company_admin_allocate_licenses_request, string $contentType = self::contentTypes['blockIomadCompanyAdminAllocateLicenses'][0])
    {

        // verify the required parameter 'block_iomad_company_admin_allocate_licenses_request' is set
        if ($block_iomad_company_admin_allocate_licenses_request === null || (is_array($block_iomad_company_admin_allocate_licenses_request) && count($block_iomad_company_admin_allocate_licenses_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $block_iomad_company_admin_allocate_licenses_request when calling blockIomadCompanyAdminAllocateLicenses'
            );
        }


        $resourcePath = '/block_iomad_company_admin_allocate_licenses';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($block_iomad_company_admin_allocate_licenses_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($block_iomad_company_admin_allocate_licenses_request));
            } else {
                $httpBody = $block_iomad_company_admin_allocate_licenses_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation blockIomadCompanyAdminAssignCourses
     *
     * Assign a course to a company
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminAssignCoursesRequest $block_iomad_company_admin_assign_courses_request block_iomad_company_admin_assign_courses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminAssignCourses'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object|\OpenAPI\Client\Model\ErrorResponse
     */
    public function blockIomadCompanyAdminAssignCourses($block_iomad_company_admin_assign_courses_request, string $contentType = self::contentTypes['blockIomadCompanyAdminAssignCourses'][0])
    {
        list($response) = $this->blockIomadCompanyAdminAssignCoursesWithHttpInfo($block_iomad_company_admin_assign_courses_request, $contentType);
        return $response;
    }

    /**
     * Operation blockIomadCompanyAdminAssignCoursesWithHttpInfo
     *
     * Assign a course to a company
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminAssignCoursesRequest $block_iomad_company_admin_assign_courses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminAssignCourses'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function blockIomadCompanyAdminAssignCoursesWithHttpInfo($block_iomad_company_admin_assign_courses_request, string $contentType = self::contentTypes['blockIomadCompanyAdminAssignCourses'][0])
    {
        $request = $this->blockIomadCompanyAdminAssignCoursesRequest($block_iomad_company_admin_assign_courses_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation blockIomadCompanyAdminAssignCoursesAsync
     *
     * Assign a course to a company
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminAssignCoursesRequest $block_iomad_company_admin_assign_courses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminAssignCourses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function blockIomadCompanyAdminAssignCoursesAsync($block_iomad_company_admin_assign_courses_request, string $contentType = self::contentTypes['blockIomadCompanyAdminAssignCourses'][0])
    {
        return $this->blockIomadCompanyAdminAssignCoursesAsyncWithHttpInfo($block_iomad_company_admin_assign_courses_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation blockIomadCompanyAdminAssignCoursesAsyncWithHttpInfo
     *
     * Assign a course to a company
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminAssignCoursesRequest $block_iomad_company_admin_assign_courses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminAssignCourses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function blockIomadCompanyAdminAssignCoursesAsyncWithHttpInfo($block_iomad_company_admin_assign_courses_request, string $contentType = self::contentTypes['blockIomadCompanyAdminAssignCourses'][0])
    {
        $returnType = 'object';
        $request = $this->blockIomadCompanyAdminAssignCoursesRequest($block_iomad_company_admin_assign_courses_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'blockIomadCompanyAdminAssignCourses'
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminAssignCoursesRequest $block_iomad_company_admin_assign_courses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminAssignCourses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function blockIomadCompanyAdminAssignCoursesRequest($block_iomad_company_admin_assign_courses_request, string $contentType = self::contentTypes['blockIomadCompanyAdminAssignCourses'][0])
    {

        // verify the required parameter 'block_iomad_company_admin_assign_courses_request' is set
        if ($block_iomad_company_admin_assign_courses_request === null || (is_array($block_iomad_company_admin_assign_courses_request) && count($block_iomad_company_admin_assign_courses_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $block_iomad_company_admin_assign_courses_request when calling blockIomadCompanyAdminAssignCourses'
            );
        }


        $resourcePath = '/block_iomad_company_admin_assign_courses';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($block_iomad_company_admin_assign_courses_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($block_iomad_company_admin_assign_courses_request));
            } else {
                $httpBody = $block_iomad_company_admin_assign_courses_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation blockIomadCompanyAdminAssignUsers
     *
     * Assign users to a company
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminAssignUsersRequest $block_iomad_company_admin_assign_users_request block_iomad_company_admin_assign_users_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminAssignUsers'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\BlockIomadCompanyAdminAssignUsers200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function blockIomadCompanyAdminAssignUsers($block_iomad_company_admin_assign_users_request, string $contentType = self::contentTypes['blockIomadCompanyAdminAssignUsers'][0])
    {
        list($response) = $this->blockIomadCompanyAdminAssignUsersWithHttpInfo($block_iomad_company_admin_assign_users_request, $contentType);
        return $response;
    }

    /**
     * Operation blockIomadCompanyAdminAssignUsersWithHttpInfo
     *
     * Assign users to a company
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminAssignUsersRequest $block_iomad_company_admin_assign_users_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminAssignUsers'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\BlockIomadCompanyAdminAssignUsers200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function blockIomadCompanyAdminAssignUsersWithHttpInfo($block_iomad_company_admin_assign_users_request, string $contentType = self::contentTypes['blockIomadCompanyAdminAssignUsers'][0])
    {
        $request = $this->blockIomadCompanyAdminAssignUsersRequest($block_iomad_company_admin_assign_users_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\BlockIomadCompanyAdminAssignUsers200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\BlockIomadCompanyAdminAssignUsers200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BlockIomadCompanyAdminAssignUsers200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\BlockIomadCompanyAdminAssignUsers200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BlockIomadCompanyAdminAssignUsers200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation blockIomadCompanyAdminAssignUsersAsync
     *
     * Assign users to a company
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminAssignUsersRequest $block_iomad_company_admin_assign_users_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminAssignUsers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function blockIomadCompanyAdminAssignUsersAsync($block_iomad_company_admin_assign_users_request, string $contentType = self::contentTypes['blockIomadCompanyAdminAssignUsers'][0])
    {
        return $this->blockIomadCompanyAdminAssignUsersAsyncWithHttpInfo($block_iomad_company_admin_assign_users_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation blockIomadCompanyAdminAssignUsersAsyncWithHttpInfo
     *
     * Assign users to a company
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminAssignUsersRequest $block_iomad_company_admin_assign_users_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminAssignUsers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function blockIomadCompanyAdminAssignUsersAsyncWithHttpInfo($block_iomad_company_admin_assign_users_request, string $contentType = self::contentTypes['blockIomadCompanyAdminAssignUsers'][0])
    {
        $returnType = '\OpenAPI\Client\Model\BlockIomadCompanyAdminAssignUsers200Response';
        $request = $this->blockIomadCompanyAdminAssignUsersRequest($block_iomad_company_admin_assign_users_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'blockIomadCompanyAdminAssignUsers'
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminAssignUsersRequest $block_iomad_company_admin_assign_users_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminAssignUsers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function blockIomadCompanyAdminAssignUsersRequest($block_iomad_company_admin_assign_users_request, string $contentType = self::contentTypes['blockIomadCompanyAdminAssignUsers'][0])
    {

        // verify the required parameter 'block_iomad_company_admin_assign_users_request' is set
        if ($block_iomad_company_admin_assign_users_request === null || (is_array($block_iomad_company_admin_assign_users_request) && count($block_iomad_company_admin_assign_users_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $block_iomad_company_admin_assign_users_request when calling blockIomadCompanyAdminAssignUsers'
            );
        }


        $resourcePath = '/block_iomad_company_admin_assign_users';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($block_iomad_company_admin_assign_users_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($block_iomad_company_admin_assign_users_request));
            } else {
                $httpBody = $block_iomad_company_admin_assign_users_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation blockIomadCompanyAdminCapabilityDeleteTemplate
     *
     * Delete Iomad capabilities template
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminCapabilityDeleteTemplateRequest $block_iomad_company_admin_capability_delete_template_request block_iomad_company_admin_capability_delete_template_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminCapabilityDeleteTemplate'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object|\OpenAPI\Client\Model\ErrorResponse
     */
    public function blockIomadCompanyAdminCapabilityDeleteTemplate($block_iomad_company_admin_capability_delete_template_request, string $contentType = self::contentTypes['blockIomadCompanyAdminCapabilityDeleteTemplate'][0])
    {
        list($response) = $this->blockIomadCompanyAdminCapabilityDeleteTemplateWithHttpInfo($block_iomad_company_admin_capability_delete_template_request, $contentType);
        return $response;
    }

    /**
     * Operation blockIomadCompanyAdminCapabilityDeleteTemplateWithHttpInfo
     *
     * Delete Iomad capabilities template
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminCapabilityDeleteTemplateRequest $block_iomad_company_admin_capability_delete_template_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminCapabilityDeleteTemplate'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function blockIomadCompanyAdminCapabilityDeleteTemplateWithHttpInfo($block_iomad_company_admin_capability_delete_template_request, string $contentType = self::contentTypes['blockIomadCompanyAdminCapabilityDeleteTemplate'][0])
    {
        $request = $this->blockIomadCompanyAdminCapabilityDeleteTemplateRequest($block_iomad_company_admin_capability_delete_template_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation blockIomadCompanyAdminCapabilityDeleteTemplateAsync
     *
     * Delete Iomad capabilities template
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminCapabilityDeleteTemplateRequest $block_iomad_company_admin_capability_delete_template_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminCapabilityDeleteTemplate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function blockIomadCompanyAdminCapabilityDeleteTemplateAsync($block_iomad_company_admin_capability_delete_template_request, string $contentType = self::contentTypes['blockIomadCompanyAdminCapabilityDeleteTemplate'][0])
    {
        return $this->blockIomadCompanyAdminCapabilityDeleteTemplateAsyncWithHttpInfo($block_iomad_company_admin_capability_delete_template_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation blockIomadCompanyAdminCapabilityDeleteTemplateAsyncWithHttpInfo
     *
     * Delete Iomad capabilities template
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminCapabilityDeleteTemplateRequest $block_iomad_company_admin_capability_delete_template_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminCapabilityDeleteTemplate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function blockIomadCompanyAdminCapabilityDeleteTemplateAsyncWithHttpInfo($block_iomad_company_admin_capability_delete_template_request, string $contentType = self::contentTypes['blockIomadCompanyAdminCapabilityDeleteTemplate'][0])
    {
        $returnType = 'object';
        $request = $this->blockIomadCompanyAdminCapabilityDeleteTemplateRequest($block_iomad_company_admin_capability_delete_template_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'blockIomadCompanyAdminCapabilityDeleteTemplate'
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminCapabilityDeleteTemplateRequest $block_iomad_company_admin_capability_delete_template_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminCapabilityDeleteTemplate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function blockIomadCompanyAdminCapabilityDeleteTemplateRequest($block_iomad_company_admin_capability_delete_template_request, string $contentType = self::contentTypes['blockIomadCompanyAdminCapabilityDeleteTemplate'][0])
    {

        // verify the required parameter 'block_iomad_company_admin_capability_delete_template_request' is set
        if ($block_iomad_company_admin_capability_delete_template_request === null || (is_array($block_iomad_company_admin_capability_delete_template_request) && count($block_iomad_company_admin_capability_delete_template_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $block_iomad_company_admin_capability_delete_template_request when calling blockIomadCompanyAdminCapabilityDeleteTemplate'
            );
        }


        $resourcePath = '/block_iomad_company_admin_capability_delete_template';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($block_iomad_company_admin_capability_delete_template_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($block_iomad_company_admin_capability_delete_template_request));
            } else {
                $httpBody = $block_iomad_company_admin_capability_delete_template_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation blockIomadCompanyAdminCheckToken
     *
     * Check SSO token
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminCheckTokenRequest $block_iomad_company_admin_check_token_request block_iomad_company_admin_check_token_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminCheckToken'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\BlockIomadCompanyAdminCheckToken200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function blockIomadCompanyAdminCheckToken($block_iomad_company_admin_check_token_request, string $contentType = self::contentTypes['blockIomadCompanyAdminCheckToken'][0])
    {
        list($response) = $this->blockIomadCompanyAdminCheckTokenWithHttpInfo($block_iomad_company_admin_check_token_request, $contentType);
        return $response;
    }

    /**
     * Operation blockIomadCompanyAdminCheckTokenWithHttpInfo
     *
     * Check SSO token
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminCheckTokenRequest $block_iomad_company_admin_check_token_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminCheckToken'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\BlockIomadCompanyAdminCheckToken200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function blockIomadCompanyAdminCheckTokenWithHttpInfo($block_iomad_company_admin_check_token_request, string $contentType = self::contentTypes['blockIomadCompanyAdminCheckToken'][0])
    {
        $request = $this->blockIomadCompanyAdminCheckTokenRequest($block_iomad_company_admin_check_token_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\BlockIomadCompanyAdminCheckToken200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\BlockIomadCompanyAdminCheckToken200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BlockIomadCompanyAdminCheckToken200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\BlockIomadCompanyAdminCheckToken200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BlockIomadCompanyAdminCheckToken200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation blockIomadCompanyAdminCheckTokenAsync
     *
     * Check SSO token
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminCheckTokenRequest $block_iomad_company_admin_check_token_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminCheckToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function blockIomadCompanyAdminCheckTokenAsync($block_iomad_company_admin_check_token_request, string $contentType = self::contentTypes['blockIomadCompanyAdminCheckToken'][0])
    {
        return $this->blockIomadCompanyAdminCheckTokenAsyncWithHttpInfo($block_iomad_company_admin_check_token_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation blockIomadCompanyAdminCheckTokenAsyncWithHttpInfo
     *
     * Check SSO token
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminCheckTokenRequest $block_iomad_company_admin_check_token_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminCheckToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function blockIomadCompanyAdminCheckTokenAsyncWithHttpInfo($block_iomad_company_admin_check_token_request, string $contentType = self::contentTypes['blockIomadCompanyAdminCheckToken'][0])
    {
        $returnType = '\OpenAPI\Client\Model\BlockIomadCompanyAdminCheckToken200Response';
        $request = $this->blockIomadCompanyAdminCheckTokenRequest($block_iomad_company_admin_check_token_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'blockIomadCompanyAdminCheckToken'
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminCheckTokenRequest $block_iomad_company_admin_check_token_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminCheckToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function blockIomadCompanyAdminCheckTokenRequest($block_iomad_company_admin_check_token_request, string $contentType = self::contentTypes['blockIomadCompanyAdminCheckToken'][0])
    {

        // verify the required parameter 'block_iomad_company_admin_check_token_request' is set
        if ($block_iomad_company_admin_check_token_request === null || (is_array($block_iomad_company_admin_check_token_request) && count($block_iomad_company_admin_check_token_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $block_iomad_company_admin_check_token_request when calling blockIomadCompanyAdminCheckToken'
            );
        }


        $resourcePath = '/block_iomad_company_admin_check_token';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($block_iomad_company_admin_check_token_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($block_iomad_company_admin_check_token_request));
            } else {
                $httpBody = $block_iomad_company_admin_check_token_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation blockIomadCompanyAdminCreateCompanies
     *
     * Create new Iomad companies
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminCreateCompaniesRequest $block_iomad_company_admin_create_companies_request block_iomad_company_admin_create_companies_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminCreateCompanies'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object|\OpenAPI\Client\Model\ErrorResponse
     */
    public function blockIomadCompanyAdminCreateCompanies($block_iomad_company_admin_create_companies_request, string $contentType = self::contentTypes['blockIomadCompanyAdminCreateCompanies'][0])
    {
        list($response) = $this->blockIomadCompanyAdminCreateCompaniesWithHttpInfo($block_iomad_company_admin_create_companies_request, $contentType);
        return $response;
    }

    /**
     * Operation blockIomadCompanyAdminCreateCompaniesWithHttpInfo
     *
     * Create new Iomad companies
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminCreateCompaniesRequest $block_iomad_company_admin_create_companies_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminCreateCompanies'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function blockIomadCompanyAdminCreateCompaniesWithHttpInfo($block_iomad_company_admin_create_companies_request, string $contentType = self::contentTypes['blockIomadCompanyAdminCreateCompanies'][0])
    {
        $request = $this->blockIomadCompanyAdminCreateCompaniesRequest($block_iomad_company_admin_create_companies_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation blockIomadCompanyAdminCreateCompaniesAsync
     *
     * Create new Iomad companies
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminCreateCompaniesRequest $block_iomad_company_admin_create_companies_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminCreateCompanies'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function blockIomadCompanyAdminCreateCompaniesAsync($block_iomad_company_admin_create_companies_request, string $contentType = self::contentTypes['blockIomadCompanyAdminCreateCompanies'][0])
    {
        return $this->blockIomadCompanyAdminCreateCompaniesAsyncWithHttpInfo($block_iomad_company_admin_create_companies_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation blockIomadCompanyAdminCreateCompaniesAsyncWithHttpInfo
     *
     * Create new Iomad companies
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminCreateCompaniesRequest $block_iomad_company_admin_create_companies_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminCreateCompanies'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function blockIomadCompanyAdminCreateCompaniesAsyncWithHttpInfo($block_iomad_company_admin_create_companies_request, string $contentType = self::contentTypes['blockIomadCompanyAdminCreateCompanies'][0])
    {
        $returnType = 'object';
        $request = $this->blockIomadCompanyAdminCreateCompaniesRequest($block_iomad_company_admin_create_companies_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'blockIomadCompanyAdminCreateCompanies'
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminCreateCompaniesRequest $block_iomad_company_admin_create_companies_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminCreateCompanies'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function blockIomadCompanyAdminCreateCompaniesRequest($block_iomad_company_admin_create_companies_request, string $contentType = self::contentTypes['blockIomadCompanyAdminCreateCompanies'][0])
    {

        // verify the required parameter 'block_iomad_company_admin_create_companies_request' is set
        if ($block_iomad_company_admin_create_companies_request === null || (is_array($block_iomad_company_admin_create_companies_request) && count($block_iomad_company_admin_create_companies_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $block_iomad_company_admin_create_companies_request when calling blockIomadCompanyAdminCreateCompanies'
            );
        }


        $resourcePath = '/block_iomad_company_admin_create_companies';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($block_iomad_company_admin_create_companies_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($block_iomad_company_admin_create_companies_request));
            } else {
                $httpBody = $block_iomad_company_admin_create_companies_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation blockIomadCompanyAdminCreateLicenses
     *
     * Create company licenses
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminCreateLicensesRequest $block_iomad_company_admin_create_licenses_request block_iomad_company_admin_create_licenses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminCreateLicenses'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object|\OpenAPI\Client\Model\ErrorResponse
     */
    public function blockIomadCompanyAdminCreateLicenses($block_iomad_company_admin_create_licenses_request, string $contentType = self::contentTypes['blockIomadCompanyAdminCreateLicenses'][0])
    {
        list($response) = $this->blockIomadCompanyAdminCreateLicensesWithHttpInfo($block_iomad_company_admin_create_licenses_request, $contentType);
        return $response;
    }

    /**
     * Operation blockIomadCompanyAdminCreateLicensesWithHttpInfo
     *
     * Create company licenses
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminCreateLicensesRequest $block_iomad_company_admin_create_licenses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminCreateLicenses'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function blockIomadCompanyAdminCreateLicensesWithHttpInfo($block_iomad_company_admin_create_licenses_request, string $contentType = self::contentTypes['blockIomadCompanyAdminCreateLicenses'][0])
    {
        $request = $this->blockIomadCompanyAdminCreateLicensesRequest($block_iomad_company_admin_create_licenses_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation blockIomadCompanyAdminCreateLicensesAsync
     *
     * Create company licenses
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminCreateLicensesRequest $block_iomad_company_admin_create_licenses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminCreateLicenses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function blockIomadCompanyAdminCreateLicensesAsync($block_iomad_company_admin_create_licenses_request, string $contentType = self::contentTypes['blockIomadCompanyAdminCreateLicenses'][0])
    {
        return $this->blockIomadCompanyAdminCreateLicensesAsyncWithHttpInfo($block_iomad_company_admin_create_licenses_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation blockIomadCompanyAdminCreateLicensesAsyncWithHttpInfo
     *
     * Create company licenses
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminCreateLicensesRequest $block_iomad_company_admin_create_licenses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminCreateLicenses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function blockIomadCompanyAdminCreateLicensesAsyncWithHttpInfo($block_iomad_company_admin_create_licenses_request, string $contentType = self::contentTypes['blockIomadCompanyAdminCreateLicenses'][0])
    {
        $returnType = 'object';
        $request = $this->blockIomadCompanyAdminCreateLicensesRequest($block_iomad_company_admin_create_licenses_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'blockIomadCompanyAdminCreateLicenses'
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminCreateLicensesRequest $block_iomad_company_admin_create_licenses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminCreateLicenses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function blockIomadCompanyAdminCreateLicensesRequest($block_iomad_company_admin_create_licenses_request, string $contentType = self::contentTypes['blockIomadCompanyAdminCreateLicenses'][0])
    {

        // verify the required parameter 'block_iomad_company_admin_create_licenses_request' is set
        if ($block_iomad_company_admin_create_licenses_request === null || (is_array($block_iomad_company_admin_create_licenses_request) && count($block_iomad_company_admin_create_licenses_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $block_iomad_company_admin_create_licenses_request when calling blockIomadCompanyAdminCreateLicenses'
            );
        }


        $resourcePath = '/block_iomad_company_admin_create_licenses';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($block_iomad_company_admin_create_licenses_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($block_iomad_company_admin_create_licenses_request));
            } else {
                $httpBody = $block_iomad_company_admin_create_licenses_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation blockIomadCompanyAdminDeleteLicenses
     *
     * Delete company licenses
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminDeleteLicensesRequest $block_iomad_company_admin_delete_licenses_request block_iomad_company_admin_delete_licenses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminDeleteLicenses'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object|\OpenAPI\Client\Model\ErrorResponse
     */
    public function blockIomadCompanyAdminDeleteLicenses($block_iomad_company_admin_delete_licenses_request, string $contentType = self::contentTypes['blockIomadCompanyAdminDeleteLicenses'][0])
    {
        list($response) = $this->blockIomadCompanyAdminDeleteLicensesWithHttpInfo($block_iomad_company_admin_delete_licenses_request, $contentType);
        return $response;
    }

    /**
     * Operation blockIomadCompanyAdminDeleteLicensesWithHttpInfo
     *
     * Delete company licenses
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminDeleteLicensesRequest $block_iomad_company_admin_delete_licenses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminDeleteLicenses'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function blockIomadCompanyAdminDeleteLicensesWithHttpInfo($block_iomad_company_admin_delete_licenses_request, string $contentType = self::contentTypes['blockIomadCompanyAdminDeleteLicenses'][0])
    {
        $request = $this->blockIomadCompanyAdminDeleteLicensesRequest($block_iomad_company_admin_delete_licenses_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation blockIomadCompanyAdminDeleteLicensesAsync
     *
     * Delete company licenses
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminDeleteLicensesRequest $block_iomad_company_admin_delete_licenses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminDeleteLicenses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function blockIomadCompanyAdminDeleteLicensesAsync($block_iomad_company_admin_delete_licenses_request, string $contentType = self::contentTypes['blockIomadCompanyAdminDeleteLicenses'][0])
    {
        return $this->blockIomadCompanyAdminDeleteLicensesAsyncWithHttpInfo($block_iomad_company_admin_delete_licenses_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation blockIomadCompanyAdminDeleteLicensesAsyncWithHttpInfo
     *
     * Delete company licenses
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminDeleteLicensesRequest $block_iomad_company_admin_delete_licenses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminDeleteLicenses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function blockIomadCompanyAdminDeleteLicensesAsyncWithHttpInfo($block_iomad_company_admin_delete_licenses_request, string $contentType = self::contentTypes['blockIomadCompanyAdminDeleteLicenses'][0])
    {
        $returnType = 'object';
        $request = $this->blockIomadCompanyAdminDeleteLicensesRequest($block_iomad_company_admin_delete_licenses_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'blockIomadCompanyAdminDeleteLicenses'
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminDeleteLicensesRequest $block_iomad_company_admin_delete_licenses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminDeleteLicenses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function blockIomadCompanyAdminDeleteLicensesRequest($block_iomad_company_admin_delete_licenses_request, string $contentType = self::contentTypes['blockIomadCompanyAdminDeleteLicenses'][0])
    {

        // verify the required parameter 'block_iomad_company_admin_delete_licenses_request' is set
        if ($block_iomad_company_admin_delete_licenses_request === null || (is_array($block_iomad_company_admin_delete_licenses_request) && count($block_iomad_company_admin_delete_licenses_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $block_iomad_company_admin_delete_licenses_request when calling blockIomadCompanyAdminDeleteLicenses'
            );
        }


        $resourcePath = '/block_iomad_company_admin_delete_licenses';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($block_iomad_company_admin_delete_licenses_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($block_iomad_company_admin_delete_licenses_request));
            } else {
                $httpBody = $block_iomad_company_admin_delete_licenses_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation blockIomadCompanyAdminEditCompanies
     *
     * Edit Iomad companies
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminEditCompaniesRequest $block_iomad_company_admin_edit_companies_request block_iomad_company_admin_edit_companies_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminEditCompanies'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object|\OpenAPI\Client\Model\ErrorResponse
     */
    public function blockIomadCompanyAdminEditCompanies($block_iomad_company_admin_edit_companies_request, string $contentType = self::contentTypes['blockIomadCompanyAdminEditCompanies'][0])
    {
        list($response) = $this->blockIomadCompanyAdminEditCompaniesWithHttpInfo($block_iomad_company_admin_edit_companies_request, $contentType);
        return $response;
    }

    /**
     * Operation blockIomadCompanyAdminEditCompaniesWithHttpInfo
     *
     * Edit Iomad companies
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminEditCompaniesRequest $block_iomad_company_admin_edit_companies_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminEditCompanies'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function blockIomadCompanyAdminEditCompaniesWithHttpInfo($block_iomad_company_admin_edit_companies_request, string $contentType = self::contentTypes['blockIomadCompanyAdminEditCompanies'][0])
    {
        $request = $this->blockIomadCompanyAdminEditCompaniesRequest($block_iomad_company_admin_edit_companies_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation blockIomadCompanyAdminEditCompaniesAsync
     *
     * Edit Iomad companies
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminEditCompaniesRequest $block_iomad_company_admin_edit_companies_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminEditCompanies'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function blockIomadCompanyAdminEditCompaniesAsync($block_iomad_company_admin_edit_companies_request, string $contentType = self::contentTypes['blockIomadCompanyAdminEditCompanies'][0])
    {
        return $this->blockIomadCompanyAdminEditCompaniesAsyncWithHttpInfo($block_iomad_company_admin_edit_companies_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation blockIomadCompanyAdminEditCompaniesAsyncWithHttpInfo
     *
     * Edit Iomad companies
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminEditCompaniesRequest $block_iomad_company_admin_edit_companies_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminEditCompanies'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function blockIomadCompanyAdminEditCompaniesAsyncWithHttpInfo($block_iomad_company_admin_edit_companies_request, string $contentType = self::contentTypes['blockIomadCompanyAdminEditCompanies'][0])
    {
        $returnType = 'object';
        $request = $this->blockIomadCompanyAdminEditCompaniesRequest($block_iomad_company_admin_edit_companies_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'blockIomadCompanyAdminEditCompanies'
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminEditCompaniesRequest $block_iomad_company_admin_edit_companies_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminEditCompanies'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function blockIomadCompanyAdminEditCompaniesRequest($block_iomad_company_admin_edit_companies_request, string $contentType = self::contentTypes['blockIomadCompanyAdminEditCompanies'][0])
    {

        // verify the required parameter 'block_iomad_company_admin_edit_companies_request' is set
        if ($block_iomad_company_admin_edit_companies_request === null || (is_array($block_iomad_company_admin_edit_companies_request) && count($block_iomad_company_admin_edit_companies_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $block_iomad_company_admin_edit_companies_request when calling blockIomadCompanyAdminEditCompanies'
            );
        }


        $resourcePath = '/block_iomad_company_admin_edit_companies';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($block_iomad_company_admin_edit_companies_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($block_iomad_company_admin_edit_companies_request));
            } else {
                $httpBody = $block_iomad_company_admin_edit_companies_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation blockIomadCompanyAdminEditLicenses
     *
     * Edit company license settings
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminEditLicensesRequest $block_iomad_company_admin_edit_licenses_request block_iomad_company_admin_edit_licenses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminEditLicenses'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object|\OpenAPI\Client\Model\ErrorResponse
     */
    public function blockIomadCompanyAdminEditLicenses($block_iomad_company_admin_edit_licenses_request, string $contentType = self::contentTypes['blockIomadCompanyAdminEditLicenses'][0])
    {
        list($response) = $this->blockIomadCompanyAdminEditLicensesWithHttpInfo($block_iomad_company_admin_edit_licenses_request, $contentType);
        return $response;
    }

    /**
     * Operation blockIomadCompanyAdminEditLicensesWithHttpInfo
     *
     * Edit company license settings
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminEditLicensesRequest $block_iomad_company_admin_edit_licenses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminEditLicenses'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function blockIomadCompanyAdminEditLicensesWithHttpInfo($block_iomad_company_admin_edit_licenses_request, string $contentType = self::contentTypes['blockIomadCompanyAdminEditLicenses'][0])
    {
        $request = $this->blockIomadCompanyAdminEditLicensesRequest($block_iomad_company_admin_edit_licenses_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation blockIomadCompanyAdminEditLicensesAsync
     *
     * Edit company license settings
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminEditLicensesRequest $block_iomad_company_admin_edit_licenses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminEditLicenses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function blockIomadCompanyAdminEditLicensesAsync($block_iomad_company_admin_edit_licenses_request, string $contentType = self::contentTypes['blockIomadCompanyAdminEditLicenses'][0])
    {
        return $this->blockIomadCompanyAdminEditLicensesAsyncWithHttpInfo($block_iomad_company_admin_edit_licenses_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation blockIomadCompanyAdminEditLicensesAsyncWithHttpInfo
     *
     * Edit company license settings
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminEditLicensesRequest $block_iomad_company_admin_edit_licenses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminEditLicenses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function blockIomadCompanyAdminEditLicensesAsyncWithHttpInfo($block_iomad_company_admin_edit_licenses_request, string $contentType = self::contentTypes['blockIomadCompanyAdminEditLicenses'][0])
    {
        $returnType = 'object';
        $request = $this->blockIomadCompanyAdminEditLicensesRequest($block_iomad_company_admin_edit_licenses_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'blockIomadCompanyAdminEditLicenses'
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminEditLicensesRequest $block_iomad_company_admin_edit_licenses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminEditLicenses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function blockIomadCompanyAdminEditLicensesRequest($block_iomad_company_admin_edit_licenses_request, string $contentType = self::contentTypes['blockIomadCompanyAdminEditLicenses'][0])
    {

        // verify the required parameter 'block_iomad_company_admin_edit_licenses_request' is set
        if ($block_iomad_company_admin_edit_licenses_request === null || (is_array($block_iomad_company_admin_edit_licenses_request) && count($block_iomad_company_admin_edit_licenses_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $block_iomad_company_admin_edit_licenses_request when calling blockIomadCompanyAdminEditLicenses'
            );
        }


        $resourcePath = '/block_iomad_company_admin_edit_licenses';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($block_iomad_company_admin_edit_licenses_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($block_iomad_company_admin_edit_licenses_request));
            } else {
                $httpBody = $block_iomad_company_admin_edit_licenses_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation blockIomadCompanyAdminEnrolUsers
     *
     * Assign users onto courses
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminEnrolUsersRequest $block_iomad_company_admin_enrol_users_request block_iomad_company_admin_enrol_users_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminEnrolUsers'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object|\OpenAPI\Client\Model\ErrorResponse
     */
    public function blockIomadCompanyAdminEnrolUsers($block_iomad_company_admin_enrol_users_request, string $contentType = self::contentTypes['blockIomadCompanyAdminEnrolUsers'][0])
    {
        list($response) = $this->blockIomadCompanyAdminEnrolUsersWithHttpInfo($block_iomad_company_admin_enrol_users_request, $contentType);
        return $response;
    }

    /**
     * Operation blockIomadCompanyAdminEnrolUsersWithHttpInfo
     *
     * Assign users onto courses
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminEnrolUsersRequest $block_iomad_company_admin_enrol_users_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminEnrolUsers'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function blockIomadCompanyAdminEnrolUsersWithHttpInfo($block_iomad_company_admin_enrol_users_request, string $contentType = self::contentTypes['blockIomadCompanyAdminEnrolUsers'][0])
    {
        $request = $this->blockIomadCompanyAdminEnrolUsersRequest($block_iomad_company_admin_enrol_users_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation blockIomadCompanyAdminEnrolUsersAsync
     *
     * Assign users onto courses
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminEnrolUsersRequest $block_iomad_company_admin_enrol_users_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminEnrolUsers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function blockIomadCompanyAdminEnrolUsersAsync($block_iomad_company_admin_enrol_users_request, string $contentType = self::contentTypes['blockIomadCompanyAdminEnrolUsers'][0])
    {
        return $this->blockIomadCompanyAdminEnrolUsersAsyncWithHttpInfo($block_iomad_company_admin_enrol_users_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation blockIomadCompanyAdminEnrolUsersAsyncWithHttpInfo
     *
     * Assign users onto courses
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminEnrolUsersRequest $block_iomad_company_admin_enrol_users_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminEnrolUsers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function blockIomadCompanyAdminEnrolUsersAsyncWithHttpInfo($block_iomad_company_admin_enrol_users_request, string $contentType = self::contentTypes['blockIomadCompanyAdminEnrolUsers'][0])
    {
        $returnType = 'object';
        $request = $this->blockIomadCompanyAdminEnrolUsersRequest($block_iomad_company_admin_enrol_users_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'blockIomadCompanyAdminEnrolUsers'
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminEnrolUsersRequest $block_iomad_company_admin_enrol_users_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminEnrolUsers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function blockIomadCompanyAdminEnrolUsersRequest($block_iomad_company_admin_enrol_users_request, string $contentType = self::contentTypes['blockIomadCompanyAdminEnrolUsers'][0])
    {

        // verify the required parameter 'block_iomad_company_admin_enrol_users_request' is set
        if ($block_iomad_company_admin_enrol_users_request === null || (is_array($block_iomad_company_admin_enrol_users_request) && count($block_iomad_company_admin_enrol_users_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $block_iomad_company_admin_enrol_users_request when calling blockIomadCompanyAdminEnrolUsers'
            );
        }


        $resourcePath = '/block_iomad_company_admin_enrol_users';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($block_iomad_company_admin_enrol_users_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($block_iomad_company_admin_enrol_users_request));
            } else {
                $httpBody = $block_iomad_company_admin_enrol_users_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation blockIomadCompanyAdminGetCompanies
     *
     * Get all Iomad companies
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminGetCompaniesRequest $block_iomad_company_admin_get_companies_request block_iomad_company_admin_get_companies_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminGetCompanies'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\BlockIomadCompanyAdminGetCompanies200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function blockIomadCompanyAdminGetCompanies($block_iomad_company_admin_get_companies_request, string $contentType = self::contentTypes['blockIomadCompanyAdminGetCompanies'][0])
    {
        list($response) = $this->blockIomadCompanyAdminGetCompaniesWithHttpInfo($block_iomad_company_admin_get_companies_request, $contentType);
        return $response;
    }

    /**
     * Operation blockIomadCompanyAdminGetCompaniesWithHttpInfo
     *
     * Get all Iomad companies
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminGetCompaniesRequest $block_iomad_company_admin_get_companies_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminGetCompanies'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\BlockIomadCompanyAdminGetCompanies200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function blockIomadCompanyAdminGetCompaniesWithHttpInfo($block_iomad_company_admin_get_companies_request, string $contentType = self::contentTypes['blockIomadCompanyAdminGetCompanies'][0])
    {
        $request = $this->blockIomadCompanyAdminGetCompaniesRequest($block_iomad_company_admin_get_companies_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\BlockIomadCompanyAdminGetCompanies200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\BlockIomadCompanyAdminGetCompanies200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BlockIomadCompanyAdminGetCompanies200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\BlockIomadCompanyAdminGetCompanies200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BlockIomadCompanyAdminGetCompanies200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation blockIomadCompanyAdminGetCompaniesAsync
     *
     * Get all Iomad companies
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminGetCompaniesRequest $block_iomad_company_admin_get_companies_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminGetCompanies'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function blockIomadCompanyAdminGetCompaniesAsync($block_iomad_company_admin_get_companies_request, string $contentType = self::contentTypes['blockIomadCompanyAdminGetCompanies'][0])
    {
        return $this->blockIomadCompanyAdminGetCompaniesAsyncWithHttpInfo($block_iomad_company_admin_get_companies_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation blockIomadCompanyAdminGetCompaniesAsyncWithHttpInfo
     *
     * Get all Iomad companies
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminGetCompaniesRequest $block_iomad_company_admin_get_companies_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminGetCompanies'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function blockIomadCompanyAdminGetCompaniesAsyncWithHttpInfo($block_iomad_company_admin_get_companies_request, string $contentType = self::contentTypes['blockIomadCompanyAdminGetCompanies'][0])
    {
        $returnType = '\OpenAPI\Client\Model\BlockIomadCompanyAdminGetCompanies200Response';
        $request = $this->blockIomadCompanyAdminGetCompaniesRequest($block_iomad_company_admin_get_companies_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'blockIomadCompanyAdminGetCompanies'
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminGetCompaniesRequest $block_iomad_company_admin_get_companies_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminGetCompanies'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function blockIomadCompanyAdminGetCompaniesRequest($block_iomad_company_admin_get_companies_request, string $contentType = self::contentTypes['blockIomadCompanyAdminGetCompanies'][0])
    {

        // verify the required parameter 'block_iomad_company_admin_get_companies_request' is set
        if ($block_iomad_company_admin_get_companies_request === null || (is_array($block_iomad_company_admin_get_companies_request) && count($block_iomad_company_admin_get_companies_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $block_iomad_company_admin_get_companies_request when calling blockIomadCompanyAdminGetCompanies'
            );
        }


        $resourcePath = '/block_iomad_company_admin_get_companies';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($block_iomad_company_admin_get_companies_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($block_iomad_company_admin_get_companies_request));
            } else {
                $httpBody = $block_iomad_company_admin_get_companies_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation blockIomadCompanyAdminGetCompanyCourses
     *
     * Get Iomad company course allocations
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminGetCompanyCoursesRequest $block_iomad_company_admin_get_company_courses_request block_iomad_company_admin_get_company_courses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminGetCompanyCourses'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\BlockIomadCompanyAdminGetCompanyCourses200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function blockIomadCompanyAdminGetCompanyCourses($block_iomad_company_admin_get_company_courses_request, string $contentType = self::contentTypes['blockIomadCompanyAdminGetCompanyCourses'][0])
    {
        list($response) = $this->blockIomadCompanyAdminGetCompanyCoursesWithHttpInfo($block_iomad_company_admin_get_company_courses_request, $contentType);
        return $response;
    }

    /**
     * Operation blockIomadCompanyAdminGetCompanyCoursesWithHttpInfo
     *
     * Get Iomad company course allocations
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminGetCompanyCoursesRequest $block_iomad_company_admin_get_company_courses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminGetCompanyCourses'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\BlockIomadCompanyAdminGetCompanyCourses200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function blockIomadCompanyAdminGetCompanyCoursesWithHttpInfo($block_iomad_company_admin_get_company_courses_request, string $contentType = self::contentTypes['blockIomadCompanyAdminGetCompanyCourses'][0])
    {
        $request = $this->blockIomadCompanyAdminGetCompanyCoursesRequest($block_iomad_company_admin_get_company_courses_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\BlockIomadCompanyAdminGetCompanyCourses200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\BlockIomadCompanyAdminGetCompanyCourses200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BlockIomadCompanyAdminGetCompanyCourses200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\BlockIomadCompanyAdminGetCompanyCourses200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BlockIomadCompanyAdminGetCompanyCourses200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation blockIomadCompanyAdminGetCompanyCoursesAsync
     *
     * Get Iomad company course allocations
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminGetCompanyCoursesRequest $block_iomad_company_admin_get_company_courses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminGetCompanyCourses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function blockIomadCompanyAdminGetCompanyCoursesAsync($block_iomad_company_admin_get_company_courses_request, string $contentType = self::contentTypes['blockIomadCompanyAdminGetCompanyCourses'][0])
    {
        return $this->blockIomadCompanyAdminGetCompanyCoursesAsyncWithHttpInfo($block_iomad_company_admin_get_company_courses_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation blockIomadCompanyAdminGetCompanyCoursesAsyncWithHttpInfo
     *
     * Get Iomad company course allocations
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminGetCompanyCoursesRequest $block_iomad_company_admin_get_company_courses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminGetCompanyCourses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function blockIomadCompanyAdminGetCompanyCoursesAsyncWithHttpInfo($block_iomad_company_admin_get_company_courses_request, string $contentType = self::contentTypes['blockIomadCompanyAdminGetCompanyCourses'][0])
    {
        $returnType = '\OpenAPI\Client\Model\BlockIomadCompanyAdminGetCompanyCourses200Response';
        $request = $this->blockIomadCompanyAdminGetCompanyCoursesRequest($block_iomad_company_admin_get_company_courses_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'blockIomadCompanyAdminGetCompanyCourses'
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminGetCompanyCoursesRequest $block_iomad_company_admin_get_company_courses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminGetCompanyCourses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function blockIomadCompanyAdminGetCompanyCoursesRequest($block_iomad_company_admin_get_company_courses_request, string $contentType = self::contentTypes['blockIomadCompanyAdminGetCompanyCourses'][0])
    {

        // verify the required parameter 'block_iomad_company_admin_get_company_courses_request' is set
        if ($block_iomad_company_admin_get_company_courses_request === null || (is_array($block_iomad_company_admin_get_company_courses_request) && count($block_iomad_company_admin_get_company_courses_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $block_iomad_company_admin_get_company_courses_request when calling blockIomadCompanyAdminGetCompanyCourses'
            );
        }


        $resourcePath = '/block_iomad_company_admin_get_company_courses';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($block_iomad_company_admin_get_company_courses_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($block_iomad_company_admin_get_company_courses_request));
            } else {
                $httpBody = $block_iomad_company_admin_get_company_courses_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation blockIomadCompanyAdminGetCourseInfo
     *
     * Get Iomad course settings
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminGetCourseInfoRequest $block_iomad_company_admin_get_course_info_request block_iomad_company_admin_get_course_info_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminGetCourseInfo'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object|\OpenAPI\Client\Model\ErrorResponse
     */
    public function blockIomadCompanyAdminGetCourseInfo($block_iomad_company_admin_get_course_info_request, string $contentType = self::contentTypes['blockIomadCompanyAdminGetCourseInfo'][0])
    {
        list($response) = $this->blockIomadCompanyAdminGetCourseInfoWithHttpInfo($block_iomad_company_admin_get_course_info_request, $contentType);
        return $response;
    }

    /**
     * Operation blockIomadCompanyAdminGetCourseInfoWithHttpInfo
     *
     * Get Iomad course settings
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminGetCourseInfoRequest $block_iomad_company_admin_get_course_info_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminGetCourseInfo'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function blockIomadCompanyAdminGetCourseInfoWithHttpInfo($block_iomad_company_admin_get_course_info_request, string $contentType = self::contentTypes['blockIomadCompanyAdminGetCourseInfo'][0])
    {
        $request = $this->blockIomadCompanyAdminGetCourseInfoRequest($block_iomad_company_admin_get_course_info_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation blockIomadCompanyAdminGetCourseInfoAsync
     *
     * Get Iomad course settings
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminGetCourseInfoRequest $block_iomad_company_admin_get_course_info_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminGetCourseInfo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function blockIomadCompanyAdminGetCourseInfoAsync($block_iomad_company_admin_get_course_info_request, string $contentType = self::contentTypes['blockIomadCompanyAdminGetCourseInfo'][0])
    {
        return $this->blockIomadCompanyAdminGetCourseInfoAsyncWithHttpInfo($block_iomad_company_admin_get_course_info_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation blockIomadCompanyAdminGetCourseInfoAsyncWithHttpInfo
     *
     * Get Iomad course settings
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminGetCourseInfoRequest $block_iomad_company_admin_get_course_info_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminGetCourseInfo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function blockIomadCompanyAdminGetCourseInfoAsyncWithHttpInfo($block_iomad_company_admin_get_course_info_request, string $contentType = self::contentTypes['blockIomadCompanyAdminGetCourseInfo'][0])
    {
        $returnType = 'object';
        $request = $this->blockIomadCompanyAdminGetCourseInfoRequest($block_iomad_company_admin_get_course_info_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'blockIomadCompanyAdminGetCourseInfo'
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminGetCourseInfoRequest $block_iomad_company_admin_get_course_info_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminGetCourseInfo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function blockIomadCompanyAdminGetCourseInfoRequest($block_iomad_company_admin_get_course_info_request, string $contentType = self::contentTypes['blockIomadCompanyAdminGetCourseInfo'][0])
    {

        // verify the required parameter 'block_iomad_company_admin_get_course_info_request' is set
        if ($block_iomad_company_admin_get_course_info_request === null || (is_array($block_iomad_company_admin_get_course_info_request) && count($block_iomad_company_admin_get_course_info_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $block_iomad_company_admin_get_course_info_request when calling blockIomadCompanyAdminGetCourseInfo'
            );
        }


        $resourcePath = '/block_iomad_company_admin_get_course_info';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($block_iomad_company_admin_get_course_info_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($block_iomad_company_admin_get_course_info_request));
            } else {
                $httpBody = $block_iomad_company_admin_get_course_info_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation blockIomadCompanyAdminGetDepartmentUsers
     *
     * Get users within a department
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminGetDepartmentUsersRequest $block_iomad_company_admin_get_department_users_request block_iomad_company_admin_get_department_users_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminGetDepartmentUsers'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\BlockIomadCompanyAdminGetDepartmentUsers200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function blockIomadCompanyAdminGetDepartmentUsers($block_iomad_company_admin_get_department_users_request, string $contentType = self::contentTypes['blockIomadCompanyAdminGetDepartmentUsers'][0])
    {
        list($response) = $this->blockIomadCompanyAdminGetDepartmentUsersWithHttpInfo($block_iomad_company_admin_get_department_users_request, $contentType);
        return $response;
    }

    /**
     * Operation blockIomadCompanyAdminGetDepartmentUsersWithHttpInfo
     *
     * Get users within a department
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminGetDepartmentUsersRequest $block_iomad_company_admin_get_department_users_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminGetDepartmentUsers'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\BlockIomadCompanyAdminGetDepartmentUsers200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function blockIomadCompanyAdminGetDepartmentUsersWithHttpInfo($block_iomad_company_admin_get_department_users_request, string $contentType = self::contentTypes['blockIomadCompanyAdminGetDepartmentUsers'][0])
    {
        $request = $this->blockIomadCompanyAdminGetDepartmentUsersRequest($block_iomad_company_admin_get_department_users_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\BlockIomadCompanyAdminGetDepartmentUsers200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\BlockIomadCompanyAdminGetDepartmentUsers200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BlockIomadCompanyAdminGetDepartmentUsers200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\BlockIomadCompanyAdminGetDepartmentUsers200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BlockIomadCompanyAdminGetDepartmentUsers200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation blockIomadCompanyAdminGetDepartmentUsersAsync
     *
     * Get users within a department
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminGetDepartmentUsersRequest $block_iomad_company_admin_get_department_users_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminGetDepartmentUsers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function blockIomadCompanyAdminGetDepartmentUsersAsync($block_iomad_company_admin_get_department_users_request, string $contentType = self::contentTypes['blockIomadCompanyAdminGetDepartmentUsers'][0])
    {
        return $this->blockIomadCompanyAdminGetDepartmentUsersAsyncWithHttpInfo($block_iomad_company_admin_get_department_users_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation blockIomadCompanyAdminGetDepartmentUsersAsyncWithHttpInfo
     *
     * Get users within a department
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminGetDepartmentUsersRequest $block_iomad_company_admin_get_department_users_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminGetDepartmentUsers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function blockIomadCompanyAdminGetDepartmentUsersAsyncWithHttpInfo($block_iomad_company_admin_get_department_users_request, string $contentType = self::contentTypes['blockIomadCompanyAdminGetDepartmentUsers'][0])
    {
        $returnType = '\OpenAPI\Client\Model\BlockIomadCompanyAdminGetDepartmentUsers200Response';
        $request = $this->blockIomadCompanyAdminGetDepartmentUsersRequest($block_iomad_company_admin_get_department_users_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'blockIomadCompanyAdminGetDepartmentUsers'
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminGetDepartmentUsersRequest $block_iomad_company_admin_get_department_users_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminGetDepartmentUsers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function blockIomadCompanyAdminGetDepartmentUsersRequest($block_iomad_company_admin_get_department_users_request, string $contentType = self::contentTypes['blockIomadCompanyAdminGetDepartmentUsers'][0])
    {

        // verify the required parameter 'block_iomad_company_admin_get_department_users_request' is set
        if ($block_iomad_company_admin_get_department_users_request === null || (is_array($block_iomad_company_admin_get_department_users_request) && count($block_iomad_company_admin_get_department_users_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $block_iomad_company_admin_get_department_users_request when calling blockIomadCompanyAdminGetDepartmentUsers'
            );
        }


        $resourcePath = '/block_iomad_company_admin_get_department_users';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($block_iomad_company_admin_get_department_users_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($block_iomad_company_admin_get_department_users_request));
            } else {
                $httpBody = $block_iomad_company_admin_get_department_users_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation blockIomadCompanyAdminGetDepartments
     *
     * Get all company departments
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminGetDepartmentsRequest $block_iomad_company_admin_get_departments_request block_iomad_company_admin_get_departments_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminGetDepartments'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\BlockIomadCompanyAdminGetDepartments200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function blockIomadCompanyAdminGetDepartments($block_iomad_company_admin_get_departments_request, string $contentType = self::contentTypes['blockIomadCompanyAdminGetDepartments'][0])
    {
        list($response) = $this->blockIomadCompanyAdminGetDepartmentsWithHttpInfo($block_iomad_company_admin_get_departments_request, $contentType);
        return $response;
    }

    /**
     * Operation blockIomadCompanyAdminGetDepartmentsWithHttpInfo
     *
     * Get all company departments
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminGetDepartmentsRequest $block_iomad_company_admin_get_departments_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminGetDepartments'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\BlockIomadCompanyAdminGetDepartments200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function blockIomadCompanyAdminGetDepartmentsWithHttpInfo($block_iomad_company_admin_get_departments_request, string $contentType = self::contentTypes['blockIomadCompanyAdminGetDepartments'][0])
    {
        $request = $this->blockIomadCompanyAdminGetDepartmentsRequest($block_iomad_company_admin_get_departments_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\BlockIomadCompanyAdminGetDepartments200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\BlockIomadCompanyAdminGetDepartments200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BlockIomadCompanyAdminGetDepartments200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\BlockIomadCompanyAdminGetDepartments200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BlockIomadCompanyAdminGetDepartments200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation blockIomadCompanyAdminGetDepartmentsAsync
     *
     * Get all company departments
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminGetDepartmentsRequest $block_iomad_company_admin_get_departments_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminGetDepartments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function blockIomadCompanyAdminGetDepartmentsAsync($block_iomad_company_admin_get_departments_request, string $contentType = self::contentTypes['blockIomadCompanyAdminGetDepartments'][0])
    {
        return $this->blockIomadCompanyAdminGetDepartmentsAsyncWithHttpInfo($block_iomad_company_admin_get_departments_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation blockIomadCompanyAdminGetDepartmentsAsyncWithHttpInfo
     *
     * Get all company departments
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminGetDepartmentsRequest $block_iomad_company_admin_get_departments_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminGetDepartments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function blockIomadCompanyAdminGetDepartmentsAsyncWithHttpInfo($block_iomad_company_admin_get_departments_request, string $contentType = self::contentTypes['blockIomadCompanyAdminGetDepartments'][0])
    {
        $returnType = '\OpenAPI\Client\Model\BlockIomadCompanyAdminGetDepartments200Response';
        $request = $this->blockIomadCompanyAdminGetDepartmentsRequest($block_iomad_company_admin_get_departments_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'blockIomadCompanyAdminGetDepartments'
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminGetDepartmentsRequest $block_iomad_company_admin_get_departments_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminGetDepartments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function blockIomadCompanyAdminGetDepartmentsRequest($block_iomad_company_admin_get_departments_request, string $contentType = self::contentTypes['blockIomadCompanyAdminGetDepartments'][0])
    {

        // verify the required parameter 'block_iomad_company_admin_get_departments_request' is set
        if ($block_iomad_company_admin_get_departments_request === null || (is_array($block_iomad_company_admin_get_departments_request) && count($block_iomad_company_admin_get_departments_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $block_iomad_company_admin_get_departments_request when calling blockIomadCompanyAdminGetDepartments'
            );
        }


        $resourcePath = '/block_iomad_company_admin_get_departments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($block_iomad_company_admin_get_departments_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($block_iomad_company_admin_get_departments_request));
            } else {
                $httpBody = $block_iomad_company_admin_get_departments_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation blockIomadCompanyAdminGetLicenseFromId
     *
     * Get licence data give the ID
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminGetLicenseFromIdRequest $block_iomad_company_admin_get_license_from_id_request block_iomad_company_admin_get_license_from_id_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminGetLicenseFromId'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\BlockIomadCompanyAdminGetLicenseFromId200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function blockIomadCompanyAdminGetLicenseFromId($block_iomad_company_admin_get_license_from_id_request, string $contentType = self::contentTypes['blockIomadCompanyAdminGetLicenseFromId'][0])
    {
        list($response) = $this->blockIomadCompanyAdminGetLicenseFromIdWithHttpInfo($block_iomad_company_admin_get_license_from_id_request, $contentType);
        return $response;
    }

    /**
     * Operation blockIomadCompanyAdminGetLicenseFromIdWithHttpInfo
     *
     * Get licence data give the ID
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminGetLicenseFromIdRequest $block_iomad_company_admin_get_license_from_id_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminGetLicenseFromId'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\BlockIomadCompanyAdminGetLicenseFromId200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function blockIomadCompanyAdminGetLicenseFromIdWithHttpInfo($block_iomad_company_admin_get_license_from_id_request, string $contentType = self::contentTypes['blockIomadCompanyAdminGetLicenseFromId'][0])
    {
        $request = $this->blockIomadCompanyAdminGetLicenseFromIdRequest($block_iomad_company_admin_get_license_from_id_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\BlockIomadCompanyAdminGetLicenseFromId200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\BlockIomadCompanyAdminGetLicenseFromId200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BlockIomadCompanyAdminGetLicenseFromId200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\BlockIomadCompanyAdminGetLicenseFromId200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BlockIomadCompanyAdminGetLicenseFromId200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation blockIomadCompanyAdminGetLicenseFromIdAsync
     *
     * Get licence data give the ID
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminGetLicenseFromIdRequest $block_iomad_company_admin_get_license_from_id_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminGetLicenseFromId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function blockIomadCompanyAdminGetLicenseFromIdAsync($block_iomad_company_admin_get_license_from_id_request, string $contentType = self::contentTypes['blockIomadCompanyAdminGetLicenseFromId'][0])
    {
        return $this->blockIomadCompanyAdminGetLicenseFromIdAsyncWithHttpInfo($block_iomad_company_admin_get_license_from_id_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation blockIomadCompanyAdminGetLicenseFromIdAsyncWithHttpInfo
     *
     * Get licence data give the ID
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminGetLicenseFromIdRequest $block_iomad_company_admin_get_license_from_id_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminGetLicenseFromId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function blockIomadCompanyAdminGetLicenseFromIdAsyncWithHttpInfo($block_iomad_company_admin_get_license_from_id_request, string $contentType = self::contentTypes['blockIomadCompanyAdminGetLicenseFromId'][0])
    {
        $returnType = '\OpenAPI\Client\Model\BlockIomadCompanyAdminGetLicenseFromId200Response';
        $request = $this->blockIomadCompanyAdminGetLicenseFromIdRequest($block_iomad_company_admin_get_license_from_id_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'blockIomadCompanyAdminGetLicenseFromId'
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminGetLicenseFromIdRequest $block_iomad_company_admin_get_license_from_id_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminGetLicenseFromId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function blockIomadCompanyAdminGetLicenseFromIdRequest($block_iomad_company_admin_get_license_from_id_request, string $contentType = self::contentTypes['blockIomadCompanyAdminGetLicenseFromId'][0])
    {

        // verify the required parameter 'block_iomad_company_admin_get_license_from_id_request' is set
        if ($block_iomad_company_admin_get_license_from_id_request === null || (is_array($block_iomad_company_admin_get_license_from_id_request) && count($block_iomad_company_admin_get_license_from_id_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $block_iomad_company_admin_get_license_from_id_request when calling blockIomadCompanyAdminGetLicenseFromId'
            );
        }


        $resourcePath = '/block_iomad_company_admin_get_license_from_id';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($block_iomad_company_admin_get_license_from_id_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($block_iomad_company_admin_get_license_from_id_request));
            } else {
                $httpBody = $block_iomad_company_admin_get_license_from_id_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation blockIomadCompanyAdminGetLicenseInfo
     *
     * Get company license information
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminGetLicenseInfoRequest $block_iomad_company_admin_get_license_info_request block_iomad_company_admin_get_license_info_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminGetLicenseInfo'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\BlockIomadCompanyAdminGetLicenseInfo200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function blockIomadCompanyAdminGetLicenseInfo($block_iomad_company_admin_get_license_info_request, string $contentType = self::contentTypes['blockIomadCompanyAdminGetLicenseInfo'][0])
    {
        list($response) = $this->blockIomadCompanyAdminGetLicenseInfoWithHttpInfo($block_iomad_company_admin_get_license_info_request, $contentType);
        return $response;
    }

    /**
     * Operation blockIomadCompanyAdminGetLicenseInfoWithHttpInfo
     *
     * Get company license information
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminGetLicenseInfoRequest $block_iomad_company_admin_get_license_info_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminGetLicenseInfo'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\BlockIomadCompanyAdminGetLicenseInfo200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function blockIomadCompanyAdminGetLicenseInfoWithHttpInfo($block_iomad_company_admin_get_license_info_request, string $contentType = self::contentTypes['blockIomadCompanyAdminGetLicenseInfo'][0])
    {
        $request = $this->blockIomadCompanyAdminGetLicenseInfoRequest($block_iomad_company_admin_get_license_info_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\BlockIomadCompanyAdminGetLicenseInfo200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\BlockIomadCompanyAdminGetLicenseInfo200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BlockIomadCompanyAdminGetLicenseInfo200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\BlockIomadCompanyAdminGetLicenseInfo200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BlockIomadCompanyAdminGetLicenseInfo200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation blockIomadCompanyAdminGetLicenseInfoAsync
     *
     * Get company license information
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminGetLicenseInfoRequest $block_iomad_company_admin_get_license_info_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminGetLicenseInfo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function blockIomadCompanyAdminGetLicenseInfoAsync($block_iomad_company_admin_get_license_info_request, string $contentType = self::contentTypes['blockIomadCompanyAdminGetLicenseInfo'][0])
    {
        return $this->blockIomadCompanyAdminGetLicenseInfoAsyncWithHttpInfo($block_iomad_company_admin_get_license_info_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation blockIomadCompanyAdminGetLicenseInfoAsyncWithHttpInfo
     *
     * Get company license information
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminGetLicenseInfoRequest $block_iomad_company_admin_get_license_info_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminGetLicenseInfo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function blockIomadCompanyAdminGetLicenseInfoAsyncWithHttpInfo($block_iomad_company_admin_get_license_info_request, string $contentType = self::contentTypes['blockIomadCompanyAdminGetLicenseInfo'][0])
    {
        $returnType = '\OpenAPI\Client\Model\BlockIomadCompanyAdminGetLicenseInfo200Response';
        $request = $this->blockIomadCompanyAdminGetLicenseInfoRequest($block_iomad_company_admin_get_license_info_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'blockIomadCompanyAdminGetLicenseInfo'
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminGetLicenseInfoRequest $block_iomad_company_admin_get_license_info_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminGetLicenseInfo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function blockIomadCompanyAdminGetLicenseInfoRequest($block_iomad_company_admin_get_license_info_request, string $contentType = self::contentTypes['blockIomadCompanyAdminGetLicenseInfo'][0])
    {

        // verify the required parameter 'block_iomad_company_admin_get_license_info_request' is set
        if ($block_iomad_company_admin_get_license_info_request === null || (is_array($block_iomad_company_admin_get_license_info_request) && count($block_iomad_company_admin_get_license_info_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $block_iomad_company_admin_get_license_info_request when calling blockIomadCompanyAdminGetLicenseInfo'
            );
        }


        $resourcePath = '/block_iomad_company_admin_get_license_info';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($block_iomad_company_admin_get_license_info_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($block_iomad_company_admin_get_license_info_request));
            } else {
                $httpBody = $block_iomad_company_admin_get_license_info_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation blockIomadCompanyAdminMoveUsers
     *
     * Move users between departments
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminMoveUsersRequest $block_iomad_company_admin_move_users_request block_iomad_company_admin_move_users_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminMoveUsers'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object|\OpenAPI\Client\Model\ErrorResponse
     */
    public function blockIomadCompanyAdminMoveUsers($block_iomad_company_admin_move_users_request, string $contentType = self::contentTypes['blockIomadCompanyAdminMoveUsers'][0])
    {
        list($response) = $this->blockIomadCompanyAdminMoveUsersWithHttpInfo($block_iomad_company_admin_move_users_request, $contentType);
        return $response;
    }

    /**
     * Operation blockIomadCompanyAdminMoveUsersWithHttpInfo
     *
     * Move users between departments
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminMoveUsersRequest $block_iomad_company_admin_move_users_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminMoveUsers'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function blockIomadCompanyAdminMoveUsersWithHttpInfo($block_iomad_company_admin_move_users_request, string $contentType = self::contentTypes['blockIomadCompanyAdminMoveUsers'][0])
    {
        $request = $this->blockIomadCompanyAdminMoveUsersRequest($block_iomad_company_admin_move_users_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation blockIomadCompanyAdminMoveUsersAsync
     *
     * Move users between departments
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminMoveUsersRequest $block_iomad_company_admin_move_users_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminMoveUsers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function blockIomadCompanyAdminMoveUsersAsync($block_iomad_company_admin_move_users_request, string $contentType = self::contentTypes['blockIomadCompanyAdminMoveUsers'][0])
    {
        return $this->blockIomadCompanyAdminMoveUsersAsyncWithHttpInfo($block_iomad_company_admin_move_users_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation blockIomadCompanyAdminMoveUsersAsyncWithHttpInfo
     *
     * Move users between departments
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminMoveUsersRequest $block_iomad_company_admin_move_users_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminMoveUsers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function blockIomadCompanyAdminMoveUsersAsyncWithHttpInfo($block_iomad_company_admin_move_users_request, string $contentType = self::contentTypes['blockIomadCompanyAdminMoveUsers'][0])
    {
        $returnType = 'object';
        $request = $this->blockIomadCompanyAdminMoveUsersRequest($block_iomad_company_admin_move_users_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'blockIomadCompanyAdminMoveUsers'
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminMoveUsersRequest $block_iomad_company_admin_move_users_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminMoveUsers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function blockIomadCompanyAdminMoveUsersRequest($block_iomad_company_admin_move_users_request, string $contentType = self::contentTypes['blockIomadCompanyAdminMoveUsers'][0])
    {

        // verify the required parameter 'block_iomad_company_admin_move_users_request' is set
        if ($block_iomad_company_admin_move_users_request === null || (is_array($block_iomad_company_admin_move_users_request) && count($block_iomad_company_admin_move_users_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $block_iomad_company_admin_move_users_request when calling blockIomadCompanyAdminMoveUsers'
            );
        }


        $resourcePath = '/block_iomad_company_admin_move_users';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($block_iomad_company_admin_move_users_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($block_iomad_company_admin_move_users_request));
            } else {
                $httpBody = $block_iomad_company_admin_move_users_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation blockIomadCompanyAdminRestrictCapability
     *
     * set/reset Iomad capability
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminRestrictCapabilityRequest $block_iomad_company_admin_restrict_capability_request block_iomad_company_admin_restrict_capability_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminRestrictCapability'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object|\OpenAPI\Client\Model\ErrorResponse
     */
    public function blockIomadCompanyAdminRestrictCapability($block_iomad_company_admin_restrict_capability_request, string $contentType = self::contentTypes['blockIomadCompanyAdminRestrictCapability'][0])
    {
        list($response) = $this->blockIomadCompanyAdminRestrictCapabilityWithHttpInfo($block_iomad_company_admin_restrict_capability_request, $contentType);
        return $response;
    }

    /**
     * Operation blockIomadCompanyAdminRestrictCapabilityWithHttpInfo
     *
     * set/reset Iomad capability
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminRestrictCapabilityRequest $block_iomad_company_admin_restrict_capability_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminRestrictCapability'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function blockIomadCompanyAdminRestrictCapabilityWithHttpInfo($block_iomad_company_admin_restrict_capability_request, string $contentType = self::contentTypes['blockIomadCompanyAdminRestrictCapability'][0])
    {
        $request = $this->blockIomadCompanyAdminRestrictCapabilityRequest($block_iomad_company_admin_restrict_capability_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation blockIomadCompanyAdminRestrictCapabilityAsync
     *
     * set/reset Iomad capability
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminRestrictCapabilityRequest $block_iomad_company_admin_restrict_capability_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminRestrictCapability'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function blockIomadCompanyAdminRestrictCapabilityAsync($block_iomad_company_admin_restrict_capability_request, string $contentType = self::contentTypes['blockIomadCompanyAdminRestrictCapability'][0])
    {
        return $this->blockIomadCompanyAdminRestrictCapabilityAsyncWithHttpInfo($block_iomad_company_admin_restrict_capability_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation blockIomadCompanyAdminRestrictCapabilityAsyncWithHttpInfo
     *
     * set/reset Iomad capability
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminRestrictCapabilityRequest $block_iomad_company_admin_restrict_capability_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminRestrictCapability'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function blockIomadCompanyAdminRestrictCapabilityAsyncWithHttpInfo($block_iomad_company_admin_restrict_capability_request, string $contentType = self::contentTypes['blockIomadCompanyAdminRestrictCapability'][0])
    {
        $returnType = 'object';
        $request = $this->blockIomadCompanyAdminRestrictCapabilityRequest($block_iomad_company_admin_restrict_capability_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'blockIomadCompanyAdminRestrictCapability'
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminRestrictCapabilityRequest $block_iomad_company_admin_restrict_capability_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminRestrictCapability'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function blockIomadCompanyAdminRestrictCapabilityRequest($block_iomad_company_admin_restrict_capability_request, string $contentType = self::contentTypes['blockIomadCompanyAdminRestrictCapability'][0])
    {

        // verify the required parameter 'block_iomad_company_admin_restrict_capability_request' is set
        if ($block_iomad_company_admin_restrict_capability_request === null || (is_array($block_iomad_company_admin_restrict_capability_request) && count($block_iomad_company_admin_restrict_capability_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $block_iomad_company_admin_restrict_capability_request when calling blockIomadCompanyAdminRestrictCapability'
            );
        }


        $resourcePath = '/block_iomad_company_admin_restrict_capability';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($block_iomad_company_admin_restrict_capability_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($block_iomad_company_admin_restrict_capability_request));
            } else {
                $httpBody = $block_iomad_company_admin_restrict_capability_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation blockIomadCompanyAdminSyncUsers
     *
     * Call update users to sync to external system
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminSyncUsersRequest $block_iomad_company_admin_sync_users_request block_iomad_company_admin_sync_users_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminSyncUsers'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\BlockIomadCompanyAdminSyncUsers200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function blockIomadCompanyAdminSyncUsers($block_iomad_company_admin_sync_users_request, string $contentType = self::contentTypes['blockIomadCompanyAdminSyncUsers'][0])
    {
        list($response) = $this->blockIomadCompanyAdminSyncUsersWithHttpInfo($block_iomad_company_admin_sync_users_request, $contentType);
        return $response;
    }

    /**
     * Operation blockIomadCompanyAdminSyncUsersWithHttpInfo
     *
     * Call update users to sync to external system
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminSyncUsersRequest $block_iomad_company_admin_sync_users_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminSyncUsers'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\BlockIomadCompanyAdminSyncUsers200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function blockIomadCompanyAdminSyncUsersWithHttpInfo($block_iomad_company_admin_sync_users_request, string $contentType = self::contentTypes['blockIomadCompanyAdminSyncUsers'][0])
    {
        $request = $this->blockIomadCompanyAdminSyncUsersRequest($block_iomad_company_admin_sync_users_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\BlockIomadCompanyAdminSyncUsers200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\BlockIomadCompanyAdminSyncUsers200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BlockIomadCompanyAdminSyncUsers200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\BlockIomadCompanyAdminSyncUsers200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BlockIomadCompanyAdminSyncUsers200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation blockIomadCompanyAdminSyncUsersAsync
     *
     * Call update users to sync to external system
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminSyncUsersRequest $block_iomad_company_admin_sync_users_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminSyncUsers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function blockIomadCompanyAdminSyncUsersAsync($block_iomad_company_admin_sync_users_request, string $contentType = self::contentTypes['blockIomadCompanyAdminSyncUsers'][0])
    {
        return $this->blockIomadCompanyAdminSyncUsersAsyncWithHttpInfo($block_iomad_company_admin_sync_users_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation blockIomadCompanyAdminSyncUsersAsyncWithHttpInfo
     *
     * Call update users to sync to external system
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminSyncUsersRequest $block_iomad_company_admin_sync_users_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminSyncUsers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function blockIomadCompanyAdminSyncUsersAsyncWithHttpInfo($block_iomad_company_admin_sync_users_request, string $contentType = self::contentTypes['blockIomadCompanyAdminSyncUsers'][0])
    {
        $returnType = '\OpenAPI\Client\Model\BlockIomadCompanyAdminSyncUsers200Response';
        $request = $this->blockIomadCompanyAdminSyncUsersRequest($block_iomad_company_admin_sync_users_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'blockIomadCompanyAdminSyncUsers'
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminSyncUsersRequest $block_iomad_company_admin_sync_users_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminSyncUsers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function blockIomadCompanyAdminSyncUsersRequest($block_iomad_company_admin_sync_users_request, string $contentType = self::contentTypes['blockIomadCompanyAdminSyncUsers'][0])
    {

        // verify the required parameter 'block_iomad_company_admin_sync_users_request' is set
        if ($block_iomad_company_admin_sync_users_request === null || (is_array($block_iomad_company_admin_sync_users_request) && count($block_iomad_company_admin_sync_users_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $block_iomad_company_admin_sync_users_request when calling blockIomadCompanyAdminSyncUsers'
            );
        }


        $resourcePath = '/block_iomad_company_admin_sync_users';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($block_iomad_company_admin_sync_users_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($block_iomad_company_admin_sync_users_request));
            } else {
                $httpBody = $block_iomad_company_admin_sync_users_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation blockIomadCompanyAdminUnallocateLicenses
     *
     * Remove course licenses from users
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminUnallocateLicensesRequest $block_iomad_company_admin_unallocate_licenses_request block_iomad_company_admin_unallocate_licenses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminUnallocateLicenses'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object|\OpenAPI\Client\Model\ErrorResponse
     */
    public function blockIomadCompanyAdminUnallocateLicenses($block_iomad_company_admin_unallocate_licenses_request, string $contentType = self::contentTypes['blockIomadCompanyAdminUnallocateLicenses'][0])
    {
        list($response) = $this->blockIomadCompanyAdminUnallocateLicensesWithHttpInfo($block_iomad_company_admin_unallocate_licenses_request, $contentType);
        return $response;
    }

    /**
     * Operation blockIomadCompanyAdminUnallocateLicensesWithHttpInfo
     *
     * Remove course licenses from users
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminUnallocateLicensesRequest $block_iomad_company_admin_unallocate_licenses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminUnallocateLicenses'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function blockIomadCompanyAdminUnallocateLicensesWithHttpInfo($block_iomad_company_admin_unallocate_licenses_request, string $contentType = self::contentTypes['blockIomadCompanyAdminUnallocateLicenses'][0])
    {
        $request = $this->blockIomadCompanyAdminUnallocateLicensesRequest($block_iomad_company_admin_unallocate_licenses_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation blockIomadCompanyAdminUnallocateLicensesAsync
     *
     * Remove course licenses from users
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminUnallocateLicensesRequest $block_iomad_company_admin_unallocate_licenses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminUnallocateLicenses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function blockIomadCompanyAdminUnallocateLicensesAsync($block_iomad_company_admin_unallocate_licenses_request, string $contentType = self::contentTypes['blockIomadCompanyAdminUnallocateLicenses'][0])
    {
        return $this->blockIomadCompanyAdminUnallocateLicensesAsyncWithHttpInfo($block_iomad_company_admin_unallocate_licenses_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation blockIomadCompanyAdminUnallocateLicensesAsyncWithHttpInfo
     *
     * Remove course licenses from users
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminUnallocateLicensesRequest $block_iomad_company_admin_unallocate_licenses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminUnallocateLicenses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function blockIomadCompanyAdminUnallocateLicensesAsyncWithHttpInfo($block_iomad_company_admin_unallocate_licenses_request, string $contentType = self::contentTypes['blockIomadCompanyAdminUnallocateLicenses'][0])
    {
        $returnType = 'object';
        $request = $this->blockIomadCompanyAdminUnallocateLicensesRequest($block_iomad_company_admin_unallocate_licenses_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'blockIomadCompanyAdminUnallocateLicenses'
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminUnallocateLicensesRequest $block_iomad_company_admin_unallocate_licenses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminUnallocateLicenses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function blockIomadCompanyAdminUnallocateLicensesRequest($block_iomad_company_admin_unallocate_licenses_request, string $contentType = self::contentTypes['blockIomadCompanyAdminUnallocateLicenses'][0])
    {

        // verify the required parameter 'block_iomad_company_admin_unallocate_licenses_request' is set
        if ($block_iomad_company_admin_unallocate_licenses_request === null || (is_array($block_iomad_company_admin_unallocate_licenses_request) && count($block_iomad_company_admin_unallocate_licenses_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $block_iomad_company_admin_unallocate_licenses_request when calling blockIomadCompanyAdminUnallocateLicenses'
            );
        }


        $resourcePath = '/block_iomad_company_admin_unallocate_licenses';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($block_iomad_company_admin_unallocate_licenses_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($block_iomad_company_admin_unallocate_licenses_request));
            } else {
                $httpBody = $block_iomad_company_admin_unallocate_licenses_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation blockIomadCompanyAdminUnassignCourses
     *
     * Unassign a course from a company
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminUnassignCoursesRequest $block_iomad_company_admin_unassign_courses_request block_iomad_company_admin_unassign_courses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminUnassignCourses'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object|\OpenAPI\Client\Model\ErrorResponse
     */
    public function blockIomadCompanyAdminUnassignCourses($block_iomad_company_admin_unassign_courses_request, string $contentType = self::contentTypes['blockIomadCompanyAdminUnassignCourses'][0])
    {
        list($response) = $this->blockIomadCompanyAdminUnassignCoursesWithHttpInfo($block_iomad_company_admin_unassign_courses_request, $contentType);
        return $response;
    }

    /**
     * Operation blockIomadCompanyAdminUnassignCoursesWithHttpInfo
     *
     * Unassign a course from a company
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminUnassignCoursesRequest $block_iomad_company_admin_unassign_courses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminUnassignCourses'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function blockIomadCompanyAdminUnassignCoursesWithHttpInfo($block_iomad_company_admin_unassign_courses_request, string $contentType = self::contentTypes['blockIomadCompanyAdminUnassignCourses'][0])
    {
        $request = $this->blockIomadCompanyAdminUnassignCoursesRequest($block_iomad_company_admin_unassign_courses_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation blockIomadCompanyAdminUnassignCoursesAsync
     *
     * Unassign a course from a company
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminUnassignCoursesRequest $block_iomad_company_admin_unassign_courses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminUnassignCourses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function blockIomadCompanyAdminUnassignCoursesAsync($block_iomad_company_admin_unassign_courses_request, string $contentType = self::contentTypes['blockIomadCompanyAdminUnassignCourses'][0])
    {
        return $this->blockIomadCompanyAdminUnassignCoursesAsyncWithHttpInfo($block_iomad_company_admin_unassign_courses_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation blockIomadCompanyAdminUnassignCoursesAsyncWithHttpInfo
     *
     * Unassign a course from a company
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminUnassignCoursesRequest $block_iomad_company_admin_unassign_courses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminUnassignCourses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function blockIomadCompanyAdminUnassignCoursesAsyncWithHttpInfo($block_iomad_company_admin_unassign_courses_request, string $contentType = self::contentTypes['blockIomadCompanyAdminUnassignCourses'][0])
    {
        $returnType = 'object';
        $request = $this->blockIomadCompanyAdminUnassignCoursesRequest($block_iomad_company_admin_unassign_courses_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'blockIomadCompanyAdminUnassignCourses'
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminUnassignCoursesRequest $block_iomad_company_admin_unassign_courses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminUnassignCourses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function blockIomadCompanyAdminUnassignCoursesRequest($block_iomad_company_admin_unassign_courses_request, string $contentType = self::contentTypes['blockIomadCompanyAdminUnassignCourses'][0])
    {

        // verify the required parameter 'block_iomad_company_admin_unassign_courses_request' is set
        if ($block_iomad_company_admin_unassign_courses_request === null || (is_array($block_iomad_company_admin_unassign_courses_request) && count($block_iomad_company_admin_unassign_courses_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $block_iomad_company_admin_unassign_courses_request when calling blockIomadCompanyAdminUnassignCourses'
            );
        }


        $resourcePath = '/block_iomad_company_admin_unassign_courses';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($block_iomad_company_admin_unassign_courses_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($block_iomad_company_admin_unassign_courses_request));
            } else {
                $httpBody = $block_iomad_company_admin_unassign_courses_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation blockIomadCompanyAdminUnassignUsers
     *
     * Unassign users from a company
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminUnassignUsersRequest $block_iomad_company_admin_unassign_users_request block_iomad_company_admin_unassign_users_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminUnassignUsers'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object|\OpenAPI\Client\Model\ErrorResponse
     */
    public function blockIomadCompanyAdminUnassignUsers($block_iomad_company_admin_unassign_users_request, string $contentType = self::contentTypes['blockIomadCompanyAdminUnassignUsers'][0])
    {
        list($response) = $this->blockIomadCompanyAdminUnassignUsersWithHttpInfo($block_iomad_company_admin_unassign_users_request, $contentType);
        return $response;
    }

    /**
     * Operation blockIomadCompanyAdminUnassignUsersWithHttpInfo
     *
     * Unassign users from a company
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminUnassignUsersRequest $block_iomad_company_admin_unassign_users_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminUnassignUsers'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function blockIomadCompanyAdminUnassignUsersWithHttpInfo($block_iomad_company_admin_unassign_users_request, string $contentType = self::contentTypes['blockIomadCompanyAdminUnassignUsers'][0])
    {
        $request = $this->blockIomadCompanyAdminUnassignUsersRequest($block_iomad_company_admin_unassign_users_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation blockIomadCompanyAdminUnassignUsersAsync
     *
     * Unassign users from a company
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminUnassignUsersRequest $block_iomad_company_admin_unassign_users_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminUnassignUsers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function blockIomadCompanyAdminUnassignUsersAsync($block_iomad_company_admin_unassign_users_request, string $contentType = self::contentTypes['blockIomadCompanyAdminUnassignUsers'][0])
    {
        return $this->blockIomadCompanyAdminUnassignUsersAsyncWithHttpInfo($block_iomad_company_admin_unassign_users_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation blockIomadCompanyAdminUnassignUsersAsyncWithHttpInfo
     *
     * Unassign users from a company
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminUnassignUsersRequest $block_iomad_company_admin_unassign_users_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminUnassignUsers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function blockIomadCompanyAdminUnassignUsersAsyncWithHttpInfo($block_iomad_company_admin_unassign_users_request, string $contentType = self::contentTypes['blockIomadCompanyAdminUnassignUsers'][0])
    {
        $returnType = 'object';
        $request = $this->blockIomadCompanyAdminUnassignUsersRequest($block_iomad_company_admin_unassign_users_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'blockIomadCompanyAdminUnassignUsers'
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminUnassignUsersRequest $block_iomad_company_admin_unassign_users_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminUnassignUsers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function blockIomadCompanyAdminUnassignUsersRequest($block_iomad_company_admin_unassign_users_request, string $contentType = self::contentTypes['blockIomadCompanyAdminUnassignUsers'][0])
    {

        // verify the required parameter 'block_iomad_company_admin_unassign_users_request' is set
        if ($block_iomad_company_admin_unassign_users_request === null || (is_array($block_iomad_company_admin_unassign_users_request) && count($block_iomad_company_admin_unassign_users_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $block_iomad_company_admin_unassign_users_request when calling blockIomadCompanyAdminUnassignUsers'
            );
        }


        $resourcePath = '/block_iomad_company_admin_unassign_users';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($block_iomad_company_admin_unassign_users_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($block_iomad_company_admin_unassign_users_request));
            } else {
                $httpBody = $block_iomad_company_admin_unassign_users_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation blockIomadCompanyAdminUpdateCourses
     *
     * Update Iomad course settings
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminUpdateCoursesRequest $block_iomad_company_admin_update_courses_request block_iomad_company_admin_update_courses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminUpdateCourses'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object|\OpenAPI\Client\Model\ErrorResponse
     */
    public function blockIomadCompanyAdminUpdateCourses($block_iomad_company_admin_update_courses_request, string $contentType = self::contentTypes['blockIomadCompanyAdminUpdateCourses'][0])
    {
        list($response) = $this->blockIomadCompanyAdminUpdateCoursesWithHttpInfo($block_iomad_company_admin_update_courses_request, $contentType);
        return $response;
    }

    /**
     * Operation blockIomadCompanyAdminUpdateCoursesWithHttpInfo
     *
     * Update Iomad course settings
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminUpdateCoursesRequest $block_iomad_company_admin_update_courses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminUpdateCourses'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function blockIomadCompanyAdminUpdateCoursesWithHttpInfo($block_iomad_company_admin_update_courses_request, string $contentType = self::contentTypes['blockIomadCompanyAdminUpdateCourses'][0])
    {
        $request = $this->blockIomadCompanyAdminUpdateCoursesRequest($block_iomad_company_admin_update_courses_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation blockIomadCompanyAdminUpdateCoursesAsync
     *
     * Update Iomad course settings
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminUpdateCoursesRequest $block_iomad_company_admin_update_courses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminUpdateCourses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function blockIomadCompanyAdminUpdateCoursesAsync($block_iomad_company_admin_update_courses_request, string $contentType = self::contentTypes['blockIomadCompanyAdminUpdateCourses'][0])
    {
        return $this->blockIomadCompanyAdminUpdateCoursesAsyncWithHttpInfo($block_iomad_company_admin_update_courses_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation blockIomadCompanyAdminUpdateCoursesAsyncWithHttpInfo
     *
     * Update Iomad course settings
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminUpdateCoursesRequest $block_iomad_company_admin_update_courses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminUpdateCourses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function blockIomadCompanyAdminUpdateCoursesAsyncWithHttpInfo($block_iomad_company_admin_update_courses_request, string $contentType = self::contentTypes['blockIomadCompanyAdminUpdateCourses'][0])
    {
        $returnType = 'object';
        $request = $this->blockIomadCompanyAdminUpdateCoursesRequest($block_iomad_company_admin_update_courses_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'blockIomadCompanyAdminUpdateCourses'
     *
     * @param  \OpenAPI\Client\Model\BlockIomadCompanyAdminUpdateCoursesRequest $block_iomad_company_admin_update_courses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockIomadCompanyAdminUpdateCourses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function blockIomadCompanyAdminUpdateCoursesRequest($block_iomad_company_admin_update_courses_request, string $contentType = self::contentTypes['blockIomadCompanyAdminUpdateCourses'][0])
    {

        // verify the required parameter 'block_iomad_company_admin_update_courses_request' is set
        if ($block_iomad_company_admin_update_courses_request === null || (is_array($block_iomad_company_admin_update_courses_request) && count($block_iomad_company_admin_update_courses_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $block_iomad_company_admin_update_courses_request when calling blockIomadCompanyAdminUpdateCourses'
            );
        }


        $resourcePath = '/block_iomad_company_admin_update_courses';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($block_iomad_company_admin_update_courses_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($block_iomad_company_admin_update_courses_request));
            } else {
                $httpBody = $block_iomad_company_admin_update_courses_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
