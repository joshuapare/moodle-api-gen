<?php
/**
 * ModWorkshopApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * ModWorkshopApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ModWorkshopApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'modWorkshopAddSubmission' => [
            'application/json',
        ],
        'modWorkshopDeleteSubmission' => [
            'application/json',
        ],
        'modWorkshopEvaluateAssessment' => [
            'application/json',
        ],
        'modWorkshopEvaluateSubmission' => [
            'application/json',
        ],
        'modWorkshopGetAssessment' => [
            'application/json',
        ],
        'modWorkshopGetAssessmentFormDefinition' => [
            'application/json',
        ],
        'modWorkshopGetGrades' => [
            'application/json',
        ],
        'modWorkshopGetGradesReport' => [
            'application/json',
        ],
        'modWorkshopGetReviewerAssessments' => [
            'application/json',
        ],
        'modWorkshopGetSubmission' => [
            'application/json',
        ],
        'modWorkshopGetSubmissionAssessments' => [
            'application/json',
        ],
        'modWorkshopGetSubmissions' => [
            'application/json',
        ],
        'modWorkshopGetUserPlan' => [
            'application/json',
        ],
        'modWorkshopGetWorkshopAccessInformation' => [
            'application/json',
        ],
        'modWorkshopGetWorkshopsByCourses' => [
            'application/json',
        ],
        'modWorkshopUpdateAssessment' => [
            'application/json',
        ],
        'modWorkshopUpdateSubmission' => [
            'application/json',
        ],
        'modWorkshopViewSubmission' => [
            'application/json',
        ],
        'modWorkshopViewWorkshop' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation modWorkshopAddSubmission
     *
     * Add a new submission to a given workshop.
     *
     * @param  \OpenAPI\Client\Model\ModWorkshopAddSubmissionRequest $mod_workshop_add_submission_request mod_workshop_add_submission_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modWorkshopAddSubmission'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModWorkshopAddSubmission200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modWorkshopAddSubmission($mod_workshop_add_submission_request, string $contentType = self::contentTypes['modWorkshopAddSubmission'][0])
    {
        list($response) = $this->modWorkshopAddSubmissionWithHttpInfo($mod_workshop_add_submission_request, $contentType);
        return $response;
    }

    /**
     * Operation modWorkshopAddSubmissionWithHttpInfo
     *
     * Add a new submission to a given workshop.
     *
     * @param  \OpenAPI\Client\Model\ModWorkshopAddSubmissionRequest $mod_workshop_add_submission_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modWorkshopAddSubmission'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModWorkshopAddSubmission200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modWorkshopAddSubmissionWithHttpInfo($mod_workshop_add_submission_request, string $contentType = self::contentTypes['modWorkshopAddSubmission'][0])
    {
        $request = $this->modWorkshopAddSubmissionRequest($mod_workshop_add_submission_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModWorkshopAddSubmission200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModWorkshopAddSubmission200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModWorkshopAddSubmission200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModWorkshopAddSubmission200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModWorkshopAddSubmission200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modWorkshopAddSubmissionAsync
     *
     * Add a new submission to a given workshop.
     *
     * @param  \OpenAPI\Client\Model\ModWorkshopAddSubmissionRequest $mod_workshop_add_submission_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modWorkshopAddSubmission'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modWorkshopAddSubmissionAsync($mod_workshop_add_submission_request, string $contentType = self::contentTypes['modWorkshopAddSubmission'][0])
    {
        return $this->modWorkshopAddSubmissionAsyncWithHttpInfo($mod_workshop_add_submission_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modWorkshopAddSubmissionAsyncWithHttpInfo
     *
     * Add a new submission to a given workshop.
     *
     * @param  \OpenAPI\Client\Model\ModWorkshopAddSubmissionRequest $mod_workshop_add_submission_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modWorkshopAddSubmission'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modWorkshopAddSubmissionAsyncWithHttpInfo($mod_workshop_add_submission_request, string $contentType = self::contentTypes['modWorkshopAddSubmission'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModWorkshopAddSubmission200Response';
        $request = $this->modWorkshopAddSubmissionRequest($mod_workshop_add_submission_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modWorkshopAddSubmission'
     *
     * @param  \OpenAPI\Client\Model\ModWorkshopAddSubmissionRequest $mod_workshop_add_submission_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modWorkshopAddSubmission'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modWorkshopAddSubmissionRequest($mod_workshop_add_submission_request, string $contentType = self::contentTypes['modWorkshopAddSubmission'][0])
    {

        // verify the required parameter 'mod_workshop_add_submission_request' is set
        if ($mod_workshop_add_submission_request === null || (is_array($mod_workshop_add_submission_request) && count($mod_workshop_add_submission_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_workshop_add_submission_request when calling modWorkshopAddSubmission'
            );
        }


        $resourcePath = '/mod_workshop_add_submission';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_workshop_add_submission_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_workshop_add_submission_request));
            } else {
                $httpBody = $mod_workshop_add_submission_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modWorkshopDeleteSubmission
     *
     * Deletes the given submission.
     *
     * @param  \OpenAPI\Client\Model\ModWorkshopDeleteSubmissionRequest $mod_workshop_delete_submission_request mod_workshop_delete_submission_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modWorkshopDeleteSubmission'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModWorkshopDeleteSubmission200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modWorkshopDeleteSubmission($mod_workshop_delete_submission_request, string $contentType = self::contentTypes['modWorkshopDeleteSubmission'][0])
    {
        list($response) = $this->modWorkshopDeleteSubmissionWithHttpInfo($mod_workshop_delete_submission_request, $contentType);
        return $response;
    }

    /**
     * Operation modWorkshopDeleteSubmissionWithHttpInfo
     *
     * Deletes the given submission.
     *
     * @param  \OpenAPI\Client\Model\ModWorkshopDeleteSubmissionRequest $mod_workshop_delete_submission_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modWorkshopDeleteSubmission'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModWorkshopDeleteSubmission200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modWorkshopDeleteSubmissionWithHttpInfo($mod_workshop_delete_submission_request, string $contentType = self::contentTypes['modWorkshopDeleteSubmission'][0])
    {
        $request = $this->modWorkshopDeleteSubmissionRequest($mod_workshop_delete_submission_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModWorkshopDeleteSubmission200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModWorkshopDeleteSubmission200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModWorkshopDeleteSubmission200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModWorkshopDeleteSubmission200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModWorkshopDeleteSubmission200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modWorkshopDeleteSubmissionAsync
     *
     * Deletes the given submission.
     *
     * @param  \OpenAPI\Client\Model\ModWorkshopDeleteSubmissionRequest $mod_workshop_delete_submission_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modWorkshopDeleteSubmission'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modWorkshopDeleteSubmissionAsync($mod_workshop_delete_submission_request, string $contentType = self::contentTypes['modWorkshopDeleteSubmission'][0])
    {
        return $this->modWorkshopDeleteSubmissionAsyncWithHttpInfo($mod_workshop_delete_submission_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modWorkshopDeleteSubmissionAsyncWithHttpInfo
     *
     * Deletes the given submission.
     *
     * @param  \OpenAPI\Client\Model\ModWorkshopDeleteSubmissionRequest $mod_workshop_delete_submission_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modWorkshopDeleteSubmission'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modWorkshopDeleteSubmissionAsyncWithHttpInfo($mod_workshop_delete_submission_request, string $contentType = self::contentTypes['modWorkshopDeleteSubmission'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModWorkshopDeleteSubmission200Response';
        $request = $this->modWorkshopDeleteSubmissionRequest($mod_workshop_delete_submission_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modWorkshopDeleteSubmission'
     *
     * @param  \OpenAPI\Client\Model\ModWorkshopDeleteSubmissionRequest $mod_workshop_delete_submission_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modWorkshopDeleteSubmission'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modWorkshopDeleteSubmissionRequest($mod_workshop_delete_submission_request, string $contentType = self::contentTypes['modWorkshopDeleteSubmission'][0])
    {

        // verify the required parameter 'mod_workshop_delete_submission_request' is set
        if ($mod_workshop_delete_submission_request === null || (is_array($mod_workshop_delete_submission_request) && count($mod_workshop_delete_submission_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_workshop_delete_submission_request when calling modWorkshopDeleteSubmission'
            );
        }


        $resourcePath = '/mod_workshop_delete_submission';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_workshop_delete_submission_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_workshop_delete_submission_request));
            } else {
                $httpBody = $mod_workshop_delete_submission_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modWorkshopEvaluateAssessment
     *
     * Evaluates an assessment (used by teachers for provide feedback to the reviewer).
     *
     * @param  \OpenAPI\Client\Model\ModWorkshopEvaluateAssessmentRequest $mod_workshop_evaluate_assessment_request mod_workshop_evaluate_assessment_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modWorkshopEvaluateAssessment'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModWorkshopEvaluateAssessment200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modWorkshopEvaluateAssessment($mod_workshop_evaluate_assessment_request, string $contentType = self::contentTypes['modWorkshopEvaluateAssessment'][0])
    {
        list($response) = $this->modWorkshopEvaluateAssessmentWithHttpInfo($mod_workshop_evaluate_assessment_request, $contentType);
        return $response;
    }

    /**
     * Operation modWorkshopEvaluateAssessmentWithHttpInfo
     *
     * Evaluates an assessment (used by teachers for provide feedback to the reviewer).
     *
     * @param  \OpenAPI\Client\Model\ModWorkshopEvaluateAssessmentRequest $mod_workshop_evaluate_assessment_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modWorkshopEvaluateAssessment'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModWorkshopEvaluateAssessment200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modWorkshopEvaluateAssessmentWithHttpInfo($mod_workshop_evaluate_assessment_request, string $contentType = self::contentTypes['modWorkshopEvaluateAssessment'][0])
    {
        $request = $this->modWorkshopEvaluateAssessmentRequest($mod_workshop_evaluate_assessment_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModWorkshopEvaluateAssessment200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModWorkshopEvaluateAssessment200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModWorkshopEvaluateAssessment200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModWorkshopEvaluateAssessment200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModWorkshopEvaluateAssessment200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modWorkshopEvaluateAssessmentAsync
     *
     * Evaluates an assessment (used by teachers for provide feedback to the reviewer).
     *
     * @param  \OpenAPI\Client\Model\ModWorkshopEvaluateAssessmentRequest $mod_workshop_evaluate_assessment_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modWorkshopEvaluateAssessment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modWorkshopEvaluateAssessmentAsync($mod_workshop_evaluate_assessment_request, string $contentType = self::contentTypes['modWorkshopEvaluateAssessment'][0])
    {
        return $this->modWorkshopEvaluateAssessmentAsyncWithHttpInfo($mod_workshop_evaluate_assessment_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modWorkshopEvaluateAssessmentAsyncWithHttpInfo
     *
     * Evaluates an assessment (used by teachers for provide feedback to the reviewer).
     *
     * @param  \OpenAPI\Client\Model\ModWorkshopEvaluateAssessmentRequest $mod_workshop_evaluate_assessment_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modWorkshopEvaluateAssessment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modWorkshopEvaluateAssessmentAsyncWithHttpInfo($mod_workshop_evaluate_assessment_request, string $contentType = self::contentTypes['modWorkshopEvaluateAssessment'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModWorkshopEvaluateAssessment200Response';
        $request = $this->modWorkshopEvaluateAssessmentRequest($mod_workshop_evaluate_assessment_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modWorkshopEvaluateAssessment'
     *
     * @param  \OpenAPI\Client\Model\ModWorkshopEvaluateAssessmentRequest $mod_workshop_evaluate_assessment_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modWorkshopEvaluateAssessment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modWorkshopEvaluateAssessmentRequest($mod_workshop_evaluate_assessment_request, string $contentType = self::contentTypes['modWorkshopEvaluateAssessment'][0])
    {

        // verify the required parameter 'mod_workshop_evaluate_assessment_request' is set
        if ($mod_workshop_evaluate_assessment_request === null || (is_array($mod_workshop_evaluate_assessment_request) && count($mod_workshop_evaluate_assessment_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_workshop_evaluate_assessment_request when calling modWorkshopEvaluateAssessment'
            );
        }


        $resourcePath = '/mod_workshop_evaluate_assessment';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_workshop_evaluate_assessment_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_workshop_evaluate_assessment_request));
            } else {
                $httpBody = $mod_workshop_evaluate_assessment_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modWorkshopEvaluateSubmission
     *
     * Evaluates a submission (used by teachers for provide feedback or override the submission grade).
     *
     * @param  \OpenAPI\Client\Model\ModWorkshopEvaluateSubmissionRequest $mod_workshop_evaluate_submission_request mod_workshop_evaluate_submission_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modWorkshopEvaluateSubmission'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModWorkshopEvaluateSubmission200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modWorkshopEvaluateSubmission($mod_workshop_evaluate_submission_request, string $contentType = self::contentTypes['modWorkshopEvaluateSubmission'][0])
    {
        list($response) = $this->modWorkshopEvaluateSubmissionWithHttpInfo($mod_workshop_evaluate_submission_request, $contentType);
        return $response;
    }

    /**
     * Operation modWorkshopEvaluateSubmissionWithHttpInfo
     *
     * Evaluates a submission (used by teachers for provide feedback or override the submission grade).
     *
     * @param  \OpenAPI\Client\Model\ModWorkshopEvaluateSubmissionRequest $mod_workshop_evaluate_submission_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modWorkshopEvaluateSubmission'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModWorkshopEvaluateSubmission200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modWorkshopEvaluateSubmissionWithHttpInfo($mod_workshop_evaluate_submission_request, string $contentType = self::contentTypes['modWorkshopEvaluateSubmission'][0])
    {
        $request = $this->modWorkshopEvaluateSubmissionRequest($mod_workshop_evaluate_submission_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModWorkshopEvaluateSubmission200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModWorkshopEvaluateSubmission200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModWorkshopEvaluateSubmission200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModWorkshopEvaluateSubmission200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModWorkshopEvaluateSubmission200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modWorkshopEvaluateSubmissionAsync
     *
     * Evaluates a submission (used by teachers for provide feedback or override the submission grade).
     *
     * @param  \OpenAPI\Client\Model\ModWorkshopEvaluateSubmissionRequest $mod_workshop_evaluate_submission_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modWorkshopEvaluateSubmission'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modWorkshopEvaluateSubmissionAsync($mod_workshop_evaluate_submission_request, string $contentType = self::contentTypes['modWorkshopEvaluateSubmission'][0])
    {
        return $this->modWorkshopEvaluateSubmissionAsyncWithHttpInfo($mod_workshop_evaluate_submission_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modWorkshopEvaluateSubmissionAsyncWithHttpInfo
     *
     * Evaluates a submission (used by teachers for provide feedback or override the submission grade).
     *
     * @param  \OpenAPI\Client\Model\ModWorkshopEvaluateSubmissionRequest $mod_workshop_evaluate_submission_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modWorkshopEvaluateSubmission'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modWorkshopEvaluateSubmissionAsyncWithHttpInfo($mod_workshop_evaluate_submission_request, string $contentType = self::contentTypes['modWorkshopEvaluateSubmission'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModWorkshopEvaluateSubmission200Response';
        $request = $this->modWorkshopEvaluateSubmissionRequest($mod_workshop_evaluate_submission_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modWorkshopEvaluateSubmission'
     *
     * @param  \OpenAPI\Client\Model\ModWorkshopEvaluateSubmissionRequest $mod_workshop_evaluate_submission_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modWorkshopEvaluateSubmission'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modWorkshopEvaluateSubmissionRequest($mod_workshop_evaluate_submission_request, string $contentType = self::contentTypes['modWorkshopEvaluateSubmission'][0])
    {

        // verify the required parameter 'mod_workshop_evaluate_submission_request' is set
        if ($mod_workshop_evaluate_submission_request === null || (is_array($mod_workshop_evaluate_submission_request) && count($mod_workshop_evaluate_submission_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_workshop_evaluate_submission_request when calling modWorkshopEvaluateSubmission'
            );
        }


        $resourcePath = '/mod_workshop_evaluate_submission';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_workshop_evaluate_submission_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_workshop_evaluate_submission_request));
            } else {
                $httpBody = $mod_workshop_evaluate_submission_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modWorkshopGetAssessment
     *
     * Retrieves the given assessment.
     *
     * @param  \OpenAPI\Client\Model\ModWorkshopGetAssessmentRequest $mod_workshop_get_assessment_request mod_workshop_get_assessment_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modWorkshopGetAssessment'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModWorkshopGetAssessment200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modWorkshopGetAssessment($mod_workshop_get_assessment_request, string $contentType = self::contentTypes['modWorkshopGetAssessment'][0])
    {
        list($response) = $this->modWorkshopGetAssessmentWithHttpInfo($mod_workshop_get_assessment_request, $contentType);
        return $response;
    }

    /**
     * Operation modWorkshopGetAssessmentWithHttpInfo
     *
     * Retrieves the given assessment.
     *
     * @param  \OpenAPI\Client\Model\ModWorkshopGetAssessmentRequest $mod_workshop_get_assessment_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modWorkshopGetAssessment'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModWorkshopGetAssessment200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modWorkshopGetAssessmentWithHttpInfo($mod_workshop_get_assessment_request, string $contentType = self::contentTypes['modWorkshopGetAssessment'][0])
    {
        $request = $this->modWorkshopGetAssessmentRequest($mod_workshop_get_assessment_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModWorkshopGetAssessment200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModWorkshopGetAssessment200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModWorkshopGetAssessment200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModWorkshopGetAssessment200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModWorkshopGetAssessment200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modWorkshopGetAssessmentAsync
     *
     * Retrieves the given assessment.
     *
     * @param  \OpenAPI\Client\Model\ModWorkshopGetAssessmentRequest $mod_workshop_get_assessment_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modWorkshopGetAssessment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modWorkshopGetAssessmentAsync($mod_workshop_get_assessment_request, string $contentType = self::contentTypes['modWorkshopGetAssessment'][0])
    {
        return $this->modWorkshopGetAssessmentAsyncWithHttpInfo($mod_workshop_get_assessment_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modWorkshopGetAssessmentAsyncWithHttpInfo
     *
     * Retrieves the given assessment.
     *
     * @param  \OpenAPI\Client\Model\ModWorkshopGetAssessmentRequest $mod_workshop_get_assessment_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modWorkshopGetAssessment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modWorkshopGetAssessmentAsyncWithHttpInfo($mod_workshop_get_assessment_request, string $contentType = self::contentTypes['modWorkshopGetAssessment'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModWorkshopGetAssessment200Response';
        $request = $this->modWorkshopGetAssessmentRequest($mod_workshop_get_assessment_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modWorkshopGetAssessment'
     *
     * @param  \OpenAPI\Client\Model\ModWorkshopGetAssessmentRequest $mod_workshop_get_assessment_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modWorkshopGetAssessment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modWorkshopGetAssessmentRequest($mod_workshop_get_assessment_request, string $contentType = self::contentTypes['modWorkshopGetAssessment'][0])
    {

        // verify the required parameter 'mod_workshop_get_assessment_request' is set
        if ($mod_workshop_get_assessment_request === null || (is_array($mod_workshop_get_assessment_request) && count($mod_workshop_get_assessment_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_workshop_get_assessment_request when calling modWorkshopGetAssessment'
            );
        }


        $resourcePath = '/mod_workshop_get_assessment';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_workshop_get_assessment_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_workshop_get_assessment_request));
            } else {
                $httpBody = $mod_workshop_get_assessment_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modWorkshopGetAssessmentFormDefinition
     *
     * Retrieves the assessment form definition.
     *
     * @param  \OpenAPI\Client\Model\ModWorkshopGetAssessmentFormDefinitionRequest $mod_workshop_get_assessment_form_definition_request mod_workshop_get_assessment_form_definition_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modWorkshopGetAssessmentFormDefinition'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModWorkshopGetAssessmentFormDefinition200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modWorkshopGetAssessmentFormDefinition($mod_workshop_get_assessment_form_definition_request, string $contentType = self::contentTypes['modWorkshopGetAssessmentFormDefinition'][0])
    {
        list($response) = $this->modWorkshopGetAssessmentFormDefinitionWithHttpInfo($mod_workshop_get_assessment_form_definition_request, $contentType);
        return $response;
    }

    /**
     * Operation modWorkshopGetAssessmentFormDefinitionWithHttpInfo
     *
     * Retrieves the assessment form definition.
     *
     * @param  \OpenAPI\Client\Model\ModWorkshopGetAssessmentFormDefinitionRequest $mod_workshop_get_assessment_form_definition_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modWorkshopGetAssessmentFormDefinition'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModWorkshopGetAssessmentFormDefinition200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modWorkshopGetAssessmentFormDefinitionWithHttpInfo($mod_workshop_get_assessment_form_definition_request, string $contentType = self::contentTypes['modWorkshopGetAssessmentFormDefinition'][0])
    {
        $request = $this->modWorkshopGetAssessmentFormDefinitionRequest($mod_workshop_get_assessment_form_definition_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModWorkshopGetAssessmentFormDefinition200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModWorkshopGetAssessmentFormDefinition200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModWorkshopGetAssessmentFormDefinition200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModWorkshopGetAssessmentFormDefinition200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModWorkshopGetAssessmentFormDefinition200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modWorkshopGetAssessmentFormDefinitionAsync
     *
     * Retrieves the assessment form definition.
     *
     * @param  \OpenAPI\Client\Model\ModWorkshopGetAssessmentFormDefinitionRequest $mod_workshop_get_assessment_form_definition_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modWorkshopGetAssessmentFormDefinition'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modWorkshopGetAssessmentFormDefinitionAsync($mod_workshop_get_assessment_form_definition_request, string $contentType = self::contentTypes['modWorkshopGetAssessmentFormDefinition'][0])
    {
        return $this->modWorkshopGetAssessmentFormDefinitionAsyncWithHttpInfo($mod_workshop_get_assessment_form_definition_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modWorkshopGetAssessmentFormDefinitionAsyncWithHttpInfo
     *
     * Retrieves the assessment form definition.
     *
     * @param  \OpenAPI\Client\Model\ModWorkshopGetAssessmentFormDefinitionRequest $mod_workshop_get_assessment_form_definition_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modWorkshopGetAssessmentFormDefinition'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modWorkshopGetAssessmentFormDefinitionAsyncWithHttpInfo($mod_workshop_get_assessment_form_definition_request, string $contentType = self::contentTypes['modWorkshopGetAssessmentFormDefinition'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModWorkshopGetAssessmentFormDefinition200Response';
        $request = $this->modWorkshopGetAssessmentFormDefinitionRequest($mod_workshop_get_assessment_form_definition_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modWorkshopGetAssessmentFormDefinition'
     *
     * @param  \OpenAPI\Client\Model\ModWorkshopGetAssessmentFormDefinitionRequest $mod_workshop_get_assessment_form_definition_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modWorkshopGetAssessmentFormDefinition'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modWorkshopGetAssessmentFormDefinitionRequest($mod_workshop_get_assessment_form_definition_request, string $contentType = self::contentTypes['modWorkshopGetAssessmentFormDefinition'][0])
    {

        // verify the required parameter 'mod_workshop_get_assessment_form_definition_request' is set
        if ($mod_workshop_get_assessment_form_definition_request === null || (is_array($mod_workshop_get_assessment_form_definition_request) && count($mod_workshop_get_assessment_form_definition_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_workshop_get_assessment_form_definition_request when calling modWorkshopGetAssessmentFormDefinition'
            );
        }


        $resourcePath = '/mod_workshop_get_assessment_form_definition';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_workshop_get_assessment_form_definition_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_workshop_get_assessment_form_definition_request));
            } else {
                $httpBody = $mod_workshop_get_assessment_form_definition_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modWorkshopGetGrades
     *
     * Returns the assessment and submission grade for the given user.
     *
     * @param  \OpenAPI\Client\Model\ModWorkshopGetGradesRequest $mod_workshop_get_grades_request mod_workshop_get_grades_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modWorkshopGetGrades'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModWorkshopGetGrades200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modWorkshopGetGrades($mod_workshop_get_grades_request, string $contentType = self::contentTypes['modWorkshopGetGrades'][0])
    {
        list($response) = $this->modWorkshopGetGradesWithHttpInfo($mod_workshop_get_grades_request, $contentType);
        return $response;
    }

    /**
     * Operation modWorkshopGetGradesWithHttpInfo
     *
     * Returns the assessment and submission grade for the given user.
     *
     * @param  \OpenAPI\Client\Model\ModWorkshopGetGradesRequest $mod_workshop_get_grades_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modWorkshopGetGrades'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModWorkshopGetGrades200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modWorkshopGetGradesWithHttpInfo($mod_workshop_get_grades_request, string $contentType = self::contentTypes['modWorkshopGetGrades'][0])
    {
        $request = $this->modWorkshopGetGradesRequest($mod_workshop_get_grades_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModWorkshopGetGrades200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModWorkshopGetGrades200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModWorkshopGetGrades200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModWorkshopGetGrades200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModWorkshopGetGrades200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modWorkshopGetGradesAsync
     *
     * Returns the assessment and submission grade for the given user.
     *
     * @param  \OpenAPI\Client\Model\ModWorkshopGetGradesRequest $mod_workshop_get_grades_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modWorkshopGetGrades'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modWorkshopGetGradesAsync($mod_workshop_get_grades_request, string $contentType = self::contentTypes['modWorkshopGetGrades'][0])
    {
        return $this->modWorkshopGetGradesAsyncWithHttpInfo($mod_workshop_get_grades_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modWorkshopGetGradesAsyncWithHttpInfo
     *
     * Returns the assessment and submission grade for the given user.
     *
     * @param  \OpenAPI\Client\Model\ModWorkshopGetGradesRequest $mod_workshop_get_grades_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modWorkshopGetGrades'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modWorkshopGetGradesAsyncWithHttpInfo($mod_workshop_get_grades_request, string $contentType = self::contentTypes['modWorkshopGetGrades'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModWorkshopGetGrades200Response';
        $request = $this->modWorkshopGetGradesRequest($mod_workshop_get_grades_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modWorkshopGetGrades'
     *
     * @param  \OpenAPI\Client\Model\ModWorkshopGetGradesRequest $mod_workshop_get_grades_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modWorkshopGetGrades'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modWorkshopGetGradesRequest($mod_workshop_get_grades_request, string $contentType = self::contentTypes['modWorkshopGetGrades'][0])
    {

        // verify the required parameter 'mod_workshop_get_grades_request' is set
        if ($mod_workshop_get_grades_request === null || (is_array($mod_workshop_get_grades_request) && count($mod_workshop_get_grades_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_workshop_get_grades_request when calling modWorkshopGetGrades'
            );
        }


        $resourcePath = '/mod_workshop_get_grades';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_workshop_get_grades_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_workshop_get_grades_request));
            } else {
                $httpBody = $mod_workshop_get_grades_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modWorkshopGetGradesReport
     *
     * Retrieves the assessment grades report.
     *
     * @param  \OpenAPI\Client\Model\ModWorkshopGetGradesReportRequest $mod_workshop_get_grades_report_request mod_workshop_get_grades_report_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modWorkshopGetGradesReport'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModWorkshopGetGradesReport200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modWorkshopGetGradesReport($mod_workshop_get_grades_report_request, string $contentType = self::contentTypes['modWorkshopGetGradesReport'][0])
    {
        list($response) = $this->modWorkshopGetGradesReportWithHttpInfo($mod_workshop_get_grades_report_request, $contentType);
        return $response;
    }

    /**
     * Operation modWorkshopGetGradesReportWithHttpInfo
     *
     * Retrieves the assessment grades report.
     *
     * @param  \OpenAPI\Client\Model\ModWorkshopGetGradesReportRequest $mod_workshop_get_grades_report_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modWorkshopGetGradesReport'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModWorkshopGetGradesReport200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modWorkshopGetGradesReportWithHttpInfo($mod_workshop_get_grades_report_request, string $contentType = self::contentTypes['modWorkshopGetGradesReport'][0])
    {
        $request = $this->modWorkshopGetGradesReportRequest($mod_workshop_get_grades_report_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModWorkshopGetGradesReport200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModWorkshopGetGradesReport200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModWorkshopGetGradesReport200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModWorkshopGetGradesReport200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModWorkshopGetGradesReport200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modWorkshopGetGradesReportAsync
     *
     * Retrieves the assessment grades report.
     *
     * @param  \OpenAPI\Client\Model\ModWorkshopGetGradesReportRequest $mod_workshop_get_grades_report_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modWorkshopGetGradesReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modWorkshopGetGradesReportAsync($mod_workshop_get_grades_report_request, string $contentType = self::contentTypes['modWorkshopGetGradesReport'][0])
    {
        return $this->modWorkshopGetGradesReportAsyncWithHttpInfo($mod_workshop_get_grades_report_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modWorkshopGetGradesReportAsyncWithHttpInfo
     *
     * Retrieves the assessment grades report.
     *
     * @param  \OpenAPI\Client\Model\ModWorkshopGetGradesReportRequest $mod_workshop_get_grades_report_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modWorkshopGetGradesReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modWorkshopGetGradesReportAsyncWithHttpInfo($mod_workshop_get_grades_report_request, string $contentType = self::contentTypes['modWorkshopGetGradesReport'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModWorkshopGetGradesReport200Response';
        $request = $this->modWorkshopGetGradesReportRequest($mod_workshop_get_grades_report_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modWorkshopGetGradesReport'
     *
     * @param  \OpenAPI\Client\Model\ModWorkshopGetGradesReportRequest $mod_workshop_get_grades_report_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modWorkshopGetGradesReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modWorkshopGetGradesReportRequest($mod_workshop_get_grades_report_request, string $contentType = self::contentTypes['modWorkshopGetGradesReport'][0])
    {

        // verify the required parameter 'mod_workshop_get_grades_report_request' is set
        if ($mod_workshop_get_grades_report_request === null || (is_array($mod_workshop_get_grades_report_request) && count($mod_workshop_get_grades_report_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_workshop_get_grades_report_request when calling modWorkshopGetGradesReport'
            );
        }


        $resourcePath = '/mod_workshop_get_grades_report';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_workshop_get_grades_report_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_workshop_get_grades_report_request));
            } else {
                $httpBody = $mod_workshop_get_grades_report_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modWorkshopGetReviewerAssessments
     *
     * Retrieves all the assessments reviewed by the given user.
     *
     * @param  \OpenAPI\Client\Model\ModWorkshopGetReviewerAssessmentsRequest $mod_workshop_get_reviewer_assessments_request mod_workshop_get_reviewer_assessments_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modWorkshopGetReviewerAssessments'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModWorkshopGetReviewerAssessments200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modWorkshopGetReviewerAssessments($mod_workshop_get_reviewer_assessments_request, string $contentType = self::contentTypes['modWorkshopGetReviewerAssessments'][0])
    {
        list($response) = $this->modWorkshopGetReviewerAssessmentsWithHttpInfo($mod_workshop_get_reviewer_assessments_request, $contentType);
        return $response;
    }

    /**
     * Operation modWorkshopGetReviewerAssessmentsWithHttpInfo
     *
     * Retrieves all the assessments reviewed by the given user.
     *
     * @param  \OpenAPI\Client\Model\ModWorkshopGetReviewerAssessmentsRequest $mod_workshop_get_reviewer_assessments_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modWorkshopGetReviewerAssessments'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModWorkshopGetReviewerAssessments200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modWorkshopGetReviewerAssessmentsWithHttpInfo($mod_workshop_get_reviewer_assessments_request, string $contentType = self::contentTypes['modWorkshopGetReviewerAssessments'][0])
    {
        $request = $this->modWorkshopGetReviewerAssessmentsRequest($mod_workshop_get_reviewer_assessments_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModWorkshopGetReviewerAssessments200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModWorkshopGetReviewerAssessments200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModWorkshopGetReviewerAssessments200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModWorkshopGetReviewerAssessments200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModWorkshopGetReviewerAssessments200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modWorkshopGetReviewerAssessmentsAsync
     *
     * Retrieves all the assessments reviewed by the given user.
     *
     * @param  \OpenAPI\Client\Model\ModWorkshopGetReviewerAssessmentsRequest $mod_workshop_get_reviewer_assessments_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modWorkshopGetReviewerAssessments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modWorkshopGetReviewerAssessmentsAsync($mod_workshop_get_reviewer_assessments_request, string $contentType = self::contentTypes['modWorkshopGetReviewerAssessments'][0])
    {
        return $this->modWorkshopGetReviewerAssessmentsAsyncWithHttpInfo($mod_workshop_get_reviewer_assessments_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modWorkshopGetReviewerAssessmentsAsyncWithHttpInfo
     *
     * Retrieves all the assessments reviewed by the given user.
     *
     * @param  \OpenAPI\Client\Model\ModWorkshopGetReviewerAssessmentsRequest $mod_workshop_get_reviewer_assessments_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modWorkshopGetReviewerAssessments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modWorkshopGetReviewerAssessmentsAsyncWithHttpInfo($mod_workshop_get_reviewer_assessments_request, string $contentType = self::contentTypes['modWorkshopGetReviewerAssessments'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModWorkshopGetReviewerAssessments200Response';
        $request = $this->modWorkshopGetReviewerAssessmentsRequest($mod_workshop_get_reviewer_assessments_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modWorkshopGetReviewerAssessments'
     *
     * @param  \OpenAPI\Client\Model\ModWorkshopGetReviewerAssessmentsRequest $mod_workshop_get_reviewer_assessments_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modWorkshopGetReviewerAssessments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modWorkshopGetReviewerAssessmentsRequest($mod_workshop_get_reviewer_assessments_request, string $contentType = self::contentTypes['modWorkshopGetReviewerAssessments'][0])
    {

        // verify the required parameter 'mod_workshop_get_reviewer_assessments_request' is set
        if ($mod_workshop_get_reviewer_assessments_request === null || (is_array($mod_workshop_get_reviewer_assessments_request) && count($mod_workshop_get_reviewer_assessments_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_workshop_get_reviewer_assessments_request when calling modWorkshopGetReviewerAssessments'
            );
        }


        $resourcePath = '/mod_workshop_get_reviewer_assessments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_workshop_get_reviewer_assessments_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_workshop_get_reviewer_assessments_request));
            } else {
                $httpBody = $mod_workshop_get_reviewer_assessments_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modWorkshopGetSubmission
     *
     * Retrieves the given submission.
     *
     * @param  \OpenAPI\Client\Model\ModWorkshopGetSubmissionRequest $mod_workshop_get_submission_request mod_workshop_get_submission_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modWorkshopGetSubmission'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModWorkshopGetSubmission200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modWorkshopGetSubmission($mod_workshop_get_submission_request, string $contentType = self::contentTypes['modWorkshopGetSubmission'][0])
    {
        list($response) = $this->modWorkshopGetSubmissionWithHttpInfo($mod_workshop_get_submission_request, $contentType);
        return $response;
    }

    /**
     * Operation modWorkshopGetSubmissionWithHttpInfo
     *
     * Retrieves the given submission.
     *
     * @param  \OpenAPI\Client\Model\ModWorkshopGetSubmissionRequest $mod_workshop_get_submission_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modWorkshopGetSubmission'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModWorkshopGetSubmission200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modWorkshopGetSubmissionWithHttpInfo($mod_workshop_get_submission_request, string $contentType = self::contentTypes['modWorkshopGetSubmission'][0])
    {
        $request = $this->modWorkshopGetSubmissionRequest($mod_workshop_get_submission_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModWorkshopGetSubmission200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModWorkshopGetSubmission200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModWorkshopGetSubmission200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModWorkshopGetSubmission200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModWorkshopGetSubmission200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modWorkshopGetSubmissionAsync
     *
     * Retrieves the given submission.
     *
     * @param  \OpenAPI\Client\Model\ModWorkshopGetSubmissionRequest $mod_workshop_get_submission_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modWorkshopGetSubmission'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modWorkshopGetSubmissionAsync($mod_workshop_get_submission_request, string $contentType = self::contentTypes['modWorkshopGetSubmission'][0])
    {
        return $this->modWorkshopGetSubmissionAsyncWithHttpInfo($mod_workshop_get_submission_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modWorkshopGetSubmissionAsyncWithHttpInfo
     *
     * Retrieves the given submission.
     *
     * @param  \OpenAPI\Client\Model\ModWorkshopGetSubmissionRequest $mod_workshop_get_submission_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modWorkshopGetSubmission'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modWorkshopGetSubmissionAsyncWithHttpInfo($mod_workshop_get_submission_request, string $contentType = self::contentTypes['modWorkshopGetSubmission'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModWorkshopGetSubmission200Response';
        $request = $this->modWorkshopGetSubmissionRequest($mod_workshop_get_submission_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modWorkshopGetSubmission'
     *
     * @param  \OpenAPI\Client\Model\ModWorkshopGetSubmissionRequest $mod_workshop_get_submission_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modWorkshopGetSubmission'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modWorkshopGetSubmissionRequest($mod_workshop_get_submission_request, string $contentType = self::contentTypes['modWorkshopGetSubmission'][0])
    {

        // verify the required parameter 'mod_workshop_get_submission_request' is set
        if ($mod_workshop_get_submission_request === null || (is_array($mod_workshop_get_submission_request) && count($mod_workshop_get_submission_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_workshop_get_submission_request when calling modWorkshopGetSubmission'
            );
        }


        $resourcePath = '/mod_workshop_get_submission';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_workshop_get_submission_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_workshop_get_submission_request));
            } else {
                $httpBody = $mod_workshop_get_submission_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modWorkshopGetSubmissionAssessments
     *
     * Retrieves all the assessments of the given submission.
     *
     * @param  \OpenAPI\Client\Model\ModWorkshopGetSubmissionRequest $mod_workshop_get_submission_request mod_workshop_get_submission_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modWorkshopGetSubmissionAssessments'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModWorkshopGetReviewerAssessments200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modWorkshopGetSubmissionAssessments($mod_workshop_get_submission_request, string $contentType = self::contentTypes['modWorkshopGetSubmissionAssessments'][0])
    {
        list($response) = $this->modWorkshopGetSubmissionAssessmentsWithHttpInfo($mod_workshop_get_submission_request, $contentType);
        return $response;
    }

    /**
     * Operation modWorkshopGetSubmissionAssessmentsWithHttpInfo
     *
     * Retrieves all the assessments of the given submission.
     *
     * @param  \OpenAPI\Client\Model\ModWorkshopGetSubmissionRequest $mod_workshop_get_submission_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modWorkshopGetSubmissionAssessments'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModWorkshopGetReviewerAssessments200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modWorkshopGetSubmissionAssessmentsWithHttpInfo($mod_workshop_get_submission_request, string $contentType = self::contentTypes['modWorkshopGetSubmissionAssessments'][0])
    {
        $request = $this->modWorkshopGetSubmissionAssessmentsRequest($mod_workshop_get_submission_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModWorkshopGetReviewerAssessments200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModWorkshopGetReviewerAssessments200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModWorkshopGetReviewerAssessments200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModWorkshopGetReviewerAssessments200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModWorkshopGetReviewerAssessments200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modWorkshopGetSubmissionAssessmentsAsync
     *
     * Retrieves all the assessments of the given submission.
     *
     * @param  \OpenAPI\Client\Model\ModWorkshopGetSubmissionRequest $mod_workshop_get_submission_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modWorkshopGetSubmissionAssessments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modWorkshopGetSubmissionAssessmentsAsync($mod_workshop_get_submission_request, string $contentType = self::contentTypes['modWorkshopGetSubmissionAssessments'][0])
    {
        return $this->modWorkshopGetSubmissionAssessmentsAsyncWithHttpInfo($mod_workshop_get_submission_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modWorkshopGetSubmissionAssessmentsAsyncWithHttpInfo
     *
     * Retrieves all the assessments of the given submission.
     *
     * @param  \OpenAPI\Client\Model\ModWorkshopGetSubmissionRequest $mod_workshop_get_submission_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modWorkshopGetSubmissionAssessments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modWorkshopGetSubmissionAssessmentsAsyncWithHttpInfo($mod_workshop_get_submission_request, string $contentType = self::contentTypes['modWorkshopGetSubmissionAssessments'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModWorkshopGetReviewerAssessments200Response';
        $request = $this->modWorkshopGetSubmissionAssessmentsRequest($mod_workshop_get_submission_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modWorkshopGetSubmissionAssessments'
     *
     * @param  \OpenAPI\Client\Model\ModWorkshopGetSubmissionRequest $mod_workshop_get_submission_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modWorkshopGetSubmissionAssessments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modWorkshopGetSubmissionAssessmentsRequest($mod_workshop_get_submission_request, string $contentType = self::contentTypes['modWorkshopGetSubmissionAssessments'][0])
    {

        // verify the required parameter 'mod_workshop_get_submission_request' is set
        if ($mod_workshop_get_submission_request === null || (is_array($mod_workshop_get_submission_request) && count($mod_workshop_get_submission_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_workshop_get_submission_request when calling modWorkshopGetSubmissionAssessments'
            );
        }


        $resourcePath = '/mod_workshop_get_submission_assessments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_workshop_get_submission_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_workshop_get_submission_request));
            } else {
                $httpBody = $mod_workshop_get_submission_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modWorkshopGetSubmissions
     *
     * Retrieves all the workshop submissions or the one done by the given user (except example submissions).
     *
     * @param  \OpenAPI\Client\Model\ModWorkshopGetSubmissionsRequest $mod_workshop_get_submissions_request mod_workshop_get_submissions_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modWorkshopGetSubmissions'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModWorkshopGetSubmissions200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modWorkshopGetSubmissions($mod_workshop_get_submissions_request, string $contentType = self::contentTypes['modWorkshopGetSubmissions'][0])
    {
        list($response) = $this->modWorkshopGetSubmissionsWithHttpInfo($mod_workshop_get_submissions_request, $contentType);
        return $response;
    }

    /**
     * Operation modWorkshopGetSubmissionsWithHttpInfo
     *
     * Retrieves all the workshop submissions or the one done by the given user (except example submissions).
     *
     * @param  \OpenAPI\Client\Model\ModWorkshopGetSubmissionsRequest $mod_workshop_get_submissions_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modWorkshopGetSubmissions'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModWorkshopGetSubmissions200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modWorkshopGetSubmissionsWithHttpInfo($mod_workshop_get_submissions_request, string $contentType = self::contentTypes['modWorkshopGetSubmissions'][0])
    {
        $request = $this->modWorkshopGetSubmissionsRequest($mod_workshop_get_submissions_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModWorkshopGetSubmissions200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModWorkshopGetSubmissions200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModWorkshopGetSubmissions200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModWorkshopGetSubmissions200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModWorkshopGetSubmissions200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modWorkshopGetSubmissionsAsync
     *
     * Retrieves all the workshop submissions or the one done by the given user (except example submissions).
     *
     * @param  \OpenAPI\Client\Model\ModWorkshopGetSubmissionsRequest $mod_workshop_get_submissions_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modWorkshopGetSubmissions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modWorkshopGetSubmissionsAsync($mod_workshop_get_submissions_request, string $contentType = self::contentTypes['modWorkshopGetSubmissions'][0])
    {
        return $this->modWorkshopGetSubmissionsAsyncWithHttpInfo($mod_workshop_get_submissions_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modWorkshopGetSubmissionsAsyncWithHttpInfo
     *
     * Retrieves all the workshop submissions or the one done by the given user (except example submissions).
     *
     * @param  \OpenAPI\Client\Model\ModWorkshopGetSubmissionsRequest $mod_workshop_get_submissions_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modWorkshopGetSubmissions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modWorkshopGetSubmissionsAsyncWithHttpInfo($mod_workshop_get_submissions_request, string $contentType = self::contentTypes['modWorkshopGetSubmissions'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModWorkshopGetSubmissions200Response';
        $request = $this->modWorkshopGetSubmissionsRequest($mod_workshop_get_submissions_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modWorkshopGetSubmissions'
     *
     * @param  \OpenAPI\Client\Model\ModWorkshopGetSubmissionsRequest $mod_workshop_get_submissions_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modWorkshopGetSubmissions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modWorkshopGetSubmissionsRequest($mod_workshop_get_submissions_request, string $contentType = self::contentTypes['modWorkshopGetSubmissions'][0])
    {

        // verify the required parameter 'mod_workshop_get_submissions_request' is set
        if ($mod_workshop_get_submissions_request === null || (is_array($mod_workshop_get_submissions_request) && count($mod_workshop_get_submissions_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_workshop_get_submissions_request when calling modWorkshopGetSubmissions'
            );
        }


        $resourcePath = '/mod_workshop_get_submissions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_workshop_get_submissions_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_workshop_get_submissions_request));
            } else {
                $httpBody = $mod_workshop_get_submissions_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modWorkshopGetUserPlan
     *
     * Return the planner information for the given user.
     *
     * @param  \OpenAPI\Client\Model\ModWorkshopGetUserPlanRequest $mod_workshop_get_user_plan_request mod_workshop_get_user_plan_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modWorkshopGetUserPlan'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModWorkshopGetUserPlan200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modWorkshopGetUserPlan($mod_workshop_get_user_plan_request, string $contentType = self::contentTypes['modWorkshopGetUserPlan'][0])
    {
        list($response) = $this->modWorkshopGetUserPlanWithHttpInfo($mod_workshop_get_user_plan_request, $contentType);
        return $response;
    }

    /**
     * Operation modWorkshopGetUserPlanWithHttpInfo
     *
     * Return the planner information for the given user.
     *
     * @param  \OpenAPI\Client\Model\ModWorkshopGetUserPlanRequest $mod_workshop_get_user_plan_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modWorkshopGetUserPlan'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModWorkshopGetUserPlan200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modWorkshopGetUserPlanWithHttpInfo($mod_workshop_get_user_plan_request, string $contentType = self::contentTypes['modWorkshopGetUserPlan'][0])
    {
        $request = $this->modWorkshopGetUserPlanRequest($mod_workshop_get_user_plan_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModWorkshopGetUserPlan200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModWorkshopGetUserPlan200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModWorkshopGetUserPlan200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModWorkshopGetUserPlan200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModWorkshopGetUserPlan200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modWorkshopGetUserPlanAsync
     *
     * Return the planner information for the given user.
     *
     * @param  \OpenAPI\Client\Model\ModWorkshopGetUserPlanRequest $mod_workshop_get_user_plan_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modWorkshopGetUserPlan'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modWorkshopGetUserPlanAsync($mod_workshop_get_user_plan_request, string $contentType = self::contentTypes['modWorkshopGetUserPlan'][0])
    {
        return $this->modWorkshopGetUserPlanAsyncWithHttpInfo($mod_workshop_get_user_plan_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modWorkshopGetUserPlanAsyncWithHttpInfo
     *
     * Return the planner information for the given user.
     *
     * @param  \OpenAPI\Client\Model\ModWorkshopGetUserPlanRequest $mod_workshop_get_user_plan_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modWorkshopGetUserPlan'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modWorkshopGetUserPlanAsyncWithHttpInfo($mod_workshop_get_user_plan_request, string $contentType = self::contentTypes['modWorkshopGetUserPlan'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModWorkshopGetUserPlan200Response';
        $request = $this->modWorkshopGetUserPlanRequest($mod_workshop_get_user_plan_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modWorkshopGetUserPlan'
     *
     * @param  \OpenAPI\Client\Model\ModWorkshopGetUserPlanRequest $mod_workshop_get_user_plan_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modWorkshopGetUserPlan'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modWorkshopGetUserPlanRequest($mod_workshop_get_user_plan_request, string $contentType = self::contentTypes['modWorkshopGetUserPlan'][0])
    {

        // verify the required parameter 'mod_workshop_get_user_plan_request' is set
        if ($mod_workshop_get_user_plan_request === null || (is_array($mod_workshop_get_user_plan_request) && count($mod_workshop_get_user_plan_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_workshop_get_user_plan_request when calling modWorkshopGetUserPlan'
            );
        }


        $resourcePath = '/mod_workshop_get_user_plan';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_workshop_get_user_plan_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_workshop_get_user_plan_request));
            } else {
                $httpBody = $mod_workshop_get_user_plan_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modWorkshopGetWorkshopAccessInformation
     *
     * Return access information for a given workshop.
     *
     * @param  \OpenAPI\Client\Model\ModWorkshopGetWorkshopAccessInformationRequest $mod_workshop_get_workshop_access_information_request mod_workshop_get_workshop_access_information_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modWorkshopGetWorkshopAccessInformation'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModWorkshopGetWorkshopAccessInformation200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modWorkshopGetWorkshopAccessInformation($mod_workshop_get_workshop_access_information_request, string $contentType = self::contentTypes['modWorkshopGetWorkshopAccessInformation'][0])
    {
        list($response) = $this->modWorkshopGetWorkshopAccessInformationWithHttpInfo($mod_workshop_get_workshop_access_information_request, $contentType);
        return $response;
    }

    /**
     * Operation modWorkshopGetWorkshopAccessInformationWithHttpInfo
     *
     * Return access information for a given workshop.
     *
     * @param  \OpenAPI\Client\Model\ModWorkshopGetWorkshopAccessInformationRequest $mod_workshop_get_workshop_access_information_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modWorkshopGetWorkshopAccessInformation'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModWorkshopGetWorkshopAccessInformation200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modWorkshopGetWorkshopAccessInformationWithHttpInfo($mod_workshop_get_workshop_access_information_request, string $contentType = self::contentTypes['modWorkshopGetWorkshopAccessInformation'][0])
    {
        $request = $this->modWorkshopGetWorkshopAccessInformationRequest($mod_workshop_get_workshop_access_information_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModWorkshopGetWorkshopAccessInformation200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModWorkshopGetWorkshopAccessInformation200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModWorkshopGetWorkshopAccessInformation200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModWorkshopGetWorkshopAccessInformation200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModWorkshopGetWorkshopAccessInformation200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modWorkshopGetWorkshopAccessInformationAsync
     *
     * Return access information for a given workshop.
     *
     * @param  \OpenAPI\Client\Model\ModWorkshopGetWorkshopAccessInformationRequest $mod_workshop_get_workshop_access_information_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modWorkshopGetWorkshopAccessInformation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modWorkshopGetWorkshopAccessInformationAsync($mod_workshop_get_workshop_access_information_request, string $contentType = self::contentTypes['modWorkshopGetWorkshopAccessInformation'][0])
    {
        return $this->modWorkshopGetWorkshopAccessInformationAsyncWithHttpInfo($mod_workshop_get_workshop_access_information_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modWorkshopGetWorkshopAccessInformationAsyncWithHttpInfo
     *
     * Return access information for a given workshop.
     *
     * @param  \OpenAPI\Client\Model\ModWorkshopGetWorkshopAccessInformationRequest $mod_workshop_get_workshop_access_information_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modWorkshopGetWorkshopAccessInformation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modWorkshopGetWorkshopAccessInformationAsyncWithHttpInfo($mod_workshop_get_workshop_access_information_request, string $contentType = self::contentTypes['modWorkshopGetWorkshopAccessInformation'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModWorkshopGetWorkshopAccessInformation200Response';
        $request = $this->modWorkshopGetWorkshopAccessInformationRequest($mod_workshop_get_workshop_access_information_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modWorkshopGetWorkshopAccessInformation'
     *
     * @param  \OpenAPI\Client\Model\ModWorkshopGetWorkshopAccessInformationRequest $mod_workshop_get_workshop_access_information_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modWorkshopGetWorkshopAccessInformation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modWorkshopGetWorkshopAccessInformationRequest($mod_workshop_get_workshop_access_information_request, string $contentType = self::contentTypes['modWorkshopGetWorkshopAccessInformation'][0])
    {

        // verify the required parameter 'mod_workshop_get_workshop_access_information_request' is set
        if ($mod_workshop_get_workshop_access_information_request === null || (is_array($mod_workshop_get_workshop_access_information_request) && count($mod_workshop_get_workshop_access_information_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_workshop_get_workshop_access_information_request when calling modWorkshopGetWorkshopAccessInformation'
            );
        }


        $resourcePath = '/mod_workshop_get_workshop_access_information';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_workshop_get_workshop_access_information_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_workshop_get_workshop_access_information_request));
            } else {
                $httpBody = $mod_workshop_get_workshop_access_information_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modWorkshopGetWorkshopsByCourses
     *
     * Returns a list of workshops in a provided list of courses, if no list is provided all workshops that                             the user can view will be returned.
     *
     * @param  \OpenAPI\Client\Model\ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest $mod_bigbluebuttonbn_get_bigbluebuttonbns_by_courses_request mod_bigbluebuttonbn_get_bigbluebuttonbns_by_courses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modWorkshopGetWorkshopsByCourses'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModWorkshopGetWorkshopsByCourses200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modWorkshopGetWorkshopsByCourses($mod_bigbluebuttonbn_get_bigbluebuttonbns_by_courses_request, string $contentType = self::contentTypes['modWorkshopGetWorkshopsByCourses'][0])
    {
        list($response) = $this->modWorkshopGetWorkshopsByCoursesWithHttpInfo($mod_bigbluebuttonbn_get_bigbluebuttonbns_by_courses_request, $contentType);
        return $response;
    }

    /**
     * Operation modWorkshopGetWorkshopsByCoursesWithHttpInfo
     *
     * Returns a list of workshops in a provided list of courses, if no list is provided all workshops that                             the user can view will be returned.
     *
     * @param  \OpenAPI\Client\Model\ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest $mod_bigbluebuttonbn_get_bigbluebuttonbns_by_courses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modWorkshopGetWorkshopsByCourses'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModWorkshopGetWorkshopsByCourses200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modWorkshopGetWorkshopsByCoursesWithHttpInfo($mod_bigbluebuttonbn_get_bigbluebuttonbns_by_courses_request, string $contentType = self::contentTypes['modWorkshopGetWorkshopsByCourses'][0])
    {
        $request = $this->modWorkshopGetWorkshopsByCoursesRequest($mod_bigbluebuttonbn_get_bigbluebuttonbns_by_courses_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModWorkshopGetWorkshopsByCourses200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModWorkshopGetWorkshopsByCourses200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModWorkshopGetWorkshopsByCourses200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModWorkshopGetWorkshopsByCourses200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModWorkshopGetWorkshopsByCourses200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modWorkshopGetWorkshopsByCoursesAsync
     *
     * Returns a list of workshops in a provided list of courses, if no list is provided all workshops that                             the user can view will be returned.
     *
     * @param  \OpenAPI\Client\Model\ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest $mod_bigbluebuttonbn_get_bigbluebuttonbns_by_courses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modWorkshopGetWorkshopsByCourses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modWorkshopGetWorkshopsByCoursesAsync($mod_bigbluebuttonbn_get_bigbluebuttonbns_by_courses_request, string $contentType = self::contentTypes['modWorkshopGetWorkshopsByCourses'][0])
    {
        return $this->modWorkshopGetWorkshopsByCoursesAsyncWithHttpInfo($mod_bigbluebuttonbn_get_bigbluebuttonbns_by_courses_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modWorkshopGetWorkshopsByCoursesAsyncWithHttpInfo
     *
     * Returns a list of workshops in a provided list of courses, if no list is provided all workshops that                             the user can view will be returned.
     *
     * @param  \OpenAPI\Client\Model\ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest $mod_bigbluebuttonbn_get_bigbluebuttonbns_by_courses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modWorkshopGetWorkshopsByCourses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modWorkshopGetWorkshopsByCoursesAsyncWithHttpInfo($mod_bigbluebuttonbn_get_bigbluebuttonbns_by_courses_request, string $contentType = self::contentTypes['modWorkshopGetWorkshopsByCourses'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModWorkshopGetWorkshopsByCourses200Response';
        $request = $this->modWorkshopGetWorkshopsByCoursesRequest($mod_bigbluebuttonbn_get_bigbluebuttonbns_by_courses_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modWorkshopGetWorkshopsByCourses'
     *
     * @param  \OpenAPI\Client\Model\ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest $mod_bigbluebuttonbn_get_bigbluebuttonbns_by_courses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modWorkshopGetWorkshopsByCourses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modWorkshopGetWorkshopsByCoursesRequest($mod_bigbluebuttonbn_get_bigbluebuttonbns_by_courses_request, string $contentType = self::contentTypes['modWorkshopGetWorkshopsByCourses'][0])
    {

        // verify the required parameter 'mod_bigbluebuttonbn_get_bigbluebuttonbns_by_courses_request' is set
        if ($mod_bigbluebuttonbn_get_bigbluebuttonbns_by_courses_request === null || (is_array($mod_bigbluebuttonbn_get_bigbluebuttonbns_by_courses_request) && count($mod_bigbluebuttonbn_get_bigbluebuttonbns_by_courses_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_bigbluebuttonbn_get_bigbluebuttonbns_by_courses_request when calling modWorkshopGetWorkshopsByCourses'
            );
        }


        $resourcePath = '/mod_workshop_get_workshops_by_courses';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_bigbluebuttonbn_get_bigbluebuttonbns_by_courses_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_bigbluebuttonbn_get_bigbluebuttonbns_by_courses_request));
            } else {
                $httpBody = $mod_bigbluebuttonbn_get_bigbluebuttonbns_by_courses_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modWorkshopUpdateAssessment
     *
     * Add information to an allocated assessment.
     *
     * @param  \OpenAPI\Client\Model\ModWorkshopUpdateAssessmentRequest $mod_workshop_update_assessment_request mod_workshop_update_assessment_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modWorkshopUpdateAssessment'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModWorkshopUpdateAssessment200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modWorkshopUpdateAssessment($mod_workshop_update_assessment_request, string $contentType = self::contentTypes['modWorkshopUpdateAssessment'][0])
    {
        list($response) = $this->modWorkshopUpdateAssessmentWithHttpInfo($mod_workshop_update_assessment_request, $contentType);
        return $response;
    }

    /**
     * Operation modWorkshopUpdateAssessmentWithHttpInfo
     *
     * Add information to an allocated assessment.
     *
     * @param  \OpenAPI\Client\Model\ModWorkshopUpdateAssessmentRequest $mod_workshop_update_assessment_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modWorkshopUpdateAssessment'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModWorkshopUpdateAssessment200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modWorkshopUpdateAssessmentWithHttpInfo($mod_workshop_update_assessment_request, string $contentType = self::contentTypes['modWorkshopUpdateAssessment'][0])
    {
        $request = $this->modWorkshopUpdateAssessmentRequest($mod_workshop_update_assessment_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModWorkshopUpdateAssessment200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModWorkshopUpdateAssessment200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModWorkshopUpdateAssessment200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModWorkshopUpdateAssessment200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModWorkshopUpdateAssessment200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modWorkshopUpdateAssessmentAsync
     *
     * Add information to an allocated assessment.
     *
     * @param  \OpenAPI\Client\Model\ModWorkshopUpdateAssessmentRequest $mod_workshop_update_assessment_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modWorkshopUpdateAssessment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modWorkshopUpdateAssessmentAsync($mod_workshop_update_assessment_request, string $contentType = self::contentTypes['modWorkshopUpdateAssessment'][0])
    {
        return $this->modWorkshopUpdateAssessmentAsyncWithHttpInfo($mod_workshop_update_assessment_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modWorkshopUpdateAssessmentAsyncWithHttpInfo
     *
     * Add information to an allocated assessment.
     *
     * @param  \OpenAPI\Client\Model\ModWorkshopUpdateAssessmentRequest $mod_workshop_update_assessment_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modWorkshopUpdateAssessment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modWorkshopUpdateAssessmentAsyncWithHttpInfo($mod_workshop_update_assessment_request, string $contentType = self::contentTypes['modWorkshopUpdateAssessment'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModWorkshopUpdateAssessment200Response';
        $request = $this->modWorkshopUpdateAssessmentRequest($mod_workshop_update_assessment_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modWorkshopUpdateAssessment'
     *
     * @param  \OpenAPI\Client\Model\ModWorkshopUpdateAssessmentRequest $mod_workshop_update_assessment_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modWorkshopUpdateAssessment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modWorkshopUpdateAssessmentRequest($mod_workshop_update_assessment_request, string $contentType = self::contentTypes['modWorkshopUpdateAssessment'][0])
    {

        // verify the required parameter 'mod_workshop_update_assessment_request' is set
        if ($mod_workshop_update_assessment_request === null || (is_array($mod_workshop_update_assessment_request) && count($mod_workshop_update_assessment_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_workshop_update_assessment_request when calling modWorkshopUpdateAssessment'
            );
        }


        $resourcePath = '/mod_workshop_update_assessment';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_workshop_update_assessment_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_workshop_update_assessment_request));
            } else {
                $httpBody = $mod_workshop_update_assessment_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modWorkshopUpdateSubmission
     *
     * Update the given submission.
     *
     * @param  \OpenAPI\Client\Model\ModWorkshopUpdateSubmissionRequest $mod_workshop_update_submission_request mod_workshop_update_submission_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modWorkshopUpdateSubmission'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModWorkshopUpdateSubmission200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modWorkshopUpdateSubmission($mod_workshop_update_submission_request, string $contentType = self::contentTypes['modWorkshopUpdateSubmission'][0])
    {
        list($response) = $this->modWorkshopUpdateSubmissionWithHttpInfo($mod_workshop_update_submission_request, $contentType);
        return $response;
    }

    /**
     * Operation modWorkshopUpdateSubmissionWithHttpInfo
     *
     * Update the given submission.
     *
     * @param  \OpenAPI\Client\Model\ModWorkshopUpdateSubmissionRequest $mod_workshop_update_submission_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modWorkshopUpdateSubmission'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModWorkshopUpdateSubmission200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modWorkshopUpdateSubmissionWithHttpInfo($mod_workshop_update_submission_request, string $contentType = self::contentTypes['modWorkshopUpdateSubmission'][0])
    {
        $request = $this->modWorkshopUpdateSubmissionRequest($mod_workshop_update_submission_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModWorkshopUpdateSubmission200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModWorkshopUpdateSubmission200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModWorkshopUpdateSubmission200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModWorkshopUpdateSubmission200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModWorkshopUpdateSubmission200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modWorkshopUpdateSubmissionAsync
     *
     * Update the given submission.
     *
     * @param  \OpenAPI\Client\Model\ModWorkshopUpdateSubmissionRequest $mod_workshop_update_submission_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modWorkshopUpdateSubmission'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modWorkshopUpdateSubmissionAsync($mod_workshop_update_submission_request, string $contentType = self::contentTypes['modWorkshopUpdateSubmission'][0])
    {
        return $this->modWorkshopUpdateSubmissionAsyncWithHttpInfo($mod_workshop_update_submission_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modWorkshopUpdateSubmissionAsyncWithHttpInfo
     *
     * Update the given submission.
     *
     * @param  \OpenAPI\Client\Model\ModWorkshopUpdateSubmissionRequest $mod_workshop_update_submission_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modWorkshopUpdateSubmission'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modWorkshopUpdateSubmissionAsyncWithHttpInfo($mod_workshop_update_submission_request, string $contentType = self::contentTypes['modWorkshopUpdateSubmission'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModWorkshopUpdateSubmission200Response';
        $request = $this->modWorkshopUpdateSubmissionRequest($mod_workshop_update_submission_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modWorkshopUpdateSubmission'
     *
     * @param  \OpenAPI\Client\Model\ModWorkshopUpdateSubmissionRequest $mod_workshop_update_submission_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modWorkshopUpdateSubmission'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modWorkshopUpdateSubmissionRequest($mod_workshop_update_submission_request, string $contentType = self::contentTypes['modWorkshopUpdateSubmission'][0])
    {

        // verify the required parameter 'mod_workshop_update_submission_request' is set
        if ($mod_workshop_update_submission_request === null || (is_array($mod_workshop_update_submission_request) && count($mod_workshop_update_submission_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_workshop_update_submission_request when calling modWorkshopUpdateSubmission'
            );
        }


        $resourcePath = '/mod_workshop_update_submission';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_workshop_update_submission_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_workshop_update_submission_request));
            } else {
                $httpBody = $mod_workshop_update_submission_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modWorkshopViewSubmission
     *
     * Trigger the submission viewed event.
     *
     * @param  \OpenAPI\Client\Model\ModWorkshopGetSubmissionRequest $mod_workshop_get_submission_request mod_workshop_get_submission_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modWorkshopViewSubmission'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modWorkshopViewSubmission($mod_workshop_get_submission_request, string $contentType = self::contentTypes['modWorkshopViewSubmission'][0])
    {
        list($response) = $this->modWorkshopViewSubmissionWithHttpInfo($mod_workshop_get_submission_request, $contentType);
        return $response;
    }

    /**
     * Operation modWorkshopViewSubmissionWithHttpInfo
     *
     * Trigger the submission viewed event.
     *
     * @param  \OpenAPI\Client\Model\ModWorkshopGetSubmissionRequest $mod_workshop_get_submission_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modWorkshopViewSubmission'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modWorkshopViewSubmissionWithHttpInfo($mod_workshop_get_submission_request, string $contentType = self::contentTypes['modWorkshopViewSubmission'][0])
    {
        $request = $this->modWorkshopViewSubmissionRequest($mod_workshop_get_submission_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modWorkshopViewSubmissionAsync
     *
     * Trigger the submission viewed event.
     *
     * @param  \OpenAPI\Client\Model\ModWorkshopGetSubmissionRequest $mod_workshop_get_submission_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modWorkshopViewSubmission'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modWorkshopViewSubmissionAsync($mod_workshop_get_submission_request, string $contentType = self::contentTypes['modWorkshopViewSubmission'][0])
    {
        return $this->modWorkshopViewSubmissionAsyncWithHttpInfo($mod_workshop_get_submission_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modWorkshopViewSubmissionAsyncWithHttpInfo
     *
     * Trigger the submission viewed event.
     *
     * @param  \OpenAPI\Client\Model\ModWorkshopGetSubmissionRequest $mod_workshop_get_submission_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modWorkshopViewSubmission'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modWorkshopViewSubmissionAsyncWithHttpInfo($mod_workshop_get_submission_request, string $contentType = self::contentTypes['modWorkshopViewSubmission'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response';
        $request = $this->modWorkshopViewSubmissionRequest($mod_workshop_get_submission_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modWorkshopViewSubmission'
     *
     * @param  \OpenAPI\Client\Model\ModWorkshopGetSubmissionRequest $mod_workshop_get_submission_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modWorkshopViewSubmission'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modWorkshopViewSubmissionRequest($mod_workshop_get_submission_request, string $contentType = self::contentTypes['modWorkshopViewSubmission'][0])
    {

        // verify the required parameter 'mod_workshop_get_submission_request' is set
        if ($mod_workshop_get_submission_request === null || (is_array($mod_workshop_get_submission_request) && count($mod_workshop_get_submission_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_workshop_get_submission_request when calling modWorkshopViewSubmission'
            );
        }


        $resourcePath = '/mod_workshop_view_submission';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_workshop_get_submission_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_workshop_get_submission_request));
            } else {
                $httpBody = $mod_workshop_get_submission_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modWorkshopViewWorkshop
     *
     * Trigger the course module viewed event and update the module completion status.
     *
     * @param  \OpenAPI\Client\Model\ModWorkshopViewWorkshopRequest $mod_workshop_view_workshop_request mod_workshop_view_workshop_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modWorkshopViewWorkshop'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modWorkshopViewWorkshop($mod_workshop_view_workshop_request, string $contentType = self::contentTypes['modWorkshopViewWorkshop'][0])
    {
        list($response) = $this->modWorkshopViewWorkshopWithHttpInfo($mod_workshop_view_workshop_request, $contentType);
        return $response;
    }

    /**
     * Operation modWorkshopViewWorkshopWithHttpInfo
     *
     * Trigger the course module viewed event and update the module completion status.
     *
     * @param  \OpenAPI\Client\Model\ModWorkshopViewWorkshopRequest $mod_workshop_view_workshop_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modWorkshopViewWorkshop'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modWorkshopViewWorkshopWithHttpInfo($mod_workshop_view_workshop_request, string $contentType = self::contentTypes['modWorkshopViewWorkshop'][0])
    {
        $request = $this->modWorkshopViewWorkshopRequest($mod_workshop_view_workshop_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modWorkshopViewWorkshopAsync
     *
     * Trigger the course module viewed event and update the module completion status.
     *
     * @param  \OpenAPI\Client\Model\ModWorkshopViewWorkshopRequest $mod_workshop_view_workshop_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modWorkshopViewWorkshop'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modWorkshopViewWorkshopAsync($mod_workshop_view_workshop_request, string $contentType = self::contentTypes['modWorkshopViewWorkshop'][0])
    {
        return $this->modWorkshopViewWorkshopAsyncWithHttpInfo($mod_workshop_view_workshop_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modWorkshopViewWorkshopAsyncWithHttpInfo
     *
     * Trigger the course module viewed event and update the module completion status.
     *
     * @param  \OpenAPI\Client\Model\ModWorkshopViewWorkshopRequest $mod_workshop_view_workshop_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modWorkshopViewWorkshop'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modWorkshopViewWorkshopAsyncWithHttpInfo($mod_workshop_view_workshop_request, string $contentType = self::contentTypes['modWorkshopViewWorkshop'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response';
        $request = $this->modWorkshopViewWorkshopRequest($mod_workshop_view_workshop_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modWorkshopViewWorkshop'
     *
     * @param  \OpenAPI\Client\Model\ModWorkshopViewWorkshopRequest $mod_workshop_view_workshop_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modWorkshopViewWorkshop'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modWorkshopViewWorkshopRequest($mod_workshop_view_workshop_request, string $contentType = self::contentTypes['modWorkshopViewWorkshop'][0])
    {

        // verify the required parameter 'mod_workshop_view_workshop_request' is set
        if ($mod_workshop_view_workshop_request === null || (is_array($mod_workshop_view_workshop_request) && count($mod_workshop_view_workshop_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_workshop_view_workshop_request when calling modWorkshopViewWorkshop'
            );
        }


        $resourcePath = '/mod_workshop_view_workshop';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_workshop_view_workshop_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_workshop_view_workshop_request));
            } else {
                $httpBody = $mod_workshop_view_workshop_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
