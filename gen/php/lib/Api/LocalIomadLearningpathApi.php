<?php
/**
 * LocalIomadLearningpathApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * LocalIomadLearningpathApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class LocalIomadLearningpathApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'localIomadLearningpathActivate' => [
            'application/json',
        ],
        'localIomadLearningpathAddcourses' => [
            'application/json',
        ],
        'localIomadLearningpathAddusers' => [
            'application/json',
        ],
        'localIomadLearningpathCopypath' => [
            'application/json',
        ],
        'localIomadLearningpathDeletepath' => [
            'application/json',
        ],
        'localIomadLearningpathGetcourses' => [
            'application/json',
        ],
        'localIomadLearningpathGetprospectivecourses' => [
            'application/json',
        ],
        'localIomadLearningpathGetprospectiveusers' => [
            'application/json',
        ],
        'localIomadLearningpathGetusers' => [
            'application/json',
        ],
        'localIomadLearningpathOrdercourses' => [
            'application/json',
        ],
        'localIomadLearningpathRemovecourses' => [
            'application/json',
        ],
        'localIomadLearningpathRemoveusers' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation localIomadLearningpathActivate
     *
     * Activates / deactivates learning path
     *
     * @param  \OpenAPI\Client\Model\LocalIomadLearningpathActivateRequest $local_iomad_learningpath_activate_request local_iomad_learningpath_activate_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['localIomadLearningpathActivate'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object|\OpenAPI\Client\Model\ErrorResponse
     */
    public function localIomadLearningpathActivate($local_iomad_learningpath_activate_request, string $contentType = self::contentTypes['localIomadLearningpathActivate'][0])
    {
        list($response) = $this->localIomadLearningpathActivateWithHttpInfo($local_iomad_learningpath_activate_request, $contentType);
        return $response;
    }

    /**
     * Operation localIomadLearningpathActivateWithHttpInfo
     *
     * Activates / deactivates learning path
     *
     * @param  \OpenAPI\Client\Model\LocalIomadLearningpathActivateRequest $local_iomad_learningpath_activate_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['localIomadLearningpathActivate'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function localIomadLearningpathActivateWithHttpInfo($local_iomad_learningpath_activate_request, string $contentType = self::contentTypes['localIomadLearningpathActivate'][0])
    {
        $request = $this->localIomadLearningpathActivateRequest($local_iomad_learningpath_activate_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation localIomadLearningpathActivateAsync
     *
     * Activates / deactivates learning path
     *
     * @param  \OpenAPI\Client\Model\LocalIomadLearningpathActivateRequest $local_iomad_learningpath_activate_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['localIomadLearningpathActivate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function localIomadLearningpathActivateAsync($local_iomad_learningpath_activate_request, string $contentType = self::contentTypes['localIomadLearningpathActivate'][0])
    {
        return $this->localIomadLearningpathActivateAsyncWithHttpInfo($local_iomad_learningpath_activate_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation localIomadLearningpathActivateAsyncWithHttpInfo
     *
     * Activates / deactivates learning path
     *
     * @param  \OpenAPI\Client\Model\LocalIomadLearningpathActivateRequest $local_iomad_learningpath_activate_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['localIomadLearningpathActivate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function localIomadLearningpathActivateAsyncWithHttpInfo($local_iomad_learningpath_activate_request, string $contentType = self::contentTypes['localIomadLearningpathActivate'][0])
    {
        $returnType = 'object';
        $request = $this->localIomadLearningpathActivateRequest($local_iomad_learningpath_activate_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'localIomadLearningpathActivate'
     *
     * @param  \OpenAPI\Client\Model\LocalIomadLearningpathActivateRequest $local_iomad_learningpath_activate_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['localIomadLearningpathActivate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function localIomadLearningpathActivateRequest($local_iomad_learningpath_activate_request, string $contentType = self::contentTypes['localIomadLearningpathActivate'][0])
    {

        // verify the required parameter 'local_iomad_learningpath_activate_request' is set
        if ($local_iomad_learningpath_activate_request === null || (is_array($local_iomad_learningpath_activate_request) && count($local_iomad_learningpath_activate_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $local_iomad_learningpath_activate_request when calling localIomadLearningpathActivate'
            );
        }


        $resourcePath = '/local_iomad_learningpath_activate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($local_iomad_learningpath_activate_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($local_iomad_learningpath_activate_request));
            } else {
                $httpBody = $local_iomad_learningpath_activate_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation localIomadLearningpathAddcourses
     *
     * Add courses to learning path
     *
     * @param  \OpenAPI\Client\Model\LocalIomadLearningpathAddcoursesRequest $local_iomad_learningpath_addcourses_request local_iomad_learningpath_addcourses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['localIomadLearningpathAddcourses'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object|\OpenAPI\Client\Model\ErrorResponse
     */
    public function localIomadLearningpathAddcourses($local_iomad_learningpath_addcourses_request, string $contentType = self::contentTypes['localIomadLearningpathAddcourses'][0])
    {
        list($response) = $this->localIomadLearningpathAddcoursesWithHttpInfo($local_iomad_learningpath_addcourses_request, $contentType);
        return $response;
    }

    /**
     * Operation localIomadLearningpathAddcoursesWithHttpInfo
     *
     * Add courses to learning path
     *
     * @param  \OpenAPI\Client\Model\LocalIomadLearningpathAddcoursesRequest $local_iomad_learningpath_addcourses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['localIomadLearningpathAddcourses'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function localIomadLearningpathAddcoursesWithHttpInfo($local_iomad_learningpath_addcourses_request, string $contentType = self::contentTypes['localIomadLearningpathAddcourses'][0])
    {
        $request = $this->localIomadLearningpathAddcoursesRequest($local_iomad_learningpath_addcourses_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation localIomadLearningpathAddcoursesAsync
     *
     * Add courses to learning path
     *
     * @param  \OpenAPI\Client\Model\LocalIomadLearningpathAddcoursesRequest $local_iomad_learningpath_addcourses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['localIomadLearningpathAddcourses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function localIomadLearningpathAddcoursesAsync($local_iomad_learningpath_addcourses_request, string $contentType = self::contentTypes['localIomadLearningpathAddcourses'][0])
    {
        return $this->localIomadLearningpathAddcoursesAsyncWithHttpInfo($local_iomad_learningpath_addcourses_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation localIomadLearningpathAddcoursesAsyncWithHttpInfo
     *
     * Add courses to learning path
     *
     * @param  \OpenAPI\Client\Model\LocalIomadLearningpathAddcoursesRequest $local_iomad_learningpath_addcourses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['localIomadLearningpathAddcourses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function localIomadLearningpathAddcoursesAsyncWithHttpInfo($local_iomad_learningpath_addcourses_request, string $contentType = self::contentTypes['localIomadLearningpathAddcourses'][0])
    {
        $returnType = 'object';
        $request = $this->localIomadLearningpathAddcoursesRequest($local_iomad_learningpath_addcourses_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'localIomadLearningpathAddcourses'
     *
     * @param  \OpenAPI\Client\Model\LocalIomadLearningpathAddcoursesRequest $local_iomad_learningpath_addcourses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['localIomadLearningpathAddcourses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function localIomadLearningpathAddcoursesRequest($local_iomad_learningpath_addcourses_request, string $contentType = self::contentTypes['localIomadLearningpathAddcourses'][0])
    {

        // verify the required parameter 'local_iomad_learningpath_addcourses_request' is set
        if ($local_iomad_learningpath_addcourses_request === null || (is_array($local_iomad_learningpath_addcourses_request) && count($local_iomad_learningpath_addcourses_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $local_iomad_learningpath_addcourses_request when calling localIomadLearningpathAddcourses'
            );
        }


        $resourcePath = '/local_iomad_learningpath_addcourses';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($local_iomad_learningpath_addcourses_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($local_iomad_learningpath_addcourses_request));
            } else {
                $httpBody = $local_iomad_learningpath_addcourses_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation localIomadLearningpathAddusers
     *
     * Add users to learning path
     *
     * @param  \OpenAPI\Client\Model\LocalIomadLearningpathAddusersRequest $local_iomad_learningpath_addusers_request local_iomad_learningpath_addusers_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['localIomadLearningpathAddusers'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object|\OpenAPI\Client\Model\ErrorResponse
     */
    public function localIomadLearningpathAddusers($local_iomad_learningpath_addusers_request, string $contentType = self::contentTypes['localIomadLearningpathAddusers'][0])
    {
        list($response) = $this->localIomadLearningpathAddusersWithHttpInfo($local_iomad_learningpath_addusers_request, $contentType);
        return $response;
    }

    /**
     * Operation localIomadLearningpathAddusersWithHttpInfo
     *
     * Add users to learning path
     *
     * @param  \OpenAPI\Client\Model\LocalIomadLearningpathAddusersRequest $local_iomad_learningpath_addusers_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['localIomadLearningpathAddusers'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function localIomadLearningpathAddusersWithHttpInfo($local_iomad_learningpath_addusers_request, string $contentType = self::contentTypes['localIomadLearningpathAddusers'][0])
    {
        $request = $this->localIomadLearningpathAddusersRequest($local_iomad_learningpath_addusers_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation localIomadLearningpathAddusersAsync
     *
     * Add users to learning path
     *
     * @param  \OpenAPI\Client\Model\LocalIomadLearningpathAddusersRequest $local_iomad_learningpath_addusers_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['localIomadLearningpathAddusers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function localIomadLearningpathAddusersAsync($local_iomad_learningpath_addusers_request, string $contentType = self::contentTypes['localIomadLearningpathAddusers'][0])
    {
        return $this->localIomadLearningpathAddusersAsyncWithHttpInfo($local_iomad_learningpath_addusers_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation localIomadLearningpathAddusersAsyncWithHttpInfo
     *
     * Add users to learning path
     *
     * @param  \OpenAPI\Client\Model\LocalIomadLearningpathAddusersRequest $local_iomad_learningpath_addusers_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['localIomadLearningpathAddusers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function localIomadLearningpathAddusersAsyncWithHttpInfo($local_iomad_learningpath_addusers_request, string $contentType = self::contentTypes['localIomadLearningpathAddusers'][0])
    {
        $returnType = 'object';
        $request = $this->localIomadLearningpathAddusersRequest($local_iomad_learningpath_addusers_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'localIomadLearningpathAddusers'
     *
     * @param  \OpenAPI\Client\Model\LocalIomadLearningpathAddusersRequest $local_iomad_learningpath_addusers_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['localIomadLearningpathAddusers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function localIomadLearningpathAddusersRequest($local_iomad_learningpath_addusers_request, string $contentType = self::contentTypes['localIomadLearningpathAddusers'][0])
    {

        // verify the required parameter 'local_iomad_learningpath_addusers_request' is set
        if ($local_iomad_learningpath_addusers_request === null || (is_array($local_iomad_learningpath_addusers_request) && count($local_iomad_learningpath_addusers_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $local_iomad_learningpath_addusers_request when calling localIomadLearningpathAddusers'
            );
        }


        $resourcePath = '/local_iomad_learningpath_addusers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($local_iomad_learningpath_addusers_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($local_iomad_learningpath_addusers_request));
            } else {
                $httpBody = $local_iomad_learningpath_addusers_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation localIomadLearningpathCopypath
     *
     * Copy a learning path
     *
     * @param  \OpenAPI\Client\Model\LocalIomadLearningpathCopypathRequest $local_iomad_learningpath_copypath_request local_iomad_learningpath_copypath_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['localIomadLearningpathCopypath'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object|\OpenAPI\Client\Model\ErrorResponse
     */
    public function localIomadLearningpathCopypath($local_iomad_learningpath_copypath_request, string $contentType = self::contentTypes['localIomadLearningpathCopypath'][0])
    {
        list($response) = $this->localIomadLearningpathCopypathWithHttpInfo($local_iomad_learningpath_copypath_request, $contentType);
        return $response;
    }

    /**
     * Operation localIomadLearningpathCopypathWithHttpInfo
     *
     * Copy a learning path
     *
     * @param  \OpenAPI\Client\Model\LocalIomadLearningpathCopypathRequest $local_iomad_learningpath_copypath_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['localIomadLearningpathCopypath'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function localIomadLearningpathCopypathWithHttpInfo($local_iomad_learningpath_copypath_request, string $contentType = self::contentTypes['localIomadLearningpathCopypath'][0])
    {
        $request = $this->localIomadLearningpathCopypathRequest($local_iomad_learningpath_copypath_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation localIomadLearningpathCopypathAsync
     *
     * Copy a learning path
     *
     * @param  \OpenAPI\Client\Model\LocalIomadLearningpathCopypathRequest $local_iomad_learningpath_copypath_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['localIomadLearningpathCopypath'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function localIomadLearningpathCopypathAsync($local_iomad_learningpath_copypath_request, string $contentType = self::contentTypes['localIomadLearningpathCopypath'][0])
    {
        return $this->localIomadLearningpathCopypathAsyncWithHttpInfo($local_iomad_learningpath_copypath_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation localIomadLearningpathCopypathAsyncWithHttpInfo
     *
     * Copy a learning path
     *
     * @param  \OpenAPI\Client\Model\LocalIomadLearningpathCopypathRequest $local_iomad_learningpath_copypath_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['localIomadLearningpathCopypath'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function localIomadLearningpathCopypathAsyncWithHttpInfo($local_iomad_learningpath_copypath_request, string $contentType = self::contentTypes['localIomadLearningpathCopypath'][0])
    {
        $returnType = 'object';
        $request = $this->localIomadLearningpathCopypathRequest($local_iomad_learningpath_copypath_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'localIomadLearningpathCopypath'
     *
     * @param  \OpenAPI\Client\Model\LocalIomadLearningpathCopypathRequest $local_iomad_learningpath_copypath_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['localIomadLearningpathCopypath'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function localIomadLearningpathCopypathRequest($local_iomad_learningpath_copypath_request, string $contentType = self::contentTypes['localIomadLearningpathCopypath'][0])
    {

        // verify the required parameter 'local_iomad_learningpath_copypath_request' is set
        if ($local_iomad_learningpath_copypath_request === null || (is_array($local_iomad_learningpath_copypath_request) && count($local_iomad_learningpath_copypath_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $local_iomad_learningpath_copypath_request when calling localIomadLearningpathCopypath'
            );
        }


        $resourcePath = '/local_iomad_learningpath_copypath';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($local_iomad_learningpath_copypath_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($local_iomad_learningpath_copypath_request));
            } else {
                $httpBody = $local_iomad_learningpath_copypath_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation localIomadLearningpathDeletepath
     *
     * Completely delete a learning path
     *
     * @param  \OpenAPI\Client\Model\LocalIomadLearningpathCopypathRequest $local_iomad_learningpath_copypath_request local_iomad_learningpath_copypath_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['localIomadLearningpathDeletepath'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object|\OpenAPI\Client\Model\ErrorResponse
     */
    public function localIomadLearningpathDeletepath($local_iomad_learningpath_copypath_request, string $contentType = self::contentTypes['localIomadLearningpathDeletepath'][0])
    {
        list($response) = $this->localIomadLearningpathDeletepathWithHttpInfo($local_iomad_learningpath_copypath_request, $contentType);
        return $response;
    }

    /**
     * Operation localIomadLearningpathDeletepathWithHttpInfo
     *
     * Completely delete a learning path
     *
     * @param  \OpenAPI\Client\Model\LocalIomadLearningpathCopypathRequest $local_iomad_learningpath_copypath_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['localIomadLearningpathDeletepath'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function localIomadLearningpathDeletepathWithHttpInfo($local_iomad_learningpath_copypath_request, string $contentType = self::contentTypes['localIomadLearningpathDeletepath'][0])
    {
        $request = $this->localIomadLearningpathDeletepathRequest($local_iomad_learningpath_copypath_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation localIomadLearningpathDeletepathAsync
     *
     * Completely delete a learning path
     *
     * @param  \OpenAPI\Client\Model\LocalIomadLearningpathCopypathRequest $local_iomad_learningpath_copypath_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['localIomadLearningpathDeletepath'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function localIomadLearningpathDeletepathAsync($local_iomad_learningpath_copypath_request, string $contentType = self::contentTypes['localIomadLearningpathDeletepath'][0])
    {
        return $this->localIomadLearningpathDeletepathAsyncWithHttpInfo($local_iomad_learningpath_copypath_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation localIomadLearningpathDeletepathAsyncWithHttpInfo
     *
     * Completely delete a learning path
     *
     * @param  \OpenAPI\Client\Model\LocalIomadLearningpathCopypathRequest $local_iomad_learningpath_copypath_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['localIomadLearningpathDeletepath'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function localIomadLearningpathDeletepathAsyncWithHttpInfo($local_iomad_learningpath_copypath_request, string $contentType = self::contentTypes['localIomadLearningpathDeletepath'][0])
    {
        $returnType = 'object';
        $request = $this->localIomadLearningpathDeletepathRequest($local_iomad_learningpath_copypath_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'localIomadLearningpathDeletepath'
     *
     * @param  \OpenAPI\Client\Model\LocalIomadLearningpathCopypathRequest $local_iomad_learningpath_copypath_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['localIomadLearningpathDeletepath'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function localIomadLearningpathDeletepathRequest($local_iomad_learningpath_copypath_request, string $contentType = self::contentTypes['localIomadLearningpathDeletepath'][0])
    {

        // verify the required parameter 'local_iomad_learningpath_copypath_request' is set
        if ($local_iomad_learningpath_copypath_request === null || (is_array($local_iomad_learningpath_copypath_request) && count($local_iomad_learningpath_copypath_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $local_iomad_learningpath_copypath_request when calling localIomadLearningpathDeletepath'
            );
        }


        $resourcePath = '/local_iomad_learningpath_deletepath';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($local_iomad_learningpath_copypath_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($local_iomad_learningpath_copypath_request));
            } else {
                $httpBody = $local_iomad_learningpath_copypath_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation localIomadLearningpathGetcourses
     *
     * Read list of courses for given learning
     *
     * @param  \OpenAPI\Client\Model\LocalIomadLearningpathGetcoursesRequest $local_iomad_learningpath_getcourses_request local_iomad_learningpath_getcourses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['localIomadLearningpathGetcourses'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object|\OpenAPI\Client\Model\ErrorResponse
     */
    public function localIomadLearningpathGetcourses($local_iomad_learningpath_getcourses_request, string $contentType = self::contentTypes['localIomadLearningpathGetcourses'][0])
    {
        list($response) = $this->localIomadLearningpathGetcoursesWithHttpInfo($local_iomad_learningpath_getcourses_request, $contentType);
        return $response;
    }

    /**
     * Operation localIomadLearningpathGetcoursesWithHttpInfo
     *
     * Read list of courses for given learning
     *
     * @param  \OpenAPI\Client\Model\LocalIomadLearningpathGetcoursesRequest $local_iomad_learningpath_getcourses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['localIomadLearningpathGetcourses'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function localIomadLearningpathGetcoursesWithHttpInfo($local_iomad_learningpath_getcourses_request, string $contentType = self::contentTypes['localIomadLearningpathGetcourses'][0])
    {
        $request = $this->localIomadLearningpathGetcoursesRequest($local_iomad_learningpath_getcourses_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation localIomadLearningpathGetcoursesAsync
     *
     * Read list of courses for given learning
     *
     * @param  \OpenAPI\Client\Model\LocalIomadLearningpathGetcoursesRequest $local_iomad_learningpath_getcourses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['localIomadLearningpathGetcourses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function localIomadLearningpathGetcoursesAsync($local_iomad_learningpath_getcourses_request, string $contentType = self::contentTypes['localIomadLearningpathGetcourses'][0])
    {
        return $this->localIomadLearningpathGetcoursesAsyncWithHttpInfo($local_iomad_learningpath_getcourses_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation localIomadLearningpathGetcoursesAsyncWithHttpInfo
     *
     * Read list of courses for given learning
     *
     * @param  \OpenAPI\Client\Model\LocalIomadLearningpathGetcoursesRequest $local_iomad_learningpath_getcourses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['localIomadLearningpathGetcourses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function localIomadLearningpathGetcoursesAsyncWithHttpInfo($local_iomad_learningpath_getcourses_request, string $contentType = self::contentTypes['localIomadLearningpathGetcourses'][0])
    {
        $returnType = 'object';
        $request = $this->localIomadLearningpathGetcoursesRequest($local_iomad_learningpath_getcourses_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'localIomadLearningpathGetcourses'
     *
     * @param  \OpenAPI\Client\Model\LocalIomadLearningpathGetcoursesRequest $local_iomad_learningpath_getcourses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['localIomadLearningpathGetcourses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function localIomadLearningpathGetcoursesRequest($local_iomad_learningpath_getcourses_request, string $contentType = self::contentTypes['localIomadLearningpathGetcourses'][0])
    {

        // verify the required parameter 'local_iomad_learningpath_getcourses_request' is set
        if ($local_iomad_learningpath_getcourses_request === null || (is_array($local_iomad_learningpath_getcourses_request) && count($local_iomad_learningpath_getcourses_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $local_iomad_learningpath_getcourses_request when calling localIomadLearningpathGetcourses'
            );
        }


        $resourcePath = '/local_iomad_learningpath_getcourses';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($local_iomad_learningpath_getcourses_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($local_iomad_learningpath_getcourses_request));
            } else {
                $httpBody = $local_iomad_learningpath_getcourses_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation localIomadLearningpathGetprospectivecourses
     *
     * Read set of filtered courses for given company
     *
     * @param  \OpenAPI\Client\Model\LocalIomadLearningpathGetprospectivecoursesRequest $local_iomad_learningpath_getprospectivecourses_request local_iomad_learningpath_getprospectivecourses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['localIomadLearningpathGetprospectivecourses'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object|\OpenAPI\Client\Model\ErrorResponse
     */
    public function localIomadLearningpathGetprospectivecourses($local_iomad_learningpath_getprospectivecourses_request, string $contentType = self::contentTypes['localIomadLearningpathGetprospectivecourses'][0])
    {
        list($response) = $this->localIomadLearningpathGetprospectivecoursesWithHttpInfo($local_iomad_learningpath_getprospectivecourses_request, $contentType);
        return $response;
    }

    /**
     * Operation localIomadLearningpathGetprospectivecoursesWithHttpInfo
     *
     * Read set of filtered courses for given company
     *
     * @param  \OpenAPI\Client\Model\LocalIomadLearningpathGetprospectivecoursesRequest $local_iomad_learningpath_getprospectivecourses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['localIomadLearningpathGetprospectivecourses'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function localIomadLearningpathGetprospectivecoursesWithHttpInfo($local_iomad_learningpath_getprospectivecourses_request, string $contentType = self::contentTypes['localIomadLearningpathGetprospectivecourses'][0])
    {
        $request = $this->localIomadLearningpathGetprospectivecoursesRequest($local_iomad_learningpath_getprospectivecourses_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation localIomadLearningpathGetprospectivecoursesAsync
     *
     * Read set of filtered courses for given company
     *
     * @param  \OpenAPI\Client\Model\LocalIomadLearningpathGetprospectivecoursesRequest $local_iomad_learningpath_getprospectivecourses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['localIomadLearningpathGetprospectivecourses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function localIomadLearningpathGetprospectivecoursesAsync($local_iomad_learningpath_getprospectivecourses_request, string $contentType = self::contentTypes['localIomadLearningpathGetprospectivecourses'][0])
    {
        return $this->localIomadLearningpathGetprospectivecoursesAsyncWithHttpInfo($local_iomad_learningpath_getprospectivecourses_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation localIomadLearningpathGetprospectivecoursesAsyncWithHttpInfo
     *
     * Read set of filtered courses for given company
     *
     * @param  \OpenAPI\Client\Model\LocalIomadLearningpathGetprospectivecoursesRequest $local_iomad_learningpath_getprospectivecourses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['localIomadLearningpathGetprospectivecourses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function localIomadLearningpathGetprospectivecoursesAsyncWithHttpInfo($local_iomad_learningpath_getprospectivecourses_request, string $contentType = self::contentTypes['localIomadLearningpathGetprospectivecourses'][0])
    {
        $returnType = 'object';
        $request = $this->localIomadLearningpathGetprospectivecoursesRequest($local_iomad_learningpath_getprospectivecourses_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'localIomadLearningpathGetprospectivecourses'
     *
     * @param  \OpenAPI\Client\Model\LocalIomadLearningpathGetprospectivecoursesRequest $local_iomad_learningpath_getprospectivecourses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['localIomadLearningpathGetprospectivecourses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function localIomadLearningpathGetprospectivecoursesRequest($local_iomad_learningpath_getprospectivecourses_request, string $contentType = self::contentTypes['localIomadLearningpathGetprospectivecourses'][0])
    {

        // verify the required parameter 'local_iomad_learningpath_getprospectivecourses_request' is set
        if ($local_iomad_learningpath_getprospectivecourses_request === null || (is_array($local_iomad_learningpath_getprospectivecourses_request) && count($local_iomad_learningpath_getprospectivecourses_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $local_iomad_learningpath_getprospectivecourses_request when calling localIomadLearningpathGetprospectivecourses'
            );
        }


        $resourcePath = '/local_iomad_learningpath_getprospectivecourses';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($local_iomad_learningpath_getprospectivecourses_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($local_iomad_learningpath_getprospectivecourses_request));
            } else {
                $httpBody = $local_iomad_learningpath_getprospectivecourses_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation localIomadLearningpathGetprospectiveusers
     *
     * Get set of filtered users for given company
     *
     * @param  \OpenAPI\Client\Model\LocalIomadLearningpathGetprospectiveusersRequest $local_iomad_learningpath_getprospectiveusers_request local_iomad_learningpath_getprospectiveusers_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['localIomadLearningpathGetprospectiveusers'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object|\OpenAPI\Client\Model\ErrorResponse
     */
    public function localIomadLearningpathGetprospectiveusers($local_iomad_learningpath_getprospectiveusers_request, string $contentType = self::contentTypes['localIomadLearningpathGetprospectiveusers'][0])
    {
        list($response) = $this->localIomadLearningpathGetprospectiveusersWithHttpInfo($local_iomad_learningpath_getprospectiveusers_request, $contentType);
        return $response;
    }

    /**
     * Operation localIomadLearningpathGetprospectiveusersWithHttpInfo
     *
     * Get set of filtered users for given company
     *
     * @param  \OpenAPI\Client\Model\LocalIomadLearningpathGetprospectiveusersRequest $local_iomad_learningpath_getprospectiveusers_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['localIomadLearningpathGetprospectiveusers'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function localIomadLearningpathGetprospectiveusersWithHttpInfo($local_iomad_learningpath_getprospectiveusers_request, string $contentType = self::contentTypes['localIomadLearningpathGetprospectiveusers'][0])
    {
        $request = $this->localIomadLearningpathGetprospectiveusersRequest($local_iomad_learningpath_getprospectiveusers_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation localIomadLearningpathGetprospectiveusersAsync
     *
     * Get set of filtered users for given company
     *
     * @param  \OpenAPI\Client\Model\LocalIomadLearningpathGetprospectiveusersRequest $local_iomad_learningpath_getprospectiveusers_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['localIomadLearningpathGetprospectiveusers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function localIomadLearningpathGetprospectiveusersAsync($local_iomad_learningpath_getprospectiveusers_request, string $contentType = self::contentTypes['localIomadLearningpathGetprospectiveusers'][0])
    {
        return $this->localIomadLearningpathGetprospectiveusersAsyncWithHttpInfo($local_iomad_learningpath_getprospectiveusers_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation localIomadLearningpathGetprospectiveusersAsyncWithHttpInfo
     *
     * Get set of filtered users for given company
     *
     * @param  \OpenAPI\Client\Model\LocalIomadLearningpathGetprospectiveusersRequest $local_iomad_learningpath_getprospectiveusers_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['localIomadLearningpathGetprospectiveusers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function localIomadLearningpathGetprospectiveusersAsyncWithHttpInfo($local_iomad_learningpath_getprospectiveusers_request, string $contentType = self::contentTypes['localIomadLearningpathGetprospectiveusers'][0])
    {
        $returnType = 'object';
        $request = $this->localIomadLearningpathGetprospectiveusersRequest($local_iomad_learningpath_getprospectiveusers_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'localIomadLearningpathGetprospectiveusers'
     *
     * @param  \OpenAPI\Client\Model\LocalIomadLearningpathGetprospectiveusersRequest $local_iomad_learningpath_getprospectiveusers_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['localIomadLearningpathGetprospectiveusers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function localIomadLearningpathGetprospectiveusersRequest($local_iomad_learningpath_getprospectiveusers_request, string $contentType = self::contentTypes['localIomadLearningpathGetprospectiveusers'][0])
    {

        // verify the required parameter 'local_iomad_learningpath_getprospectiveusers_request' is set
        if ($local_iomad_learningpath_getprospectiveusers_request === null || (is_array($local_iomad_learningpath_getprospectiveusers_request) && count($local_iomad_learningpath_getprospectiveusers_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $local_iomad_learningpath_getprospectiveusers_request when calling localIomadLearningpathGetprospectiveusers'
            );
        }


        $resourcePath = '/local_iomad_learningpath_getprospectiveusers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($local_iomad_learningpath_getprospectiveusers_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($local_iomad_learningpath_getprospectiveusers_request));
            } else {
                $httpBody = $local_iomad_learningpath_getprospectiveusers_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation localIomadLearningpathGetusers
     *
     * Get users assigned to path
     *
     * @param  \OpenAPI\Client\Model\LocalIomadLearningpathGetusersRequest $local_iomad_learningpath_getusers_request local_iomad_learningpath_getusers_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['localIomadLearningpathGetusers'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object|\OpenAPI\Client\Model\ErrorResponse
     */
    public function localIomadLearningpathGetusers($local_iomad_learningpath_getusers_request, string $contentType = self::contentTypes['localIomadLearningpathGetusers'][0])
    {
        list($response) = $this->localIomadLearningpathGetusersWithHttpInfo($local_iomad_learningpath_getusers_request, $contentType);
        return $response;
    }

    /**
     * Operation localIomadLearningpathGetusersWithHttpInfo
     *
     * Get users assigned to path
     *
     * @param  \OpenAPI\Client\Model\LocalIomadLearningpathGetusersRequest $local_iomad_learningpath_getusers_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['localIomadLearningpathGetusers'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function localIomadLearningpathGetusersWithHttpInfo($local_iomad_learningpath_getusers_request, string $contentType = self::contentTypes['localIomadLearningpathGetusers'][0])
    {
        $request = $this->localIomadLearningpathGetusersRequest($local_iomad_learningpath_getusers_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation localIomadLearningpathGetusersAsync
     *
     * Get users assigned to path
     *
     * @param  \OpenAPI\Client\Model\LocalIomadLearningpathGetusersRequest $local_iomad_learningpath_getusers_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['localIomadLearningpathGetusers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function localIomadLearningpathGetusersAsync($local_iomad_learningpath_getusers_request, string $contentType = self::contentTypes['localIomadLearningpathGetusers'][0])
    {
        return $this->localIomadLearningpathGetusersAsyncWithHttpInfo($local_iomad_learningpath_getusers_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation localIomadLearningpathGetusersAsyncWithHttpInfo
     *
     * Get users assigned to path
     *
     * @param  \OpenAPI\Client\Model\LocalIomadLearningpathGetusersRequest $local_iomad_learningpath_getusers_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['localIomadLearningpathGetusers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function localIomadLearningpathGetusersAsyncWithHttpInfo($local_iomad_learningpath_getusers_request, string $contentType = self::contentTypes['localIomadLearningpathGetusers'][0])
    {
        $returnType = 'object';
        $request = $this->localIomadLearningpathGetusersRequest($local_iomad_learningpath_getusers_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'localIomadLearningpathGetusers'
     *
     * @param  \OpenAPI\Client\Model\LocalIomadLearningpathGetusersRequest $local_iomad_learningpath_getusers_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['localIomadLearningpathGetusers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function localIomadLearningpathGetusersRequest($local_iomad_learningpath_getusers_request, string $contentType = self::contentTypes['localIomadLearningpathGetusers'][0])
    {

        // verify the required parameter 'local_iomad_learningpath_getusers_request' is set
        if ($local_iomad_learningpath_getusers_request === null || (is_array($local_iomad_learningpath_getusers_request) && count($local_iomad_learningpath_getusers_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $local_iomad_learningpath_getusers_request when calling localIomadLearningpathGetusers'
            );
        }


        $resourcePath = '/local_iomad_learningpath_getusers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($local_iomad_learningpath_getusers_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($local_iomad_learningpath_getusers_request));
            } else {
                $httpBody = $local_iomad_learningpath_getusers_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation localIomadLearningpathOrdercourses
     *
     * Set sequence of courses in learning path
     *
     * @param  \OpenAPI\Client\Model\LocalIomadLearningpathOrdercoursesRequest $local_iomad_learningpath_ordercourses_request local_iomad_learningpath_ordercourses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['localIomadLearningpathOrdercourses'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object|\OpenAPI\Client\Model\ErrorResponse
     */
    public function localIomadLearningpathOrdercourses($local_iomad_learningpath_ordercourses_request, string $contentType = self::contentTypes['localIomadLearningpathOrdercourses'][0])
    {
        list($response) = $this->localIomadLearningpathOrdercoursesWithHttpInfo($local_iomad_learningpath_ordercourses_request, $contentType);
        return $response;
    }

    /**
     * Operation localIomadLearningpathOrdercoursesWithHttpInfo
     *
     * Set sequence of courses in learning path
     *
     * @param  \OpenAPI\Client\Model\LocalIomadLearningpathOrdercoursesRequest $local_iomad_learningpath_ordercourses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['localIomadLearningpathOrdercourses'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function localIomadLearningpathOrdercoursesWithHttpInfo($local_iomad_learningpath_ordercourses_request, string $contentType = self::contentTypes['localIomadLearningpathOrdercourses'][0])
    {
        $request = $this->localIomadLearningpathOrdercoursesRequest($local_iomad_learningpath_ordercourses_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation localIomadLearningpathOrdercoursesAsync
     *
     * Set sequence of courses in learning path
     *
     * @param  \OpenAPI\Client\Model\LocalIomadLearningpathOrdercoursesRequest $local_iomad_learningpath_ordercourses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['localIomadLearningpathOrdercourses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function localIomadLearningpathOrdercoursesAsync($local_iomad_learningpath_ordercourses_request, string $contentType = self::contentTypes['localIomadLearningpathOrdercourses'][0])
    {
        return $this->localIomadLearningpathOrdercoursesAsyncWithHttpInfo($local_iomad_learningpath_ordercourses_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation localIomadLearningpathOrdercoursesAsyncWithHttpInfo
     *
     * Set sequence of courses in learning path
     *
     * @param  \OpenAPI\Client\Model\LocalIomadLearningpathOrdercoursesRequest $local_iomad_learningpath_ordercourses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['localIomadLearningpathOrdercourses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function localIomadLearningpathOrdercoursesAsyncWithHttpInfo($local_iomad_learningpath_ordercourses_request, string $contentType = self::contentTypes['localIomadLearningpathOrdercourses'][0])
    {
        $returnType = 'object';
        $request = $this->localIomadLearningpathOrdercoursesRequest($local_iomad_learningpath_ordercourses_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'localIomadLearningpathOrdercourses'
     *
     * @param  \OpenAPI\Client\Model\LocalIomadLearningpathOrdercoursesRequest $local_iomad_learningpath_ordercourses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['localIomadLearningpathOrdercourses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function localIomadLearningpathOrdercoursesRequest($local_iomad_learningpath_ordercourses_request, string $contentType = self::contentTypes['localIomadLearningpathOrdercourses'][0])
    {

        // verify the required parameter 'local_iomad_learningpath_ordercourses_request' is set
        if ($local_iomad_learningpath_ordercourses_request === null || (is_array($local_iomad_learningpath_ordercourses_request) && count($local_iomad_learningpath_ordercourses_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $local_iomad_learningpath_ordercourses_request when calling localIomadLearningpathOrdercourses'
            );
        }


        $resourcePath = '/local_iomad_learningpath_ordercourses';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($local_iomad_learningpath_ordercourses_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($local_iomad_learningpath_ordercourses_request));
            } else {
                $httpBody = $local_iomad_learningpath_ordercourses_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation localIomadLearningpathRemovecourses
     *
     * Remove courses from learning path
     *
     * @param  \OpenAPI\Client\Model\LocalIomadLearningpathRemovecoursesRequest $local_iomad_learningpath_removecourses_request local_iomad_learningpath_removecourses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['localIomadLearningpathRemovecourses'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object|\OpenAPI\Client\Model\ErrorResponse
     */
    public function localIomadLearningpathRemovecourses($local_iomad_learningpath_removecourses_request, string $contentType = self::contentTypes['localIomadLearningpathRemovecourses'][0])
    {
        list($response) = $this->localIomadLearningpathRemovecoursesWithHttpInfo($local_iomad_learningpath_removecourses_request, $contentType);
        return $response;
    }

    /**
     * Operation localIomadLearningpathRemovecoursesWithHttpInfo
     *
     * Remove courses from learning path
     *
     * @param  \OpenAPI\Client\Model\LocalIomadLearningpathRemovecoursesRequest $local_iomad_learningpath_removecourses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['localIomadLearningpathRemovecourses'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function localIomadLearningpathRemovecoursesWithHttpInfo($local_iomad_learningpath_removecourses_request, string $contentType = self::contentTypes['localIomadLearningpathRemovecourses'][0])
    {
        $request = $this->localIomadLearningpathRemovecoursesRequest($local_iomad_learningpath_removecourses_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation localIomadLearningpathRemovecoursesAsync
     *
     * Remove courses from learning path
     *
     * @param  \OpenAPI\Client\Model\LocalIomadLearningpathRemovecoursesRequest $local_iomad_learningpath_removecourses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['localIomadLearningpathRemovecourses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function localIomadLearningpathRemovecoursesAsync($local_iomad_learningpath_removecourses_request, string $contentType = self::contentTypes['localIomadLearningpathRemovecourses'][0])
    {
        return $this->localIomadLearningpathRemovecoursesAsyncWithHttpInfo($local_iomad_learningpath_removecourses_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation localIomadLearningpathRemovecoursesAsyncWithHttpInfo
     *
     * Remove courses from learning path
     *
     * @param  \OpenAPI\Client\Model\LocalIomadLearningpathRemovecoursesRequest $local_iomad_learningpath_removecourses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['localIomadLearningpathRemovecourses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function localIomadLearningpathRemovecoursesAsyncWithHttpInfo($local_iomad_learningpath_removecourses_request, string $contentType = self::contentTypes['localIomadLearningpathRemovecourses'][0])
    {
        $returnType = 'object';
        $request = $this->localIomadLearningpathRemovecoursesRequest($local_iomad_learningpath_removecourses_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'localIomadLearningpathRemovecourses'
     *
     * @param  \OpenAPI\Client\Model\LocalIomadLearningpathRemovecoursesRequest $local_iomad_learningpath_removecourses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['localIomadLearningpathRemovecourses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function localIomadLearningpathRemovecoursesRequest($local_iomad_learningpath_removecourses_request, string $contentType = self::contentTypes['localIomadLearningpathRemovecourses'][0])
    {

        // verify the required parameter 'local_iomad_learningpath_removecourses_request' is set
        if ($local_iomad_learningpath_removecourses_request === null || (is_array($local_iomad_learningpath_removecourses_request) && count($local_iomad_learningpath_removecourses_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $local_iomad_learningpath_removecourses_request when calling localIomadLearningpathRemovecourses'
            );
        }


        $resourcePath = '/local_iomad_learningpath_removecourses';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($local_iomad_learningpath_removecourses_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($local_iomad_learningpath_removecourses_request));
            } else {
                $httpBody = $local_iomad_learningpath_removecourses_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation localIomadLearningpathRemoveusers
     *
     * Remove users from learning path
     *
     * @param  \OpenAPI\Client\Model\LocalIomadLearningpathRemoveusersRequest $local_iomad_learningpath_removeusers_request local_iomad_learningpath_removeusers_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['localIomadLearningpathRemoveusers'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object|\OpenAPI\Client\Model\ErrorResponse
     */
    public function localIomadLearningpathRemoveusers($local_iomad_learningpath_removeusers_request, string $contentType = self::contentTypes['localIomadLearningpathRemoveusers'][0])
    {
        list($response) = $this->localIomadLearningpathRemoveusersWithHttpInfo($local_iomad_learningpath_removeusers_request, $contentType);
        return $response;
    }

    /**
     * Operation localIomadLearningpathRemoveusersWithHttpInfo
     *
     * Remove users from learning path
     *
     * @param  \OpenAPI\Client\Model\LocalIomadLearningpathRemoveusersRequest $local_iomad_learningpath_removeusers_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['localIomadLearningpathRemoveusers'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function localIomadLearningpathRemoveusersWithHttpInfo($local_iomad_learningpath_removeusers_request, string $contentType = self::contentTypes['localIomadLearningpathRemoveusers'][0])
    {
        $request = $this->localIomadLearningpathRemoveusersRequest($local_iomad_learningpath_removeusers_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation localIomadLearningpathRemoveusersAsync
     *
     * Remove users from learning path
     *
     * @param  \OpenAPI\Client\Model\LocalIomadLearningpathRemoveusersRequest $local_iomad_learningpath_removeusers_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['localIomadLearningpathRemoveusers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function localIomadLearningpathRemoveusersAsync($local_iomad_learningpath_removeusers_request, string $contentType = self::contentTypes['localIomadLearningpathRemoveusers'][0])
    {
        return $this->localIomadLearningpathRemoveusersAsyncWithHttpInfo($local_iomad_learningpath_removeusers_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation localIomadLearningpathRemoveusersAsyncWithHttpInfo
     *
     * Remove users from learning path
     *
     * @param  \OpenAPI\Client\Model\LocalIomadLearningpathRemoveusersRequest $local_iomad_learningpath_removeusers_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['localIomadLearningpathRemoveusers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function localIomadLearningpathRemoveusersAsyncWithHttpInfo($local_iomad_learningpath_removeusers_request, string $contentType = self::contentTypes['localIomadLearningpathRemoveusers'][0])
    {
        $returnType = 'object';
        $request = $this->localIomadLearningpathRemoveusersRequest($local_iomad_learningpath_removeusers_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'localIomadLearningpathRemoveusers'
     *
     * @param  \OpenAPI\Client\Model\LocalIomadLearningpathRemoveusersRequest $local_iomad_learningpath_removeusers_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['localIomadLearningpathRemoveusers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function localIomadLearningpathRemoveusersRequest($local_iomad_learningpath_removeusers_request, string $contentType = self::contentTypes['localIomadLearningpathRemoveusers'][0])
    {

        // verify the required parameter 'local_iomad_learningpath_removeusers_request' is set
        if ($local_iomad_learningpath_removeusers_request === null || (is_array($local_iomad_learningpath_removeusers_request) && count($local_iomad_learningpath_removeusers_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $local_iomad_learningpath_removeusers_request when calling localIomadLearningpathRemoveusers'
            );
        }


        $resourcePath = '/local_iomad_learningpath_removeusers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($local_iomad_learningpath_removeusers_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($local_iomad_learningpath_removeusers_request));
            } else {
                $httpBody = $local_iomad_learningpath_removeusers_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
