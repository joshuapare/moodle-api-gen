<?php
/**
 * ModFeedbackApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * ModFeedbackApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ModFeedbackApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'modFeedbackGetAnalysis' => [
            'application/json',
        ],
        'modFeedbackGetCurrentCompletedTmp' => [
            'application/json',
        ],
        'modFeedbackGetFeedbackAccessInformation' => [
            'application/json',
        ],
        'modFeedbackGetFeedbacksByCourses' => [
            'application/json',
        ],
        'modFeedbackGetFinishedResponses' => [
            'application/json',
        ],
        'modFeedbackGetItems' => [
            'application/json',
        ],
        'modFeedbackGetLastCompleted' => [
            'application/json',
        ],
        'modFeedbackGetNonRespondents' => [
            'application/json',
        ],
        'modFeedbackGetPageItems' => [
            'application/json',
        ],
        'modFeedbackGetResponsesAnalysis' => [
            'application/json',
        ],
        'modFeedbackGetUnfinishedResponses' => [
            'application/json',
        ],
        'modFeedbackLaunchFeedback' => [
            'application/json',
        ],
        'modFeedbackProcessPage' => [
            'application/json',
        ],
        'modFeedbackViewFeedback' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation modFeedbackGetAnalysis
     *
     * Retrieves the feedback analysis.
     *
     * @param  \OpenAPI\Client\Model\ModFeedbackGetAnalysisRequest $mod_feedback_get_analysis_request mod_feedback_get_analysis_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modFeedbackGetAnalysis'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModFeedbackGetAnalysis200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modFeedbackGetAnalysis($mod_feedback_get_analysis_request, string $contentType = self::contentTypes['modFeedbackGetAnalysis'][0])
    {
        list($response) = $this->modFeedbackGetAnalysisWithHttpInfo($mod_feedback_get_analysis_request, $contentType);
        return $response;
    }

    /**
     * Operation modFeedbackGetAnalysisWithHttpInfo
     *
     * Retrieves the feedback analysis.
     *
     * @param  \OpenAPI\Client\Model\ModFeedbackGetAnalysisRequest $mod_feedback_get_analysis_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modFeedbackGetAnalysis'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModFeedbackGetAnalysis200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modFeedbackGetAnalysisWithHttpInfo($mod_feedback_get_analysis_request, string $contentType = self::contentTypes['modFeedbackGetAnalysis'][0])
    {
        $request = $this->modFeedbackGetAnalysisRequest($mod_feedback_get_analysis_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModFeedbackGetAnalysis200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModFeedbackGetAnalysis200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModFeedbackGetAnalysis200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModFeedbackGetAnalysis200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModFeedbackGetAnalysis200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modFeedbackGetAnalysisAsync
     *
     * Retrieves the feedback analysis.
     *
     * @param  \OpenAPI\Client\Model\ModFeedbackGetAnalysisRequest $mod_feedback_get_analysis_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modFeedbackGetAnalysis'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modFeedbackGetAnalysisAsync($mod_feedback_get_analysis_request, string $contentType = self::contentTypes['modFeedbackGetAnalysis'][0])
    {
        return $this->modFeedbackGetAnalysisAsyncWithHttpInfo($mod_feedback_get_analysis_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modFeedbackGetAnalysisAsyncWithHttpInfo
     *
     * Retrieves the feedback analysis.
     *
     * @param  \OpenAPI\Client\Model\ModFeedbackGetAnalysisRequest $mod_feedback_get_analysis_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modFeedbackGetAnalysis'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modFeedbackGetAnalysisAsyncWithHttpInfo($mod_feedback_get_analysis_request, string $contentType = self::contentTypes['modFeedbackGetAnalysis'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModFeedbackGetAnalysis200Response';
        $request = $this->modFeedbackGetAnalysisRequest($mod_feedback_get_analysis_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modFeedbackGetAnalysis'
     *
     * @param  \OpenAPI\Client\Model\ModFeedbackGetAnalysisRequest $mod_feedback_get_analysis_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modFeedbackGetAnalysis'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modFeedbackGetAnalysisRequest($mod_feedback_get_analysis_request, string $contentType = self::contentTypes['modFeedbackGetAnalysis'][0])
    {

        // verify the required parameter 'mod_feedback_get_analysis_request' is set
        if ($mod_feedback_get_analysis_request === null || (is_array($mod_feedback_get_analysis_request) && count($mod_feedback_get_analysis_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_feedback_get_analysis_request when calling modFeedbackGetAnalysis'
            );
        }


        $resourcePath = '/mod_feedback_get_analysis';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_feedback_get_analysis_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_feedback_get_analysis_request));
            } else {
                $httpBody = $mod_feedback_get_analysis_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modFeedbackGetCurrentCompletedTmp
     *
     * Returns the temporary completion record for the current user.
     *
     * @param  \OpenAPI\Client\Model\ModFeedbackGetCurrentCompletedTmpRequest $mod_feedback_get_current_completed_tmp_request mod_feedback_get_current_completed_tmp_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modFeedbackGetCurrentCompletedTmp'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModFeedbackGetCurrentCompletedTmp200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modFeedbackGetCurrentCompletedTmp($mod_feedback_get_current_completed_tmp_request, string $contentType = self::contentTypes['modFeedbackGetCurrentCompletedTmp'][0])
    {
        list($response) = $this->modFeedbackGetCurrentCompletedTmpWithHttpInfo($mod_feedback_get_current_completed_tmp_request, $contentType);
        return $response;
    }

    /**
     * Operation modFeedbackGetCurrentCompletedTmpWithHttpInfo
     *
     * Returns the temporary completion record for the current user.
     *
     * @param  \OpenAPI\Client\Model\ModFeedbackGetCurrentCompletedTmpRequest $mod_feedback_get_current_completed_tmp_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modFeedbackGetCurrentCompletedTmp'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModFeedbackGetCurrentCompletedTmp200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modFeedbackGetCurrentCompletedTmpWithHttpInfo($mod_feedback_get_current_completed_tmp_request, string $contentType = self::contentTypes['modFeedbackGetCurrentCompletedTmp'][0])
    {
        $request = $this->modFeedbackGetCurrentCompletedTmpRequest($mod_feedback_get_current_completed_tmp_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModFeedbackGetCurrentCompletedTmp200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModFeedbackGetCurrentCompletedTmp200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModFeedbackGetCurrentCompletedTmp200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModFeedbackGetCurrentCompletedTmp200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModFeedbackGetCurrentCompletedTmp200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modFeedbackGetCurrentCompletedTmpAsync
     *
     * Returns the temporary completion record for the current user.
     *
     * @param  \OpenAPI\Client\Model\ModFeedbackGetCurrentCompletedTmpRequest $mod_feedback_get_current_completed_tmp_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modFeedbackGetCurrentCompletedTmp'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modFeedbackGetCurrentCompletedTmpAsync($mod_feedback_get_current_completed_tmp_request, string $contentType = self::contentTypes['modFeedbackGetCurrentCompletedTmp'][0])
    {
        return $this->modFeedbackGetCurrentCompletedTmpAsyncWithHttpInfo($mod_feedback_get_current_completed_tmp_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modFeedbackGetCurrentCompletedTmpAsyncWithHttpInfo
     *
     * Returns the temporary completion record for the current user.
     *
     * @param  \OpenAPI\Client\Model\ModFeedbackGetCurrentCompletedTmpRequest $mod_feedback_get_current_completed_tmp_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modFeedbackGetCurrentCompletedTmp'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modFeedbackGetCurrentCompletedTmpAsyncWithHttpInfo($mod_feedback_get_current_completed_tmp_request, string $contentType = self::contentTypes['modFeedbackGetCurrentCompletedTmp'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModFeedbackGetCurrentCompletedTmp200Response';
        $request = $this->modFeedbackGetCurrentCompletedTmpRequest($mod_feedback_get_current_completed_tmp_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modFeedbackGetCurrentCompletedTmp'
     *
     * @param  \OpenAPI\Client\Model\ModFeedbackGetCurrentCompletedTmpRequest $mod_feedback_get_current_completed_tmp_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modFeedbackGetCurrentCompletedTmp'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modFeedbackGetCurrentCompletedTmpRequest($mod_feedback_get_current_completed_tmp_request, string $contentType = self::contentTypes['modFeedbackGetCurrentCompletedTmp'][0])
    {

        // verify the required parameter 'mod_feedback_get_current_completed_tmp_request' is set
        if ($mod_feedback_get_current_completed_tmp_request === null || (is_array($mod_feedback_get_current_completed_tmp_request) && count($mod_feedback_get_current_completed_tmp_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_feedback_get_current_completed_tmp_request when calling modFeedbackGetCurrentCompletedTmp'
            );
        }


        $resourcePath = '/mod_feedback_get_current_completed_tmp';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_feedback_get_current_completed_tmp_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_feedback_get_current_completed_tmp_request));
            } else {
                $httpBody = $mod_feedback_get_current_completed_tmp_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modFeedbackGetFeedbackAccessInformation
     *
     * Return access information for a given feedback.
     *
     * @param  \OpenAPI\Client\Model\ModFeedbackGetFeedbackAccessInformationRequest $mod_feedback_get_feedback_access_information_request mod_feedback_get_feedback_access_information_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modFeedbackGetFeedbackAccessInformation'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModFeedbackGetFeedbackAccessInformation200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modFeedbackGetFeedbackAccessInformation($mod_feedback_get_feedback_access_information_request, string $contentType = self::contentTypes['modFeedbackGetFeedbackAccessInformation'][0])
    {
        list($response) = $this->modFeedbackGetFeedbackAccessInformationWithHttpInfo($mod_feedback_get_feedback_access_information_request, $contentType);
        return $response;
    }

    /**
     * Operation modFeedbackGetFeedbackAccessInformationWithHttpInfo
     *
     * Return access information for a given feedback.
     *
     * @param  \OpenAPI\Client\Model\ModFeedbackGetFeedbackAccessInformationRequest $mod_feedback_get_feedback_access_information_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modFeedbackGetFeedbackAccessInformation'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModFeedbackGetFeedbackAccessInformation200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modFeedbackGetFeedbackAccessInformationWithHttpInfo($mod_feedback_get_feedback_access_information_request, string $contentType = self::contentTypes['modFeedbackGetFeedbackAccessInformation'][0])
    {
        $request = $this->modFeedbackGetFeedbackAccessInformationRequest($mod_feedback_get_feedback_access_information_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModFeedbackGetFeedbackAccessInformation200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModFeedbackGetFeedbackAccessInformation200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModFeedbackGetFeedbackAccessInformation200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModFeedbackGetFeedbackAccessInformation200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModFeedbackGetFeedbackAccessInformation200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modFeedbackGetFeedbackAccessInformationAsync
     *
     * Return access information for a given feedback.
     *
     * @param  \OpenAPI\Client\Model\ModFeedbackGetFeedbackAccessInformationRequest $mod_feedback_get_feedback_access_information_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modFeedbackGetFeedbackAccessInformation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modFeedbackGetFeedbackAccessInformationAsync($mod_feedback_get_feedback_access_information_request, string $contentType = self::contentTypes['modFeedbackGetFeedbackAccessInformation'][0])
    {
        return $this->modFeedbackGetFeedbackAccessInformationAsyncWithHttpInfo($mod_feedback_get_feedback_access_information_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modFeedbackGetFeedbackAccessInformationAsyncWithHttpInfo
     *
     * Return access information for a given feedback.
     *
     * @param  \OpenAPI\Client\Model\ModFeedbackGetFeedbackAccessInformationRequest $mod_feedback_get_feedback_access_information_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modFeedbackGetFeedbackAccessInformation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modFeedbackGetFeedbackAccessInformationAsyncWithHttpInfo($mod_feedback_get_feedback_access_information_request, string $contentType = self::contentTypes['modFeedbackGetFeedbackAccessInformation'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModFeedbackGetFeedbackAccessInformation200Response';
        $request = $this->modFeedbackGetFeedbackAccessInformationRequest($mod_feedback_get_feedback_access_information_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modFeedbackGetFeedbackAccessInformation'
     *
     * @param  \OpenAPI\Client\Model\ModFeedbackGetFeedbackAccessInformationRequest $mod_feedback_get_feedback_access_information_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modFeedbackGetFeedbackAccessInformation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modFeedbackGetFeedbackAccessInformationRequest($mod_feedback_get_feedback_access_information_request, string $contentType = self::contentTypes['modFeedbackGetFeedbackAccessInformation'][0])
    {

        // verify the required parameter 'mod_feedback_get_feedback_access_information_request' is set
        if ($mod_feedback_get_feedback_access_information_request === null || (is_array($mod_feedback_get_feedback_access_information_request) && count($mod_feedback_get_feedback_access_information_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_feedback_get_feedback_access_information_request when calling modFeedbackGetFeedbackAccessInformation'
            );
        }


        $resourcePath = '/mod_feedback_get_feedback_access_information';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_feedback_get_feedback_access_information_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_feedback_get_feedback_access_information_request));
            } else {
                $httpBody = $mod_feedback_get_feedback_access_information_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modFeedbackGetFeedbacksByCourses
     *
     * Returns a list of feedbacks in a provided list of courses, if no list is provided all feedbacks that                             the user can view will be returned.
     *
     * @param  \OpenAPI\Client\Model\ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest $mod_bigbluebuttonbn_get_bigbluebuttonbns_by_courses_request mod_bigbluebuttonbn_get_bigbluebuttonbns_by_courses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modFeedbackGetFeedbacksByCourses'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModFeedbackGetFeedbacksByCourses200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modFeedbackGetFeedbacksByCourses($mod_bigbluebuttonbn_get_bigbluebuttonbns_by_courses_request, string $contentType = self::contentTypes['modFeedbackGetFeedbacksByCourses'][0])
    {
        list($response) = $this->modFeedbackGetFeedbacksByCoursesWithHttpInfo($mod_bigbluebuttonbn_get_bigbluebuttonbns_by_courses_request, $contentType);
        return $response;
    }

    /**
     * Operation modFeedbackGetFeedbacksByCoursesWithHttpInfo
     *
     * Returns a list of feedbacks in a provided list of courses, if no list is provided all feedbacks that                             the user can view will be returned.
     *
     * @param  \OpenAPI\Client\Model\ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest $mod_bigbluebuttonbn_get_bigbluebuttonbns_by_courses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modFeedbackGetFeedbacksByCourses'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModFeedbackGetFeedbacksByCourses200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modFeedbackGetFeedbacksByCoursesWithHttpInfo($mod_bigbluebuttonbn_get_bigbluebuttonbns_by_courses_request, string $contentType = self::contentTypes['modFeedbackGetFeedbacksByCourses'][0])
    {
        $request = $this->modFeedbackGetFeedbacksByCoursesRequest($mod_bigbluebuttonbn_get_bigbluebuttonbns_by_courses_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModFeedbackGetFeedbacksByCourses200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModFeedbackGetFeedbacksByCourses200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModFeedbackGetFeedbacksByCourses200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModFeedbackGetFeedbacksByCourses200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModFeedbackGetFeedbacksByCourses200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modFeedbackGetFeedbacksByCoursesAsync
     *
     * Returns a list of feedbacks in a provided list of courses, if no list is provided all feedbacks that                             the user can view will be returned.
     *
     * @param  \OpenAPI\Client\Model\ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest $mod_bigbluebuttonbn_get_bigbluebuttonbns_by_courses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modFeedbackGetFeedbacksByCourses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modFeedbackGetFeedbacksByCoursesAsync($mod_bigbluebuttonbn_get_bigbluebuttonbns_by_courses_request, string $contentType = self::contentTypes['modFeedbackGetFeedbacksByCourses'][0])
    {
        return $this->modFeedbackGetFeedbacksByCoursesAsyncWithHttpInfo($mod_bigbluebuttonbn_get_bigbluebuttonbns_by_courses_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modFeedbackGetFeedbacksByCoursesAsyncWithHttpInfo
     *
     * Returns a list of feedbacks in a provided list of courses, if no list is provided all feedbacks that                             the user can view will be returned.
     *
     * @param  \OpenAPI\Client\Model\ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest $mod_bigbluebuttonbn_get_bigbluebuttonbns_by_courses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modFeedbackGetFeedbacksByCourses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modFeedbackGetFeedbacksByCoursesAsyncWithHttpInfo($mod_bigbluebuttonbn_get_bigbluebuttonbns_by_courses_request, string $contentType = self::contentTypes['modFeedbackGetFeedbacksByCourses'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModFeedbackGetFeedbacksByCourses200Response';
        $request = $this->modFeedbackGetFeedbacksByCoursesRequest($mod_bigbluebuttonbn_get_bigbluebuttonbns_by_courses_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modFeedbackGetFeedbacksByCourses'
     *
     * @param  \OpenAPI\Client\Model\ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest $mod_bigbluebuttonbn_get_bigbluebuttonbns_by_courses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modFeedbackGetFeedbacksByCourses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modFeedbackGetFeedbacksByCoursesRequest($mod_bigbluebuttonbn_get_bigbluebuttonbns_by_courses_request, string $contentType = self::contentTypes['modFeedbackGetFeedbacksByCourses'][0])
    {

        // verify the required parameter 'mod_bigbluebuttonbn_get_bigbluebuttonbns_by_courses_request' is set
        if ($mod_bigbluebuttonbn_get_bigbluebuttonbns_by_courses_request === null || (is_array($mod_bigbluebuttonbn_get_bigbluebuttonbns_by_courses_request) && count($mod_bigbluebuttonbn_get_bigbluebuttonbns_by_courses_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_bigbluebuttonbn_get_bigbluebuttonbns_by_courses_request when calling modFeedbackGetFeedbacksByCourses'
            );
        }


        $resourcePath = '/mod_feedback_get_feedbacks_by_courses';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_bigbluebuttonbn_get_bigbluebuttonbns_by_courses_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_bigbluebuttonbn_get_bigbluebuttonbns_by_courses_request));
            } else {
                $httpBody = $mod_bigbluebuttonbn_get_bigbluebuttonbns_by_courses_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modFeedbackGetFinishedResponses
     *
     * Retrieves responses from the last finished attempt.
     *
     * @param  \OpenAPI\Client\Model\ModFeedbackGetFinishedResponsesRequest $mod_feedback_get_finished_responses_request mod_feedback_get_finished_responses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modFeedbackGetFinishedResponses'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModFeedbackGetFinishedResponses200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modFeedbackGetFinishedResponses($mod_feedback_get_finished_responses_request, string $contentType = self::contentTypes['modFeedbackGetFinishedResponses'][0])
    {
        list($response) = $this->modFeedbackGetFinishedResponsesWithHttpInfo($mod_feedback_get_finished_responses_request, $contentType);
        return $response;
    }

    /**
     * Operation modFeedbackGetFinishedResponsesWithHttpInfo
     *
     * Retrieves responses from the last finished attempt.
     *
     * @param  \OpenAPI\Client\Model\ModFeedbackGetFinishedResponsesRequest $mod_feedback_get_finished_responses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modFeedbackGetFinishedResponses'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModFeedbackGetFinishedResponses200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modFeedbackGetFinishedResponsesWithHttpInfo($mod_feedback_get_finished_responses_request, string $contentType = self::contentTypes['modFeedbackGetFinishedResponses'][0])
    {
        $request = $this->modFeedbackGetFinishedResponsesRequest($mod_feedback_get_finished_responses_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModFeedbackGetFinishedResponses200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModFeedbackGetFinishedResponses200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModFeedbackGetFinishedResponses200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModFeedbackGetFinishedResponses200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModFeedbackGetFinishedResponses200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modFeedbackGetFinishedResponsesAsync
     *
     * Retrieves responses from the last finished attempt.
     *
     * @param  \OpenAPI\Client\Model\ModFeedbackGetFinishedResponsesRequest $mod_feedback_get_finished_responses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modFeedbackGetFinishedResponses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modFeedbackGetFinishedResponsesAsync($mod_feedback_get_finished_responses_request, string $contentType = self::contentTypes['modFeedbackGetFinishedResponses'][0])
    {
        return $this->modFeedbackGetFinishedResponsesAsyncWithHttpInfo($mod_feedback_get_finished_responses_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modFeedbackGetFinishedResponsesAsyncWithHttpInfo
     *
     * Retrieves responses from the last finished attempt.
     *
     * @param  \OpenAPI\Client\Model\ModFeedbackGetFinishedResponsesRequest $mod_feedback_get_finished_responses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modFeedbackGetFinishedResponses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modFeedbackGetFinishedResponsesAsyncWithHttpInfo($mod_feedback_get_finished_responses_request, string $contentType = self::contentTypes['modFeedbackGetFinishedResponses'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModFeedbackGetFinishedResponses200Response';
        $request = $this->modFeedbackGetFinishedResponsesRequest($mod_feedback_get_finished_responses_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modFeedbackGetFinishedResponses'
     *
     * @param  \OpenAPI\Client\Model\ModFeedbackGetFinishedResponsesRequest $mod_feedback_get_finished_responses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modFeedbackGetFinishedResponses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modFeedbackGetFinishedResponsesRequest($mod_feedback_get_finished_responses_request, string $contentType = self::contentTypes['modFeedbackGetFinishedResponses'][0])
    {

        // verify the required parameter 'mod_feedback_get_finished_responses_request' is set
        if ($mod_feedback_get_finished_responses_request === null || (is_array($mod_feedback_get_finished_responses_request) && count($mod_feedback_get_finished_responses_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_feedback_get_finished_responses_request when calling modFeedbackGetFinishedResponses'
            );
        }


        $resourcePath = '/mod_feedback_get_finished_responses';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_feedback_get_finished_responses_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_feedback_get_finished_responses_request));
            } else {
                $httpBody = $mod_feedback_get_finished_responses_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modFeedbackGetItems
     *
     * Returns the items (questions) in the given feedback.
     *
     * @param  \OpenAPI\Client\Model\ModFeedbackGetCurrentCompletedTmpRequest $mod_feedback_get_current_completed_tmp_request mod_feedback_get_current_completed_tmp_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modFeedbackGetItems'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModFeedbackGetItems200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modFeedbackGetItems($mod_feedback_get_current_completed_tmp_request, string $contentType = self::contentTypes['modFeedbackGetItems'][0])
    {
        list($response) = $this->modFeedbackGetItemsWithHttpInfo($mod_feedback_get_current_completed_tmp_request, $contentType);
        return $response;
    }

    /**
     * Operation modFeedbackGetItemsWithHttpInfo
     *
     * Returns the items (questions) in the given feedback.
     *
     * @param  \OpenAPI\Client\Model\ModFeedbackGetCurrentCompletedTmpRequest $mod_feedback_get_current_completed_tmp_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modFeedbackGetItems'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModFeedbackGetItems200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modFeedbackGetItemsWithHttpInfo($mod_feedback_get_current_completed_tmp_request, string $contentType = self::contentTypes['modFeedbackGetItems'][0])
    {
        $request = $this->modFeedbackGetItemsRequest($mod_feedback_get_current_completed_tmp_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModFeedbackGetItems200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModFeedbackGetItems200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModFeedbackGetItems200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModFeedbackGetItems200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModFeedbackGetItems200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modFeedbackGetItemsAsync
     *
     * Returns the items (questions) in the given feedback.
     *
     * @param  \OpenAPI\Client\Model\ModFeedbackGetCurrentCompletedTmpRequest $mod_feedback_get_current_completed_tmp_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modFeedbackGetItems'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modFeedbackGetItemsAsync($mod_feedback_get_current_completed_tmp_request, string $contentType = self::contentTypes['modFeedbackGetItems'][0])
    {
        return $this->modFeedbackGetItemsAsyncWithHttpInfo($mod_feedback_get_current_completed_tmp_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modFeedbackGetItemsAsyncWithHttpInfo
     *
     * Returns the items (questions) in the given feedback.
     *
     * @param  \OpenAPI\Client\Model\ModFeedbackGetCurrentCompletedTmpRequest $mod_feedback_get_current_completed_tmp_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modFeedbackGetItems'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modFeedbackGetItemsAsyncWithHttpInfo($mod_feedback_get_current_completed_tmp_request, string $contentType = self::contentTypes['modFeedbackGetItems'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModFeedbackGetItems200Response';
        $request = $this->modFeedbackGetItemsRequest($mod_feedback_get_current_completed_tmp_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modFeedbackGetItems'
     *
     * @param  \OpenAPI\Client\Model\ModFeedbackGetCurrentCompletedTmpRequest $mod_feedback_get_current_completed_tmp_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modFeedbackGetItems'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modFeedbackGetItemsRequest($mod_feedback_get_current_completed_tmp_request, string $contentType = self::contentTypes['modFeedbackGetItems'][0])
    {

        // verify the required parameter 'mod_feedback_get_current_completed_tmp_request' is set
        if ($mod_feedback_get_current_completed_tmp_request === null || (is_array($mod_feedback_get_current_completed_tmp_request) && count($mod_feedback_get_current_completed_tmp_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_feedback_get_current_completed_tmp_request when calling modFeedbackGetItems'
            );
        }


        $resourcePath = '/mod_feedback_get_items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_feedback_get_current_completed_tmp_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_feedback_get_current_completed_tmp_request));
            } else {
                $httpBody = $mod_feedback_get_current_completed_tmp_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modFeedbackGetLastCompleted
     *
     * Retrieves the last completion record for the current user.
     *
     * @param  \OpenAPI\Client\Model\ModFeedbackGetCurrentCompletedTmpRequest $mod_feedback_get_current_completed_tmp_request mod_feedback_get_current_completed_tmp_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modFeedbackGetLastCompleted'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModFeedbackGetLastCompleted200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modFeedbackGetLastCompleted($mod_feedback_get_current_completed_tmp_request, string $contentType = self::contentTypes['modFeedbackGetLastCompleted'][0])
    {
        list($response) = $this->modFeedbackGetLastCompletedWithHttpInfo($mod_feedback_get_current_completed_tmp_request, $contentType);
        return $response;
    }

    /**
     * Operation modFeedbackGetLastCompletedWithHttpInfo
     *
     * Retrieves the last completion record for the current user.
     *
     * @param  \OpenAPI\Client\Model\ModFeedbackGetCurrentCompletedTmpRequest $mod_feedback_get_current_completed_tmp_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modFeedbackGetLastCompleted'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModFeedbackGetLastCompleted200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modFeedbackGetLastCompletedWithHttpInfo($mod_feedback_get_current_completed_tmp_request, string $contentType = self::contentTypes['modFeedbackGetLastCompleted'][0])
    {
        $request = $this->modFeedbackGetLastCompletedRequest($mod_feedback_get_current_completed_tmp_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModFeedbackGetLastCompleted200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModFeedbackGetLastCompleted200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModFeedbackGetLastCompleted200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModFeedbackGetLastCompleted200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModFeedbackGetLastCompleted200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modFeedbackGetLastCompletedAsync
     *
     * Retrieves the last completion record for the current user.
     *
     * @param  \OpenAPI\Client\Model\ModFeedbackGetCurrentCompletedTmpRequest $mod_feedback_get_current_completed_tmp_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modFeedbackGetLastCompleted'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modFeedbackGetLastCompletedAsync($mod_feedback_get_current_completed_tmp_request, string $contentType = self::contentTypes['modFeedbackGetLastCompleted'][0])
    {
        return $this->modFeedbackGetLastCompletedAsyncWithHttpInfo($mod_feedback_get_current_completed_tmp_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modFeedbackGetLastCompletedAsyncWithHttpInfo
     *
     * Retrieves the last completion record for the current user.
     *
     * @param  \OpenAPI\Client\Model\ModFeedbackGetCurrentCompletedTmpRequest $mod_feedback_get_current_completed_tmp_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modFeedbackGetLastCompleted'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modFeedbackGetLastCompletedAsyncWithHttpInfo($mod_feedback_get_current_completed_tmp_request, string $contentType = self::contentTypes['modFeedbackGetLastCompleted'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModFeedbackGetLastCompleted200Response';
        $request = $this->modFeedbackGetLastCompletedRequest($mod_feedback_get_current_completed_tmp_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modFeedbackGetLastCompleted'
     *
     * @param  \OpenAPI\Client\Model\ModFeedbackGetCurrentCompletedTmpRequest $mod_feedback_get_current_completed_tmp_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modFeedbackGetLastCompleted'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modFeedbackGetLastCompletedRequest($mod_feedback_get_current_completed_tmp_request, string $contentType = self::contentTypes['modFeedbackGetLastCompleted'][0])
    {

        // verify the required parameter 'mod_feedback_get_current_completed_tmp_request' is set
        if ($mod_feedback_get_current_completed_tmp_request === null || (is_array($mod_feedback_get_current_completed_tmp_request) && count($mod_feedback_get_current_completed_tmp_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_feedback_get_current_completed_tmp_request when calling modFeedbackGetLastCompleted'
            );
        }


        $resourcePath = '/mod_feedback_get_last_completed';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_feedback_get_current_completed_tmp_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_feedback_get_current_completed_tmp_request));
            } else {
                $httpBody = $mod_feedback_get_current_completed_tmp_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modFeedbackGetNonRespondents
     *
     * Retrieves a list of students who didn&#39;t submit the feedback.
     *
     * @param  \OpenAPI\Client\Model\ModFeedbackGetNonRespondentsRequest $mod_feedback_get_non_respondents_request mod_feedback_get_non_respondents_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modFeedbackGetNonRespondents'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModFeedbackGetNonRespondents200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modFeedbackGetNonRespondents($mod_feedback_get_non_respondents_request, string $contentType = self::contentTypes['modFeedbackGetNonRespondents'][0])
    {
        list($response) = $this->modFeedbackGetNonRespondentsWithHttpInfo($mod_feedback_get_non_respondents_request, $contentType);
        return $response;
    }

    /**
     * Operation modFeedbackGetNonRespondentsWithHttpInfo
     *
     * Retrieves a list of students who didn&#39;t submit the feedback.
     *
     * @param  \OpenAPI\Client\Model\ModFeedbackGetNonRespondentsRequest $mod_feedback_get_non_respondents_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modFeedbackGetNonRespondents'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModFeedbackGetNonRespondents200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modFeedbackGetNonRespondentsWithHttpInfo($mod_feedback_get_non_respondents_request, string $contentType = self::contentTypes['modFeedbackGetNonRespondents'][0])
    {
        $request = $this->modFeedbackGetNonRespondentsRequest($mod_feedback_get_non_respondents_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModFeedbackGetNonRespondents200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModFeedbackGetNonRespondents200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModFeedbackGetNonRespondents200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModFeedbackGetNonRespondents200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModFeedbackGetNonRespondents200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modFeedbackGetNonRespondentsAsync
     *
     * Retrieves a list of students who didn&#39;t submit the feedback.
     *
     * @param  \OpenAPI\Client\Model\ModFeedbackGetNonRespondentsRequest $mod_feedback_get_non_respondents_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modFeedbackGetNonRespondents'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modFeedbackGetNonRespondentsAsync($mod_feedback_get_non_respondents_request, string $contentType = self::contentTypes['modFeedbackGetNonRespondents'][0])
    {
        return $this->modFeedbackGetNonRespondentsAsyncWithHttpInfo($mod_feedback_get_non_respondents_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modFeedbackGetNonRespondentsAsyncWithHttpInfo
     *
     * Retrieves a list of students who didn&#39;t submit the feedback.
     *
     * @param  \OpenAPI\Client\Model\ModFeedbackGetNonRespondentsRequest $mod_feedback_get_non_respondents_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modFeedbackGetNonRespondents'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modFeedbackGetNonRespondentsAsyncWithHttpInfo($mod_feedback_get_non_respondents_request, string $contentType = self::contentTypes['modFeedbackGetNonRespondents'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModFeedbackGetNonRespondents200Response';
        $request = $this->modFeedbackGetNonRespondentsRequest($mod_feedback_get_non_respondents_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modFeedbackGetNonRespondents'
     *
     * @param  \OpenAPI\Client\Model\ModFeedbackGetNonRespondentsRequest $mod_feedback_get_non_respondents_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modFeedbackGetNonRespondents'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modFeedbackGetNonRespondentsRequest($mod_feedback_get_non_respondents_request, string $contentType = self::contentTypes['modFeedbackGetNonRespondents'][0])
    {

        // verify the required parameter 'mod_feedback_get_non_respondents_request' is set
        if ($mod_feedback_get_non_respondents_request === null || (is_array($mod_feedback_get_non_respondents_request) && count($mod_feedback_get_non_respondents_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_feedback_get_non_respondents_request when calling modFeedbackGetNonRespondents'
            );
        }


        $resourcePath = '/mod_feedback_get_non_respondents';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_feedback_get_non_respondents_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_feedback_get_non_respondents_request));
            } else {
                $httpBody = $mod_feedback_get_non_respondents_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modFeedbackGetPageItems
     *
     * Get a single feedback page items.
     *
     * @param  \OpenAPI\Client\Model\ModFeedbackGetPageItemsRequest $mod_feedback_get_page_items_request mod_feedback_get_page_items_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modFeedbackGetPageItems'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModFeedbackGetPageItems200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modFeedbackGetPageItems($mod_feedback_get_page_items_request, string $contentType = self::contentTypes['modFeedbackGetPageItems'][0])
    {
        list($response) = $this->modFeedbackGetPageItemsWithHttpInfo($mod_feedback_get_page_items_request, $contentType);
        return $response;
    }

    /**
     * Operation modFeedbackGetPageItemsWithHttpInfo
     *
     * Get a single feedback page items.
     *
     * @param  \OpenAPI\Client\Model\ModFeedbackGetPageItemsRequest $mod_feedback_get_page_items_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modFeedbackGetPageItems'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModFeedbackGetPageItems200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modFeedbackGetPageItemsWithHttpInfo($mod_feedback_get_page_items_request, string $contentType = self::contentTypes['modFeedbackGetPageItems'][0])
    {
        $request = $this->modFeedbackGetPageItemsRequest($mod_feedback_get_page_items_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModFeedbackGetPageItems200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModFeedbackGetPageItems200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModFeedbackGetPageItems200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModFeedbackGetPageItems200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModFeedbackGetPageItems200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modFeedbackGetPageItemsAsync
     *
     * Get a single feedback page items.
     *
     * @param  \OpenAPI\Client\Model\ModFeedbackGetPageItemsRequest $mod_feedback_get_page_items_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modFeedbackGetPageItems'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modFeedbackGetPageItemsAsync($mod_feedback_get_page_items_request, string $contentType = self::contentTypes['modFeedbackGetPageItems'][0])
    {
        return $this->modFeedbackGetPageItemsAsyncWithHttpInfo($mod_feedback_get_page_items_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modFeedbackGetPageItemsAsyncWithHttpInfo
     *
     * Get a single feedback page items.
     *
     * @param  \OpenAPI\Client\Model\ModFeedbackGetPageItemsRequest $mod_feedback_get_page_items_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modFeedbackGetPageItems'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modFeedbackGetPageItemsAsyncWithHttpInfo($mod_feedback_get_page_items_request, string $contentType = self::contentTypes['modFeedbackGetPageItems'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModFeedbackGetPageItems200Response';
        $request = $this->modFeedbackGetPageItemsRequest($mod_feedback_get_page_items_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modFeedbackGetPageItems'
     *
     * @param  \OpenAPI\Client\Model\ModFeedbackGetPageItemsRequest $mod_feedback_get_page_items_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modFeedbackGetPageItems'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modFeedbackGetPageItemsRequest($mod_feedback_get_page_items_request, string $contentType = self::contentTypes['modFeedbackGetPageItems'][0])
    {

        // verify the required parameter 'mod_feedback_get_page_items_request' is set
        if ($mod_feedback_get_page_items_request === null || (is_array($mod_feedback_get_page_items_request) && count($mod_feedback_get_page_items_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_feedback_get_page_items_request when calling modFeedbackGetPageItems'
            );
        }


        $resourcePath = '/mod_feedback_get_page_items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_feedback_get_page_items_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_feedback_get_page_items_request));
            } else {
                $httpBody = $mod_feedback_get_page_items_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modFeedbackGetResponsesAnalysis
     *
     * Return the feedback user responses analysis.
     *
     * @param  \OpenAPI\Client\Model\ModFeedbackGetResponsesAnalysisRequest $mod_feedback_get_responses_analysis_request mod_feedback_get_responses_analysis_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modFeedbackGetResponsesAnalysis'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModFeedbackGetResponsesAnalysis200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modFeedbackGetResponsesAnalysis($mod_feedback_get_responses_analysis_request, string $contentType = self::contentTypes['modFeedbackGetResponsesAnalysis'][0])
    {
        list($response) = $this->modFeedbackGetResponsesAnalysisWithHttpInfo($mod_feedback_get_responses_analysis_request, $contentType);
        return $response;
    }

    /**
     * Operation modFeedbackGetResponsesAnalysisWithHttpInfo
     *
     * Return the feedback user responses analysis.
     *
     * @param  \OpenAPI\Client\Model\ModFeedbackGetResponsesAnalysisRequest $mod_feedback_get_responses_analysis_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modFeedbackGetResponsesAnalysis'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModFeedbackGetResponsesAnalysis200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modFeedbackGetResponsesAnalysisWithHttpInfo($mod_feedback_get_responses_analysis_request, string $contentType = self::contentTypes['modFeedbackGetResponsesAnalysis'][0])
    {
        $request = $this->modFeedbackGetResponsesAnalysisRequest($mod_feedback_get_responses_analysis_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModFeedbackGetResponsesAnalysis200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModFeedbackGetResponsesAnalysis200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModFeedbackGetResponsesAnalysis200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModFeedbackGetResponsesAnalysis200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModFeedbackGetResponsesAnalysis200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modFeedbackGetResponsesAnalysisAsync
     *
     * Return the feedback user responses analysis.
     *
     * @param  \OpenAPI\Client\Model\ModFeedbackGetResponsesAnalysisRequest $mod_feedback_get_responses_analysis_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modFeedbackGetResponsesAnalysis'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modFeedbackGetResponsesAnalysisAsync($mod_feedback_get_responses_analysis_request, string $contentType = self::contentTypes['modFeedbackGetResponsesAnalysis'][0])
    {
        return $this->modFeedbackGetResponsesAnalysisAsyncWithHttpInfo($mod_feedback_get_responses_analysis_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modFeedbackGetResponsesAnalysisAsyncWithHttpInfo
     *
     * Return the feedback user responses analysis.
     *
     * @param  \OpenAPI\Client\Model\ModFeedbackGetResponsesAnalysisRequest $mod_feedback_get_responses_analysis_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modFeedbackGetResponsesAnalysis'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modFeedbackGetResponsesAnalysisAsyncWithHttpInfo($mod_feedback_get_responses_analysis_request, string $contentType = self::contentTypes['modFeedbackGetResponsesAnalysis'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModFeedbackGetResponsesAnalysis200Response';
        $request = $this->modFeedbackGetResponsesAnalysisRequest($mod_feedback_get_responses_analysis_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modFeedbackGetResponsesAnalysis'
     *
     * @param  \OpenAPI\Client\Model\ModFeedbackGetResponsesAnalysisRequest $mod_feedback_get_responses_analysis_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modFeedbackGetResponsesAnalysis'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modFeedbackGetResponsesAnalysisRequest($mod_feedback_get_responses_analysis_request, string $contentType = self::contentTypes['modFeedbackGetResponsesAnalysis'][0])
    {

        // verify the required parameter 'mod_feedback_get_responses_analysis_request' is set
        if ($mod_feedback_get_responses_analysis_request === null || (is_array($mod_feedback_get_responses_analysis_request) && count($mod_feedback_get_responses_analysis_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_feedback_get_responses_analysis_request when calling modFeedbackGetResponsesAnalysis'
            );
        }


        $resourcePath = '/mod_feedback_get_responses_analysis';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_feedback_get_responses_analysis_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_feedback_get_responses_analysis_request));
            } else {
                $httpBody = $mod_feedback_get_responses_analysis_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modFeedbackGetUnfinishedResponses
     *
     * Retrieves responses from the current unfinished attempt.
     *
     * @param  \OpenAPI\Client\Model\ModFeedbackGetFinishedResponsesRequest $mod_feedback_get_finished_responses_request mod_feedback_get_finished_responses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modFeedbackGetUnfinishedResponses'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModFeedbackGetUnfinishedResponses200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modFeedbackGetUnfinishedResponses($mod_feedback_get_finished_responses_request, string $contentType = self::contentTypes['modFeedbackGetUnfinishedResponses'][0])
    {
        list($response) = $this->modFeedbackGetUnfinishedResponsesWithHttpInfo($mod_feedback_get_finished_responses_request, $contentType);
        return $response;
    }

    /**
     * Operation modFeedbackGetUnfinishedResponsesWithHttpInfo
     *
     * Retrieves responses from the current unfinished attempt.
     *
     * @param  \OpenAPI\Client\Model\ModFeedbackGetFinishedResponsesRequest $mod_feedback_get_finished_responses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modFeedbackGetUnfinishedResponses'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModFeedbackGetUnfinishedResponses200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modFeedbackGetUnfinishedResponsesWithHttpInfo($mod_feedback_get_finished_responses_request, string $contentType = self::contentTypes['modFeedbackGetUnfinishedResponses'][0])
    {
        $request = $this->modFeedbackGetUnfinishedResponsesRequest($mod_feedback_get_finished_responses_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModFeedbackGetUnfinishedResponses200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModFeedbackGetUnfinishedResponses200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModFeedbackGetUnfinishedResponses200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModFeedbackGetUnfinishedResponses200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModFeedbackGetUnfinishedResponses200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modFeedbackGetUnfinishedResponsesAsync
     *
     * Retrieves responses from the current unfinished attempt.
     *
     * @param  \OpenAPI\Client\Model\ModFeedbackGetFinishedResponsesRequest $mod_feedback_get_finished_responses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modFeedbackGetUnfinishedResponses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modFeedbackGetUnfinishedResponsesAsync($mod_feedback_get_finished_responses_request, string $contentType = self::contentTypes['modFeedbackGetUnfinishedResponses'][0])
    {
        return $this->modFeedbackGetUnfinishedResponsesAsyncWithHttpInfo($mod_feedback_get_finished_responses_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modFeedbackGetUnfinishedResponsesAsyncWithHttpInfo
     *
     * Retrieves responses from the current unfinished attempt.
     *
     * @param  \OpenAPI\Client\Model\ModFeedbackGetFinishedResponsesRequest $mod_feedback_get_finished_responses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modFeedbackGetUnfinishedResponses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modFeedbackGetUnfinishedResponsesAsyncWithHttpInfo($mod_feedback_get_finished_responses_request, string $contentType = self::contentTypes['modFeedbackGetUnfinishedResponses'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModFeedbackGetUnfinishedResponses200Response';
        $request = $this->modFeedbackGetUnfinishedResponsesRequest($mod_feedback_get_finished_responses_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modFeedbackGetUnfinishedResponses'
     *
     * @param  \OpenAPI\Client\Model\ModFeedbackGetFinishedResponsesRequest $mod_feedback_get_finished_responses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modFeedbackGetUnfinishedResponses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modFeedbackGetUnfinishedResponsesRequest($mod_feedback_get_finished_responses_request, string $contentType = self::contentTypes['modFeedbackGetUnfinishedResponses'][0])
    {

        // verify the required parameter 'mod_feedback_get_finished_responses_request' is set
        if ($mod_feedback_get_finished_responses_request === null || (is_array($mod_feedback_get_finished_responses_request) && count($mod_feedback_get_finished_responses_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_feedback_get_finished_responses_request when calling modFeedbackGetUnfinishedResponses'
            );
        }


        $resourcePath = '/mod_feedback_get_unfinished_responses';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_feedback_get_finished_responses_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_feedback_get_finished_responses_request));
            } else {
                $httpBody = $mod_feedback_get_finished_responses_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modFeedbackLaunchFeedback
     *
     * Starts or continues a feedback submission.
     *
     * @param  \OpenAPI\Client\Model\ModFeedbackGetCurrentCompletedTmpRequest $mod_feedback_get_current_completed_tmp_request mod_feedback_get_current_completed_tmp_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modFeedbackLaunchFeedback'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModFeedbackLaunchFeedback200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modFeedbackLaunchFeedback($mod_feedback_get_current_completed_tmp_request, string $contentType = self::contentTypes['modFeedbackLaunchFeedback'][0])
    {
        list($response) = $this->modFeedbackLaunchFeedbackWithHttpInfo($mod_feedback_get_current_completed_tmp_request, $contentType);
        return $response;
    }

    /**
     * Operation modFeedbackLaunchFeedbackWithHttpInfo
     *
     * Starts or continues a feedback submission.
     *
     * @param  \OpenAPI\Client\Model\ModFeedbackGetCurrentCompletedTmpRequest $mod_feedback_get_current_completed_tmp_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modFeedbackLaunchFeedback'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModFeedbackLaunchFeedback200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modFeedbackLaunchFeedbackWithHttpInfo($mod_feedback_get_current_completed_tmp_request, string $contentType = self::contentTypes['modFeedbackLaunchFeedback'][0])
    {
        $request = $this->modFeedbackLaunchFeedbackRequest($mod_feedback_get_current_completed_tmp_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModFeedbackLaunchFeedback200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModFeedbackLaunchFeedback200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModFeedbackLaunchFeedback200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModFeedbackLaunchFeedback200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModFeedbackLaunchFeedback200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modFeedbackLaunchFeedbackAsync
     *
     * Starts or continues a feedback submission.
     *
     * @param  \OpenAPI\Client\Model\ModFeedbackGetCurrentCompletedTmpRequest $mod_feedback_get_current_completed_tmp_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modFeedbackLaunchFeedback'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modFeedbackLaunchFeedbackAsync($mod_feedback_get_current_completed_tmp_request, string $contentType = self::contentTypes['modFeedbackLaunchFeedback'][0])
    {
        return $this->modFeedbackLaunchFeedbackAsyncWithHttpInfo($mod_feedback_get_current_completed_tmp_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modFeedbackLaunchFeedbackAsyncWithHttpInfo
     *
     * Starts or continues a feedback submission.
     *
     * @param  \OpenAPI\Client\Model\ModFeedbackGetCurrentCompletedTmpRequest $mod_feedback_get_current_completed_tmp_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modFeedbackLaunchFeedback'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modFeedbackLaunchFeedbackAsyncWithHttpInfo($mod_feedback_get_current_completed_tmp_request, string $contentType = self::contentTypes['modFeedbackLaunchFeedback'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModFeedbackLaunchFeedback200Response';
        $request = $this->modFeedbackLaunchFeedbackRequest($mod_feedback_get_current_completed_tmp_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modFeedbackLaunchFeedback'
     *
     * @param  \OpenAPI\Client\Model\ModFeedbackGetCurrentCompletedTmpRequest $mod_feedback_get_current_completed_tmp_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modFeedbackLaunchFeedback'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modFeedbackLaunchFeedbackRequest($mod_feedback_get_current_completed_tmp_request, string $contentType = self::contentTypes['modFeedbackLaunchFeedback'][0])
    {

        // verify the required parameter 'mod_feedback_get_current_completed_tmp_request' is set
        if ($mod_feedback_get_current_completed_tmp_request === null || (is_array($mod_feedback_get_current_completed_tmp_request) && count($mod_feedback_get_current_completed_tmp_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_feedback_get_current_completed_tmp_request when calling modFeedbackLaunchFeedback'
            );
        }


        $resourcePath = '/mod_feedback_launch_feedback';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_feedback_get_current_completed_tmp_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_feedback_get_current_completed_tmp_request));
            } else {
                $httpBody = $mod_feedback_get_current_completed_tmp_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modFeedbackProcessPage
     *
     * Process a jump between pages.
     *
     * @param  \OpenAPI\Client\Model\ModFeedbackProcessPageRequest $mod_feedback_process_page_request mod_feedback_process_page_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modFeedbackProcessPage'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModFeedbackProcessPage200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modFeedbackProcessPage($mod_feedback_process_page_request, string $contentType = self::contentTypes['modFeedbackProcessPage'][0])
    {
        list($response) = $this->modFeedbackProcessPageWithHttpInfo($mod_feedback_process_page_request, $contentType);
        return $response;
    }

    /**
     * Operation modFeedbackProcessPageWithHttpInfo
     *
     * Process a jump between pages.
     *
     * @param  \OpenAPI\Client\Model\ModFeedbackProcessPageRequest $mod_feedback_process_page_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modFeedbackProcessPage'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModFeedbackProcessPage200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modFeedbackProcessPageWithHttpInfo($mod_feedback_process_page_request, string $contentType = self::contentTypes['modFeedbackProcessPage'][0])
    {
        $request = $this->modFeedbackProcessPageRequest($mod_feedback_process_page_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModFeedbackProcessPage200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModFeedbackProcessPage200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModFeedbackProcessPage200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModFeedbackProcessPage200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModFeedbackProcessPage200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modFeedbackProcessPageAsync
     *
     * Process a jump between pages.
     *
     * @param  \OpenAPI\Client\Model\ModFeedbackProcessPageRequest $mod_feedback_process_page_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modFeedbackProcessPage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modFeedbackProcessPageAsync($mod_feedback_process_page_request, string $contentType = self::contentTypes['modFeedbackProcessPage'][0])
    {
        return $this->modFeedbackProcessPageAsyncWithHttpInfo($mod_feedback_process_page_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modFeedbackProcessPageAsyncWithHttpInfo
     *
     * Process a jump between pages.
     *
     * @param  \OpenAPI\Client\Model\ModFeedbackProcessPageRequest $mod_feedback_process_page_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modFeedbackProcessPage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modFeedbackProcessPageAsyncWithHttpInfo($mod_feedback_process_page_request, string $contentType = self::contentTypes['modFeedbackProcessPage'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModFeedbackProcessPage200Response';
        $request = $this->modFeedbackProcessPageRequest($mod_feedback_process_page_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modFeedbackProcessPage'
     *
     * @param  \OpenAPI\Client\Model\ModFeedbackProcessPageRequest $mod_feedback_process_page_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modFeedbackProcessPage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modFeedbackProcessPageRequest($mod_feedback_process_page_request, string $contentType = self::contentTypes['modFeedbackProcessPage'][0])
    {

        // verify the required parameter 'mod_feedback_process_page_request' is set
        if ($mod_feedback_process_page_request === null || (is_array($mod_feedback_process_page_request) && count($mod_feedback_process_page_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_feedback_process_page_request when calling modFeedbackProcessPage'
            );
        }


        $resourcePath = '/mod_feedback_process_page';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_feedback_process_page_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_feedback_process_page_request));
            } else {
                $httpBody = $mod_feedback_process_page_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modFeedbackViewFeedback
     *
     * Trigger the course module viewed event and update the module completion status.
     *
     * @param  \OpenAPI\Client\Model\ModFeedbackViewFeedbackRequest $mod_feedback_view_feedback_request mod_feedback_view_feedback_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modFeedbackViewFeedback'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response|\OpenAPI\Client\Model\ErrorResponse
     */
    public function modFeedbackViewFeedback($mod_feedback_view_feedback_request, string $contentType = self::contentTypes['modFeedbackViewFeedback'][0])
    {
        list($response) = $this->modFeedbackViewFeedbackWithHttpInfo($mod_feedback_view_feedback_request, $contentType);
        return $response;
    }

    /**
     * Operation modFeedbackViewFeedbackWithHttpInfo
     *
     * Trigger the course module viewed event and update the module completion status.
     *
     * @param  \OpenAPI\Client\Model\ModFeedbackViewFeedbackRequest $mod_feedback_view_feedback_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modFeedbackViewFeedback'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modFeedbackViewFeedbackWithHttpInfo($mod_feedback_view_feedback_request, string $contentType = self::contentTypes['modFeedbackViewFeedback'][0])
    {
        $request = $this->modFeedbackViewFeedbackRequest($mod_feedback_view_feedback_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modFeedbackViewFeedbackAsync
     *
     * Trigger the course module viewed event and update the module completion status.
     *
     * @param  \OpenAPI\Client\Model\ModFeedbackViewFeedbackRequest $mod_feedback_view_feedback_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modFeedbackViewFeedback'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modFeedbackViewFeedbackAsync($mod_feedback_view_feedback_request, string $contentType = self::contentTypes['modFeedbackViewFeedback'][0])
    {
        return $this->modFeedbackViewFeedbackAsyncWithHttpInfo($mod_feedback_view_feedback_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modFeedbackViewFeedbackAsyncWithHttpInfo
     *
     * Trigger the course module viewed event and update the module completion status.
     *
     * @param  \OpenAPI\Client\Model\ModFeedbackViewFeedbackRequest $mod_feedback_view_feedback_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modFeedbackViewFeedback'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modFeedbackViewFeedbackAsyncWithHttpInfo($mod_feedback_view_feedback_request, string $contentType = self::contentTypes['modFeedbackViewFeedback'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CoreCalendarDeleteSubscription200Response';
        $request = $this->modFeedbackViewFeedbackRequest($mod_feedback_view_feedback_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modFeedbackViewFeedback'
     *
     * @param  \OpenAPI\Client\Model\ModFeedbackViewFeedbackRequest $mod_feedback_view_feedback_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modFeedbackViewFeedback'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modFeedbackViewFeedbackRequest($mod_feedback_view_feedback_request, string $contentType = self::contentTypes['modFeedbackViewFeedback'][0])
    {

        // verify the required parameter 'mod_feedback_view_feedback_request' is set
        if ($mod_feedback_view_feedback_request === null || (is_array($mod_feedback_view_feedback_request) && count($mod_feedback_view_feedback_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_feedback_view_feedback_request when calling modFeedbackViewFeedback'
            );
        }


        $resourcePath = '/mod_feedback_view_feedback';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mod_feedback_view_feedback_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mod_feedback_view_feedback_request));
            } else {
                $httpBody = $mod_feedback_view_feedback_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
