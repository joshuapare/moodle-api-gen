/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.joshuapare.moodleclient;

import com.joshuapare.ApiException;
import org.openapitools.client.model.CoreCalendarDeleteSubscription200Response;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest;
import org.openapitools.client.model.ModWorkshopAddSubmission200Response;
import org.openapitools.client.model.ModWorkshopAddSubmissionRequest;
import org.openapitools.client.model.ModWorkshopDeleteSubmission200Response;
import org.openapitools.client.model.ModWorkshopDeleteSubmissionRequest;
import org.openapitools.client.model.ModWorkshopEvaluateAssessment200Response;
import org.openapitools.client.model.ModWorkshopEvaluateAssessmentRequest;
import org.openapitools.client.model.ModWorkshopEvaluateSubmission200Response;
import org.openapitools.client.model.ModWorkshopEvaluateSubmissionRequest;
import org.openapitools.client.model.ModWorkshopGetAssessment200Response;
import org.openapitools.client.model.ModWorkshopGetAssessmentFormDefinition200Response;
import org.openapitools.client.model.ModWorkshopGetAssessmentFormDefinitionRequest;
import org.openapitools.client.model.ModWorkshopGetAssessmentRequest;
import org.openapitools.client.model.ModWorkshopGetGrades200Response;
import org.openapitools.client.model.ModWorkshopGetGradesReport200Response;
import org.openapitools.client.model.ModWorkshopGetGradesReportRequest;
import org.openapitools.client.model.ModWorkshopGetGradesRequest;
import org.openapitools.client.model.ModWorkshopGetReviewerAssessments200Response;
import org.openapitools.client.model.ModWorkshopGetReviewerAssessmentsRequest;
import org.openapitools.client.model.ModWorkshopGetSubmission200Response;
import org.openapitools.client.model.ModWorkshopGetSubmissionRequest;
import org.openapitools.client.model.ModWorkshopGetSubmissions200Response;
import org.openapitools.client.model.ModWorkshopGetSubmissionsRequest;
import org.openapitools.client.model.ModWorkshopGetUserPlan200Response;
import org.openapitools.client.model.ModWorkshopGetUserPlanRequest;
import org.openapitools.client.model.ModWorkshopGetWorkshopAccessInformation200Response;
import org.openapitools.client.model.ModWorkshopGetWorkshopAccessInformationRequest;
import org.openapitools.client.model.ModWorkshopGetWorkshopsByCourses200Response;
import org.openapitools.client.model.ModWorkshopUpdateAssessment200Response;
import org.openapitools.client.model.ModWorkshopUpdateAssessmentRequest;
import org.openapitools.client.model.ModWorkshopUpdateSubmission200Response;
import org.openapitools.client.model.ModWorkshopUpdateSubmissionRequest;
import org.openapitools.client.model.ModWorkshopViewWorkshopRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ModWorkshopApi
 */
@Disabled
public class ModWorkshopApiTest {

    private final ModWorkshopApi api = new ModWorkshopApi();

    /**
     * Add a new submission to a given workshop.
     *
     * Add a new submission to a given workshop.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modWorkshopAddSubmissionTest() throws ApiException {
        ModWorkshopAddSubmissionRequest modWorkshopAddSubmissionRequest = null;
        ModWorkshopAddSubmission200Response response = api.modWorkshopAddSubmission(modWorkshopAddSubmissionRequest);
        // TODO: test validations
    }

    /**
     * Deletes the given submission.
     *
     * Deletes the given submission.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modWorkshopDeleteSubmissionTest() throws ApiException {
        ModWorkshopDeleteSubmissionRequest modWorkshopDeleteSubmissionRequest = null;
        ModWorkshopDeleteSubmission200Response response = api.modWorkshopDeleteSubmission(modWorkshopDeleteSubmissionRequest);
        // TODO: test validations
    }

    /**
     * Evaluates an assessment (used by teachers for provide feedback to the reviewer).
     *
     * Evaluates an assessment (used by teachers for provide feedback to the reviewer).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modWorkshopEvaluateAssessmentTest() throws ApiException {
        ModWorkshopEvaluateAssessmentRequest modWorkshopEvaluateAssessmentRequest = null;
        ModWorkshopEvaluateAssessment200Response response = api.modWorkshopEvaluateAssessment(modWorkshopEvaluateAssessmentRequest);
        // TODO: test validations
    }

    /**
     * Evaluates a submission (used by teachers for provide feedback or override the submission grade).
     *
     * Evaluates a submission (used by teachers for provide feedback or override the submission grade).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modWorkshopEvaluateSubmissionTest() throws ApiException {
        ModWorkshopEvaluateSubmissionRequest modWorkshopEvaluateSubmissionRequest = null;
        ModWorkshopEvaluateSubmission200Response response = api.modWorkshopEvaluateSubmission(modWorkshopEvaluateSubmissionRequest);
        // TODO: test validations
    }

    /**
     * Retrieves the given assessment.
     *
     * Retrieves the given assessment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modWorkshopGetAssessmentTest() throws ApiException {
        ModWorkshopGetAssessmentRequest modWorkshopGetAssessmentRequest = null;
        ModWorkshopGetAssessment200Response response = api.modWorkshopGetAssessment(modWorkshopGetAssessmentRequest);
        // TODO: test validations
    }

    /**
     * Retrieves the assessment form definition.
     *
     * Retrieves the assessment form definition.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modWorkshopGetAssessmentFormDefinitionTest() throws ApiException {
        ModWorkshopGetAssessmentFormDefinitionRequest modWorkshopGetAssessmentFormDefinitionRequest = null;
        ModWorkshopGetAssessmentFormDefinition200Response response = api.modWorkshopGetAssessmentFormDefinition(modWorkshopGetAssessmentFormDefinitionRequest);
        // TODO: test validations
    }

    /**
     * Returns the assessment and submission grade for the given user.
     *
     * Returns the assessment and submission grade for the given user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modWorkshopGetGradesTest() throws ApiException {
        ModWorkshopGetGradesRequest modWorkshopGetGradesRequest = null;
        ModWorkshopGetGrades200Response response = api.modWorkshopGetGrades(modWorkshopGetGradesRequest);
        // TODO: test validations
    }

    /**
     * Retrieves the assessment grades report.
     *
     * Retrieves the assessment grades report.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modWorkshopGetGradesReportTest() throws ApiException {
        ModWorkshopGetGradesReportRequest modWorkshopGetGradesReportRequest = null;
        ModWorkshopGetGradesReport200Response response = api.modWorkshopGetGradesReport(modWorkshopGetGradesReportRequest);
        // TODO: test validations
    }

    /**
     * Retrieves all the assessments reviewed by the given user.
     *
     * Retrieves all the assessments reviewed by the given user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modWorkshopGetReviewerAssessmentsTest() throws ApiException {
        ModWorkshopGetReviewerAssessmentsRequest modWorkshopGetReviewerAssessmentsRequest = null;
        ModWorkshopGetReviewerAssessments200Response response = api.modWorkshopGetReviewerAssessments(modWorkshopGetReviewerAssessmentsRequest);
        // TODO: test validations
    }

    /**
     * Retrieves the given submission.
     *
     * Retrieves the given submission.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modWorkshopGetSubmissionTest() throws ApiException {
        ModWorkshopGetSubmissionRequest modWorkshopGetSubmissionRequest = null;
        ModWorkshopGetSubmission200Response response = api.modWorkshopGetSubmission(modWorkshopGetSubmissionRequest);
        // TODO: test validations
    }

    /**
     * Retrieves all the assessments of the given submission.
     *
     * Retrieves all the assessments of the given submission.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modWorkshopGetSubmissionAssessmentsTest() throws ApiException {
        ModWorkshopGetSubmissionRequest modWorkshopGetSubmissionRequest = null;
        ModWorkshopGetReviewerAssessments200Response response = api.modWorkshopGetSubmissionAssessments(modWorkshopGetSubmissionRequest);
        // TODO: test validations
    }

    /**
     * Retrieves all the workshop submissions or the one done by the given user (except example submissions).
     *
     * Retrieves all the workshop submissions or the one done by the given user (except example submissions).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modWorkshopGetSubmissionsTest() throws ApiException {
        ModWorkshopGetSubmissionsRequest modWorkshopGetSubmissionsRequest = null;
        ModWorkshopGetSubmissions200Response response = api.modWorkshopGetSubmissions(modWorkshopGetSubmissionsRequest);
        // TODO: test validations
    }

    /**
     * Return the planner information for the given user.
     *
     * Return the planner information for the given user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modWorkshopGetUserPlanTest() throws ApiException {
        ModWorkshopGetUserPlanRequest modWorkshopGetUserPlanRequest = null;
        ModWorkshopGetUserPlan200Response response = api.modWorkshopGetUserPlan(modWorkshopGetUserPlanRequest);
        // TODO: test validations
    }

    /**
     * Return access information for a given workshop.
     *
     * Return access information for a given workshop.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modWorkshopGetWorkshopAccessInformationTest() throws ApiException {
        ModWorkshopGetWorkshopAccessInformationRequest modWorkshopGetWorkshopAccessInformationRequest = null;
        ModWorkshopGetWorkshopAccessInformation200Response response = api.modWorkshopGetWorkshopAccessInformation(modWorkshopGetWorkshopAccessInformationRequest);
        // TODO: test validations
    }

    /**
     * Returns a list of workshops in a provided list of courses, if no list is provided all workshops that                             the user can view will be returned.
     *
     * Returns a list of workshops in a provided list of courses, if no list is provided all workshops that                             the user can view will be returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modWorkshopGetWorkshopsByCoursesTest() throws ApiException {
        ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest = null;
        ModWorkshopGetWorkshopsByCourses200Response response = api.modWorkshopGetWorkshopsByCourses(modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest);
        // TODO: test validations
    }

    /**
     * Add information to an allocated assessment.
     *
     * Add information to an allocated assessment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modWorkshopUpdateAssessmentTest() throws ApiException {
        ModWorkshopUpdateAssessmentRequest modWorkshopUpdateAssessmentRequest = null;
        ModWorkshopUpdateAssessment200Response response = api.modWorkshopUpdateAssessment(modWorkshopUpdateAssessmentRequest);
        // TODO: test validations
    }

    /**
     * Update the given submission.
     *
     * Update the given submission.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modWorkshopUpdateSubmissionTest() throws ApiException {
        ModWorkshopUpdateSubmissionRequest modWorkshopUpdateSubmissionRequest = null;
        ModWorkshopUpdateSubmission200Response response = api.modWorkshopUpdateSubmission(modWorkshopUpdateSubmissionRequest);
        // TODO: test validations
    }

    /**
     * Trigger the submission viewed event.
     *
     * Trigger the submission viewed event.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modWorkshopViewSubmissionTest() throws ApiException {
        ModWorkshopGetSubmissionRequest modWorkshopGetSubmissionRequest = null;
        CoreCalendarDeleteSubscription200Response response = api.modWorkshopViewSubmission(modWorkshopGetSubmissionRequest);
        // TODO: test validations
    }

    /**
     * Trigger the course module viewed event and update the module completion status.
     *
     * Trigger the course module viewed event and update the module completion status.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modWorkshopViewWorkshopTest() throws ApiException {
        ModWorkshopViewWorkshopRequest modWorkshopViewWorkshopRequest = null;
        CoreCalendarDeleteSubscription200Response response = api.modWorkshopViewWorkshop(modWorkshopViewWorkshopRequest);
        // TODO: test validations
    }

}
