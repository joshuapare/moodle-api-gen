/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.joshuapare.moodleclient;

import com.joshuapare.ApiException;
import org.openapitools.client.model.CoreCalendarDeleteSubscription200Response;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.ModChatGetChatLatestMessages200Response;
import org.openapitools.client.model.ModChatGetChatLatestMessagesRequest;
import org.openapitools.client.model.ModChatGetChatUsers200Response;
import org.openapitools.client.model.ModChatGetChatUsersRequest;
import org.openapitools.client.model.ModChatGetChatsByCourses200Response;
import org.openapitools.client.model.ModChatGetChatsByCoursesRequest;
import org.openapitools.client.model.ModChatGetSessionMessages200Response;
import org.openapitools.client.model.ModChatGetSessionMessagesRequest;
import org.openapitools.client.model.ModChatGetSessions200Response;
import org.openapitools.client.model.ModChatGetSessionsRequest;
import org.openapitools.client.model.ModChatLoginUser200Response;
import org.openapitools.client.model.ModChatLoginUserRequest;
import org.openapitools.client.model.ModChatSendChatMessage200Response;
import org.openapitools.client.model.ModChatSendChatMessageRequest;
import org.openapitools.client.model.ModChatViewChatRequest;
import org.openapitools.client.model.ModChatViewSessionsRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ModChatApi
 */
@Disabled
public class ModChatApiTest {

    private final ModChatApi api = new ModChatApi();

    /**
     * Get the latest messages from the given chat session.
     *
     * Get the latest messages from the given chat session.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modChatGetChatLatestMessagesTest() throws ApiException {
        ModChatGetChatLatestMessagesRequest modChatGetChatLatestMessagesRequest = null;
        ModChatGetChatLatestMessages200Response response = api.modChatGetChatLatestMessages(modChatGetChatLatestMessagesRequest);
        // TODO: test validations
    }

    /**
     * Get the list of users in the given chat session.
     *
     * Get the list of users in the given chat session.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modChatGetChatUsersTest() throws ApiException {
        ModChatGetChatUsersRequest modChatGetChatUsersRequest = null;
        ModChatGetChatUsers200Response response = api.modChatGetChatUsers(modChatGetChatUsersRequest);
        // TODO: test validations
    }

    /**
     * Returns a list of chat instances in a provided set of courses,                             if no courses are provided then all the chat instances the user has access to will be returned.
     *
     * Returns a list of chat instances in a provided set of courses,                             if no courses are provided then all the chat instances the user has access to will be returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modChatGetChatsByCoursesTest() throws ApiException {
        ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest = null;
        ModChatGetChatsByCourses200Response response = api.modChatGetChatsByCourses(modChatGetChatsByCoursesRequest);
        // TODO: test validations
    }

    /**
     * Retrieves messages of the given chat session.
     *
     * Retrieves messages of the given chat session.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modChatGetSessionMessagesTest() throws ApiException {
        ModChatGetSessionMessagesRequest modChatGetSessionMessagesRequest = null;
        ModChatGetSessionMessages200Response response = api.modChatGetSessionMessages(modChatGetSessionMessagesRequest);
        // TODO: test validations
    }

    /**
     * Retrieves chat sessions for a given chat.
     *
     * Retrieves chat sessions for a given chat.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modChatGetSessionsTest() throws ApiException {
        ModChatGetSessionsRequest modChatGetSessionsRequest = null;
        ModChatGetSessions200Response response = api.modChatGetSessions(modChatGetSessionsRequest);
        // TODO: test validations
    }

    /**
     * Log a user into a chat room in the given chat.
     *
     * Log a user into a chat room in the given chat.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modChatLoginUserTest() throws ApiException {
        ModChatLoginUserRequest modChatLoginUserRequest = null;
        ModChatLoginUser200Response response = api.modChatLoginUser(modChatLoginUserRequest);
        // TODO: test validations
    }

    /**
     * Send a message on the given chat session.
     *
     * Send a message on the given chat session.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modChatSendChatMessageTest() throws ApiException {
        ModChatSendChatMessageRequest modChatSendChatMessageRequest = null;
        ModChatSendChatMessage200Response response = api.modChatSendChatMessage(modChatSendChatMessageRequest);
        // TODO: test validations
    }

    /**
     * Trigger the course module viewed event and update the module completion status.
     *
     * Trigger the course module viewed event and update the module completion status.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modChatViewChatTest() throws ApiException {
        ModChatViewChatRequest modChatViewChatRequest = null;
        CoreCalendarDeleteSubscription200Response response = api.modChatViewChat(modChatViewChatRequest);
        // TODO: test validations
    }

    /**
     * Trigger the chat session viewed event.
     *
     * Trigger the chat session viewed event.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modChatViewSessionsTest() throws ApiException {
        ModChatViewSessionsRequest modChatViewSessionsRequest = null;
        CoreCalendarDeleteSubscription200Response response = api.modChatViewSessions(modChatViewSessionsRequest);
        // TODO: test validations
    }

}
