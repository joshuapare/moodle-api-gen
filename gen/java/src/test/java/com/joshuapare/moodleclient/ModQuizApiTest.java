/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.joshuapare.moodleclient;

import com.joshuapare.ApiException;
import org.openapitools.client.model.CoreCalendarDeleteSubscription200Response;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.ModChatGetChatsByCoursesRequest;
import org.openapitools.client.model.ModQuizAddRandomQuestions200Response;
import org.openapitools.client.model.ModQuizAddRandomQuestionsRequest;
import org.openapitools.client.model.ModQuizGetAttemptAccessInformation200Response;
import org.openapitools.client.model.ModQuizGetAttemptAccessInformationRequest;
import org.openapitools.client.model.ModQuizGetAttemptData200Response;
import org.openapitools.client.model.ModQuizGetAttemptDataRequest;
import org.openapitools.client.model.ModQuizGetAttemptReview200Response;
import org.openapitools.client.model.ModQuizGetAttemptReviewRequest;
import org.openapitools.client.model.ModQuizGetAttemptSummary200Response;
import org.openapitools.client.model.ModQuizGetAttemptSummaryRequest;
import org.openapitools.client.model.ModQuizGetCombinedReviewOptions200Response;
import org.openapitools.client.model.ModQuizGetCombinedReviewOptionsRequest;
import org.openapitools.client.model.ModQuizGetQuizAccessInformation200Response;
import org.openapitools.client.model.ModQuizGetQuizAccessInformationRequest;
import org.openapitools.client.model.ModQuizGetQuizFeedbackForGrade200Response;
import org.openapitools.client.model.ModQuizGetQuizFeedbackForGradeRequest;
import org.openapitools.client.model.ModQuizGetQuizRequiredQtypes200Response;
import org.openapitools.client.model.ModQuizGetQuizzesByCourses200Response;
import org.openapitools.client.model.ModQuizGetReopenAttemptConfirmationRequest;
import org.openapitools.client.model.ModQuizGetUserAttempts200Response;
import org.openapitools.client.model.ModQuizGetUserAttemptsRequest;
import org.openapitools.client.model.ModQuizGetUserBestGrade200Response;
import org.openapitools.client.model.ModQuizGetUserBestGradeRequest;
import org.openapitools.client.model.ModQuizProcessAttempt200Response;
import org.openapitools.client.model.ModQuizProcessAttemptRequest;
import org.openapitools.client.model.ModQuizReopenAttemptRequest;
import org.openapitools.client.model.ModQuizSaveAttemptRequest;
import org.openapitools.client.model.ModQuizSetQuestionVersion200Response;
import org.openapitools.client.model.ModQuizSetQuestionVersionRequest;
import org.openapitools.client.model.ModQuizStartAttempt200Response;
import org.openapitools.client.model.ModQuizStartAttemptRequest;
import org.openapitools.client.model.ModQuizUpdateFilterConditionRequest;
import org.openapitools.client.model.ModQuizViewAttemptRequest;
import org.openapitools.client.model.ModQuizViewAttemptReviewRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ModQuizApi
 */
@Disabled
public class ModQuizApiTest {

    private final ModQuizApi api = new ModQuizApi();

    /**
     * Add a number of random questions to a quiz.
     *
     * Add a number of random questions to a quiz.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modQuizAddRandomQuestionsTest() throws ApiException {
        ModQuizAddRandomQuestionsRequest modQuizAddRandomQuestionsRequest = null;
        ModQuizAddRandomQuestions200Response response = api.modQuizAddRandomQuestions(modQuizAddRandomQuestionsRequest);
        // TODO: test validations
    }

    /**
     * Return access information for a given attempt in a quiz.
     *
     * Return access information for a given attempt in a quiz.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modQuizGetAttemptAccessInformationTest() throws ApiException {
        ModQuizGetAttemptAccessInformationRequest modQuizGetAttemptAccessInformationRequest = null;
        ModQuizGetAttemptAccessInformation200Response response = api.modQuizGetAttemptAccessInformation(modQuizGetAttemptAccessInformationRequest);
        // TODO: test validations
    }

    /**
     * Returns information for the given attempt page for a quiz attempt in progress.
     *
     * Returns information for the given attempt page for a quiz attempt in progress.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modQuizGetAttemptDataTest() throws ApiException {
        ModQuizGetAttemptDataRequest modQuizGetAttemptDataRequest = null;
        ModQuizGetAttemptData200Response response = api.modQuizGetAttemptData(modQuizGetAttemptDataRequest);
        // TODO: test validations
    }

    /**
     * Returns review information for the given finished attempt, can be used by users or teachers.
     *
     * Returns review information for the given finished attempt, can be used by users or teachers.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modQuizGetAttemptReviewTest() throws ApiException {
        ModQuizGetAttemptReviewRequest modQuizGetAttemptReviewRequest = null;
        ModQuizGetAttemptReview200Response response = api.modQuizGetAttemptReview(modQuizGetAttemptReviewRequest);
        // TODO: test validations
    }

    /**
     * Returns a summary of a quiz attempt before it is submitted.
     *
     * Returns a summary of a quiz attempt before it is submitted.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modQuizGetAttemptSummaryTest() throws ApiException {
        ModQuizGetAttemptSummaryRequest modQuizGetAttemptSummaryRequest = null;
        ModQuizGetAttemptSummary200Response response = api.modQuizGetAttemptSummary(modQuizGetAttemptSummaryRequest);
        // TODO: test validations
    }

    /**
     * Combines the review options from a number of different quiz attempts.
     *
     * Combines the review options from a number of different quiz attempts.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modQuizGetCombinedReviewOptionsTest() throws ApiException {
        ModQuizGetCombinedReviewOptionsRequest modQuizGetCombinedReviewOptionsRequest = null;
        ModQuizGetCombinedReviewOptions200Response response = api.modQuizGetCombinedReviewOptions(modQuizGetCombinedReviewOptionsRequest);
        // TODO: test validations
    }

    /**
     * Return access information for a given quiz.
     *
     * Return access information for a given quiz.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modQuizGetQuizAccessInformationTest() throws ApiException {
        ModQuizGetQuizAccessInformationRequest modQuizGetQuizAccessInformationRequest = null;
        ModQuizGetQuizAccessInformation200Response response = api.modQuizGetQuizAccessInformation(modQuizGetQuizAccessInformationRequest);
        // TODO: test validations
    }

    /**
     * Get the feedback text that should be show to a student who got the given grade in the given quiz.
     *
     * Get the feedback text that should be show to a student who got the given grade in the given quiz.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modQuizGetQuizFeedbackForGradeTest() throws ApiException {
        ModQuizGetQuizFeedbackForGradeRequest modQuizGetQuizFeedbackForGradeRequest = null;
        ModQuizGetQuizFeedbackForGrade200Response response = api.modQuizGetQuizFeedbackForGrade(modQuizGetQuizFeedbackForGradeRequest);
        // TODO: test validations
    }

    /**
     * Return the potential question types that would be required for a given quiz.
     *
     * Return the potential question types that would be required for a given quiz.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modQuizGetQuizRequiredQtypesTest() throws ApiException {
        ModQuizGetQuizAccessInformationRequest modQuizGetQuizAccessInformationRequest = null;
        ModQuizGetQuizRequiredQtypes200Response response = api.modQuizGetQuizRequiredQtypes(modQuizGetQuizAccessInformationRequest);
        // TODO: test validations
    }

    /**
     * Returns a list of quizzes in a provided list of courses,                             if no list is provided all quizzes that the user can view will be returned.
     *
     * Returns a list of quizzes in a provided list of courses,                             if no list is provided all quizzes that the user can view will be returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modQuizGetQuizzesByCoursesTest() throws ApiException {
        ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest = null;
        ModQuizGetQuizzesByCourses200Response response = api.modQuizGetQuizzesByCourses(modChatGetChatsByCoursesRequest);
        // TODO: test validations
    }

    /**
     * Verify it is OK to re-open a given quiz attempt, and if so, return a suitable confirmation message.
     *
     * Verify it is OK to re-open a given quiz attempt, and if so, return a suitable confirmation message.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modQuizGetReopenAttemptConfirmationTest() throws ApiException {
        ModQuizGetReopenAttemptConfirmationRequest modQuizGetReopenAttemptConfirmationRequest = null;
        Object response = api.modQuizGetReopenAttemptConfirmation(modQuizGetReopenAttemptConfirmationRequest);
        // TODO: test validations
    }

    /**
     * Return a list of attempts for the given quiz and user.
     *
     * Return a list of attempts for the given quiz and user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modQuizGetUserAttemptsTest() throws ApiException {
        ModQuizGetUserAttemptsRequest modQuizGetUserAttemptsRequest = null;
        ModQuizGetUserAttempts200Response response = api.modQuizGetUserAttempts(modQuizGetUserAttemptsRequest);
        // TODO: test validations
    }

    /**
     * Get the best current grade for the given user on a quiz.
     *
     * Get the best current grade for the given user on a quiz.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modQuizGetUserBestGradeTest() throws ApiException {
        ModQuizGetUserBestGradeRequest modQuizGetUserBestGradeRequest = null;
        ModQuizGetUserBestGrade200Response response = api.modQuizGetUserBestGrade(modQuizGetUserBestGradeRequest);
        // TODO: test validations
    }

    /**
     * Process responses during an attempt at a quiz and also deals with attempts finishing.
     *
     * Process responses during an attempt at a quiz and also deals with attempts finishing.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modQuizProcessAttemptTest() throws ApiException {
        ModQuizProcessAttemptRequest modQuizProcessAttemptRequest = null;
        ModQuizProcessAttempt200Response response = api.modQuizProcessAttempt(modQuizProcessAttemptRequest);
        // TODO: test validations
    }

    /**
     * Re-open an attempt that is currently in the never submitted state.
     *
     * Re-open an attempt that is currently in the never submitted state.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modQuizReopenAttemptTest() throws ApiException {
        ModQuizReopenAttemptRequest modQuizReopenAttemptRequest = null;
        Object response = api.modQuizReopenAttempt(modQuizReopenAttemptRequest);
        // TODO: test validations
    }

    /**
     * Processes save requests during the quiz.                             This function is intended for the quiz auto-save feature.
     *
     * Processes save requests during the quiz.                             This function is intended for the quiz auto-save feature.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modQuizSaveAttemptTest() throws ApiException {
        ModQuizSaveAttemptRequest modQuizSaveAttemptRequest = null;
        CoreCalendarDeleteSubscription200Response response = api.modQuizSaveAttempt(modQuizSaveAttemptRequest);
        // TODO: test validations
    }

    /**
     * Set the version of question that would be required for a given quiz.
     *
     * Set the version of question that would be required for a given quiz.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modQuizSetQuestionVersionTest() throws ApiException {
        ModQuizSetQuestionVersionRequest modQuizSetQuestionVersionRequest = null;
        ModQuizSetQuestionVersion200Response response = api.modQuizSetQuestionVersion(modQuizSetQuestionVersionRequest);
        // TODO: test validations
    }

    /**
     * Starts a new attempt at a quiz.
     *
     * Starts a new attempt at a quiz.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modQuizStartAttemptTest() throws ApiException {
        ModQuizStartAttemptRequest modQuizStartAttemptRequest = null;
        ModQuizStartAttempt200Response response = api.modQuizStartAttempt(modQuizStartAttemptRequest);
        // TODO: test validations
    }

    /**
     * Update filter condition for a random question slot.
     *
     * Update filter condition for a random question slot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modQuizUpdateFilterConditionTest() throws ApiException {
        ModQuizUpdateFilterConditionRequest modQuizUpdateFilterConditionRequest = null;
        ModQuizAddRandomQuestions200Response response = api.modQuizUpdateFilterCondition(modQuizUpdateFilterConditionRequest);
        // TODO: test validations
    }

    /**
     * Trigger the attempt viewed event.
     *
     * Trigger the attempt viewed event.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modQuizViewAttemptTest() throws ApiException {
        ModQuizViewAttemptRequest modQuizViewAttemptRequest = null;
        CoreCalendarDeleteSubscription200Response response = api.modQuizViewAttempt(modQuizViewAttemptRequest);
        // TODO: test validations
    }

    /**
     * Trigger the attempt reviewed event.
     *
     * Trigger the attempt reviewed event.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modQuizViewAttemptReviewTest() throws ApiException {
        ModQuizViewAttemptReviewRequest modQuizViewAttemptReviewRequest = null;
        CoreCalendarDeleteSubscription200Response response = api.modQuizViewAttemptReview(modQuizViewAttemptReviewRequest);
        // TODO: test validations
    }

    /**
     * Trigger the attempt summary viewed event.
     *
     * Trigger the attempt summary viewed event.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modQuizViewAttemptSummaryTest() throws ApiException {
        ModQuizGetAttemptSummaryRequest modQuizGetAttemptSummaryRequest = null;
        CoreCalendarDeleteSubscription200Response response = api.modQuizViewAttemptSummary(modQuizGetAttemptSummaryRequest);
        // TODO: test validations
    }

    /**
     * Trigger the course module viewed event and update the module completion status.
     *
     * Trigger the course module viewed event and update the module completion status.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modQuizViewQuizTest() throws ApiException {
        ModQuizGetQuizAccessInformationRequest modQuizGetQuizAccessInformationRequest = null;
        CoreCalendarDeleteSubscription200Response response = api.modQuizViewQuiz(modQuizGetQuizAccessInformationRequest);
        // TODO: test validations
    }

}
