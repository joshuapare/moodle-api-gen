/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.joshuapare.moodleclient;

import com.joshuapare.ApiException;
import org.openapitools.client.model.CoreContentbankRenameContent200Response;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.ModChatGetChatsByCoursesRequest;
import org.openapitools.client.model.ModGlossaryAddEntry200Response;
import org.openapitools.client.model.ModGlossaryAddEntryRequest;
import org.openapitools.client.model.ModGlossaryDeleteEntryRequest;
import org.openapitools.client.model.ModGlossaryGetAuthors200Response;
import org.openapitools.client.model.ModGlossaryGetAuthorsRequest;
import org.openapitools.client.model.ModGlossaryGetCategories200Response;
import org.openapitools.client.model.ModGlossaryGetCategoriesRequest;
import org.openapitools.client.model.ModGlossaryGetEntriesByAuthor200Response;
import org.openapitools.client.model.ModGlossaryGetEntriesByAuthorId200Response;
import org.openapitools.client.model.ModGlossaryGetEntriesByAuthorIdRequest;
import org.openapitools.client.model.ModGlossaryGetEntriesByAuthorRequest;
import org.openapitools.client.model.ModGlossaryGetEntriesByCategory200Response;
import org.openapitools.client.model.ModGlossaryGetEntriesByCategoryRequest;
import org.openapitools.client.model.ModGlossaryGetEntriesByDateRequest;
import org.openapitools.client.model.ModGlossaryGetEntriesByLetterRequest;
import org.openapitools.client.model.ModGlossaryGetEntriesBySearchRequest;
import org.openapitools.client.model.ModGlossaryGetEntriesByTermRequest;
import org.openapitools.client.model.ModGlossaryGetEntriesToApproveRequest;
import org.openapitools.client.model.ModGlossaryGetEntryById200Response;
import org.openapitools.client.model.ModGlossaryGetEntryByIdRequest;
import org.openapitools.client.model.ModGlossaryGetGlossariesByCourses200Response;
import org.openapitools.client.model.ModGlossaryPrepareEntryForEdition200Response;
import org.openapitools.client.model.ModGlossaryPrepareEntryForEditionRequest;
import org.openapitools.client.model.ModGlossaryUpdateEntry200Response;
import org.openapitools.client.model.ModGlossaryUpdateEntryRequest;
import org.openapitools.client.model.ModGlossaryViewEntry200Response;
import org.openapitools.client.model.ModGlossaryViewGlossary200Response;
import org.openapitools.client.model.ModGlossaryViewGlossaryRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ModGlossaryApi
 */
@Disabled
public class ModGlossaryApiTest {

    private final ModGlossaryApi api = new ModGlossaryApi();

    /**
     * Add a new entry to a given glossary
     *
     * Add a new entry to a given glossary
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modGlossaryAddEntryTest() throws ApiException {
        ModGlossaryAddEntryRequest modGlossaryAddEntryRequest = null;
        ModGlossaryAddEntry200Response response = api.modGlossaryAddEntry(modGlossaryAddEntryRequest);
        // TODO: test validations
    }

    /**
     * Delete the given entry from the glossary.
     *
     * Delete the given entry from the glossary.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modGlossaryDeleteEntryTest() throws ApiException {
        ModGlossaryDeleteEntryRequest modGlossaryDeleteEntryRequest = null;
        CoreContentbankRenameContent200Response response = api.modGlossaryDeleteEntry(modGlossaryDeleteEntryRequest);
        // TODO: test validations
    }

    /**
     * Get the authors.
     *
     * Get the authors.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modGlossaryGetAuthorsTest() throws ApiException {
        ModGlossaryGetAuthorsRequest modGlossaryGetAuthorsRequest = null;
        ModGlossaryGetAuthors200Response response = api.modGlossaryGetAuthors(modGlossaryGetAuthorsRequest);
        // TODO: test validations
    }

    /**
     * Get the categories.
     *
     * Get the categories.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modGlossaryGetCategoriesTest() throws ApiException {
        ModGlossaryGetCategoriesRequest modGlossaryGetCategoriesRequest = null;
        ModGlossaryGetCategories200Response response = api.modGlossaryGetCategories(modGlossaryGetCategoriesRequest);
        // TODO: test validations
    }

    /**
     * Browse entries by author.
     *
     * Browse entries by author.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modGlossaryGetEntriesByAuthorTest() throws ApiException {
        ModGlossaryGetEntriesByAuthorRequest modGlossaryGetEntriesByAuthorRequest = null;
        ModGlossaryGetEntriesByAuthor200Response response = api.modGlossaryGetEntriesByAuthor(modGlossaryGetEntriesByAuthorRequest);
        // TODO: test validations
    }

    /**
     * Browse entries by author ID.
     *
     * Browse entries by author ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modGlossaryGetEntriesByAuthorIdTest() throws ApiException {
        ModGlossaryGetEntriesByAuthorIdRequest modGlossaryGetEntriesByAuthorIdRequest = null;
        ModGlossaryGetEntriesByAuthorId200Response response = api.modGlossaryGetEntriesByAuthorId(modGlossaryGetEntriesByAuthorIdRequest);
        // TODO: test validations
    }

    /**
     * Browse entries by category.
     *
     * Browse entries by category.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modGlossaryGetEntriesByCategoryTest() throws ApiException {
        ModGlossaryGetEntriesByCategoryRequest modGlossaryGetEntriesByCategoryRequest = null;
        ModGlossaryGetEntriesByCategory200Response response = api.modGlossaryGetEntriesByCategory(modGlossaryGetEntriesByCategoryRequest);
        // TODO: test validations
    }

    /**
     * Browse entries by date.
     *
     * Browse entries by date.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modGlossaryGetEntriesByDateTest() throws ApiException {
        ModGlossaryGetEntriesByDateRequest modGlossaryGetEntriesByDateRequest = null;
        ModGlossaryGetEntriesByAuthorId200Response response = api.modGlossaryGetEntriesByDate(modGlossaryGetEntriesByDateRequest);
        // TODO: test validations
    }

    /**
     * Browse entries by letter.
     *
     * Browse entries by letter.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modGlossaryGetEntriesByLetterTest() throws ApiException {
        ModGlossaryGetEntriesByLetterRequest modGlossaryGetEntriesByLetterRequest = null;
        ModGlossaryGetEntriesByAuthorId200Response response = api.modGlossaryGetEntriesByLetter(modGlossaryGetEntriesByLetterRequest);
        // TODO: test validations
    }

    /**
     * Browse entries by search query.
     *
     * Browse entries by search query.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modGlossaryGetEntriesBySearchTest() throws ApiException {
        ModGlossaryGetEntriesBySearchRequest modGlossaryGetEntriesBySearchRequest = null;
        ModGlossaryGetEntriesByAuthorId200Response response = api.modGlossaryGetEntriesBySearch(modGlossaryGetEntriesBySearchRequest);
        // TODO: test validations
    }

    /**
     * Browse entries by term (concept or alias).
     *
     * Browse entries by term (concept or alias).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modGlossaryGetEntriesByTermTest() throws ApiException {
        ModGlossaryGetEntriesByTermRequest modGlossaryGetEntriesByTermRequest = null;
        ModGlossaryGetEntriesByAuthorId200Response response = api.modGlossaryGetEntriesByTerm(modGlossaryGetEntriesByTermRequest);
        // TODO: test validations
    }

    /**
     * Browse entries to be approved.
     *
     * Browse entries to be approved.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modGlossaryGetEntriesToApproveTest() throws ApiException {
        ModGlossaryGetEntriesToApproveRequest modGlossaryGetEntriesToApproveRequest = null;
        ModGlossaryGetEntriesByAuthorId200Response response = api.modGlossaryGetEntriesToApprove(modGlossaryGetEntriesToApproveRequest);
        // TODO: test validations
    }

    /**
     * Get an entry by ID
     *
     * Get an entry by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modGlossaryGetEntryByIdTest() throws ApiException {
        ModGlossaryGetEntryByIdRequest modGlossaryGetEntryByIdRequest = null;
        ModGlossaryGetEntryById200Response response = api.modGlossaryGetEntryById(modGlossaryGetEntryByIdRequest);
        // TODO: test validations
    }

    /**
     * Retrieve a list of glossaries from several courses.
     *
     * Retrieve a list of glossaries from several courses.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modGlossaryGetGlossariesByCoursesTest() throws ApiException {
        ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest = null;
        ModGlossaryGetGlossariesByCourses200Response response = api.modGlossaryGetGlossariesByCourses(modChatGetChatsByCoursesRequest);
        // TODO: test validations
    }

    /**
     * Prepares the given entry for edition returning draft item areas and file areas information.
     *
     * Prepares the given entry for edition returning draft item areas and file areas information.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modGlossaryPrepareEntryForEditionTest() throws ApiException {
        ModGlossaryPrepareEntryForEditionRequest modGlossaryPrepareEntryForEditionRequest = null;
        ModGlossaryPrepareEntryForEdition200Response response = api.modGlossaryPrepareEntryForEdition(modGlossaryPrepareEntryForEditionRequest);
        // TODO: test validations
    }

    /**
     * Updates the given glossary entry.
     *
     * Updates the given glossary entry.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modGlossaryUpdateEntryTest() throws ApiException {
        ModGlossaryUpdateEntryRequest modGlossaryUpdateEntryRequest = null;
        ModGlossaryUpdateEntry200Response response = api.modGlossaryUpdateEntry(modGlossaryUpdateEntryRequest);
        // TODO: test validations
    }

    /**
     * Notify a glossary entry as being viewed.
     *
     * Notify a glossary entry as being viewed.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modGlossaryViewEntryTest() throws ApiException {
        ModGlossaryGetEntryByIdRequest modGlossaryGetEntryByIdRequest = null;
        ModGlossaryViewEntry200Response response = api.modGlossaryViewEntry(modGlossaryGetEntryByIdRequest);
        // TODO: test validations
    }

    /**
     * Notify the glossary as being viewed.
     *
     * Notify the glossary as being viewed.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modGlossaryViewGlossaryTest() throws ApiException {
        ModGlossaryViewGlossaryRequest modGlossaryViewGlossaryRequest = null;
        ModGlossaryViewGlossary200Response response = api.modGlossaryViewGlossary(modGlossaryViewGlossaryRequest);
        // TODO: test validations
    }

}
