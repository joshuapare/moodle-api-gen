/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.joshuapare.moodleclient;

import com.joshuapare.ApiException;
import org.openapitools.client.model.CoreCalendarDeleteSubscription200Response;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.ModChatGetChatsByCoursesRequest;
import org.openapitools.client.model.ModLtiCreateToolProxy200Response;
import org.openapitools.client.model.ModLtiCreateToolProxyRequest;
import org.openapitools.client.model.ModLtiCreateToolType200Response;
import org.openapitools.client.model.ModLtiCreateToolTypeRequest;
import org.openapitools.client.model.ModLtiDeleteCourseToolTypeRequest;
import org.openapitools.client.model.ModLtiDeleteToolProxy200Response;
import org.openapitools.client.model.ModLtiDeleteToolProxyRequest;
import org.openapitools.client.model.ModLtiDeleteToolTypeRequest;
import org.openapitools.client.model.ModLtiGetLtisByCourses200Response;
import org.openapitools.client.model.ModLtiGetToolLaunchData200Response;
import org.openapitools.client.model.ModLtiGetToolLaunchDataRequest;
import org.openapitools.client.model.ModLtiGetToolProxiesRequest;
import org.openapitools.client.model.ModLtiGetToolProxyRegistrationRequest200Response;
import org.openapitools.client.model.ModLtiGetToolTypesAndProxies200Response;
import org.openapitools.client.model.ModLtiGetToolTypesAndProxiesCount200Response;
import org.openapitools.client.model.ModLtiGetToolTypesAndProxiesCountRequest;
import org.openapitools.client.model.ModLtiGetToolTypesAndProxiesRequest;
import org.openapitools.client.model.ModLtiGetToolTypesRequest;
import org.openapitools.client.model.ModLtiIsCartridge200Response;
import org.openapitools.client.model.ModLtiIsCartridgeRequest;
import org.openapitools.client.model.ModLtiToggleShowinactivitychooserRequest;
import org.openapitools.client.model.ModLtiUpdateToolType200Response;
import org.openapitools.client.model.ModLtiUpdateToolTypeRequest;
import org.openapitools.client.model.ModLtiViewLtiRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ModLtiApi
 */
@Disabled
public class ModLtiApiTest {

    private final ModLtiApi api = new ModLtiApi();

    /**
     * Create a tool proxy
     *
     * Create a tool proxy
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modLtiCreateToolProxyTest() throws ApiException {
        ModLtiCreateToolProxyRequest modLtiCreateToolProxyRequest = null;
        ModLtiCreateToolProxy200Response response = api.modLtiCreateToolProxy(modLtiCreateToolProxyRequest);
        // TODO: test validations
    }

    /**
     * Create a tool type
     *
     * Create a tool type
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modLtiCreateToolTypeTest() throws ApiException {
        ModLtiCreateToolTypeRequest modLtiCreateToolTypeRequest = null;
        ModLtiCreateToolType200Response response = api.modLtiCreateToolType(modLtiCreateToolTypeRequest);
        // TODO: test validations
    }

    /**
     * Delete a course tool type
     *
     * Delete a course tool type
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modLtiDeleteCourseToolTypeTest() throws ApiException {
        ModLtiDeleteCourseToolTypeRequest modLtiDeleteCourseToolTypeRequest = null;
        Object response = api.modLtiDeleteCourseToolType(modLtiDeleteCourseToolTypeRequest);
        // TODO: test validations
    }

    /**
     * Delete a tool proxy
     *
     * Delete a tool proxy
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modLtiDeleteToolProxyTest() throws ApiException {
        ModLtiDeleteToolProxyRequest modLtiDeleteToolProxyRequest = null;
        ModLtiDeleteToolProxy200Response response = api.modLtiDeleteToolProxy(modLtiDeleteToolProxyRequest);
        // TODO: test validations
    }

    /**
     * Delete a tool type
     *
     * Delete a tool type
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modLtiDeleteToolTypeTest() throws ApiException {
        ModLtiDeleteToolTypeRequest modLtiDeleteToolTypeRequest = null;
        ModLtiDeleteToolTypeRequest response = api.modLtiDeleteToolType(modLtiDeleteToolTypeRequest);
        // TODO: test validations
    }

    /**
     * Returns a list of external tool instances in a provided set of courses, if                             no courses are provided then all the external tool instances the user has access to will be returned.
     *
     * Returns a list of external tool instances in a provided set of courses, if                             no courses are provided then all the external tool instances the user has access to will be returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modLtiGetLtisByCoursesTest() throws ApiException {
        ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest = null;
        ModLtiGetLtisByCourses200Response response = api.modLtiGetLtisByCourses(modChatGetChatsByCoursesRequest);
        // TODO: test validations
    }

    /**
     * Return the launch data for a given external tool.
     *
     * Return the launch data for a given external tool.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modLtiGetToolLaunchDataTest() throws ApiException {
        ModLtiGetToolLaunchDataRequest modLtiGetToolLaunchDataRequest = null;
        ModLtiGetToolLaunchData200Response response = api.modLtiGetToolLaunchData(modLtiGetToolLaunchDataRequest);
        // TODO: test validations
    }

    /**
     * Get a list of the tool proxies
     *
     * Get a list of the tool proxies
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modLtiGetToolProxiesTest() throws ApiException {
        ModLtiGetToolProxiesRequest modLtiGetToolProxiesRequest = null;
        Object response = api.modLtiGetToolProxies(modLtiGetToolProxiesRequest);
        // TODO: test validations
    }

    /**
     * Get a registration request for a tool proxy
     *
     * Get a registration request for a tool proxy
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modLtiGetToolProxyRegistrationRequestTest() throws ApiException {
        ModLtiDeleteToolProxyRequest modLtiDeleteToolProxyRequest = null;
        ModLtiGetToolProxyRegistrationRequest200Response response = api.modLtiGetToolProxyRegistrationRequest(modLtiDeleteToolProxyRequest);
        // TODO: test validations
    }

    /**
     * Get a list of the tool types
     *
     * Get a list of the tool types
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modLtiGetToolTypesTest() throws ApiException {
        ModLtiGetToolTypesRequest modLtiGetToolTypesRequest = null;
        Object response = api.modLtiGetToolTypes(modLtiGetToolTypesRequest);
        // TODO: test validations
    }

    /**
     * Get a list of the tool types and tool proxies
     *
     * Get a list of the tool types and tool proxies
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modLtiGetToolTypesAndProxiesTest() throws ApiException {
        ModLtiGetToolTypesAndProxiesRequest modLtiGetToolTypesAndProxiesRequest = null;
        ModLtiGetToolTypesAndProxies200Response response = api.modLtiGetToolTypesAndProxies(modLtiGetToolTypesAndProxiesRequest);
        // TODO: test validations
    }

    /**
     * Get total number of the tool types and tool proxies
     *
     * Get total number of the tool types and tool proxies
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modLtiGetToolTypesAndProxiesCountTest() throws ApiException {
        ModLtiGetToolTypesAndProxiesCountRequest modLtiGetToolTypesAndProxiesCountRequest = null;
        ModLtiGetToolTypesAndProxiesCount200Response response = api.modLtiGetToolTypesAndProxiesCount(modLtiGetToolTypesAndProxiesCountRequest);
        // TODO: test validations
    }

    /**
     * Determine if the given url is for a cartridge
     *
     * Determine if the given url is for a cartridge
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modLtiIsCartridgeTest() throws ApiException {
        ModLtiIsCartridgeRequest modLtiIsCartridgeRequest = null;
        ModLtiIsCartridge200Response response = api.modLtiIsCartridge(modLtiIsCartridgeRequest);
        // TODO: test validations
    }

    /**
     * Toggle showinactivitychooser for a tool type in a course
     *
     * Toggle showinactivitychooser for a tool type in a course
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modLtiToggleShowinactivitychooserTest() throws ApiException {
        ModLtiToggleShowinactivitychooserRequest modLtiToggleShowinactivitychooserRequest = null;
        Object response = api.modLtiToggleShowinactivitychooser(modLtiToggleShowinactivitychooserRequest);
        // TODO: test validations
    }

    /**
     * Update a tool type
     *
     * Update a tool type
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modLtiUpdateToolTypeTest() throws ApiException {
        ModLtiUpdateToolTypeRequest modLtiUpdateToolTypeRequest = null;
        ModLtiUpdateToolType200Response response = api.modLtiUpdateToolType(modLtiUpdateToolTypeRequest);
        // TODO: test validations
    }

    /**
     * Trigger the course module viewed event and update the module completion status.
     *
     * Trigger the course module viewed event and update the module completion status.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modLtiViewLtiTest() throws ApiException {
        ModLtiViewLtiRequest modLtiViewLtiRequest = null;
        CoreCalendarDeleteSubscription200Response response = api.modLtiViewLti(modLtiViewLtiRequest);
        // TODO: test validations
    }

}
