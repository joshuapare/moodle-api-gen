/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.joshuapare.moodleclient;

import com.joshuapare.ApiException;
import org.openapitools.client.model.CoreH5pGetTrustedH5pFile200Response;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.ModWikiEditPage200Response;
import org.openapitools.client.model.ModWikiEditPageRequest;
import org.openapitools.client.model.ModWikiGetPageContents200Response;
import org.openapitools.client.model.ModWikiGetPageContentsRequest;
import org.openapitools.client.model.ModWikiGetPageForEditing200Response;
import org.openapitools.client.model.ModWikiGetPageForEditingRequest;
import org.openapitools.client.model.ModWikiGetSubwikiFilesRequest;
import org.openapitools.client.model.ModWikiGetSubwikiPages200Response;
import org.openapitools.client.model.ModWikiGetSubwikiPagesRequest;
import org.openapitools.client.model.ModWikiGetSubwikis200Response;
import org.openapitools.client.model.ModWikiGetSubwikisRequest;
import org.openapitools.client.model.ModWikiGetWikisByCourses200Response;
import org.openapitools.client.model.ModWikiGetWikisByCoursesRequest;
import org.openapitools.client.model.ModWikiNewPage200Response;
import org.openapitools.client.model.ModWikiNewPageRequest;
import org.openapitools.client.model.ModWikiViewPage200Response;
import org.openapitools.client.model.ModWikiViewPageRequest;
import org.openapitools.client.model.ModWikiViewWiki200Response;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ModWikiApi
 */
@Disabled
public class ModWikiApiTest {

    private final ModWikiApi api = new ModWikiApi();

    /**
     * Save the contents of a page.
     *
     * Save the contents of a page.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modWikiEditPageTest() throws ApiException {
        ModWikiEditPageRequest modWikiEditPageRequest = null;
        ModWikiEditPage200Response response = api.modWikiEditPage(modWikiEditPageRequest);
        // TODO: test validations
    }

    /**
     * Returns the contents of a page.
     *
     * Returns the contents of a page.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modWikiGetPageContentsTest() throws ApiException {
        ModWikiGetPageContentsRequest modWikiGetPageContentsRequest = null;
        ModWikiGetPageContents200Response response = api.modWikiGetPageContents(modWikiGetPageContentsRequest);
        // TODO: test validations
    }

    /**
     * Locks and retrieves info of page-section to be edited.
     *
     * Locks and retrieves info of page-section to be edited.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modWikiGetPageForEditingTest() throws ApiException {
        ModWikiGetPageForEditingRequest modWikiGetPageForEditingRequest = null;
        ModWikiGetPageForEditing200Response response = api.modWikiGetPageForEditing(modWikiGetPageForEditingRequest);
        // TODO: test validations
    }

    /**
     * Returns the list of files for a specific subwiki.
     *
     * Returns the list of files for a specific subwiki.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modWikiGetSubwikiFilesTest() throws ApiException {
        ModWikiGetSubwikiFilesRequest modWikiGetSubwikiFilesRequest = null;
        CoreH5pGetTrustedH5pFile200Response response = api.modWikiGetSubwikiFiles(modWikiGetSubwikiFilesRequest);
        // TODO: test validations
    }

    /**
     * Returns the list of pages for a specific subwiki.
     *
     * Returns the list of pages for a specific subwiki.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modWikiGetSubwikiPagesTest() throws ApiException {
        ModWikiGetSubwikiPagesRequest modWikiGetSubwikiPagesRequest = null;
        ModWikiGetSubwikiPages200Response response = api.modWikiGetSubwikiPages(modWikiGetSubwikiPagesRequest);
        // TODO: test validations
    }

    /**
     * Returns the list of subwikis the user can see in a specific wiki.
     *
     * Returns the list of subwikis the user can see in a specific wiki.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modWikiGetSubwikisTest() throws ApiException {
        ModWikiGetSubwikisRequest modWikiGetSubwikisRequest = null;
        ModWikiGetSubwikis200Response response = api.modWikiGetSubwikis(modWikiGetSubwikisRequest);
        // TODO: test validations
    }

    /**
     * Returns a list of wiki instances in a provided set of courses, if no courses are provided then all the wiki instances the user has access to will be returned.
     *
     * Returns a list of wiki instances in a provided set of courses, if no courses are provided then all the wiki instances the user has access to will be returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modWikiGetWikisByCoursesTest() throws ApiException {
        ModWikiGetWikisByCoursesRequest modWikiGetWikisByCoursesRequest = null;
        ModWikiGetWikisByCourses200Response response = api.modWikiGetWikisByCourses(modWikiGetWikisByCoursesRequest);
        // TODO: test validations
    }

    /**
     * Create a new page in a subwiki.
     *
     * Create a new page in a subwiki.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modWikiNewPageTest() throws ApiException {
        ModWikiNewPageRequest modWikiNewPageRequest = null;
        ModWikiNewPage200Response response = api.modWikiNewPage(modWikiNewPageRequest);
        // TODO: test validations
    }

    /**
     * Trigger the page viewed event and update the module completion status.
     *
     * Trigger the page viewed event and update the module completion status.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modWikiViewPageTest() throws ApiException {
        ModWikiViewPageRequest modWikiViewPageRequest = null;
        ModWikiViewPage200Response response = api.modWikiViewPage(modWikiViewPageRequest);
        // TODO: test validations
    }

    /**
     * Trigger the course module viewed event and update the module completion status.
     *
     * Trigger the course module viewed event and update the module completion status.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modWikiViewWikiTest() throws ApiException {
        ModWikiGetSubwikisRequest modWikiGetSubwikisRequest = null;
        ModWikiViewWiki200Response response = api.modWikiViewWiki(modWikiGetSubwikisRequest);
        // TODO: test validations
    }

}
