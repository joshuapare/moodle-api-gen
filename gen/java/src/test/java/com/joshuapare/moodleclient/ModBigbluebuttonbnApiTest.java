/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.joshuapare.moodleclient;

import com.joshuapare.ApiException;
import org.openapitools.client.model.CoreCalendarDeleteSubscription200Response;
import org.openapitools.client.model.CoreCohortAddCohortMembers200Response;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.ModBigbluebuttonbnCanJoin200Response;
import org.openapitools.client.model.ModBigbluebuttonbnCanJoinRequest;
import org.openapitools.client.model.ModBigbluebuttonbnCompletionValidateRequest;
import org.openapitools.client.model.ModBigbluebuttonbnEndMeetingRequest;
import org.openapitools.client.model.ModBigbluebuttonbnGetBigbluebuttonbnsByCourses200Response;
import org.openapitools.client.model.ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest;
import org.openapitools.client.model.ModBigbluebuttonbnGetJoinUrl200Response;
import org.openapitools.client.model.ModBigbluebuttonbnGetRecordings200Response;
import org.openapitools.client.model.ModBigbluebuttonbnGetRecordingsRequest;
import org.openapitools.client.model.ModBigbluebuttonbnGetRecordingsToImport200Response;
import org.openapitools.client.model.ModBigbluebuttonbnGetRecordingsToImportRequest;
import org.openapitools.client.model.ModBigbluebuttonbnMeetingInfo200Response;
import org.openapitools.client.model.ModBigbluebuttonbnMeetingInfoRequest;
import org.openapitools.client.model.ModBigbluebuttonbnUpdateRecordingRequest;
import org.openapitools.client.model.ModBigbluebuttonbnViewBigbluebuttonbnRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ModBigbluebuttonbnApi
 */
@Disabled
public class ModBigbluebuttonbnApiTest {

    private final ModBigbluebuttonbnApi api = new ModBigbluebuttonbnApi();

    /**
     * Returns information if the current user can join or not.
     *
     * Returns information if the current user can join or not.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modBigbluebuttonbnCanJoinTest() throws ApiException {
        ModBigbluebuttonbnCanJoinRequest modBigbluebuttonbnCanJoinRequest = null;
        ModBigbluebuttonbnCanJoin200Response response = api.modBigbluebuttonbnCanJoin(modBigbluebuttonbnCanJoinRequest);
        // TODO: test validations
    }

    /**
     * Validate completion
     *
     * Validate completion
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modBigbluebuttonbnCompletionValidateTest() throws ApiException {
        ModBigbluebuttonbnCompletionValidateRequest modBigbluebuttonbnCompletionValidateRequest = null;
        CoreCohortAddCohortMembers200Response response = api.modBigbluebuttonbnCompletionValidate(modBigbluebuttonbnCompletionValidateRequest);
        // TODO: test validations
    }

    /**
     * End a meeting
     *
     * End a meeting
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modBigbluebuttonbnEndMeetingTest() throws ApiException {
        ModBigbluebuttonbnEndMeetingRequest modBigbluebuttonbnEndMeetingRequest = null;
        CoreCohortAddCohortMembers200Response response = api.modBigbluebuttonbnEndMeeting(modBigbluebuttonbnEndMeetingRequest);
        // TODO: test validations
    }

    /**
     * Returns a list of bigbluebuttonbns in a provided list of courses, if no list is provided                             all bigbluebuttonbns that the user can view will be returned.
     *
     * Returns a list of bigbluebuttonbns in a provided list of courses, if no list is provided                             all bigbluebuttonbns that the user can view will be returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modBigbluebuttonbnGetBigbluebuttonbnsByCoursesTest() throws ApiException {
        ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest = null;
        ModBigbluebuttonbnGetBigbluebuttonbnsByCourses200Response response = api.modBigbluebuttonbnGetBigbluebuttonbnsByCourses(modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest);
        // TODO: test validations
    }

    /**
     * Get the join URL for the meeting and create if it does not exist.
     *
     * Get the join URL for the meeting and create if it does not exist.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modBigbluebuttonbnGetJoinUrlTest() throws ApiException {
        ModBigbluebuttonbnCanJoinRequest modBigbluebuttonbnCanJoinRequest = null;
        ModBigbluebuttonbnGetJoinUrl200Response response = api.modBigbluebuttonbnGetJoinUrl(modBigbluebuttonbnCanJoinRequest);
        // TODO: test validations
    }

    /**
     * Returns a list of recordings ready to be processed by a datatable.
     *
     * Returns a list of recordings ready to be processed by a datatable.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modBigbluebuttonbnGetRecordingsTest() throws ApiException {
        ModBigbluebuttonbnGetRecordingsRequest modBigbluebuttonbnGetRecordingsRequest = null;
        ModBigbluebuttonbnGetRecordings200Response response = api.modBigbluebuttonbnGetRecordings(modBigbluebuttonbnGetRecordingsRequest);
        // TODO: test validations
    }

    /**
     * Returns a list of recordings ready to import to be processed by a datatable.
     *
     * Returns a list of recordings ready to import to be processed by a datatable.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modBigbluebuttonbnGetRecordingsToImportTest() throws ApiException {
        ModBigbluebuttonbnGetRecordingsToImportRequest modBigbluebuttonbnGetRecordingsToImportRequest = null;
        ModBigbluebuttonbnGetRecordingsToImport200Response response = api.modBigbluebuttonbnGetRecordingsToImport(modBigbluebuttonbnGetRecordingsToImportRequest);
        // TODO: test validations
    }

    /**
     * Get displayable information on the meeting
     *
     * Get displayable information on the meeting
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modBigbluebuttonbnMeetingInfoTest() throws ApiException {
        ModBigbluebuttonbnMeetingInfoRequest modBigbluebuttonbnMeetingInfoRequest = null;
        ModBigbluebuttonbnMeetingInfo200Response response = api.modBigbluebuttonbnMeetingInfo(modBigbluebuttonbnMeetingInfoRequest);
        // TODO: test validations
    }

    /**
     * Update a single recording
     *
     * Update a single recording
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modBigbluebuttonbnUpdateRecordingTest() throws ApiException {
        ModBigbluebuttonbnUpdateRecordingRequest modBigbluebuttonbnUpdateRecordingRequest = null;
        Object response = api.modBigbluebuttonbnUpdateRecording(modBigbluebuttonbnUpdateRecordingRequest);
        // TODO: test validations
    }

    /**
     * Trigger the course module viewed event and update the module completion status.
     *
     * Trigger the course module viewed event and update the module completion status.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modBigbluebuttonbnViewBigbluebuttonbnTest() throws ApiException {
        ModBigbluebuttonbnViewBigbluebuttonbnRequest modBigbluebuttonbnViewBigbluebuttonbnRequest = null;
        CoreCalendarDeleteSubscription200Response response = api.modBigbluebuttonbnViewBigbluebuttonbn(modBigbluebuttonbnViewBigbluebuttonbnRequest);
        // TODO: test validations
    }

}
