/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.joshuapare.moodleclient;

import com.joshuapare.ApiException;
import org.openapitools.client.model.CoreContentbankRenameContent200Response;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.ToolDataprivacyApproveDataRequestRequest;
import org.openapitools.client.model.ToolDataprivacyBulkApproveDataRequestsRequest;
import org.openapitools.client.model.ToolDataprivacyBulkDenyDataRequestsRequest;
import org.openapitools.client.model.ToolDataprivacyCancelDataRequestRequest;
import org.openapitools.client.model.ToolDataprivacyConfirmContextsForDeletion200Response;
import org.openapitools.client.model.ToolDataprivacyConfirmContextsForDeletionRequest;
import org.openapitools.client.model.ToolDataprivacyContactDpoRequest;
import org.openapitools.client.model.ToolDataprivacyCreateCategoryForm200Response;
import org.openapitools.client.model.ToolDataprivacyCreateCategoryFormRequest;
import org.openapitools.client.model.ToolDataprivacyCreatePurposeForm200Response;
import org.openapitools.client.model.ToolDataprivacyCreatePurposeFormRequest;
import org.openapitools.client.model.ToolDataprivacyDeleteCategoryRequest;
import org.openapitools.client.model.ToolDataprivacyDeletePurposeRequest;
import org.openapitools.client.model.ToolDataprivacyGetActivityOptions200Response;
import org.openapitools.client.model.ToolDataprivacyGetActivityOptionsRequest;
import org.openapitools.client.model.ToolDataprivacyGetCategoryOptions200Response;
import org.openapitools.client.model.ToolDataprivacyGetCategoryOptionsRequest;
import org.openapitools.client.model.ToolDataprivacyGetDataRequest200Response;
import org.openapitools.client.model.ToolDataprivacyGetPurposeOptions200Response;
import org.openapitools.client.model.ToolDataprivacyGetUsersRequest;
import org.openapitools.client.model.ToolDataprivacySetContextDefaults200Response;
import org.openapitools.client.model.ToolDataprivacySetContextDefaultsRequest;
import org.openapitools.client.model.ToolDataprivacySetContextForm200Response;
import org.openapitools.client.model.ToolDataprivacySetContextFormRequest;
import org.openapitools.client.model.ToolDataprivacySetContextlevelForm200Response;
import org.openapitools.client.model.ToolDataprivacySetContextlevelFormRequest;
import org.openapitools.client.model.ToolDataprivacySubmitSelectedCoursesFormRequest;
import org.openapitools.client.model.ToolDataprivacyTreeExtraBranches200Response;
import org.openapitools.client.model.ToolDataprivacyTreeExtraBranchesRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ToolDataprivacyApi
 */
@Disabled
public class ToolDataprivacyApiTest {

    private final ToolDataprivacyApi api = new ToolDataprivacyApi();

    /**
     * Approve a data request
     *
     * Approve a data request
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void toolDataprivacyApproveDataRequestTest() throws ApiException {
        ToolDataprivacyApproveDataRequestRequest toolDataprivacyApproveDataRequestRequest = null;
        CoreContentbankRenameContent200Response response = api.toolDataprivacyApproveDataRequest(toolDataprivacyApproveDataRequestRequest);
        // TODO: test validations
    }

    /**
     * Bulk approve data requests
     *
     * Bulk approve data requests
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void toolDataprivacyBulkApproveDataRequestsTest() throws ApiException {
        ToolDataprivacyBulkApproveDataRequestsRequest toolDataprivacyBulkApproveDataRequestsRequest = null;
        CoreContentbankRenameContent200Response response = api.toolDataprivacyBulkApproveDataRequests(toolDataprivacyBulkApproveDataRequestsRequest);
        // TODO: test validations
    }

    /**
     * Bulk deny data requests
     *
     * Bulk deny data requests
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void toolDataprivacyBulkDenyDataRequestsTest() throws ApiException {
        ToolDataprivacyBulkDenyDataRequestsRequest toolDataprivacyBulkDenyDataRequestsRequest = null;
        CoreContentbankRenameContent200Response response = api.toolDataprivacyBulkDenyDataRequests(toolDataprivacyBulkDenyDataRequestsRequest);
        // TODO: test validations
    }

    /**
     * Cancel the data request made by the user
     *
     * Cancel the data request made by the user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void toolDataprivacyCancelDataRequestTest() throws ApiException {
        ToolDataprivacyCancelDataRequestRequest toolDataprivacyCancelDataRequestRequest = null;
        CoreContentbankRenameContent200Response response = api.toolDataprivacyCancelDataRequest(toolDataprivacyCancelDataRequestRequest);
        // TODO: test validations
    }

    /**
     * Mark the selected expired contexts as confirmed for deletion
     *
     * Mark the selected expired contexts as confirmed for deletion
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void toolDataprivacyConfirmContextsForDeletionTest() throws ApiException {
        ToolDataprivacyConfirmContextsForDeletionRequest toolDataprivacyConfirmContextsForDeletionRequest = null;
        ToolDataprivacyConfirmContextsForDeletion200Response response = api.toolDataprivacyConfirmContextsForDeletion(toolDataprivacyConfirmContextsForDeletionRequest);
        // TODO: test validations
    }

    /**
     * Contact the site Data Protection Officer(s)
     *
     * Contact the site Data Protection Officer(s)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void toolDataprivacyContactDpoTest() throws ApiException {
        ToolDataprivacyContactDpoRequest toolDataprivacyContactDpoRequest = null;
        CoreContentbankRenameContent200Response response = api.toolDataprivacyContactDpo(toolDataprivacyContactDpoRequest);
        // TODO: test validations
    }

    /**
     * Adds a data category
     *
     * Adds a data category
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void toolDataprivacyCreateCategoryFormTest() throws ApiException {
        ToolDataprivacyCreateCategoryFormRequest toolDataprivacyCreateCategoryFormRequest = null;
        ToolDataprivacyCreateCategoryForm200Response response = api.toolDataprivacyCreateCategoryForm(toolDataprivacyCreateCategoryFormRequest);
        // TODO: test validations
    }

    /**
     * Adds a data purpose
     *
     * Adds a data purpose
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void toolDataprivacyCreatePurposeFormTest() throws ApiException {
        ToolDataprivacyCreatePurposeFormRequest toolDataprivacyCreatePurposeFormRequest = null;
        ToolDataprivacyCreatePurposeForm200Response response = api.toolDataprivacyCreatePurposeForm(toolDataprivacyCreatePurposeFormRequest);
        // TODO: test validations
    }

    /**
     * Deletes an existing data category
     *
     * Deletes an existing data category
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void toolDataprivacyDeleteCategoryTest() throws ApiException {
        ToolDataprivacyDeleteCategoryRequest toolDataprivacyDeleteCategoryRequest = null;
        CoreContentbankRenameContent200Response response = api.toolDataprivacyDeleteCategory(toolDataprivacyDeleteCategoryRequest);
        // TODO: test validations
    }

    /**
     * Deletes an existing data purpose
     *
     * Deletes an existing data purpose
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void toolDataprivacyDeletePurposeTest() throws ApiException {
        ToolDataprivacyDeletePurposeRequest toolDataprivacyDeletePurposeRequest = null;
        CoreContentbankRenameContent200Response response = api.toolDataprivacyDeletePurpose(toolDataprivacyDeletePurposeRequest);
        // TODO: test validations
    }

    /**
     * Deny a data request
     *
     * Deny a data request
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void toolDataprivacyDenyDataRequestTest() throws ApiException {
        ToolDataprivacyCancelDataRequestRequest toolDataprivacyCancelDataRequestRequest = null;
        CoreContentbankRenameContent200Response response = api.toolDataprivacyDenyDataRequest(toolDataprivacyCancelDataRequestRequest);
        // TODO: test validations
    }

    /**
     * Fetches a list of activity options
     *
     * Fetches a list of activity options
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void toolDataprivacyGetActivityOptionsTest() throws ApiException {
        ToolDataprivacyGetActivityOptionsRequest toolDataprivacyGetActivityOptionsRequest = null;
        ToolDataprivacyGetActivityOptions200Response response = api.toolDataprivacyGetActivityOptions(toolDataprivacyGetActivityOptionsRequest);
        // TODO: test validations
    }

    /**
     * Fetches a list of data category options
     *
     * Fetches a list of data category options
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void toolDataprivacyGetCategoryOptionsTest() throws ApiException {
        ToolDataprivacyGetCategoryOptionsRequest toolDataprivacyGetCategoryOptionsRequest = null;
        ToolDataprivacyGetCategoryOptions200Response response = api.toolDataprivacyGetCategoryOptions(toolDataprivacyGetCategoryOptionsRequest);
        // TODO: test validations
    }

    /**
     * Fetch the details of a user&#39;s data request
     *
     * Fetch the details of a user&#39;s data request
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void toolDataprivacyGetDataRequestTest() throws ApiException {
        ToolDataprivacyCancelDataRequestRequest toolDataprivacyCancelDataRequestRequest = null;
        ToolDataprivacyGetDataRequest200Response response = api.toolDataprivacyGetDataRequest(toolDataprivacyCancelDataRequestRequest);
        // TODO: test validations
    }

    /**
     * Fetches a list of data storage purpose options
     *
     * Fetches a list of data storage purpose options
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void toolDataprivacyGetPurposeOptionsTest() throws ApiException {
        ToolDataprivacyGetCategoryOptionsRequest toolDataprivacyGetCategoryOptionsRequest = null;
        ToolDataprivacyGetPurposeOptions200Response response = api.toolDataprivacyGetPurposeOptions(toolDataprivacyGetCategoryOptionsRequest);
        // TODO: test validations
    }

    /**
     * Fetches a list of users
     *
     * Fetches a list of users
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void toolDataprivacyGetUsersTest() throws ApiException {
        ToolDataprivacyGetUsersRequest toolDataprivacyGetUsersRequest = null;
        Object response = api.toolDataprivacyGetUsers(toolDataprivacyGetUsersRequest);
        // TODO: test validations
    }

    /**
     * Mark a user&#39;s general enquiry as complete
     *
     * Mark a user&#39;s general enquiry as complete
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void toolDataprivacyMarkCompleteTest() throws ApiException {
        ToolDataprivacyCancelDataRequestRequest toolDataprivacyCancelDataRequestRequest = null;
        CoreContentbankRenameContent200Response response = api.toolDataprivacyMarkComplete(toolDataprivacyCancelDataRequestRequest);
        // TODO: test validations
    }

    /**
     * Updates the default category and purpose for a given context level (and optionally, a plugin)
     *
     * Updates the default category and purpose for a given context level (and optionally, a plugin)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void toolDataprivacySetContextDefaultsTest() throws ApiException {
        ToolDataprivacySetContextDefaultsRequest toolDataprivacySetContextDefaultsRequest = null;
        ToolDataprivacySetContextDefaults200Response response = api.toolDataprivacySetContextDefaults(toolDataprivacySetContextDefaultsRequest);
        // TODO: test validations
    }

    /**
     * Sets purpose and category for a specific context
     *
     * Sets purpose and category for a specific context
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void toolDataprivacySetContextFormTest() throws ApiException {
        ToolDataprivacySetContextFormRequest toolDataprivacySetContextFormRequest = null;
        ToolDataprivacySetContextForm200Response response = api.toolDataprivacySetContextForm(toolDataprivacySetContextFormRequest);
        // TODO: test validations
    }

    /**
     * Sets purpose and category across a context level
     *
     * Sets purpose and category across a context level
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void toolDataprivacySetContextlevelFormTest() throws ApiException {
        ToolDataprivacySetContextlevelFormRequest toolDataprivacySetContextlevelFormRequest = null;
        ToolDataprivacySetContextlevelForm200Response response = api.toolDataprivacySetContextlevelForm(toolDataprivacySetContextlevelFormRequest);
        // TODO: test validations
    }

    /**
     * Save list of selected courses for export
     *
     * Save list of selected courses for export
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void toolDataprivacySubmitSelectedCoursesFormTest() throws ApiException {
        ToolDataprivacySubmitSelectedCoursesFormRequest toolDataprivacySubmitSelectedCoursesFormRequest = null;
        CoreContentbankRenameContent200Response response = api.toolDataprivacySubmitSelectedCoursesForm(toolDataprivacySubmitSelectedCoursesFormRequest);
        // TODO: test validations
    }

    /**
     * Return branches for the context tree
     *
     * Return branches for the context tree
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void toolDataprivacyTreeExtraBranchesTest() throws ApiException {
        ToolDataprivacyTreeExtraBranchesRequest toolDataprivacyTreeExtraBranchesRequest = null;
        ToolDataprivacyTreeExtraBranches200Response response = api.toolDataprivacyTreeExtraBranches(toolDataprivacyTreeExtraBranchesRequest);
        // TODO: test validations
    }

}
