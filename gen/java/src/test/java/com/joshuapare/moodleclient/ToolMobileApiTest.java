/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.joshuapare.moodleclient;

import com.joshuapare.ApiException;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.ToolMobileCallExternalFunctions200Response;
import org.openapitools.client.model.ToolMobileCallExternalFunctionsRequest;
import org.openapitools.client.model.ToolMobileGetAutologinKey200Response;
import org.openapitools.client.model.ToolMobileGetAutologinKeyRequest;
import org.openapitools.client.model.ToolMobileGetConfig200Response;
import org.openapitools.client.model.ToolMobileGetConfigRequest;
import org.openapitools.client.model.ToolMobileGetContent200Response;
import org.openapitools.client.model.ToolMobileGetContentRequest;
import org.openapitools.client.model.ToolMobileGetPluginsSupportingMobile200Response;
import org.openapitools.client.model.ToolMobileGetPublicConfig200Response;
import org.openapitools.client.model.ToolMobileGetTokensForQrLogin200Response;
import org.openapitools.client.model.ToolMobileGetTokensForQrLoginRequest;
import org.openapitools.client.model.ToolMobileValidateSubscriptionKey200Response;
import org.openapitools.client.model.ToolMobileValidateSubscriptionKeyRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ToolMobileApi
 */
@Disabled
public class ToolMobileApiTest {

    private final ToolMobileApi api = new ToolMobileApi();

    /**
     * Call multiple external functions and return all responses.
     *
     * Call multiple external functions and return all responses.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void toolMobileCallExternalFunctionsTest() throws ApiException {
        ToolMobileCallExternalFunctionsRequest toolMobileCallExternalFunctionsRequest = null;
        ToolMobileCallExternalFunctions200Response response = api.toolMobileCallExternalFunctions(toolMobileCallExternalFunctionsRequest);
        // TODO: test validations
    }

    /**
     * Creates an auto-login key for the current user.                             Is created only in https sites and is restricted by time, ip address and only works if the request                             comes from the Moodle mobile or desktop app.
     *
     * Creates an auto-login key for the current user.                             Is created only in https sites and is restricted by time, ip address and only works if the request                             comes from the Moodle mobile or desktop app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void toolMobileGetAutologinKeyTest() throws ApiException {
        ToolMobileGetAutologinKeyRequest toolMobileGetAutologinKeyRequest = null;
        ToolMobileGetAutologinKey200Response response = api.toolMobileGetAutologinKey(toolMobileGetAutologinKeyRequest);
        // TODO: test validations
    }

    /**
     * Returns a list of the site configurations, filtering by section.
     *
     * Returns a list of the site configurations, filtering by section.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void toolMobileGetConfigTest() throws ApiException {
        ToolMobileGetConfigRequest toolMobileGetConfigRequest = null;
        ToolMobileGetConfig200Response response = api.toolMobileGetConfig(toolMobileGetConfigRequest);
        // TODO: test validations
    }

    /**
     * Returns a piece of content to be displayed in the Mobile app.
     *
     * Returns a piece of content to be displayed in the Mobile app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void toolMobileGetContentTest() throws ApiException {
        ToolMobileGetContentRequest toolMobileGetContentRequest = null;
        ToolMobileGetContent200Response response = api.toolMobileGetContent(toolMobileGetContentRequest);
        // TODO: test validations
    }

    /**
     * Returns a list of Moodle plugins supporting the mobile app.
     *
     * Returns a list of Moodle plugins supporting the mobile app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void toolMobileGetPluginsSupportingMobileTest() throws ApiException {
        ToolMobileGetPluginsSupportingMobile200Response response = api.toolMobileGetPluginsSupportingMobile();
        // TODO: test validations
    }

    /**
     * Returns a list of the site public settings, those not requiring authentication.
     *
     * Returns a list of the site public settings, those not requiring authentication.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void toolMobileGetPublicConfigTest() throws ApiException {
        ToolMobileGetPublicConfig200Response response = api.toolMobileGetPublicConfig();
        // TODO: test validations
    }

    /**
     * Returns a WebService token (and private token) for QR login.
     *
     * Returns a WebService token (and private token) for QR login.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void toolMobileGetTokensForQrLoginTest() throws ApiException {
        ToolMobileGetTokensForQrLoginRequest toolMobileGetTokensForQrLoginRequest = null;
        ToolMobileGetTokensForQrLogin200Response response = api.toolMobileGetTokensForQrLogin(toolMobileGetTokensForQrLoginRequest);
        // TODO: test validations
    }

    /**
     * Check if the given site subscription key is valid.
     *
     * Check if the given site subscription key is valid.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void toolMobileValidateSubscriptionKeyTest() throws ApiException {
        ToolMobileValidateSubscriptionKeyRequest toolMobileValidateSubscriptionKeyRequest = null;
        ToolMobileValidateSubscriptionKey200Response response = api.toolMobileValidateSubscriptionKey(toolMobileValidateSubscriptionKeyRequest);
        // TODO: test validations
    }

}
