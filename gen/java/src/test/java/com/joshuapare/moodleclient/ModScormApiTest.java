/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.joshuapare.moodleclient;

import com.joshuapare.ApiException;
import org.openapitools.client.model.CoreCalendarDeleteSubscription200Response;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.ModChatGetChatsByCoursesRequest;
import org.openapitools.client.model.ModScormGetScormAccessInformation200Response;
import org.openapitools.client.model.ModScormGetScormAccessInformationRequest;
import org.openapitools.client.model.ModScormGetScormAttemptCount200Response;
import org.openapitools.client.model.ModScormGetScormAttemptCountRequest;
import org.openapitools.client.model.ModScormGetScormScoTracks200Response;
import org.openapitools.client.model.ModScormGetScormScoTracksRequest;
import org.openapitools.client.model.ModScormGetScormScoes200Response;
import org.openapitools.client.model.ModScormGetScormScoesRequest;
import org.openapitools.client.model.ModScormGetScormUserData200Response;
import org.openapitools.client.model.ModScormGetScormUserDataRequest;
import org.openapitools.client.model.ModScormGetScormsByCourses200Response;
import org.openapitools.client.model.ModScormInsertScormTracks200Response;
import org.openapitools.client.model.ModScormInsertScormTracksRequest;
import org.openapitools.client.model.ModScormLaunchScoRequest;
import org.openapitools.client.model.ModScormViewScormRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ModScormApi
 */
@Disabled
public class ModScormApiTest {

    private final ModScormApi api = new ModScormApi();

    /**
     * Return capabilities information for a given scorm.
     *
     * Return capabilities information for a given scorm.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modScormGetScormAccessInformationTest() throws ApiException {
        ModScormGetScormAccessInformationRequest modScormGetScormAccessInformationRequest = null;
        ModScormGetScormAccessInformation200Response response = api.modScormGetScormAccessInformation(modScormGetScormAccessInformationRequest);
        // TODO: test validations
    }

    /**
     * Return the number of attempts done by a user in the given SCORM.
     *
     * Return the number of attempts done by a user in the given SCORM.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modScormGetScormAttemptCountTest() throws ApiException {
        ModScormGetScormAttemptCountRequest modScormGetScormAttemptCountRequest = null;
        ModScormGetScormAttemptCount200Response response = api.modScormGetScormAttemptCount(modScormGetScormAttemptCountRequest);
        // TODO: test validations
    }

    /**
     * Retrieves SCO tracking data for the given user id and attempt number
     *
     * Retrieves SCO tracking data for the given user id and attempt number
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modScormGetScormScoTracksTest() throws ApiException {
        ModScormGetScormScoTracksRequest modScormGetScormScoTracksRequest = null;
        ModScormGetScormScoTracks200Response response = api.modScormGetScormScoTracks(modScormGetScormScoTracksRequest);
        // TODO: test validations
    }

    /**
     * Returns a list containing all the scoes data related to the given scorm id
     *
     * Returns a list containing all the scoes data related to the given scorm id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modScormGetScormScoesTest() throws ApiException {
        ModScormGetScormScoesRequest modScormGetScormScoesRequest = null;
        ModScormGetScormScoes200Response response = api.modScormGetScormScoes(modScormGetScormScoesRequest);
        // TODO: test validations
    }

    /**
     * Retrieves user tracking and SCO data and default SCORM values
     *
     * Retrieves user tracking and SCO data and default SCORM values
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modScormGetScormUserDataTest() throws ApiException {
        ModScormGetScormUserDataRequest modScormGetScormUserDataRequest = null;
        ModScormGetScormUserData200Response response = api.modScormGetScormUserData(modScormGetScormUserDataRequest);
        // TODO: test validations
    }

    /**
     * Returns a list of scorm instances in a provided set of courses, if                             no courses are provided then all the scorm instances the user has access to will be returned.
     *
     * Returns a list of scorm instances in a provided set of courses, if                             no courses are provided then all the scorm instances the user has access to will be returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modScormGetScormsByCoursesTest() throws ApiException {
        ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest = null;
        ModScormGetScormsByCourses200Response response = api.modScormGetScormsByCourses(modChatGetChatsByCoursesRequest);
        // TODO: test validations
    }

    /**
     * Saves a scorm tracking record.                           It will overwrite any existing tracking data for this attempt.                           Validation should be performed before running the function to ensure the user will not lose any existing                           attempt data.
     *
     * Saves a scorm tracking record.                           It will overwrite any existing tracking data for this attempt.                           Validation should be performed before running the function to ensure the user will not lose any existing                           attempt data.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modScormInsertScormTracksTest() throws ApiException {
        ModScormInsertScormTracksRequest modScormInsertScormTracksRequest = null;
        ModScormInsertScormTracks200Response response = api.modScormInsertScormTracks(modScormInsertScormTracksRequest);
        // TODO: test validations
    }

    /**
     * Trigger the SCO launched event.
     *
     * Trigger the SCO launched event.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modScormLaunchScoTest() throws ApiException {
        ModScormLaunchScoRequest modScormLaunchScoRequest = null;
        CoreCalendarDeleteSubscription200Response response = api.modScormLaunchSco(modScormLaunchScoRequest);
        // TODO: test validations
    }

    /**
     * Trigger the course module viewed event.
     *
     * Trigger the course module viewed event.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modScormViewScormTest() throws ApiException {
        ModScormViewScormRequest modScormViewScormRequest = null;
        CoreCalendarDeleteSubscription200Response response = api.modScormViewScorm(modScormViewScormRequest);
        // TODO: test validations
    }

}
