/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.joshuapare.moodleclient;

import com.joshuapare.ApiException;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.ToolUsertoursCompleteTourRequest;
import org.openapitools.client.model.ToolUsertoursFetchAndStartTour200Response;
import org.openapitools.client.model.ToolUsertoursFetchAndStartTourRequest;
import org.openapitools.client.model.ToolUsertoursResetTour200Response;
import org.openapitools.client.model.ToolUsertoursResetTourRequest;
import org.openapitools.client.model.ToolUsertoursStepShownRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ToolUsertoursApi
 */
@Disabled
public class ToolUsertoursApiTest {

    private final ToolUsertoursApi api = new ToolUsertoursApi();

    /**
     * Mark the specified tour as completed for the current user
     *
     * Mark the specified tour as completed for the current user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void toolUsertoursCompleteTourTest() throws ApiException {
        ToolUsertoursCompleteTourRequest toolUsertoursCompleteTourRequest = null;
        Object response = api.toolUsertoursCompleteTour(toolUsertoursCompleteTourRequest);
        // TODO: test validations
    }

    /**
     * Fetch the specified tour
     *
     * Fetch the specified tour
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void toolUsertoursFetchAndStartTourTest() throws ApiException {
        ToolUsertoursFetchAndStartTourRequest toolUsertoursFetchAndStartTourRequest = null;
        ToolUsertoursFetchAndStartTour200Response response = api.toolUsertoursFetchAndStartTour(toolUsertoursFetchAndStartTourRequest);
        // TODO: test validations
    }

    /**
     * Remove the specified tour
     *
     * Remove the specified tour
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void toolUsertoursResetTourTest() throws ApiException {
        ToolUsertoursResetTourRequest toolUsertoursResetTourRequest = null;
        ToolUsertoursResetTour200Response response = api.toolUsertoursResetTour(toolUsertoursResetTourRequest);
        // TODO: test validations
    }

    /**
     * Mark the specified step as completed for the current user
     *
     * Mark the specified step as completed for the current user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void toolUsertoursStepShownTest() throws ApiException {
        ToolUsertoursStepShownRequest toolUsertoursStepShownRequest = null;
        Object response = api.toolUsertoursStepShown(toolUsertoursStepShownRequest);
        // TODO: test validations
    }

}
