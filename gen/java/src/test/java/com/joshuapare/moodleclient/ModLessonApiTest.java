/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.joshuapare.moodleclient;

import com.joshuapare.ApiException;
import org.openapitools.client.model.CoreCalendarDeleteSubscription200Response;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.ModChatGetChatsByCoursesRequest;
import org.openapitools.client.model.ModLessonFinishAttempt200Response;
import org.openapitools.client.model.ModLessonFinishAttemptRequest;
import org.openapitools.client.model.ModLessonGetAttemptsOverview200Response;
import org.openapitools.client.model.ModLessonGetAttemptsOverviewRequest;
import org.openapitools.client.model.ModLessonGetContentPagesViewed200Response;
import org.openapitools.client.model.ModLessonGetContentPagesViewedRequest;
import org.openapitools.client.model.ModLessonGetLesson200Response;
import org.openapitools.client.model.ModLessonGetLessonAccessInformation200Response;
import org.openapitools.client.model.ModLessonGetLessonAccessInformationRequest;
import org.openapitools.client.model.ModLessonGetLessonRequest;
import org.openapitools.client.model.ModLessonGetLessonsByCourses200Response;
import org.openapitools.client.model.ModLessonGetPageData200Response;
import org.openapitools.client.model.ModLessonGetPageDataRequest;
import org.openapitools.client.model.ModLessonGetPages200Response;
import org.openapitools.client.model.ModLessonGetPagesPossibleJumps200Response;
import org.openapitools.client.model.ModLessonGetPagesRequest;
import org.openapitools.client.model.ModLessonGetQuestionsAttempts200Response;
import org.openapitools.client.model.ModLessonGetQuestionsAttemptsRequest;
import org.openapitools.client.model.ModLessonGetUserAttempt200Response;
import org.openapitools.client.model.ModLessonGetUserAttemptGrade200Response;
import org.openapitools.client.model.ModLessonGetUserAttemptGradeRequest;
import org.openapitools.client.model.ModLessonGetUserAttemptRequest;
import org.openapitools.client.model.ModLessonGetUserGrade200Response;
import org.openapitools.client.model.ModLessonGetUserGradeRequest;
import org.openapitools.client.model.ModLessonGetUserTimers200Response;
import org.openapitools.client.model.ModLessonLaunchAttempt200Response;
import org.openapitools.client.model.ModLessonLaunchAttemptRequest;
import org.openapitools.client.model.ModLessonProcessPage200Response;
import org.openapitools.client.model.ModLessonProcessPageRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ModLessonApi
 */
@Disabled
public class ModLessonApiTest {

    private final ModLessonApi api = new ModLessonApi();

    /**
     * Finishes the current attempt.
     *
     * Finishes the current attempt.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modLessonFinishAttemptTest() throws ApiException {
        ModLessonFinishAttemptRequest modLessonFinishAttemptRequest = null;
        ModLessonFinishAttempt200Response response = api.modLessonFinishAttempt(modLessonFinishAttemptRequest);
        // TODO: test validations
    }

    /**
     * Get a list of all the attempts made by users in a lesson.
     *
     * Get a list of all the attempts made by users in a lesson.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modLessonGetAttemptsOverviewTest() throws ApiException {
        ModLessonGetAttemptsOverviewRequest modLessonGetAttemptsOverviewRequest = null;
        ModLessonGetAttemptsOverview200Response response = api.modLessonGetAttemptsOverview(modLessonGetAttemptsOverviewRequest);
        // TODO: test validations
    }

    /**
     * Return the list of content pages viewed by a user during a lesson attempt.
     *
     * Return the list of content pages viewed by a user during a lesson attempt.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modLessonGetContentPagesViewedTest() throws ApiException {
        ModLessonGetContentPagesViewedRequest modLessonGetContentPagesViewedRequest = null;
        ModLessonGetContentPagesViewed200Response response = api.modLessonGetContentPagesViewed(modLessonGetContentPagesViewedRequest);
        // TODO: test validations
    }

    /**
     * Return information of a given lesson.
     *
     * Return information of a given lesson.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modLessonGetLessonTest() throws ApiException {
        ModLessonGetLessonRequest modLessonGetLessonRequest = null;
        ModLessonGetLesson200Response response = api.modLessonGetLesson(modLessonGetLessonRequest);
        // TODO: test validations
    }

    /**
     * Return access information for a given lesson.
     *
     * Return access information for a given lesson.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modLessonGetLessonAccessInformationTest() throws ApiException {
        ModLessonGetLessonAccessInformationRequest modLessonGetLessonAccessInformationRequest = null;
        ModLessonGetLessonAccessInformation200Response response = api.modLessonGetLessonAccessInformation(modLessonGetLessonAccessInformationRequest);
        // TODO: test validations
    }

    /**
     * Returns a list of lessons in a provided list of courses,                             if no list is provided all lessons that the user can view will be returned.
     *
     * Returns a list of lessons in a provided list of courses,                             if no list is provided all lessons that the user can view will be returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modLessonGetLessonsByCoursesTest() throws ApiException {
        ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest = null;
        ModLessonGetLessonsByCourses200Response response = api.modLessonGetLessonsByCourses(modChatGetChatsByCoursesRequest);
        // TODO: test validations
    }

    /**
     * Return information of a given page, including its contents.
     *
     * Return information of a given page, including its contents.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modLessonGetPageDataTest() throws ApiException {
        ModLessonGetPageDataRequest modLessonGetPageDataRequest = null;
        ModLessonGetPageData200Response response = api.modLessonGetPageData(modLessonGetPageDataRequest);
        // TODO: test validations
    }

    /**
     * Return the list of pages in a lesson (based on the user permissions).
     *
     * Return the list of pages in a lesson (based on the user permissions).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modLessonGetPagesTest() throws ApiException {
        ModLessonGetPagesRequest modLessonGetPagesRequest = null;
        ModLessonGetPages200Response response = api.modLessonGetPages(modLessonGetPagesRequest);
        // TODO: test validations
    }

    /**
     * Return all the possible jumps for the pages in a given lesson.
     *
     * Return all the possible jumps for the pages in a given lesson.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modLessonGetPagesPossibleJumpsTest() throws ApiException {
        ModLessonGetLessonAccessInformationRequest modLessonGetLessonAccessInformationRequest = null;
        ModLessonGetPagesPossibleJumps200Response response = api.modLessonGetPagesPossibleJumps(modLessonGetLessonAccessInformationRequest);
        // TODO: test validations
    }

    /**
     * Return the list of questions attempts in a given lesson.
     *
     * Return the list of questions attempts in a given lesson.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modLessonGetQuestionsAttemptsTest() throws ApiException {
        ModLessonGetQuestionsAttemptsRequest modLessonGetQuestionsAttemptsRequest = null;
        ModLessonGetQuestionsAttempts200Response response = api.modLessonGetQuestionsAttempts(modLessonGetQuestionsAttemptsRequest);
        // TODO: test validations
    }

    /**
     * Return information about the given user attempt (including answers).
     *
     * Return information about the given user attempt (including answers).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modLessonGetUserAttemptTest() throws ApiException {
        ModLessonGetUserAttemptRequest modLessonGetUserAttemptRequest = null;
        ModLessonGetUserAttempt200Response response = api.modLessonGetUserAttempt(modLessonGetUserAttemptRequest);
        // TODO: test validations
    }

    /**
     * Return grade information in the attempt for a given user.
     *
     * Return grade information in the attempt for a given user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modLessonGetUserAttemptGradeTest() throws ApiException {
        ModLessonGetUserAttemptGradeRequest modLessonGetUserAttemptGradeRequest = null;
        ModLessonGetUserAttemptGrade200Response response = api.modLessonGetUserAttemptGrade(modLessonGetUserAttemptGradeRequest);
        // TODO: test validations
    }

    /**
     * Return the final grade in the lesson for the given user.
     *
     * Return the final grade in the lesson for the given user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modLessonGetUserGradeTest() throws ApiException {
        ModLessonGetUserGradeRequest modLessonGetUserGradeRequest = null;
        ModLessonGetUserGrade200Response response = api.modLessonGetUserGrade(modLessonGetUserGradeRequest);
        // TODO: test validations
    }

    /**
     * Return the timers in the current lesson for the given user.
     *
     * Return the timers in the current lesson for the given user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modLessonGetUserTimersTest() throws ApiException {
        ModLessonGetUserGradeRequest modLessonGetUserGradeRequest = null;
        ModLessonGetUserTimers200Response response = api.modLessonGetUserTimers(modLessonGetUserGradeRequest);
        // TODO: test validations
    }

    /**
     * Starts a new attempt or continues an existing one.
     *
     * Starts a new attempt or continues an existing one.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modLessonLaunchAttemptTest() throws ApiException {
        ModLessonLaunchAttemptRequest modLessonLaunchAttemptRequest = null;
        ModLessonLaunchAttempt200Response response = api.modLessonLaunchAttempt(modLessonLaunchAttemptRequest);
        // TODO: test validations
    }

    /**
     * Processes page responses.
     *
     * Processes page responses.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modLessonProcessPageTest() throws ApiException {
        ModLessonProcessPageRequest modLessonProcessPageRequest = null;
        ModLessonProcessPage200Response response = api.modLessonProcessPage(modLessonProcessPageRequest);
        // TODO: test validations
    }

    /**
     * Trigger the course module viewed event and update the module completion status.
     *
     * Trigger the course module viewed event and update the module completion status.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modLessonViewLessonTest() throws ApiException {
        ModLessonGetLessonRequest modLessonGetLessonRequest = null;
        CoreCalendarDeleteSubscription200Response response = api.modLessonViewLesson(modLessonGetLessonRequest);
        // TODO: test validations
    }

}
