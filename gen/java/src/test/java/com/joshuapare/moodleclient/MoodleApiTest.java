/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.joshuapare.moodleclient;

import com.joshuapare.ApiException;
import org.openapitools.client.model.CoreAdminSetBlockProtectionRequest;
import org.openapitools.client.model.CoreAdminSetPluginOrderRequest;
import org.openapitools.client.model.CoreAdminSetPluginStateRequest;
import org.openapitools.client.model.CoreAuthConfirmUser200Response;
import org.openapitools.client.model.CoreAuthConfirmUserRequest;
import org.openapitools.client.model.CoreAuthIsAgeDigitalConsentVerificationEnabled200Response;
import org.openapitools.client.model.CoreAuthIsMinor200Response;
import org.openapitools.client.model.CoreAuthIsMinorRequest;
import org.openapitools.client.model.CoreAuthRequestPasswordReset200Response;
import org.openapitools.client.model.CoreAuthRequestPasswordResetRequest;
import org.openapitools.client.model.CoreAuthResendConfirmationEmail200Response;
import org.openapitools.client.model.CoreAuthResendConfirmationEmailRequest;
import org.openapitools.client.model.CoreBackupGetAsyncBackupLinksBackup200Response;
import org.openapitools.client.model.CoreBackupGetAsyncBackupLinksBackupRequest;
import org.openapitools.client.model.CoreBackupGetAsyncBackupLinksRestore200Response;
import org.openapitools.client.model.CoreBackupGetAsyncBackupLinksRestoreRequest;
import org.openapitools.client.model.CoreBackupGetAsyncBackupProgressRequest;
import org.openapitools.client.model.CoreBackupGetCopyProgressRequest;
import org.openapitools.client.model.CoreBackupSubmitCopyFormRequest;
import org.openapitools.client.model.CoreBadgesGetUserBadgeByHash200Response;
import org.openapitools.client.model.CoreBadgesGetUserBadgeByHashRequest;
import org.openapitools.client.model.CoreBadgesGetUserBadges200Response;
import org.openapitools.client.model.CoreBadgesGetUserBadgesRequest;
import org.openapitools.client.model.CoreBlockFetchAddableBlocksRequest;
import org.openapitools.client.model.CoreBlockGetCourseBlocks200Response;
import org.openapitools.client.model.CoreBlockGetCourseBlocksRequest;
import org.openapitools.client.model.CoreBlockGetDashboardBlocks200Response;
import org.openapitools.client.model.CoreBlockGetDashboardBlocksRequest;
import org.openapitools.client.model.CoreBlogGetEntries200Response;
import org.openapitools.client.model.CoreBlogGetEntriesRequest;
import org.openapitools.client.model.CoreBlogViewEntries200Response;
import org.openapitools.client.model.CoreBlogViewEntriesRequest;
import org.openapitools.client.model.CoreCalendarCreateCalendarEvents200Response;
import org.openapitools.client.model.CoreCalendarCreateCalendarEventsRequest;
import org.openapitools.client.model.CoreCalendarDeleteCalendarEventsRequest;
import org.openapitools.client.model.CoreCalendarDeleteSubscription200Response;
import org.openapitools.client.model.CoreCalendarDeleteSubscriptionRequest;
import org.openapitools.client.model.CoreCalendarGetActionEventsByCourse200Response;
import org.openapitools.client.model.CoreCalendarGetActionEventsByCourseRequest;
import org.openapitools.client.model.CoreCalendarGetActionEventsByCourses200Response;
import org.openapitools.client.model.CoreCalendarGetActionEventsByCoursesRequest;
import org.openapitools.client.model.CoreCalendarGetActionEventsByTimesort200Response;
import org.openapitools.client.model.CoreCalendarGetActionEventsByTimesortRequest;
import org.openapitools.client.model.CoreCalendarGetAllowedEventTypes200Response;
import org.openapitools.client.model.CoreCalendarGetAllowedEventTypesRequest;
import org.openapitools.client.model.CoreCalendarGetCalendarAccessInformation200Response;
import org.openapitools.client.model.CoreCalendarGetCalendarAccessInformationRequest;
import org.openapitools.client.model.CoreCalendarGetCalendarDayView200Response;
import org.openapitools.client.model.CoreCalendarGetCalendarDayViewRequest;
import org.openapitools.client.model.CoreCalendarGetCalendarEventById200Response;
import org.openapitools.client.model.CoreCalendarGetCalendarEventByIdRequest;
import org.openapitools.client.model.CoreCalendarGetCalendarEvents200Response;
import org.openapitools.client.model.CoreCalendarGetCalendarEventsRequest;
import org.openapitools.client.model.CoreCalendarGetCalendarExportToken200Response;
import org.openapitools.client.model.CoreCalendarGetCalendarMonthlyView200Response;
import org.openapitools.client.model.CoreCalendarGetCalendarMonthlyViewRequest;
import org.openapitools.client.model.CoreCalendarGetCalendarUpcomingView200Response;
import org.openapitools.client.model.CoreCalendarGetCalendarUpcomingViewRequest;
import org.openapitools.client.model.CoreCalendarGetTimestamps200Response;
import org.openapitools.client.model.CoreCalendarGetTimestampsRequest;
import org.openapitools.client.model.CoreCalendarSubmitCreateUpdateForm200Response;
import org.openapitools.client.model.CoreCalendarSubmitCreateUpdateFormRequest;
import org.openapitools.client.model.CoreCalendarUpdateEventStartDay200Response;
import org.openapitools.client.model.CoreCalendarUpdateEventStartDayRequest;
import org.openapitools.client.model.CoreChangeEditmode200Response;
import org.openapitools.client.model.CoreChangeEditmodeRequest;
import org.openapitools.client.model.CoreCohortAddCohortMembers200Response;
import org.openapitools.client.model.CoreCohortAddCohortMembersRequest;
import org.openapitools.client.model.CoreCohortCreateCohortsRequest;
import org.openapitools.client.model.CoreCohortDeleteCohortMembersRequest;
import org.openapitools.client.model.CoreCohortDeleteCohortsRequest;
import org.openapitools.client.model.CoreCohortGetCohortMembersRequest;
import org.openapitools.client.model.CoreCohortGetCohortsRequest;
import org.openapitools.client.model.CoreCohortSearchCohorts200Response;
import org.openapitools.client.model.CoreCohortSearchCohortsRequest;
import org.openapitools.client.model.CoreCohortUpdateCohortsRequest;
import org.openapitools.client.model.CoreCommentAddCommentsRequest;
import org.openapitools.client.model.CoreCommentDeleteCommentsRequest;
import org.openapitools.client.model.CoreCommentGetComments200Response;
import org.openapitools.client.model.CoreCommentGetCommentsRequest;
import org.openapitools.client.model.CoreCompetencyAddCompetencyToCourseRequest;
import org.openapitools.client.model.CoreCompetencyAddCompetencyToPlanRequest;
import org.openapitools.client.model.CoreCompetencyAddCompetencyToTemplateRequest;
import org.openapitools.client.model.CoreCompetencyAddRelatedCompetencyRequest;
import org.openapitools.client.model.CoreCompetencyApprovePlanRequest;
import org.openapitools.client.model.CoreCompetencyCompetencyFrameworkViewedRequest;
import org.openapitools.client.model.CoreCompetencyCompetencyViewedRequest;
import org.openapitools.client.model.CoreCompetencyCompletePlanRequest;
import org.openapitools.client.model.CoreCompetencyCountCompetenciesInCourseRequest;
import org.openapitools.client.model.CoreCompetencyCountCompetenciesInTemplateRequest;
import org.openapitools.client.model.CoreCompetencyCountCompetenciesRequest;
import org.openapitools.client.model.CoreCompetencyCountCompetencyFrameworksRequest;
import org.openapitools.client.model.CoreCompetencyCountCourseModuleCompetenciesRequest;
import org.openapitools.client.model.CoreCompetencyCreateCompetency200Response;
import org.openapitools.client.model.CoreCompetencyCreateCompetencyFramework200Response;
import org.openapitools.client.model.CoreCompetencyCreateCompetencyFrameworkRequest;
import org.openapitools.client.model.CoreCompetencyCreateCompetencyRequest;
import org.openapitools.client.model.CoreCompetencyCreatePlan200Response;
import org.openapitools.client.model.CoreCompetencyCreatePlanRequest;
import org.openapitools.client.model.CoreCompetencyCreateTemplate200Response;
import org.openapitools.client.model.CoreCompetencyCreateTemplateRequest;
import org.openapitools.client.model.CoreCompetencyCreateUserEvidenceCompetency200Response;
import org.openapitools.client.model.CoreCompetencyCreateUserEvidenceCompetencyRequest;
import org.openapitools.client.model.CoreCompetencyDeleteCompetencyFrameworkRequest;
import org.openapitools.client.model.CoreCompetencyDeleteCompetencyRequest;
import org.openapitools.client.model.CoreCompetencyDeleteEvidenceRequest;
import org.openapitools.client.model.CoreCompetencyDeletePlanRequest;
import org.openapitools.client.model.CoreCompetencyDeleteTemplateRequest;
import org.openapitools.client.model.CoreCompetencyDeleteUserEvidenceCompetencyRequest;
import org.openapitools.client.model.CoreCompetencyDeleteUserEvidenceRequest;
import org.openapitools.client.model.CoreCompetencyDuplicateCompetencyFramework200Response;
import org.openapitools.client.model.CoreCompetencyDuplicateCompetencyFrameworkRequest;
import org.openapitools.client.model.CoreCompetencyGetScaleValuesRequest;
import org.openapitools.client.model.CoreCompetencyGradeCompetency200Response;
import org.openapitools.client.model.CoreCompetencyGradeCompetencyInCourse200Response;
import org.openapitools.client.model.CoreCompetencyGradeCompetencyInCourseRequest;
import org.openapitools.client.model.CoreCompetencyGradeCompetencyInPlanRequest;
import org.openapitools.client.model.CoreCompetencyGradeCompetencyRequest;
import org.openapitools.client.model.CoreCompetencyListCompetenciesRequest;
import org.openapitools.client.model.CoreCompetencyListCompetencyFrameworksRequest;
import org.openapitools.client.model.CoreCompetencyListCourseModuleCompetenciesRequest;
import org.openapitools.client.model.CoreCompetencyListPlanCompetenciesRequest;
import org.openapitools.client.model.CoreCompetencyListTemplatesRequest;
import org.openapitools.client.model.CoreCompetencyListUserPlansRequest;
import org.openapitools.client.model.CoreCompetencyPlanCancelReviewRequestRequest;
import org.openapitools.client.model.CoreCompetencyReadCompetencyRequest;
import org.openapitools.client.model.CoreCompetencyReadPlan200Response;
import org.openapitools.client.model.CoreCompetencyReadPlanRequest;
import org.openapitools.client.model.CoreCompetencyReadTemplateRequest;
import org.openapitools.client.model.CoreCompetencyReadUserEvidence200Response;
import org.openapitools.client.model.CoreCompetencyRemoveCompetencyFromCourseRequest;
import org.openapitools.client.model.CoreCompetencyRemoveCompetencyFromPlanRequest;
import org.openapitools.client.model.CoreCompetencyRemoveCompetencyFromTemplateRequest;
import org.openapitools.client.model.CoreCompetencyRemoveRelatedCompetencyRequest;
import org.openapitools.client.model.CoreCompetencyReorderCourseCompetencyRequest;
import org.openapitools.client.model.CoreCompetencyReorderPlanCompetencyRequest;
import org.openapitools.client.model.CoreCompetencyReorderTemplateCompetencyRequest;
import org.openapitools.client.model.CoreCompetencySearchCompetenciesRequest;
import org.openapitools.client.model.CoreCompetencySetCourseCompetencyRuleoutcomeRequest;
import org.openapitools.client.model.CoreCompetencySetParentCompetencyRequest;
import org.openapitools.client.model.CoreCompetencyUnlinkPlanFromTemplateRequest;
import org.openapitools.client.model.CoreCompetencyUpdateCompetencyFrameworkRequest;
import org.openapitools.client.model.CoreCompetencyUpdateCompetencyRequest;
import org.openapitools.client.model.CoreCompetencyUpdateCourseCompetencySettingsRequest;
import org.openapitools.client.model.CoreCompetencyUpdatePlanRequest;
import org.openapitools.client.model.CoreCompetencyUpdateTemplateRequest;
import org.openapitools.client.model.CoreCompetencyUserCompetencyCancelReviewRequestRequest;
import org.openapitools.client.model.CoreCompetencyUserCompetencyPlanViewedRequest;
import org.openapitools.client.model.CoreCompetencyUserCompetencyRequestReviewRequest;
import org.openapitools.client.model.CoreCompetencyUserCompetencyViewedInCourseRequest;
import org.openapitools.client.model.CoreCompetencyUserCompetencyViewedRequest;
import org.openapitools.client.model.CoreCompletionGetActivitiesCompletionStatus200Response;
import org.openapitools.client.model.CoreCompletionGetActivitiesCompletionStatusRequest;
import org.openapitools.client.model.CoreCompletionGetCourseCompletionStatus200Response;
import org.openapitools.client.model.CoreCompletionMarkCourseSelfCompleted200Response;
import org.openapitools.client.model.CoreCompletionMarkCourseSelfCompletedRequest;
import org.openapitools.client.model.CoreCompletionOverrideActivityCompletionStatus200Response;
import org.openapitools.client.model.CoreCompletionOverrideActivityCompletionStatusRequest;
import org.openapitools.client.model.CoreCompletionUpdateActivityCompletionStatusManually200Response;
import org.openapitools.client.model.CoreCompletionUpdateActivityCompletionStatusManuallyRequest;
import org.openapitools.client.model.CoreContentbankCopyContent200Response;
import org.openapitools.client.model.CoreContentbankCopyContentRequest;
import org.openapitools.client.model.CoreContentbankDeleteContent200Response;
import org.openapitools.client.model.CoreContentbankDeleteContentRequest;
import org.openapitools.client.model.CoreContentbankRenameContent200Response;
import org.openapitools.client.model.CoreContentbankRenameContentRequest;
import org.openapitools.client.model.CoreContentbankSetContentVisibilityRequest;
import org.openapitools.client.model.CoreCourseAddContentItemToUserFavourites200Response;
import org.openapitools.client.model.CoreCourseAddContentItemToUserFavouritesRequest;
import org.openapitools.client.model.CoreCourseCheckUpdates200Response;
import org.openapitools.client.model.CoreCourseCheckUpdatesRequest;
import org.openapitools.client.model.CoreCourseCreateCategoriesRequest;
import org.openapitools.client.model.CoreCourseCreateCoursesRequest;
import org.openapitools.client.model.CoreCourseDeleteCategoriesRequest;
import org.openapitools.client.model.CoreCourseDeleteCoursesRequest;
import org.openapitools.client.model.CoreCourseDeleteModulesRequest;
import org.openapitools.client.model.CoreCourseDuplicateCourse200Response;
import org.openapitools.client.model.CoreCourseDuplicateCourseRequest;
import org.openapitools.client.model.CoreCourseEditModuleRequest;
import org.openapitools.client.model.CoreCourseEditSectionRequest;
import org.openapitools.client.model.CoreCourseGetActivityChooserFooter200Response;
import org.openapitools.client.model.CoreCourseGetActivityChooserFooterRequest;
import org.openapitools.client.model.CoreCourseGetCategoriesRequest;
import org.openapitools.client.model.CoreCourseGetContentsRequest;
import org.openapitools.client.model.CoreCourseGetCourseContentItems200Response;
import org.openapitools.client.model.CoreCourseGetCourseContentItemsRequest;
import org.openapitools.client.model.CoreCourseGetCourseModule200Response;
import org.openapitools.client.model.CoreCourseGetCourseModuleByInstance200Response;
import org.openapitools.client.model.CoreCourseGetCourseModuleByInstanceRequest;
import org.openapitools.client.model.CoreCourseGetCoursesByField200Response;
import org.openapitools.client.model.CoreCourseGetCoursesByFieldRequest;
import org.openapitools.client.model.CoreCourseGetCoursesRequest;
import org.openapitools.client.model.CoreCourseGetEnrolledCoursesByTimelineClassification200Response;
import org.openapitools.client.model.CoreCourseGetEnrolledCoursesByTimelineClassificationRequest;
import org.openapitools.client.model.CoreCourseGetEnrolledCoursesWithActionEventsByTimelineClassification200Response;
import org.openapitools.client.model.CoreCourseGetEnrolledCoursesWithActionEventsByTimelineClassificationRequest;
import org.openapitools.client.model.CoreCourseGetEnrolledUsersByCmid200Response;
import org.openapitools.client.model.CoreCourseGetEnrolledUsersByCmidRequest;
import org.openapitools.client.model.CoreCourseGetModuleRequest;
import org.openapitools.client.model.CoreCourseGetRecentCoursesRequest;
import org.openapitools.client.model.CoreCourseGetUpdatesSince200Response;
import org.openapitools.client.model.CoreCourseGetUpdatesSinceRequest;
import org.openapitools.client.model.CoreCourseGetUserAdministrationOptions200Response;
import org.openapitools.client.model.CoreCourseGetUserAdministrationOptionsRequest;
import org.openapitools.client.model.CoreCourseGetUserNavigationOptions200Response;
import org.openapitools.client.model.CoreCourseGetUserNavigationOptionsRequest;
import org.openapitools.client.model.CoreCourseImportCourseRequest;
import org.openapitools.client.model.CoreCourseRemoveContentItemFromUserFavouritesRequest;
import org.openapitools.client.model.CoreCourseSearchCourses200Response;
import org.openapitools.client.model.CoreCourseSearchCoursesRequest;
import org.openapitools.client.model.CoreCourseSetFavouriteCoursesRequest;
import org.openapitools.client.model.CoreCourseToggleActivityRecommendation200Response;
import org.openapitools.client.model.CoreCourseToggleActivityRecommendationRequest;
import org.openapitools.client.model.CoreCourseUpdateCategoriesRequest;
import org.openapitools.client.model.CoreCourseUpdateCoursesRequest;
import org.openapitools.client.model.CoreCourseViewCourseRequest;
import org.openapitools.client.model.CoreCourseformatFileHandlersRequest;
import org.openapitools.client.model.CoreCourseformatUpdateCourseRequest;
import org.openapitools.client.model.CoreCreateUserfeedbackActionRecordRequest;
import org.openapitools.client.model.CoreCustomfieldCreateCategoryRequest;
import org.openapitools.client.model.CoreCustomfieldDeleteCategoryRequest;
import org.openapitools.client.model.CoreCustomfieldDeleteFieldRequest;
import org.openapitools.client.model.CoreCustomfieldMoveCategoryRequest;
import org.openapitools.client.model.CoreCustomfieldMoveFieldRequest;
import org.openapitools.client.model.CoreCustomfieldReloadTemplate200Response;
import org.openapitools.client.model.CoreCustomfieldReloadTemplateRequest;
import org.openapitools.client.model.CoreDynamicTabsGetContent200Response;
import org.openapitools.client.model.CoreDynamicTabsGetContentRequest;
import org.openapitools.client.model.CoreEnrolGetCourseEnrolmentMethodsRequest;
import org.openapitools.client.model.CoreEnrolGetEnrolledUsersRequest;
import org.openapitools.client.model.CoreEnrolGetEnrolledUsersWithCapabilityRequest;
import org.openapitools.client.model.CoreEnrolGetPotentialUsersRequest;
import org.openapitools.client.model.CoreEnrolGetUsersCoursesRequest;
import org.openapitools.client.model.CoreEnrolSearchUsersRequest;
import org.openapitools.client.model.CoreEnrolSubmitUserEnrolmentForm200Response;
import org.openapitools.client.model.CoreEnrolSubmitUserEnrolmentFormRequest;
import org.openapitools.client.model.CoreEnrolUnenrolUserEnrolment200Response;
import org.openapitools.client.model.CoreEnrolUnenrolUserEnrolmentRequest;
import org.openapitools.client.model.CoreFetchNotificationsRequest;
import org.openapitools.client.model.CoreFilesDeleteDraftFiles200Response;
import org.openapitools.client.model.CoreFilesDeleteDraftFilesRequest;
import org.openapitools.client.model.CoreFilesGetFiles200Response;
import org.openapitools.client.model.CoreFilesGetFilesRequest;
import org.openapitools.client.model.CoreFilesGetUnusedDraftItemid200Response;
import org.openapitools.client.model.CoreFilesUpload200Response;
import org.openapitools.client.model.CoreFilesUploadRequest;
import org.openapitools.client.model.CoreFiltersGetAvailableInContext200Response;
import org.openapitools.client.model.CoreFiltersGetAvailableInContextRequest;
import org.openapitools.client.model.CoreFormDynamicForm200Response;
import org.openapitools.client.model.CoreFormDynamicFormRequest;
import org.openapitools.client.model.CoreFormGetFiletypesBrowserData200Response;
import org.openapitools.client.model.CoreFormGetFiletypesBrowserDataRequest;
import org.openapitools.client.model.CoreGetComponentStringsRequest;
import org.openapitools.client.model.CoreGetFragment200Response;
import org.openapitools.client.model.CoreGetFragmentRequest;
import org.openapitools.client.model.CoreGetStringRequest;
import org.openapitools.client.model.CoreGetStringsRequest;
import org.openapitools.client.model.CoreGetUserDates200Response;
import org.openapitools.client.model.CoreGetUserDatesRequest;
import org.openapitools.client.model.CoreGradesCreateGradecategories200Response;
import org.openapitools.client.model.CoreGradesCreateGradecategoriesRequest;
import org.openapitools.client.model.CoreGradesGetEnrolledUsersForSearchWidget200Response;
import org.openapitools.client.model.CoreGradesGetEnrolledUsersForSearchWidgetRequest;
import org.openapitools.client.model.CoreGradesGetEnrolledUsersForSelector200Response;
import org.openapitools.client.model.CoreGradesGetEnrolledUsersForSelectorRequest;
import org.openapitools.client.model.CoreGradesGetFeedback200Response;
import org.openapitools.client.model.CoreGradesGetFeedbackRequest;
import org.openapitools.client.model.CoreGradesGetGradableUsers200Response;
import org.openapitools.client.model.CoreGradesGetGradableUsersRequest;
import org.openapitools.client.model.CoreGradesGetGradeitems200Response;
import org.openapitools.client.model.CoreGradesGetGroupsForSearchWidget200Response;
import org.openapitools.client.model.CoreGradesGetGroupsForSearchWidgetRequest;
import org.openapitools.client.model.CoreGradesGetGroupsForSelector200Response;
import org.openapitools.client.model.CoreGradesGraderGradingpanelPointFetch200Response;
import org.openapitools.client.model.CoreGradesGraderGradingpanelPointFetchRequest;
import org.openapitools.client.model.CoreGradesGraderGradingpanelPointStore200Response;
import org.openapitools.client.model.CoreGradesGraderGradingpanelPointStoreRequest;
import org.openapitools.client.model.CoreGradesGraderGradingpanelScaleFetch200Response;
import org.openapitools.client.model.CoreGradesGraderGradingpanelScaleFetchRequest;
import org.openapitools.client.model.CoreGradesGraderGradingpanelScaleStore200Response;
import org.openapitools.client.model.CoreGradesGraderGradingpanelScaleStoreRequest;
import org.openapitools.client.model.CoreGradesUpdateGradesRequest;
import org.openapitools.client.model.CoreGradingGetDefinitions200Response;
import org.openapitools.client.model.CoreGradingGetDefinitionsRequest;
import org.openapitools.client.model.CoreGradingGetGradingformInstances200Response;
import org.openapitools.client.model.CoreGradingGetGradingformInstancesRequest;
import org.openapitools.client.model.CoreGradingSaveDefinitionsRequest;
import org.openapitools.client.model.CoreGroupAddGroupMembersRequest;
import org.openapitools.client.model.CoreGroupAssignGroupingRequest;
import org.openapitools.client.model.CoreGroupCreateGroupingsRequest;
import org.openapitools.client.model.CoreGroupCreateGroupsRequest;
import org.openapitools.client.model.CoreGroupDeleteGroupMembersRequest;
import org.openapitools.client.model.CoreGroupDeleteGroupingsRequest;
import org.openapitools.client.model.CoreGroupDeleteGroupsRequest;
import org.openapitools.client.model.CoreGroupGetActivityAllowedGroups200Response;
import org.openapitools.client.model.CoreGroupGetActivityAllowedGroupsRequest;
import org.openapitools.client.model.CoreGroupGetActivityGroupmode200Response;
import org.openapitools.client.model.CoreGroupGetActivityGroupmodeRequest;
import org.openapitools.client.model.CoreGroupGetCourseGroupingsRequest;
import org.openapitools.client.model.CoreGroupGetCourseUserGroups200Response;
import org.openapitools.client.model.CoreGroupGetCourseUserGroupsRequest;
import org.openapitools.client.model.CoreGroupGetGroupMembersRequest;
import org.openapitools.client.model.CoreGroupGetGroupingsRequest;
import org.openapitools.client.model.CoreGroupUnassignGroupingRequest;
import org.openapitools.client.model.CoreGroupUpdateGroupingsRequest;
import org.openapitools.client.model.CoreGroupUpdateGroupsRequest;
import org.openapitools.client.model.CoreH5pGetTrustedH5pFile200Response;
import org.openapitools.client.model.CoreH5pGetTrustedH5pFileRequest;
import org.openapitools.client.model.CoreMessageBlockUserRequest;
import org.openapitools.client.model.CoreMessageConfirmContactRequestRequest;
import org.openapitools.client.model.CoreMessageCreateContactRequest200Response;
import org.openapitools.client.model.CoreMessageCreateContactRequestRequest;
import org.openapitools.client.model.CoreMessageDataForMessageareaSearchMessages200Response;
import org.openapitools.client.model.CoreMessageDataForMessageareaSearchMessagesRequest;
import org.openapitools.client.model.CoreMessageDeleteContactsRequest;
import org.openapitools.client.model.CoreMessageDeleteConversationsByIdRequest;
import org.openapitools.client.model.CoreMessageDeleteMessage200Response;
import org.openapitools.client.model.CoreMessageDeleteMessageForAllUsersRequest;
import org.openapitools.client.model.CoreMessageDeleteMessageRequest;
import org.openapitools.client.model.CoreMessageGetBlockedUsers200Response;
import org.openapitools.client.model.CoreMessageGetBlockedUsersRequest;
import org.openapitools.client.model.CoreMessageGetContactRequestsRequest;
import org.openapitools.client.model.CoreMessageGetConversation200Response;
import org.openapitools.client.model.CoreMessageGetConversationBetweenUsers200Response;
import org.openapitools.client.model.CoreMessageGetConversationBetweenUsersRequest;
import org.openapitools.client.model.CoreMessageGetConversationCounts200Response;
import org.openapitools.client.model.CoreMessageGetConversationCountsRequest;
import org.openapitools.client.model.CoreMessageGetConversationMembersRequest;
import org.openapitools.client.model.CoreMessageGetConversationMessages200Response;
import org.openapitools.client.model.CoreMessageGetConversationMessagesRequest;
import org.openapitools.client.model.CoreMessageGetConversationRequest;
import org.openapitools.client.model.CoreMessageGetConversations200Response;
import org.openapitools.client.model.CoreMessageGetConversationsRequest;
import org.openapitools.client.model.CoreMessageGetMemberInfoRequest;
import org.openapitools.client.model.CoreMessageGetMessageProcessor200Response;
import org.openapitools.client.model.CoreMessageGetMessageProcessorRequest;
import org.openapitools.client.model.CoreMessageGetMessages200Response;
import org.openapitools.client.model.CoreMessageGetMessagesRequest;
import org.openapitools.client.model.CoreMessageGetReceivedContactRequestsCountRequest;
import org.openapitools.client.model.CoreMessageGetSelfConversationRequest;
import org.openapitools.client.model.CoreMessageGetUnreadConversationCounts200Response;
import org.openapitools.client.model.CoreMessageGetUnreadConversationsCountRequest;
import org.openapitools.client.model.CoreMessageGetUnreadNotificationCountRequest;
import org.openapitools.client.model.CoreMessageGetUserContactsRequest;
import org.openapitools.client.model.CoreMessageGetUserMessagePreferences200Response;
import org.openapitools.client.model.CoreMessageGetUserNotificationPreferences200Response;
import org.openapitools.client.model.CoreMessageMarkAllConversationMessagesAsReadRequest;
import org.openapitools.client.model.CoreMessageMarkAllNotificationsAsReadRequest;
import org.openapitools.client.model.CoreMessageMarkMessageRead200Response;
import org.openapitools.client.model.CoreMessageMarkMessageReadRequest;
import org.openapitools.client.model.CoreMessageMarkNotificationRead200Response;
import org.openapitools.client.model.CoreMessageMarkNotificationReadRequest;
import org.openapitools.client.model.CoreMessageMessageProcessorConfigFormRequest;
import org.openapitools.client.model.CoreMessageMessageSearchUsers200Response;
import org.openapitools.client.model.CoreMessageMessageSearchUsersRequest;
import org.openapitools.client.model.CoreMessageMuteConversationsRequest;
import org.openapitools.client.model.CoreMessageSearchContactsRequest;
import org.openapitools.client.model.CoreMessageSendInstantMessagesRequest;
import org.openapitools.client.model.CoreMessageSendMessagesToConversationRequest;
import org.openapitools.client.model.CoreMessageSetFavouriteConversationsRequest;
import org.openapitools.client.model.CoreMessageUnblockUserRequest;
import org.openapitools.client.model.CoreMessageUnmuteConversationsRequest;
import org.openapitools.client.model.CoreMoodlenetAuthCheck200Response;
import org.openapitools.client.model.CoreMoodlenetAuthCheckRequest;
import org.openapitools.client.model.CoreMoodlenetGetShareInfoActivity200Response;
import org.openapitools.client.model.CoreMoodlenetGetShareInfoActivityRequest;
import org.openapitools.client.model.CoreMoodlenetGetSharedCourseInfo200Response;
import org.openapitools.client.model.CoreMoodlenetGetSharedCourseInfoRequest;
import org.openapitools.client.model.CoreMoodlenetSendActivity200Response;
import org.openapitools.client.model.CoreMoodlenetSendActivityRequest;
import org.openapitools.client.model.CoreMoodlenetSendCourse200Response;
import org.openapitools.client.model.CoreMoodlenetSendCourseRequest;
import org.openapitools.client.model.CoreMyViewPageRequest;
import org.openapitools.client.model.CoreNotesCreateNotesRequest;
import org.openapitools.client.model.CoreNotesDeleteNotesRequest;
import org.openapitools.client.model.CoreNotesGetCourseNotes200Response;
import org.openapitools.client.model.CoreNotesGetCourseNotesRequest;
import org.openapitools.client.model.CoreNotesGetNotes200Response;
import org.openapitools.client.model.CoreNotesGetNotesRequest;
import org.openapitools.client.model.CoreNotesUpdateNotesRequest;
import org.openapitools.client.model.CoreNotesViewNotesRequest;
import org.openapitools.client.model.CoreOutputLoadFontawesomeIconSystemMapRequest;
import org.openapitools.client.model.CoreOutputLoadTemplateRequest;
import org.openapitools.client.model.CoreOutputLoadTemplateWithDependencies200Response;
import org.openapitools.client.model.CoreOutputLoadTemplateWithDependenciesRequest;
import org.openapitools.client.model.CorePaymentGetAvailableGatewaysRequest;
import org.openapitools.client.model.CoreQuestionGetRandomQuestionSummaries200Response;
import org.openapitools.client.model.CoreQuestionGetRandomQuestionSummariesRequest;
import org.openapitools.client.model.CoreQuestionSubmitTagsForm200Response;
import org.openapitools.client.model.CoreQuestionSubmitTagsFormRequest;
import org.openapitools.client.model.CoreQuestionUpdateFlagRequest;
import org.openapitools.client.model.CoreRatingAddRating200Response;
import org.openapitools.client.model.CoreRatingAddRatingRequest;
import org.openapitools.client.model.CoreRatingGetItemRatings200Response;
import org.openapitools.client.model.CoreRatingGetItemRatingsRequest;
import org.openapitools.client.model.CoreReportbuilderAudiencesDeleteRequest;
import org.openapitools.client.model.CoreReportbuilderCanViewSystemReportRequest;
import org.openapitools.client.model.CoreReportbuilderColumnsAdd200Response;
import org.openapitools.client.model.CoreReportbuilderColumnsAddRequest;
import org.openapitools.client.model.CoreReportbuilderColumnsDelete200Response;
import org.openapitools.client.model.CoreReportbuilderColumnsDeleteRequest;
import org.openapitools.client.model.CoreReportbuilderColumnsReorderRequest;
import org.openapitools.client.model.CoreReportbuilderColumnsSortGetRequest;
import org.openapitools.client.model.CoreReportbuilderColumnsSortReorderRequest;
import org.openapitools.client.model.CoreReportbuilderColumnsSortToggleRequest;
import org.openapitools.client.model.CoreReportbuilderConditionsAdd200Response;
import org.openapitools.client.model.CoreReportbuilderConditionsAddRequest;
import org.openapitools.client.model.CoreReportbuilderConditionsDelete200Response;
import org.openapitools.client.model.CoreReportbuilderConditionsDeleteRequest;
import org.openapitools.client.model.CoreReportbuilderConditionsReorderRequest;
import org.openapitools.client.model.CoreReportbuilderFiltersAdd200Response;
import org.openapitools.client.model.CoreReportbuilderFiltersAddRequest;
import org.openapitools.client.model.CoreReportbuilderFiltersDelete200Response;
import org.openapitools.client.model.CoreReportbuilderFiltersDeleteRequest;
import org.openapitools.client.model.CoreReportbuilderFiltersReorderRequest;
import org.openapitools.client.model.CoreReportbuilderFiltersResetRequest;
import org.openapitools.client.model.CoreReportbuilderListReports200Response;
import org.openapitools.client.model.CoreReportbuilderListReportsRequest;
import org.openapitools.client.model.CoreReportbuilderReportsGet200Response;
import org.openapitools.client.model.CoreReportbuilderReportsGetRequest;
import org.openapitools.client.model.CoreReportbuilderRetrieveReport200Response;
import org.openapitools.client.model.CoreReportbuilderRetrieveReportRequest;
import org.openapitools.client.model.CoreReportbuilderRetrieveSystemReport200Response;
import org.openapitools.client.model.CoreReportbuilderRetrieveSystemReportRequest;
import org.openapitools.client.model.CoreReportbuilderSchedulesDeleteRequest;
import org.openapitools.client.model.CoreReportbuilderSchedulesSendRequest;
import org.openapitools.client.model.CoreReportbuilderSchedulesToggleRequest;
import org.openapitools.client.model.CoreReportbuilderSetFiltersRequest;
import org.openapitools.client.model.CoreReportbuilderViewReport200Response;
import org.openapitools.client.model.CoreRoleAssignRolesRequest;
import org.openapitools.client.model.CoreRoleUnassignRolesRequest;
import org.openapitools.client.model.CoreSearchGetRelevantUsersRequest;
import org.openapitools.client.model.CoreSearchGetResults200Response;
import org.openapitools.client.model.CoreSearchGetResultsRequest;
import org.openapitools.client.model.CoreSearchGetSearchAreasList200Response;
import org.openapitools.client.model.CoreSearchGetSearchAreasListRequest;
import org.openapitools.client.model.CoreSearchGetTopResults200Response;
import org.openapitools.client.model.CoreSearchGetTopResultsRequest;
import org.openapitools.client.model.CoreSearchViewResultsRequest;
import org.openapitools.client.model.CoreSessionTimeRemaining200Response;
import org.openapitools.client.model.CoreTableGetDynamicTableContent200Response;
import org.openapitools.client.model.CoreTableGetDynamicTableContentRequest;
import org.openapitools.client.model.CoreTagGetTagAreas200Response;
import org.openapitools.client.model.CoreTagGetTagCloud200Response;
import org.openapitools.client.model.CoreTagGetTagCloudRequest;
import org.openapitools.client.model.CoreTagGetTagCollections200Response;
import org.openapitools.client.model.CoreTagGetTagindex200Response;
import org.openapitools.client.model.CoreTagGetTagindexPerAreaRequest;
import org.openapitools.client.model.CoreTagGetTagindexRequest;
import org.openapitools.client.model.CoreTagGetTags200Response;
import org.openapitools.client.model.CoreTagGetTagsRequest;
import org.openapitools.client.model.CoreTagUpdateTagsRequest;
import org.openapitools.client.model.CoreUpdateInplaceEditable200Response;
import org.openapitools.client.model.CoreUpdateInplaceEditableRequest;
import org.openapitools.client.model.CoreUserAddUserDeviceRequest;
import org.openapitools.client.model.CoreUserAddUserPrivateFilesRequest;
import org.openapitools.client.model.CoreUserAgreeSitePolicy200Response;
import org.openapitools.client.model.CoreUserCreateUsersRequest;
import org.openapitools.client.model.CoreUserDeleteUsersRequest;
import org.openapitools.client.model.CoreUserGetCourseUserProfilesRequest;
import org.openapitools.client.model.CoreUserGetPrivateFilesInfo200Response;
import org.openapitools.client.model.CoreUserGetPrivateFilesInfoRequest;
import org.openapitools.client.model.CoreUserGetUserPreferences200Response;
import org.openapitools.client.model.CoreUserGetUserPreferencesRequest;
import org.openapitools.client.model.CoreUserGetUsers200Response;
import org.openapitools.client.model.CoreUserGetUsersByFieldRequest;
import org.openapitools.client.model.CoreUserGetUsersRequest;
import org.openapitools.client.model.CoreUserRemoveUserDevice200Response;
import org.openapitools.client.model.CoreUserRemoveUserDeviceRequest;
import org.openapitools.client.model.CoreUserSearchIdentity200Response;
import org.openapitools.client.model.CoreUserSearchIdentityRequest;
import org.openapitools.client.model.CoreUserSetUserPreferences200Response;
import org.openapitools.client.model.CoreUserSetUserPreferencesRequest;
import org.openapitools.client.model.CoreUserUpdatePicture200Response;
import org.openapitools.client.model.CoreUserUpdatePictureRequest;
import org.openapitools.client.model.CoreUserUpdateUserDevicePublicKey200Response;
import org.openapitools.client.model.CoreUserUpdateUserDevicePublicKeyRequest;
import org.openapitools.client.model.CoreUserUpdateUserPreferencesRequest;
import org.openapitools.client.model.CoreUserUpdateUsersRequest;
import org.openapitools.client.model.CoreUserViewUserListRequest;
import org.openapitools.client.model.CoreUserViewUserProfileRequest;
import org.openapitools.client.model.CoreWebserviceGetSiteInfo200Response;
import org.openapitools.client.model.CoreWebserviceGetSiteInfoRequest;
import org.openapitools.client.model.CoreXapiDeleteStateRequest;
import org.openapitools.client.model.CoreXapiDeleteStatesRequest;
import org.openapitools.client.model.CoreXapiGetStateRequest;
import org.openapitools.client.model.CoreXapiGetStatesRequest;
import org.openapitools.client.model.CoreXapiPostStateRequest;
import org.openapitools.client.model.CoreXapiStatementPostRequest;
import org.openapitools.client.model.ErrorResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MoodleApi
 */
@Disabled
public class MoodleApiTest {

    private final MoodleApi api = new MoodleApi();

    /**
     * Set the protection state for a block plugin
     *
     * Set the protection state for a block plugin
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreAdminSetBlockProtectionTest() throws ApiException {
        CoreAdminSetBlockProtectionRequest coreAdminSetBlockProtectionRequest = null;
        Object response = api.coreAdminSetBlockProtection(coreAdminSetBlockProtectionRequest);
        // TODO: test validations
    }

    /**
     * Set the order of a plugin
     *
     * Set the order of a plugin
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreAdminSetPluginOrderTest() throws ApiException {
        CoreAdminSetPluginOrderRequest coreAdminSetPluginOrderRequest = null;
        Object response = api.coreAdminSetPluginOrder(coreAdminSetPluginOrderRequest);
        // TODO: test validations
    }

    /**
     * Set the state of a plugin
     *
     * Set the state of a plugin
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreAdminSetPluginStateTest() throws ApiException {
        CoreAdminSetPluginStateRequest coreAdminSetPluginStateRequest = null;
        Object response = api.coreAdminSetPluginState(coreAdminSetPluginStateRequest);
        // TODO: test validations
    }

    /**
     * Confirm a user account.
     *
     * Confirm a user account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreAuthConfirmUserTest() throws ApiException {
        CoreAuthConfirmUserRequest coreAuthConfirmUserRequest = null;
        CoreAuthConfirmUser200Response response = api.coreAuthConfirmUser(coreAuthConfirmUserRequest);
        // TODO: test validations
    }

    /**
     * Checks if age digital consent verification is enabled.
     *
     * Checks if age digital consent verification is enabled.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreAuthIsAgeDigitalConsentVerificationEnabledTest() throws ApiException {
        CoreAuthIsAgeDigitalConsentVerificationEnabled200Response response = api.coreAuthIsAgeDigitalConsentVerificationEnabled();
        // TODO: test validations
    }

    /**
     * Requests a check if a user is a digital minor.
     *
     * Requests a check if a user is a digital minor.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreAuthIsMinorTest() throws ApiException {
        CoreAuthIsMinorRequest coreAuthIsMinorRequest = null;
        CoreAuthIsMinor200Response response = api.coreAuthIsMinor(coreAuthIsMinorRequest);
        // TODO: test validations
    }

    /**
     * Requests a password reset.
     *
     * Requests a password reset.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreAuthRequestPasswordResetTest() throws ApiException {
        CoreAuthRequestPasswordResetRequest coreAuthRequestPasswordResetRequest = null;
        CoreAuthRequestPasswordReset200Response response = api.coreAuthRequestPasswordReset(coreAuthRequestPasswordResetRequest);
        // TODO: test validations
    }

    /**
     * Resend confirmation email.
     *
     * Resend confirmation email.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreAuthResendConfirmationEmailTest() throws ApiException {
        CoreAuthResendConfirmationEmailRequest coreAuthResendConfirmationEmailRequest = null;
        CoreAuthResendConfirmationEmail200Response response = api.coreAuthResendConfirmationEmail(coreAuthResendConfirmationEmailRequest);
        // TODO: test validations
    }

    /**
     * Gets the data to use when updating the status table row in the UI for when an async backup completes.
     *
     * Gets the data to use when updating the status table row in the UI for when an async backup completes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreBackupGetAsyncBackupLinksBackupTest() throws ApiException {
        CoreBackupGetAsyncBackupLinksBackupRequest coreBackupGetAsyncBackupLinksBackupRequest = null;
        CoreBackupGetAsyncBackupLinksBackup200Response response = api.coreBackupGetAsyncBackupLinksBackup(coreBackupGetAsyncBackupLinksBackupRequest);
        // TODO: test validations
    }

    /**
     * Gets the data to use when updating the status table row in the UI for when an async restore completes.
     *
     * Gets the data to use when updating the status table row in the UI for when an async restore completes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreBackupGetAsyncBackupLinksRestoreTest() throws ApiException {
        CoreBackupGetAsyncBackupLinksRestoreRequest coreBackupGetAsyncBackupLinksRestoreRequest = null;
        CoreBackupGetAsyncBackupLinksRestore200Response response = api.coreBackupGetAsyncBackupLinksRestore(coreBackupGetAsyncBackupLinksRestoreRequest);
        // TODO: test validations
    }

    /**
     * Get the progress of an Asyncronhous backup.
     *
     * Get the progress of an Asyncronhous backup.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreBackupGetAsyncBackupProgressTest() throws ApiException {
        CoreBackupGetAsyncBackupProgressRequest coreBackupGetAsyncBackupProgressRequest = null;
        Object response = api.coreBackupGetAsyncBackupProgress(coreBackupGetAsyncBackupProgressRequest);
        // TODO: test validations
    }

    /**
     * Gets the progress of course copy operations.
     *
     * Gets the progress of course copy operations.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreBackupGetCopyProgressTest() throws ApiException {
        CoreBackupGetCopyProgressRequest coreBackupGetCopyProgressRequest = null;
        Object response = api.coreBackupGetCopyProgress(coreBackupGetCopyProgressRequest);
        // TODO: test validations
    }

    /**
     * Handles ajax submission of course copy form.
     *
     * Handles ajax submission of course copy form.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreBackupSubmitCopyFormTest() throws ApiException {
        CoreBackupSubmitCopyFormRequest coreBackupSubmitCopyFormRequest = null;
        Object response = api.coreBackupSubmitCopyForm(coreBackupSubmitCopyFormRequest);
        // TODO: test validations
    }

    /**
     * Returns the badge awarded to a user by hash.
     *
     * Returns the badge awarded to a user by hash.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreBadgesGetUserBadgeByHashTest() throws ApiException {
        CoreBadgesGetUserBadgeByHashRequest coreBadgesGetUserBadgeByHashRequest = null;
        CoreBadgesGetUserBadgeByHash200Response response = api.coreBadgesGetUserBadgeByHash(coreBadgesGetUserBadgeByHashRequest);
        // TODO: test validations
    }

    /**
     * Returns the list of badges awarded to a user.
     *
     * Returns the list of badges awarded to a user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreBadgesGetUserBadgesTest() throws ApiException {
        CoreBadgesGetUserBadgesRequest coreBadgesGetUserBadgesRequest = null;
        CoreBadgesGetUserBadges200Response response = api.coreBadgesGetUserBadges(coreBadgesGetUserBadgesRequest);
        // TODO: test validations
    }

    /**
     * Returns all addable blocks in a given page.
     *
     * Returns all addable blocks in a given page.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreBlockFetchAddableBlocksTest() throws ApiException {
        CoreBlockFetchAddableBlocksRequest coreBlockFetchAddableBlocksRequest = null;
        Object response = api.coreBlockFetchAddableBlocks(coreBlockFetchAddableBlocksRequest);
        // TODO: test validations
    }

    /**
     * Returns blocks information for a course.
     *
     * Returns blocks information for a course.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreBlockGetCourseBlocksTest() throws ApiException {
        CoreBlockGetCourseBlocksRequest coreBlockGetCourseBlocksRequest = null;
        CoreBlockGetCourseBlocks200Response response = api.coreBlockGetCourseBlocks(coreBlockGetCourseBlocksRequest);
        // TODO: test validations
    }

    /**
     * Returns blocks information for the given user dashboard.
     *
     * Returns blocks information for the given user dashboard.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreBlockGetDashboardBlocksTest() throws ApiException {
        CoreBlockGetDashboardBlocksRequest coreBlockGetDashboardBlocksRequest = null;
        CoreBlockGetDashboardBlocks200Response response = api.coreBlockGetDashboardBlocks(coreBlockGetDashboardBlocksRequest);
        // TODO: test validations
    }

    /**
     * Returns blog entries.
     *
     * Returns blog entries.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreBlogGetEntriesTest() throws ApiException {
        CoreBlogGetEntriesRequest coreBlogGetEntriesRequest = null;
        CoreBlogGetEntries200Response response = api.coreBlogGetEntries(coreBlogGetEntriesRequest);
        // TODO: test validations
    }

    /**
     * Trigger the blog_entries_viewed event.
     *
     * Trigger the blog_entries_viewed event.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreBlogViewEntriesTest() throws ApiException {
        CoreBlogViewEntriesRequest coreBlogViewEntriesRequest = null;
        CoreBlogViewEntries200Response response = api.coreBlogViewEntries(coreBlogViewEntriesRequest);
        // TODO: test validations
    }

    /**
     * Create calendar events
     *
     * Create calendar events
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCalendarCreateCalendarEventsTest() throws ApiException {
        CoreCalendarCreateCalendarEventsRequest coreCalendarCreateCalendarEventsRequest = null;
        CoreCalendarCreateCalendarEvents200Response response = api.coreCalendarCreateCalendarEvents(coreCalendarCreateCalendarEventsRequest);
        // TODO: test validations
    }

    /**
     * Delete calendar events
     *
     * Delete calendar events
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCalendarDeleteCalendarEventsTest() throws ApiException {
        CoreCalendarDeleteCalendarEventsRequest coreCalendarDeleteCalendarEventsRequest = null;
        Object response = api.coreCalendarDeleteCalendarEvents(coreCalendarDeleteCalendarEventsRequest);
        // TODO: test validations
    }

    /**
     * Delete the calendar subscription
     *
     * Delete the calendar subscription
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCalendarDeleteSubscriptionTest() throws ApiException {
        CoreCalendarDeleteSubscriptionRequest coreCalendarDeleteSubscriptionRequest = null;
        CoreCalendarDeleteSubscription200Response response = api.coreCalendarDeleteSubscription(coreCalendarDeleteSubscriptionRequest);
        // TODO: test validations
    }

    /**
     * Get calendar action events by course
     *
     * Get calendar action events by course
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCalendarGetActionEventsByCourseTest() throws ApiException {
        CoreCalendarGetActionEventsByCourseRequest coreCalendarGetActionEventsByCourseRequest = null;
        CoreCalendarGetActionEventsByCourse200Response response = api.coreCalendarGetActionEventsByCourse(coreCalendarGetActionEventsByCourseRequest);
        // TODO: test validations
    }

    /**
     * Get calendar action events by courses
     *
     * Get calendar action events by courses
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCalendarGetActionEventsByCoursesTest() throws ApiException {
        CoreCalendarGetActionEventsByCoursesRequest coreCalendarGetActionEventsByCoursesRequest = null;
        CoreCalendarGetActionEventsByCourses200Response response = api.coreCalendarGetActionEventsByCourses(coreCalendarGetActionEventsByCoursesRequest);
        // TODO: test validations
    }

    /**
     * Get calendar action events by tiemsort
     *
     * Get calendar action events by tiemsort
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCalendarGetActionEventsByTimesortTest() throws ApiException {
        CoreCalendarGetActionEventsByTimesortRequest coreCalendarGetActionEventsByTimesortRequest = null;
        CoreCalendarGetActionEventsByTimesort200Response response = api.coreCalendarGetActionEventsByTimesort(coreCalendarGetActionEventsByTimesortRequest);
        // TODO: test validations
    }

    /**
     * Get the type of events a user can create in the given course.
     *
     * Get the type of events a user can create in the given course.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCalendarGetAllowedEventTypesTest() throws ApiException {
        CoreCalendarGetAllowedEventTypesRequest coreCalendarGetAllowedEventTypesRequest = null;
        CoreCalendarGetAllowedEventTypes200Response response = api.coreCalendarGetAllowedEventTypes(coreCalendarGetAllowedEventTypesRequest);
        // TODO: test validations
    }

    /**
     * Convenience function to retrieve some permissions/access information for the given course calendar.
     *
     * Convenience function to retrieve some permissions/access information for the given course calendar.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCalendarGetCalendarAccessInformationTest() throws ApiException {
        CoreCalendarGetCalendarAccessInformationRequest coreCalendarGetCalendarAccessInformationRequest = null;
        CoreCalendarGetCalendarAccessInformation200Response response = api.coreCalendarGetCalendarAccessInformation(coreCalendarGetCalendarAccessInformationRequest);
        // TODO: test validations
    }

    /**
     * Fetch the day view data for a calendar
     *
     * Fetch the day view data for a calendar
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCalendarGetCalendarDayViewTest() throws ApiException {
        CoreCalendarGetCalendarDayViewRequest coreCalendarGetCalendarDayViewRequest = null;
        CoreCalendarGetCalendarDayView200Response response = api.coreCalendarGetCalendarDayView(coreCalendarGetCalendarDayViewRequest);
        // TODO: test validations
    }

    /**
     * Get calendar event by id
     *
     * Get calendar event by id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCalendarGetCalendarEventByIdTest() throws ApiException {
        CoreCalendarGetCalendarEventByIdRequest coreCalendarGetCalendarEventByIdRequest = null;
        CoreCalendarGetCalendarEventById200Response response = api.coreCalendarGetCalendarEventById(coreCalendarGetCalendarEventByIdRequest);
        // TODO: test validations
    }

    /**
     * Get calendar events
     *
     * Get calendar events
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCalendarGetCalendarEventsTest() throws ApiException {
        CoreCalendarGetCalendarEventsRequest coreCalendarGetCalendarEventsRequest = null;
        CoreCalendarGetCalendarEvents200Response response = api.coreCalendarGetCalendarEvents(coreCalendarGetCalendarEventsRequest);
        // TODO: test validations
    }

    /**
     * Return the auth token required for exporting a calendar.
     *
     * Return the auth token required for exporting a calendar.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCalendarGetCalendarExportTokenTest() throws ApiException {
        CoreCalendarGetCalendarExportToken200Response response = api.coreCalendarGetCalendarExportToken();
        // TODO: test validations
    }

    /**
     * Fetch the monthly view data for a calendar
     *
     * Fetch the monthly view data for a calendar
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCalendarGetCalendarMonthlyViewTest() throws ApiException {
        CoreCalendarGetCalendarMonthlyViewRequest coreCalendarGetCalendarMonthlyViewRequest = null;
        CoreCalendarGetCalendarMonthlyView200Response response = api.coreCalendarGetCalendarMonthlyView(coreCalendarGetCalendarMonthlyViewRequest);
        // TODO: test validations
    }

    /**
     * Fetch the upcoming view data for a calendar
     *
     * Fetch the upcoming view data for a calendar
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCalendarGetCalendarUpcomingViewTest() throws ApiException {
        CoreCalendarGetCalendarUpcomingViewRequest coreCalendarGetCalendarUpcomingViewRequest = null;
        CoreCalendarGetCalendarUpcomingView200Response response = api.coreCalendarGetCalendarUpcomingView(coreCalendarGetCalendarUpcomingViewRequest);
        // TODO: test validations
    }

    /**
     * Fetch unix timestamps for given date times.
     *
     * Fetch unix timestamps for given date times.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCalendarGetTimestampsTest() throws ApiException {
        CoreCalendarGetTimestampsRequest coreCalendarGetTimestampsRequest = null;
        CoreCalendarGetTimestamps200Response response = api.coreCalendarGetTimestamps(coreCalendarGetTimestampsRequest);
        // TODO: test validations
    }

    /**
     * Submit form data for event form
     *
     * Submit form data for event form
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCalendarSubmitCreateUpdateFormTest() throws ApiException {
        CoreCalendarSubmitCreateUpdateFormRequest coreCalendarSubmitCreateUpdateFormRequest = null;
        CoreCalendarSubmitCreateUpdateForm200Response response = api.coreCalendarSubmitCreateUpdateForm(coreCalendarSubmitCreateUpdateFormRequest);
        // TODO: test validations
    }

    /**
     * Update the start day (but not time) for an event.
     *
     * Update the start day (but not time) for an event.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCalendarUpdateEventStartDayTest() throws ApiException {
        CoreCalendarUpdateEventStartDayRequest coreCalendarUpdateEventStartDayRequest = null;
        CoreCalendarUpdateEventStartDay200Response response = api.coreCalendarUpdateEventStartDay(coreCalendarUpdateEventStartDayRequest);
        // TODO: test validations
    }

    /**
     * Change the editing mode
     *
     * Change the editing mode
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreChangeEditmodeTest() throws ApiException {
        CoreChangeEditmodeRequest coreChangeEditmodeRequest = null;
        CoreChangeEditmode200Response response = api.coreChangeEditmode(coreChangeEditmodeRequest);
        // TODO: test validations
    }

    /**
     * Adds cohort members.
     *
     * Adds cohort members.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCohortAddCohortMembersTest() throws ApiException {
        CoreCohortAddCohortMembersRequest coreCohortAddCohortMembersRequest = null;
        CoreCohortAddCohortMembers200Response response = api.coreCohortAddCohortMembers(coreCohortAddCohortMembersRequest);
        // TODO: test validations
    }

    /**
     * Creates new cohorts.
     *
     * Creates new cohorts.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCohortCreateCohortsTest() throws ApiException {
        CoreCohortCreateCohortsRequest coreCohortCreateCohortsRequest = null;
        Object response = api.coreCohortCreateCohorts(coreCohortCreateCohortsRequest);
        // TODO: test validations
    }

    /**
     * Deletes cohort members.
     *
     * Deletes cohort members.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCohortDeleteCohortMembersTest() throws ApiException {
        CoreCohortDeleteCohortMembersRequest coreCohortDeleteCohortMembersRequest = null;
        Object response = api.coreCohortDeleteCohortMembers(coreCohortDeleteCohortMembersRequest);
        // TODO: test validations
    }

    /**
     * Deletes all specified cohorts.
     *
     * Deletes all specified cohorts.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCohortDeleteCohortsTest() throws ApiException {
        CoreCohortDeleteCohortsRequest coreCohortDeleteCohortsRequest = null;
        Object response = api.coreCohortDeleteCohorts(coreCohortDeleteCohortsRequest);
        // TODO: test validations
    }

    /**
     * Returns cohort members.
     *
     * Returns cohort members.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCohortGetCohortMembersTest() throws ApiException {
        CoreCohortGetCohortMembersRequest coreCohortGetCohortMembersRequest = null;
        Object response = api.coreCohortGetCohortMembers(coreCohortGetCohortMembersRequest);
        // TODO: test validations
    }

    /**
     * Returns cohort details.
     *
     * Returns cohort details.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCohortGetCohortsTest() throws ApiException {
        CoreCohortGetCohortsRequest coreCohortGetCohortsRequest = null;
        Object response = api.coreCohortGetCohorts(coreCohortGetCohortsRequest);
        // TODO: test validations
    }

    /**
     * Search for cohorts.
     *
     * Search for cohorts.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCohortSearchCohortsTest() throws ApiException {
        CoreCohortSearchCohortsRequest coreCohortSearchCohortsRequest = null;
        CoreCohortSearchCohorts200Response response = api.coreCohortSearchCohorts(coreCohortSearchCohortsRequest);
        // TODO: test validations
    }

    /**
     * Updates existing cohorts.
     *
     * Updates existing cohorts.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCohortUpdateCohortsTest() throws ApiException {
        CoreCohortUpdateCohortsRequest coreCohortUpdateCohortsRequest = null;
        Object response = api.coreCohortUpdateCohorts(coreCohortUpdateCohortsRequest);
        // TODO: test validations
    }

    /**
     * Adds a comment or comments.
     *
     * Adds a comment or comments.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCommentAddCommentsTest() throws ApiException {
        CoreCommentAddCommentsRequest coreCommentAddCommentsRequest = null;
        Object response = api.coreCommentAddComments(coreCommentAddCommentsRequest);
        // TODO: test validations
    }

    /**
     * Deletes a comment or comments.
     *
     * Deletes a comment or comments.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCommentDeleteCommentsTest() throws ApiException {
        CoreCommentDeleteCommentsRequest coreCommentDeleteCommentsRequest = null;
        Object response = api.coreCommentDeleteComments(coreCommentDeleteCommentsRequest);
        // TODO: test validations
    }

    /**
     * Returns comments.
     *
     * Returns comments.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCommentGetCommentsTest() throws ApiException {
        CoreCommentGetCommentsRequest coreCommentGetCommentsRequest = null;
        CoreCommentGetComments200Response response = api.coreCommentGetComments(coreCommentGetCommentsRequest);
        // TODO: test validations
    }

    /**
     * Add the competency to a course
     *
     * Add the competency to a course
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCompetencyAddCompetencyToCourseTest() throws ApiException {
        CoreCompetencyAddCompetencyToCourseRequest coreCompetencyAddCompetencyToCourseRequest = null;
        Object response = api.coreCompetencyAddCompetencyToCourse(coreCompetencyAddCompetencyToCourseRequest);
        // TODO: test validations
    }

    /**
     * Add the competency to a learning plan
     *
     * Add the competency to a learning plan
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCompetencyAddCompetencyToPlanTest() throws ApiException {
        CoreCompetencyAddCompetencyToPlanRequest coreCompetencyAddCompetencyToPlanRequest = null;
        Object response = api.coreCompetencyAddCompetencyToPlan(coreCompetencyAddCompetencyToPlanRequest);
        // TODO: test validations
    }

    /**
     * Add the competency to a template
     *
     * Add the competency to a template
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCompetencyAddCompetencyToTemplateTest() throws ApiException {
        CoreCompetencyAddCompetencyToTemplateRequest coreCompetencyAddCompetencyToTemplateRequest = null;
        Object response = api.coreCompetencyAddCompetencyToTemplate(coreCompetencyAddCompetencyToTemplateRequest);
        // TODO: test validations
    }

    /**
     * Adds a related competency
     *
     * Adds a related competency
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCompetencyAddRelatedCompetencyTest() throws ApiException {
        CoreCompetencyAddRelatedCompetencyRequest coreCompetencyAddRelatedCompetencyRequest = null;
        Object response = api.coreCompetencyAddRelatedCompetency(coreCompetencyAddRelatedCompetencyRequest);
        // TODO: test validations
    }

    /**
     * Approve a plan.
     *
     * Approve a plan.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCompetencyApprovePlanTest() throws ApiException {
        CoreCompetencyApprovePlanRequest coreCompetencyApprovePlanRequest = null;
        Object response = api.coreCompetencyApprovePlan(coreCompetencyApprovePlanRequest);
        // TODO: test validations
    }

    /**
     * Log event competency framework viewed
     *
     * Log event competency framework viewed
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCompetencyCompetencyFrameworkViewedTest() throws ApiException {
        CoreCompetencyCompetencyFrameworkViewedRequest coreCompetencyCompetencyFrameworkViewedRequest = null;
        Object response = api.coreCompetencyCompetencyFrameworkViewed(coreCompetencyCompetencyFrameworkViewedRequest);
        // TODO: test validations
    }

    /**
     * Log event competency viewed
     *
     * Log event competency viewed
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCompetencyCompetencyViewedTest() throws ApiException {
        CoreCompetencyCompetencyViewedRequest coreCompetencyCompetencyViewedRequest = null;
        Object response = api.coreCompetencyCompetencyViewed(coreCompetencyCompetencyViewedRequest);
        // TODO: test validations
    }

    /**
     * Complete learning plan.
     *
     * Complete learning plan.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCompetencyCompletePlanTest() throws ApiException {
        CoreCompetencyCompletePlanRequest coreCompetencyCompletePlanRequest = null;
        Object response = api.coreCompetencyCompletePlan(coreCompetencyCompletePlanRequest);
        // TODO: test validations
    }

    /**
     * Count a list of a competencies.
     *
     * Count a list of a competencies.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCompetencyCountCompetenciesTest() throws ApiException {
        CoreCompetencyCountCompetenciesRequest coreCompetencyCountCompetenciesRequest = null;
        Object response = api.coreCompetencyCountCompetencies(coreCompetencyCountCompetenciesRequest);
        // TODO: test validations
    }

    /**
     * List the competencies in a course
     *
     * List the competencies in a course
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCompetencyCountCompetenciesInCourseTest() throws ApiException {
        CoreCompetencyCountCompetenciesInCourseRequest coreCompetencyCountCompetenciesInCourseRequest = null;
        Object response = api.coreCompetencyCountCompetenciesInCourse(coreCompetencyCountCompetenciesInCourseRequest);
        // TODO: test validations
    }

    /**
     * Count a list of a competencies for a given template.
     *
     * Count a list of a competencies for a given template.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCompetencyCountCompetenciesInTemplateTest() throws ApiException {
        CoreCompetencyCountCompetenciesInTemplateRequest coreCompetencyCountCompetenciesInTemplateRequest = null;
        Object response = api.coreCompetencyCountCompetenciesInTemplate(coreCompetencyCountCompetenciesInTemplateRequest);
        // TODO: test validations
    }

    /**
     * Count a list of a competency frameworks.
     *
     * Count a list of a competency frameworks.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCompetencyCountCompetencyFrameworksTest() throws ApiException {
        CoreCompetencyCountCompetencyFrameworksRequest coreCompetencyCountCompetencyFrameworksRequest = null;
        Object response = api.coreCompetencyCountCompetencyFrameworks(coreCompetencyCountCompetencyFrameworksRequest);
        // TODO: test validations
    }

    /**
     * Count the competencies in a course module
     *
     * Count the competencies in a course module
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCompetencyCountCourseModuleCompetenciesTest() throws ApiException {
        CoreCompetencyCountCourseModuleCompetenciesRequest coreCompetencyCountCourseModuleCompetenciesRequest = null;
        Object response = api.coreCompetencyCountCourseModuleCompetencies(coreCompetencyCountCourseModuleCompetenciesRequest);
        // TODO: test validations
    }

    /**
     * List the courses using a competency
     *
     * List the courses using a competency
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCompetencyCountCoursesUsingCompetencyTest() throws ApiException {
        CoreCompetencyCompetencyViewedRequest coreCompetencyCompetencyViewedRequest = null;
        Object response = api.coreCompetencyCountCoursesUsingCompetency(coreCompetencyCompetencyViewedRequest);
        // TODO: test validations
    }

    /**
     * Count a list of a learning plan templates.
     *
     * Count a list of a learning plan templates.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCompetencyCountTemplatesTest() throws ApiException {
        CoreCompetencyCountCompetencyFrameworksRequest coreCompetencyCountCompetencyFrameworksRequest = null;
        Object response = api.coreCompetencyCountTemplates(coreCompetencyCountCompetencyFrameworksRequest);
        // TODO: test validations
    }

    /**
     * Count a list of a learning plan templates for a given competency.
     *
     * Count a list of a learning plan templates for a given competency.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCompetencyCountTemplatesUsingCompetencyTest() throws ApiException {
        CoreCompetencyCompetencyViewedRequest coreCompetencyCompetencyViewedRequest = null;
        Object response = api.coreCompetencyCountTemplatesUsingCompetency(coreCompetencyCompetencyViewedRequest);
        // TODO: test validations
    }

    /**
     * Creates new competencies.
     *
     * Creates new competencies.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCompetencyCreateCompetencyTest() throws ApiException {
        CoreCompetencyCreateCompetencyRequest coreCompetencyCreateCompetencyRequest = null;
        CoreCompetencyCreateCompetency200Response response = api.coreCompetencyCreateCompetency(coreCompetencyCreateCompetencyRequest);
        // TODO: test validations
    }

    /**
     * Creates new competency frameworks.
     *
     * Creates new competency frameworks.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCompetencyCreateCompetencyFrameworkTest() throws ApiException {
        CoreCompetencyCreateCompetencyFrameworkRequest coreCompetencyCreateCompetencyFrameworkRequest = null;
        CoreCompetencyCreateCompetencyFramework200Response response = api.coreCompetencyCreateCompetencyFramework(coreCompetencyCreateCompetencyFrameworkRequest);
        // TODO: test validations
    }

    /**
     * Creates a learning plan.
     *
     * Creates a learning plan.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCompetencyCreatePlanTest() throws ApiException {
        CoreCompetencyCreatePlanRequest coreCompetencyCreatePlanRequest = null;
        CoreCompetencyCreatePlan200Response response = api.coreCompetencyCreatePlan(coreCompetencyCreatePlanRequest);
        // TODO: test validations
    }

    /**
     * Creates new learning plan templates.
     *
     * Creates new learning plan templates.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCompetencyCreateTemplateTest() throws ApiException {
        CoreCompetencyCreateTemplateRequest coreCompetencyCreateTemplateRequest = null;
        CoreCompetencyCreateTemplate200Response response = api.coreCompetencyCreateTemplate(coreCompetencyCreateTemplateRequest);
        // TODO: test validations
    }

    /**
     * Create an evidence of prior learning relationship with a competency.
     *
     * Create an evidence of prior learning relationship with a competency.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCompetencyCreateUserEvidenceCompetencyTest() throws ApiException {
        CoreCompetencyCreateUserEvidenceCompetencyRequest coreCompetencyCreateUserEvidenceCompetencyRequest = null;
        CoreCompetencyCreateUserEvidenceCompetency200Response response = api.coreCompetencyCreateUserEvidenceCompetency(coreCompetencyCreateUserEvidenceCompetencyRequest);
        // TODO: test validations
    }

    /**
     * Delete a competency.
     *
     * Delete a competency.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCompetencyDeleteCompetencyTest() throws ApiException {
        CoreCompetencyDeleteCompetencyRequest coreCompetencyDeleteCompetencyRequest = null;
        Object response = api.coreCompetencyDeleteCompetency(coreCompetencyDeleteCompetencyRequest);
        // TODO: test validations
    }

    /**
     * Delete a competency framework.
     *
     * Delete a competency framework.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCompetencyDeleteCompetencyFrameworkTest() throws ApiException {
        CoreCompetencyDeleteCompetencyFrameworkRequest coreCompetencyDeleteCompetencyFrameworkRequest = null;
        Object response = api.coreCompetencyDeleteCompetencyFramework(coreCompetencyDeleteCompetencyFrameworkRequest);
        // TODO: test validations
    }

    /**
     * Delete an evidence
     *
     * Delete an evidence
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCompetencyDeleteEvidenceTest() throws ApiException {
        CoreCompetencyDeleteEvidenceRequest coreCompetencyDeleteEvidenceRequest = null;
        Object response = api.coreCompetencyDeleteEvidence(coreCompetencyDeleteEvidenceRequest);
        // TODO: test validations
    }

    /**
     * Delete a learning plan.
     *
     * Delete a learning plan.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCompetencyDeletePlanTest() throws ApiException {
        CoreCompetencyDeletePlanRequest coreCompetencyDeletePlanRequest = null;
        Object response = api.coreCompetencyDeletePlan(coreCompetencyDeletePlanRequest);
        // TODO: test validations
    }

    /**
     * Delete a learning plan template.
     *
     * Delete a learning plan template.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCompetencyDeleteTemplateTest() throws ApiException {
        CoreCompetencyDeleteTemplateRequest coreCompetencyDeleteTemplateRequest = null;
        Object response = api.coreCompetencyDeleteTemplate(coreCompetencyDeleteTemplateRequest);
        // TODO: test validations
    }

    /**
     * Delete an evidence of prior learning.
     *
     * Delete an evidence of prior learning.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCompetencyDeleteUserEvidenceTest() throws ApiException {
        CoreCompetencyDeleteUserEvidenceRequest coreCompetencyDeleteUserEvidenceRequest = null;
        Object response = api.coreCompetencyDeleteUserEvidence(coreCompetencyDeleteUserEvidenceRequest);
        // TODO: test validations
    }

    /**
     * Delete an evidence of prior learning relationship with a competency.
     *
     * Delete an evidence of prior learning relationship with a competency.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCompetencyDeleteUserEvidenceCompetencyTest() throws ApiException {
        CoreCompetencyDeleteUserEvidenceCompetencyRequest coreCompetencyDeleteUserEvidenceCompetencyRequest = null;
        Object response = api.coreCompetencyDeleteUserEvidenceCompetency(coreCompetencyDeleteUserEvidenceCompetencyRequest);
        // TODO: test validations
    }

    /**
     * Duplicate a competency framework.
     *
     * Duplicate a competency framework.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCompetencyDuplicateCompetencyFrameworkTest() throws ApiException {
        CoreCompetencyDuplicateCompetencyFrameworkRequest coreCompetencyDuplicateCompetencyFrameworkRequest = null;
        CoreCompetencyDuplicateCompetencyFramework200Response response = api.coreCompetencyDuplicateCompetencyFramework(coreCompetencyDuplicateCompetencyFrameworkRequest);
        // TODO: test validations
    }

    /**
     * Duplicate learning plan template.
     *
     * Duplicate learning plan template.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCompetencyDuplicateTemplateTest() throws ApiException {
        CoreCompetencyCountCompetenciesInTemplateRequest coreCompetencyCountCompetenciesInTemplateRequest = null;
        CoreCompetencyCreateTemplate200Response response = api.coreCompetencyDuplicateTemplate(coreCompetencyCountCompetenciesInTemplateRequest);
        // TODO: test validations
    }

    /**
     * Fetch the values for a specific scale
     *
     * Fetch the values for a specific scale
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCompetencyGetScaleValuesTest() throws ApiException {
        CoreCompetencyGetScaleValuesRequest coreCompetencyGetScaleValuesRequest = null;
        Object response = api.coreCompetencyGetScaleValues(coreCompetencyGetScaleValuesRequest);
        // TODO: test validations
    }

    /**
     * Grade a competency.
     *
     * Grade a competency.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCompetencyGradeCompetencyTest() throws ApiException {
        CoreCompetencyGradeCompetencyRequest coreCompetencyGradeCompetencyRequest = null;
        CoreCompetencyGradeCompetency200Response response = api.coreCompetencyGradeCompetency(coreCompetencyGradeCompetencyRequest);
        // TODO: test validations
    }

    /**
     * Grade a competency from the course page.
     *
     * Grade a competency from the course page.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCompetencyGradeCompetencyInCourseTest() throws ApiException {
        CoreCompetencyGradeCompetencyInCourseRequest coreCompetencyGradeCompetencyInCourseRequest = null;
        CoreCompetencyGradeCompetencyInCourse200Response response = api.coreCompetencyGradeCompetencyInCourse(coreCompetencyGradeCompetencyInCourseRequest);
        // TODO: test validations
    }

    /**
     * Grade a competency from the user plan page.
     *
     * Grade a competency from the user plan page.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCompetencyGradeCompetencyInPlanTest() throws ApiException {
        CoreCompetencyGradeCompetencyInPlanRequest coreCompetencyGradeCompetencyInPlanRequest = null;
        CoreCompetencyGradeCompetencyInCourse200Response response = api.coreCompetencyGradeCompetencyInPlan(coreCompetencyGradeCompetencyInPlanRequest);
        // TODO: test validations
    }

    /**
     * Load a list of a competencies.
     *
     * Load a list of a competencies.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCompetencyListCompetenciesTest() throws ApiException {
        CoreCompetencyListCompetenciesRequest coreCompetencyListCompetenciesRequest = null;
        Object response = api.coreCompetencyListCompetencies(coreCompetencyListCompetenciesRequest);
        // TODO: test validations
    }

    /**
     * Load a list of a competencies for a given template.
     *
     * Load a list of a competencies for a given template.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCompetencyListCompetenciesInTemplateTest() throws ApiException {
        CoreCompetencyCountCompetenciesInTemplateRequest coreCompetencyCountCompetenciesInTemplateRequest = null;
        Object response = api.coreCompetencyListCompetenciesInTemplate(coreCompetencyCountCompetenciesInTemplateRequest);
        // TODO: test validations
    }

    /**
     * Load a list of a competency frameworks.
     *
     * Load a list of a competency frameworks.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCompetencyListCompetencyFrameworksTest() throws ApiException {
        CoreCompetencyListCompetencyFrameworksRequest coreCompetencyListCompetencyFrameworksRequest = null;
        Object response = api.coreCompetencyListCompetencyFrameworks(coreCompetencyListCompetencyFrameworksRequest);
        // TODO: test validations
    }

    /**
     * List the competencies in a course
     *
     * List the competencies in a course
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCompetencyListCourseCompetenciesTest() throws ApiException {
        CoreCompetencyCountCompetenciesInCourseRequest coreCompetencyCountCompetenciesInCourseRequest = null;
        Object response = api.coreCompetencyListCourseCompetencies(coreCompetencyCountCompetenciesInCourseRequest);
        // TODO: test validations
    }

    /**
     * List the competencies in a course module
     *
     * List the competencies in a course module
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCompetencyListCourseModuleCompetenciesTest() throws ApiException {
        CoreCompetencyListCourseModuleCompetenciesRequest coreCompetencyListCourseModuleCompetenciesRequest = null;
        Object response = api.coreCompetencyListCourseModuleCompetencies(coreCompetencyListCourseModuleCompetenciesRequest);
        // TODO: test validations
    }

    /**
     * List the competencies in a plan
     *
     * List the competencies in a plan
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCompetencyListPlanCompetenciesTest() throws ApiException {
        CoreCompetencyListPlanCompetenciesRequest coreCompetencyListPlanCompetenciesRequest = null;
        Object response = api.coreCompetencyListPlanCompetencies(coreCompetencyListPlanCompetenciesRequest);
        // TODO: test validations
    }

    /**
     * Load a list of a learning plan templates.
     *
     * Load a list of a learning plan templates.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCompetencyListTemplatesTest() throws ApiException {
        CoreCompetencyListTemplatesRequest coreCompetencyListTemplatesRequest = null;
        Object response = api.coreCompetencyListTemplates(coreCompetencyListTemplatesRequest);
        // TODO: test validations
    }

    /**
     * Load a list of a learning plan templates for a given competency.
     *
     * Load a list of a learning plan templates for a given competency.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCompetencyListTemplatesUsingCompetencyTest() throws ApiException {
        CoreCompetencyCompetencyViewedRequest coreCompetencyCompetencyViewedRequest = null;
        Object response = api.coreCompetencyListTemplatesUsingCompetency(coreCompetencyCompetencyViewedRequest);
        // TODO: test validations
    }

    /**
     * List a user&#39;s learning plans.
     *
     * List a user&#39;s learning plans.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCompetencyListUserPlansTest() throws ApiException {
        CoreCompetencyListUserPlansRequest coreCompetencyListUserPlansRequest = null;
        Object response = api.coreCompetencyListUserPlans(coreCompetencyListUserPlansRequest);
        // TODO: test validations
    }

    /**
     * Re-order a competency.
     *
     * Re-order a competency.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCompetencyMoveDownCompetencyTest() throws ApiException {
        CoreCompetencyCompetencyViewedRequest coreCompetencyCompetencyViewedRequest = null;
        Object response = api.coreCompetencyMoveDownCompetency(coreCompetencyCompetencyViewedRequest);
        // TODO: test validations
    }

    /**
     * Re-order a competency.
     *
     * Re-order a competency.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCompetencyMoveUpCompetencyTest() throws ApiException {
        CoreCompetencyCompetencyViewedRequest coreCompetencyCompetencyViewedRequest = null;
        Object response = api.coreCompetencyMoveUpCompetency(coreCompetencyCompetencyViewedRequest);
        // TODO: test validations
    }

    /**
     * Cancel the review of a plan.
     *
     * Cancel the review of a plan.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCompetencyPlanCancelReviewRequestTest() throws ApiException {
        CoreCompetencyPlanCancelReviewRequestRequest coreCompetencyPlanCancelReviewRequestRequest = null;
        Object response = api.coreCompetencyPlanCancelReviewRequest(coreCompetencyPlanCancelReviewRequestRequest);
        // TODO: test validations
    }

    /**
     * Request for a plan to be reviewed.
     *
     * Request for a plan to be reviewed.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCompetencyPlanRequestReviewTest() throws ApiException {
        CoreCompetencyPlanCancelReviewRequestRequest coreCompetencyPlanCancelReviewRequestRequest = null;
        Object response = api.coreCompetencyPlanRequestReview(coreCompetencyPlanCancelReviewRequestRequest);
        // TODO: test validations
    }

    /**
     * Start the review of a plan.
     *
     * Start the review of a plan.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCompetencyPlanStartReviewTest() throws ApiException {
        CoreCompetencyPlanCancelReviewRequestRequest coreCompetencyPlanCancelReviewRequestRequest = null;
        Object response = api.coreCompetencyPlanStartReview(coreCompetencyPlanCancelReviewRequestRequest);
        // TODO: test validations
    }

    /**
     * Stop the review of a plan.
     *
     * Stop the review of a plan.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCompetencyPlanStopReviewTest() throws ApiException {
        CoreCompetencyPlanCancelReviewRequestRequest coreCompetencyPlanCancelReviewRequestRequest = null;
        Object response = api.coreCompetencyPlanStopReview(coreCompetencyPlanCancelReviewRequestRequest);
        // TODO: test validations
    }

    /**
     * Load a summary of a competency.
     *
     * Load a summary of a competency.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCompetencyReadCompetencyTest() throws ApiException {
        CoreCompetencyReadCompetencyRequest coreCompetencyReadCompetencyRequest = null;
        CoreCompetencyCreateCompetency200Response response = api.coreCompetencyReadCompetency(coreCompetencyReadCompetencyRequest);
        // TODO: test validations
    }

    /**
     * Load a summary of a competency framework.
     *
     * Load a summary of a competency framework.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCompetencyReadCompetencyFrameworkTest() throws ApiException {
        CoreCompetencyDuplicateCompetencyFrameworkRequest coreCompetencyDuplicateCompetencyFrameworkRequest = null;
        CoreCompetencyDuplicateCompetencyFramework200Response response = api.coreCompetencyReadCompetencyFramework(coreCompetencyDuplicateCompetencyFrameworkRequest);
        // TODO: test validations
    }

    /**
     * Load a learning plan.
     *
     * Load a learning plan.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCompetencyReadPlanTest() throws ApiException {
        CoreCompetencyReadPlanRequest coreCompetencyReadPlanRequest = null;
        CoreCompetencyReadPlan200Response response = api.coreCompetencyReadPlan(coreCompetencyReadPlanRequest);
        // TODO: test validations
    }

    /**
     * Load a summary of a learning plan template.
     *
     * Load a summary of a learning plan template.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCompetencyReadTemplateTest() throws ApiException {
        CoreCompetencyReadTemplateRequest coreCompetencyReadTemplateRequest = null;
        CoreCompetencyCreateTemplate200Response response = api.coreCompetencyReadTemplate(coreCompetencyReadTemplateRequest);
        // TODO: test validations
    }

    /**
     * Read an evidence of prior learning.
     *
     * Read an evidence of prior learning.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCompetencyReadUserEvidenceTest() throws ApiException {
        CoreCompetencyDeleteUserEvidenceRequest coreCompetencyDeleteUserEvidenceRequest = null;
        CoreCompetencyReadUserEvidence200Response response = api.coreCompetencyReadUserEvidence(coreCompetencyDeleteUserEvidenceRequest);
        // TODO: test validations
    }

    /**
     * Remove a competency from a course
     *
     * Remove a competency from a course
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCompetencyRemoveCompetencyFromCourseTest() throws ApiException {
        CoreCompetencyRemoveCompetencyFromCourseRequest coreCompetencyRemoveCompetencyFromCourseRequest = null;
        Object response = api.coreCompetencyRemoveCompetencyFromCourse(coreCompetencyRemoveCompetencyFromCourseRequest);
        // TODO: test validations
    }

    /**
     * Remove the competency from a learning plan
     *
     * Remove the competency from a learning plan
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCompetencyRemoveCompetencyFromPlanTest() throws ApiException {
        CoreCompetencyRemoveCompetencyFromPlanRequest coreCompetencyRemoveCompetencyFromPlanRequest = null;
        Object response = api.coreCompetencyRemoveCompetencyFromPlan(coreCompetencyRemoveCompetencyFromPlanRequest);
        // TODO: test validations
    }

    /**
     * Remove a competency from a template
     *
     * Remove a competency from a template
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCompetencyRemoveCompetencyFromTemplateTest() throws ApiException {
        CoreCompetencyRemoveCompetencyFromTemplateRequest coreCompetencyRemoveCompetencyFromTemplateRequest = null;
        Object response = api.coreCompetencyRemoveCompetencyFromTemplate(coreCompetencyRemoveCompetencyFromTemplateRequest);
        // TODO: test validations
    }

    /**
     * Remove a related competency
     *
     * Remove a related competency
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCompetencyRemoveRelatedCompetencyTest() throws ApiException {
        CoreCompetencyRemoveRelatedCompetencyRequest coreCompetencyRemoveRelatedCompetencyRequest = null;
        Object response = api.coreCompetencyRemoveRelatedCompetency(coreCompetencyRemoveRelatedCompetencyRequest);
        // TODO: test validations
    }

    /**
     * Reopen learning plan.
     *
     * Reopen learning plan.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCompetencyReopenPlanTest() throws ApiException {
        CoreCompetencyCompletePlanRequest coreCompetencyCompletePlanRequest = null;
        Object response = api.coreCompetencyReopenPlan(coreCompetencyCompletePlanRequest);
        // TODO: test validations
    }

    /**
     * Move a course competency to a new relative sort order.
     *
     * Move a course competency to a new relative sort order.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCompetencyReorderCourseCompetencyTest() throws ApiException {
        CoreCompetencyReorderCourseCompetencyRequest coreCompetencyReorderCourseCompetencyRequest = null;
        Object response = api.coreCompetencyReorderCourseCompetency(coreCompetencyReorderCourseCompetencyRequest);
        // TODO: test validations
    }

    /**
     * Move a plan competency to a new relative sort order.
     *
     * Move a plan competency to a new relative sort order.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCompetencyReorderPlanCompetencyTest() throws ApiException {
        CoreCompetencyReorderPlanCompetencyRequest coreCompetencyReorderPlanCompetencyRequest = null;
        Object response = api.coreCompetencyReorderPlanCompetency(coreCompetencyReorderPlanCompetencyRequest);
        // TODO: test validations
    }

    /**
     * Move a template competency to a new relative sort order.
     *
     * Move a template competency to a new relative sort order.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCompetencyReorderTemplateCompetencyTest() throws ApiException {
        CoreCompetencyReorderTemplateCompetencyRequest coreCompetencyReorderTemplateCompetencyRequest = null;
        Object response = api.coreCompetencyReorderTemplateCompetency(coreCompetencyReorderTemplateCompetencyRequest);
        // TODO: test validations
    }

    /**
     * Send user evidence competencies in review
     *
     * Send user evidence competencies in review
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCompetencyRequestReviewOfUserEvidenceLinkedCompetenciesTest() throws ApiException {
        CoreCompetencyDeleteUserEvidenceRequest coreCompetencyDeleteUserEvidenceRequest = null;
        Object response = api.coreCompetencyRequestReviewOfUserEvidenceLinkedCompetencies(coreCompetencyDeleteUserEvidenceRequest);
        // TODO: test validations
    }

    /**
     * Search a list of a competencies.
     *
     * Search a list of a competencies.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCompetencySearchCompetenciesTest() throws ApiException {
        CoreCompetencySearchCompetenciesRequest coreCompetencySearchCompetenciesRequest = null;
        Object response = api.coreCompetencySearchCompetencies(coreCompetencySearchCompetenciesRequest);
        // TODO: test validations
    }

    /**
     * Modify the ruleoutcome value for course competency
     *
     * Modify the ruleoutcome value for course competency
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCompetencySetCourseCompetencyRuleoutcomeTest() throws ApiException {
        CoreCompetencySetCourseCompetencyRuleoutcomeRequest coreCompetencySetCourseCompetencyRuleoutcomeRequest = null;
        Object response = api.coreCompetencySetCourseCompetencyRuleoutcome(coreCompetencySetCourseCompetencyRuleoutcomeRequest);
        // TODO: test validations
    }

    /**
     * Set a new parent for a competency.
     *
     * Set a new parent for a competency.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCompetencySetParentCompetencyTest() throws ApiException {
        CoreCompetencySetParentCompetencyRequest coreCompetencySetParentCompetencyRequest = null;
        Object response = api.coreCompetencySetParentCompetency(coreCompetencySetParentCompetencyRequest);
        // TODO: test validations
    }

    /**
     * Check if a template has related data
     *
     * Check if a template has related data
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCompetencyTemplateHasRelatedDataTest() throws ApiException {
        CoreCompetencyCountCompetenciesInTemplateRequest coreCompetencyCountCompetenciesInTemplateRequest = null;
        Object response = api.coreCompetencyTemplateHasRelatedData(coreCompetencyCountCompetenciesInTemplateRequest);
        // TODO: test validations
    }

    /**
     * Log event template viewed
     *
     * Log event template viewed
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCompetencyTemplateViewedTest() throws ApiException {
        CoreCompetencyReadTemplateRequest coreCompetencyReadTemplateRequest = null;
        Object response = api.coreCompetencyTemplateViewed(coreCompetencyReadTemplateRequest);
        // TODO: test validations
    }

    /**
     * Unapprove a plan.
     *
     * Unapprove a plan.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCompetencyUnapprovePlanTest() throws ApiException {
        CoreCompetencyPlanCancelReviewRequestRequest coreCompetencyPlanCancelReviewRequestRequest = null;
        Object response = api.coreCompetencyUnapprovePlan(coreCompetencyPlanCancelReviewRequestRequest);
        // TODO: test validations
    }

    /**
     * Unlink a plan form it template.
     *
     * Unlink a plan form it template.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCompetencyUnlinkPlanFromTemplateTest() throws ApiException {
        CoreCompetencyUnlinkPlanFromTemplateRequest coreCompetencyUnlinkPlanFromTemplateRequest = null;
        Object response = api.coreCompetencyUnlinkPlanFromTemplate(coreCompetencyUnlinkPlanFromTemplateRequest);
        // TODO: test validations
    }

    /**
     * Update a competency.
     *
     * Update a competency.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCompetencyUpdateCompetencyTest() throws ApiException {
        CoreCompetencyUpdateCompetencyRequest coreCompetencyUpdateCompetencyRequest = null;
        Object response = api.coreCompetencyUpdateCompetency(coreCompetencyUpdateCompetencyRequest);
        // TODO: test validations
    }

    /**
     * Update a competency framework.
     *
     * Update a competency framework.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCompetencyUpdateCompetencyFrameworkTest() throws ApiException {
        CoreCompetencyUpdateCompetencyFrameworkRequest coreCompetencyUpdateCompetencyFrameworkRequest = null;
        Object response = api.coreCompetencyUpdateCompetencyFramework(coreCompetencyUpdateCompetencyFrameworkRequest);
        // TODO: test validations
    }

    /**
     * Update the course competency settings
     *
     * Update the course competency settings
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCompetencyUpdateCourseCompetencySettingsTest() throws ApiException {
        CoreCompetencyUpdateCourseCompetencySettingsRequest coreCompetencyUpdateCourseCompetencySettingsRequest = null;
        Object response = api.coreCompetencyUpdateCourseCompetencySettings(coreCompetencyUpdateCourseCompetencySettingsRequest);
        // TODO: test validations
    }

    /**
     * Updates a learning plan.
     *
     * Updates a learning plan.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCompetencyUpdatePlanTest() throws ApiException {
        CoreCompetencyUpdatePlanRequest coreCompetencyUpdatePlanRequest = null;
        CoreCompetencyReadPlan200Response response = api.coreCompetencyUpdatePlan(coreCompetencyUpdatePlanRequest);
        // TODO: test validations
    }

    /**
     * Update a learning plan template.
     *
     * Update a learning plan template.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCompetencyUpdateTemplateTest() throws ApiException {
        CoreCompetencyUpdateTemplateRequest coreCompetencyUpdateTemplateRequest = null;
        Object response = api.coreCompetencyUpdateTemplate(coreCompetencyUpdateTemplateRequest);
        // TODO: test validations
    }

    /**
     * Cancel a review request.
     *
     * Cancel a review request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCompetencyUserCompetencyCancelReviewRequestTest() throws ApiException {
        CoreCompetencyUserCompetencyCancelReviewRequestRequest coreCompetencyUserCompetencyCancelReviewRequestRequest = null;
        Object response = api.coreCompetencyUserCompetencyCancelReviewRequest(coreCompetencyUserCompetencyCancelReviewRequestRequest);
        // TODO: test validations
    }

    /**
     * Log the user competency plan viewed event.
     *
     * Log the user competency plan viewed event.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCompetencyUserCompetencyPlanViewedTest() throws ApiException {
        CoreCompetencyUserCompetencyPlanViewedRequest coreCompetencyUserCompetencyPlanViewedRequest = null;
        Object response = api.coreCompetencyUserCompetencyPlanViewed(coreCompetencyUserCompetencyPlanViewedRequest);
        // TODO: test validations
    }

    /**
     * Request a review.
     *
     * Request a review.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCompetencyUserCompetencyRequestReviewTest() throws ApiException {
        CoreCompetencyUserCompetencyRequestReviewRequest coreCompetencyUserCompetencyRequestReviewRequest = null;
        Object response = api.coreCompetencyUserCompetencyRequestReview(coreCompetencyUserCompetencyRequestReviewRequest);
        // TODO: test validations
    }

    /**
     * Start a review.
     *
     * Start a review.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCompetencyUserCompetencyStartReviewTest() throws ApiException {
        CoreCompetencyUserCompetencyRequestReviewRequest coreCompetencyUserCompetencyRequestReviewRequest = null;
        Object response = api.coreCompetencyUserCompetencyStartReview(coreCompetencyUserCompetencyRequestReviewRequest);
        // TODO: test validations
    }

    /**
     * Stop a review.
     *
     * Stop a review.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCompetencyUserCompetencyStopReviewTest() throws ApiException {
        CoreCompetencyUserCompetencyRequestReviewRequest coreCompetencyUserCompetencyRequestReviewRequest = null;
        Object response = api.coreCompetencyUserCompetencyStopReview(coreCompetencyUserCompetencyRequestReviewRequest);
        // TODO: test validations
    }

    /**
     * Log the user competency viewed event.
     *
     * Log the user competency viewed event.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCompetencyUserCompetencyViewedTest() throws ApiException {
        CoreCompetencyUserCompetencyViewedRequest coreCompetencyUserCompetencyViewedRequest = null;
        Object response = api.coreCompetencyUserCompetencyViewed(coreCompetencyUserCompetencyViewedRequest);
        // TODO: test validations
    }

    /**
     * Log the user competency viewed in course event
     *
     * Log the user competency viewed in course event
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCompetencyUserCompetencyViewedInCourseTest() throws ApiException {
        CoreCompetencyUserCompetencyViewedInCourseRequest coreCompetencyUserCompetencyViewedInCourseRequest = null;
        Object response = api.coreCompetencyUserCompetencyViewedInCourse(coreCompetencyUserCompetencyViewedInCourseRequest);
        // TODO: test validations
    }

    /**
     * Log the user competency viewed in plan event.
     *
     * Log the user competency viewed in plan event.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCompetencyUserCompetencyViewedInPlanTest() throws ApiException {
        CoreCompetencyUserCompetencyPlanViewedRequest coreCompetencyUserCompetencyPlanViewedRequest = null;
        Object response = api.coreCompetencyUserCompetencyViewedInPlan(coreCompetencyUserCompetencyPlanViewedRequest);
        // TODO: test validations
    }

    /**
     * Return the activities completion status for a user in a course.
     *
     * Return the activities completion status for a user in a course.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCompletionGetActivitiesCompletionStatusTest() throws ApiException {
        CoreCompletionGetActivitiesCompletionStatusRequest coreCompletionGetActivitiesCompletionStatusRequest = null;
        CoreCompletionGetActivitiesCompletionStatus200Response response = api.coreCompletionGetActivitiesCompletionStatus(coreCompletionGetActivitiesCompletionStatusRequest);
        // TODO: test validations
    }

    /**
     * Returns course completion status.
     *
     * Returns course completion status.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCompletionGetCourseCompletionStatusTest() throws ApiException {
        CoreCompletionGetActivitiesCompletionStatusRequest coreCompletionGetActivitiesCompletionStatusRequest = null;
        CoreCompletionGetCourseCompletionStatus200Response response = api.coreCompletionGetCourseCompletionStatus(coreCompletionGetActivitiesCompletionStatusRequest);
        // TODO: test validations
    }

    /**
     * Update the course completion status for the current user (if course self-completion is enabled).
     *
     * Update the course completion status for the current user (if course self-completion is enabled).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCompletionMarkCourseSelfCompletedTest() throws ApiException {
        CoreCompletionMarkCourseSelfCompletedRequest coreCompletionMarkCourseSelfCompletedRequest = null;
        CoreCompletionMarkCourseSelfCompleted200Response response = api.coreCompletionMarkCourseSelfCompleted(coreCompletionMarkCourseSelfCompletedRequest);
        // TODO: test validations
    }

    /**
     * Update completion status for a user in an activity by overriding it.
     *
     * Update completion status for a user in an activity by overriding it.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCompletionOverrideActivityCompletionStatusTest() throws ApiException {
        CoreCompletionOverrideActivityCompletionStatusRequest coreCompletionOverrideActivityCompletionStatusRequest = null;
        CoreCompletionOverrideActivityCompletionStatus200Response response = api.coreCompletionOverrideActivityCompletionStatus(coreCompletionOverrideActivityCompletionStatusRequest);
        // TODO: test validations
    }

    /**
     * Update completion status for the current user in an activity, only for activities with manual tracking.
     *
     * Update completion status for the current user in an activity, only for activities with manual tracking.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCompletionUpdateActivityCompletionStatusManuallyTest() throws ApiException {
        CoreCompletionUpdateActivityCompletionStatusManuallyRequest coreCompletionUpdateActivityCompletionStatusManuallyRequest = null;
        CoreCompletionUpdateActivityCompletionStatusManually200Response response = api.coreCompletionUpdateActivityCompletionStatusManually(coreCompletionUpdateActivityCompletionStatusManuallyRequest);
        // TODO: test validations
    }

    /**
     * Copy a content in the content bank.
     *
     * Copy a content in the content bank.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreContentbankCopyContentTest() throws ApiException {
        CoreContentbankCopyContentRequest coreContentbankCopyContentRequest = null;
        CoreContentbankCopyContent200Response response = api.coreContentbankCopyContent(coreContentbankCopyContentRequest);
        // TODO: test validations
    }

    /**
     * Delete a content from the content bank.
     *
     * Delete a content from the content bank.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreContentbankDeleteContentTest() throws ApiException {
        CoreContentbankDeleteContentRequest coreContentbankDeleteContentRequest = null;
        CoreContentbankDeleteContent200Response response = api.coreContentbankDeleteContent(coreContentbankDeleteContentRequest);
        // TODO: test validations
    }

    /**
     * Rename a content in the content bank.
     *
     * Rename a content in the content bank.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreContentbankRenameContentTest() throws ApiException {
        CoreContentbankRenameContentRequest coreContentbankRenameContentRequest = null;
        CoreContentbankRenameContent200Response response = api.coreContentbankRenameContent(coreContentbankRenameContentRequest);
        // TODO: test validations
    }

    /**
     * Set the visibility of a content in the content bank.
     *
     * Set the visibility of a content in the content bank.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreContentbankSetContentVisibilityTest() throws ApiException {
        CoreContentbankSetContentVisibilityRequest coreContentbankSetContentVisibilityRequest = null;
        CoreContentbankRenameContent200Response response = api.coreContentbankSetContentVisibility(coreContentbankSetContentVisibilityRequest);
        // TODO: test validations
    }

    /**
     * Adds a content item (activity, resource or their subtypes) to the favourites for the user.
     *
     * Adds a content item (activity, resource or their subtypes) to the favourites for the user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCourseAddContentItemToUserFavouritesTest() throws ApiException {
        CoreCourseAddContentItemToUserFavouritesRequest coreCourseAddContentItemToUserFavouritesRequest = null;
        CoreCourseAddContentItemToUserFavourites200Response response = api.coreCourseAddContentItemToUserFavourites(coreCourseAddContentItemToUserFavouritesRequest);
        // TODO: test validations
    }

    /**
     * Check if there is updates affecting the user for the given course and contexts.
     *
     * Check if there is updates affecting the user for the given course and contexts.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCourseCheckUpdatesTest() throws ApiException {
        CoreCourseCheckUpdatesRequest coreCourseCheckUpdatesRequest = null;
        CoreCourseCheckUpdates200Response response = api.coreCourseCheckUpdates(coreCourseCheckUpdatesRequest);
        // TODO: test validations
    }

    /**
     * Create course categories
     *
     * Create course categories
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCourseCreateCategoriesTest() throws ApiException {
        CoreCourseCreateCategoriesRequest coreCourseCreateCategoriesRequest = null;
        Object response = api.coreCourseCreateCategories(coreCourseCreateCategoriesRequest);
        // TODO: test validations
    }

    /**
     * Create new courses
     *
     * Create new courses
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCourseCreateCoursesTest() throws ApiException {
        CoreCourseCreateCoursesRequest coreCourseCreateCoursesRequest = null;
        Object response = api.coreCourseCreateCourses(coreCourseCreateCoursesRequest);
        // TODO: test validations
    }

    /**
     * Delete course categories
     *
     * Delete course categories
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCourseDeleteCategoriesTest() throws ApiException {
        CoreCourseDeleteCategoriesRequest coreCourseDeleteCategoriesRequest = null;
        Object response = api.coreCourseDeleteCategories(coreCourseDeleteCategoriesRequest);
        // TODO: test validations
    }

    /**
     * Deletes all specified courses
     *
     * Deletes all specified courses
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCourseDeleteCoursesTest() throws ApiException {
        CoreCourseDeleteCoursesRequest coreCourseDeleteCoursesRequest = null;
        CoreCohortAddCohortMembers200Response response = api.coreCourseDeleteCourses(coreCourseDeleteCoursesRequest);
        // TODO: test validations
    }

    /**
     * Deletes all specified module instances
     *
     * Deletes all specified module instances
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCourseDeleteModulesTest() throws ApiException {
        CoreCourseDeleteModulesRequest coreCourseDeleteModulesRequest = null;
        Object response = api.coreCourseDeleteModules(coreCourseDeleteModulesRequest);
        // TODO: test validations
    }

    /**
     * Duplicate an existing course (creating a new one).
     *
     * Duplicate an existing course (creating a new one).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCourseDuplicateCourseTest() throws ApiException {
        CoreCourseDuplicateCourseRequest coreCourseDuplicateCourseRequest = null;
        CoreCourseDuplicateCourse200Response response = api.coreCourseDuplicateCourse(coreCourseDuplicateCourseRequest);
        // TODO: test validations
    }

    /**
     * Performs an action on course module (change visibility, duplicate, delete, etc.)
     *
     * Performs an action on course module (change visibility, duplicate, delete, etc.)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCourseEditModuleTest() throws ApiException {
        CoreCourseEditModuleRequest coreCourseEditModuleRequest = null;
        Object response = api.coreCourseEditModule(coreCourseEditModuleRequest);
        // TODO: test validations
    }

    /**
     * Performs an action on course section (change visibility, set marker, delete)
     *
     * Performs an action on course section (change visibility, set marker, delete)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCourseEditSectionTest() throws ApiException {
        CoreCourseEditSectionRequest coreCourseEditSectionRequest = null;
        Object response = api.coreCourseEditSection(coreCourseEditSectionRequest);
        // TODO: test validations
    }

    /**
     * Fetch the data for the activity chooser footer.
     *
     * Fetch the data for the activity chooser footer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCourseGetActivityChooserFooterTest() throws ApiException {
        CoreCourseGetActivityChooserFooterRequest coreCourseGetActivityChooserFooterRequest = null;
        CoreCourseGetActivityChooserFooter200Response response = api.coreCourseGetActivityChooserFooter(coreCourseGetActivityChooserFooterRequest);
        // TODO: test validations
    }

    /**
     * Return category details
     *
     * Return category details
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCourseGetCategoriesTest() throws ApiException {
        CoreCourseGetCategoriesRequest coreCourseGetCategoriesRequest = null;
        Object response = api.coreCourseGetCategories(coreCourseGetCategoriesRequest);
        // TODO: test validations
    }

    /**
     * Get course contents
     *
     * Get course contents
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCourseGetContentsTest() throws ApiException {
        CoreCourseGetContentsRequest coreCourseGetContentsRequest = null;
        Object response = api.coreCourseGetContents(coreCourseGetContentsRequest);
        // TODO: test validations
    }

    /**
     * Fetch all the content items (activities, resources and their subtypes) for the activity picker
     *
     * Fetch all the content items (activities, resources and their subtypes) for the activity picker
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCourseGetCourseContentItemsTest() throws ApiException {
        CoreCourseGetCourseContentItemsRequest coreCourseGetCourseContentItemsRequest = null;
        CoreCourseGetCourseContentItems200Response response = api.coreCourseGetCourseContentItems(coreCourseGetCourseContentItemsRequest);
        // TODO: test validations
    }

    /**
     * Return information about a course module
     *
     * Return information about a course module
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCourseGetCourseModuleTest() throws ApiException {
        CoreCompetencyListCourseModuleCompetenciesRequest coreCompetencyListCourseModuleCompetenciesRequest = null;
        CoreCourseGetCourseModule200Response response = api.coreCourseGetCourseModule(coreCompetencyListCourseModuleCompetenciesRequest);
        // TODO: test validations
    }

    /**
     * Return information about a given module name and instance id
     *
     * Return information about a given module name and instance id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCourseGetCourseModuleByInstanceTest() throws ApiException {
        CoreCourseGetCourseModuleByInstanceRequest coreCourseGetCourseModuleByInstanceRequest = null;
        CoreCourseGetCourseModuleByInstance200Response response = api.coreCourseGetCourseModuleByInstance(coreCourseGetCourseModuleByInstanceRequest);
        // TODO: test validations
    }

    /**
     * Return course details
     *
     * Return course details
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCourseGetCoursesTest() throws ApiException {
        CoreCourseGetCoursesRequest coreCourseGetCoursesRequest = null;
        Object response = api.coreCourseGetCourses(coreCourseGetCoursesRequest);
        // TODO: test validations
    }

    /**
     * Get courses matching a specific field (id/s, shortname, idnumber, category)
     *
     * Get courses matching a specific field (id/s, shortname, idnumber, category)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCourseGetCoursesByFieldTest() throws ApiException {
        CoreCourseGetCoursesByFieldRequest coreCourseGetCoursesByFieldRequest = null;
        CoreCourseGetCoursesByField200Response response = api.coreCourseGetCoursesByField(coreCourseGetCoursesByFieldRequest);
        // TODO: test validations
    }

    /**
     * List of enrolled courses for the given timeline classification (past, inprogress, or future).
     *
     * List of enrolled courses for the given timeline classification (past, inprogress, or future).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCourseGetEnrolledCoursesByTimelineClassificationTest() throws ApiException {
        CoreCourseGetEnrolledCoursesByTimelineClassificationRequest coreCourseGetEnrolledCoursesByTimelineClassificationRequest = null;
        CoreCourseGetEnrolledCoursesByTimelineClassification200Response response = api.coreCourseGetEnrolledCoursesByTimelineClassification(coreCourseGetEnrolledCoursesByTimelineClassificationRequest);
        // TODO: test validations
    }

    /**
     * List of enrolled courses with action events in a given timeframe, for the given timeline classification.
     *
     * List of enrolled courses with action events in a given timeframe, for the given timeline classification.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCourseGetEnrolledCoursesWithActionEventsByTimelineClassificationTest() throws ApiException {
        CoreCourseGetEnrolledCoursesWithActionEventsByTimelineClassificationRequest coreCourseGetEnrolledCoursesWithActionEventsByTimelineClassificationRequest = null;
        CoreCourseGetEnrolledCoursesWithActionEventsByTimelineClassification200Response response = api.coreCourseGetEnrolledCoursesWithActionEventsByTimelineClassification(coreCourseGetEnrolledCoursesWithActionEventsByTimelineClassificationRequest);
        // TODO: test validations
    }

    /**
     * List users by course module id, filter by group and active enrolment status.
     *
     * List users by course module id, filter by group and active enrolment status.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCourseGetEnrolledUsersByCmidTest() throws ApiException {
        CoreCourseGetEnrolledUsersByCmidRequest coreCourseGetEnrolledUsersByCmidRequest = null;
        CoreCourseGetEnrolledUsersByCmid200Response response = api.coreCourseGetEnrolledUsersByCmid(coreCourseGetEnrolledUsersByCmidRequest);
        // TODO: test validations
    }

    /**
     * Returns html with one activity module on course page
     *
     * Returns html with one activity module on course page
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCourseGetModuleTest() throws ApiException {
        CoreCourseGetModuleRequest coreCourseGetModuleRequest = null;
        Object response = api.coreCourseGetModule(coreCourseGetModuleRequest);
        // TODO: test validations
    }

    /**
     * List of courses a user has accessed most recently.
     *
     * List of courses a user has accessed most recently.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCourseGetRecentCoursesTest() throws ApiException {
        CoreCourseGetRecentCoursesRequest coreCourseGetRecentCoursesRequest = null;
        Object response = api.coreCourseGetRecentCourses(coreCourseGetRecentCoursesRequest);
        // TODO: test validations
    }

    /**
     * Check if there are updates affecting the user for the given course since the given time stamp.
     *
     * Check if there are updates affecting the user for the given course since the given time stamp.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCourseGetUpdatesSinceTest() throws ApiException {
        CoreCourseGetUpdatesSinceRequest coreCourseGetUpdatesSinceRequest = null;
        CoreCourseGetUpdatesSince200Response response = api.coreCourseGetUpdatesSince(coreCourseGetUpdatesSinceRequest);
        // TODO: test validations
    }

    /**
     * Return a list of administration options in a set of courses that are avaialable or not for the current                             user.
     *
     * Return a list of administration options in a set of courses that are avaialable or not for the current                             user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCourseGetUserAdministrationOptionsTest() throws ApiException {
        CoreCourseGetUserAdministrationOptionsRequest coreCourseGetUserAdministrationOptionsRequest = null;
        CoreCourseGetUserAdministrationOptions200Response response = api.coreCourseGetUserAdministrationOptions(coreCourseGetUserAdministrationOptionsRequest);
        // TODO: test validations
    }

    /**
     * Return a list of navigation options in a set of courses that are avaialable or not for the current user.
     *
     * Return a list of navigation options in a set of courses that are avaialable or not for the current user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCourseGetUserNavigationOptionsTest() throws ApiException {
        CoreCourseGetUserNavigationOptionsRequest coreCourseGetUserNavigationOptionsRequest = null;
        CoreCourseGetUserNavigationOptions200Response response = api.coreCourseGetUserNavigationOptions(coreCourseGetUserNavigationOptionsRequest);
        // TODO: test validations
    }

    /**
     * Import course data from a course into another course. Does not include any user data.
     *
     * Import course data from a course into another course. Does not include any user data.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCourseImportCourseTest() throws ApiException {
        CoreCourseImportCourseRequest coreCourseImportCourseRequest = null;
        Object response = api.coreCourseImportCourse(coreCourseImportCourseRequest);
        // TODO: test validations
    }

    /**
     * Removes a content item (activity, resource or their subtypes) from the favourites for the user.
     *
     * Removes a content item (activity, resource or their subtypes) from the favourites for the user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCourseRemoveContentItemFromUserFavouritesTest() throws ApiException {
        CoreCourseRemoveContentItemFromUserFavouritesRequest coreCourseRemoveContentItemFromUserFavouritesRequest = null;
        CoreCourseAddContentItemToUserFavourites200Response response = api.coreCourseRemoveContentItemFromUserFavourites(coreCourseRemoveContentItemFromUserFavouritesRequest);
        // TODO: test validations
    }

    /**
     * Search courses by (name, module, block, tag)
     *
     * Search courses by (name, module, block, tag)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCourseSearchCoursesTest() throws ApiException {
        CoreCourseSearchCoursesRequest coreCourseSearchCoursesRequest = null;
        CoreCourseSearchCourses200Response response = api.coreCourseSearchCourses(coreCourseSearchCoursesRequest);
        // TODO: test validations
    }

    /**
     * Add a list of courses to the list of favourite courses.
     *
     * Add a list of courses to the list of favourite courses.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCourseSetFavouriteCoursesTest() throws ApiException {
        CoreCourseSetFavouriteCoursesRequest coreCourseSetFavouriteCoursesRequest = null;
        CoreCohortAddCohortMembers200Response response = api.coreCourseSetFavouriteCourses(coreCourseSetFavouriteCoursesRequest);
        // TODO: test validations
    }

    /**
     * Adds or removes an activity as a recommendation in the activity chooser.
     *
     * Adds or removes an activity as a recommendation in the activity chooser.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCourseToggleActivityRecommendationTest() throws ApiException {
        CoreCourseToggleActivityRecommendationRequest coreCourseToggleActivityRecommendationRequest = null;
        CoreCourseToggleActivityRecommendation200Response response = api.coreCourseToggleActivityRecommendation(coreCourseToggleActivityRecommendationRequest);
        // TODO: test validations
    }

    /**
     * Update categories
     *
     * Update categories
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCourseUpdateCategoriesTest() throws ApiException {
        CoreCourseUpdateCategoriesRequest coreCourseUpdateCategoriesRequest = null;
        Object response = api.coreCourseUpdateCategories(coreCourseUpdateCategoriesRequest);
        // TODO: test validations
    }

    /**
     * Update courses
     *
     * Update courses
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCourseUpdateCoursesTest() throws ApiException {
        CoreCourseUpdateCoursesRequest coreCourseUpdateCoursesRequest = null;
        CoreCohortAddCohortMembers200Response response = api.coreCourseUpdateCourses(coreCourseUpdateCoursesRequest);
        // TODO: test validations
    }

    /**
     * Log that the course was viewed
     *
     * Log that the course was viewed
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCourseViewCourseTest() throws ApiException {
        CoreCourseViewCourseRequest coreCourseViewCourseRequest = null;
        CoreCalendarDeleteSubscription200Response response = api.coreCourseViewCourse(coreCourseViewCourseRequest);
        // TODO: test validations
    }

    /**
     * Get the current course file hanlders.
     *
     * Get the current course file hanlders.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCourseformatFileHandlersTest() throws ApiException {
        CoreCourseformatFileHandlersRequest coreCourseformatFileHandlersRequest = null;
        Object response = api.coreCourseformatFileHandlers(coreCourseformatFileHandlersRequest);
        // TODO: test validations
    }

    /**
     * Get the current course state.
     *
     * Get the current course state.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCourseformatGetStateTest() throws ApiException {
        CoreCourseformatFileHandlersRequest coreCourseformatFileHandlersRequest = null;
        Object response = api.coreCourseformatGetState(coreCourseformatFileHandlersRequest);
        // TODO: test validations
    }

    /**
     * Update course contents.
     *
     * Update course contents.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCourseformatUpdateCourseTest() throws ApiException {
        CoreCourseformatUpdateCourseRequest coreCourseformatUpdateCourseRequest = null;
        Object response = api.coreCourseformatUpdateCourse(coreCourseformatUpdateCourseRequest);
        // TODO: test validations
    }

    /**
     * Record the action that the user takes in the user feedback notification for future use.
     *
     * Record the action that the user takes in the user feedback notification for future use.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCreateUserfeedbackActionRecordTest() throws ApiException {
        CoreCreateUserfeedbackActionRecordRequest coreCreateUserfeedbackActionRecordRequest = null;
        Object response = api.coreCreateUserfeedbackActionRecord(coreCreateUserfeedbackActionRecordRequest);
        // TODO: test validations
    }

    /**
     * Creates a new category
     *
     * Creates a new category
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCustomfieldCreateCategoryTest() throws ApiException {
        CoreCustomfieldCreateCategoryRequest coreCustomfieldCreateCategoryRequest = null;
        Object response = api.coreCustomfieldCreateCategory(coreCustomfieldCreateCategoryRequest);
        // TODO: test validations
    }

    /**
     * Deletes a category
     *
     * Deletes a category
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCustomfieldDeleteCategoryTest() throws ApiException {
        CoreCustomfieldDeleteCategoryRequest coreCustomfieldDeleteCategoryRequest = null;
        Object response = api.coreCustomfieldDeleteCategory(coreCustomfieldDeleteCategoryRequest);
        // TODO: test validations
    }

    /**
     * Deletes an entry
     *
     * Deletes an entry
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCustomfieldDeleteFieldTest() throws ApiException {
        CoreCustomfieldDeleteFieldRequest coreCustomfieldDeleteFieldRequest = null;
        Object response = api.coreCustomfieldDeleteField(coreCustomfieldDeleteFieldRequest);
        // TODO: test validations
    }

    /**
     * Drag and drop categories
     *
     * Drag and drop categories
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCustomfieldMoveCategoryTest() throws ApiException {
        CoreCustomfieldMoveCategoryRequest coreCustomfieldMoveCategoryRequest = null;
        Object response = api.coreCustomfieldMoveCategory(coreCustomfieldMoveCategoryRequest);
        // TODO: test validations
    }

    /**
     * Drag and drop
     *
     * Drag and drop
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCustomfieldMoveFieldTest() throws ApiException {
        CoreCustomfieldMoveFieldRequest coreCustomfieldMoveFieldRequest = null;
        Object response = api.coreCustomfieldMoveField(coreCustomfieldMoveFieldRequest);
        // TODO: test validations
    }

    /**
     * Reloads template
     *
     * Reloads template
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreCustomfieldReloadTemplateTest() throws ApiException {
        CoreCustomfieldReloadTemplateRequest coreCustomfieldReloadTemplateRequest = null;
        CoreCustomfieldReloadTemplate200Response response = api.coreCustomfieldReloadTemplate(coreCustomfieldReloadTemplateRequest);
        // TODO: test validations
    }

    /**
     * Returns the content for a dynamic tab
     *
     * Returns the content for a dynamic tab
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreDynamicTabsGetContentTest() throws ApiException {
        CoreDynamicTabsGetContentRequest coreDynamicTabsGetContentRequest = null;
        CoreDynamicTabsGetContent200Response response = api.coreDynamicTabsGetContent(coreDynamicTabsGetContentRequest);
        // TODO: test validations
    }

    /**
     * Get the list of course enrolment methods
     *
     * Get the list of course enrolment methods
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreEnrolGetCourseEnrolmentMethodsTest() throws ApiException {
        CoreEnrolGetCourseEnrolmentMethodsRequest coreEnrolGetCourseEnrolmentMethodsRequest = null;
        Object response = api.coreEnrolGetCourseEnrolmentMethods(coreEnrolGetCourseEnrolmentMethodsRequest);
        // TODO: test validations
    }

    /**
     * Get enrolled users by course id.
     *
     * Get enrolled users by course id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreEnrolGetEnrolledUsersTest() throws ApiException {
        CoreEnrolGetEnrolledUsersRequest coreEnrolGetEnrolledUsersRequest = null;
        Object response = api.coreEnrolGetEnrolledUsers(coreEnrolGetEnrolledUsersRequest);
        // TODO: test validations
    }

    /**
     * For each course and capability specified, return a list of the users that are enrolled in the course                                   and have that capability
     *
     * For each course and capability specified, return a list of the users that are enrolled in the course                                   and have that capability
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreEnrolGetEnrolledUsersWithCapabilityTest() throws ApiException {
        CoreEnrolGetEnrolledUsersWithCapabilityRequest coreEnrolGetEnrolledUsersWithCapabilityRequest = null;
        Object response = api.coreEnrolGetEnrolledUsersWithCapability(coreEnrolGetEnrolledUsersWithCapabilityRequest);
        // TODO: test validations
    }

    /**
     * Get the list of potential users to enrol
     *
     * Get the list of potential users to enrol
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreEnrolGetPotentialUsersTest() throws ApiException {
        CoreEnrolGetPotentialUsersRequest coreEnrolGetPotentialUsersRequest = null;
        Object response = api.coreEnrolGetPotentialUsers(coreEnrolGetPotentialUsersRequest);
        // TODO: test validations
    }

    /**
     * Get the list of courses where a user is enrolled in
     *
     * Get the list of courses where a user is enrolled in
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreEnrolGetUsersCoursesTest() throws ApiException {
        CoreEnrolGetUsersCoursesRequest coreEnrolGetUsersCoursesRequest = null;
        Object response = api.coreEnrolGetUsersCourses(coreEnrolGetUsersCoursesRequest);
        // TODO: test validations
    }

    /**
     * Search within the list of course participants
     *
     * Search within the list of course participants
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreEnrolSearchUsersTest() throws ApiException {
        CoreEnrolSearchUsersRequest coreEnrolSearchUsersRequest = null;
        Object response = api.coreEnrolSearchUsers(coreEnrolSearchUsersRequest);
        // TODO: test validations
    }

    /**
     * Submit form data for enrolment form
     *
     * Submit form data for enrolment form
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreEnrolSubmitUserEnrolmentFormTest() throws ApiException {
        CoreEnrolSubmitUserEnrolmentFormRequest coreEnrolSubmitUserEnrolmentFormRequest = null;
        CoreEnrolSubmitUserEnrolmentForm200Response response = api.coreEnrolSubmitUserEnrolmentForm(coreEnrolSubmitUserEnrolmentFormRequest);
        // TODO: test validations
    }

    /**
     * External function that unenrols a given user enrolment
     *
     * External function that unenrols a given user enrolment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreEnrolUnenrolUserEnrolmentTest() throws ApiException {
        CoreEnrolUnenrolUserEnrolmentRequest coreEnrolUnenrolUserEnrolmentRequest = null;
        CoreEnrolUnenrolUserEnrolment200Response response = api.coreEnrolUnenrolUserEnrolment(coreEnrolUnenrolUserEnrolmentRequest);
        // TODO: test validations
    }

    /**
     * Return a list of notifications for the current session
     *
     * Return a list of notifications for the current session
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreFetchNotificationsTest() throws ApiException {
        CoreFetchNotificationsRequest coreFetchNotificationsRequest = null;
        Object response = api.coreFetchNotifications(coreFetchNotificationsRequest);
        // TODO: test validations
    }

    /**
     * Delete the indicated files (or directories) from a user draft file area.
     *
     * Delete the indicated files (or directories) from a user draft file area.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreFilesDeleteDraftFilesTest() throws ApiException {
        CoreFilesDeleteDraftFilesRequest coreFilesDeleteDraftFilesRequest = null;
        CoreFilesDeleteDraftFiles200Response response = api.coreFilesDeleteDraftFiles(coreFilesDeleteDraftFilesRequest);
        // TODO: test validations
    }

    /**
     * browse moodle files
     *
     * browse moodle files
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreFilesGetFilesTest() throws ApiException {
        CoreFilesGetFilesRequest coreFilesGetFilesRequest = null;
        CoreFilesGetFiles200Response response = api.coreFilesGetFiles(coreFilesGetFilesRequest);
        // TODO: test validations
    }

    /**
     * Generate a new draft itemid for the current user.
     *
     * Generate a new draft itemid for the current user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreFilesGetUnusedDraftItemidTest() throws ApiException {
        CoreFilesGetUnusedDraftItemid200Response response = api.coreFilesGetUnusedDraftItemid();
        // TODO: test validations
    }

    /**
     * upload a file to moodle
     *
     * upload a file to moodle
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreFilesUploadTest() throws ApiException {
        CoreFilesUploadRequest coreFilesUploadRequest = null;
        CoreFilesUpload200Response response = api.coreFilesUpload(coreFilesUploadRequest);
        // TODO: test validations
    }

    /**
     * Returns the filters available in the given contexts.
     *
     * Returns the filters available in the given contexts.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreFiltersGetAvailableInContextTest() throws ApiException {
        CoreFiltersGetAvailableInContextRequest coreFiltersGetAvailableInContextRequest = null;
        CoreFiltersGetAvailableInContext200Response response = api.coreFiltersGetAvailableInContext(coreFiltersGetAvailableInContextRequest);
        // TODO: test validations
    }

    /**
     * Process submission of a dynamic (modal) form
     *
     * Process submission of a dynamic (modal) form
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreFormDynamicFormTest() throws ApiException {
        CoreFormDynamicFormRequest coreFormDynamicFormRequest = null;
        CoreFormDynamicForm200Response response = api.coreFormDynamicForm(coreFormDynamicFormRequest);
        // TODO: test validations
    }

    /**
     * Provides data for the filetypes element browser.
     *
     * Provides data for the filetypes element browser.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreFormGetFiletypesBrowserDataTest() throws ApiException {
        CoreFormGetFiletypesBrowserDataRequest coreFormGetFiletypesBrowserDataRequest = null;
        CoreFormGetFiletypesBrowserData200Response response = api.coreFormGetFiletypesBrowserData(coreFormGetFiletypesBrowserDataRequest);
        // TODO: test validations
    }

    /**
     * Return all raw strings (with {$a-&gt;xxx}), for a specific component - similar to core get_component_strings(), call
     *
     * Return all raw strings (with {$a-&gt;xxx}), for a specific component - similar to core get_component_strings(), call
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreGetComponentStringsTest() throws ApiException {
        CoreGetComponentStringsRequest coreGetComponentStringsRequest = null;
        Object response = api.coreGetComponentStrings(coreGetComponentStringsRequest);
        // TODO: test validations
    }

    /**
     * Return a fragment for inclusion, such as a JavaScript page.
     *
     * Return a fragment for inclusion, such as a JavaScript page.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreGetFragmentTest() throws ApiException {
        CoreGetFragmentRequest coreGetFragmentRequest = null;
        CoreGetFragment200Response response = api.coreGetFragment(coreGetFragmentRequest);
        // TODO: test validations
    }

    /**
     * Return a translated string - similar to core get_string(), call
     *
     * Return a translated string - similar to core get_string(), call
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreGetStringTest() throws ApiException {
        CoreGetStringRequest coreGetStringRequest = null;
        Object response = api.coreGetString(coreGetStringRequest);
        // TODO: test validations
    }

    /**
     * Return some translated strings - like several core get_string(), calls
     *
     * Return some translated strings - like several core get_string(), calls
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreGetStringsTest() throws ApiException {
        CoreGetStringsRequest coreGetStringsRequest = null;
        Object response = api.coreGetStrings(coreGetStringsRequest);
        // TODO: test validations
    }

    /**
     * Return formatted timestamps
     *
     * Return formatted timestamps
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreGetUserDatesTest() throws ApiException {
        CoreGetUserDatesRequest coreGetUserDatesRequest = null;
        CoreGetUserDates200Response response = api.coreGetUserDates(coreGetUserDatesRequest);
        // TODO: test validations
    }

    /**
     * Create grade categories inside a course gradebook.
     *
     * Create grade categories inside a course gradebook.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreGradesCreateGradecategoriesTest() throws ApiException {
        CoreGradesCreateGradecategoriesRequest coreGradesCreateGradecategoriesRequest = null;
        CoreGradesCreateGradecategories200Response response = api.coreGradesCreateGradecategories(coreGradesCreateGradecategoriesRequest);
        // TODO: test validations
    }

    /**
     * ** DEPRECATED ** Please do not call this function any more. Use core_grades_get_enrolled_users_for_selector instead. Returns the enrolled users within and map some fields to the returned array of user objects.
     *
     * ** DEPRECATED ** Please do not call this function any more. Use core_grades_get_enrolled_users_for_selector instead. Returns the enrolled users within and map some fields to the returned array of user objects.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreGradesGetEnrolledUsersForSearchWidgetTest() throws ApiException {
        CoreGradesGetEnrolledUsersForSearchWidgetRequest coreGradesGetEnrolledUsersForSearchWidgetRequest = null;
        CoreGradesGetEnrolledUsersForSearchWidget200Response response = api.coreGradesGetEnrolledUsersForSearchWidget(coreGradesGetEnrolledUsersForSearchWidgetRequest);
        // TODO: test validations
    }

    /**
     * Returns the enrolled users within and map some fields to the returned array of user objects.
     *
     * Returns the enrolled users within and map some fields to the returned array of user objects.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreGradesGetEnrolledUsersForSelectorTest() throws ApiException {
        CoreGradesGetEnrolledUsersForSelectorRequest coreGradesGetEnrolledUsersForSelectorRequest = null;
        CoreGradesGetEnrolledUsersForSelector200Response response = api.coreGradesGetEnrolledUsersForSelector(coreGradesGetEnrolledUsersForSelectorRequest);
        // TODO: test validations
    }

    /**
     * Get the feedback data for a grade item
     *
     * Get the feedback data for a grade item
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreGradesGetFeedbackTest() throws ApiException {
        CoreGradesGetFeedbackRequest coreGradesGetFeedbackRequest = null;
        CoreGradesGetFeedback200Response response = api.coreGradesGetFeedback(coreGradesGetFeedbackRequest);
        // TODO: test validations
    }

    /**
     * Returns the gradable users in a course
     *
     * Returns the gradable users in a course
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreGradesGetGradableUsersTest() throws ApiException {
        CoreGradesGetGradableUsersRequest coreGradesGetGradableUsersRequest = null;
        CoreGradesGetGradableUsers200Response response = api.coreGradesGetGradableUsers(coreGradesGetGradableUsersRequest);
        // TODO: test validations
    }

    /**
     * Get the grade tree structure for a course
     *
     * Get the grade tree structure for a course
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreGradesGetGradeTreeTest() throws ApiException {
        CoreCompletionMarkCourseSelfCompletedRequest coreCompletionMarkCourseSelfCompletedRequest = null;
        Object response = api.coreGradesGetGradeTree(coreCompletionMarkCourseSelfCompletedRequest);
        // TODO: test validations
    }

    /**
     * Get the gradeitems for a course
     *
     * Get the gradeitems for a course
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreGradesGetGradeitemsTest() throws ApiException {
        CoreCompletionMarkCourseSelfCompletedRequest coreCompletionMarkCourseSelfCompletedRequest = null;
        CoreGradesGetGradeitems200Response response = api.coreGradesGetGradeitems(coreCompletionMarkCourseSelfCompletedRequest);
        // TODO: test validations
    }

    /**
     * ** DEPRECATED ** Please do not call this function any more. Use core_group_get_groups_for_selector instead. Get the group/(s) for a course
     *
     * ** DEPRECATED ** Please do not call this function any more. Use core_group_get_groups_for_selector instead. Get the group/(s) for a course
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreGradesGetGroupsForSearchWidgetTest() throws ApiException {
        CoreGradesGetGroupsForSearchWidgetRequest coreGradesGetGroupsForSearchWidgetRequest = null;
        CoreGradesGetGroupsForSearchWidget200Response response = api.coreGradesGetGroupsForSearchWidget(coreGradesGetGroupsForSearchWidgetRequest);
        // TODO: test validations
    }

    /**
     * ** DEPRECATED ** Please do not call this function any more. Use core_group_get_groups_for_selector instead. Get the group/(s) for a course
     *
     * ** DEPRECATED ** Please do not call this function any more. Use core_group_get_groups_for_selector instead. Get the group/(s) for a course
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreGradesGetGroupsForSelectorTest() throws ApiException {
        CoreGradesGetGroupsForSearchWidgetRequest coreGradesGetGroupsForSearchWidgetRequest = null;
        CoreGradesGetGroupsForSelector200Response response = api.coreGradesGetGroupsForSelector(coreGradesGetGroupsForSearchWidgetRequest);
        // TODO: test validations
    }

    /**
     * Fetch the data required to display the grader grading panel for simple grading, creating the grade item if required
     *
     * Fetch the data required to display the grader grading panel for simple grading, creating the grade item if required
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreGradesGraderGradingpanelPointFetchTest() throws ApiException {
        CoreGradesGraderGradingpanelPointFetchRequest coreGradesGraderGradingpanelPointFetchRequest = null;
        CoreGradesGraderGradingpanelPointFetch200Response response = api.coreGradesGraderGradingpanelPointFetch(coreGradesGraderGradingpanelPointFetchRequest);
        // TODO: test validations
    }

    /**
     * Store the data required to display the grader grading panel for simple grading
     *
     * Store the data required to display the grader grading panel for simple grading
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreGradesGraderGradingpanelPointStoreTest() throws ApiException {
        CoreGradesGraderGradingpanelPointStoreRequest coreGradesGraderGradingpanelPointStoreRequest = null;
        CoreGradesGraderGradingpanelPointStore200Response response = api.coreGradesGraderGradingpanelPointStore(coreGradesGraderGradingpanelPointStoreRequest);
        // TODO: test validations
    }

    /**
     * Fetch the data required to display the grader grading panel for scale-based grading, creating the grade item if required
     *
     * Fetch the data required to display the grader grading panel for scale-based grading, creating the grade item if required
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreGradesGraderGradingpanelScaleFetchTest() throws ApiException {
        CoreGradesGraderGradingpanelScaleFetchRequest coreGradesGraderGradingpanelScaleFetchRequest = null;
        CoreGradesGraderGradingpanelScaleFetch200Response response = api.coreGradesGraderGradingpanelScaleFetch(coreGradesGraderGradingpanelScaleFetchRequest);
        // TODO: test validations
    }

    /**
     * Store the data required to display the grader grading panel for scale-based grading
     *
     * Store the data required to display the grader grading panel for scale-based grading
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreGradesGraderGradingpanelScaleStoreTest() throws ApiException {
        CoreGradesGraderGradingpanelScaleStoreRequest coreGradesGraderGradingpanelScaleStoreRequest = null;
        CoreGradesGraderGradingpanelScaleStore200Response response = api.coreGradesGraderGradingpanelScaleStore(coreGradesGraderGradingpanelScaleStoreRequest);
        // TODO: test validations
    }

    /**
     * Update a grade item and associated student grades.
     *
     * Update a grade item and associated student grades.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreGradesUpdateGradesTest() throws ApiException {
        CoreGradesUpdateGradesRequest coreGradesUpdateGradesRequest = null;
        Object response = api.coreGradesUpdateGrades(coreGradesUpdateGradesRequest);
        // TODO: test validations
    }

    /**
     * Get grading definitions
     *
     * Get grading definitions
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreGradingGetDefinitionsTest() throws ApiException {
        CoreGradingGetDefinitionsRequest coreGradingGetDefinitionsRequest = null;
        CoreGradingGetDefinitions200Response response = api.coreGradingGetDefinitions(coreGradingGetDefinitionsRequest);
        // TODO: test validations
    }

    /**
     * Get grading form instances
     *
     * Get grading form instances
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreGradingGetGradingformInstancesTest() throws ApiException {
        CoreGradingGetGradingformInstancesRequest coreGradingGetGradingformInstancesRequest = null;
        CoreGradingGetGradingformInstances200Response response = api.coreGradingGetGradingformInstances(coreGradingGetGradingformInstancesRequest);
        // TODO: test validations
    }

    /**
     * Save grading definitions
     *
     * Save grading definitions
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreGradingSaveDefinitionsTest() throws ApiException {
        CoreGradingSaveDefinitionsRequest coreGradingSaveDefinitionsRequest = null;
        Object response = api.coreGradingSaveDefinitions(coreGradingSaveDefinitionsRequest);
        // TODO: test validations
    }

    /**
     * Adds group members.
     *
     * Adds group members.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreGroupAddGroupMembersTest() throws ApiException {
        CoreGroupAddGroupMembersRequest coreGroupAddGroupMembersRequest = null;
        Object response = api.coreGroupAddGroupMembers(coreGroupAddGroupMembersRequest);
        // TODO: test validations
    }

    /**
     * Assing groups from groupings
     *
     * Assing groups from groupings
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreGroupAssignGroupingTest() throws ApiException {
        CoreGroupAssignGroupingRequest coreGroupAssignGroupingRequest = null;
        Object response = api.coreGroupAssignGrouping(coreGroupAssignGroupingRequest);
        // TODO: test validations
    }

    /**
     * Creates new groupings
     *
     * Creates new groupings
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreGroupCreateGroupingsTest() throws ApiException {
        CoreGroupCreateGroupingsRequest coreGroupCreateGroupingsRequest = null;
        Object response = api.coreGroupCreateGroupings(coreGroupCreateGroupingsRequest);
        // TODO: test validations
    }

    /**
     * Creates new groups.
     *
     * Creates new groups.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreGroupCreateGroupsTest() throws ApiException {
        CoreGroupCreateGroupsRequest coreGroupCreateGroupsRequest = null;
        Object response = api.coreGroupCreateGroups(coreGroupCreateGroupsRequest);
        // TODO: test validations
    }

    /**
     * Deletes group members.
     *
     * Deletes group members.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreGroupDeleteGroupMembersTest() throws ApiException {
        CoreGroupDeleteGroupMembersRequest coreGroupDeleteGroupMembersRequest = null;
        Object response = api.coreGroupDeleteGroupMembers(coreGroupDeleteGroupMembersRequest);
        // TODO: test validations
    }

    /**
     * Deletes all specified groupings.
     *
     * Deletes all specified groupings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreGroupDeleteGroupingsTest() throws ApiException {
        CoreGroupDeleteGroupingsRequest coreGroupDeleteGroupingsRequest = null;
        Object response = api.coreGroupDeleteGroupings(coreGroupDeleteGroupingsRequest);
        // TODO: test validations
    }

    /**
     * Deletes all specified groups.
     *
     * Deletes all specified groups.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreGroupDeleteGroupsTest() throws ApiException {
        CoreGroupDeleteGroupsRequest coreGroupDeleteGroupsRequest = null;
        Object response = api.coreGroupDeleteGroups(coreGroupDeleteGroupsRequest);
        // TODO: test validations
    }

    /**
     * Gets a list of groups that the user is allowed to access within the specified activity.
     *
     * Gets a list of groups that the user is allowed to access within the specified activity.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreGroupGetActivityAllowedGroupsTest() throws ApiException {
        CoreGroupGetActivityAllowedGroupsRequest coreGroupGetActivityAllowedGroupsRequest = null;
        CoreGroupGetActivityAllowedGroups200Response response = api.coreGroupGetActivityAllowedGroups(coreGroupGetActivityAllowedGroupsRequest);
        // TODO: test validations
    }

    /**
     * Returns effective groupmode used in a given activity.
     *
     * Returns effective groupmode used in a given activity.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreGroupGetActivityGroupmodeTest() throws ApiException {
        CoreGroupGetActivityGroupmodeRequest coreGroupGetActivityGroupmodeRequest = null;
        CoreGroupGetActivityGroupmode200Response response = api.coreGroupGetActivityGroupmode(coreGroupGetActivityGroupmodeRequest);
        // TODO: test validations
    }

    /**
     * Returns all groupings in specified course.
     *
     * Returns all groupings in specified course.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreGroupGetCourseGroupingsTest() throws ApiException {
        CoreGroupGetCourseGroupingsRequest coreGroupGetCourseGroupingsRequest = null;
        Object response = api.coreGroupGetCourseGroupings(coreGroupGetCourseGroupingsRequest);
        // TODO: test validations
    }

    /**
     * Returns all groups in specified course.
     *
     * Returns all groups in specified course.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreGroupGetCourseGroupsTest() throws ApiException {
        CoreGroupGetCourseGroupingsRequest coreGroupGetCourseGroupingsRequest = null;
        Object response = api.coreGroupGetCourseGroups(coreGroupGetCourseGroupingsRequest);
        // TODO: test validations
    }

    /**
     * Returns all groups in specified course for the specified user.
     *
     * Returns all groups in specified course for the specified user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreGroupGetCourseUserGroupsTest() throws ApiException {
        CoreGroupGetCourseUserGroupsRequest coreGroupGetCourseUserGroupsRequest = null;
        CoreGroupGetCourseUserGroups200Response response = api.coreGroupGetCourseUserGroups(coreGroupGetCourseUserGroupsRequest);
        // TODO: test validations
    }

    /**
     * Returns group members.
     *
     * Returns group members.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreGroupGetGroupMembersTest() throws ApiException {
        CoreGroupGetGroupMembersRequest coreGroupGetGroupMembersRequest = null;
        Object response = api.coreGroupGetGroupMembers(coreGroupGetGroupMembersRequest);
        // TODO: test validations
    }

    /**
     * Returns groupings details.
     *
     * Returns groupings details.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreGroupGetGroupingsTest() throws ApiException {
        CoreGroupGetGroupingsRequest coreGroupGetGroupingsRequest = null;
        Object response = api.coreGroupGetGroupings(coreGroupGetGroupingsRequest);
        // TODO: test validations
    }

    /**
     * Returns group details.
     *
     * Returns group details.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreGroupGetGroupsTest() throws ApiException {
        CoreGroupGetGroupMembersRequest coreGroupGetGroupMembersRequest = null;
        Object response = api.coreGroupGetGroups(coreGroupGetGroupMembersRequest);
        // TODO: test validations
    }

    /**
     * Get the group/(s) for a course
     *
     * Get the group/(s) for a course
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreGroupGetGroupsForSelectorTest() throws ApiException {
        CoreGradesGetGroupsForSearchWidgetRequest coreGradesGetGroupsForSearchWidgetRequest = null;
        CoreGradesGetGroupsForSelector200Response response = api.coreGroupGetGroupsForSelector(coreGradesGetGroupsForSearchWidgetRequest);
        // TODO: test validations
    }

    /**
     * Unassing groups from groupings
     *
     * Unassing groups from groupings
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreGroupUnassignGroupingTest() throws ApiException {
        CoreGroupUnassignGroupingRequest coreGroupUnassignGroupingRequest = null;
        Object response = api.coreGroupUnassignGrouping(coreGroupUnassignGroupingRequest);
        // TODO: test validations
    }

    /**
     * Updates existing groupings
     *
     * Updates existing groupings
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreGroupUpdateGroupingsTest() throws ApiException {
        CoreGroupUpdateGroupingsRequest coreGroupUpdateGroupingsRequest = null;
        Object response = api.coreGroupUpdateGroupings(coreGroupUpdateGroupingsRequest);
        // TODO: test validations
    }

    /**
     * Updates existing groups.
     *
     * Updates existing groups.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreGroupUpdateGroupsTest() throws ApiException {
        CoreGroupUpdateGroupsRequest coreGroupUpdateGroupsRequest = null;
        Object response = api.coreGroupUpdateGroups(coreGroupUpdateGroupsRequest);
        // TODO: test validations
    }

    /**
     * Get the H5P file cleaned for Mobile App.
     *
     * Get the H5P file cleaned for Mobile App.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreH5pGetTrustedH5pFileTest() throws ApiException {
        CoreH5pGetTrustedH5pFileRequest coreH5pGetTrustedH5pFileRequest = null;
        CoreH5pGetTrustedH5pFile200Response response = api.coreH5pGetTrustedH5pFile(coreH5pGetTrustedH5pFileRequest);
        // TODO: test validations
    }

    /**
     * Blocks a user
     *
     * Blocks a user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreMessageBlockUserTest() throws ApiException {
        CoreMessageBlockUserRequest coreMessageBlockUserRequest = null;
        Object response = api.coreMessageBlockUser(coreMessageBlockUserRequest);
        // TODO: test validations
    }

    /**
     * Confirms a contact request
     *
     * Confirms a contact request
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreMessageConfirmContactRequestTest() throws ApiException {
        CoreMessageConfirmContactRequestRequest coreMessageConfirmContactRequestRequest = null;
        Object response = api.coreMessageConfirmContactRequest(coreMessageConfirmContactRequestRequest);
        // TODO: test validations
    }

    /**
     * Creates a contact request
     *
     * Creates a contact request
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreMessageCreateContactRequestTest() throws ApiException {
        CoreMessageCreateContactRequestRequest coreMessageCreateContactRequestRequest = null;
        CoreMessageCreateContactRequest200Response response = api.coreMessageCreateContactRequest(coreMessageCreateContactRequestRequest);
        // TODO: test validations
    }

    /**
     * Retrieve the template data for searching for messages
     *
     * Retrieve the template data for searching for messages
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreMessageDataForMessageareaSearchMessagesTest() throws ApiException {
        CoreMessageDataForMessageareaSearchMessagesRequest coreMessageDataForMessageareaSearchMessagesRequest = null;
        CoreMessageDataForMessageareaSearchMessages200Response response = api.coreMessageDataForMessageareaSearchMessages(coreMessageDataForMessageareaSearchMessagesRequest);
        // TODO: test validations
    }

    /**
     * Declines a contact request
     *
     * Declines a contact request
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreMessageDeclineContactRequestTest() throws ApiException {
        CoreMessageCreateContactRequestRequest coreMessageCreateContactRequestRequest = null;
        Object response = api.coreMessageDeclineContactRequest(coreMessageCreateContactRequestRequest);
        // TODO: test validations
    }

    /**
     * Remove contacts from the contact list
     *
     * Remove contacts from the contact list
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreMessageDeleteContactsTest() throws ApiException {
        CoreMessageDeleteContactsRequest coreMessageDeleteContactsRequest = null;
        Object response = api.coreMessageDeleteContacts(coreMessageDeleteContactsRequest);
        // TODO: test validations
    }

    /**
     * Deletes a list of conversations.
     *
     * Deletes a list of conversations.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreMessageDeleteConversationsByIdTest() throws ApiException {
        CoreMessageDeleteConversationsByIdRequest coreMessageDeleteConversationsByIdRequest = null;
        Object response = api.coreMessageDeleteConversationsById(coreMessageDeleteConversationsByIdRequest);
        // TODO: test validations
    }

    /**
     * Deletes a message.
     *
     * Deletes a message.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreMessageDeleteMessageTest() throws ApiException {
        CoreMessageDeleteMessageRequest coreMessageDeleteMessageRequest = null;
        CoreMessageDeleteMessage200Response response = api.coreMessageDeleteMessage(coreMessageDeleteMessageRequest);
        // TODO: test validations
    }

    /**
     * Deletes a message for all users.
     *
     * Deletes a message for all users.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreMessageDeleteMessageForAllUsersTest() throws ApiException {
        CoreMessageDeleteMessageForAllUsersRequest coreMessageDeleteMessageForAllUsersRequest = null;
        Object response = api.coreMessageDeleteMessageForAllUsers(coreMessageDeleteMessageForAllUsersRequest);
        // TODO: test validations
    }

    /**
     * Retrieve a list of users blocked
     *
     * Retrieve a list of users blocked
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreMessageGetBlockedUsersTest() throws ApiException {
        CoreMessageGetBlockedUsersRequest coreMessageGetBlockedUsersRequest = null;
        CoreMessageGetBlockedUsers200Response response = api.coreMessageGetBlockedUsers(coreMessageGetBlockedUsersRequest);
        // TODO: test validations
    }

    /**
     * Returns contact requests for a user
     *
     * Returns contact requests for a user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreMessageGetContactRequestsTest() throws ApiException {
        CoreMessageGetContactRequestsRequest coreMessageGetContactRequestsRequest = null;
        Object response = api.coreMessageGetContactRequests(coreMessageGetContactRequestsRequest);
        // TODO: test validations
    }

    /**
     * Retrieve a conversation for a user
     *
     * Retrieve a conversation for a user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreMessageGetConversationTest() throws ApiException {
        CoreMessageGetConversationRequest coreMessageGetConversationRequest = null;
        CoreMessageGetConversation200Response response = api.coreMessageGetConversation(coreMessageGetConversationRequest);
        // TODO: test validations
    }

    /**
     * Retrieve a conversation for a user between another user
     *
     * Retrieve a conversation for a user between another user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreMessageGetConversationBetweenUsersTest() throws ApiException {
        CoreMessageGetConversationBetweenUsersRequest coreMessageGetConversationBetweenUsersRequest = null;
        CoreMessageGetConversationBetweenUsers200Response response = api.coreMessageGetConversationBetweenUsers(coreMessageGetConversationBetweenUsersRequest);
        // TODO: test validations
    }

    /**
     * Retrieve a list of conversation counts, indexed by type.
     *
     * Retrieve a list of conversation counts, indexed by type.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreMessageGetConversationCountsTest() throws ApiException {
        CoreMessageGetConversationCountsRequest coreMessageGetConversationCountsRequest = null;
        CoreMessageGetConversationCounts200Response response = api.coreMessageGetConversationCounts(coreMessageGetConversationCountsRequest);
        // TODO: test validations
    }

    /**
     * Retrieve a list of members in a conversation
     *
     * Retrieve a list of members in a conversation
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreMessageGetConversationMembersTest() throws ApiException {
        CoreMessageGetConversationMembersRequest coreMessageGetConversationMembersRequest = null;
        Object response = api.coreMessageGetConversationMembers(coreMessageGetConversationMembersRequest);
        // TODO: test validations
    }

    /**
     * Retrieve the conversation messages and relevant member information
     *
     * Retrieve the conversation messages and relevant member information
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreMessageGetConversationMessagesTest() throws ApiException {
        CoreMessageGetConversationMessagesRequest coreMessageGetConversationMessagesRequest = null;
        CoreMessageGetConversationMessages200Response response = api.coreMessageGetConversationMessages(coreMessageGetConversationMessagesRequest);
        // TODO: test validations
    }

    /**
     * Retrieve a list of conversations for a user
     *
     * Retrieve a list of conversations for a user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreMessageGetConversationsTest() throws ApiException {
        CoreMessageGetConversationsRequest coreMessageGetConversationsRequest = null;
        CoreMessageGetConversations200Response response = api.coreMessageGetConversations(coreMessageGetConversationsRequest);
        // TODO: test validations
    }

    /**
     * Retrieve a user message profiles
     *
     * Retrieve a user message profiles
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreMessageGetMemberInfoTest() throws ApiException {
        CoreMessageGetMemberInfoRequest coreMessageGetMemberInfoRequest = null;
        Object response = api.coreMessageGetMemberInfo(coreMessageGetMemberInfoRequest);
        // TODO: test validations
    }

    /**
     * Get a message processor
     *
     * Get a message processor
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreMessageGetMessageProcessorTest() throws ApiException {
        CoreMessageGetMessageProcessorRequest coreMessageGetMessageProcessorRequest = null;
        CoreMessageGetMessageProcessor200Response response = api.coreMessageGetMessageProcessor(coreMessageGetMessageProcessorRequest);
        // TODO: test validations
    }

    /**
     * Retrieve a list of messages sent and received by a user (conversations, notifications or both)
     *
     * Retrieve a list of messages sent and received by a user (conversations, notifications or both)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreMessageGetMessagesTest() throws ApiException {
        CoreMessageGetMessagesRequest coreMessageGetMessagesRequest = null;
        CoreMessageGetMessages200Response response = api.coreMessageGetMessages(coreMessageGetMessagesRequest);
        // TODO: test validations
    }

    /**
     * Gets the number of received contact requests
     *
     * Gets the number of received contact requests
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreMessageGetReceivedContactRequestsCountTest() throws ApiException {
        CoreMessageGetReceivedContactRequestsCountRequest coreMessageGetReceivedContactRequestsCountRequest = null;
        Object response = api.coreMessageGetReceivedContactRequestsCount(coreMessageGetReceivedContactRequestsCountRequest);
        // TODO: test validations
    }

    /**
     * Retrieve a self-conversation for a user
     *
     * Retrieve a self-conversation for a user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreMessageGetSelfConversationTest() throws ApiException {
        CoreMessageGetSelfConversationRequest coreMessageGetSelfConversationRequest = null;
        CoreMessageGetConversationBetweenUsers200Response response = api.coreMessageGetSelfConversation(coreMessageGetSelfConversationRequest);
        // TODO: test validations
    }

    /**
     * Retrieve a list of unread conversation counts, indexed by type.
     *
     * Retrieve a list of unread conversation counts, indexed by type.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreMessageGetUnreadConversationCountsTest() throws ApiException {
        CoreMessageGetConversationCountsRequest coreMessageGetConversationCountsRequest = null;
        CoreMessageGetUnreadConversationCounts200Response response = api.coreMessageGetUnreadConversationCounts(coreMessageGetConversationCountsRequest);
        // TODO: test validations
    }

    /**
     * Retrieve the count of unread conversations for a given user
     *
     * Retrieve the count of unread conversations for a given user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreMessageGetUnreadConversationsCountTest() throws ApiException {
        CoreMessageGetUnreadConversationsCountRequest coreMessageGetUnreadConversationsCountRequest = null;
        Object response = api.coreMessageGetUnreadConversationsCount(coreMessageGetUnreadConversationsCountRequest);
        // TODO: test validations
    }

    /**
     * Get number of unread notifications.
     *
     * Get number of unread notifications.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreMessageGetUnreadNotificationCountTest() throws ApiException {
        CoreMessageGetUnreadNotificationCountRequest coreMessageGetUnreadNotificationCountRequest = null;
        Object response = api.coreMessageGetUnreadNotificationCount(coreMessageGetUnreadNotificationCountRequest);
        // TODO: test validations
    }

    /**
     * Retrieve the contact list
     *
     * Retrieve the contact list
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreMessageGetUserContactsTest() throws ApiException {
        CoreMessageGetUserContactsRequest coreMessageGetUserContactsRequest = null;
        Object response = api.coreMessageGetUserContacts(coreMessageGetUserContactsRequest);
        // TODO: test validations
    }

    /**
     * Get the message preferences for a given user.
     *
     * Get the message preferences for a given user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreMessageGetUserMessagePreferencesTest() throws ApiException {
        CoreMessageGetConversationCountsRequest coreMessageGetConversationCountsRequest = null;
        CoreMessageGetUserMessagePreferences200Response response = api.coreMessageGetUserMessagePreferences(coreMessageGetConversationCountsRequest);
        // TODO: test validations
    }

    /**
     * Get the notification preferences for a given user.
     *
     * Get the notification preferences for a given user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreMessageGetUserNotificationPreferencesTest() throws ApiException {
        CoreMessageGetConversationCountsRequest coreMessageGetConversationCountsRequest = null;
        CoreMessageGetUserNotificationPreferences200Response response = api.coreMessageGetUserNotificationPreferences(coreMessageGetConversationCountsRequest);
        // TODO: test validations
    }

    /**
     * Mark all conversation messages as read for a given user
     *
     * Mark all conversation messages as read for a given user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreMessageMarkAllConversationMessagesAsReadTest() throws ApiException {
        CoreMessageMarkAllConversationMessagesAsReadRequest coreMessageMarkAllConversationMessagesAsReadRequest = null;
        Object response = api.coreMessageMarkAllConversationMessagesAsRead(coreMessageMarkAllConversationMessagesAsReadRequest);
        // TODO: test validations
    }

    /**
     * Mark all notifications as read for a given user
     *
     * Mark all notifications as read for a given user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreMessageMarkAllNotificationsAsReadTest() throws ApiException {
        CoreMessageMarkAllNotificationsAsReadRequest coreMessageMarkAllNotificationsAsReadRequest = null;
        Object response = api.coreMessageMarkAllNotificationsAsRead(coreMessageMarkAllNotificationsAsReadRequest);
        // TODO: test validations
    }

    /**
     * Mark a single message as read, trigger message_viewed event.
     *
     * Mark a single message as read, trigger message_viewed event.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreMessageMarkMessageReadTest() throws ApiException {
        CoreMessageMarkMessageReadRequest coreMessageMarkMessageReadRequest = null;
        CoreMessageMarkMessageRead200Response response = api.coreMessageMarkMessageRead(coreMessageMarkMessageReadRequest);
        // TODO: test validations
    }

    /**
     * Mark a single notification as read, trigger notification_viewed event.
     *
     * Mark a single notification as read, trigger notification_viewed event.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreMessageMarkNotificationReadTest() throws ApiException {
        CoreMessageMarkNotificationReadRequest coreMessageMarkNotificationReadRequest = null;
        CoreMessageMarkNotificationRead200Response response = api.coreMessageMarkNotificationRead(coreMessageMarkNotificationReadRequest);
        // TODO: test validations
    }

    /**
     * Process the message processor config form
     *
     * Process the message processor config form
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreMessageMessageProcessorConfigFormTest() throws ApiException {
        CoreMessageMessageProcessorConfigFormRequest coreMessageMessageProcessorConfigFormRequest = null;
        Object response = api.coreMessageMessageProcessorConfigForm(coreMessageMessageProcessorConfigFormRequest);
        // TODO: test validations
    }

    /**
     * Retrieve the data for searching for people
     *
     * Retrieve the data for searching for people
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreMessageMessageSearchUsersTest() throws ApiException {
        CoreMessageMessageSearchUsersRequest coreMessageMessageSearchUsersRequest = null;
        CoreMessageMessageSearchUsers200Response response = api.coreMessageMessageSearchUsers(coreMessageMessageSearchUsersRequest);
        // TODO: test validations
    }

    /**
     * Mutes a list of conversations
     *
     * Mutes a list of conversations
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreMessageMuteConversationsTest() throws ApiException {
        CoreMessageMuteConversationsRequest coreMessageMuteConversationsRequest = null;
        Object response = api.coreMessageMuteConversations(coreMessageMuteConversationsRequest);
        // TODO: test validations
    }

    /**
     * Search for contacts
     *
     * Search for contacts
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreMessageSearchContactsTest() throws ApiException {
        CoreMessageSearchContactsRequest coreMessageSearchContactsRequest = null;
        Object response = api.coreMessageSearchContacts(coreMessageSearchContactsRequest);
        // TODO: test validations
    }

    /**
     * Send instant messages
     *
     * Send instant messages
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreMessageSendInstantMessagesTest() throws ApiException {
        CoreMessageSendInstantMessagesRequest coreMessageSendInstantMessagesRequest = null;
        Object response = api.coreMessageSendInstantMessages(coreMessageSendInstantMessagesRequest);
        // TODO: test validations
    }

    /**
     * Send messages to an existing conversation between users
     *
     * Send messages to an existing conversation between users
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreMessageSendMessagesToConversationTest() throws ApiException {
        CoreMessageSendMessagesToConversationRequest coreMessageSendMessagesToConversationRequest = null;
        Object response = api.coreMessageSendMessagesToConversation(coreMessageSendMessagesToConversationRequest);
        // TODO: test validations
    }

    /**
     * Mark a conversation or group of conversations as favourites/starred conversations.
     *
     * Mark a conversation or group of conversations as favourites/starred conversations.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreMessageSetFavouriteConversationsTest() throws ApiException {
        CoreMessageSetFavouriteConversationsRequest coreMessageSetFavouriteConversationsRequest = null;
        Object response = api.coreMessageSetFavouriteConversations(coreMessageSetFavouriteConversationsRequest);
        // TODO: test validations
    }

    /**
     * Unblocks a user
     *
     * Unblocks a user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreMessageUnblockUserTest() throws ApiException {
        CoreMessageUnblockUserRequest coreMessageUnblockUserRequest = null;
        Object response = api.coreMessageUnblockUser(coreMessageUnblockUserRequest);
        // TODO: test validations
    }

    /**
     * Unmutes a list of conversations
     *
     * Unmutes a list of conversations
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreMessageUnmuteConversationsTest() throws ApiException {
        CoreMessageUnmuteConversationsRequest coreMessageUnmuteConversationsRequest = null;
        Object response = api.coreMessageUnmuteConversations(coreMessageUnmuteConversationsRequest);
        // TODO: test validations
    }

    /**
     * Unset a conversation or group of conversations as favourites/starred conversations.
     *
     * Unset a conversation or group of conversations as favourites/starred conversations.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreMessageUnsetFavouriteConversationsTest() throws ApiException {
        CoreMessageSetFavouriteConversationsRequest coreMessageSetFavouriteConversationsRequest = null;
        Object response = api.coreMessageUnsetFavouriteConversations(coreMessageSetFavouriteConversationsRequest);
        // TODO: test validations
    }

    /**
     * Check a user has authorized for a given MoodleNet site
     *
     * Check a user has authorized for a given MoodleNet site
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreMoodlenetAuthCheckTest() throws ApiException {
        CoreMoodlenetAuthCheckRequest coreMoodlenetAuthCheckRequest = null;
        CoreMoodlenetAuthCheck200Response response = api.coreMoodlenetAuthCheck(coreMoodlenetAuthCheckRequest);
        // TODO: test validations
    }

    /**
     * Get information about an activity being shared
     *
     * Get information about an activity being shared
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreMoodlenetGetShareInfoActivityTest() throws ApiException {
        CoreMoodlenetGetShareInfoActivityRequest coreMoodlenetGetShareInfoActivityRequest = null;
        CoreMoodlenetGetShareInfoActivity200Response response = api.coreMoodlenetGetShareInfoActivity(coreMoodlenetGetShareInfoActivityRequest);
        // TODO: test validations
    }

    /**
     * Get information about an course being shared
     *
     * Get information about an course being shared
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreMoodlenetGetSharedCourseInfoTest() throws ApiException {
        CoreMoodlenetGetSharedCourseInfoRequest coreMoodlenetGetSharedCourseInfoRequest = null;
        CoreMoodlenetGetSharedCourseInfo200Response response = api.coreMoodlenetGetSharedCourseInfo(coreMoodlenetGetSharedCourseInfoRequest);
        // TODO: test validations
    }

    /**
     * Send activity to MoodleNet
     *
     * Send activity to MoodleNet
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreMoodlenetSendActivityTest() throws ApiException {
        CoreMoodlenetSendActivityRequest coreMoodlenetSendActivityRequest = null;
        CoreMoodlenetSendActivity200Response response = api.coreMoodlenetSendActivity(coreMoodlenetSendActivityRequest);
        // TODO: test validations
    }

    /**
     * Send course to MoodleNet
     *
     * Send course to MoodleNet
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreMoodlenetSendCourseTest() throws ApiException {
        CoreMoodlenetSendCourseRequest coreMoodlenetSendCourseRequest = null;
        CoreMoodlenetSendCourse200Response response = api.coreMoodlenetSendCourse(coreMoodlenetSendCourseRequest);
        // TODO: test validations
    }

    /**
     * Trigger the My or Dashboard viewed event.
     *
     * Trigger the My or Dashboard viewed event.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreMyViewPageTest() throws ApiException {
        CoreMyViewPageRequest coreMyViewPageRequest = null;
        CoreCalendarDeleteSubscription200Response response = api.coreMyViewPage(coreMyViewPageRequest);
        // TODO: test validations
    }

    /**
     * Create notes
     *
     * Create notes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreNotesCreateNotesTest() throws ApiException {
        CoreNotesCreateNotesRequest coreNotesCreateNotesRequest = null;
        Object response = api.coreNotesCreateNotes(coreNotesCreateNotesRequest);
        // TODO: test validations
    }

    /**
     * Delete notes
     *
     * Delete notes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreNotesDeleteNotesTest() throws ApiException {
        CoreNotesDeleteNotesRequest coreNotesDeleteNotesRequest = null;
        Object response = api.coreNotesDeleteNotes(coreNotesDeleteNotesRequest);
        // TODO: test validations
    }

    /**
     * Returns all notes in specified course (or site), for the specified user.
     *
     * Returns all notes in specified course (or site), for the specified user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreNotesGetCourseNotesTest() throws ApiException {
        CoreNotesGetCourseNotesRequest coreNotesGetCourseNotesRequest = null;
        CoreNotesGetCourseNotes200Response response = api.coreNotesGetCourseNotes(coreNotesGetCourseNotesRequest);
        // TODO: test validations
    }

    /**
     * Get notes
     *
     * Get notes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreNotesGetNotesTest() throws ApiException {
        CoreNotesGetNotesRequest coreNotesGetNotesRequest = null;
        CoreNotesGetNotes200Response response = api.coreNotesGetNotes(coreNotesGetNotesRequest);
        // TODO: test validations
    }

    /**
     * Update notes
     *
     * Update notes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreNotesUpdateNotesTest() throws ApiException {
        CoreNotesUpdateNotesRequest coreNotesUpdateNotesRequest = null;
        Object response = api.coreNotesUpdateNotes(coreNotesUpdateNotesRequest);
        // TODO: test validations
    }

    /**
     * Simulates the web interface view of notes/index.php: trigger events.
     *
     * Simulates the web interface view of notes/index.php: trigger events.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreNotesViewNotesTest() throws ApiException {
        CoreNotesViewNotesRequest coreNotesViewNotesRequest = null;
        CoreCalendarDeleteSubscription200Response response = api.coreNotesViewNotes(coreNotesViewNotesRequest);
        // TODO: test validations
    }

    /**
     * Load the mapping of names to icons
     *
     * Load the mapping of names to icons
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreOutputLoadFontawesomeIconMapTest() throws ApiException {
        Object response = api.coreOutputLoadFontawesomeIconMap();
        // TODO: test validations
    }

    /**
     * Load the mapping of moodle pix names to fontawesome icon names
     *
     * Load the mapping of moodle pix names to fontawesome icon names
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreOutputLoadFontawesomeIconSystemMapTest() throws ApiException {
        CoreOutputLoadFontawesomeIconSystemMapRequest coreOutputLoadFontawesomeIconSystemMapRequest = null;
        Object response = api.coreOutputLoadFontawesomeIconSystemMap(coreOutputLoadFontawesomeIconSystemMapRequest);
        // TODO: test validations
    }

    /**
     * Load a template for a renderable
     *
     * Load a template for a renderable
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreOutputLoadTemplateTest() throws ApiException {
        CoreOutputLoadTemplateRequest coreOutputLoadTemplateRequest = null;
        Object response = api.coreOutputLoadTemplate(coreOutputLoadTemplateRequest);
        // TODO: test validations
    }

    /**
     * Load a template and its dependencies for a renderable
     *
     * Load a template and its dependencies for a renderable
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreOutputLoadTemplateWithDependenciesTest() throws ApiException {
        CoreOutputLoadTemplateWithDependenciesRequest coreOutputLoadTemplateWithDependenciesRequest = null;
        CoreOutputLoadTemplateWithDependencies200Response response = api.coreOutputLoadTemplateWithDependencies(coreOutputLoadTemplateWithDependenciesRequest);
        // TODO: test validations
    }

    /**
     * Get the list of payment gateways that support the given component/area
     *
     * Get the list of payment gateways that support the given component/area
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void corePaymentGetAvailableGatewaysTest() throws ApiException {
        CorePaymentGetAvailableGatewaysRequest corePaymentGetAvailableGatewaysRequest = null;
        Object response = api.corePaymentGetAvailableGateways(corePaymentGetAvailableGatewaysRequest);
        // TODO: test validations
    }

    /**
     * Get the random question set for a criteria
     *
     * Get the random question set for a criteria
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreQuestionGetRandomQuestionSummariesTest() throws ApiException {
        CoreQuestionGetRandomQuestionSummariesRequest coreQuestionGetRandomQuestionSummariesRequest = null;
        CoreQuestionGetRandomQuestionSummaries200Response response = api.coreQuestionGetRandomQuestionSummaries(coreQuestionGetRandomQuestionSummariesRequest);
        // TODO: test validations
    }

    /**
     * Update the question tags.
     *
     * Update the question tags.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreQuestionSubmitTagsFormTest() throws ApiException {
        CoreQuestionSubmitTagsFormRequest coreQuestionSubmitTagsFormRequest = null;
        CoreQuestionSubmitTagsForm200Response response = api.coreQuestionSubmitTagsForm(coreQuestionSubmitTagsFormRequest);
        // TODO: test validations
    }

    /**
     * Update the flag state of a question attempt.
     *
     * Update the flag state of a question attempt.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreQuestionUpdateFlagTest() throws ApiException {
        CoreQuestionUpdateFlagRequest coreQuestionUpdateFlagRequest = null;
        CoreCalendarDeleteSubscription200Response response = api.coreQuestionUpdateFlag(coreQuestionUpdateFlagRequest);
        // TODO: test validations
    }

    /**
     * Rates an item.
     *
     * Rates an item.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreRatingAddRatingTest() throws ApiException {
        CoreRatingAddRatingRequest coreRatingAddRatingRequest = null;
        CoreRatingAddRating200Response response = api.coreRatingAddRating(coreRatingAddRatingRequest);
        // TODO: test validations
    }

    /**
     * Retrieve all the ratings for an item.
     *
     * Retrieve all the ratings for an item.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreRatingGetItemRatingsTest() throws ApiException {
        CoreRatingGetItemRatingsRequest coreRatingGetItemRatingsRequest = null;
        CoreRatingGetItemRatings200Response response = api.coreRatingGetItemRatings(coreRatingGetItemRatingsRequest);
        // TODO: test validations
    }

    /**
     * Delete audience from report
     *
     * Delete audience from report
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreReportbuilderAudiencesDeleteTest() throws ApiException {
        CoreReportbuilderAudiencesDeleteRequest coreReportbuilderAudiencesDeleteRequest = null;
        Object response = api.coreReportbuilderAudiencesDelete(coreReportbuilderAudiencesDeleteRequest);
        // TODO: test validations
    }

    /**
     * Determine access to a system report
     *
     * Determine access to a system report
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreReportbuilderCanViewSystemReportTest() throws ApiException {
        CoreReportbuilderCanViewSystemReportRequest coreReportbuilderCanViewSystemReportRequest = null;
        Object response = api.coreReportbuilderCanViewSystemReport(coreReportbuilderCanViewSystemReportRequest);
        // TODO: test validations
    }

    /**
     * Add column to report
     *
     * Add column to report
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreReportbuilderColumnsAddTest() throws ApiException {
        CoreReportbuilderColumnsAddRequest coreReportbuilderColumnsAddRequest = null;
        CoreReportbuilderColumnsAdd200Response response = api.coreReportbuilderColumnsAdd(coreReportbuilderColumnsAddRequest);
        // TODO: test validations
    }

    /**
     * Delete column from report
     *
     * Delete column from report
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreReportbuilderColumnsDeleteTest() throws ApiException {
        CoreReportbuilderColumnsDeleteRequest coreReportbuilderColumnsDeleteRequest = null;
        CoreReportbuilderColumnsDelete200Response response = api.coreReportbuilderColumnsDelete(coreReportbuilderColumnsDeleteRequest);
        // TODO: test validations
    }

    /**
     * Re-order column within report
     *
     * Re-order column within report
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreReportbuilderColumnsReorderTest() throws ApiException {
        CoreReportbuilderColumnsReorderRequest coreReportbuilderColumnsReorderRequest = null;
        Object response = api.coreReportbuilderColumnsReorder(coreReportbuilderColumnsReorderRequest);
        // TODO: test validations
    }

    /**
     * Retrieve column sorting for report
     *
     * Retrieve column sorting for report
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreReportbuilderColumnsSortGetTest() throws ApiException {
        CoreReportbuilderColumnsSortGetRequest coreReportbuilderColumnsSortGetRequest = null;
        CoreReportbuilderColumnsDelete200Response response = api.coreReportbuilderColumnsSortGet(coreReportbuilderColumnsSortGetRequest);
        // TODO: test validations
    }

    /**
     * Re-order column sorting within report
     *
     * Re-order column sorting within report
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreReportbuilderColumnsSortReorderTest() throws ApiException {
        CoreReportbuilderColumnsSortReorderRequest coreReportbuilderColumnsSortReorderRequest = null;
        CoreReportbuilderColumnsDelete200Response response = api.coreReportbuilderColumnsSortReorder(coreReportbuilderColumnsSortReorderRequest);
        // TODO: test validations
    }

    /**
     * Toggle sorting of column within report
     *
     * Toggle sorting of column within report
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreReportbuilderColumnsSortToggleTest() throws ApiException {
        CoreReportbuilderColumnsSortToggleRequest coreReportbuilderColumnsSortToggleRequest = null;
        CoreReportbuilderColumnsDelete200Response response = api.coreReportbuilderColumnsSortToggle(coreReportbuilderColumnsSortToggleRequest);
        // TODO: test validations
    }

    /**
     * Add condition to report
     *
     * Add condition to report
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreReportbuilderConditionsAddTest() throws ApiException {
        CoreReportbuilderConditionsAddRequest coreReportbuilderConditionsAddRequest = null;
        CoreReportbuilderConditionsAdd200Response response = api.coreReportbuilderConditionsAdd(coreReportbuilderConditionsAddRequest);
        // TODO: test validations
    }

    /**
     * Delete condition from report
     *
     * Delete condition from report
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreReportbuilderConditionsDeleteTest() throws ApiException {
        CoreReportbuilderConditionsDeleteRequest coreReportbuilderConditionsDeleteRequest = null;
        CoreReportbuilderConditionsDelete200Response response = api.coreReportbuilderConditionsDelete(coreReportbuilderConditionsDeleteRequest);
        // TODO: test validations
    }

    /**
     * Re-order condition within report
     *
     * Re-order condition within report
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreReportbuilderConditionsReorderTest() throws ApiException {
        CoreReportbuilderConditionsReorderRequest coreReportbuilderConditionsReorderRequest = null;
        CoreReportbuilderConditionsDelete200Response response = api.coreReportbuilderConditionsReorder(coreReportbuilderConditionsReorderRequest);
        // TODO: test validations
    }

    /**
     * Reset conditions for given report
     *
     * Reset conditions for given report
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreReportbuilderConditionsResetTest() throws ApiException {
        CoreReportbuilderColumnsSortGetRequest coreReportbuilderColumnsSortGetRequest = null;
        CoreReportbuilderConditionsDelete200Response response = api.coreReportbuilderConditionsReset(coreReportbuilderColumnsSortGetRequest);
        // TODO: test validations
    }

    /**
     * Add filter to report
     *
     * Add filter to report
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreReportbuilderFiltersAddTest() throws ApiException {
        CoreReportbuilderFiltersAddRequest coreReportbuilderFiltersAddRequest = null;
        CoreReportbuilderFiltersAdd200Response response = api.coreReportbuilderFiltersAdd(coreReportbuilderFiltersAddRequest);
        // TODO: test validations
    }

    /**
     * Delete filter from report
     *
     * Delete filter from report
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreReportbuilderFiltersDeleteTest() throws ApiException {
        CoreReportbuilderFiltersDeleteRequest coreReportbuilderFiltersDeleteRequest = null;
        CoreReportbuilderFiltersDelete200Response response = api.coreReportbuilderFiltersDelete(coreReportbuilderFiltersDeleteRequest);
        // TODO: test validations
    }

    /**
     * Re-order filter within report
     *
     * Re-order filter within report
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreReportbuilderFiltersReorderTest() throws ApiException {
        CoreReportbuilderFiltersReorderRequest coreReportbuilderFiltersReorderRequest = null;
        CoreReportbuilderFiltersDelete200Response response = api.coreReportbuilderFiltersReorder(coreReportbuilderFiltersReorderRequest);
        // TODO: test validations
    }

    /**
     * Reset filters for given report
     *
     * Reset filters for given report
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreReportbuilderFiltersResetTest() throws ApiException {
        CoreReportbuilderFiltersResetRequest coreReportbuilderFiltersResetRequest = null;
        Object response = api.coreReportbuilderFiltersReset(coreReportbuilderFiltersResetRequest);
        // TODO: test validations
    }

    /**
     * List custom reports for current user
     *
     * List custom reports for current user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreReportbuilderListReportsTest() throws ApiException {
        CoreReportbuilderListReportsRequest coreReportbuilderListReportsRequest = null;
        CoreReportbuilderListReports200Response response = api.coreReportbuilderListReports(coreReportbuilderListReportsRequest);
        // TODO: test validations
    }

    /**
     * Delete report
     *
     * Delete report
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreReportbuilderReportsDeleteTest() throws ApiException {
        CoreReportbuilderColumnsSortGetRequest coreReportbuilderColumnsSortGetRequest = null;
        Object response = api.coreReportbuilderReportsDelete(coreReportbuilderColumnsSortGetRequest);
        // TODO: test validations
    }

    /**
     * Get custom report
     *
     * Get custom report
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreReportbuilderReportsGetTest() throws ApiException {
        CoreReportbuilderReportsGetRequest coreReportbuilderReportsGetRequest = null;
        CoreReportbuilderReportsGet200Response response = api.coreReportbuilderReportsGet(coreReportbuilderReportsGetRequest);
        // TODO: test validations
    }

    /**
     * Retrieve custom report content
     *
     * Retrieve custom report content
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreReportbuilderRetrieveReportTest() throws ApiException {
        CoreReportbuilderRetrieveReportRequest coreReportbuilderRetrieveReportRequest = null;
        CoreReportbuilderRetrieveReport200Response response = api.coreReportbuilderRetrieveReport(coreReportbuilderRetrieveReportRequest);
        // TODO: test validations
    }

    /**
     * Retrieve system report content
     *
     * Retrieve system report content
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreReportbuilderRetrieveSystemReportTest() throws ApiException {
        CoreReportbuilderRetrieveSystemReportRequest coreReportbuilderRetrieveSystemReportRequest = null;
        CoreReportbuilderRetrieveSystemReport200Response response = api.coreReportbuilderRetrieveSystemReport(coreReportbuilderRetrieveSystemReportRequest);
        // TODO: test validations
    }

    /**
     * Delete schedule from report
     *
     * Delete schedule from report
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreReportbuilderSchedulesDeleteTest() throws ApiException {
        CoreReportbuilderSchedulesDeleteRequest coreReportbuilderSchedulesDeleteRequest = null;
        Object response = api.coreReportbuilderSchedulesDelete(coreReportbuilderSchedulesDeleteRequest);
        // TODO: test validations
    }

    /**
     * Send report schedule
     *
     * Send report schedule
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreReportbuilderSchedulesSendTest() throws ApiException {
        CoreReportbuilderSchedulesSendRequest coreReportbuilderSchedulesSendRequest = null;
        Object response = api.coreReportbuilderSchedulesSend(coreReportbuilderSchedulesSendRequest);
        // TODO: test validations
    }

    /**
     * Toggle state of report schedule
     *
     * Toggle state of report schedule
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreReportbuilderSchedulesToggleTest() throws ApiException {
        CoreReportbuilderSchedulesToggleRequest coreReportbuilderSchedulesToggleRequest = null;
        Object response = api.coreReportbuilderSchedulesToggle(coreReportbuilderSchedulesToggleRequest);
        // TODO: test validations
    }

    /**
     * Set filter values for given report
     *
     * Set filter values for given report
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreReportbuilderSetFiltersTest() throws ApiException {
        CoreReportbuilderSetFiltersRequest coreReportbuilderSetFiltersRequest = null;
        Object response = api.coreReportbuilderSetFilters(coreReportbuilderSetFiltersRequest);
        // TODO: test validations
    }

    /**
     * Trigger custom report viewed
     *
     * Trigger custom report viewed
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreReportbuilderViewReportTest() throws ApiException {
        CoreReportbuilderColumnsSortGetRequest coreReportbuilderColumnsSortGetRequest = null;
        CoreReportbuilderViewReport200Response response = api.coreReportbuilderViewReport(coreReportbuilderColumnsSortGetRequest);
        // TODO: test validations
    }

    /**
     * Manual role assignments.
     *
     * Manual role assignments.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreRoleAssignRolesTest() throws ApiException {
        CoreRoleAssignRolesRequest coreRoleAssignRolesRequest = null;
        Object response = api.coreRoleAssignRoles(coreRoleAssignRolesRequest);
        // TODO: test validations
    }

    /**
     * Manual role unassignments.
     *
     * Manual role unassignments.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreRoleUnassignRolesTest() throws ApiException {
        CoreRoleUnassignRolesRequest coreRoleUnassignRolesRequest = null;
        Object response = api.coreRoleUnassignRoles(coreRoleUnassignRolesRequest);
        // TODO: test validations
    }

    /**
     * Gets relevant users for a search request.
     *
     * Gets relevant users for a search request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreSearchGetRelevantUsersTest() throws ApiException {
        CoreSearchGetRelevantUsersRequest coreSearchGetRelevantUsersRequest = null;
        Object response = api.coreSearchGetRelevantUsers(coreSearchGetRelevantUsersRequest);
        // TODO: test validations
    }

    /**
     * Get search results.
     *
     * Get search results.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreSearchGetResultsTest() throws ApiException {
        CoreSearchGetResultsRequest coreSearchGetResultsRequest = null;
        CoreSearchGetResults200Response response = api.coreSearchGetResults(coreSearchGetResultsRequest);
        // TODO: test validations
    }

    /**
     * Get search areas.
     *
     * Get search areas.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreSearchGetSearchAreasListTest() throws ApiException {
        CoreSearchGetSearchAreasListRequest coreSearchGetSearchAreasListRequest = null;
        CoreSearchGetSearchAreasList200Response response = api.coreSearchGetSearchAreasList(coreSearchGetSearchAreasListRequest);
        // TODO: test validations
    }

    /**
     * Get top search results.
     *
     * Get top search results.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreSearchGetTopResultsTest() throws ApiException {
        CoreSearchGetTopResultsRequest coreSearchGetTopResultsRequest = null;
        CoreSearchGetTopResults200Response response = api.coreSearchGetTopResults(coreSearchGetTopResultsRequest);
        // TODO: test validations
    }

    /**
     * Trigger view search results event.
     *
     * Trigger view search results event.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreSearchViewResultsTest() throws ApiException {
        CoreSearchViewResultsRequest coreSearchViewResultsRequest = null;
        CoreCalendarDeleteSubscription200Response response = api.coreSearchViewResults(coreSearchViewResultsRequest);
        // TODO: test validations
    }

    /**
     * Count the seconds remaining in this session
     *
     * Count the seconds remaining in this session
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreSessionTimeRemainingTest() throws ApiException {
        CoreSessionTimeRemaining200Response response = api.coreSessionTimeRemaining();
        // TODO: test validations
    }

    /**
     * Keep the users session alive
     *
     * Keep the users session alive
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreSessionTouchTest() throws ApiException {
        Object response = api.coreSessionTouch();
        // TODO: test validations
    }

    /**
     * Get the dynamic table content raw html
     *
     * Get the dynamic table content raw html
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreTableGetDynamicTableContentTest() throws ApiException {
        CoreTableGetDynamicTableContentRequest coreTableGetDynamicTableContentRequest = null;
        CoreTableGetDynamicTableContent200Response response = api.coreTableGetDynamicTableContent(coreTableGetDynamicTableContentRequest);
        // TODO: test validations
    }

    /**
     * Retrieves existing tag areas.
     *
     * Retrieves existing tag areas.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreTagGetTagAreasTest() throws ApiException {
        CoreTagGetTagAreas200Response response = api.coreTagGetTagAreas();
        // TODO: test validations
    }

    /**
     * Retrieves a tag cloud for the given collection and/or query search.
     *
     * Retrieves a tag cloud for the given collection and/or query search.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreTagGetTagCloudTest() throws ApiException {
        CoreTagGetTagCloudRequest coreTagGetTagCloudRequest = null;
        CoreTagGetTagCloud200Response response = api.coreTagGetTagCloud(coreTagGetTagCloudRequest);
        // TODO: test validations
    }

    /**
     * Retrieves existing tag collections.
     *
     * Retrieves existing tag collections.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreTagGetTagCollectionsTest() throws ApiException {
        CoreTagGetTagCollections200Response response = api.coreTagGetTagCollections();
        // TODO: test validations
    }

    /**
     * Gets tag index page for one tag and one tag area
     *
     * Gets tag index page for one tag and one tag area
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreTagGetTagindexTest() throws ApiException {
        CoreTagGetTagindexRequest coreTagGetTagindexRequest = null;
        CoreTagGetTagindex200Response response = api.coreTagGetTagindex(coreTagGetTagindexRequest);
        // TODO: test validations
    }

    /**
     * Gets tag index page per different areas.
     *
     * Gets tag index page per different areas.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreTagGetTagindexPerAreaTest() throws ApiException {
        CoreTagGetTagindexPerAreaRequest coreTagGetTagindexPerAreaRequest = null;
        Object response = api.coreTagGetTagindexPerArea(coreTagGetTagindexPerAreaRequest);
        // TODO: test validations
    }

    /**
     * Gets tags by their ids
     *
     * Gets tags by their ids
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreTagGetTagsTest() throws ApiException {
        CoreTagGetTagsRequest coreTagGetTagsRequest = null;
        CoreTagGetTags200Response response = api.coreTagGetTags(coreTagGetTagsRequest);
        // TODO: test validations
    }

    /**
     * Updates tags
     *
     * Updates tags
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreTagUpdateTagsTest() throws ApiException {
        CoreTagUpdateTagsRequest coreTagUpdateTagsRequest = null;
        CoreCohortAddCohortMembers200Response response = api.coreTagUpdateTags(coreTagUpdateTagsRequest);
        // TODO: test validations
    }

    /**
     * Generic service to update title
     *
     * Generic service to update title
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreUpdateInplaceEditableTest() throws ApiException {
        CoreUpdateInplaceEditableRequest coreUpdateInplaceEditableRequest = null;
        CoreUpdateInplaceEditable200Response response = api.coreUpdateInplaceEditable(coreUpdateInplaceEditableRequest);
        // TODO: test validations
    }

    /**
     * Store mobile user devices information for PUSH Notifications.
     *
     * Store mobile user devices information for PUSH Notifications.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreUserAddUserDeviceTest() throws ApiException {
        CoreUserAddUserDeviceRequest coreUserAddUserDeviceRequest = null;
        Object response = api.coreUserAddUserDevice(coreUserAddUserDeviceRequest);
        // TODO: test validations
    }

    /**
     * Copy files from a draft area to users private files area.
     *
     * Copy files from a draft area to users private files area.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreUserAddUserPrivateFilesTest() throws ApiException {
        CoreUserAddUserPrivateFilesRequest coreUserAddUserPrivateFilesRequest = null;
        Object response = api.coreUserAddUserPrivateFiles(coreUserAddUserPrivateFilesRequest);
        // TODO: test validations
    }

    /**
     * Agree the site policy for the current user.
     *
     * Agree the site policy for the current user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreUserAgreeSitePolicyTest() throws ApiException {
        CoreUserAgreeSitePolicy200Response response = api.coreUserAgreeSitePolicy();
        // TODO: test validations
    }

    /**
     * Create users.
     *
     * Create users.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreUserCreateUsersTest() throws ApiException {
        CoreUserCreateUsersRequest coreUserCreateUsersRequest = null;
        Object response = api.coreUserCreateUsers(coreUserCreateUsersRequest);
        // TODO: test validations
    }

    /**
     * Delete users.
     *
     * Delete users.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreUserDeleteUsersTest() throws ApiException {
        CoreUserDeleteUsersRequest coreUserDeleteUsersRequest = null;
        Object response = api.coreUserDeleteUsers(coreUserDeleteUsersRequest);
        // TODO: test validations
    }

    /**
     * Get course user profiles (each of the profils matching a course id and a user id),.
     *
     * Get course user profiles (each of the profils matching a course id and a user id),.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreUserGetCourseUserProfilesTest() throws ApiException {
        CoreUserGetCourseUserProfilesRequest coreUserGetCourseUserProfilesRequest = null;
        Object response = api.coreUserGetCourseUserProfiles(coreUserGetCourseUserProfilesRequest);
        // TODO: test validations
    }

    /**
     * Returns general information about files in the user private files area.
     *
     * Returns general information about files in the user private files area.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreUserGetPrivateFilesInfoTest() throws ApiException {
        CoreUserGetPrivateFilesInfoRequest coreUserGetPrivateFilesInfoRequest = null;
        CoreUserGetPrivateFilesInfo200Response response = api.coreUserGetPrivateFilesInfo(coreUserGetPrivateFilesInfoRequest);
        // TODO: test validations
    }

    /**
     * Return user preferences.
     *
     * Return user preferences.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreUserGetUserPreferencesTest() throws ApiException {
        CoreUserGetUserPreferencesRequest coreUserGetUserPreferencesRequest = null;
        CoreUserGetUserPreferences200Response response = api.coreUserGetUserPreferences(coreUserGetUserPreferencesRequest);
        // TODO: test validations
    }

    /**
     * search for users matching the parameters
     *
     * search for users matching the parameters
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreUserGetUsersTest() throws ApiException {
        CoreUserGetUsersRequest coreUserGetUsersRequest = null;
        CoreUserGetUsers200Response response = api.coreUserGetUsers(coreUserGetUsersRequest);
        // TODO: test validations
    }

    /**
     * Retrieve users&#39; information for a specified unique field - If you want to do a user search, use core_user_get_users() or core_user_search_identity().
     *
     * Retrieve users&#39; information for a specified unique field - If you want to do a user search, use core_user_get_users() or core_user_search_identity().
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreUserGetUsersByFieldTest() throws ApiException {
        CoreUserGetUsersByFieldRequest coreUserGetUsersByFieldRequest = null;
        Object response = api.coreUserGetUsersByField(coreUserGetUsersByFieldRequest);
        // TODO: test validations
    }

    /**
     * Remove a user device from the Moodle database.
     *
     * Remove a user device from the Moodle database.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreUserRemoveUserDeviceTest() throws ApiException {
        CoreUserRemoveUserDeviceRequest coreUserRemoveUserDeviceRequest = null;
        CoreUserRemoveUserDevice200Response response = api.coreUserRemoveUserDevice(coreUserRemoveUserDeviceRequest);
        // TODO: test validations
    }

    /**
     * Return list of users identities matching the given criteria in their name or other identity fields.
     *
     * Return list of users identities matching the given criteria in their name or other identity fields.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreUserSearchIdentityTest() throws ApiException {
        CoreUserSearchIdentityRequest coreUserSearchIdentityRequest = null;
        CoreUserSearchIdentity200Response response = api.coreUserSearchIdentity(coreUserSearchIdentityRequest);
        // TODO: test validations
    }

    /**
     * Set user preferences.
     *
     * Set user preferences.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreUserSetUserPreferencesTest() throws ApiException {
        CoreUserSetUserPreferencesRequest coreUserSetUserPreferencesRequest = null;
        CoreUserSetUserPreferences200Response response = api.coreUserSetUserPreferences(coreUserSetUserPreferencesRequest);
        // TODO: test validations
    }

    /**
     * Update or delete the user picture in the site
     *
     * Update or delete the user picture in the site
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreUserUpdatePictureTest() throws ApiException {
        CoreUserUpdatePictureRequest coreUserUpdatePictureRequest = null;
        CoreUserUpdatePicture200Response response = api.coreUserUpdatePicture(coreUserUpdatePictureRequest);
        // TODO: test validations
    }

    /**
     * Store mobile user public key.
     *
     * Store mobile user public key.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreUserUpdateUserDevicePublicKeyTest() throws ApiException {
        CoreUserUpdateUserDevicePublicKeyRequest coreUserUpdateUserDevicePublicKeyRequest = null;
        CoreUserUpdateUserDevicePublicKey200Response response = api.coreUserUpdateUserDevicePublicKey(coreUserUpdateUserDevicePublicKeyRequest);
        // TODO: test validations
    }

    /**
     * Update a user&#39;s preferences
     *
     * Update a user&#39;s preferences
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreUserUpdateUserPreferencesTest() throws ApiException {
        CoreUserUpdateUserPreferencesRequest coreUserUpdateUserPreferencesRequest = null;
        Object response = api.coreUserUpdateUserPreferences(coreUserUpdateUserPreferencesRequest);
        // TODO: test validations
    }

    /**
     * Update users.
     *
     * Update users.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreUserUpdateUsersTest() throws ApiException {
        CoreUserUpdateUsersRequest coreUserUpdateUsersRequest = null;
        CoreCohortAddCohortMembers200Response response = api.coreUserUpdateUsers(coreUserUpdateUsersRequest);
        // TODO: test validations
    }

    /**
     * Simulates the web-interface view of user/index.php (triggering events),.
     *
     * Simulates the web-interface view of user/index.php (triggering events),.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreUserViewUserListTest() throws ApiException {
        CoreUserViewUserListRequest coreUserViewUserListRequest = null;
        CoreCalendarDeleteSubscription200Response response = api.coreUserViewUserList(coreUserViewUserListRequest);
        // TODO: test validations
    }

    /**
     * Simulates the web-interface view of user/view.php and user/profile.php (triggering events),.
     *
     * Simulates the web-interface view of user/view.php and user/profile.php (triggering events),.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreUserViewUserProfileTest() throws ApiException {
        CoreUserViewUserProfileRequest coreUserViewUserProfileRequest = null;
        CoreCalendarDeleteSubscription200Response response = api.coreUserViewUserProfile(coreUserViewUserProfileRequest);
        // TODO: test validations
    }

    /**
     * Return some site info / user info / list web service functions
     *
     * Return some site info / user info / list web service functions
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreWebserviceGetSiteInfoTest() throws ApiException {
        CoreWebserviceGetSiteInfoRequest coreWebserviceGetSiteInfoRequest = null;
        CoreWebserviceGetSiteInfo200Response response = api.coreWebserviceGetSiteInfo(coreWebserviceGetSiteInfoRequest);
        // TODO: test validations
    }

    /**
     * Delete an xAPI state data from an activityId.
     *
     * Delete an xAPI state data from an activityId.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreXapiDeleteStateTest() throws ApiException {
        CoreXapiDeleteStateRequest coreXapiDeleteStateRequest = null;
        Object response = api.coreXapiDeleteState(coreXapiDeleteStateRequest);
        // TODO: test validations
    }

    /**
     * Delete all xAPI state data from an activityId.
     *
     * Delete all xAPI state data from an activityId.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreXapiDeleteStatesTest() throws ApiException {
        CoreXapiDeleteStatesRequest coreXapiDeleteStatesRequest = null;
        Object response = api.coreXapiDeleteStates(coreXapiDeleteStatesRequest);
        // TODO: test validations
    }

    /**
     * Get an xAPI state data from an activityId.
     *
     * Get an xAPI state data from an activityId.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreXapiGetStateTest() throws ApiException {
        CoreXapiGetStateRequest coreXapiGetStateRequest = null;
        Object response = api.coreXapiGetState(coreXapiGetStateRequest);
        // TODO: test validations
    }

    /**
     * Get all state ID from an activityId.
     *
     * Get all state ID from an activityId.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreXapiGetStatesTest() throws ApiException {
        CoreXapiGetStatesRequest coreXapiGetStatesRequest = null;
        Object response = api.coreXapiGetStates(coreXapiGetStatesRequest);
        // TODO: test validations
    }

    /**
     * Post an xAPI state into an activityId.
     *
     * Post an xAPI state into an activityId.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreXapiPostStateTest() throws ApiException {
        CoreXapiPostStateRequest coreXapiPostStateRequest = null;
        Object response = api.coreXapiPostState(coreXapiPostStateRequest);
        // TODO: test validations
    }

    /**
     * Post an xAPI statement.
     *
     * Post an xAPI statement.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreXapiStatementPostTest() throws ApiException {
        CoreXapiStatementPostRequest coreXapiStatementPostRequest = null;
        Object response = api.coreXapiStatementPost(coreXapiStatementPostRequest);
        // TODO: test validations
    }

}
