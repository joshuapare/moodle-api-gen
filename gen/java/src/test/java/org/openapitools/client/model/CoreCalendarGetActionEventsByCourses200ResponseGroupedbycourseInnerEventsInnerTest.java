/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerAction;
import org.openapitools.client.model.CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCategory;
import org.openapitools.client.model.CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse;
import org.openapitools.client.model.CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerIcon;
import org.openapitools.client.model.CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerSubscription;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInner
 */
public class CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerTest {
    private final CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInner model = new CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInner();

    /**
     * Model tests for CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInner
     */
    @Test
    public void testCoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInner() {
        // TODO: test CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInner
    }

    /**
     * Test the property 'action'
     */
    @Test
    public void actionTest() {
        // TODO: test action
    }

    /**
     * Test the property 'activityname'
     */
    @Test
    public void activitynameTest() {
        // TODO: test activityname
    }

    /**
     * Test the property 'activitystr'
     */
    @Test
    public void activitystrTest() {
        // TODO: test activitystr
    }

    /**
     * Test the property 'candelete'
     */
    @Test
    public void candeleteTest() {
        // TODO: test candelete
    }

    /**
     * Test the property 'canedit'
     */
    @Test
    public void caneditTest() {
        // TODO: test canedit
    }

    /**
     * Test the property 'category'
     */
    @Test
    public void categoryTest() {
        // TODO: test category
    }

    /**
     * Test the property 'categoryid'
     */
    @Test
    public void categoryidTest() {
        // TODO: test categoryid
    }

    /**
     * Test the property 'component'
     */
    @Test
    public void componentTest() {
        // TODO: test component
    }

    /**
     * Test the property 'course'
     */
    @Test
    public void courseTest() {
        // TODO: test course
    }

    /**
     * Test the property 'deleteurl'
     */
    @Test
    public void deleteurlTest() {
        // TODO: test deleteurl
    }

    /**
     * Test the property 'description'
     */
    @Test
    public void descriptionTest() {
        // TODO: test description
    }

    /**
     * Test the property 'descriptionformat'
     */
    @Test
    public void descriptionformatTest() {
        // TODO: test descriptionformat
    }

    /**
     * Test the property 'editurl'
     */
    @Test
    public void editurlTest() {
        // TODO: test editurl
    }

    /**
     * Test the property 'eventcount'
     */
    @Test
    public void eventcountTest() {
        // TODO: test eventcount
    }

    /**
     * Test the property 'eventtype'
     */
    @Test
    public void eventtypeTest() {
        // TODO: test eventtype
    }

    /**
     * Test the property 'formattedlocation'
     */
    @Test
    public void formattedlocationTest() {
        // TODO: test formattedlocation
    }

    /**
     * Test the property 'formattedtime'
     */
    @Test
    public void formattedtimeTest() {
        // TODO: test formattedtime
    }

    /**
     * Test the property 'groupid'
     */
    @Test
    public void groupidTest() {
        // TODO: test groupid
    }

    /**
     * Test the property 'groupname'
     */
    @Test
    public void groupnameTest() {
        // TODO: test groupname
    }

    /**
     * Test the property 'icon'
     */
    @Test
    public void iconTest() {
        // TODO: test icon
    }

    /**
     * Test the property 'id'
     */
    @Test
    public void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'instance'
     */
    @Test
    public void instanceTest() {
        // TODO: test instance
    }

    /**
     * Test the property 'isactionevent'
     */
    @Test
    public void isactioneventTest() {
        // TODO: test isactionevent
    }

    /**
     * Test the property 'iscategoryevent'
     */
    @Test
    public void iscategoryeventTest() {
        // TODO: test iscategoryevent
    }

    /**
     * Test the property 'iscourseevent'
     */
    @Test
    public void iscourseeventTest() {
        // TODO: test iscourseevent
    }

    /**
     * Test the property 'location'
     */
    @Test
    public void locationTest() {
        // TODO: test location
    }

    /**
     * Test the property 'modulename'
     */
    @Test
    public void modulenameTest() {
        // TODO: test modulename
    }

    /**
     * Test the property 'name'
     */
    @Test
    public void nameTest() {
        // TODO: test name
    }

    /**
     * Test the property 'normalisedeventtype'
     */
    @Test
    public void normalisedeventtypeTest() {
        // TODO: test normalisedeventtype
    }

    /**
     * Test the property 'normalisedeventtypetext'
     */
    @Test
    public void normalisedeventtypetextTest() {
        // TODO: test normalisedeventtypetext
    }

    /**
     * Test the property 'overdue'
     */
    @Test
    public void overdueTest() {
        // TODO: test overdue
    }

    /**
     * Test the property 'purpose'
     */
    @Test
    public void purposeTest() {
        // TODO: test purpose
    }

    /**
     * Test the property 'repeatid'
     */
    @Test
    public void repeatidTest() {
        // TODO: test repeatid
    }

    /**
     * Test the property 'subscription'
     */
    @Test
    public void subscriptionTest() {
        // TODO: test subscription
    }

    /**
     * Test the property 'timeduration'
     */
    @Test
    public void timedurationTest() {
        // TODO: test timeduration
    }

    /**
     * Test the property 'timemodified'
     */
    @Test
    public void timemodifiedTest() {
        // TODO: test timemodified
    }

    /**
     * Test the property 'timesort'
     */
    @Test
    public void timesortTest() {
        // TODO: test timesort
    }

    /**
     * Test the property 'timestart'
     */
    @Test
    public void timestartTest() {
        // TODO: test timestart
    }

    /**
     * Test the property 'timeusermidnight'
     */
    @Test
    public void timeusermidnightTest() {
        // TODO: test timeusermidnight
    }

    /**
     * Test the property 'url'
     */
    @Test
    public void urlTest() {
        // TODO: test url
    }

    /**
     * Test the property 'userid'
     */
    @Test
    public void useridTest() {
        // TODO: test userid
    }

    /**
     * Test the property 'viewurl'
     */
    @Test
    public void viewurlTest() {
        // TODO: test viewurl
    }

    /**
     * Test the property 'visible'
     */
    @Test
    public void visibleTest() {
        // TODO: test visible
    }

}
