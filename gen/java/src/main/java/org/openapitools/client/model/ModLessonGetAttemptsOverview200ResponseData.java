/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ModLessonGetAttemptsOverview200ResponseDataStudentsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.joshuapare.JSON;

/**
 * ModLessonGetAttemptsOverview200ResponseData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-18T20:58:28.689161-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class ModLessonGetAttemptsOverview200ResponseData {
  public static final String SERIALIZED_NAME_AVESCORE = "avescore";
  @SerializedName(SERIALIZED_NAME_AVESCORE)
  private BigDecimal avescore = new BigDecimal("null");

  public static final String SERIALIZED_NAME_AVETIME = "avetime";
  @SerializedName(SERIALIZED_NAME_AVETIME)
  private Integer avetime = null;

  public static final String SERIALIZED_NAME_HIGHSCORE = "highscore";
  @SerializedName(SERIALIZED_NAME_HIGHSCORE)
  private BigDecimal highscore = new BigDecimal("null");

  public static final String SERIALIZED_NAME_HIGHTIME = "hightime";
  @SerializedName(SERIALIZED_NAME_HIGHTIME)
  private Integer hightime = null;

  public static final String SERIALIZED_NAME_LESSONSCORED = "lessonscored";
  @SerializedName(SERIALIZED_NAME_LESSONSCORED)
  private Boolean lessonscored = null;

  public static final String SERIALIZED_NAME_LOWSCORE = "lowscore";
  @SerializedName(SERIALIZED_NAME_LOWSCORE)
  private BigDecimal lowscore = new BigDecimal("null");

  public static final String SERIALIZED_NAME_LOWTIME = "lowtime";
  @SerializedName(SERIALIZED_NAME_LOWTIME)
  private Integer lowtime = null;

  public static final String SERIALIZED_NAME_NUMOFATTEMPTS = "numofattempts";
  @SerializedName(SERIALIZED_NAME_NUMOFATTEMPTS)
  private Integer numofattempts = null;

  public static final String SERIALIZED_NAME_STUDENTS = "students";
  @SerializedName(SERIALIZED_NAME_STUDENTS)
  private List<ModLessonGetAttemptsOverview200ResponseDataStudentsInner> students = new ArrayList<>();

  public ModLessonGetAttemptsOverview200ResponseData() {
  }

  public ModLessonGetAttemptsOverview200ResponseData avescore(BigDecimal avescore) {
    this.avescore = avescore;
    return this;
  }

   /**
   * Average score.
   * @return avescore
  **/
  @javax.annotation.Nonnull
  public BigDecimal getAvescore() {
    return avescore;
  }

  public void setAvescore(BigDecimal avescore) {
    this.avescore = avescore;
  }


  public ModLessonGetAttemptsOverview200ResponseData avetime(Integer avetime) {
    this.avetime = avetime;
    return this;
  }

   /**
   * Average time (spent in taking the lesson).
   * @return avetime
  **/
  @javax.annotation.Nonnull
  public Integer getAvetime() {
    return avetime;
  }

  public void setAvetime(Integer avetime) {
    this.avetime = avetime;
  }


  public ModLessonGetAttemptsOverview200ResponseData highscore(BigDecimal highscore) {
    this.highscore = highscore;
    return this;
  }

   /**
   * High score.
   * @return highscore
  **/
  @javax.annotation.Nonnull
  public BigDecimal getHighscore() {
    return highscore;
  }

  public void setHighscore(BigDecimal highscore) {
    this.highscore = highscore;
  }


  public ModLessonGetAttemptsOverview200ResponseData hightime(Integer hightime) {
    this.hightime = hightime;
    return this;
  }

   /**
   * High time.
   * @return hightime
  **/
  @javax.annotation.Nonnull
  public Integer getHightime() {
    return hightime;
  }

  public void setHightime(Integer hightime) {
    this.hightime = hightime;
  }


  public ModLessonGetAttemptsOverview200ResponseData lessonscored(Boolean lessonscored) {
    this.lessonscored = lessonscored;
    return this;
  }

   /**
   * True if the lesson was scored.
   * @return lessonscored
  **/
  @javax.annotation.Nonnull
  public Boolean getLessonscored() {
    return lessonscored;
  }

  public void setLessonscored(Boolean lessonscored) {
    this.lessonscored = lessonscored;
  }


  public ModLessonGetAttemptsOverview200ResponseData lowscore(BigDecimal lowscore) {
    this.lowscore = lowscore;
    return this;
  }

   /**
   * Low score.
   * @return lowscore
  **/
  @javax.annotation.Nonnull
  public BigDecimal getLowscore() {
    return lowscore;
  }

  public void setLowscore(BigDecimal lowscore) {
    this.lowscore = lowscore;
  }


  public ModLessonGetAttemptsOverview200ResponseData lowtime(Integer lowtime) {
    this.lowtime = lowtime;
    return this;
  }

   /**
   * Low time.
   * @return lowtime
  **/
  @javax.annotation.Nonnull
  public Integer getLowtime() {
    return lowtime;
  }

  public void setLowtime(Integer lowtime) {
    this.lowtime = lowtime;
  }


  public ModLessonGetAttemptsOverview200ResponseData numofattempts(Integer numofattempts) {
    this.numofattempts = numofattempts;
    return this;
  }

   /**
   * Number of attempts.
   * @return numofattempts
  **/
  @javax.annotation.Nonnull
  public Integer getNumofattempts() {
    return numofattempts;
  }

  public void setNumofattempts(Integer numofattempts) {
    this.numofattempts = numofattempts;
  }


  public ModLessonGetAttemptsOverview200ResponseData students(List<ModLessonGetAttemptsOverview200ResponseDataStudentsInner> students) {
    this.students = students;
    return this;
  }

  public ModLessonGetAttemptsOverview200ResponseData addStudentsItem(ModLessonGetAttemptsOverview200ResponseDataStudentsInner studentsItem) {
    if (this.students == null) {
      this.students = new ArrayList<>();
    }
    this.students.add(studentsItem);
    return this;
  }

   /**
   * Get students
   * @return students
  **/
  @javax.annotation.Nullable
  public List<ModLessonGetAttemptsOverview200ResponseDataStudentsInner> getStudents() {
    return students;
  }

  public void setStudents(List<ModLessonGetAttemptsOverview200ResponseDataStudentsInner> students) {
    this.students = students;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModLessonGetAttemptsOverview200ResponseData modLessonGetAttemptsOverview200ResponseData = (ModLessonGetAttemptsOverview200ResponseData) o;
    return Objects.equals(this.avescore, modLessonGetAttemptsOverview200ResponseData.avescore) &&
        Objects.equals(this.avetime, modLessonGetAttemptsOverview200ResponseData.avetime) &&
        Objects.equals(this.highscore, modLessonGetAttemptsOverview200ResponseData.highscore) &&
        Objects.equals(this.hightime, modLessonGetAttemptsOverview200ResponseData.hightime) &&
        Objects.equals(this.lessonscored, modLessonGetAttemptsOverview200ResponseData.lessonscored) &&
        Objects.equals(this.lowscore, modLessonGetAttemptsOverview200ResponseData.lowscore) &&
        Objects.equals(this.lowtime, modLessonGetAttemptsOverview200ResponseData.lowtime) &&
        Objects.equals(this.numofattempts, modLessonGetAttemptsOverview200ResponseData.numofattempts) &&
        Objects.equals(this.students, modLessonGetAttemptsOverview200ResponseData.students);
  }

  @Override
  public int hashCode() {
    return Objects.hash(avescore, avetime, highscore, hightime, lessonscored, lowscore, lowtime, numofattempts, students);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModLessonGetAttemptsOverview200ResponseData {\n");
    sb.append("    avescore: ").append(toIndentedString(avescore)).append("\n");
    sb.append("    avetime: ").append(toIndentedString(avetime)).append("\n");
    sb.append("    highscore: ").append(toIndentedString(highscore)).append("\n");
    sb.append("    hightime: ").append(toIndentedString(hightime)).append("\n");
    sb.append("    lessonscored: ").append(toIndentedString(lessonscored)).append("\n");
    sb.append("    lowscore: ").append(toIndentedString(lowscore)).append("\n");
    sb.append("    lowtime: ").append(toIndentedString(lowtime)).append("\n");
    sb.append("    numofattempts: ").append(toIndentedString(numofattempts)).append("\n");
    sb.append("    students: ").append(toIndentedString(students)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("avescore");
    openapiFields.add("avetime");
    openapiFields.add("highscore");
    openapiFields.add("hightime");
    openapiFields.add("lessonscored");
    openapiFields.add("lowscore");
    openapiFields.add("lowtime");
    openapiFields.add("numofattempts");
    openapiFields.add("students");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("avescore");
    openapiRequiredFields.add("avetime");
    openapiRequiredFields.add("highscore");
    openapiRequiredFields.add("hightime");
    openapiRequiredFields.add("lessonscored");
    openapiRequiredFields.add("lowscore");
    openapiRequiredFields.add("lowtime");
    openapiRequiredFields.add("numofattempts");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ModLessonGetAttemptsOverview200ResponseData
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ModLessonGetAttemptsOverview200ResponseData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModLessonGetAttemptsOverview200ResponseData is not found in the empty JSON string", ModLessonGetAttemptsOverview200ResponseData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ModLessonGetAttemptsOverview200ResponseData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModLessonGetAttemptsOverview200ResponseData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ModLessonGetAttemptsOverview200ResponseData.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("students") != null && !jsonObj.get("students").isJsonNull()) {
        JsonArray jsonArraystudents = jsonObj.getAsJsonArray("students");
        if (jsonArraystudents != null) {
          // ensure the json data is an array
          if (!jsonObj.get("students").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `students` to be an array in the JSON string but got `%s`", jsonObj.get("students").toString()));
          }

          // validate the optional field `students` (array)
          for (int i = 0; i < jsonArraystudents.size(); i++) {
            ModLessonGetAttemptsOverview200ResponseDataStudentsInner.validateJsonElement(jsonArraystudents.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModLessonGetAttemptsOverview200ResponseData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModLessonGetAttemptsOverview200ResponseData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModLessonGetAttemptsOverview200ResponseData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModLessonGetAttemptsOverview200ResponseData.class));

       return (TypeAdapter<T>) new TypeAdapter<ModLessonGetAttemptsOverview200ResponseData>() {
           @Override
           public void write(JsonWriter out, ModLessonGetAttemptsOverview200ResponseData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModLessonGetAttemptsOverview200ResponseData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ModLessonGetAttemptsOverview200ResponseData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ModLessonGetAttemptsOverview200ResponseData
  * @throws IOException if the JSON string is invalid with respect to ModLessonGetAttemptsOverview200ResponseData
  */
  public static ModLessonGetAttemptsOverview200ResponseData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModLessonGetAttemptsOverview200ResponseData.class);
  }

 /**
  * Convert an instance of ModLessonGetAttemptsOverview200ResponseData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

