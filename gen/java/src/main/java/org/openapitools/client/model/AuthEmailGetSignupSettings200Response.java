/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AuthEmailGetSignupSettings200ResponseProfilefieldsInner;
import org.openapitools.client.model.AuthEmailGetSignupSettings200ResponseWarningsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.joshuapare.JSON;

/**
 * AuthEmailGetSignupSettings200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-18T14:00:07.069642-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class AuthEmailGetSignupSettings200Response {
  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country = "null";

  public static final String SERIALIZED_NAME_DEFAULTCITY = "defaultcity";
  @SerializedName(SERIALIZED_NAME_DEFAULTCITY)
  private String defaultcity = "null";

  public static final String SERIALIZED_NAME_NAMEFIELDS = "namefields";
  @SerializedName(SERIALIZED_NAME_NAMEFIELDS)
  private List<Object> namefields = new ArrayList<>();

  public static final String SERIALIZED_NAME_PASSWORDPOLICY = "passwordpolicy";
  @SerializedName(SERIALIZED_NAME_PASSWORDPOLICY)
  private String passwordpolicy = "null";

  public static final String SERIALIZED_NAME_PROFILEFIELDS = "profilefields";
  @SerializedName(SERIALIZED_NAME_PROFILEFIELDS)
  private List<AuthEmailGetSignupSettings200ResponseProfilefieldsInner> profilefields = new ArrayList<>();

  public static final String SERIALIZED_NAME_RECAPTCHACHALLENGEHASH = "recaptchachallengehash";
  @SerializedName(SERIALIZED_NAME_RECAPTCHACHALLENGEHASH)
  private String recaptchachallengehash = "null";

  public static final String SERIALIZED_NAME_RECAPTCHACHALLENGEIMAGE = "recaptchachallengeimage";
  @SerializedName(SERIALIZED_NAME_RECAPTCHACHALLENGEIMAGE)
  private String recaptchachallengeimage = "null";

  public static final String SERIALIZED_NAME_RECAPTCHACHALLENGEJS = "recaptchachallengejs";
  @SerializedName(SERIALIZED_NAME_RECAPTCHACHALLENGEJS)
  private String recaptchachallengejs = "null";

  public static final String SERIALIZED_NAME_RECAPTCHAPUBLICKEY = "recaptchapublickey";
  @SerializedName(SERIALIZED_NAME_RECAPTCHAPUBLICKEY)
  private String recaptchapublickey = "null";

  public static final String SERIALIZED_NAME_SITEPOLICY = "sitepolicy";
  @SerializedName(SERIALIZED_NAME_SITEPOLICY)
  private String sitepolicy = "null";

  public static final String SERIALIZED_NAME_SITEPOLICYHANDLER = "sitepolicyhandler";
  @SerializedName(SERIALIZED_NAME_SITEPOLICYHANDLER)
  private String sitepolicyhandler = "null";

  public static final String SERIALIZED_NAME_WARNINGS = "warnings";
  @SerializedName(SERIALIZED_NAME_WARNINGS)
  private List<AuthEmailGetSignupSettings200ResponseWarningsInner> warnings = new ArrayList<>();

  public AuthEmailGetSignupSettings200Response() {
  }

  public AuthEmailGetSignupSettings200Response country(String country) {
    this.country = country;
    return this;
  }

   /**
   * Default country
   * @return country
  **/
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public AuthEmailGetSignupSettings200Response defaultcity(String defaultcity) {
    this.defaultcity = defaultcity;
    return this;
  }

   /**
   * Default city
   * @return defaultcity
  **/
  @javax.annotation.Nullable
  public String getDefaultcity() {
    return defaultcity;
  }

  public void setDefaultcity(String defaultcity) {
    this.defaultcity = defaultcity;
  }


  public AuthEmailGetSignupSettings200Response namefields(List<Object> namefields) {
    this.namefields = namefields;
    return this;
  }

  public AuthEmailGetSignupSettings200Response addNamefieldsItem(Object namefieldsItem) {
    if (this.namefields == null) {
      this.namefields = new ArrayList<>();
    }
    this.namefields.add(namefieldsItem);
    return this;
  }

   /**
   * Get namefields
   * @return namefields
  **/
  @javax.annotation.Nonnull
  public List<Object> getNamefields() {
    return namefields;
  }

  public void setNamefields(List<Object> namefields) {
    this.namefields = namefields;
  }


  public AuthEmailGetSignupSettings200Response passwordpolicy(String passwordpolicy) {
    this.passwordpolicy = passwordpolicy;
    return this;
  }

   /**
   * Password policy
   * @return passwordpolicy
  **/
  @javax.annotation.Nullable
  public String getPasswordpolicy() {
    return passwordpolicy;
  }

  public void setPasswordpolicy(String passwordpolicy) {
    this.passwordpolicy = passwordpolicy;
  }


  public AuthEmailGetSignupSettings200Response profilefields(List<AuthEmailGetSignupSettings200ResponseProfilefieldsInner> profilefields) {
    this.profilefields = profilefields;
    return this;
  }

  public AuthEmailGetSignupSettings200Response addProfilefieldsItem(AuthEmailGetSignupSettings200ResponseProfilefieldsInner profilefieldsItem) {
    if (this.profilefields == null) {
      this.profilefields = new ArrayList<>();
    }
    this.profilefields.add(profilefieldsItem);
    return this;
  }

   /**
   * Get profilefields
   * @return profilefields
  **/
  @javax.annotation.Nullable
  public List<AuthEmailGetSignupSettings200ResponseProfilefieldsInner> getProfilefields() {
    return profilefields;
  }

  public void setProfilefields(List<AuthEmailGetSignupSettings200ResponseProfilefieldsInner> profilefields) {
    this.profilefields = profilefields;
  }


  public AuthEmailGetSignupSettings200Response recaptchachallengehash(String recaptchachallengehash) {
    this.recaptchachallengehash = recaptchachallengehash;
    return this;
  }

   /**
   * Recaptcha challenge hash
   * @return recaptchachallengehash
  **/
  @javax.annotation.Nullable
  public String getRecaptchachallengehash() {
    return recaptchachallengehash;
  }

  public void setRecaptchachallengehash(String recaptchachallengehash) {
    this.recaptchachallengehash = recaptchachallengehash;
  }


  public AuthEmailGetSignupSettings200Response recaptchachallengeimage(String recaptchachallengeimage) {
    this.recaptchachallengeimage = recaptchachallengeimage;
    return this;
  }

   /**
   * Recaptcha challenge noscript image
   * @return recaptchachallengeimage
  **/
  @javax.annotation.Nullable
  public String getRecaptchachallengeimage() {
    return recaptchachallengeimage;
  }

  public void setRecaptchachallengeimage(String recaptchachallengeimage) {
    this.recaptchachallengeimage = recaptchachallengeimage;
  }


  public AuthEmailGetSignupSettings200Response recaptchachallengejs(String recaptchachallengejs) {
    this.recaptchachallengejs = recaptchachallengejs;
    return this;
  }

   /**
   * Recaptcha challenge js url
   * @return recaptchachallengejs
  **/
  @javax.annotation.Nullable
  public String getRecaptchachallengejs() {
    return recaptchachallengejs;
  }

  public void setRecaptchachallengejs(String recaptchachallengejs) {
    this.recaptchachallengejs = recaptchachallengejs;
  }


  public AuthEmailGetSignupSettings200Response recaptchapublickey(String recaptchapublickey) {
    this.recaptchapublickey = recaptchapublickey;
    return this;
  }

   /**
   * Recaptcha public key
   * @return recaptchapublickey
  **/
  @javax.annotation.Nullable
  public String getRecaptchapublickey() {
    return recaptchapublickey;
  }

  public void setRecaptchapublickey(String recaptchapublickey) {
    this.recaptchapublickey = recaptchapublickey;
  }


  public AuthEmailGetSignupSettings200Response sitepolicy(String sitepolicy) {
    this.sitepolicy = sitepolicy;
    return this;
  }

   /**
   * Site policy
   * @return sitepolicy
  **/
  @javax.annotation.Nullable
  public String getSitepolicy() {
    return sitepolicy;
  }

  public void setSitepolicy(String sitepolicy) {
    this.sitepolicy = sitepolicy;
  }


  public AuthEmailGetSignupSettings200Response sitepolicyhandler(String sitepolicyhandler) {
    this.sitepolicyhandler = sitepolicyhandler;
    return this;
  }

   /**
   * Site policy handler
   * @return sitepolicyhandler
  **/
  @javax.annotation.Nullable
  public String getSitepolicyhandler() {
    return sitepolicyhandler;
  }

  public void setSitepolicyhandler(String sitepolicyhandler) {
    this.sitepolicyhandler = sitepolicyhandler;
  }


  public AuthEmailGetSignupSettings200Response warnings(List<AuthEmailGetSignupSettings200ResponseWarningsInner> warnings) {
    this.warnings = warnings;
    return this;
  }

  public AuthEmailGetSignupSettings200Response addWarningsItem(AuthEmailGetSignupSettings200ResponseWarningsInner warningsItem) {
    if (this.warnings == null) {
      this.warnings = new ArrayList<>();
    }
    this.warnings.add(warningsItem);
    return this;
  }

   /**
   * Get warnings
   * @return warnings
  **/
  @javax.annotation.Nullable
  public List<AuthEmailGetSignupSettings200ResponseWarningsInner> getWarnings() {
    return warnings;
  }

  public void setWarnings(List<AuthEmailGetSignupSettings200ResponseWarningsInner> warnings) {
    this.warnings = warnings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AuthEmailGetSignupSettings200Response authEmailGetSignupSettings200Response = (AuthEmailGetSignupSettings200Response) o;
    return Objects.equals(this.country, authEmailGetSignupSettings200Response.country) &&
        Objects.equals(this.defaultcity, authEmailGetSignupSettings200Response.defaultcity) &&
        Objects.equals(this.namefields, authEmailGetSignupSettings200Response.namefields) &&
        Objects.equals(this.passwordpolicy, authEmailGetSignupSettings200Response.passwordpolicy) &&
        Objects.equals(this.profilefields, authEmailGetSignupSettings200Response.profilefields) &&
        Objects.equals(this.recaptchachallengehash, authEmailGetSignupSettings200Response.recaptchachallengehash) &&
        Objects.equals(this.recaptchachallengeimage, authEmailGetSignupSettings200Response.recaptchachallengeimage) &&
        Objects.equals(this.recaptchachallengejs, authEmailGetSignupSettings200Response.recaptchachallengejs) &&
        Objects.equals(this.recaptchapublickey, authEmailGetSignupSettings200Response.recaptchapublickey) &&
        Objects.equals(this.sitepolicy, authEmailGetSignupSettings200Response.sitepolicy) &&
        Objects.equals(this.sitepolicyhandler, authEmailGetSignupSettings200Response.sitepolicyhandler) &&
        Objects.equals(this.warnings, authEmailGetSignupSettings200Response.warnings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(country, defaultcity, namefields, passwordpolicy, profilefields, recaptchachallengehash, recaptchachallengeimage, recaptchachallengejs, recaptchapublickey, sitepolicy, sitepolicyhandler, warnings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AuthEmailGetSignupSettings200Response {\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    defaultcity: ").append(toIndentedString(defaultcity)).append("\n");
    sb.append("    namefields: ").append(toIndentedString(namefields)).append("\n");
    sb.append("    passwordpolicy: ").append(toIndentedString(passwordpolicy)).append("\n");
    sb.append("    profilefields: ").append(toIndentedString(profilefields)).append("\n");
    sb.append("    recaptchachallengehash: ").append(toIndentedString(recaptchachallengehash)).append("\n");
    sb.append("    recaptchachallengeimage: ").append(toIndentedString(recaptchachallengeimage)).append("\n");
    sb.append("    recaptchachallengejs: ").append(toIndentedString(recaptchachallengejs)).append("\n");
    sb.append("    recaptchapublickey: ").append(toIndentedString(recaptchapublickey)).append("\n");
    sb.append("    sitepolicy: ").append(toIndentedString(sitepolicy)).append("\n");
    sb.append("    sitepolicyhandler: ").append(toIndentedString(sitepolicyhandler)).append("\n");
    sb.append("    warnings: ").append(toIndentedString(warnings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("country");
    openapiFields.add("defaultcity");
    openapiFields.add("namefields");
    openapiFields.add("passwordpolicy");
    openapiFields.add("profilefields");
    openapiFields.add("recaptchachallengehash");
    openapiFields.add("recaptchachallengeimage");
    openapiFields.add("recaptchachallengejs");
    openapiFields.add("recaptchapublickey");
    openapiFields.add("sitepolicy");
    openapiFields.add("sitepolicyhandler");
    openapiFields.add("warnings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("namefields");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to AuthEmailGetSignupSettings200Response
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AuthEmailGetSignupSettings200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AuthEmailGetSignupSettings200Response is not found in the empty JSON string", AuthEmailGetSignupSettings200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AuthEmailGetSignupSettings200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AuthEmailGetSignupSettings200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AuthEmailGetSignupSettings200Response.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if ((jsonObj.get("defaultcity") != null && !jsonObj.get("defaultcity").isJsonNull()) && !jsonObj.get("defaultcity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultcity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultcity").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("namefields") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("namefields").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `namefields` to be an array in the JSON string but got `%s`", jsonObj.get("namefields").toString()));
      }
      if ((jsonObj.get("passwordpolicy") != null && !jsonObj.get("passwordpolicy").isJsonNull()) && !jsonObj.get("passwordpolicy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `passwordpolicy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("passwordpolicy").toString()));
      }
      if (jsonObj.get("profilefields") != null && !jsonObj.get("profilefields").isJsonNull()) {
        JsonArray jsonArrayprofilefields = jsonObj.getAsJsonArray("profilefields");
        if (jsonArrayprofilefields != null) {
          // ensure the json data is an array
          if (!jsonObj.get("profilefields").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `profilefields` to be an array in the JSON string but got `%s`", jsonObj.get("profilefields").toString()));
          }

          // validate the optional field `profilefields` (array)
          for (int i = 0; i < jsonArrayprofilefields.size(); i++) {
            AuthEmailGetSignupSettings200ResponseProfilefieldsInner.validateJsonElement(jsonArrayprofilefields.get(i));
          };
        }
      }
      if ((jsonObj.get("recaptchachallengehash") != null && !jsonObj.get("recaptchachallengehash").isJsonNull()) && !jsonObj.get("recaptchachallengehash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recaptchachallengehash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recaptchachallengehash").toString()));
      }
      if ((jsonObj.get("recaptchachallengeimage") != null && !jsonObj.get("recaptchachallengeimage").isJsonNull()) && !jsonObj.get("recaptchachallengeimage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recaptchachallengeimage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recaptchachallengeimage").toString()));
      }
      if ((jsonObj.get("recaptchachallengejs") != null && !jsonObj.get("recaptchachallengejs").isJsonNull()) && !jsonObj.get("recaptchachallengejs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recaptchachallengejs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recaptchachallengejs").toString()));
      }
      if ((jsonObj.get("recaptchapublickey") != null && !jsonObj.get("recaptchapublickey").isJsonNull()) && !jsonObj.get("recaptchapublickey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recaptchapublickey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recaptchapublickey").toString()));
      }
      if ((jsonObj.get("sitepolicy") != null && !jsonObj.get("sitepolicy").isJsonNull()) && !jsonObj.get("sitepolicy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sitepolicy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sitepolicy").toString()));
      }
      if ((jsonObj.get("sitepolicyhandler") != null && !jsonObj.get("sitepolicyhandler").isJsonNull()) && !jsonObj.get("sitepolicyhandler").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sitepolicyhandler` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sitepolicyhandler").toString()));
      }
      if (jsonObj.get("warnings") != null && !jsonObj.get("warnings").isJsonNull()) {
        JsonArray jsonArraywarnings = jsonObj.getAsJsonArray("warnings");
        if (jsonArraywarnings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("warnings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `warnings` to be an array in the JSON string but got `%s`", jsonObj.get("warnings").toString()));
          }

          // validate the optional field `warnings` (array)
          for (int i = 0; i < jsonArraywarnings.size(); i++) {
            AuthEmailGetSignupSettings200ResponseWarningsInner.validateJsonElement(jsonArraywarnings.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AuthEmailGetSignupSettings200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AuthEmailGetSignupSettings200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AuthEmailGetSignupSettings200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AuthEmailGetSignupSettings200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<AuthEmailGetSignupSettings200Response>() {
           @Override
           public void write(JsonWriter out, AuthEmailGetSignupSettings200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AuthEmailGetSignupSettings200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AuthEmailGetSignupSettings200Response given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AuthEmailGetSignupSettings200Response
  * @throws IOException if the JSON string is invalid with respect to AuthEmailGetSignupSettings200Response
  */
  public static AuthEmailGetSignupSettings200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AuthEmailGetSignupSettings200Response.class);
  }

 /**
  * Convert an instance of AuthEmailGetSignupSettings200Response to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

