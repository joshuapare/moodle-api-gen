/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AuthEmailSignupUser200ResponseWarningsInner;
import org.openapitools.client.model.CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.joshuapare.JSON;

/**
 * ModQuizGetQuizFeedbackForGrade200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-18T14:00:07.069642-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class ModQuizGetQuizFeedbackForGrade200Response {
  public static final String SERIALIZED_NAME_FEEDBACKINLINEFILES = "feedbackinlinefiles";
  @SerializedName(SERIALIZED_NAME_FEEDBACKINLINEFILES)
  private List<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner> feedbackinlinefiles = new ArrayList<>();

  public static final String SERIALIZED_NAME_FEEDBACKTEXT = "feedbacktext";
  @SerializedName(SERIALIZED_NAME_FEEDBACKTEXT)
  private String feedbacktext = "null";

  public static final String SERIALIZED_NAME_FEEDBACKTEXTFORMAT = "feedbacktextformat";
  @SerializedName(SERIALIZED_NAME_FEEDBACKTEXTFORMAT)
  private Integer feedbacktextformat = null;

  public static final String SERIALIZED_NAME_WARNINGS = "warnings";
  @SerializedName(SERIALIZED_NAME_WARNINGS)
  private List<AuthEmailSignupUser200ResponseWarningsInner> warnings = new ArrayList<>();

  public ModQuizGetQuizFeedbackForGrade200Response() {
  }

  public ModQuizGetQuizFeedbackForGrade200Response feedbackinlinefiles(List<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner> feedbackinlinefiles) {
    this.feedbackinlinefiles = feedbackinlinefiles;
    return this;
  }

  public ModQuizGetQuizFeedbackForGrade200Response addFeedbackinlinefilesItem(CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner feedbackinlinefilesItem) {
    if (this.feedbackinlinefiles == null) {
      this.feedbackinlinefiles = new ArrayList<>();
    }
    this.feedbackinlinefiles.add(feedbackinlinefilesItem);
    return this;
  }

   /**
   * Get feedbackinlinefiles
   * @return feedbackinlinefiles
  **/
  @javax.annotation.Nullable
  public List<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner> getFeedbackinlinefiles() {
    return feedbackinlinefiles;
  }

  public void setFeedbackinlinefiles(List<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner> feedbackinlinefiles) {
    this.feedbackinlinefiles = feedbackinlinefiles;
  }


  public ModQuizGetQuizFeedbackForGrade200Response feedbacktext(String feedbacktext) {
    this.feedbacktext = feedbacktext;
    return this;
  }

   /**
   * the comment that corresponds to this grade (empty for none)
   * @return feedbacktext
  **/
  @javax.annotation.Nonnull
  public String getFeedbacktext() {
    return feedbacktext;
  }

  public void setFeedbacktext(String feedbacktext) {
    this.feedbacktext = feedbacktext;
  }


  public ModQuizGetQuizFeedbackForGrade200Response feedbacktextformat(Integer feedbacktextformat) {
    this.feedbacktextformat = feedbacktextformat;
    return this;
  }

   /**
   * feedbacktext format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)
   * @return feedbacktextformat
  **/
  @javax.annotation.Nullable
  public Integer getFeedbacktextformat() {
    return feedbacktextformat;
  }

  public void setFeedbacktextformat(Integer feedbacktextformat) {
    this.feedbacktextformat = feedbacktextformat;
  }


  public ModQuizGetQuizFeedbackForGrade200Response warnings(List<AuthEmailSignupUser200ResponseWarningsInner> warnings) {
    this.warnings = warnings;
    return this;
  }

  public ModQuizGetQuizFeedbackForGrade200Response addWarningsItem(AuthEmailSignupUser200ResponseWarningsInner warningsItem) {
    if (this.warnings == null) {
      this.warnings = new ArrayList<>();
    }
    this.warnings.add(warningsItem);
    return this;
  }

   /**
   * Get warnings
   * @return warnings
  **/
  @javax.annotation.Nullable
  public List<AuthEmailSignupUser200ResponseWarningsInner> getWarnings() {
    return warnings;
  }

  public void setWarnings(List<AuthEmailSignupUser200ResponseWarningsInner> warnings) {
    this.warnings = warnings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModQuizGetQuizFeedbackForGrade200Response modQuizGetQuizFeedbackForGrade200Response = (ModQuizGetQuizFeedbackForGrade200Response) o;
    return Objects.equals(this.feedbackinlinefiles, modQuizGetQuizFeedbackForGrade200Response.feedbackinlinefiles) &&
        Objects.equals(this.feedbacktext, modQuizGetQuizFeedbackForGrade200Response.feedbacktext) &&
        Objects.equals(this.feedbacktextformat, modQuizGetQuizFeedbackForGrade200Response.feedbacktextformat) &&
        Objects.equals(this.warnings, modQuizGetQuizFeedbackForGrade200Response.warnings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(feedbackinlinefiles, feedbacktext, feedbacktextformat, warnings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModQuizGetQuizFeedbackForGrade200Response {\n");
    sb.append("    feedbackinlinefiles: ").append(toIndentedString(feedbackinlinefiles)).append("\n");
    sb.append("    feedbacktext: ").append(toIndentedString(feedbacktext)).append("\n");
    sb.append("    feedbacktextformat: ").append(toIndentedString(feedbacktextformat)).append("\n");
    sb.append("    warnings: ").append(toIndentedString(warnings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("feedbackinlinefiles");
    openapiFields.add("feedbacktext");
    openapiFields.add("feedbacktextformat");
    openapiFields.add("warnings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("feedbacktext");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ModQuizGetQuizFeedbackForGrade200Response
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ModQuizGetQuizFeedbackForGrade200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModQuizGetQuizFeedbackForGrade200Response is not found in the empty JSON string", ModQuizGetQuizFeedbackForGrade200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ModQuizGetQuizFeedbackForGrade200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModQuizGetQuizFeedbackForGrade200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ModQuizGetQuizFeedbackForGrade200Response.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("feedbackinlinefiles") != null && !jsonObj.get("feedbackinlinefiles").isJsonNull()) {
        JsonArray jsonArrayfeedbackinlinefiles = jsonObj.getAsJsonArray("feedbackinlinefiles");
        if (jsonArrayfeedbackinlinefiles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("feedbackinlinefiles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `feedbackinlinefiles` to be an array in the JSON string but got `%s`", jsonObj.get("feedbackinlinefiles").toString()));
          }

          // validate the optional field `feedbackinlinefiles` (array)
          for (int i = 0; i < jsonArrayfeedbackinlinefiles.size(); i++) {
            CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner.validateJsonElement(jsonArrayfeedbackinlinefiles.get(i));
          };
        }
      }
      if (!jsonObj.get("feedbacktext").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `feedbacktext` to be a primitive type in the JSON string but got `%s`", jsonObj.get("feedbacktext").toString()));
      }
      if (jsonObj.get("warnings") != null && !jsonObj.get("warnings").isJsonNull()) {
        JsonArray jsonArraywarnings = jsonObj.getAsJsonArray("warnings");
        if (jsonArraywarnings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("warnings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `warnings` to be an array in the JSON string but got `%s`", jsonObj.get("warnings").toString()));
          }

          // validate the optional field `warnings` (array)
          for (int i = 0; i < jsonArraywarnings.size(); i++) {
            AuthEmailSignupUser200ResponseWarningsInner.validateJsonElement(jsonArraywarnings.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModQuizGetQuizFeedbackForGrade200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModQuizGetQuizFeedbackForGrade200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModQuizGetQuizFeedbackForGrade200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModQuizGetQuizFeedbackForGrade200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<ModQuizGetQuizFeedbackForGrade200Response>() {
           @Override
           public void write(JsonWriter out, ModQuizGetQuizFeedbackForGrade200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModQuizGetQuizFeedbackForGrade200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ModQuizGetQuizFeedbackForGrade200Response given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ModQuizGetQuizFeedbackForGrade200Response
  * @throws IOException if the JSON string is invalid with respect to ModQuizGetQuizFeedbackForGrade200Response
  */
  public static ModQuizGetQuizFeedbackForGrade200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModQuizGetQuizFeedbackForGrade200Response.class);
  }

 /**
  * Convert an instance of ModQuizGetQuizFeedbackForGrade200Response to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

