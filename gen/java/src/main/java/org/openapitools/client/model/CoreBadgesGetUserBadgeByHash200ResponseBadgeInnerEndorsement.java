/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.joshuapare.JSON;

/**
 * CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerEndorsement
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-18T14:00:07.069642-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerEndorsement {
  public static final String SERIALIZED_NAME_BADGEID = "badgeid";
  @SerializedName(SERIALIZED_NAME_BADGEID)
  private Integer badgeid;

  public static final String SERIALIZED_NAME_CLAIMCOMMENT = "claimcomment";
  @SerializedName(SERIALIZED_NAME_CLAIMCOMMENT)
  private String claimcomment = "null";

  public static final String SERIALIZED_NAME_CLAIMID = "claimid";
  @SerializedName(SERIALIZED_NAME_CLAIMID)
  private String claimid = "null";

  public static final String SERIALIZED_NAME_DATEISSUED = "dateissued";
  @SerializedName(SERIALIZED_NAME_DATEISSUED)
  private Integer dateissued = 0;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id = null;

  public static final String SERIALIZED_NAME_ISSUEREMAIL = "issueremail";
  @SerializedName(SERIALIZED_NAME_ISSUEREMAIL)
  private String issueremail = "null";

  public static final String SERIALIZED_NAME_ISSUERNAME = "issuername";
  @SerializedName(SERIALIZED_NAME_ISSUERNAME)
  private String issuername = "null";

  public static final String SERIALIZED_NAME_ISSUERURL = "issuerurl";
  @SerializedName(SERIALIZED_NAME_ISSUERURL)
  private String issuerurl = "null";

  public CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerEndorsement() {
  }

  public CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerEndorsement badgeid(Integer badgeid) {
    this.badgeid = badgeid;
    return this;
  }

   /**
   * Badge id
   * @return badgeid
  **/
  @javax.annotation.Nonnull
  public Integer getBadgeid() {
    return badgeid;
  }

  public void setBadgeid(Integer badgeid) {
    this.badgeid = badgeid;
  }


  public CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerEndorsement claimcomment(String claimcomment) {
    this.claimcomment = claimcomment;
    return this;
  }

   /**
   * Claim comment
   * @return claimcomment
  **/
  @javax.annotation.Nonnull
  public String getClaimcomment() {
    return claimcomment;
  }

  public void setClaimcomment(String claimcomment) {
    this.claimcomment = claimcomment;
  }


  public CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerEndorsement claimid(String claimid) {
    this.claimid = claimid;
    return this;
  }

   /**
   * Claim URL
   * @return claimid
  **/
  @javax.annotation.Nonnull
  public String getClaimid() {
    return claimid;
  }

  public void setClaimid(String claimid) {
    this.claimid = claimid;
  }


  public CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerEndorsement dateissued(Integer dateissued) {
    this.dateissued = dateissued;
    return this;
  }

   /**
   * Date issued
   * @return dateissued
  **/
  @javax.annotation.Nonnull
  public Integer getDateissued() {
    return dateissued;
  }

  public void setDateissued(Integer dateissued) {
    this.dateissued = dateissued;
  }


  public CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerEndorsement id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * Endorsement id
   * @return id
  **/
  @javax.annotation.Nonnull
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerEndorsement issueremail(String issueremail) {
    this.issueremail = issueremail;
    return this;
  }

   /**
   * Endorsement issuer email
   * @return issueremail
  **/
  @javax.annotation.Nonnull
  public String getIssueremail() {
    return issueremail;
  }

  public void setIssueremail(String issueremail) {
    this.issueremail = issueremail;
  }


  public CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerEndorsement issuername(String issuername) {
    this.issuername = issuername;
    return this;
  }

   /**
   * Endorsement issuer name
   * @return issuername
  **/
  @javax.annotation.Nonnull
  public String getIssuername() {
    return issuername;
  }

  public void setIssuername(String issuername) {
    this.issuername = issuername;
  }


  public CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerEndorsement issuerurl(String issuerurl) {
    this.issuerurl = issuerurl;
    return this;
  }

   /**
   * Endorsement issuer URL
   * @return issuerurl
  **/
  @javax.annotation.Nonnull
  public String getIssuerurl() {
    return issuerurl;
  }

  public void setIssuerurl(String issuerurl) {
    this.issuerurl = issuerurl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerEndorsement coreBadgesGetUserBadgeByHash200ResponseBadgeInnerEndorsement = (CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerEndorsement) o;
    return Objects.equals(this.badgeid, coreBadgesGetUserBadgeByHash200ResponseBadgeInnerEndorsement.badgeid) &&
        Objects.equals(this.claimcomment, coreBadgesGetUserBadgeByHash200ResponseBadgeInnerEndorsement.claimcomment) &&
        Objects.equals(this.claimid, coreBadgesGetUserBadgeByHash200ResponseBadgeInnerEndorsement.claimid) &&
        Objects.equals(this.dateissued, coreBadgesGetUserBadgeByHash200ResponseBadgeInnerEndorsement.dateissued) &&
        Objects.equals(this.id, coreBadgesGetUserBadgeByHash200ResponseBadgeInnerEndorsement.id) &&
        Objects.equals(this.issueremail, coreBadgesGetUserBadgeByHash200ResponseBadgeInnerEndorsement.issueremail) &&
        Objects.equals(this.issuername, coreBadgesGetUserBadgeByHash200ResponseBadgeInnerEndorsement.issuername) &&
        Objects.equals(this.issuerurl, coreBadgesGetUserBadgeByHash200ResponseBadgeInnerEndorsement.issuerurl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(badgeid, claimcomment, claimid, dateissued, id, issueremail, issuername, issuerurl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerEndorsement {\n");
    sb.append("    badgeid: ").append(toIndentedString(badgeid)).append("\n");
    sb.append("    claimcomment: ").append(toIndentedString(claimcomment)).append("\n");
    sb.append("    claimid: ").append(toIndentedString(claimid)).append("\n");
    sb.append("    dateissued: ").append(toIndentedString(dateissued)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    issueremail: ").append(toIndentedString(issueremail)).append("\n");
    sb.append("    issuername: ").append(toIndentedString(issuername)).append("\n");
    sb.append("    issuerurl: ").append(toIndentedString(issuerurl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("badgeid");
    openapiFields.add("claimcomment");
    openapiFields.add("claimid");
    openapiFields.add("dateissued");
    openapiFields.add("id");
    openapiFields.add("issueremail");
    openapiFields.add("issuername");
    openapiFields.add("issuerurl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("badgeid");
    openapiRequiredFields.add("claimcomment");
    openapiRequiredFields.add("claimid");
    openapiRequiredFields.add("dateissued");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("issueremail");
    openapiRequiredFields.add("issuername");
    openapiRequiredFields.add("issuerurl");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerEndorsement
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerEndorsement.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerEndorsement is not found in the empty JSON string", CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerEndorsement.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerEndorsement.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerEndorsement` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerEndorsement.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("claimcomment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `claimcomment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("claimcomment").toString()));
      }
      if (!jsonObj.get("claimid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `claimid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("claimid").toString()));
      }
      if (!jsonObj.get("issueremail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issueremail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issueremail").toString()));
      }
      if (!jsonObj.get("issuername").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuername` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuername").toString()));
      }
      if (!jsonObj.get("issuerurl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuerurl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuerurl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerEndorsement.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerEndorsement' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerEndorsement> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerEndorsement.class));

       return (TypeAdapter<T>) new TypeAdapter<CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerEndorsement>() {
           @Override
           public void write(JsonWriter out, CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerEndorsement value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerEndorsement read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerEndorsement given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerEndorsement
  * @throws IOException if the JSON string is invalid with respect to CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerEndorsement
  */
  public static CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerEndorsement fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerEndorsement.class);
  }

 /**
  * Convert an instance of CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerEndorsement to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

