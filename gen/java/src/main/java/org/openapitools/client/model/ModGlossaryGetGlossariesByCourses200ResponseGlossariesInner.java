/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.joshuapare.JSON;

/**
 * Glossaries
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-18T14:00:07.069642-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner {
  public static final String SERIALIZED_NAME_ALLOWCOMMENTS = "allowcomments";
  @SerializedName(SERIALIZED_NAME_ALLOWCOMMENTS)
  private Integer allowcomments = null;

  public static final String SERIALIZED_NAME_ALLOWDUPLICATEDENTRIES = "allowduplicatedentries";
  @SerializedName(SERIALIZED_NAME_ALLOWDUPLICATEDENTRIES)
  private Integer allowduplicatedentries = null;

  public static final String SERIALIZED_NAME_ALLOWPRINTVIEW = "allowprintview";
  @SerializedName(SERIALIZED_NAME_ALLOWPRINTVIEW)
  private Integer allowprintview = null;

  public static final String SERIALIZED_NAME_APPROVALDISPLAYFORMAT = "approvaldisplayformat";
  @SerializedName(SERIALIZED_NAME_APPROVALDISPLAYFORMAT)
  private String approvaldisplayformat = "null";

  public static final String SERIALIZED_NAME_ASSESSED = "assessed";
  @SerializedName(SERIALIZED_NAME_ASSESSED)
  private Integer assessed = null;

  public static final String SERIALIZED_NAME_ASSESSTIMEFINISH = "assesstimefinish";
  @SerializedName(SERIALIZED_NAME_ASSESSTIMEFINISH)
  private Integer assesstimefinish = null;

  public static final String SERIALIZED_NAME_ASSESSTIMESTART = "assesstimestart";
  @SerializedName(SERIALIZED_NAME_ASSESSTIMESTART)
  private Integer assesstimestart = null;

  public static final String SERIALIZED_NAME_BROWSEMODES = "browsemodes";
  @SerializedName(SERIALIZED_NAME_BROWSEMODES)
  private List<Object> browsemodes = new ArrayList<>();

  public static final String SERIALIZED_NAME_CANADDENTRY = "canaddentry";
  @SerializedName(SERIALIZED_NAME_CANADDENTRY)
  private Integer canaddentry = null;

  public static final String SERIALIZED_NAME_COMPLETIONENTRIES = "completionentries";
  @SerializedName(SERIALIZED_NAME_COMPLETIONENTRIES)
  private Integer completionentries = null;

  public static final String SERIALIZED_NAME_COURSE = "course";
  @SerializedName(SERIALIZED_NAME_COURSE)
  private Integer course;

  public static final String SERIALIZED_NAME_COURSEMODULE = "coursemodule";
  @SerializedName(SERIALIZED_NAME_COURSEMODULE)
  private Integer coursemodule;

  public static final String SERIALIZED_NAME_DEFAULTAPPROVAL = "defaultapproval";
  @SerializedName(SERIALIZED_NAME_DEFAULTAPPROVAL)
  private Integer defaultapproval = null;

  public static final String SERIALIZED_NAME_DISPLAYFORMAT = "displayformat";
  @SerializedName(SERIALIZED_NAME_DISPLAYFORMAT)
  private String displayformat = "null";

  public static final String SERIALIZED_NAME_EDITALWAYS = "editalways";
  @SerializedName(SERIALIZED_NAME_EDITALWAYS)
  private Integer editalways = null;

  public static final String SERIALIZED_NAME_ENTBYPAGE = "entbypage";
  @SerializedName(SERIALIZED_NAME_ENTBYPAGE)
  private Integer entbypage = null;

  public static final String SERIALIZED_NAME_GLOBALGLOSSARY = "globalglossary";
  @SerializedName(SERIALIZED_NAME_GLOBALGLOSSARY)
  private Integer globalglossary;

  public static final String SERIALIZED_NAME_GROUPINGID = "groupingid";
  @SerializedName(SERIALIZED_NAME_GROUPINGID)
  private Integer groupingid;

  public static final String SERIALIZED_NAME_GROUPMODE = "groupmode";
  @SerializedName(SERIALIZED_NAME_GROUPMODE)
  private Integer groupmode;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_INTRO = "intro";
  @SerializedName(SERIALIZED_NAME_INTRO)
  private String intro;

  public static final String SERIALIZED_NAME_INTROFILES = "introfiles";
  @SerializedName(SERIALIZED_NAME_INTROFILES)
  private List<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner> introfiles = new ArrayList<>();

  public static final String SERIALIZED_NAME_INTROFORMAT = "introformat";
  @SerializedName(SERIALIZED_NAME_INTROFORMAT)
  private Integer introformat;

  public static final String SERIALIZED_NAME_LANG = "lang";
  @SerializedName(SERIALIZED_NAME_LANG)
  private String lang;

  public static final String SERIALIZED_NAME_MAINGLOSSARY = "mainglossary";
  @SerializedName(SERIALIZED_NAME_MAINGLOSSARY)
  private Integer mainglossary = null;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RSSARTICLES = "rssarticles";
  @SerializedName(SERIALIZED_NAME_RSSARTICLES)
  private Integer rssarticles = null;

  public static final String SERIALIZED_NAME_RSSTYPE = "rsstype";
  @SerializedName(SERIALIZED_NAME_RSSTYPE)
  private Integer rsstype = null;

  public static final String SERIALIZED_NAME_SCALE = "scale";
  @SerializedName(SERIALIZED_NAME_SCALE)
  private Integer scale = null;

  public static final String SERIALIZED_NAME_SECTION = "section";
  @SerializedName(SERIALIZED_NAME_SECTION)
  private Integer section;

  public static final String SERIALIZED_NAME_SHOWALL = "showall";
  @SerializedName(SERIALIZED_NAME_SHOWALL)
  private Integer showall = null;

  public static final String SERIALIZED_NAME_SHOWALPHABET = "showalphabet";
  @SerializedName(SERIALIZED_NAME_SHOWALPHABET)
  private Integer showalphabet = null;

  public static final String SERIALIZED_NAME_SHOWSPECIAL = "showspecial";
  @SerializedName(SERIALIZED_NAME_SHOWSPECIAL)
  private Integer showspecial = null;

  public static final String SERIALIZED_NAME_TIMECREATED = "timecreated";
  @SerializedName(SERIALIZED_NAME_TIMECREATED)
  private Integer timecreated;

  public static final String SERIALIZED_NAME_TIMEMODIFIED = "timemodified";
  @SerializedName(SERIALIZED_NAME_TIMEMODIFIED)
  private Integer timemodified;

  public static final String SERIALIZED_NAME_USEDYNALINK = "usedynalink";
  @SerializedName(SERIALIZED_NAME_USEDYNALINK)
  private Integer usedynalink = null;

  public static final String SERIALIZED_NAME_VISIBLE = "visible";
  @SerializedName(SERIALIZED_NAME_VISIBLE)
  private Boolean visible;

  public ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner() {
  }

  public ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner allowcomments(Integer allowcomments) {
    this.allowcomments = allowcomments;
    return this;
  }

   /**
   * If enabled, all participants with permission to create comments will be able to add comments to glossary entries
   * @return allowcomments
  **/
  @javax.annotation.Nullable
  public Integer getAllowcomments() {
    return allowcomments;
  }

  public void setAllowcomments(Integer allowcomments) {
    this.allowcomments = allowcomments;
  }


  public ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner allowduplicatedentries(Integer allowduplicatedentries) {
    this.allowduplicatedentries = allowduplicatedentries;
    return this;
  }

   /**
   * If enabled, multiple entries can have the same concept name
   * @return allowduplicatedentries
  **/
  @javax.annotation.Nullable
  public Integer getAllowduplicatedentries() {
    return allowduplicatedentries;
  }

  public void setAllowduplicatedentries(Integer allowduplicatedentries) {
    this.allowduplicatedentries = allowduplicatedentries;
  }


  public ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner allowprintview(Integer allowprintview) {
    this.allowprintview = allowprintview;
    return this;
  }

   /**
   * If enabled, students are provided with a link to a printer-friendly version of the glossary. The link is always available to teachers
   * @return allowprintview
  **/
  @javax.annotation.Nullable
  public Integer getAllowprintview() {
    return allowprintview;
  }

  public void setAllowprintview(Integer allowprintview) {
    this.allowprintview = allowprintview;
  }


  public ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner approvaldisplayformat(String approvaldisplayformat) {
    this.approvaldisplayformat = approvaldisplayformat;
    return this;
  }

   /**
   * When approving glossary items you may wish to use a different display format
   * @return approvaldisplayformat
  **/
  @javax.annotation.Nullable
  public String getApprovaldisplayformat() {
    return approvaldisplayformat;
  }

  public void setApprovaldisplayformat(String approvaldisplayformat) {
    this.approvaldisplayformat = approvaldisplayformat;
  }


  public ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner assessed(Integer assessed) {
    this.assessed = assessed;
    return this;
  }

   /**
   * Aggregate type
   * @return assessed
  **/
  @javax.annotation.Nullable
  public Integer getAssessed() {
    return assessed;
  }

  public void setAssessed(Integer assessed) {
    this.assessed = assessed;
  }


  public ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner assesstimefinish(Integer assesstimefinish) {
    this.assesstimefinish = assesstimefinish;
    return this;
  }

   /**
   * Restrict rating to items created before this
   * @return assesstimefinish
  **/
  @javax.annotation.Nullable
  public Integer getAssesstimefinish() {
    return assesstimefinish;
  }

  public void setAssesstimefinish(Integer assesstimefinish) {
    this.assesstimefinish = assesstimefinish;
  }


  public ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner assesstimestart(Integer assesstimestart) {
    this.assesstimestart = assesstimestart;
    return this;
  }

   /**
   * Restrict rating to items created after this
   * @return assesstimestart
  **/
  @javax.annotation.Nullable
  public Integer getAssesstimestart() {
    return assesstimestart;
  }

  public void setAssesstimestart(Integer assesstimestart) {
    this.assesstimestart = assesstimestart;
  }


  public ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner browsemodes(List<Object> browsemodes) {
    this.browsemodes = browsemodes;
    return this;
  }

  public ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner addBrowsemodesItem(Object browsemodesItem) {
    if (this.browsemodes == null) {
      this.browsemodes = new ArrayList<>();
    }
    this.browsemodes.add(browsemodesItem);
    return this;
  }

   /**
   * Get browsemodes
   * @return browsemodes
  **/
  @javax.annotation.Nullable
  public List<Object> getBrowsemodes() {
    return browsemodes;
  }

  public void setBrowsemodes(List<Object> browsemodes) {
    this.browsemodes = browsemodes;
  }


  public ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner canaddentry(Integer canaddentry) {
    this.canaddentry = canaddentry;
    return this;
  }

   /**
   * Whether the user can add a new entry
   * @return canaddentry
  **/
  @javax.annotation.Nullable
  public Integer getCanaddentry() {
    return canaddentry;
  }

  public void setCanaddentry(Integer canaddentry) {
    this.canaddentry = canaddentry;
  }


  public ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner completionentries(Integer completionentries) {
    this.completionentries = completionentries;
    return this;
  }

   /**
   * Number of entries to complete
   * @return completionentries
  **/
  @javax.annotation.Nullable
  public Integer getCompletionentries() {
    return completionentries;
  }

  public void setCompletionentries(Integer completionentries) {
    this.completionentries = completionentries;
  }


  public ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner course(Integer course) {
    this.course = course;
    return this;
  }

   /**
   * Course id
   * @return course
  **/
  @javax.annotation.Nullable
  public Integer getCourse() {
    return course;
  }

  public void setCourse(Integer course) {
    this.course = course;
  }


  public ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner coursemodule(Integer coursemodule) {
    this.coursemodule = coursemodule;
    return this;
  }

   /**
   * Course module id
   * @return coursemodule
  **/
  @javax.annotation.Nullable
  public Integer getCoursemodule() {
    return coursemodule;
  }

  public void setCoursemodule(Integer coursemodule) {
    this.coursemodule = coursemodule;
  }


  public ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner defaultapproval(Integer defaultapproval) {
    this.defaultapproval = defaultapproval;
    return this;
  }

   /**
   * If set to no, entries require approving by a teacher before they are viewable by everyone.
   * @return defaultapproval
  **/
  @javax.annotation.Nullable
  public Integer getDefaultapproval() {
    return defaultapproval;
  }

  public void setDefaultapproval(Integer defaultapproval) {
    this.defaultapproval = defaultapproval;
  }


  public ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner displayformat(String displayformat) {
    this.displayformat = displayformat;
    return this;
  }

   /**
   * Display format type
   * @return displayformat
  **/
  @javax.annotation.Nullable
  public String getDisplayformat() {
    return displayformat;
  }

  public void setDisplayformat(String displayformat) {
    this.displayformat = displayformat;
  }


  public ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner editalways(Integer editalways) {
    this.editalways = editalways;
    return this;
  }

   /**
   * Always allow editing
   * @return editalways
  **/
  @javax.annotation.Nullable
  public Integer getEditalways() {
    return editalways;
  }

  public void setEditalways(Integer editalways) {
    this.editalways = editalways;
  }


  public ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner entbypage(Integer entbypage) {
    this.entbypage = entbypage;
    return this;
  }

   /**
   * Entries shown per page
   * @return entbypage
  **/
  @javax.annotation.Nullable
  public Integer getEntbypage() {
    return entbypage;
  }

  public void setEntbypage(Integer entbypage) {
    this.entbypage = entbypage;
  }


  public ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner globalglossary(Integer globalglossary) {
    this.globalglossary = globalglossary;
    return this;
  }

   /**
   * Get globalglossary
   * @return globalglossary
  **/
  @javax.annotation.Nullable
  public Integer getGlobalglossary() {
    return globalglossary;
  }

  public void setGlobalglossary(Integer globalglossary) {
    this.globalglossary = globalglossary;
  }


  public ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner groupingid(Integer groupingid) {
    this.groupingid = groupingid;
    return this;
  }

   /**
   * Group id
   * @return groupingid
  **/
  @javax.annotation.Nullable
  public Integer getGroupingid() {
    return groupingid;
  }

  public void setGroupingid(Integer groupingid) {
    this.groupingid = groupingid;
  }


  public ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner groupmode(Integer groupmode) {
    this.groupmode = groupmode;
    return this;
  }

   /**
   * Group mode
   * @return groupmode
  **/
  @javax.annotation.Nullable
  public Integer getGroupmode() {
    return groupmode;
  }

  public void setGroupmode(Integer groupmode) {
    this.groupmode = groupmode;
  }


  public ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * Activity instance id
   * @return id
  **/
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner intro(String intro) {
    this.intro = intro;
    return this;
  }

   /**
   * Activity introduction
   * @return intro
  **/
  @javax.annotation.Nullable
  public String getIntro() {
    return intro;
  }

  public void setIntro(String intro) {
    this.intro = intro;
  }


  public ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner introfiles(List<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner> introfiles) {
    this.introfiles = introfiles;
    return this;
  }

  public ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner addIntrofilesItem(CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner introfilesItem) {
    if (this.introfiles == null) {
      this.introfiles = new ArrayList<>();
    }
    this.introfiles.add(introfilesItem);
    return this;
  }

   /**
   * Get introfiles
   * @return introfiles
  **/
  @javax.annotation.Nullable
  public List<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner> getIntrofiles() {
    return introfiles;
  }

  public void setIntrofiles(List<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner> introfiles) {
    this.introfiles = introfiles;
  }


  public ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner introformat(Integer introformat) {
    this.introformat = introformat;
    return this;
  }

   /**
   * intro format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)
   * @return introformat
  **/
  @javax.annotation.Nullable
  public Integer getIntroformat() {
    return introformat;
  }

  public void setIntroformat(Integer introformat) {
    this.introformat = introformat;
  }


  public ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner lang(String lang) {
    this.lang = lang;
    return this;
  }

   /**
   * Forced activity language
   * @return lang
  **/
  @javax.annotation.Nullable
  public String getLang() {
    return lang;
  }

  public void setLang(String lang) {
    this.lang = lang;
  }


  public ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner mainglossary(Integer mainglossary) {
    this.mainglossary = mainglossary;
    return this;
  }

   /**
   * If enabled this glossary is a main glossary.
   * @return mainglossary
  **/
  @javax.annotation.Nullable
  public Integer getMainglossary() {
    return mainglossary;
  }

  public void setMainglossary(Integer mainglossary) {
    this.mainglossary = mainglossary;
  }


  public ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Activity name
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner rssarticles(Integer rssarticles) {
    this.rssarticles = rssarticles;
    return this;
  }

   /**
   * This setting specifies the number of glossary entry concepts to include in the RSS feed. Between 5 and 20 generally acceptable
   * @return rssarticles
  **/
  @javax.annotation.Nullable
  public Integer getRssarticles() {
    return rssarticles;
  }

  public void setRssarticles(Integer rssarticles) {
    this.rssarticles = rssarticles;
  }


  public ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner rsstype(Integer rsstype) {
    this.rsstype = rsstype;
    return this;
  }

   /**
   * To enable the RSS feed for this activity, select either concepts with author or concepts without author to be included in the feed
   * @return rsstype
  **/
  @javax.annotation.Nullable
  public Integer getRsstype() {
    return rsstype;
  }

  public void setRsstype(Integer rsstype) {
    this.rsstype = rsstype;
  }


  public ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner scale(Integer scale) {
    this.scale = scale;
    return this;
  }

   /**
   * Scale ID
   * @return scale
  **/
  @javax.annotation.Nullable
  public Integer getScale() {
    return scale;
  }

  public void setScale(Integer scale) {
    this.scale = scale;
  }


  public ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner section(Integer section) {
    this.section = section;
    return this;
  }

   /**
   * Course section id
   * @return section
  **/
  @javax.annotation.Nullable
  public Integer getSection() {
    return section;
  }

  public void setSection(Integer section) {
    this.section = section;
  }


  public ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner showall(Integer showall) {
    this.showall = showall;
    return this;
  }

   /**
   * If enabled, participants can browse all entries at once
   * @return showall
  **/
  @javax.annotation.Nullable
  public Integer getShowall() {
    return showall;
  }

  public void setShowall(Integer showall) {
    this.showall = showall;
  }


  public ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner showalphabet(Integer showalphabet) {
    this.showalphabet = showalphabet;
    return this;
  }

   /**
   * If enabled, participants can browse the glossary by letters of the alphabet
   * @return showalphabet
  **/
  @javax.annotation.Nullable
  public Integer getShowalphabet() {
    return showalphabet;
  }

  public void setShowalphabet(Integer showalphabet) {
    this.showalphabet = showalphabet;
  }


  public ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner showspecial(Integer showspecial) {
    this.showspecial = showspecial;
    return this;
  }

   /**
   * If enabled, participants can browse the glossary by special characters, such as @ and #
   * @return showspecial
  **/
  @javax.annotation.Nullable
  public Integer getShowspecial() {
    return showspecial;
  }

  public void setShowspecial(Integer showspecial) {
    this.showspecial = showspecial;
  }


  public ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner timecreated(Integer timecreated) {
    this.timecreated = timecreated;
    return this;
  }

   /**
   * Time created
   * @return timecreated
  **/
  @javax.annotation.Nullable
  public Integer getTimecreated() {
    return timecreated;
  }

  public void setTimecreated(Integer timecreated) {
    this.timecreated = timecreated;
  }


  public ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner timemodified(Integer timemodified) {
    this.timemodified = timemodified;
    return this;
  }

   /**
   * Time modified
   * @return timemodified
  **/
  @javax.annotation.Nullable
  public Integer getTimemodified() {
    return timemodified;
  }

  public void setTimemodified(Integer timemodified) {
    this.timemodified = timemodified;
  }


  public ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner usedynalink(Integer usedynalink) {
    this.usedynalink = usedynalink;
    return this;
  }

   /**
   * If site-wide glossary auto-linking has been enabled by an administrator and this checkbox is ticked, the entry will be automatically linked wherever the concept words and phrases appear throughout the rest of the course.
   * @return usedynalink
  **/
  @javax.annotation.Nullable
  public Integer getUsedynalink() {
    return usedynalink;
  }

  public void setUsedynalink(Integer usedynalink) {
    this.usedynalink = usedynalink;
  }


  public ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner visible(Boolean visible) {
    this.visible = visible;
    return this;
  }

   /**
   * Visible
   * @return visible
  **/
  @javax.annotation.Nullable
  public Boolean getVisible() {
    return visible;
  }

  public void setVisible(Boolean visible) {
    this.visible = visible;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner modGlossaryGetGlossariesByCourses200ResponseGlossariesInner = (ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner) o;
    return Objects.equals(this.allowcomments, modGlossaryGetGlossariesByCourses200ResponseGlossariesInner.allowcomments) &&
        Objects.equals(this.allowduplicatedentries, modGlossaryGetGlossariesByCourses200ResponseGlossariesInner.allowduplicatedentries) &&
        Objects.equals(this.allowprintview, modGlossaryGetGlossariesByCourses200ResponseGlossariesInner.allowprintview) &&
        Objects.equals(this.approvaldisplayformat, modGlossaryGetGlossariesByCourses200ResponseGlossariesInner.approvaldisplayformat) &&
        Objects.equals(this.assessed, modGlossaryGetGlossariesByCourses200ResponseGlossariesInner.assessed) &&
        Objects.equals(this.assesstimefinish, modGlossaryGetGlossariesByCourses200ResponseGlossariesInner.assesstimefinish) &&
        Objects.equals(this.assesstimestart, modGlossaryGetGlossariesByCourses200ResponseGlossariesInner.assesstimestart) &&
        Objects.equals(this.browsemodes, modGlossaryGetGlossariesByCourses200ResponseGlossariesInner.browsemodes) &&
        Objects.equals(this.canaddentry, modGlossaryGetGlossariesByCourses200ResponseGlossariesInner.canaddentry) &&
        Objects.equals(this.completionentries, modGlossaryGetGlossariesByCourses200ResponseGlossariesInner.completionentries) &&
        Objects.equals(this.course, modGlossaryGetGlossariesByCourses200ResponseGlossariesInner.course) &&
        Objects.equals(this.coursemodule, modGlossaryGetGlossariesByCourses200ResponseGlossariesInner.coursemodule) &&
        Objects.equals(this.defaultapproval, modGlossaryGetGlossariesByCourses200ResponseGlossariesInner.defaultapproval) &&
        Objects.equals(this.displayformat, modGlossaryGetGlossariesByCourses200ResponseGlossariesInner.displayformat) &&
        Objects.equals(this.editalways, modGlossaryGetGlossariesByCourses200ResponseGlossariesInner.editalways) &&
        Objects.equals(this.entbypage, modGlossaryGetGlossariesByCourses200ResponseGlossariesInner.entbypage) &&
        Objects.equals(this.globalglossary, modGlossaryGetGlossariesByCourses200ResponseGlossariesInner.globalglossary) &&
        Objects.equals(this.groupingid, modGlossaryGetGlossariesByCourses200ResponseGlossariesInner.groupingid) &&
        Objects.equals(this.groupmode, modGlossaryGetGlossariesByCourses200ResponseGlossariesInner.groupmode) &&
        Objects.equals(this.id, modGlossaryGetGlossariesByCourses200ResponseGlossariesInner.id) &&
        Objects.equals(this.intro, modGlossaryGetGlossariesByCourses200ResponseGlossariesInner.intro) &&
        Objects.equals(this.introfiles, modGlossaryGetGlossariesByCourses200ResponseGlossariesInner.introfiles) &&
        Objects.equals(this.introformat, modGlossaryGetGlossariesByCourses200ResponseGlossariesInner.introformat) &&
        Objects.equals(this.lang, modGlossaryGetGlossariesByCourses200ResponseGlossariesInner.lang) &&
        Objects.equals(this.mainglossary, modGlossaryGetGlossariesByCourses200ResponseGlossariesInner.mainglossary) &&
        Objects.equals(this.name, modGlossaryGetGlossariesByCourses200ResponseGlossariesInner.name) &&
        Objects.equals(this.rssarticles, modGlossaryGetGlossariesByCourses200ResponseGlossariesInner.rssarticles) &&
        Objects.equals(this.rsstype, modGlossaryGetGlossariesByCourses200ResponseGlossariesInner.rsstype) &&
        Objects.equals(this.scale, modGlossaryGetGlossariesByCourses200ResponseGlossariesInner.scale) &&
        Objects.equals(this.section, modGlossaryGetGlossariesByCourses200ResponseGlossariesInner.section) &&
        Objects.equals(this.showall, modGlossaryGetGlossariesByCourses200ResponseGlossariesInner.showall) &&
        Objects.equals(this.showalphabet, modGlossaryGetGlossariesByCourses200ResponseGlossariesInner.showalphabet) &&
        Objects.equals(this.showspecial, modGlossaryGetGlossariesByCourses200ResponseGlossariesInner.showspecial) &&
        Objects.equals(this.timecreated, modGlossaryGetGlossariesByCourses200ResponseGlossariesInner.timecreated) &&
        Objects.equals(this.timemodified, modGlossaryGetGlossariesByCourses200ResponseGlossariesInner.timemodified) &&
        Objects.equals(this.usedynalink, modGlossaryGetGlossariesByCourses200ResponseGlossariesInner.usedynalink) &&
        Objects.equals(this.visible, modGlossaryGetGlossariesByCourses200ResponseGlossariesInner.visible);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowcomments, allowduplicatedentries, allowprintview, approvaldisplayformat, assessed, assesstimefinish, assesstimestart, browsemodes, canaddentry, completionentries, course, coursemodule, defaultapproval, displayformat, editalways, entbypage, globalglossary, groupingid, groupmode, id, intro, introfiles, introformat, lang, mainglossary, name, rssarticles, rsstype, scale, section, showall, showalphabet, showspecial, timecreated, timemodified, usedynalink, visible);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner {\n");
    sb.append("    allowcomments: ").append(toIndentedString(allowcomments)).append("\n");
    sb.append("    allowduplicatedentries: ").append(toIndentedString(allowduplicatedentries)).append("\n");
    sb.append("    allowprintview: ").append(toIndentedString(allowprintview)).append("\n");
    sb.append("    approvaldisplayformat: ").append(toIndentedString(approvaldisplayformat)).append("\n");
    sb.append("    assessed: ").append(toIndentedString(assessed)).append("\n");
    sb.append("    assesstimefinish: ").append(toIndentedString(assesstimefinish)).append("\n");
    sb.append("    assesstimestart: ").append(toIndentedString(assesstimestart)).append("\n");
    sb.append("    browsemodes: ").append(toIndentedString(browsemodes)).append("\n");
    sb.append("    canaddentry: ").append(toIndentedString(canaddentry)).append("\n");
    sb.append("    completionentries: ").append(toIndentedString(completionentries)).append("\n");
    sb.append("    course: ").append(toIndentedString(course)).append("\n");
    sb.append("    coursemodule: ").append(toIndentedString(coursemodule)).append("\n");
    sb.append("    defaultapproval: ").append(toIndentedString(defaultapproval)).append("\n");
    sb.append("    displayformat: ").append(toIndentedString(displayformat)).append("\n");
    sb.append("    editalways: ").append(toIndentedString(editalways)).append("\n");
    sb.append("    entbypage: ").append(toIndentedString(entbypage)).append("\n");
    sb.append("    globalglossary: ").append(toIndentedString(globalglossary)).append("\n");
    sb.append("    groupingid: ").append(toIndentedString(groupingid)).append("\n");
    sb.append("    groupmode: ").append(toIndentedString(groupmode)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    intro: ").append(toIndentedString(intro)).append("\n");
    sb.append("    introfiles: ").append(toIndentedString(introfiles)).append("\n");
    sb.append("    introformat: ").append(toIndentedString(introformat)).append("\n");
    sb.append("    lang: ").append(toIndentedString(lang)).append("\n");
    sb.append("    mainglossary: ").append(toIndentedString(mainglossary)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    rssarticles: ").append(toIndentedString(rssarticles)).append("\n");
    sb.append("    rsstype: ").append(toIndentedString(rsstype)).append("\n");
    sb.append("    scale: ").append(toIndentedString(scale)).append("\n");
    sb.append("    section: ").append(toIndentedString(section)).append("\n");
    sb.append("    showall: ").append(toIndentedString(showall)).append("\n");
    sb.append("    showalphabet: ").append(toIndentedString(showalphabet)).append("\n");
    sb.append("    showspecial: ").append(toIndentedString(showspecial)).append("\n");
    sb.append("    timecreated: ").append(toIndentedString(timecreated)).append("\n");
    sb.append("    timemodified: ").append(toIndentedString(timemodified)).append("\n");
    sb.append("    usedynalink: ").append(toIndentedString(usedynalink)).append("\n");
    sb.append("    visible: ").append(toIndentedString(visible)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowcomments");
    openapiFields.add("allowduplicatedentries");
    openapiFields.add("allowprintview");
    openapiFields.add("approvaldisplayformat");
    openapiFields.add("assessed");
    openapiFields.add("assesstimefinish");
    openapiFields.add("assesstimestart");
    openapiFields.add("browsemodes");
    openapiFields.add("canaddentry");
    openapiFields.add("completionentries");
    openapiFields.add("course");
    openapiFields.add("coursemodule");
    openapiFields.add("defaultapproval");
    openapiFields.add("displayformat");
    openapiFields.add("editalways");
    openapiFields.add("entbypage");
    openapiFields.add("globalglossary");
    openapiFields.add("groupingid");
    openapiFields.add("groupmode");
    openapiFields.add("id");
    openapiFields.add("intro");
    openapiFields.add("introfiles");
    openapiFields.add("introformat");
    openapiFields.add("lang");
    openapiFields.add("mainglossary");
    openapiFields.add("name");
    openapiFields.add("rssarticles");
    openapiFields.add("rsstype");
    openapiFields.add("scale");
    openapiFields.add("section");
    openapiFields.add("showall");
    openapiFields.add("showalphabet");
    openapiFields.add("showspecial");
    openapiFields.add("timecreated");
    openapiFields.add("timemodified");
    openapiFields.add("usedynalink");
    openapiFields.add("visible");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner is not found in the empty JSON string", ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("approvaldisplayformat") != null && !jsonObj.get("approvaldisplayformat").isJsonNull()) && !jsonObj.get("approvaldisplayformat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `approvaldisplayformat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("approvaldisplayformat").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("browsemodes") != null && !jsonObj.get("browsemodes").isJsonNull() && !jsonObj.get("browsemodes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `browsemodes` to be an array in the JSON string but got `%s`", jsonObj.get("browsemodes").toString()));
      }
      if ((jsonObj.get("displayformat") != null && !jsonObj.get("displayformat").isJsonNull()) && !jsonObj.get("displayformat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayformat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayformat").toString()));
      }
      if ((jsonObj.get("intro") != null && !jsonObj.get("intro").isJsonNull()) && !jsonObj.get("intro").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `intro` to be a primitive type in the JSON string but got `%s`", jsonObj.get("intro").toString()));
      }
      if (jsonObj.get("introfiles") != null && !jsonObj.get("introfiles").isJsonNull()) {
        JsonArray jsonArrayintrofiles = jsonObj.getAsJsonArray("introfiles");
        if (jsonArrayintrofiles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("introfiles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `introfiles` to be an array in the JSON string but got `%s`", jsonObj.get("introfiles").toString()));
          }

          // validate the optional field `introfiles` (array)
          for (int i = 0; i < jsonArrayintrofiles.size(); i++) {
            CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner.validateJsonElement(jsonArrayintrofiles.get(i));
          };
        }
      }
      if ((jsonObj.get("lang") != null && !jsonObj.get("lang").isJsonNull()) && !jsonObj.get("lang").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lang` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lang").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner>() {
           @Override
           public void write(JsonWriter out, ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner
  * @throws IOException if the JSON string is invalid with respect to ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner
  */
  public static ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner.class);
  }

 /**
  * Convert an instance of ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

