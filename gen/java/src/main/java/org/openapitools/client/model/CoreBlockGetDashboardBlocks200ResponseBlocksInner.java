/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CoreBlockGetDashboardBlocks200ResponseBlocksInnerConfigsInner;
import org.openapitools.client.model.CoreBlockGetDashboardBlocks200ResponseBlocksInnerContents;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.joshuapare.JSON;

/**
 * Block information.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-18T20:58:28.689161-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class CoreBlockGetDashboardBlocks200ResponseBlocksInner {
  public static final String SERIALIZED_NAME_COLLAPSIBLE = "collapsible";
  @SerializedName(SERIALIZED_NAME_COLLAPSIBLE)
  private Boolean collapsible;

  public static final String SERIALIZED_NAME_CONFIGS = "configs";
  @SerializedName(SERIALIZED_NAME_CONFIGS)
  private List<CoreBlockGetDashboardBlocks200ResponseBlocksInnerConfigsInner> configs = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONTENTS = "contents";
  @SerializedName(SERIALIZED_NAME_CONTENTS)
  private CoreBlockGetDashboardBlocks200ResponseBlocksInnerContents contents;

  public static final String SERIALIZED_NAME_DOCKABLE = "dockable";
  @SerializedName(SERIALIZED_NAME_DOCKABLE)
  private Boolean dockable;

  public static final String SERIALIZED_NAME_INSTANCEID = "instanceid";
  @SerializedName(SERIALIZED_NAME_INSTANCEID)
  private Integer instanceid;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_POSITIONID = "positionid";
  @SerializedName(SERIALIZED_NAME_POSITIONID)
  private Integer positionid;

  public static final String SERIALIZED_NAME_REGION = "region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private String region;

  public static final String SERIALIZED_NAME_VISIBLE = "visible";
  @SerializedName(SERIALIZED_NAME_VISIBLE)
  private Boolean visible;

  public static final String SERIALIZED_NAME_WEIGHT = "weight";
  @SerializedName(SERIALIZED_NAME_WEIGHT)
  private Integer weight;

  public CoreBlockGetDashboardBlocks200ResponseBlocksInner() {
  }

  public CoreBlockGetDashboardBlocks200ResponseBlocksInner collapsible(Boolean collapsible) {
    this.collapsible = collapsible;
    return this;
  }

   /**
   * Whether the block is collapsible.
   * @return collapsible
  **/
  @javax.annotation.Nullable
  public Boolean getCollapsible() {
    return collapsible;
  }

  public void setCollapsible(Boolean collapsible) {
    this.collapsible = collapsible;
  }


  public CoreBlockGetDashboardBlocks200ResponseBlocksInner configs(List<CoreBlockGetDashboardBlocks200ResponseBlocksInnerConfigsInner> configs) {
    this.configs = configs;
    return this;
  }

  public CoreBlockGetDashboardBlocks200ResponseBlocksInner addConfigsItem(CoreBlockGetDashboardBlocks200ResponseBlocksInnerConfigsInner configsItem) {
    if (this.configs == null) {
      this.configs = new ArrayList<>();
    }
    this.configs.add(configsItem);
    return this;
  }

   /**
   * Get configs
   * @return configs
  **/
  @javax.annotation.Nullable
  public List<CoreBlockGetDashboardBlocks200ResponseBlocksInnerConfigsInner> getConfigs() {
    return configs;
  }

  public void setConfigs(List<CoreBlockGetDashboardBlocks200ResponseBlocksInnerConfigsInner> configs) {
    this.configs = configs;
  }


  public CoreBlockGetDashboardBlocks200ResponseBlocksInner contents(CoreBlockGetDashboardBlocks200ResponseBlocksInnerContents contents) {
    this.contents = contents;
    return this;
  }

   /**
   * Get contents
   * @return contents
  **/
  @javax.annotation.Nullable
  public CoreBlockGetDashboardBlocks200ResponseBlocksInnerContents getContents() {
    return contents;
  }

  public void setContents(CoreBlockGetDashboardBlocks200ResponseBlocksInnerContents contents) {
    this.contents = contents;
  }


  public CoreBlockGetDashboardBlocks200ResponseBlocksInner dockable(Boolean dockable) {
    this.dockable = dockable;
    return this;
  }

   /**
   * Whether the block is dockable.
   * @return dockable
  **/
  @javax.annotation.Nullable
  public Boolean getDockable() {
    return dockable;
  }

  public void setDockable(Boolean dockable) {
    this.dockable = dockable;
  }


  public CoreBlockGetDashboardBlocks200ResponseBlocksInner instanceid(Integer instanceid) {
    this.instanceid = instanceid;
    return this;
  }

   /**
   * Block instance id.
   * @return instanceid
  **/
  @javax.annotation.Nullable
  public Integer getInstanceid() {
    return instanceid;
  }

  public void setInstanceid(Integer instanceid) {
    this.instanceid = instanceid;
  }


  public CoreBlockGetDashboardBlocks200ResponseBlocksInner name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Block name.
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CoreBlockGetDashboardBlocks200ResponseBlocksInner positionid(Integer positionid) {
    this.positionid = positionid;
    return this;
  }

   /**
   * Position id.
   * @return positionid
  **/
  @javax.annotation.Nullable
  public Integer getPositionid() {
    return positionid;
  }

  public void setPositionid(Integer positionid) {
    this.positionid = positionid;
  }


  public CoreBlockGetDashboardBlocks200ResponseBlocksInner region(String region) {
    this.region = region;
    return this;
  }

   /**
   * Block region.
   * @return region
  **/
  @javax.annotation.Nullable
  public String getRegion() {
    return region;
  }

  public void setRegion(String region) {
    this.region = region;
  }


  public CoreBlockGetDashboardBlocks200ResponseBlocksInner visible(Boolean visible) {
    this.visible = visible;
    return this;
  }

   /**
   * Whether the block is visible.
   * @return visible
  **/
  @javax.annotation.Nullable
  public Boolean getVisible() {
    return visible;
  }

  public void setVisible(Boolean visible) {
    this.visible = visible;
  }


  public CoreBlockGetDashboardBlocks200ResponseBlocksInner weight(Integer weight) {
    this.weight = weight;
    return this;
  }

   /**
   * Used to order blocks within a region.
   * @return weight
  **/
  @javax.annotation.Nullable
  public Integer getWeight() {
    return weight;
  }

  public void setWeight(Integer weight) {
    this.weight = weight;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CoreBlockGetDashboardBlocks200ResponseBlocksInner coreBlockGetDashboardBlocks200ResponseBlocksInner = (CoreBlockGetDashboardBlocks200ResponseBlocksInner) o;
    return Objects.equals(this.collapsible, coreBlockGetDashboardBlocks200ResponseBlocksInner.collapsible) &&
        Objects.equals(this.configs, coreBlockGetDashboardBlocks200ResponseBlocksInner.configs) &&
        Objects.equals(this.contents, coreBlockGetDashboardBlocks200ResponseBlocksInner.contents) &&
        Objects.equals(this.dockable, coreBlockGetDashboardBlocks200ResponseBlocksInner.dockable) &&
        Objects.equals(this.instanceid, coreBlockGetDashboardBlocks200ResponseBlocksInner.instanceid) &&
        Objects.equals(this.name, coreBlockGetDashboardBlocks200ResponseBlocksInner.name) &&
        Objects.equals(this.positionid, coreBlockGetDashboardBlocks200ResponseBlocksInner.positionid) &&
        Objects.equals(this.region, coreBlockGetDashboardBlocks200ResponseBlocksInner.region) &&
        Objects.equals(this.visible, coreBlockGetDashboardBlocks200ResponseBlocksInner.visible) &&
        Objects.equals(this.weight, coreBlockGetDashboardBlocks200ResponseBlocksInner.weight);
  }

  @Override
  public int hashCode() {
    return Objects.hash(collapsible, configs, contents, dockable, instanceid, name, positionid, region, visible, weight);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CoreBlockGetDashboardBlocks200ResponseBlocksInner {\n");
    sb.append("    collapsible: ").append(toIndentedString(collapsible)).append("\n");
    sb.append("    configs: ").append(toIndentedString(configs)).append("\n");
    sb.append("    contents: ").append(toIndentedString(contents)).append("\n");
    sb.append("    dockable: ").append(toIndentedString(dockable)).append("\n");
    sb.append("    instanceid: ").append(toIndentedString(instanceid)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    positionid: ").append(toIndentedString(positionid)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    visible: ").append(toIndentedString(visible)).append("\n");
    sb.append("    weight: ").append(toIndentedString(weight)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("collapsible");
    openapiFields.add("configs");
    openapiFields.add("contents");
    openapiFields.add("dockable");
    openapiFields.add("instanceid");
    openapiFields.add("name");
    openapiFields.add("positionid");
    openapiFields.add("region");
    openapiFields.add("visible");
    openapiFields.add("weight");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CoreBlockGetDashboardBlocks200ResponseBlocksInner
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CoreBlockGetDashboardBlocks200ResponseBlocksInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CoreBlockGetDashboardBlocks200ResponseBlocksInner is not found in the empty JSON string", CoreBlockGetDashboardBlocks200ResponseBlocksInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CoreBlockGetDashboardBlocks200ResponseBlocksInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CoreBlockGetDashboardBlocks200ResponseBlocksInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("configs") != null && !jsonObj.get("configs").isJsonNull()) {
        JsonArray jsonArrayconfigs = jsonObj.getAsJsonArray("configs");
        if (jsonArrayconfigs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("configs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `configs` to be an array in the JSON string but got `%s`", jsonObj.get("configs").toString()));
          }

          // validate the optional field `configs` (array)
          for (int i = 0; i < jsonArrayconfigs.size(); i++) {
            CoreBlockGetDashboardBlocks200ResponseBlocksInnerConfigsInner.validateJsonElement(jsonArrayconfigs.get(i));
          };
        }
      }
      // validate the optional field `contents`
      if (jsonObj.get("contents") != null && !jsonObj.get("contents").isJsonNull()) {
        CoreBlockGetDashboardBlocks200ResponseBlocksInnerContents.validateJsonElement(jsonObj.get("contents"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("region") != null && !jsonObj.get("region").isJsonNull()) && !jsonObj.get("region").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `region` to be a primitive type in the JSON string but got `%s`", jsonObj.get("region").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CoreBlockGetDashboardBlocks200ResponseBlocksInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CoreBlockGetDashboardBlocks200ResponseBlocksInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CoreBlockGetDashboardBlocks200ResponseBlocksInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CoreBlockGetDashboardBlocks200ResponseBlocksInner.class));

       return (TypeAdapter<T>) new TypeAdapter<CoreBlockGetDashboardBlocks200ResponseBlocksInner>() {
           @Override
           public void write(JsonWriter out, CoreBlockGetDashboardBlocks200ResponseBlocksInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CoreBlockGetDashboardBlocks200ResponseBlocksInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CoreBlockGetDashboardBlocks200ResponseBlocksInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CoreBlockGetDashboardBlocks200ResponseBlocksInner
  * @throws IOException if the JSON string is invalid with respect to CoreBlockGetDashboardBlocks200ResponseBlocksInner
  */
  public static CoreBlockGetDashboardBlocks200ResponseBlocksInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CoreBlockGetDashboardBlocks200ResponseBlocksInner.class);
  }

 /**
  * Convert an instance of CoreBlockGetDashboardBlocks200ResponseBlocksInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

