/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerAction;
import org.openapitools.client.model.CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCategory;
import org.openapitools.client.model.CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse;
import org.openapitools.client.model.CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerIcon;
import org.openapitools.client.model.CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerSubscription;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.joshuapare.JSON;

/**
 * CoreCalendarGetCalendarEventById200ResponseEvent
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-18T14:00:07.069642-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class CoreCalendarGetCalendarEventById200ResponseEvent {
  public static final String SERIALIZED_NAME_ACTION = "action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerAction action;

  public static final String SERIALIZED_NAME_ACTIVITYNAME = "activityname";
  @SerializedName(SERIALIZED_NAME_ACTIVITYNAME)
  private String activityname;

  public static final String SERIALIZED_NAME_ACTIVITYSTR = "activitystr";
  @SerializedName(SERIALIZED_NAME_ACTIVITYSTR)
  private String activitystr;

  public static final String SERIALIZED_NAME_CANDELETE = "candelete";
  @SerializedName(SERIALIZED_NAME_CANDELETE)
  private Boolean candelete;

  public static final String SERIALIZED_NAME_CANEDIT = "canedit";
  @SerializedName(SERIALIZED_NAME_CANEDIT)
  private Boolean canedit;

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCategory category;

  public static final String SERIALIZED_NAME_CATEGORYID = "categoryid";
  @SerializedName(SERIALIZED_NAME_CATEGORYID)
  private Integer categoryid;

  public static final String SERIALIZED_NAME_COMPONENT = "component";
  @SerializedName(SERIALIZED_NAME_COMPONENT)
  private String component;

  public static final String SERIALIZED_NAME_COURSE = "course";
  @SerializedName(SERIALIZED_NAME_COURSE)
  private CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse course;

  public static final String SERIALIZED_NAME_DELETEURL = "deleteurl";
  @SerializedName(SERIALIZED_NAME_DELETEURL)
  private String deleteurl;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DESCRIPTIONFORMAT = "descriptionformat";
  @SerializedName(SERIALIZED_NAME_DESCRIPTIONFORMAT)
  private Integer descriptionformat = 1;

  public static final String SERIALIZED_NAME_EDITURL = "editurl";
  @SerializedName(SERIALIZED_NAME_EDITURL)
  private String editurl;

  public static final String SERIALIZED_NAME_EVENTCOUNT = "eventcount";
  @SerializedName(SERIALIZED_NAME_EVENTCOUNT)
  private Integer eventcount;

  public static final String SERIALIZED_NAME_EVENTTYPE = "eventtype";
  @SerializedName(SERIALIZED_NAME_EVENTTYPE)
  private String eventtype;

  public static final String SERIALIZED_NAME_FORMATTEDLOCATION = "formattedlocation";
  @SerializedName(SERIALIZED_NAME_FORMATTEDLOCATION)
  private String formattedlocation;

  public static final String SERIALIZED_NAME_FORMATTEDTIME = "formattedtime";
  @SerializedName(SERIALIZED_NAME_FORMATTEDTIME)
  private String formattedtime;

  public static final String SERIALIZED_NAME_GROUPID = "groupid";
  @SerializedName(SERIALIZED_NAME_GROUPID)
  private Integer groupid;

  public static final String SERIALIZED_NAME_GROUPNAME = "groupname";
  @SerializedName(SERIALIZED_NAME_GROUPNAME)
  private String groupname;

  public static final String SERIALIZED_NAME_ICON = "icon";
  @SerializedName(SERIALIZED_NAME_ICON)
  private CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerIcon icon;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_INSTANCE = "instance";
  @SerializedName(SERIALIZED_NAME_INSTANCE)
  private Integer instance;

  public static final String SERIALIZED_NAME_ISACTIONEVENT = "isactionevent";
  @SerializedName(SERIALIZED_NAME_ISACTIONEVENT)
  private Boolean isactionevent;

  public static final String SERIALIZED_NAME_ISCATEGORYEVENT = "iscategoryevent";
  @SerializedName(SERIALIZED_NAME_ISCATEGORYEVENT)
  private Boolean iscategoryevent;

  public static final String SERIALIZED_NAME_ISCOURSEEVENT = "iscourseevent";
  @SerializedName(SERIALIZED_NAME_ISCOURSEEVENT)
  private Boolean iscourseevent;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  public static final String SERIALIZED_NAME_MODULENAME = "modulename";
  @SerializedName(SERIALIZED_NAME_MODULENAME)
  private String modulename;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NORMALISEDEVENTTYPE = "normalisedeventtype";
  @SerializedName(SERIALIZED_NAME_NORMALISEDEVENTTYPE)
  private String normalisedeventtype;

  public static final String SERIALIZED_NAME_NORMALISEDEVENTTYPETEXT = "normalisedeventtypetext";
  @SerializedName(SERIALIZED_NAME_NORMALISEDEVENTTYPETEXT)
  private String normalisedeventtypetext;

  public static final String SERIALIZED_NAME_OVERDUE = "overdue";
  @SerializedName(SERIALIZED_NAME_OVERDUE)
  private Boolean overdue = false;

  public static final String SERIALIZED_NAME_PURPOSE = "purpose";
  @SerializedName(SERIALIZED_NAME_PURPOSE)
  private String purpose;

  public static final String SERIALIZED_NAME_REPEATID = "repeatid";
  @SerializedName(SERIALIZED_NAME_REPEATID)
  private Integer repeatid;

  public static final String SERIALIZED_NAME_SUBSCRIPTION = "subscription";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION)
  private CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerSubscription subscription;

  public static final String SERIALIZED_NAME_TIMEDURATION = "timeduration";
  @SerializedName(SERIALIZED_NAME_TIMEDURATION)
  private Integer timeduration;

  public static final String SERIALIZED_NAME_TIMEMODIFIED = "timemodified";
  @SerializedName(SERIALIZED_NAME_TIMEMODIFIED)
  private Integer timemodified;

  public static final String SERIALIZED_NAME_TIMESORT = "timesort";
  @SerializedName(SERIALIZED_NAME_TIMESORT)
  private Integer timesort;

  public static final String SERIALIZED_NAME_TIMESTART = "timestart";
  @SerializedName(SERIALIZED_NAME_TIMESTART)
  private Integer timestart;

  public static final String SERIALIZED_NAME_TIMEUSERMIDNIGHT = "timeusermidnight";
  @SerializedName(SERIALIZED_NAME_TIMEUSERMIDNIGHT)
  private Integer timeusermidnight;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_USERID = "userid";
  @SerializedName(SERIALIZED_NAME_USERID)
  private Integer userid;

  public static final String SERIALIZED_NAME_VIEWURL = "viewurl";
  @SerializedName(SERIALIZED_NAME_VIEWURL)
  private String viewurl;

  public static final String SERIALIZED_NAME_VISIBLE = "visible";
  @SerializedName(SERIALIZED_NAME_VISIBLE)
  private Integer visible;

  public CoreCalendarGetCalendarEventById200ResponseEvent() {
  }

  public CoreCalendarGetCalendarEventById200ResponseEvent action(CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerAction action) {
    this.action = action;
    return this;
  }

   /**
   * Get action
   * @return action
  **/
  @javax.annotation.Nullable
  public CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerAction getAction() {
    return action;
  }

  public void setAction(CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerAction action) {
    this.action = action;
  }


  public CoreCalendarGetCalendarEventById200ResponseEvent activityname(String activityname) {
    this.activityname = activityname;
    return this;
  }

   /**
   * activityname
   * @return activityname
  **/
  @javax.annotation.Nullable
  public String getActivityname() {
    return activityname;
  }

  public void setActivityname(String activityname) {
    this.activityname = activityname;
  }


  public CoreCalendarGetCalendarEventById200ResponseEvent activitystr(String activitystr) {
    this.activitystr = activitystr;
    return this;
  }

   /**
   * activitystr
   * @return activitystr
  **/
  @javax.annotation.Nullable
  public String getActivitystr() {
    return activitystr;
  }

  public void setActivitystr(String activitystr) {
    this.activitystr = activitystr;
  }


  public CoreCalendarGetCalendarEventById200ResponseEvent candelete(Boolean candelete) {
    this.candelete = candelete;
    return this;
  }

   /**
   * candelete
   * @return candelete
  **/
  @javax.annotation.Nonnull
  public Boolean getCandelete() {
    return candelete;
  }

  public void setCandelete(Boolean candelete) {
    this.candelete = candelete;
  }


  public CoreCalendarGetCalendarEventById200ResponseEvent canedit(Boolean canedit) {
    this.canedit = canedit;
    return this;
  }

   /**
   * canedit
   * @return canedit
  **/
  @javax.annotation.Nonnull
  public Boolean getCanedit() {
    return canedit;
  }

  public void setCanedit(Boolean canedit) {
    this.canedit = canedit;
  }


  public CoreCalendarGetCalendarEventById200ResponseEvent category(CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCategory category) {
    this.category = category;
    return this;
  }

   /**
   * Get category
   * @return category
  **/
  @javax.annotation.Nullable
  public CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCategory getCategory() {
    return category;
  }

  public void setCategory(CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCategory category) {
    this.category = category;
  }


  public CoreCalendarGetCalendarEventById200ResponseEvent categoryid(Integer categoryid) {
    this.categoryid = categoryid;
    return this;
  }

   /**
   * categoryid
   * @return categoryid
  **/
  @javax.annotation.Nullable
  public Integer getCategoryid() {
    return categoryid;
  }

  public void setCategoryid(Integer categoryid) {
    this.categoryid = categoryid;
  }


  public CoreCalendarGetCalendarEventById200ResponseEvent component(String component) {
    this.component = component;
    return this;
  }

   /**
   * component
   * @return component
  **/
  @javax.annotation.Nullable
  public String getComponent() {
    return component;
  }

  public void setComponent(String component) {
    this.component = component;
  }


  public CoreCalendarGetCalendarEventById200ResponseEvent course(CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse course) {
    this.course = course;
    return this;
  }

   /**
   * Get course
   * @return course
  **/
  @javax.annotation.Nullable
  public CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse getCourse() {
    return course;
  }

  public void setCourse(CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse course) {
    this.course = course;
  }


  public CoreCalendarGetCalendarEventById200ResponseEvent deleteurl(String deleteurl) {
    this.deleteurl = deleteurl;
    return this;
  }

   /**
   * deleteurl
   * @return deleteurl
  **/
  @javax.annotation.Nonnull
  public String getDeleteurl() {
    return deleteurl;
  }

  public void setDeleteurl(String deleteurl) {
    this.deleteurl = deleteurl;
  }


  public CoreCalendarGetCalendarEventById200ResponseEvent description(String description) {
    this.description = description;
    return this;
  }

   /**
   * description
   * @return description
  **/
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CoreCalendarGetCalendarEventById200ResponseEvent descriptionformat(Integer descriptionformat) {
    this.descriptionformat = descriptionformat;
    return this;
  }

   /**
   * description format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)
   * @return descriptionformat
  **/
  @javax.annotation.Nullable
  public Integer getDescriptionformat() {
    return descriptionformat;
  }

  public void setDescriptionformat(Integer descriptionformat) {
    this.descriptionformat = descriptionformat;
  }


  public CoreCalendarGetCalendarEventById200ResponseEvent editurl(String editurl) {
    this.editurl = editurl;
    return this;
  }

   /**
   * editurl
   * @return editurl
  **/
  @javax.annotation.Nonnull
  public String getEditurl() {
    return editurl;
  }

  public void setEditurl(String editurl) {
    this.editurl = editurl;
  }


  public CoreCalendarGetCalendarEventById200ResponseEvent eventcount(Integer eventcount) {
    this.eventcount = eventcount;
    return this;
  }

   /**
   * eventcount
   * @return eventcount
  **/
  @javax.annotation.Nullable
  public Integer getEventcount() {
    return eventcount;
  }

  public void setEventcount(Integer eventcount) {
    this.eventcount = eventcount;
  }


  public CoreCalendarGetCalendarEventById200ResponseEvent eventtype(String eventtype) {
    this.eventtype = eventtype;
    return this;
  }

   /**
   * eventtype
   * @return eventtype
  **/
  @javax.annotation.Nonnull
  public String getEventtype() {
    return eventtype;
  }

  public void setEventtype(String eventtype) {
    this.eventtype = eventtype;
  }


  public CoreCalendarGetCalendarEventById200ResponseEvent formattedlocation(String formattedlocation) {
    this.formattedlocation = formattedlocation;
    return this;
  }

   /**
   * formattedlocation
   * @return formattedlocation
  **/
  @javax.annotation.Nonnull
  public String getFormattedlocation() {
    return formattedlocation;
  }

  public void setFormattedlocation(String formattedlocation) {
    this.formattedlocation = formattedlocation;
  }


  public CoreCalendarGetCalendarEventById200ResponseEvent formattedtime(String formattedtime) {
    this.formattedtime = formattedtime;
    return this;
  }

   /**
   * formattedtime
   * @return formattedtime
  **/
  @javax.annotation.Nonnull
  public String getFormattedtime() {
    return formattedtime;
  }

  public void setFormattedtime(String formattedtime) {
    this.formattedtime = formattedtime;
  }


  public CoreCalendarGetCalendarEventById200ResponseEvent groupid(Integer groupid) {
    this.groupid = groupid;
    return this;
  }

   /**
   * groupid
   * @return groupid
  **/
  @javax.annotation.Nullable
  public Integer getGroupid() {
    return groupid;
  }

  public void setGroupid(Integer groupid) {
    this.groupid = groupid;
  }


  public CoreCalendarGetCalendarEventById200ResponseEvent groupname(String groupname) {
    this.groupname = groupname;
    return this;
  }

   /**
   * groupname
   * @return groupname
  **/
  @javax.annotation.Nullable
  public String getGroupname() {
    return groupname;
  }

  public void setGroupname(String groupname) {
    this.groupname = groupname;
  }


  public CoreCalendarGetCalendarEventById200ResponseEvent icon(CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerIcon icon) {
    this.icon = icon;
    return this;
  }

   /**
   * Get icon
   * @return icon
  **/
  @javax.annotation.Nonnull
  public CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerIcon getIcon() {
    return icon;
  }

  public void setIcon(CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerIcon icon) {
    this.icon = icon;
  }


  public CoreCalendarGetCalendarEventById200ResponseEvent id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * id
   * @return id
  **/
  @javax.annotation.Nonnull
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public CoreCalendarGetCalendarEventById200ResponseEvent instance(Integer instance) {
    this.instance = instance;
    return this;
  }

   /**
   * instance
   * @return instance
  **/
  @javax.annotation.Nullable
  public Integer getInstance() {
    return instance;
  }

  public void setInstance(Integer instance) {
    this.instance = instance;
  }


  public CoreCalendarGetCalendarEventById200ResponseEvent isactionevent(Boolean isactionevent) {
    this.isactionevent = isactionevent;
    return this;
  }

   /**
   * isactionevent
   * @return isactionevent
  **/
  @javax.annotation.Nonnull
  public Boolean getIsactionevent() {
    return isactionevent;
  }

  public void setIsactionevent(Boolean isactionevent) {
    this.isactionevent = isactionevent;
  }


  public CoreCalendarGetCalendarEventById200ResponseEvent iscategoryevent(Boolean iscategoryevent) {
    this.iscategoryevent = iscategoryevent;
    return this;
  }

   /**
   * iscategoryevent
   * @return iscategoryevent
  **/
  @javax.annotation.Nonnull
  public Boolean getIscategoryevent() {
    return iscategoryevent;
  }

  public void setIscategoryevent(Boolean iscategoryevent) {
    this.iscategoryevent = iscategoryevent;
  }


  public CoreCalendarGetCalendarEventById200ResponseEvent iscourseevent(Boolean iscourseevent) {
    this.iscourseevent = iscourseevent;
    return this;
  }

   /**
   * iscourseevent
   * @return iscourseevent
  **/
  @javax.annotation.Nonnull
  public Boolean getIscourseevent() {
    return iscourseevent;
  }

  public void setIscourseevent(Boolean iscourseevent) {
    this.iscourseevent = iscourseevent;
  }


  public CoreCalendarGetCalendarEventById200ResponseEvent location(String location) {
    this.location = location;
    return this;
  }

   /**
   * location
   * @return location
  **/
  @javax.annotation.Nullable
  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }


  public CoreCalendarGetCalendarEventById200ResponseEvent modulename(String modulename) {
    this.modulename = modulename;
    return this;
  }

   /**
   * modulename
   * @return modulename
  **/
  @javax.annotation.Nullable
  public String getModulename() {
    return modulename;
  }

  public void setModulename(String modulename) {
    this.modulename = modulename;
  }


  public CoreCalendarGetCalendarEventById200ResponseEvent name(String name) {
    this.name = name;
    return this;
  }

   /**
   * name
   * @return name
  **/
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CoreCalendarGetCalendarEventById200ResponseEvent normalisedeventtype(String normalisedeventtype) {
    this.normalisedeventtype = normalisedeventtype;
    return this;
  }

   /**
   * normalisedeventtype
   * @return normalisedeventtype
  **/
  @javax.annotation.Nonnull
  public String getNormalisedeventtype() {
    return normalisedeventtype;
  }

  public void setNormalisedeventtype(String normalisedeventtype) {
    this.normalisedeventtype = normalisedeventtype;
  }


  public CoreCalendarGetCalendarEventById200ResponseEvent normalisedeventtypetext(String normalisedeventtypetext) {
    this.normalisedeventtypetext = normalisedeventtypetext;
    return this;
  }

   /**
   * normalisedeventtypetext
   * @return normalisedeventtypetext
  **/
  @javax.annotation.Nonnull
  public String getNormalisedeventtypetext() {
    return normalisedeventtypetext;
  }

  public void setNormalisedeventtypetext(String normalisedeventtypetext) {
    this.normalisedeventtypetext = normalisedeventtypetext;
  }


  public CoreCalendarGetCalendarEventById200ResponseEvent overdue(Boolean overdue) {
    this.overdue = overdue;
    return this;
  }

   /**
   * overdue
   * @return overdue
  **/
  @javax.annotation.Nullable
  public Boolean getOverdue() {
    return overdue;
  }

  public void setOverdue(Boolean overdue) {
    this.overdue = overdue;
  }


  public CoreCalendarGetCalendarEventById200ResponseEvent purpose(String purpose) {
    this.purpose = purpose;
    return this;
  }

   /**
   * purpose
   * @return purpose
  **/
  @javax.annotation.Nonnull
  public String getPurpose() {
    return purpose;
  }

  public void setPurpose(String purpose) {
    this.purpose = purpose;
  }


  public CoreCalendarGetCalendarEventById200ResponseEvent repeatid(Integer repeatid) {
    this.repeatid = repeatid;
    return this;
  }

   /**
   * repeatid
   * @return repeatid
  **/
  @javax.annotation.Nullable
  public Integer getRepeatid() {
    return repeatid;
  }

  public void setRepeatid(Integer repeatid) {
    this.repeatid = repeatid;
  }


  public CoreCalendarGetCalendarEventById200ResponseEvent subscription(CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerSubscription subscription) {
    this.subscription = subscription;
    return this;
  }

   /**
   * Get subscription
   * @return subscription
  **/
  @javax.annotation.Nullable
  public CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerSubscription getSubscription() {
    return subscription;
  }

  public void setSubscription(CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerSubscription subscription) {
    this.subscription = subscription;
  }


  public CoreCalendarGetCalendarEventById200ResponseEvent timeduration(Integer timeduration) {
    this.timeduration = timeduration;
    return this;
  }

   /**
   * timeduration
   * @return timeduration
  **/
  @javax.annotation.Nonnull
  public Integer getTimeduration() {
    return timeduration;
  }

  public void setTimeduration(Integer timeduration) {
    this.timeduration = timeduration;
  }


  public CoreCalendarGetCalendarEventById200ResponseEvent timemodified(Integer timemodified) {
    this.timemodified = timemodified;
    return this;
  }

   /**
   * timemodified
   * @return timemodified
  **/
  @javax.annotation.Nonnull
  public Integer getTimemodified() {
    return timemodified;
  }

  public void setTimemodified(Integer timemodified) {
    this.timemodified = timemodified;
  }


  public CoreCalendarGetCalendarEventById200ResponseEvent timesort(Integer timesort) {
    this.timesort = timesort;
    return this;
  }

   /**
   * timesort
   * @return timesort
  **/
  @javax.annotation.Nonnull
  public Integer getTimesort() {
    return timesort;
  }

  public void setTimesort(Integer timesort) {
    this.timesort = timesort;
  }


  public CoreCalendarGetCalendarEventById200ResponseEvent timestart(Integer timestart) {
    this.timestart = timestart;
    return this;
  }

   /**
   * timestart
   * @return timestart
  **/
  @javax.annotation.Nonnull
  public Integer getTimestart() {
    return timestart;
  }

  public void setTimestart(Integer timestart) {
    this.timestart = timestart;
  }


  public CoreCalendarGetCalendarEventById200ResponseEvent timeusermidnight(Integer timeusermidnight) {
    this.timeusermidnight = timeusermidnight;
    return this;
  }

   /**
   * timeusermidnight
   * @return timeusermidnight
  **/
  @javax.annotation.Nonnull
  public Integer getTimeusermidnight() {
    return timeusermidnight;
  }

  public void setTimeusermidnight(Integer timeusermidnight) {
    this.timeusermidnight = timeusermidnight;
  }


  public CoreCalendarGetCalendarEventById200ResponseEvent url(String url) {
    this.url = url;
    return this;
  }

   /**
   * url
   * @return url
  **/
  @javax.annotation.Nonnull
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public CoreCalendarGetCalendarEventById200ResponseEvent userid(Integer userid) {
    this.userid = userid;
    return this;
  }

   /**
   * userid
   * @return userid
  **/
  @javax.annotation.Nullable
  public Integer getUserid() {
    return userid;
  }

  public void setUserid(Integer userid) {
    this.userid = userid;
  }


  public CoreCalendarGetCalendarEventById200ResponseEvent viewurl(String viewurl) {
    this.viewurl = viewurl;
    return this;
  }

   /**
   * viewurl
   * @return viewurl
  **/
  @javax.annotation.Nonnull
  public String getViewurl() {
    return viewurl;
  }

  public void setViewurl(String viewurl) {
    this.viewurl = viewurl;
  }


  public CoreCalendarGetCalendarEventById200ResponseEvent visible(Integer visible) {
    this.visible = visible;
    return this;
  }

   /**
   * visible
   * @return visible
  **/
  @javax.annotation.Nonnull
  public Integer getVisible() {
    return visible;
  }

  public void setVisible(Integer visible) {
    this.visible = visible;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CoreCalendarGetCalendarEventById200ResponseEvent coreCalendarGetCalendarEventById200ResponseEvent = (CoreCalendarGetCalendarEventById200ResponseEvent) o;
    return Objects.equals(this.action, coreCalendarGetCalendarEventById200ResponseEvent.action) &&
        Objects.equals(this.activityname, coreCalendarGetCalendarEventById200ResponseEvent.activityname) &&
        Objects.equals(this.activitystr, coreCalendarGetCalendarEventById200ResponseEvent.activitystr) &&
        Objects.equals(this.candelete, coreCalendarGetCalendarEventById200ResponseEvent.candelete) &&
        Objects.equals(this.canedit, coreCalendarGetCalendarEventById200ResponseEvent.canedit) &&
        Objects.equals(this.category, coreCalendarGetCalendarEventById200ResponseEvent.category) &&
        Objects.equals(this.categoryid, coreCalendarGetCalendarEventById200ResponseEvent.categoryid) &&
        Objects.equals(this.component, coreCalendarGetCalendarEventById200ResponseEvent.component) &&
        Objects.equals(this.course, coreCalendarGetCalendarEventById200ResponseEvent.course) &&
        Objects.equals(this.deleteurl, coreCalendarGetCalendarEventById200ResponseEvent.deleteurl) &&
        Objects.equals(this.description, coreCalendarGetCalendarEventById200ResponseEvent.description) &&
        Objects.equals(this.descriptionformat, coreCalendarGetCalendarEventById200ResponseEvent.descriptionformat) &&
        Objects.equals(this.editurl, coreCalendarGetCalendarEventById200ResponseEvent.editurl) &&
        Objects.equals(this.eventcount, coreCalendarGetCalendarEventById200ResponseEvent.eventcount) &&
        Objects.equals(this.eventtype, coreCalendarGetCalendarEventById200ResponseEvent.eventtype) &&
        Objects.equals(this.formattedlocation, coreCalendarGetCalendarEventById200ResponseEvent.formattedlocation) &&
        Objects.equals(this.formattedtime, coreCalendarGetCalendarEventById200ResponseEvent.formattedtime) &&
        Objects.equals(this.groupid, coreCalendarGetCalendarEventById200ResponseEvent.groupid) &&
        Objects.equals(this.groupname, coreCalendarGetCalendarEventById200ResponseEvent.groupname) &&
        Objects.equals(this.icon, coreCalendarGetCalendarEventById200ResponseEvent.icon) &&
        Objects.equals(this.id, coreCalendarGetCalendarEventById200ResponseEvent.id) &&
        Objects.equals(this.instance, coreCalendarGetCalendarEventById200ResponseEvent.instance) &&
        Objects.equals(this.isactionevent, coreCalendarGetCalendarEventById200ResponseEvent.isactionevent) &&
        Objects.equals(this.iscategoryevent, coreCalendarGetCalendarEventById200ResponseEvent.iscategoryevent) &&
        Objects.equals(this.iscourseevent, coreCalendarGetCalendarEventById200ResponseEvent.iscourseevent) &&
        Objects.equals(this.location, coreCalendarGetCalendarEventById200ResponseEvent.location) &&
        Objects.equals(this.modulename, coreCalendarGetCalendarEventById200ResponseEvent.modulename) &&
        Objects.equals(this.name, coreCalendarGetCalendarEventById200ResponseEvent.name) &&
        Objects.equals(this.normalisedeventtype, coreCalendarGetCalendarEventById200ResponseEvent.normalisedeventtype) &&
        Objects.equals(this.normalisedeventtypetext, coreCalendarGetCalendarEventById200ResponseEvent.normalisedeventtypetext) &&
        Objects.equals(this.overdue, coreCalendarGetCalendarEventById200ResponseEvent.overdue) &&
        Objects.equals(this.purpose, coreCalendarGetCalendarEventById200ResponseEvent.purpose) &&
        Objects.equals(this.repeatid, coreCalendarGetCalendarEventById200ResponseEvent.repeatid) &&
        Objects.equals(this.subscription, coreCalendarGetCalendarEventById200ResponseEvent.subscription) &&
        Objects.equals(this.timeduration, coreCalendarGetCalendarEventById200ResponseEvent.timeduration) &&
        Objects.equals(this.timemodified, coreCalendarGetCalendarEventById200ResponseEvent.timemodified) &&
        Objects.equals(this.timesort, coreCalendarGetCalendarEventById200ResponseEvent.timesort) &&
        Objects.equals(this.timestart, coreCalendarGetCalendarEventById200ResponseEvent.timestart) &&
        Objects.equals(this.timeusermidnight, coreCalendarGetCalendarEventById200ResponseEvent.timeusermidnight) &&
        Objects.equals(this.url, coreCalendarGetCalendarEventById200ResponseEvent.url) &&
        Objects.equals(this.userid, coreCalendarGetCalendarEventById200ResponseEvent.userid) &&
        Objects.equals(this.viewurl, coreCalendarGetCalendarEventById200ResponseEvent.viewurl) &&
        Objects.equals(this.visible, coreCalendarGetCalendarEventById200ResponseEvent.visible);
  }

  @Override
  public int hashCode() {
    return Objects.hash(action, activityname, activitystr, candelete, canedit, category, categoryid, component, course, deleteurl, description, descriptionformat, editurl, eventcount, eventtype, formattedlocation, formattedtime, groupid, groupname, icon, id, instance, isactionevent, iscategoryevent, iscourseevent, location, modulename, name, normalisedeventtype, normalisedeventtypetext, overdue, purpose, repeatid, subscription, timeduration, timemodified, timesort, timestart, timeusermidnight, url, userid, viewurl, visible);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CoreCalendarGetCalendarEventById200ResponseEvent {\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    activityname: ").append(toIndentedString(activityname)).append("\n");
    sb.append("    activitystr: ").append(toIndentedString(activitystr)).append("\n");
    sb.append("    candelete: ").append(toIndentedString(candelete)).append("\n");
    sb.append("    canedit: ").append(toIndentedString(canedit)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    categoryid: ").append(toIndentedString(categoryid)).append("\n");
    sb.append("    component: ").append(toIndentedString(component)).append("\n");
    sb.append("    course: ").append(toIndentedString(course)).append("\n");
    sb.append("    deleteurl: ").append(toIndentedString(deleteurl)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    descriptionformat: ").append(toIndentedString(descriptionformat)).append("\n");
    sb.append("    editurl: ").append(toIndentedString(editurl)).append("\n");
    sb.append("    eventcount: ").append(toIndentedString(eventcount)).append("\n");
    sb.append("    eventtype: ").append(toIndentedString(eventtype)).append("\n");
    sb.append("    formattedlocation: ").append(toIndentedString(formattedlocation)).append("\n");
    sb.append("    formattedtime: ").append(toIndentedString(formattedtime)).append("\n");
    sb.append("    groupid: ").append(toIndentedString(groupid)).append("\n");
    sb.append("    groupname: ").append(toIndentedString(groupname)).append("\n");
    sb.append("    icon: ").append(toIndentedString(icon)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    instance: ").append(toIndentedString(instance)).append("\n");
    sb.append("    isactionevent: ").append(toIndentedString(isactionevent)).append("\n");
    sb.append("    iscategoryevent: ").append(toIndentedString(iscategoryevent)).append("\n");
    sb.append("    iscourseevent: ").append(toIndentedString(iscourseevent)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    modulename: ").append(toIndentedString(modulename)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    normalisedeventtype: ").append(toIndentedString(normalisedeventtype)).append("\n");
    sb.append("    normalisedeventtypetext: ").append(toIndentedString(normalisedeventtypetext)).append("\n");
    sb.append("    overdue: ").append(toIndentedString(overdue)).append("\n");
    sb.append("    purpose: ").append(toIndentedString(purpose)).append("\n");
    sb.append("    repeatid: ").append(toIndentedString(repeatid)).append("\n");
    sb.append("    subscription: ").append(toIndentedString(subscription)).append("\n");
    sb.append("    timeduration: ").append(toIndentedString(timeduration)).append("\n");
    sb.append("    timemodified: ").append(toIndentedString(timemodified)).append("\n");
    sb.append("    timesort: ").append(toIndentedString(timesort)).append("\n");
    sb.append("    timestart: ").append(toIndentedString(timestart)).append("\n");
    sb.append("    timeusermidnight: ").append(toIndentedString(timeusermidnight)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    userid: ").append(toIndentedString(userid)).append("\n");
    sb.append("    viewurl: ").append(toIndentedString(viewurl)).append("\n");
    sb.append("    visible: ").append(toIndentedString(visible)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("action");
    openapiFields.add("activityname");
    openapiFields.add("activitystr");
    openapiFields.add("candelete");
    openapiFields.add("canedit");
    openapiFields.add("category");
    openapiFields.add("categoryid");
    openapiFields.add("component");
    openapiFields.add("course");
    openapiFields.add("deleteurl");
    openapiFields.add("description");
    openapiFields.add("descriptionformat");
    openapiFields.add("editurl");
    openapiFields.add("eventcount");
    openapiFields.add("eventtype");
    openapiFields.add("formattedlocation");
    openapiFields.add("formattedtime");
    openapiFields.add("groupid");
    openapiFields.add("groupname");
    openapiFields.add("icon");
    openapiFields.add("id");
    openapiFields.add("instance");
    openapiFields.add("isactionevent");
    openapiFields.add("iscategoryevent");
    openapiFields.add("iscourseevent");
    openapiFields.add("location");
    openapiFields.add("modulename");
    openapiFields.add("name");
    openapiFields.add("normalisedeventtype");
    openapiFields.add("normalisedeventtypetext");
    openapiFields.add("overdue");
    openapiFields.add("purpose");
    openapiFields.add("repeatid");
    openapiFields.add("subscription");
    openapiFields.add("timeduration");
    openapiFields.add("timemodified");
    openapiFields.add("timesort");
    openapiFields.add("timestart");
    openapiFields.add("timeusermidnight");
    openapiFields.add("url");
    openapiFields.add("userid");
    openapiFields.add("viewurl");
    openapiFields.add("visible");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("candelete");
    openapiRequiredFields.add("canedit");
    openapiRequiredFields.add("deleteurl");
    openapiRequiredFields.add("editurl");
    openapiRequiredFields.add("eventtype");
    openapiRequiredFields.add("formattedlocation");
    openapiRequiredFields.add("formattedtime");
    openapiRequiredFields.add("icon");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("isactionevent");
    openapiRequiredFields.add("iscategoryevent");
    openapiRequiredFields.add("iscourseevent");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("normalisedeventtype");
    openapiRequiredFields.add("normalisedeventtypetext");
    openapiRequiredFields.add("purpose");
    openapiRequiredFields.add("timeduration");
    openapiRequiredFields.add("timemodified");
    openapiRequiredFields.add("timesort");
    openapiRequiredFields.add("timestart");
    openapiRequiredFields.add("timeusermidnight");
    openapiRequiredFields.add("url");
    openapiRequiredFields.add("viewurl");
    openapiRequiredFields.add("visible");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CoreCalendarGetCalendarEventById200ResponseEvent
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CoreCalendarGetCalendarEventById200ResponseEvent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CoreCalendarGetCalendarEventById200ResponseEvent is not found in the empty JSON string", CoreCalendarGetCalendarEventById200ResponseEvent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CoreCalendarGetCalendarEventById200ResponseEvent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CoreCalendarGetCalendarEventById200ResponseEvent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CoreCalendarGetCalendarEventById200ResponseEvent.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `action`
      if (jsonObj.get("action") != null && !jsonObj.get("action").isJsonNull()) {
        CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerAction.validateJsonElement(jsonObj.get("action"));
      }
      if ((jsonObj.get("activityname") != null && !jsonObj.get("activityname").isJsonNull()) && !jsonObj.get("activityname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `activityname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("activityname").toString()));
      }
      if ((jsonObj.get("activitystr") != null && !jsonObj.get("activitystr").isJsonNull()) && !jsonObj.get("activitystr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `activitystr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("activitystr").toString()));
      }
      // validate the optional field `category`
      if (jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) {
        CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCategory.validateJsonElement(jsonObj.get("category"));
      }
      if ((jsonObj.get("component") != null && !jsonObj.get("component").isJsonNull()) && !jsonObj.get("component").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `component` to be a primitive type in the JSON string but got `%s`", jsonObj.get("component").toString()));
      }
      // validate the optional field `course`
      if (jsonObj.get("course") != null && !jsonObj.get("course").isJsonNull()) {
        CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse.validateJsonElement(jsonObj.get("course"));
      }
      if (!jsonObj.get("deleteurl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deleteurl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deleteurl").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("editurl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `editurl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("editurl").toString()));
      }
      if (!jsonObj.get("eventtype").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventtype` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventtype").toString()));
      }
      if (!jsonObj.get("formattedlocation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `formattedlocation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("formattedlocation").toString()));
      }
      if (!jsonObj.get("formattedtime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `formattedtime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("formattedtime").toString()));
      }
      if ((jsonObj.get("groupname") != null && !jsonObj.get("groupname").isJsonNull()) && !jsonObj.get("groupname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `groupname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("groupname").toString()));
      }
      // validate the required field `icon`
      CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerIcon.validateJsonElement(jsonObj.get("icon"));
      if ((jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) && !jsonObj.get("location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location").toString()));
      }
      if ((jsonObj.get("modulename") != null && !jsonObj.get("modulename").isJsonNull()) && !jsonObj.get("modulename").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modulename` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modulename").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("normalisedeventtype").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `normalisedeventtype` to be a primitive type in the JSON string but got `%s`", jsonObj.get("normalisedeventtype").toString()));
      }
      if (!jsonObj.get("normalisedeventtypetext").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `normalisedeventtypetext` to be a primitive type in the JSON string but got `%s`", jsonObj.get("normalisedeventtypetext").toString()));
      }
      if (!jsonObj.get("purpose").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `purpose` to be a primitive type in the JSON string but got `%s`", jsonObj.get("purpose").toString()));
      }
      // validate the optional field `subscription`
      if (jsonObj.get("subscription") != null && !jsonObj.get("subscription").isJsonNull()) {
        CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerSubscription.validateJsonElement(jsonObj.get("subscription"));
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if (!jsonObj.get("viewurl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `viewurl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("viewurl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CoreCalendarGetCalendarEventById200ResponseEvent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CoreCalendarGetCalendarEventById200ResponseEvent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CoreCalendarGetCalendarEventById200ResponseEvent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CoreCalendarGetCalendarEventById200ResponseEvent.class));

       return (TypeAdapter<T>) new TypeAdapter<CoreCalendarGetCalendarEventById200ResponseEvent>() {
           @Override
           public void write(JsonWriter out, CoreCalendarGetCalendarEventById200ResponseEvent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CoreCalendarGetCalendarEventById200ResponseEvent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CoreCalendarGetCalendarEventById200ResponseEvent given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CoreCalendarGetCalendarEventById200ResponseEvent
  * @throws IOException if the JSON string is invalid with respect to CoreCalendarGetCalendarEventById200ResponseEvent
  */
  public static CoreCalendarGetCalendarEventById200ResponseEvent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CoreCalendarGetCalendarEventById200ResponseEvent.class);
  }

 /**
  * Convert an instance of CoreCalendarGetCalendarEventById200ResponseEvent to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

