/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.joshuapare.JSON;

/**
 * ModAssignGetSubmissionStatus200ResponseFeedbackGrade
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-18T14:00:07.069642-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class ModAssignGetSubmissionStatus200ResponseFeedbackGrade {
  public static final String SERIALIZED_NAME_ASSIGNMENT = "assignment";
  @SerializedName(SERIALIZED_NAME_ASSIGNMENT)
  private Integer assignment;

  public static final String SERIALIZED_NAME_ATTEMPTNUMBER = "attemptnumber";
  @SerializedName(SERIALIZED_NAME_ATTEMPTNUMBER)
  private Integer attemptnumber;

  public static final String SERIALIZED_NAME_GRADE = "grade";
  @SerializedName(SERIALIZED_NAME_GRADE)
  private String grade;

  public static final String SERIALIZED_NAME_GRADEFORDISPLAY = "gradefordisplay";
  @SerializedName(SERIALIZED_NAME_GRADEFORDISPLAY)
  private String gradefordisplay;

  public static final String SERIALIZED_NAME_GRADER = "grader";
  @SerializedName(SERIALIZED_NAME_GRADER)
  private Integer grader;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_TIMECREATED = "timecreated";
  @SerializedName(SERIALIZED_NAME_TIMECREATED)
  private Integer timecreated;

  public static final String SERIALIZED_NAME_TIMEMODIFIED = "timemodified";
  @SerializedName(SERIALIZED_NAME_TIMEMODIFIED)
  private Integer timemodified;

  public static final String SERIALIZED_NAME_USERID = "userid";
  @SerializedName(SERIALIZED_NAME_USERID)
  private Integer userid;

  public ModAssignGetSubmissionStatus200ResponseFeedbackGrade() {
  }

  public ModAssignGetSubmissionStatus200ResponseFeedbackGrade assignment(Integer assignment) {
    this.assignment = assignment;
    return this;
  }

   /**
   * assignment id
   * @return assignment
  **/
  @javax.annotation.Nullable
  public Integer getAssignment() {
    return assignment;
  }

  public void setAssignment(Integer assignment) {
    this.assignment = assignment;
  }


  public ModAssignGetSubmissionStatus200ResponseFeedbackGrade attemptnumber(Integer attemptnumber) {
    this.attemptnumber = attemptnumber;
    return this;
  }

   /**
   * attempt number
   * @return attemptnumber
  **/
  @javax.annotation.Nonnull
  public Integer getAttemptnumber() {
    return attemptnumber;
  }

  public void setAttemptnumber(Integer attemptnumber) {
    this.attemptnumber = attemptnumber;
  }


  public ModAssignGetSubmissionStatus200ResponseFeedbackGrade grade(String grade) {
    this.grade = grade;
    return this;
  }

   /**
   * grade
   * @return grade
  **/
  @javax.annotation.Nonnull
  public String getGrade() {
    return grade;
  }

  public void setGrade(String grade) {
    this.grade = grade;
  }


  public ModAssignGetSubmissionStatus200ResponseFeedbackGrade gradefordisplay(String gradefordisplay) {
    this.gradefordisplay = gradefordisplay;
    return this;
  }

   /**
   * grade rendered into a format suitable for display
   * @return gradefordisplay
  **/
  @javax.annotation.Nullable
  public String getGradefordisplay() {
    return gradefordisplay;
  }

  public void setGradefordisplay(String gradefordisplay) {
    this.gradefordisplay = gradefordisplay;
  }


  public ModAssignGetSubmissionStatus200ResponseFeedbackGrade grader(Integer grader) {
    this.grader = grader;
    return this;
  }

   /**
   * grader, -1 if grader is hidden
   * @return grader
  **/
  @javax.annotation.Nonnull
  public Integer getGrader() {
    return grader;
  }

  public void setGrader(Integer grader) {
    this.grader = grader;
  }


  public ModAssignGetSubmissionStatus200ResponseFeedbackGrade id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * grade id
   * @return id
  **/
  @javax.annotation.Nonnull
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public ModAssignGetSubmissionStatus200ResponseFeedbackGrade timecreated(Integer timecreated) {
    this.timecreated = timecreated;
    return this;
  }

   /**
   * grade creation time
   * @return timecreated
  **/
  @javax.annotation.Nonnull
  public Integer getTimecreated() {
    return timecreated;
  }

  public void setTimecreated(Integer timecreated) {
    this.timecreated = timecreated;
  }


  public ModAssignGetSubmissionStatus200ResponseFeedbackGrade timemodified(Integer timemodified) {
    this.timemodified = timemodified;
    return this;
  }

   /**
   * grade last modified time
   * @return timemodified
  **/
  @javax.annotation.Nonnull
  public Integer getTimemodified() {
    return timemodified;
  }

  public void setTimemodified(Integer timemodified) {
    this.timemodified = timemodified;
  }


  public ModAssignGetSubmissionStatus200ResponseFeedbackGrade userid(Integer userid) {
    this.userid = userid;
    return this;
  }

   /**
   * student id
   * @return userid
  **/
  @javax.annotation.Nonnull
  public Integer getUserid() {
    return userid;
  }

  public void setUserid(Integer userid) {
    this.userid = userid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModAssignGetSubmissionStatus200ResponseFeedbackGrade modAssignGetSubmissionStatus200ResponseFeedbackGrade = (ModAssignGetSubmissionStatus200ResponseFeedbackGrade) o;
    return Objects.equals(this.assignment, modAssignGetSubmissionStatus200ResponseFeedbackGrade.assignment) &&
        Objects.equals(this.attemptnumber, modAssignGetSubmissionStatus200ResponseFeedbackGrade.attemptnumber) &&
        Objects.equals(this.grade, modAssignGetSubmissionStatus200ResponseFeedbackGrade.grade) &&
        Objects.equals(this.gradefordisplay, modAssignGetSubmissionStatus200ResponseFeedbackGrade.gradefordisplay) &&
        Objects.equals(this.grader, modAssignGetSubmissionStatus200ResponseFeedbackGrade.grader) &&
        Objects.equals(this.id, modAssignGetSubmissionStatus200ResponseFeedbackGrade.id) &&
        Objects.equals(this.timecreated, modAssignGetSubmissionStatus200ResponseFeedbackGrade.timecreated) &&
        Objects.equals(this.timemodified, modAssignGetSubmissionStatus200ResponseFeedbackGrade.timemodified) &&
        Objects.equals(this.userid, modAssignGetSubmissionStatus200ResponseFeedbackGrade.userid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(assignment, attemptnumber, grade, gradefordisplay, grader, id, timecreated, timemodified, userid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModAssignGetSubmissionStatus200ResponseFeedbackGrade {\n");
    sb.append("    assignment: ").append(toIndentedString(assignment)).append("\n");
    sb.append("    attemptnumber: ").append(toIndentedString(attemptnumber)).append("\n");
    sb.append("    grade: ").append(toIndentedString(grade)).append("\n");
    sb.append("    gradefordisplay: ").append(toIndentedString(gradefordisplay)).append("\n");
    sb.append("    grader: ").append(toIndentedString(grader)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    timecreated: ").append(toIndentedString(timecreated)).append("\n");
    sb.append("    timemodified: ").append(toIndentedString(timemodified)).append("\n");
    sb.append("    userid: ").append(toIndentedString(userid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("assignment");
    openapiFields.add("attemptnumber");
    openapiFields.add("grade");
    openapiFields.add("gradefordisplay");
    openapiFields.add("grader");
    openapiFields.add("id");
    openapiFields.add("timecreated");
    openapiFields.add("timemodified");
    openapiFields.add("userid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("attemptnumber");
    openapiRequiredFields.add("grade");
    openapiRequiredFields.add("grader");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("timecreated");
    openapiRequiredFields.add("timemodified");
    openapiRequiredFields.add("userid");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ModAssignGetSubmissionStatus200ResponseFeedbackGrade
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ModAssignGetSubmissionStatus200ResponseFeedbackGrade.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModAssignGetSubmissionStatus200ResponseFeedbackGrade is not found in the empty JSON string", ModAssignGetSubmissionStatus200ResponseFeedbackGrade.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ModAssignGetSubmissionStatus200ResponseFeedbackGrade.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModAssignGetSubmissionStatus200ResponseFeedbackGrade` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ModAssignGetSubmissionStatus200ResponseFeedbackGrade.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("grade").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `grade` to be a primitive type in the JSON string but got `%s`", jsonObj.get("grade").toString()));
      }
      if ((jsonObj.get("gradefordisplay") != null && !jsonObj.get("gradefordisplay").isJsonNull()) && !jsonObj.get("gradefordisplay").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gradefordisplay` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gradefordisplay").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModAssignGetSubmissionStatus200ResponseFeedbackGrade.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModAssignGetSubmissionStatus200ResponseFeedbackGrade' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModAssignGetSubmissionStatus200ResponseFeedbackGrade> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModAssignGetSubmissionStatus200ResponseFeedbackGrade.class));

       return (TypeAdapter<T>) new TypeAdapter<ModAssignGetSubmissionStatus200ResponseFeedbackGrade>() {
           @Override
           public void write(JsonWriter out, ModAssignGetSubmissionStatus200ResponseFeedbackGrade value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModAssignGetSubmissionStatus200ResponseFeedbackGrade read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ModAssignGetSubmissionStatus200ResponseFeedbackGrade given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ModAssignGetSubmissionStatus200ResponseFeedbackGrade
  * @throws IOException if the JSON string is invalid with respect to ModAssignGetSubmissionStatus200ResponseFeedbackGrade
  */
  public static ModAssignGetSubmissionStatus200ResponseFeedbackGrade fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModAssignGetSubmissionStatus200ResponseFeedbackGrade.class);
  }

 /**
  * Convert an instance of ModAssignGetSubmissionStatus200ResponseFeedbackGrade to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

