/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ModQuizGetAttemptReview200ResponseQuestionsInnerResponsefileareasInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.joshuapare.JSON;

/**
 * The question data. Some fields may not be returned depending on the quiz display settings.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-18T14:00:07.069642-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class ModQuizGetAttemptReview200ResponseQuestionsInner {
  public static final String SERIALIZED_NAME_BLOCKEDBYPREVIOUS = "blockedbyprevious";
  @SerializedName(SERIALIZED_NAME_BLOCKEDBYPREVIOUS)
  private Boolean blockedbyprevious;

  public static final String SERIALIZED_NAME_FLAGGED = "flagged";
  @SerializedName(SERIALIZED_NAME_FLAGGED)
  private Boolean flagged;

  public static final String SERIALIZED_NAME_HASAUTOSAVEDSTEP = "hasautosavedstep";
  @SerializedName(SERIALIZED_NAME_HASAUTOSAVEDSTEP)
  private Boolean hasautosavedstep;

  public static final String SERIALIZED_NAME_HTML = "html";
  @SerializedName(SERIALIZED_NAME_HTML)
  private String html;

  public static final String SERIALIZED_NAME_LASTACTIONTIME = "lastactiontime";
  @SerializedName(SERIALIZED_NAME_LASTACTIONTIME)
  private Integer lastactiontime;

  public static final String SERIALIZED_NAME_MARK = "mark";
  @SerializedName(SERIALIZED_NAME_MARK)
  private String mark;

  public static final String SERIALIZED_NAME_MAXMARK = "maxmark";
  @SerializedName(SERIALIZED_NAME_MAXMARK)
  private BigDecimal maxmark;

  public static final String SERIALIZED_NAME_NUMBER = "number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  private Integer number;

  public static final String SERIALIZED_NAME_PAGE = "page";
  @SerializedName(SERIALIZED_NAME_PAGE)
  private Integer page;

  public static final String SERIALIZED_NAME_QUESTIONNUMBER = "questionnumber";
  @SerializedName(SERIALIZED_NAME_QUESTIONNUMBER)
  private String questionnumber;

  public static final String SERIALIZED_NAME_RESPONSEFILEAREAS = "responsefileareas";
  @SerializedName(SERIALIZED_NAME_RESPONSEFILEAREAS)
  private List<ModQuizGetAttemptReview200ResponseQuestionsInnerResponsefileareasInner> responsefileareas = new ArrayList<>();

  public static final String SERIALIZED_NAME_SEQUENCECHECK = "sequencecheck";
  @SerializedName(SERIALIZED_NAME_SEQUENCECHECK)
  private Integer sequencecheck;

  public static final String SERIALIZED_NAME_SETTINGS = "settings";
  @SerializedName(SERIALIZED_NAME_SETTINGS)
  private String settings;

  public static final String SERIALIZED_NAME_SLOT = "slot";
  @SerializedName(SERIALIZED_NAME_SLOT)
  private Integer slot;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public ModQuizGetAttemptReview200ResponseQuestionsInner() {
  }

  public ModQuizGetAttemptReview200ResponseQuestionsInner blockedbyprevious(Boolean blockedbyprevious) {
    this.blockedbyprevious = blockedbyprevious;
    return this;
  }

   /**
   * whether the question is blocked by the previous question
   * @return blockedbyprevious
  **/
  @javax.annotation.Nullable
  public Boolean getBlockedbyprevious() {
    return blockedbyprevious;
  }

  public void setBlockedbyprevious(Boolean blockedbyprevious) {
    this.blockedbyprevious = blockedbyprevious;
  }


  public ModQuizGetAttemptReview200ResponseQuestionsInner flagged(Boolean flagged) {
    this.flagged = flagged;
    return this;
  }

   /**
   * whether the question is flagged or not
   * @return flagged
  **/
  @javax.annotation.Nullable
  public Boolean getFlagged() {
    return flagged;
  }

  public void setFlagged(Boolean flagged) {
    this.flagged = flagged;
  }


  public ModQuizGetAttemptReview200ResponseQuestionsInner hasautosavedstep(Boolean hasautosavedstep) {
    this.hasautosavedstep = hasautosavedstep;
    return this;
  }

   /**
   * whether this question attempt has autosaved data
   * @return hasautosavedstep
  **/
  @javax.annotation.Nullable
  public Boolean getHasautosavedstep() {
    return hasautosavedstep;
  }

  public void setHasautosavedstep(Boolean hasautosavedstep) {
    this.hasautosavedstep = hasautosavedstep;
  }


  public ModQuizGetAttemptReview200ResponseQuestionsInner html(String html) {
    this.html = html;
    return this;
  }

   /**
   * the question rendered
   * @return html
  **/
  @javax.annotation.Nullable
  public String getHtml() {
    return html;
  }

  public void setHtml(String html) {
    this.html = html;
  }


  public ModQuizGetAttemptReview200ResponseQuestionsInner lastactiontime(Integer lastactiontime) {
    this.lastactiontime = lastactiontime;
    return this;
  }

   /**
   * the timestamp of the most recent step in this question attempt
   * @return lastactiontime
  **/
  @javax.annotation.Nullable
  public Integer getLastactiontime() {
    return lastactiontime;
  }

  public void setLastactiontime(Integer lastactiontime) {
    this.lastactiontime = lastactiontime;
  }


  public ModQuizGetAttemptReview200ResponseQuestionsInner mark(String mark) {
    this.mark = mark;
    return this;
  }

   /**
   * the mark awarded.                     It will be returned only if the user is allowed to see it.
   * @return mark
  **/
  @javax.annotation.Nullable
  public String getMark() {
    return mark;
  }

  public void setMark(String mark) {
    this.mark = mark;
  }


  public ModQuizGetAttemptReview200ResponseQuestionsInner maxmark(BigDecimal maxmark) {
    this.maxmark = maxmark;
    return this;
  }

   /**
   * the maximum mark possible for this question attempt.                     It will be returned only if the user is allowed to see it.
   * @return maxmark
  **/
  @javax.annotation.Nullable
  public BigDecimal getMaxmark() {
    return maxmark;
  }

  public void setMaxmark(BigDecimal maxmark) {
    this.maxmark = maxmark;
  }


  public ModQuizGetAttemptReview200ResponseQuestionsInner number(Integer number) {
    this.number = number;
    return this;
  }

   /**
   * DO NOT USE. Use questionnumber. Only retained for backwards compatibility.
   * @return number
  **/
  @javax.annotation.Nullable
  public Integer getNumber() {
    return number;
  }

  public void setNumber(Integer number) {
    this.number = number;
  }


  public ModQuizGetAttemptReview200ResponseQuestionsInner page(Integer page) {
    this.page = page;
    return this;
  }

   /**
   * page of the quiz this question appears on
   * @return page
  **/
  @javax.annotation.Nullable
  public Integer getPage() {
    return page;
  }

  public void setPage(Integer page) {
    this.page = page;
  }


  public ModQuizGetAttemptReview200ResponseQuestionsInner questionnumber(String questionnumber) {
    this.questionnumber = questionnumber;
    return this;
  }

   /**
   * The question number to display for this question, e.g. \&quot;7\&quot;, \&quot;i\&quot; or \&quot;Custom-B)\&quot;.
   * @return questionnumber
  **/
  @javax.annotation.Nullable
  public String getQuestionnumber() {
    return questionnumber;
  }

  public void setQuestionnumber(String questionnumber) {
    this.questionnumber = questionnumber;
  }


  public ModQuizGetAttemptReview200ResponseQuestionsInner responsefileareas(List<ModQuizGetAttemptReview200ResponseQuestionsInnerResponsefileareasInner> responsefileareas) {
    this.responsefileareas = responsefileareas;
    return this;
  }

  public ModQuizGetAttemptReview200ResponseQuestionsInner addResponsefileareasItem(ModQuizGetAttemptReview200ResponseQuestionsInnerResponsefileareasInner responsefileareasItem) {
    if (this.responsefileareas == null) {
      this.responsefileareas = new ArrayList<>();
    }
    this.responsefileareas.add(responsefileareasItem);
    return this;
  }

   /**
   * Get responsefileareas
   * @return responsefileareas
  **/
  @javax.annotation.Nullable
  public List<ModQuizGetAttemptReview200ResponseQuestionsInnerResponsefileareasInner> getResponsefileareas() {
    return responsefileareas;
  }

  public void setResponsefileareas(List<ModQuizGetAttemptReview200ResponseQuestionsInnerResponsefileareasInner> responsefileareas) {
    this.responsefileareas = responsefileareas;
  }


  public ModQuizGetAttemptReview200ResponseQuestionsInner sequencecheck(Integer sequencecheck) {
    this.sequencecheck = sequencecheck;
    return this;
  }

   /**
   * the number of real steps in this attempt
   * @return sequencecheck
  **/
  @javax.annotation.Nullable
  public Integer getSequencecheck() {
    return sequencecheck;
  }

  public void setSequencecheck(Integer sequencecheck) {
    this.sequencecheck = sequencecheck;
  }


  public ModQuizGetAttemptReview200ResponseQuestionsInner settings(String settings) {
    this.settings = settings;
    return this;
  }

   /**
   * Question settings (JSON encoded).
   * @return settings
  **/
  @javax.annotation.Nullable
  public String getSettings() {
    return settings;
  }

  public void setSettings(String settings) {
    this.settings = settings;
  }


  public ModQuizGetAttemptReview200ResponseQuestionsInner slot(Integer slot) {
    this.slot = slot;
    return this;
  }

   /**
   * slot number
   * @return slot
  **/
  @javax.annotation.Nullable
  public Integer getSlot() {
    return slot;
  }

  public void setSlot(Integer slot) {
    this.slot = slot;
  }


  public ModQuizGetAttemptReview200ResponseQuestionsInner state(String state) {
    this.state = state;
    return this;
  }

   /**
   * the state where the question is in.                     It will not be returned if the user cannot see it due to the quiz display correctness settings.
   * @return state
  **/
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }


  public ModQuizGetAttemptReview200ResponseQuestionsInner status(String status) {
    this.status = status;
    return this;
  }

   /**
   * current formatted state of the question
   * @return status
  **/
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public ModQuizGetAttemptReview200ResponseQuestionsInner type(String type) {
    this.type = type;
    return this;
  }

   /**
   * question type, i.e: multichoice
   * @return type
  **/
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModQuizGetAttemptReview200ResponseQuestionsInner modQuizGetAttemptReview200ResponseQuestionsInner = (ModQuizGetAttemptReview200ResponseQuestionsInner) o;
    return Objects.equals(this.blockedbyprevious, modQuizGetAttemptReview200ResponseQuestionsInner.blockedbyprevious) &&
        Objects.equals(this.flagged, modQuizGetAttemptReview200ResponseQuestionsInner.flagged) &&
        Objects.equals(this.hasautosavedstep, modQuizGetAttemptReview200ResponseQuestionsInner.hasautosavedstep) &&
        Objects.equals(this.html, modQuizGetAttemptReview200ResponseQuestionsInner.html) &&
        Objects.equals(this.lastactiontime, modQuizGetAttemptReview200ResponseQuestionsInner.lastactiontime) &&
        Objects.equals(this.mark, modQuizGetAttemptReview200ResponseQuestionsInner.mark) &&
        Objects.equals(this.maxmark, modQuizGetAttemptReview200ResponseQuestionsInner.maxmark) &&
        Objects.equals(this.number, modQuizGetAttemptReview200ResponseQuestionsInner.number) &&
        Objects.equals(this.page, modQuizGetAttemptReview200ResponseQuestionsInner.page) &&
        Objects.equals(this.questionnumber, modQuizGetAttemptReview200ResponseQuestionsInner.questionnumber) &&
        Objects.equals(this.responsefileareas, modQuizGetAttemptReview200ResponseQuestionsInner.responsefileareas) &&
        Objects.equals(this.sequencecheck, modQuizGetAttemptReview200ResponseQuestionsInner.sequencecheck) &&
        Objects.equals(this.settings, modQuizGetAttemptReview200ResponseQuestionsInner.settings) &&
        Objects.equals(this.slot, modQuizGetAttemptReview200ResponseQuestionsInner.slot) &&
        Objects.equals(this.state, modQuizGetAttemptReview200ResponseQuestionsInner.state) &&
        Objects.equals(this.status, modQuizGetAttemptReview200ResponseQuestionsInner.status) &&
        Objects.equals(this.type, modQuizGetAttemptReview200ResponseQuestionsInner.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(blockedbyprevious, flagged, hasautosavedstep, html, lastactiontime, mark, maxmark, number, page, questionnumber, responsefileareas, sequencecheck, settings, slot, state, status, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModQuizGetAttemptReview200ResponseQuestionsInner {\n");
    sb.append("    blockedbyprevious: ").append(toIndentedString(blockedbyprevious)).append("\n");
    sb.append("    flagged: ").append(toIndentedString(flagged)).append("\n");
    sb.append("    hasautosavedstep: ").append(toIndentedString(hasautosavedstep)).append("\n");
    sb.append("    html: ").append(toIndentedString(html)).append("\n");
    sb.append("    lastactiontime: ").append(toIndentedString(lastactiontime)).append("\n");
    sb.append("    mark: ").append(toIndentedString(mark)).append("\n");
    sb.append("    maxmark: ").append(toIndentedString(maxmark)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    page: ").append(toIndentedString(page)).append("\n");
    sb.append("    questionnumber: ").append(toIndentedString(questionnumber)).append("\n");
    sb.append("    responsefileareas: ").append(toIndentedString(responsefileareas)).append("\n");
    sb.append("    sequencecheck: ").append(toIndentedString(sequencecheck)).append("\n");
    sb.append("    settings: ").append(toIndentedString(settings)).append("\n");
    sb.append("    slot: ").append(toIndentedString(slot)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("blockedbyprevious");
    openapiFields.add("flagged");
    openapiFields.add("hasautosavedstep");
    openapiFields.add("html");
    openapiFields.add("lastactiontime");
    openapiFields.add("mark");
    openapiFields.add("maxmark");
    openapiFields.add("number");
    openapiFields.add("page");
    openapiFields.add("questionnumber");
    openapiFields.add("responsefileareas");
    openapiFields.add("sequencecheck");
    openapiFields.add("settings");
    openapiFields.add("slot");
    openapiFields.add("state");
    openapiFields.add("status");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ModQuizGetAttemptReview200ResponseQuestionsInner
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ModQuizGetAttemptReview200ResponseQuestionsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModQuizGetAttemptReview200ResponseQuestionsInner is not found in the empty JSON string", ModQuizGetAttemptReview200ResponseQuestionsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ModQuizGetAttemptReview200ResponseQuestionsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModQuizGetAttemptReview200ResponseQuestionsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("html") != null && !jsonObj.get("html").isJsonNull()) && !jsonObj.get("html").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `html` to be a primitive type in the JSON string but got `%s`", jsonObj.get("html").toString()));
      }
      if ((jsonObj.get("mark") != null && !jsonObj.get("mark").isJsonNull()) && !jsonObj.get("mark").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mark` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mark").toString()));
      }
      if ((jsonObj.get("questionnumber") != null && !jsonObj.get("questionnumber").isJsonNull()) && !jsonObj.get("questionnumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `questionnumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("questionnumber").toString()));
      }
      if (jsonObj.get("responsefileareas") != null && !jsonObj.get("responsefileareas").isJsonNull()) {
        JsonArray jsonArrayresponsefileareas = jsonObj.getAsJsonArray("responsefileareas");
        if (jsonArrayresponsefileareas != null) {
          // ensure the json data is an array
          if (!jsonObj.get("responsefileareas").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `responsefileareas` to be an array in the JSON string but got `%s`", jsonObj.get("responsefileareas").toString()));
          }

          // validate the optional field `responsefileareas` (array)
          for (int i = 0; i < jsonArrayresponsefileareas.size(); i++) {
            ModQuizGetAttemptReview200ResponseQuestionsInnerResponsefileareasInner.validateJsonElement(jsonArrayresponsefileareas.get(i));
          };
        }
      }
      if ((jsonObj.get("settings") != null && !jsonObj.get("settings").isJsonNull()) && !jsonObj.get("settings").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `settings` to be a primitive type in the JSON string but got `%s`", jsonObj.get("settings").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModQuizGetAttemptReview200ResponseQuestionsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModQuizGetAttemptReview200ResponseQuestionsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModQuizGetAttemptReview200ResponseQuestionsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModQuizGetAttemptReview200ResponseQuestionsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ModQuizGetAttemptReview200ResponseQuestionsInner>() {
           @Override
           public void write(JsonWriter out, ModQuizGetAttemptReview200ResponseQuestionsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModQuizGetAttemptReview200ResponseQuestionsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ModQuizGetAttemptReview200ResponseQuestionsInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ModQuizGetAttemptReview200ResponseQuestionsInner
  * @throws IOException if the JSON string is invalid with respect to ModQuizGetAttemptReview200ResponseQuestionsInner
  */
  public static ModQuizGetAttemptReview200ResponseQuestionsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModQuizGetAttemptReview200ResponseQuestionsInner.class);
  }

 /**
  * Convert an instance of ModQuizGetAttemptReview200ResponseQuestionsInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

