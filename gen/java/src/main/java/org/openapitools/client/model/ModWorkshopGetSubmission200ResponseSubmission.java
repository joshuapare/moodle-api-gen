/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.joshuapare.JSON;

/**
 * ModWorkshopGetSubmission200ResponseSubmission
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-18T20:58:28.689161-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class ModWorkshopGetSubmission200ResponseSubmission {
  public static final String SERIALIZED_NAME_ATTACHMENT = "attachment";
  @SerializedName(SERIALIZED_NAME_ATTACHMENT)
  private Integer attachment = 0;

  public static final String SERIALIZED_NAME_ATTACHMENTFILES = "attachmentfiles";
  @SerializedName(SERIALIZED_NAME_ATTACHMENTFILES)
  private List<CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner> attachmentfiles = new ArrayList<>();

  public static final String SERIALIZED_NAME_AUTHORID = "authorid";
  @SerializedName(SERIALIZED_NAME_AUTHORID)
  private Integer authorid = null;

  public static final String SERIALIZED_NAME_CONTENT = "content";
  @SerializedName(SERIALIZED_NAME_CONTENT)
  private String content = "null";

  public static final String SERIALIZED_NAME_CONTENTFILES = "contentfiles";
  @SerializedName(SERIALIZED_NAME_CONTENTFILES)
  private List<CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner> contentfiles = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONTENTFORMAT = "contentformat";
  @SerializedName(SERIALIZED_NAME_CONTENTFORMAT)
  private Integer contentformat = 0;

  public static final String SERIALIZED_NAME_CONTENTTRUST = "contenttrust";
  @SerializedName(SERIALIZED_NAME_CONTENTTRUST)
  private Integer contenttrust = 0;

  public static final String SERIALIZED_NAME_EXAMPLE = "example";
  @SerializedName(SERIALIZED_NAME_EXAMPLE)
  private Boolean example = false;

  public static final String SERIALIZED_NAME_FEEDBACKAUTHOR = "feedbackauthor";
  @SerializedName(SERIALIZED_NAME_FEEDBACKAUTHOR)
  private String feedbackauthor = "null";

  public static final String SERIALIZED_NAME_FEEDBACKAUTHORFORMAT = "feedbackauthorformat";
  @SerializedName(SERIALIZED_NAME_FEEDBACKAUTHORFORMAT)
  private Integer feedbackauthorformat = 0;

  public static final String SERIALIZED_NAME_GRADE = "grade";
  @SerializedName(SERIALIZED_NAME_GRADE)
  private BigDecimal grade = new BigDecimal("null");

  public static final String SERIALIZED_NAME_GRADEOVER = "gradeover";
  @SerializedName(SERIALIZED_NAME_GRADEOVER)
  private BigDecimal gradeover = new BigDecimal("null");

  public static final String SERIALIZED_NAME_GRADEOVERBY = "gradeoverby";
  @SerializedName(SERIALIZED_NAME_GRADEOVERBY)
  private Integer gradeoverby;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_LATE = "late";
  @SerializedName(SERIALIZED_NAME_LATE)
  private Integer late = 0;

  public static final String SERIALIZED_NAME_PUBLISHED = "published";
  @SerializedName(SERIALIZED_NAME_PUBLISHED)
  private Boolean published = false;

  public static final String SERIALIZED_NAME_TIMECREATED = "timecreated";
  @SerializedName(SERIALIZED_NAME_TIMECREATED)
  private Integer timecreated = null;

  public static final String SERIALIZED_NAME_TIMEGRADED = "timegraded";
  @SerializedName(SERIALIZED_NAME_TIMEGRADED)
  private Integer timegraded = null;

  public static final String SERIALIZED_NAME_TIMEMODIFIED = "timemodified";
  @SerializedName(SERIALIZED_NAME_TIMEMODIFIED)
  private Integer timemodified = null;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title = "null";

  public static final String SERIALIZED_NAME_WORKSHOPID = "workshopid";
  @SerializedName(SERIALIZED_NAME_WORKSHOPID)
  private Integer workshopid = null;

  public ModWorkshopGetSubmission200ResponseSubmission() {
  }

  public ModWorkshopGetSubmission200ResponseSubmission attachment(Integer attachment) {
    this.attachment = attachment;
    return this;
  }

   /**
   * Used by File API file_postupdate_standard_filemanager.
   * @return attachment
  **/
  @javax.annotation.Nonnull
  public Integer getAttachment() {
    return attachment;
  }

  public void setAttachment(Integer attachment) {
    this.attachment = attachment;
  }


  public ModWorkshopGetSubmission200ResponseSubmission attachmentfiles(List<CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner> attachmentfiles) {
    this.attachmentfiles = attachmentfiles;
    return this;
  }

  public ModWorkshopGetSubmission200ResponseSubmission addAttachmentfilesItem(CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner attachmentfilesItem) {
    if (this.attachmentfiles == null) {
      this.attachmentfiles = new ArrayList<>();
    }
    this.attachmentfiles.add(attachmentfilesItem);
    return this;
  }

   /**
   * Get attachmentfiles
   * @return attachmentfiles
  **/
  @javax.annotation.Nullable
  public List<CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner> getAttachmentfiles() {
    return attachmentfiles;
  }

  public void setAttachmentfiles(List<CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner> attachmentfiles) {
    this.attachmentfiles = attachmentfiles;
  }


  public ModWorkshopGetSubmission200ResponseSubmission authorid(Integer authorid) {
    this.authorid = authorid;
    return this;
  }

   /**
   * The author of the submission.
   * @return authorid
  **/
  @javax.annotation.Nonnull
  public Integer getAuthorid() {
    return authorid;
  }

  public void setAuthorid(Integer authorid) {
    this.authorid = authorid;
  }


  public ModWorkshopGetSubmission200ResponseSubmission content(String content) {
    this.content = content;
    return this;
  }

   /**
   * Submission text.
   * @return content
  **/
  @javax.annotation.Nonnull
  public String getContent() {
    return content;
  }

  public void setContent(String content) {
    this.content = content;
  }


  public ModWorkshopGetSubmission200ResponseSubmission contentfiles(List<CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner> contentfiles) {
    this.contentfiles = contentfiles;
    return this;
  }

  public ModWorkshopGetSubmission200ResponseSubmission addContentfilesItem(CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner contentfilesItem) {
    if (this.contentfiles == null) {
      this.contentfiles = new ArrayList<>();
    }
    this.contentfiles.add(contentfilesItem);
    return this;
  }

   /**
   * Get contentfiles
   * @return contentfiles
  **/
  @javax.annotation.Nullable
  public List<CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner> getContentfiles() {
    return contentfiles;
  }

  public void setContentfiles(List<CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner> contentfiles) {
    this.contentfiles = contentfiles;
  }


  public ModWorkshopGetSubmission200ResponseSubmission contentformat(Integer contentformat) {
    this.contentformat = contentformat;
    return this;
  }

   /**
   * content format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)
   * @return contentformat
  **/
  @javax.annotation.Nullable
  public Integer getContentformat() {
    return contentformat;
  }

  public void setContentformat(Integer contentformat) {
    this.contentformat = contentformat;
  }


  public ModWorkshopGetSubmission200ResponseSubmission contenttrust(Integer contenttrust) {
    this.contenttrust = contenttrust;
    return this;
  }

   /**
   * The trust mode of the data.
   * @return contenttrust
  **/
  @javax.annotation.Nonnull
  public Integer getContenttrust() {
    return contenttrust;
  }

  public void setContenttrust(Integer contenttrust) {
    this.contenttrust = contenttrust;
  }


  public ModWorkshopGetSubmission200ResponseSubmission example(Boolean example) {
    this.example = example;
    return this;
  }

   /**
   * Is this submission an example from teacher.
   * @return example
  **/
  @javax.annotation.Nonnull
  public Boolean getExample() {
    return example;
  }

  public void setExample(Boolean example) {
    this.example = example;
  }


  public ModWorkshopGetSubmission200ResponseSubmission feedbackauthor(String feedbackauthor) {
    this.feedbackauthor = feedbackauthor;
    return this;
  }

   /**
   * Teacher comment/feedback for the author of the submission, for example describing the reasons                     for the grade overriding.
   * @return feedbackauthor
  **/
  @javax.annotation.Nullable
  public String getFeedbackauthor() {
    return feedbackauthor;
  }

  public void setFeedbackauthor(String feedbackauthor) {
    this.feedbackauthor = feedbackauthor;
  }


  public ModWorkshopGetSubmission200ResponseSubmission feedbackauthorformat(Integer feedbackauthorformat) {
    this.feedbackauthorformat = feedbackauthorformat;
    return this;
  }

   /**
   * feedbackauthor format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)
   * @return feedbackauthorformat
  **/
  @javax.annotation.Nullable
  public Integer getFeedbackauthorformat() {
    return feedbackauthorformat;
  }

  public void setFeedbackauthorformat(Integer feedbackauthorformat) {
    this.feedbackauthorformat = feedbackauthorformat;
  }


  public ModWorkshopGetSubmission200ResponseSubmission grade(BigDecimal grade) {
    this.grade = grade;
    return this;
  }

   /**
   * Aggregated grade for the submission. The grade is a decimal number from interval 0..100.                     If NULL then the grade for submission has not been aggregated yet.
   * @return grade
  **/
  @javax.annotation.Nullable
  public BigDecimal getGrade() {
    return grade;
  }

  public void setGrade(BigDecimal grade) {
    this.grade = grade;
  }


  public ModWorkshopGetSubmission200ResponseSubmission gradeover(BigDecimal gradeover) {
    this.gradeover = gradeover;
    return this;
  }

   /**
   * Grade for the submission manually overridden by a teacher. Grade is always from interval 0..100.                     If NULL then the grade is not overriden.
   * @return gradeover
  **/
  @javax.annotation.Nullable
  public BigDecimal getGradeover() {
    return gradeover;
  }

  public void setGradeover(BigDecimal gradeover) {
    this.gradeover = gradeover;
  }


  public ModWorkshopGetSubmission200ResponseSubmission gradeoverby(Integer gradeoverby) {
    this.gradeoverby = gradeoverby;
    return this;
  }

   /**
   * The id of the user who has overridden the grade for submission.
   * @return gradeoverby
  **/
  @javax.annotation.Nullable
  public Integer getGradeoverby() {
    return gradeoverby;
  }

  public void setGradeoverby(Integer gradeoverby) {
    this.gradeoverby = gradeoverby;
  }


  public ModWorkshopGetSubmission200ResponseSubmission id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * The primary key of the record.
   * @return id
  **/
  @javax.annotation.Nonnull
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public ModWorkshopGetSubmission200ResponseSubmission late(Integer late) {
    this.late = late;
    return this;
  }

   /**
   * Has this submission been submitted after the deadline or during the assessment phase?
   * @return late
  **/
  @javax.annotation.Nonnull
  public Integer getLate() {
    return late;
  }

  public void setLate(Integer late) {
    this.late = late;
  }


  public ModWorkshopGetSubmission200ResponseSubmission published(Boolean published) {
    this.published = published;
    return this;
  }

   /**
   * Shall the submission be available to other when the workshop is closed.
   * @return published
  **/
  @javax.annotation.Nonnull
  public Boolean getPublished() {
    return published;
  }

  public void setPublished(Boolean published) {
    this.published = published;
  }


  public ModWorkshopGetSubmission200ResponseSubmission timecreated(Integer timecreated) {
    this.timecreated = timecreated;
    return this;
  }

   /**
   * Timestamp when the work was submitted for the first time.
   * @return timecreated
  **/
  @javax.annotation.Nonnull
  public Integer getTimecreated() {
    return timecreated;
  }

  public void setTimecreated(Integer timecreated) {
    this.timecreated = timecreated;
  }


  public ModWorkshopGetSubmission200ResponseSubmission timegraded(Integer timegraded) {
    this.timegraded = timegraded;
    return this;
  }

   /**
   * The timestamp when grade or gradeover was recently modified.
   * @return timegraded
  **/
  @javax.annotation.Nullable
  public Integer getTimegraded() {
    return timegraded;
  }

  public void setTimegraded(Integer timegraded) {
    this.timegraded = timegraded;
  }


  public ModWorkshopGetSubmission200ResponseSubmission timemodified(Integer timemodified) {
    this.timemodified = timemodified;
    return this;
  }

   /**
   * Timestamp when the submission has been updated.
   * @return timemodified
  **/
  @javax.annotation.Nonnull
  public Integer getTimemodified() {
    return timemodified;
  }

  public void setTimemodified(Integer timemodified) {
    this.timemodified = timemodified;
  }


  public ModWorkshopGetSubmission200ResponseSubmission title(String title) {
    this.title = title;
    return this;
  }

   /**
   * The submission title.
   * @return title
  **/
  @javax.annotation.Nonnull
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public ModWorkshopGetSubmission200ResponseSubmission workshopid(Integer workshopid) {
    this.workshopid = workshopid;
    return this;
  }

   /**
   * The id of the workshop instance.
   * @return workshopid
  **/
  @javax.annotation.Nonnull
  public Integer getWorkshopid() {
    return workshopid;
  }

  public void setWorkshopid(Integer workshopid) {
    this.workshopid = workshopid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModWorkshopGetSubmission200ResponseSubmission modWorkshopGetSubmission200ResponseSubmission = (ModWorkshopGetSubmission200ResponseSubmission) o;
    return Objects.equals(this.attachment, modWorkshopGetSubmission200ResponseSubmission.attachment) &&
        Objects.equals(this.attachmentfiles, modWorkshopGetSubmission200ResponseSubmission.attachmentfiles) &&
        Objects.equals(this.authorid, modWorkshopGetSubmission200ResponseSubmission.authorid) &&
        Objects.equals(this.content, modWorkshopGetSubmission200ResponseSubmission.content) &&
        Objects.equals(this.contentfiles, modWorkshopGetSubmission200ResponseSubmission.contentfiles) &&
        Objects.equals(this.contentformat, modWorkshopGetSubmission200ResponseSubmission.contentformat) &&
        Objects.equals(this.contenttrust, modWorkshopGetSubmission200ResponseSubmission.contenttrust) &&
        Objects.equals(this.example, modWorkshopGetSubmission200ResponseSubmission.example) &&
        Objects.equals(this.feedbackauthor, modWorkshopGetSubmission200ResponseSubmission.feedbackauthor) &&
        Objects.equals(this.feedbackauthorformat, modWorkshopGetSubmission200ResponseSubmission.feedbackauthorformat) &&
        Objects.equals(this.grade, modWorkshopGetSubmission200ResponseSubmission.grade) &&
        Objects.equals(this.gradeover, modWorkshopGetSubmission200ResponseSubmission.gradeover) &&
        Objects.equals(this.gradeoverby, modWorkshopGetSubmission200ResponseSubmission.gradeoverby) &&
        Objects.equals(this.id, modWorkshopGetSubmission200ResponseSubmission.id) &&
        Objects.equals(this.late, modWorkshopGetSubmission200ResponseSubmission.late) &&
        Objects.equals(this.published, modWorkshopGetSubmission200ResponseSubmission.published) &&
        Objects.equals(this.timecreated, modWorkshopGetSubmission200ResponseSubmission.timecreated) &&
        Objects.equals(this.timegraded, modWorkshopGetSubmission200ResponseSubmission.timegraded) &&
        Objects.equals(this.timemodified, modWorkshopGetSubmission200ResponseSubmission.timemodified) &&
        Objects.equals(this.title, modWorkshopGetSubmission200ResponseSubmission.title) &&
        Objects.equals(this.workshopid, modWorkshopGetSubmission200ResponseSubmission.workshopid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attachment, attachmentfiles, authorid, content, contentfiles, contentformat, contenttrust, example, feedbackauthor, feedbackauthorformat, grade, gradeover, gradeoverby, id, late, published, timecreated, timegraded, timemodified, title, workshopid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModWorkshopGetSubmission200ResponseSubmission {\n");
    sb.append("    attachment: ").append(toIndentedString(attachment)).append("\n");
    sb.append("    attachmentfiles: ").append(toIndentedString(attachmentfiles)).append("\n");
    sb.append("    authorid: ").append(toIndentedString(authorid)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    contentfiles: ").append(toIndentedString(contentfiles)).append("\n");
    sb.append("    contentformat: ").append(toIndentedString(contentformat)).append("\n");
    sb.append("    contenttrust: ").append(toIndentedString(contenttrust)).append("\n");
    sb.append("    example: ").append(toIndentedString(example)).append("\n");
    sb.append("    feedbackauthor: ").append(toIndentedString(feedbackauthor)).append("\n");
    sb.append("    feedbackauthorformat: ").append(toIndentedString(feedbackauthorformat)).append("\n");
    sb.append("    grade: ").append(toIndentedString(grade)).append("\n");
    sb.append("    gradeover: ").append(toIndentedString(gradeover)).append("\n");
    sb.append("    gradeoverby: ").append(toIndentedString(gradeoverby)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    late: ").append(toIndentedString(late)).append("\n");
    sb.append("    published: ").append(toIndentedString(published)).append("\n");
    sb.append("    timecreated: ").append(toIndentedString(timecreated)).append("\n");
    sb.append("    timegraded: ").append(toIndentedString(timegraded)).append("\n");
    sb.append("    timemodified: ").append(toIndentedString(timemodified)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    workshopid: ").append(toIndentedString(workshopid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attachment");
    openapiFields.add("attachmentfiles");
    openapiFields.add("authorid");
    openapiFields.add("content");
    openapiFields.add("contentfiles");
    openapiFields.add("contentformat");
    openapiFields.add("contenttrust");
    openapiFields.add("example");
    openapiFields.add("feedbackauthor");
    openapiFields.add("feedbackauthorformat");
    openapiFields.add("grade");
    openapiFields.add("gradeover");
    openapiFields.add("gradeoverby");
    openapiFields.add("id");
    openapiFields.add("late");
    openapiFields.add("published");
    openapiFields.add("timecreated");
    openapiFields.add("timegraded");
    openapiFields.add("timemodified");
    openapiFields.add("title");
    openapiFields.add("workshopid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("attachment");
    openapiRequiredFields.add("authorid");
    openapiRequiredFields.add("content");
    openapiRequiredFields.add("contenttrust");
    openapiRequiredFields.add("example");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("late");
    openapiRequiredFields.add("published");
    openapiRequiredFields.add("timecreated");
    openapiRequiredFields.add("timemodified");
    openapiRequiredFields.add("title");
    openapiRequiredFields.add("workshopid");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ModWorkshopGetSubmission200ResponseSubmission
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ModWorkshopGetSubmission200ResponseSubmission.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModWorkshopGetSubmission200ResponseSubmission is not found in the empty JSON string", ModWorkshopGetSubmission200ResponseSubmission.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ModWorkshopGetSubmission200ResponseSubmission.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModWorkshopGetSubmission200ResponseSubmission` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ModWorkshopGetSubmission200ResponseSubmission.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("attachmentfiles") != null && !jsonObj.get("attachmentfiles").isJsonNull()) {
        JsonArray jsonArrayattachmentfiles = jsonObj.getAsJsonArray("attachmentfiles");
        if (jsonArrayattachmentfiles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("attachmentfiles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `attachmentfiles` to be an array in the JSON string but got `%s`", jsonObj.get("attachmentfiles").toString()));
          }

          // validate the optional field `attachmentfiles` (array)
          for (int i = 0; i < jsonArrayattachmentfiles.size(); i++) {
            CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner.validateJsonElement(jsonArrayattachmentfiles.get(i));
          };
        }
      }
      if (!jsonObj.get("content").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `content` to be a primitive type in the JSON string but got `%s`", jsonObj.get("content").toString()));
      }
      if (jsonObj.get("contentfiles") != null && !jsonObj.get("contentfiles").isJsonNull()) {
        JsonArray jsonArraycontentfiles = jsonObj.getAsJsonArray("contentfiles");
        if (jsonArraycontentfiles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("contentfiles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `contentfiles` to be an array in the JSON string but got `%s`", jsonObj.get("contentfiles").toString()));
          }

          // validate the optional field `contentfiles` (array)
          for (int i = 0; i < jsonArraycontentfiles.size(); i++) {
            CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner.validateJsonElement(jsonArraycontentfiles.get(i));
          };
        }
      }
      if ((jsonObj.get("feedbackauthor") != null && !jsonObj.get("feedbackauthor").isJsonNull()) && !jsonObj.get("feedbackauthor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `feedbackauthor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("feedbackauthor").toString()));
      }
      if (!jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModWorkshopGetSubmission200ResponseSubmission.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModWorkshopGetSubmission200ResponseSubmission' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModWorkshopGetSubmission200ResponseSubmission> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModWorkshopGetSubmission200ResponseSubmission.class));

       return (TypeAdapter<T>) new TypeAdapter<ModWorkshopGetSubmission200ResponseSubmission>() {
           @Override
           public void write(JsonWriter out, ModWorkshopGetSubmission200ResponseSubmission value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModWorkshopGetSubmission200ResponseSubmission read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ModWorkshopGetSubmission200ResponseSubmission given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ModWorkshopGetSubmission200ResponseSubmission
  * @throws IOException if the JSON string is invalid with respect to ModWorkshopGetSubmission200ResponseSubmission
  */
  public static ModWorkshopGetSubmission200ResponseSubmission fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModWorkshopGetSubmission200ResponseSubmission.class);
  }

 /**
  * Convert an instance of ModWorkshopGetSubmission200ResponseSubmission to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

