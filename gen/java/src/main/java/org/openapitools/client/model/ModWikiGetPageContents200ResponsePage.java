/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ModDataGetEntries200ResponseEntriesInnerTagsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.joshuapare.JSON;

/**
 * ModWikiGetPageContents200ResponsePage
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-18T20:58:28.689161-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class ModWikiGetPageContents200ResponsePage {
  public static final String SERIALIZED_NAME_CACHEDCONTENT = "cachedcontent";
  @SerializedName(SERIALIZED_NAME_CACHEDCONTENT)
  private String cachedcontent;

  public static final String SERIALIZED_NAME_CANEDITPAGE = "caneditpage";
  @SerializedName(SERIALIZED_NAME_CANEDITPAGE)
  private Boolean caneditpage = null;

  public static final String SERIALIZED_NAME_CONTENTFORMAT = "contentformat";
  @SerializedName(SERIALIZED_NAME_CONTENTFORMAT)
  private Integer contentformat = null;

  public static final String SERIALIZED_NAME_GROUPID = "groupid";
  @SerializedName(SERIALIZED_NAME_GROUPID)
  private Integer groupid = null;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_SUBWIKIID = "subwikiid";
  @SerializedName(SERIALIZED_NAME_SUBWIKIID)
  private Integer subwikiid = null;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<ModDataGetEntries200ResponseEntriesInnerTagsInner> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_USERID = "userid";
  @SerializedName(SERIALIZED_NAME_USERID)
  private Integer userid = null;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Integer version = null;

  public static final String SERIALIZED_NAME_WIKIID = "wikiid";
  @SerializedName(SERIALIZED_NAME_WIKIID)
  private Integer wikiid = null;

  public ModWikiGetPageContents200ResponsePage() {
  }

  public ModWikiGetPageContents200ResponsePage cachedcontent(String cachedcontent) {
    this.cachedcontent = cachedcontent;
    return this;
  }

   /**
   * Page contents.
   * @return cachedcontent
  **/
  @javax.annotation.Nonnull
  public String getCachedcontent() {
    return cachedcontent;
  }

  public void setCachedcontent(String cachedcontent) {
    this.cachedcontent = cachedcontent;
  }


  public ModWikiGetPageContents200ResponsePage caneditpage(Boolean caneditpage) {
    this.caneditpage = caneditpage;
    return this;
  }

   /**
   * True if user can edit the page.
   * @return caneditpage
  **/
  @javax.annotation.Nonnull
  public Boolean getCaneditpage() {
    return caneditpage;
  }

  public void setCaneditpage(Boolean caneditpage) {
    this.caneditpage = caneditpage;
  }


  public ModWikiGetPageContents200ResponsePage contentformat(Integer contentformat) {
    this.contentformat = contentformat;
    return this;
  }

   /**
   * cachedcontent format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)
   * @return contentformat
  **/
  @javax.annotation.Nullable
  public Integer getContentformat() {
    return contentformat;
  }

  public void setContentformat(Integer contentformat) {
    this.contentformat = contentformat;
  }


  public ModWikiGetPageContents200ResponsePage groupid(Integer groupid) {
    this.groupid = groupid;
    return this;
  }

   /**
   * Page&#39;s group ID.
   * @return groupid
  **/
  @javax.annotation.Nonnull
  public Integer getGroupid() {
    return groupid;
  }

  public void setGroupid(Integer groupid) {
    this.groupid = groupid;
  }


  public ModWikiGetPageContents200ResponsePage id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * Page ID.
   * @return id
  **/
  @javax.annotation.Nonnull
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public ModWikiGetPageContents200ResponsePage subwikiid(Integer subwikiid) {
    this.subwikiid = subwikiid;
    return this;
  }

   /**
   * Page&#39;s subwiki ID.
   * @return subwikiid
  **/
  @javax.annotation.Nonnull
  public Integer getSubwikiid() {
    return subwikiid;
  }

  public void setSubwikiid(Integer subwikiid) {
    this.subwikiid = subwikiid;
  }


  public ModWikiGetPageContents200ResponsePage tags(List<ModDataGetEntries200ResponseEntriesInnerTagsInner> tags) {
    this.tags = tags;
    return this;
  }

  public ModWikiGetPageContents200ResponsePage addTagsItem(ModDataGetEntries200ResponseEntriesInnerTagsInner tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @javax.annotation.Nullable
  public List<ModDataGetEntries200ResponseEntriesInnerTagsInner> getTags() {
    return tags;
  }

  public void setTags(List<ModDataGetEntries200ResponseEntriesInnerTagsInner> tags) {
    this.tags = tags;
  }


  public ModWikiGetPageContents200ResponsePage title(String title) {
    this.title = title;
    return this;
  }

   /**
   * Page title.
   * @return title
  **/
  @javax.annotation.Nonnull
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public ModWikiGetPageContents200ResponsePage userid(Integer userid) {
    this.userid = userid;
    return this;
  }

   /**
   * Page&#39;s user ID.
   * @return userid
  **/
  @javax.annotation.Nonnull
  public Integer getUserid() {
    return userid;
  }

  public void setUserid(Integer userid) {
    this.userid = userid;
  }


  public ModWikiGetPageContents200ResponsePage version(Integer version) {
    this.version = version;
    return this;
  }

   /**
   * Latest version of the page.
   * @return version
  **/
  @javax.annotation.Nullable
  public Integer getVersion() {
    return version;
  }

  public void setVersion(Integer version) {
    this.version = version;
  }


  public ModWikiGetPageContents200ResponsePage wikiid(Integer wikiid) {
    this.wikiid = wikiid;
    return this;
  }

   /**
   * Page&#39;s wiki ID.
   * @return wikiid
  **/
  @javax.annotation.Nonnull
  public Integer getWikiid() {
    return wikiid;
  }

  public void setWikiid(Integer wikiid) {
    this.wikiid = wikiid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModWikiGetPageContents200ResponsePage modWikiGetPageContents200ResponsePage = (ModWikiGetPageContents200ResponsePage) o;
    return Objects.equals(this.cachedcontent, modWikiGetPageContents200ResponsePage.cachedcontent) &&
        Objects.equals(this.caneditpage, modWikiGetPageContents200ResponsePage.caneditpage) &&
        Objects.equals(this.contentformat, modWikiGetPageContents200ResponsePage.contentformat) &&
        Objects.equals(this.groupid, modWikiGetPageContents200ResponsePage.groupid) &&
        Objects.equals(this.id, modWikiGetPageContents200ResponsePage.id) &&
        Objects.equals(this.subwikiid, modWikiGetPageContents200ResponsePage.subwikiid) &&
        Objects.equals(this.tags, modWikiGetPageContents200ResponsePage.tags) &&
        Objects.equals(this.title, modWikiGetPageContents200ResponsePage.title) &&
        Objects.equals(this.userid, modWikiGetPageContents200ResponsePage.userid) &&
        Objects.equals(this.version, modWikiGetPageContents200ResponsePage.version) &&
        Objects.equals(this.wikiid, modWikiGetPageContents200ResponsePage.wikiid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cachedcontent, caneditpage, contentformat, groupid, id, subwikiid, tags, title, userid, version, wikiid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModWikiGetPageContents200ResponsePage {\n");
    sb.append("    cachedcontent: ").append(toIndentedString(cachedcontent)).append("\n");
    sb.append("    caneditpage: ").append(toIndentedString(caneditpage)).append("\n");
    sb.append("    contentformat: ").append(toIndentedString(contentformat)).append("\n");
    sb.append("    groupid: ").append(toIndentedString(groupid)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    subwikiid: ").append(toIndentedString(subwikiid)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    userid: ").append(toIndentedString(userid)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    wikiid: ").append(toIndentedString(wikiid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cachedcontent");
    openapiFields.add("caneditpage");
    openapiFields.add("contentformat");
    openapiFields.add("groupid");
    openapiFields.add("id");
    openapiFields.add("subwikiid");
    openapiFields.add("tags");
    openapiFields.add("title");
    openapiFields.add("userid");
    openapiFields.add("version");
    openapiFields.add("wikiid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("cachedcontent");
    openapiRequiredFields.add("caneditpage");
    openapiRequiredFields.add("groupid");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("subwikiid");
    openapiRequiredFields.add("title");
    openapiRequiredFields.add("userid");
    openapiRequiredFields.add("wikiid");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ModWikiGetPageContents200ResponsePage
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ModWikiGetPageContents200ResponsePage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModWikiGetPageContents200ResponsePage is not found in the empty JSON string", ModWikiGetPageContents200ResponsePage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ModWikiGetPageContents200ResponsePage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModWikiGetPageContents200ResponsePage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ModWikiGetPageContents200ResponsePage.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("cachedcontent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cachedcontent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cachedcontent").toString()));
      }
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        JsonArray jsonArraytags = jsonObj.getAsJsonArray("tags");
        if (jsonArraytags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
          }

          // validate the optional field `tags` (array)
          for (int i = 0; i < jsonArraytags.size(); i++) {
            ModDataGetEntries200ResponseEntriesInnerTagsInner.validateJsonElement(jsonArraytags.get(i));
          };
        }
      }
      if (!jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModWikiGetPageContents200ResponsePage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModWikiGetPageContents200ResponsePage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModWikiGetPageContents200ResponsePage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModWikiGetPageContents200ResponsePage.class));

       return (TypeAdapter<T>) new TypeAdapter<ModWikiGetPageContents200ResponsePage>() {
           @Override
           public void write(JsonWriter out, ModWikiGetPageContents200ResponsePage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModWikiGetPageContents200ResponsePage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ModWikiGetPageContents200ResponsePage given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ModWikiGetPageContents200ResponsePage
  * @throws IOException if the JSON string is invalid with respect to ModWikiGetPageContents200ResponsePage
  */
  public static ModWikiGetPageContents200ResponsePage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModWikiGetPageContents200ResponsePage.class);
  }

 /**
  * Convert an instance of ModWikiGetPageContents200ResponsePage to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

