/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AuthEmailSignupUser200ResponseWarningsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.joshuapare.JSON;

/**
 * ModFeedbackGetFeedbackAccessInformation200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-18T20:58:28.689161-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class ModFeedbackGetFeedbackAccessInformation200Response {
  public static final String SERIALIZED_NAME_CANCOMPLETE = "cancomplete";
  @SerializedName(SERIALIZED_NAME_CANCOMPLETE)
  private Boolean cancomplete = null;

  public static final String SERIALIZED_NAME_CANDELETESUBMISSIONS = "candeletesubmissions";
  @SerializedName(SERIALIZED_NAME_CANDELETESUBMISSIONS)
  private Boolean candeletesubmissions = null;

  public static final String SERIALIZED_NAME_CANEDITITEMS = "canedititems";
  @SerializedName(SERIALIZED_NAME_CANEDITITEMS)
  private Boolean canedititems = null;

  public static final String SERIALIZED_NAME_CANSUBMIT = "cansubmit";
  @SerializedName(SERIALIZED_NAME_CANSUBMIT)
  private Boolean cansubmit = null;

  public static final String SERIALIZED_NAME_CANVIEWANALYSIS = "canviewanalysis";
  @SerializedName(SERIALIZED_NAME_CANVIEWANALYSIS)
  private Boolean canviewanalysis = null;

  public static final String SERIALIZED_NAME_CANVIEWREPORTS = "canviewreports";
  @SerializedName(SERIALIZED_NAME_CANVIEWREPORTS)
  private Boolean canviewreports = null;

  public static final String SERIALIZED_NAME_ISALREADYSUBMITTED = "isalreadysubmitted";
  @SerializedName(SERIALIZED_NAME_ISALREADYSUBMITTED)
  private Boolean isalreadysubmitted = null;

  public static final String SERIALIZED_NAME_ISANONYMOUS = "isanonymous";
  @SerializedName(SERIALIZED_NAME_ISANONYMOUS)
  private Boolean isanonymous = null;

  public static final String SERIALIZED_NAME_ISEMPTY = "isempty";
  @SerializedName(SERIALIZED_NAME_ISEMPTY)
  private Boolean isempty = null;

  public static final String SERIALIZED_NAME_ISOPEN = "isopen";
  @SerializedName(SERIALIZED_NAME_ISOPEN)
  private Boolean isopen = null;

  public static final String SERIALIZED_NAME_WARNINGS = "warnings";
  @SerializedName(SERIALIZED_NAME_WARNINGS)
  private List<AuthEmailSignupUser200ResponseWarningsInner> warnings = new ArrayList<>();

  public ModFeedbackGetFeedbackAccessInformation200Response() {
  }

  public ModFeedbackGetFeedbackAccessInformation200Response cancomplete(Boolean cancomplete) {
    this.cancomplete = cancomplete;
    return this;
  }

   /**
   * Whether the user can complete the feedback or not.
   * @return cancomplete
  **/
  @javax.annotation.Nonnull
  public Boolean getCancomplete() {
    return cancomplete;
  }

  public void setCancomplete(Boolean cancomplete) {
    this.cancomplete = cancomplete;
  }


  public ModFeedbackGetFeedbackAccessInformation200Response candeletesubmissions(Boolean candeletesubmissions) {
    this.candeletesubmissions = candeletesubmissions;
    return this;
  }

   /**
   * Whether the user can delete submissions or not.
   * @return candeletesubmissions
  **/
  @javax.annotation.Nonnull
  public Boolean getCandeletesubmissions() {
    return candeletesubmissions;
  }

  public void setCandeletesubmissions(Boolean candeletesubmissions) {
    this.candeletesubmissions = candeletesubmissions;
  }


  public ModFeedbackGetFeedbackAccessInformation200Response canedititems(Boolean canedititems) {
    this.canedititems = canedititems;
    return this;
  }

   /**
   * Whether the user can edit feedback items or not.
   * @return canedititems
  **/
  @javax.annotation.Nonnull
  public Boolean getCanedititems() {
    return canedititems;
  }

  public void setCanedititems(Boolean canedititems) {
    this.canedititems = canedititems;
  }


  public ModFeedbackGetFeedbackAccessInformation200Response cansubmit(Boolean cansubmit) {
    this.cansubmit = cansubmit;
    return this;
  }

   /**
   * Whether the user can submit the feedback or not.
   * @return cansubmit
  **/
  @javax.annotation.Nonnull
  public Boolean getCansubmit() {
    return cansubmit;
  }

  public void setCansubmit(Boolean cansubmit) {
    this.cansubmit = cansubmit;
  }


  public ModFeedbackGetFeedbackAccessInformation200Response canviewanalysis(Boolean canviewanalysis) {
    this.canviewanalysis = canviewanalysis;
    return this;
  }

   /**
   * Whether the user can view the analysis or not.
   * @return canviewanalysis
  **/
  @javax.annotation.Nonnull
  public Boolean getCanviewanalysis() {
    return canviewanalysis;
  }

  public void setCanviewanalysis(Boolean canviewanalysis) {
    this.canviewanalysis = canviewanalysis;
  }


  public ModFeedbackGetFeedbackAccessInformation200Response canviewreports(Boolean canviewreports) {
    this.canviewreports = canviewreports;
    return this;
  }

   /**
   * Whether the user can view the feedback reports or not.
   * @return canviewreports
  **/
  @javax.annotation.Nonnull
  public Boolean getCanviewreports() {
    return canviewreports;
  }

  public void setCanviewreports(Boolean canviewreports) {
    this.canviewreports = canviewreports;
  }


  public ModFeedbackGetFeedbackAccessInformation200Response isalreadysubmitted(Boolean isalreadysubmitted) {
    this.isalreadysubmitted = isalreadysubmitted;
    return this;
  }

   /**
   * Whether the feedback is already submitted or not.
   * @return isalreadysubmitted
  **/
  @javax.annotation.Nonnull
  public Boolean getIsalreadysubmitted() {
    return isalreadysubmitted;
  }

  public void setIsalreadysubmitted(Boolean isalreadysubmitted) {
    this.isalreadysubmitted = isalreadysubmitted;
  }


  public ModFeedbackGetFeedbackAccessInformation200Response isanonymous(Boolean isanonymous) {
    this.isanonymous = isanonymous;
    return this;
  }

   /**
   * Whether the feedback is anonymous or not.
   * @return isanonymous
  **/
  @javax.annotation.Nonnull
  public Boolean getIsanonymous() {
    return isanonymous;
  }

  public void setIsanonymous(Boolean isanonymous) {
    this.isanonymous = isanonymous;
  }


  public ModFeedbackGetFeedbackAccessInformation200Response isempty(Boolean isempty) {
    this.isempty = isempty;
    return this;
  }

   /**
   * Whether the feedback has questions or not.
   * @return isempty
  **/
  @javax.annotation.Nonnull
  public Boolean getIsempty() {
    return isempty;
  }

  public void setIsempty(Boolean isempty) {
    this.isempty = isempty;
  }


  public ModFeedbackGetFeedbackAccessInformation200Response isopen(Boolean isopen) {
    this.isopen = isopen;
    return this;
  }

   /**
   * Whether the feedback has active access time restrictions or not.
   * @return isopen
  **/
  @javax.annotation.Nonnull
  public Boolean getIsopen() {
    return isopen;
  }

  public void setIsopen(Boolean isopen) {
    this.isopen = isopen;
  }


  public ModFeedbackGetFeedbackAccessInformation200Response warnings(List<AuthEmailSignupUser200ResponseWarningsInner> warnings) {
    this.warnings = warnings;
    return this;
  }

  public ModFeedbackGetFeedbackAccessInformation200Response addWarningsItem(AuthEmailSignupUser200ResponseWarningsInner warningsItem) {
    if (this.warnings == null) {
      this.warnings = new ArrayList<>();
    }
    this.warnings.add(warningsItem);
    return this;
  }

   /**
   * Get warnings
   * @return warnings
  **/
  @javax.annotation.Nullable
  public List<AuthEmailSignupUser200ResponseWarningsInner> getWarnings() {
    return warnings;
  }

  public void setWarnings(List<AuthEmailSignupUser200ResponseWarningsInner> warnings) {
    this.warnings = warnings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModFeedbackGetFeedbackAccessInformation200Response modFeedbackGetFeedbackAccessInformation200Response = (ModFeedbackGetFeedbackAccessInformation200Response) o;
    return Objects.equals(this.cancomplete, modFeedbackGetFeedbackAccessInformation200Response.cancomplete) &&
        Objects.equals(this.candeletesubmissions, modFeedbackGetFeedbackAccessInformation200Response.candeletesubmissions) &&
        Objects.equals(this.canedititems, modFeedbackGetFeedbackAccessInformation200Response.canedititems) &&
        Objects.equals(this.cansubmit, modFeedbackGetFeedbackAccessInformation200Response.cansubmit) &&
        Objects.equals(this.canviewanalysis, modFeedbackGetFeedbackAccessInformation200Response.canviewanalysis) &&
        Objects.equals(this.canviewreports, modFeedbackGetFeedbackAccessInformation200Response.canviewreports) &&
        Objects.equals(this.isalreadysubmitted, modFeedbackGetFeedbackAccessInformation200Response.isalreadysubmitted) &&
        Objects.equals(this.isanonymous, modFeedbackGetFeedbackAccessInformation200Response.isanonymous) &&
        Objects.equals(this.isempty, modFeedbackGetFeedbackAccessInformation200Response.isempty) &&
        Objects.equals(this.isopen, modFeedbackGetFeedbackAccessInformation200Response.isopen) &&
        Objects.equals(this.warnings, modFeedbackGetFeedbackAccessInformation200Response.warnings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cancomplete, candeletesubmissions, canedititems, cansubmit, canviewanalysis, canviewreports, isalreadysubmitted, isanonymous, isempty, isopen, warnings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModFeedbackGetFeedbackAccessInformation200Response {\n");
    sb.append("    cancomplete: ").append(toIndentedString(cancomplete)).append("\n");
    sb.append("    candeletesubmissions: ").append(toIndentedString(candeletesubmissions)).append("\n");
    sb.append("    canedititems: ").append(toIndentedString(canedititems)).append("\n");
    sb.append("    cansubmit: ").append(toIndentedString(cansubmit)).append("\n");
    sb.append("    canviewanalysis: ").append(toIndentedString(canviewanalysis)).append("\n");
    sb.append("    canviewreports: ").append(toIndentedString(canviewreports)).append("\n");
    sb.append("    isalreadysubmitted: ").append(toIndentedString(isalreadysubmitted)).append("\n");
    sb.append("    isanonymous: ").append(toIndentedString(isanonymous)).append("\n");
    sb.append("    isempty: ").append(toIndentedString(isempty)).append("\n");
    sb.append("    isopen: ").append(toIndentedString(isopen)).append("\n");
    sb.append("    warnings: ").append(toIndentedString(warnings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cancomplete");
    openapiFields.add("candeletesubmissions");
    openapiFields.add("canedititems");
    openapiFields.add("cansubmit");
    openapiFields.add("canviewanalysis");
    openapiFields.add("canviewreports");
    openapiFields.add("isalreadysubmitted");
    openapiFields.add("isanonymous");
    openapiFields.add("isempty");
    openapiFields.add("isopen");
    openapiFields.add("warnings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("cancomplete");
    openapiRequiredFields.add("candeletesubmissions");
    openapiRequiredFields.add("canedititems");
    openapiRequiredFields.add("cansubmit");
    openapiRequiredFields.add("canviewanalysis");
    openapiRequiredFields.add("canviewreports");
    openapiRequiredFields.add("isalreadysubmitted");
    openapiRequiredFields.add("isanonymous");
    openapiRequiredFields.add("isempty");
    openapiRequiredFields.add("isopen");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ModFeedbackGetFeedbackAccessInformation200Response
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ModFeedbackGetFeedbackAccessInformation200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModFeedbackGetFeedbackAccessInformation200Response is not found in the empty JSON string", ModFeedbackGetFeedbackAccessInformation200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ModFeedbackGetFeedbackAccessInformation200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModFeedbackGetFeedbackAccessInformation200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ModFeedbackGetFeedbackAccessInformation200Response.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("warnings") != null && !jsonObj.get("warnings").isJsonNull()) {
        JsonArray jsonArraywarnings = jsonObj.getAsJsonArray("warnings");
        if (jsonArraywarnings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("warnings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `warnings` to be an array in the JSON string but got `%s`", jsonObj.get("warnings").toString()));
          }

          // validate the optional field `warnings` (array)
          for (int i = 0; i < jsonArraywarnings.size(); i++) {
            AuthEmailSignupUser200ResponseWarningsInner.validateJsonElement(jsonArraywarnings.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModFeedbackGetFeedbackAccessInformation200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModFeedbackGetFeedbackAccessInformation200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModFeedbackGetFeedbackAccessInformation200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModFeedbackGetFeedbackAccessInformation200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<ModFeedbackGetFeedbackAccessInformation200Response>() {
           @Override
           public void write(JsonWriter out, ModFeedbackGetFeedbackAccessInformation200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModFeedbackGetFeedbackAccessInformation200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ModFeedbackGetFeedbackAccessInformation200Response given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ModFeedbackGetFeedbackAccessInformation200Response
  * @throws IOException if the JSON string is invalid with respect to ModFeedbackGetFeedbackAccessInformation200Response
  */
  public static ModFeedbackGetFeedbackAccessInformation200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModFeedbackGetFeedbackAccessInformation200Response.class);
  }

 /**
  * Convert an instance of ModFeedbackGetFeedbackAccessInformation200Response to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

