/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.joshuapare.JSON;

/**
 * CoreMessageGetConversationRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-18T14:00:07.069642-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class CoreMessageGetConversationRequest {
  public static final String SERIALIZED_NAME_CONVERSATIONID = "conversationid";
  @SerializedName(SERIALIZED_NAME_CONVERSATIONID)
  private Integer conversationid = null;

  public static final String SERIALIZED_NAME_INCLUDECONTACTREQUESTS = "includecontactrequests";
  @SerializedName(SERIALIZED_NAME_INCLUDECONTACTREQUESTS)
  private Boolean includecontactrequests = null;

  public static final String SERIALIZED_NAME_INCLUDEPRIVACYINFO = "includeprivacyinfo";
  @SerializedName(SERIALIZED_NAME_INCLUDEPRIVACYINFO)
  private Boolean includeprivacyinfo = null;

  public static final String SERIALIZED_NAME_MEMBERLIMIT = "memberlimit";
  @SerializedName(SERIALIZED_NAME_MEMBERLIMIT)
  private Integer memberlimit = 0;

  public static final String SERIALIZED_NAME_MEMBEROFFSET = "memberoffset";
  @SerializedName(SERIALIZED_NAME_MEMBEROFFSET)
  private Integer memberoffset = 0;

  public static final String SERIALIZED_NAME_MESSAGELIMIT = "messagelimit";
  @SerializedName(SERIALIZED_NAME_MESSAGELIMIT)
  private Integer messagelimit = 100;

  public static final String SERIALIZED_NAME_MESSAGEOFFSET = "messageoffset";
  @SerializedName(SERIALIZED_NAME_MESSAGEOFFSET)
  private Integer messageoffset = 0;

  public static final String SERIALIZED_NAME_NEWESTMESSAGESFIRST = "newestmessagesfirst";
  @SerializedName(SERIALIZED_NAME_NEWESTMESSAGESFIRST)
  private Boolean newestmessagesfirst = true;

  public static final String SERIALIZED_NAME_USERID = "userid";
  @SerializedName(SERIALIZED_NAME_USERID)
  private Integer userid = null;

  public CoreMessageGetConversationRequest() {
  }

  public CoreMessageGetConversationRequest conversationid(Integer conversationid) {
    this.conversationid = conversationid;
    return this;
  }

   /**
   * The id of the conversation to fetch
   * @return conversationid
  **/
  @javax.annotation.Nonnull
  public Integer getConversationid() {
    return conversationid;
  }

  public void setConversationid(Integer conversationid) {
    this.conversationid = conversationid;
  }


  public CoreMessageGetConversationRequest includecontactrequests(Boolean includecontactrequests) {
    this.includecontactrequests = includecontactrequests;
    return this;
  }

   /**
   * Include contact requests in the members
   * @return includecontactrequests
  **/
  @javax.annotation.Nonnull
  public Boolean getIncludecontactrequests() {
    return includecontactrequests;
  }

  public void setIncludecontactrequests(Boolean includecontactrequests) {
    this.includecontactrequests = includecontactrequests;
  }


  public CoreMessageGetConversationRequest includeprivacyinfo(Boolean includeprivacyinfo) {
    this.includeprivacyinfo = includeprivacyinfo;
    return this;
  }

   /**
   * Include privacy info in the members
   * @return includeprivacyinfo
  **/
  @javax.annotation.Nonnull
  public Boolean getIncludeprivacyinfo() {
    return includeprivacyinfo;
  }

  public void setIncludeprivacyinfo(Boolean includeprivacyinfo) {
    this.includeprivacyinfo = includeprivacyinfo;
  }


  public CoreMessageGetConversationRequest memberlimit(Integer memberlimit) {
    this.memberlimit = memberlimit;
    return this;
  }

   /**
   * Limit for number of members
   * @return memberlimit
  **/
  @javax.annotation.Nullable
  public Integer getMemberlimit() {
    return memberlimit;
  }

  public void setMemberlimit(Integer memberlimit) {
    this.memberlimit = memberlimit;
  }


  public CoreMessageGetConversationRequest memberoffset(Integer memberoffset) {
    this.memberoffset = memberoffset;
    return this;
  }

   /**
   * Offset for member list
   * @return memberoffset
  **/
  @javax.annotation.Nullable
  public Integer getMemberoffset() {
    return memberoffset;
  }

  public void setMemberoffset(Integer memberoffset) {
    this.memberoffset = memberoffset;
  }


  public CoreMessageGetConversationRequest messagelimit(Integer messagelimit) {
    this.messagelimit = messagelimit;
    return this;
  }

   /**
   * Limit for number of messages
   * @return messagelimit
  **/
  @javax.annotation.Nullable
  public Integer getMessagelimit() {
    return messagelimit;
  }

  public void setMessagelimit(Integer messagelimit) {
    this.messagelimit = messagelimit;
  }


  public CoreMessageGetConversationRequest messageoffset(Integer messageoffset) {
    this.messageoffset = messageoffset;
    return this;
  }

   /**
   * Offset for messages list
   * @return messageoffset
  **/
  @javax.annotation.Nullable
  public Integer getMessageoffset() {
    return messageoffset;
  }

  public void setMessageoffset(Integer messageoffset) {
    this.messageoffset = messageoffset;
  }


  public CoreMessageGetConversationRequest newestmessagesfirst(Boolean newestmessagesfirst) {
    this.newestmessagesfirst = newestmessagesfirst;
    return this;
  }

   /**
   * Order messages by newest first
   * @return newestmessagesfirst
  **/
  @javax.annotation.Nullable
  public Boolean getNewestmessagesfirst() {
    return newestmessagesfirst;
  }

  public void setNewestmessagesfirst(Boolean newestmessagesfirst) {
    this.newestmessagesfirst = newestmessagesfirst;
  }


  public CoreMessageGetConversationRequest userid(Integer userid) {
    this.userid = userid;
    return this;
  }

   /**
   * The id of the user who we are viewing conversations for
   * @return userid
  **/
  @javax.annotation.Nonnull
  public Integer getUserid() {
    return userid;
  }

  public void setUserid(Integer userid) {
    this.userid = userid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CoreMessageGetConversationRequest coreMessageGetConversationRequest = (CoreMessageGetConversationRequest) o;
    return Objects.equals(this.conversationid, coreMessageGetConversationRequest.conversationid) &&
        Objects.equals(this.includecontactrequests, coreMessageGetConversationRequest.includecontactrequests) &&
        Objects.equals(this.includeprivacyinfo, coreMessageGetConversationRequest.includeprivacyinfo) &&
        Objects.equals(this.memberlimit, coreMessageGetConversationRequest.memberlimit) &&
        Objects.equals(this.memberoffset, coreMessageGetConversationRequest.memberoffset) &&
        Objects.equals(this.messagelimit, coreMessageGetConversationRequest.messagelimit) &&
        Objects.equals(this.messageoffset, coreMessageGetConversationRequest.messageoffset) &&
        Objects.equals(this.newestmessagesfirst, coreMessageGetConversationRequest.newestmessagesfirst) &&
        Objects.equals(this.userid, coreMessageGetConversationRequest.userid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(conversationid, includecontactrequests, includeprivacyinfo, memberlimit, memberoffset, messagelimit, messageoffset, newestmessagesfirst, userid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CoreMessageGetConversationRequest {\n");
    sb.append("    conversationid: ").append(toIndentedString(conversationid)).append("\n");
    sb.append("    includecontactrequests: ").append(toIndentedString(includecontactrequests)).append("\n");
    sb.append("    includeprivacyinfo: ").append(toIndentedString(includeprivacyinfo)).append("\n");
    sb.append("    memberlimit: ").append(toIndentedString(memberlimit)).append("\n");
    sb.append("    memberoffset: ").append(toIndentedString(memberoffset)).append("\n");
    sb.append("    messagelimit: ").append(toIndentedString(messagelimit)).append("\n");
    sb.append("    messageoffset: ").append(toIndentedString(messageoffset)).append("\n");
    sb.append("    newestmessagesfirst: ").append(toIndentedString(newestmessagesfirst)).append("\n");
    sb.append("    userid: ").append(toIndentedString(userid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("conversationid");
    openapiFields.add("includecontactrequests");
    openapiFields.add("includeprivacyinfo");
    openapiFields.add("memberlimit");
    openapiFields.add("memberoffset");
    openapiFields.add("messagelimit");
    openapiFields.add("messageoffset");
    openapiFields.add("newestmessagesfirst");
    openapiFields.add("userid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("conversationid");
    openapiRequiredFields.add("includecontactrequests");
    openapiRequiredFields.add("includeprivacyinfo");
    openapiRequiredFields.add("userid");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CoreMessageGetConversationRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CoreMessageGetConversationRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CoreMessageGetConversationRequest is not found in the empty JSON string", CoreMessageGetConversationRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CoreMessageGetConversationRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CoreMessageGetConversationRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CoreMessageGetConversationRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CoreMessageGetConversationRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CoreMessageGetConversationRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CoreMessageGetConversationRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CoreMessageGetConversationRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CoreMessageGetConversationRequest>() {
           @Override
           public void write(JsonWriter out, CoreMessageGetConversationRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CoreMessageGetConversationRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CoreMessageGetConversationRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CoreMessageGetConversationRequest
  * @throws IOException if the JSON string is invalid with respect to CoreMessageGetConversationRequest
  */
  public static CoreMessageGetConversationRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CoreMessageGetConversationRequest.class);
  }

 /**
  * Convert an instance of CoreMessageGetConversationRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

