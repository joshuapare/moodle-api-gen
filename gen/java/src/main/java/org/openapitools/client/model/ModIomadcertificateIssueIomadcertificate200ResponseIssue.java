/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.joshuapare.JSON;

/**
 * ModIomadcertificateIssueIomadcertificate200ResponseIssue
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-18T20:58:28.689161-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class ModIomadcertificateIssueIomadcertificate200ResponseIssue {
  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_FILENAME = "filename";
  @SerializedName(SERIALIZED_NAME_FILENAME)
  private String filename;

  public static final String SERIALIZED_NAME_FILEURL = "fileurl";
  @SerializedName(SERIALIZED_NAME_FILEURL)
  private String fileurl;

  public static final String SERIALIZED_NAME_GRADE = "grade";
  @SerializedName(SERIALIZED_NAME_GRADE)
  private String grade;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_IOMADCERTIFICATEID = "iomadcertificateid";
  @SerializedName(SERIALIZED_NAME_IOMADCERTIFICATEID)
  private Integer iomadcertificateid;

  public static final String SERIALIZED_NAME_MIMETYPE = "mimetype";
  @SerializedName(SERIALIZED_NAME_MIMETYPE)
  private String mimetype;

  public static final String SERIALIZED_NAME_TIMECREATED = "timecreated";
  @SerializedName(SERIALIZED_NAME_TIMECREATED)
  private Integer timecreated;

  public static final String SERIALIZED_NAME_USERID = "userid";
  @SerializedName(SERIALIZED_NAME_USERID)
  private Integer userid;

  public ModIomadcertificateIssueIomadcertificate200ResponseIssue() {
  }

  public ModIomadcertificateIssueIomadcertificate200ResponseIssue code(String code) {
    this.code = code;
    return this;
  }

   /**
   * Certificate code
   * @return code
  **/
  @javax.annotation.Nonnull
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }


  public ModIomadcertificateIssueIomadcertificate200ResponseIssue filename(String filename) {
    this.filename = filename;
    return this;
  }

   /**
   * Time created
   * @return filename
  **/
  @javax.annotation.Nonnull
  public String getFilename() {
    return filename;
  }

  public void setFilename(String filename) {
    this.filename = filename;
  }


  public ModIomadcertificateIssueIomadcertificate200ResponseIssue fileurl(String fileurl) {
    this.fileurl = fileurl;
    return this;
  }

   /**
   * Time created
   * @return fileurl
  **/
  @javax.annotation.Nonnull
  public String getFileurl() {
    return fileurl;
  }

  public void setFileurl(String fileurl) {
    this.fileurl = fileurl;
  }


  public ModIomadcertificateIssueIomadcertificate200ResponseIssue grade(String grade) {
    this.grade = grade;
    return this;
  }

   /**
   * Certificate grade
   * @return grade
  **/
  @javax.annotation.Nullable
  public String getGrade() {
    return grade;
  }

  public void setGrade(String grade) {
    this.grade = grade;
  }


  public ModIomadcertificateIssueIomadcertificate200ResponseIssue id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * Issue id
   * @return id
  **/
  @javax.annotation.Nonnull
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public ModIomadcertificateIssueIomadcertificate200ResponseIssue iomadcertificateid(Integer iomadcertificateid) {
    this.iomadcertificateid = iomadcertificateid;
    return this;
  }

   /**
   * Certificate id
   * @return iomadcertificateid
  **/
  @javax.annotation.Nonnull
  public Integer getIomadcertificateid() {
    return iomadcertificateid;
  }

  public void setIomadcertificateid(Integer iomadcertificateid) {
    this.iomadcertificateid = iomadcertificateid;
  }


  public ModIomadcertificateIssueIomadcertificate200ResponseIssue mimetype(String mimetype) {
    this.mimetype = mimetype;
    return this;
  }

   /**
   * mime type
   * @return mimetype
  **/
  @javax.annotation.Nonnull
  public String getMimetype() {
    return mimetype;
  }

  public void setMimetype(String mimetype) {
    this.mimetype = mimetype;
  }


  public ModIomadcertificateIssueIomadcertificate200ResponseIssue timecreated(Integer timecreated) {
    this.timecreated = timecreated;
    return this;
  }

   /**
   * Time created
   * @return timecreated
  **/
  @javax.annotation.Nonnull
  public Integer getTimecreated() {
    return timecreated;
  }

  public void setTimecreated(Integer timecreated) {
    this.timecreated = timecreated;
  }


  public ModIomadcertificateIssueIomadcertificate200ResponseIssue userid(Integer userid) {
    this.userid = userid;
    return this;
  }

   /**
   * User id
   * @return userid
  **/
  @javax.annotation.Nonnull
  public Integer getUserid() {
    return userid;
  }

  public void setUserid(Integer userid) {
    this.userid = userid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModIomadcertificateIssueIomadcertificate200ResponseIssue modIomadcertificateIssueIomadcertificate200ResponseIssue = (ModIomadcertificateIssueIomadcertificate200ResponseIssue) o;
    return Objects.equals(this.code, modIomadcertificateIssueIomadcertificate200ResponseIssue.code) &&
        Objects.equals(this.filename, modIomadcertificateIssueIomadcertificate200ResponseIssue.filename) &&
        Objects.equals(this.fileurl, modIomadcertificateIssueIomadcertificate200ResponseIssue.fileurl) &&
        Objects.equals(this.grade, modIomadcertificateIssueIomadcertificate200ResponseIssue.grade) &&
        Objects.equals(this.id, modIomadcertificateIssueIomadcertificate200ResponseIssue.id) &&
        Objects.equals(this.iomadcertificateid, modIomadcertificateIssueIomadcertificate200ResponseIssue.iomadcertificateid) &&
        Objects.equals(this.mimetype, modIomadcertificateIssueIomadcertificate200ResponseIssue.mimetype) &&
        Objects.equals(this.timecreated, modIomadcertificateIssueIomadcertificate200ResponseIssue.timecreated) &&
        Objects.equals(this.userid, modIomadcertificateIssueIomadcertificate200ResponseIssue.userid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(code, filename, fileurl, grade, id, iomadcertificateid, mimetype, timecreated, userid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModIomadcertificateIssueIomadcertificate200ResponseIssue {\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    filename: ").append(toIndentedString(filename)).append("\n");
    sb.append("    fileurl: ").append(toIndentedString(fileurl)).append("\n");
    sb.append("    grade: ").append(toIndentedString(grade)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    iomadcertificateid: ").append(toIndentedString(iomadcertificateid)).append("\n");
    sb.append("    mimetype: ").append(toIndentedString(mimetype)).append("\n");
    sb.append("    timecreated: ").append(toIndentedString(timecreated)).append("\n");
    sb.append("    userid: ").append(toIndentedString(userid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("code");
    openapiFields.add("filename");
    openapiFields.add("fileurl");
    openapiFields.add("grade");
    openapiFields.add("id");
    openapiFields.add("iomadcertificateid");
    openapiFields.add("mimetype");
    openapiFields.add("timecreated");
    openapiFields.add("userid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("code");
    openapiRequiredFields.add("filename");
    openapiRequiredFields.add("fileurl");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("iomadcertificateid");
    openapiRequiredFields.add("mimetype");
    openapiRequiredFields.add("timecreated");
    openapiRequiredFields.add("userid");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ModIomadcertificateIssueIomadcertificate200ResponseIssue
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ModIomadcertificateIssueIomadcertificate200ResponseIssue.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModIomadcertificateIssueIomadcertificate200ResponseIssue is not found in the empty JSON string", ModIomadcertificateIssueIomadcertificate200ResponseIssue.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ModIomadcertificateIssueIomadcertificate200ResponseIssue.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModIomadcertificateIssueIomadcertificate200ResponseIssue` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ModIomadcertificateIssueIomadcertificate200ResponseIssue.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if (!jsonObj.get("filename").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filename` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filename").toString()));
      }
      if (!jsonObj.get("fileurl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fileurl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fileurl").toString()));
      }
      if ((jsonObj.get("grade") != null && !jsonObj.get("grade").isJsonNull()) && !jsonObj.get("grade").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `grade` to be a primitive type in the JSON string but got `%s`", jsonObj.get("grade").toString()));
      }
      if (!jsonObj.get("mimetype").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mimetype` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mimetype").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModIomadcertificateIssueIomadcertificate200ResponseIssue.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModIomadcertificateIssueIomadcertificate200ResponseIssue' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModIomadcertificateIssueIomadcertificate200ResponseIssue> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModIomadcertificateIssueIomadcertificate200ResponseIssue.class));

       return (TypeAdapter<T>) new TypeAdapter<ModIomadcertificateIssueIomadcertificate200ResponseIssue>() {
           @Override
           public void write(JsonWriter out, ModIomadcertificateIssueIomadcertificate200ResponseIssue value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModIomadcertificateIssueIomadcertificate200ResponseIssue read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ModIomadcertificateIssueIomadcertificate200ResponseIssue given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ModIomadcertificateIssueIomadcertificate200ResponseIssue
  * @throws IOException if the JSON string is invalid with respect to ModIomadcertificateIssueIomadcertificate200ResponseIssue
  */
  public static ModIomadcertificateIssueIomadcertificate200ResponseIssue fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModIomadcertificateIssueIomadcertificate200ResponseIssue.class);
  }

 /**
  * Convert an instance of ModIomadcertificateIssueIomadcertificate200ResponseIssue to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

