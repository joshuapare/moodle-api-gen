/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.joshuapare.JSON;

/**
 * CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-18T14:00:07.069642-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse {
  public static final String SERIALIZED_NAME_COURSECATEGORY = "coursecategory";
  @SerializedName(SERIALIZED_NAME_COURSECATEGORY)
  private String coursecategory;

  public static final String SERIALIZED_NAME_COURSEIMAGE = "courseimage";
  @SerializedName(SERIALIZED_NAME_COURSEIMAGE)
  private String courseimage;

  public static final String SERIALIZED_NAME_ENDDATE = "enddate";
  @SerializedName(SERIALIZED_NAME_ENDDATE)
  private Integer enddate;

  public static final String SERIALIZED_NAME_FULLNAME = "fullname";
  @SerializedName(SERIALIZED_NAME_FULLNAME)
  private String fullname;

  public static final String SERIALIZED_NAME_FULLNAMEDISPLAY = "fullnamedisplay";
  @SerializedName(SERIALIZED_NAME_FULLNAMEDISPLAY)
  private String fullnamedisplay;

  public static final String SERIALIZED_NAME_HASPROGRESS = "hasprogress";
  @SerializedName(SERIALIZED_NAME_HASPROGRESS)
  private Boolean hasprogress;

  public static final String SERIALIZED_NAME_HIDDEN = "hidden";
  @SerializedName(SERIALIZED_NAME_HIDDEN)
  private Boolean hidden;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_IDNUMBER = "idnumber";
  @SerializedName(SERIALIZED_NAME_IDNUMBER)
  private String idnumber;

  public static final String SERIALIZED_NAME_ISFAVOURITE = "isfavourite";
  @SerializedName(SERIALIZED_NAME_ISFAVOURITE)
  private Boolean isfavourite;

  public static final String SERIALIZED_NAME_PDFEXPORTFONT = "pdfexportfont";
  @SerializedName(SERIALIZED_NAME_PDFEXPORTFONT)
  private String pdfexportfont;

  public static final String SERIALIZED_NAME_PROGRESS = "progress";
  @SerializedName(SERIALIZED_NAME_PROGRESS)
  private Integer progress;

  public static final String SERIALIZED_NAME_SHORTNAME = "shortname";
  @SerializedName(SERIALIZED_NAME_SHORTNAME)
  private String shortname;

  public static final String SERIALIZED_NAME_SHOWACTIVITYDATES = "showactivitydates";
  @SerializedName(SERIALIZED_NAME_SHOWACTIVITYDATES)
  private Boolean showactivitydates;

  public static final String SERIALIZED_NAME_SHOWCOMPLETIONCONDITIONS = "showcompletionconditions";
  @SerializedName(SERIALIZED_NAME_SHOWCOMPLETIONCONDITIONS)
  private Boolean showcompletionconditions;

  public static final String SERIALIZED_NAME_SHOWSHORTNAME = "showshortname";
  @SerializedName(SERIALIZED_NAME_SHOWSHORTNAME)
  private Boolean showshortname;

  public static final String SERIALIZED_NAME_STARTDATE = "startdate";
  @SerializedName(SERIALIZED_NAME_STARTDATE)
  private Integer startdate;

  public static final String SERIALIZED_NAME_SUMMARY = "summary";
  @SerializedName(SERIALIZED_NAME_SUMMARY)
  private String summary;

  public static final String SERIALIZED_NAME_SUMMARYFORMAT = "summaryformat";
  @SerializedName(SERIALIZED_NAME_SUMMARYFORMAT)
  private Integer summaryformat;

  public static final String SERIALIZED_NAME_TIMEACCESS = "timeaccess";
  @SerializedName(SERIALIZED_NAME_TIMEACCESS)
  private Integer timeaccess;

  public static final String SERIALIZED_NAME_VIEWURL = "viewurl";
  @SerializedName(SERIALIZED_NAME_VIEWURL)
  private String viewurl;

  public static final String SERIALIZED_NAME_VISIBLE = "visible";
  @SerializedName(SERIALIZED_NAME_VISIBLE)
  private Boolean visible;

  public CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse() {
  }

  public CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse coursecategory(String coursecategory) {
    this.coursecategory = coursecategory;
    return this;
  }

   /**
   * coursecategory
   * @return coursecategory
  **/
  @javax.annotation.Nonnull
  public String getCoursecategory() {
    return coursecategory;
  }

  public void setCoursecategory(String coursecategory) {
    this.coursecategory = coursecategory;
  }


  public CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse courseimage(String courseimage) {
    this.courseimage = courseimage;
    return this;
  }

   /**
   * courseimage
   * @return courseimage
  **/
  @javax.annotation.Nonnull
  public String getCourseimage() {
    return courseimage;
  }

  public void setCourseimage(String courseimage) {
    this.courseimage = courseimage;
  }


  public CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse enddate(Integer enddate) {
    this.enddate = enddate;
    return this;
  }

   /**
   * enddate
   * @return enddate
  **/
  @javax.annotation.Nonnull
  public Integer getEnddate() {
    return enddate;
  }

  public void setEnddate(Integer enddate) {
    this.enddate = enddate;
  }


  public CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse fullname(String fullname) {
    this.fullname = fullname;
    return this;
  }

   /**
   * fullname
   * @return fullname
  **/
  @javax.annotation.Nonnull
  public String getFullname() {
    return fullname;
  }

  public void setFullname(String fullname) {
    this.fullname = fullname;
  }


  public CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse fullnamedisplay(String fullnamedisplay) {
    this.fullnamedisplay = fullnamedisplay;
    return this;
  }

   /**
   * fullnamedisplay
   * @return fullnamedisplay
  **/
  @javax.annotation.Nonnull
  public String getFullnamedisplay() {
    return fullnamedisplay;
  }

  public void setFullnamedisplay(String fullnamedisplay) {
    this.fullnamedisplay = fullnamedisplay;
  }


  public CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse hasprogress(Boolean hasprogress) {
    this.hasprogress = hasprogress;
    return this;
  }

   /**
   * hasprogress
   * @return hasprogress
  **/
  @javax.annotation.Nonnull
  public Boolean getHasprogress() {
    return hasprogress;
  }

  public void setHasprogress(Boolean hasprogress) {
    this.hasprogress = hasprogress;
  }


  public CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse hidden(Boolean hidden) {
    this.hidden = hidden;
    return this;
  }

   /**
   * hidden
   * @return hidden
  **/
  @javax.annotation.Nonnull
  public Boolean getHidden() {
    return hidden;
  }

  public void setHidden(Boolean hidden) {
    this.hidden = hidden;
  }


  public CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * id
   * @return id
  **/
  @javax.annotation.Nonnull
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse idnumber(String idnumber) {
    this.idnumber = idnumber;
    return this;
  }

   /**
   * idnumber
   * @return idnumber
  **/
  @javax.annotation.Nonnull
  public String getIdnumber() {
    return idnumber;
  }

  public void setIdnumber(String idnumber) {
    this.idnumber = idnumber;
  }


  public CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse isfavourite(Boolean isfavourite) {
    this.isfavourite = isfavourite;
    return this;
  }

   /**
   * isfavourite
   * @return isfavourite
  **/
  @javax.annotation.Nonnull
  public Boolean getIsfavourite() {
    return isfavourite;
  }

  public void setIsfavourite(Boolean isfavourite) {
    this.isfavourite = isfavourite;
  }


  public CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse pdfexportfont(String pdfexportfont) {
    this.pdfexportfont = pdfexportfont;
    return this;
  }

   /**
   * pdfexportfont
   * @return pdfexportfont
  **/
  @javax.annotation.Nonnull
  public String getPdfexportfont() {
    return pdfexportfont;
  }

  public void setPdfexportfont(String pdfexportfont) {
    this.pdfexportfont = pdfexportfont;
  }


  public CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse progress(Integer progress) {
    this.progress = progress;
    return this;
  }

   /**
   * progress
   * @return progress
  **/
  @javax.annotation.Nullable
  public Integer getProgress() {
    return progress;
  }

  public void setProgress(Integer progress) {
    this.progress = progress;
  }


  public CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse shortname(String shortname) {
    this.shortname = shortname;
    return this;
  }

   /**
   * shortname
   * @return shortname
  **/
  @javax.annotation.Nonnull
  public String getShortname() {
    return shortname;
  }

  public void setShortname(String shortname) {
    this.shortname = shortname;
  }


  public CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse showactivitydates(Boolean showactivitydates) {
    this.showactivitydates = showactivitydates;
    return this;
  }

   /**
   * showactivitydates
   * @return showactivitydates
  **/
  @javax.annotation.Nonnull
  public Boolean getShowactivitydates() {
    return showactivitydates;
  }

  public void setShowactivitydates(Boolean showactivitydates) {
    this.showactivitydates = showactivitydates;
  }


  public CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse showcompletionconditions(Boolean showcompletionconditions) {
    this.showcompletionconditions = showcompletionconditions;
    return this;
  }

   /**
   * showcompletionconditions
   * @return showcompletionconditions
  **/
  @javax.annotation.Nonnull
  public Boolean getShowcompletionconditions() {
    return showcompletionconditions;
  }

  public void setShowcompletionconditions(Boolean showcompletionconditions) {
    this.showcompletionconditions = showcompletionconditions;
  }


  public CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse showshortname(Boolean showshortname) {
    this.showshortname = showshortname;
    return this;
  }

   /**
   * showshortname
   * @return showshortname
  **/
  @javax.annotation.Nonnull
  public Boolean getShowshortname() {
    return showshortname;
  }

  public void setShowshortname(Boolean showshortname) {
    this.showshortname = showshortname;
  }


  public CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse startdate(Integer startdate) {
    this.startdate = startdate;
    return this;
  }

   /**
   * startdate
   * @return startdate
  **/
  @javax.annotation.Nonnull
  public Integer getStartdate() {
    return startdate;
  }

  public void setStartdate(Integer startdate) {
    this.startdate = startdate;
  }


  public CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse summary(String summary) {
    this.summary = summary;
    return this;
  }

   /**
   * summary
   * @return summary
  **/
  @javax.annotation.Nonnull
  public String getSummary() {
    return summary;
  }

  public void setSummary(String summary) {
    this.summary = summary;
  }


  public CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse summaryformat(Integer summaryformat) {
    this.summaryformat = summaryformat;
    return this;
  }

   /**
   * summary format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)
   * @return summaryformat
  **/
  @javax.annotation.Nonnull
  public Integer getSummaryformat() {
    return summaryformat;
  }

  public void setSummaryformat(Integer summaryformat) {
    this.summaryformat = summaryformat;
  }


  public CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse timeaccess(Integer timeaccess) {
    this.timeaccess = timeaccess;
    return this;
  }

   /**
   * timeaccess
   * @return timeaccess
  **/
  @javax.annotation.Nullable
  public Integer getTimeaccess() {
    return timeaccess;
  }

  public void setTimeaccess(Integer timeaccess) {
    this.timeaccess = timeaccess;
  }


  public CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse viewurl(String viewurl) {
    this.viewurl = viewurl;
    return this;
  }

   /**
   * viewurl
   * @return viewurl
  **/
  @javax.annotation.Nonnull
  public String getViewurl() {
    return viewurl;
  }

  public void setViewurl(String viewurl) {
    this.viewurl = viewurl;
  }


  public CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse visible(Boolean visible) {
    this.visible = visible;
    return this;
  }

   /**
   * visible
   * @return visible
  **/
  @javax.annotation.Nonnull
  public Boolean getVisible() {
    return visible;
  }

  public void setVisible(Boolean visible) {
    this.visible = visible;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse coreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse = (CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse) o;
    return Objects.equals(this.coursecategory, coreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse.coursecategory) &&
        Objects.equals(this.courseimage, coreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse.courseimage) &&
        Objects.equals(this.enddate, coreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse.enddate) &&
        Objects.equals(this.fullname, coreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse.fullname) &&
        Objects.equals(this.fullnamedisplay, coreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse.fullnamedisplay) &&
        Objects.equals(this.hasprogress, coreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse.hasprogress) &&
        Objects.equals(this.hidden, coreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse.hidden) &&
        Objects.equals(this.id, coreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse.id) &&
        Objects.equals(this.idnumber, coreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse.idnumber) &&
        Objects.equals(this.isfavourite, coreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse.isfavourite) &&
        Objects.equals(this.pdfexportfont, coreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse.pdfexportfont) &&
        Objects.equals(this.progress, coreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse.progress) &&
        Objects.equals(this.shortname, coreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse.shortname) &&
        Objects.equals(this.showactivitydates, coreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse.showactivitydates) &&
        Objects.equals(this.showcompletionconditions, coreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse.showcompletionconditions) &&
        Objects.equals(this.showshortname, coreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse.showshortname) &&
        Objects.equals(this.startdate, coreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse.startdate) &&
        Objects.equals(this.summary, coreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse.summary) &&
        Objects.equals(this.summaryformat, coreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse.summaryformat) &&
        Objects.equals(this.timeaccess, coreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse.timeaccess) &&
        Objects.equals(this.viewurl, coreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse.viewurl) &&
        Objects.equals(this.visible, coreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse.visible);
  }

  @Override
  public int hashCode() {
    return Objects.hash(coursecategory, courseimage, enddate, fullname, fullnamedisplay, hasprogress, hidden, id, idnumber, isfavourite, pdfexportfont, progress, shortname, showactivitydates, showcompletionconditions, showshortname, startdate, summary, summaryformat, timeaccess, viewurl, visible);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse {\n");
    sb.append("    coursecategory: ").append(toIndentedString(coursecategory)).append("\n");
    sb.append("    courseimage: ").append(toIndentedString(courseimage)).append("\n");
    sb.append("    enddate: ").append(toIndentedString(enddate)).append("\n");
    sb.append("    fullname: ").append(toIndentedString(fullname)).append("\n");
    sb.append("    fullnamedisplay: ").append(toIndentedString(fullnamedisplay)).append("\n");
    sb.append("    hasprogress: ").append(toIndentedString(hasprogress)).append("\n");
    sb.append("    hidden: ").append(toIndentedString(hidden)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    idnumber: ").append(toIndentedString(idnumber)).append("\n");
    sb.append("    isfavourite: ").append(toIndentedString(isfavourite)).append("\n");
    sb.append("    pdfexportfont: ").append(toIndentedString(pdfexportfont)).append("\n");
    sb.append("    progress: ").append(toIndentedString(progress)).append("\n");
    sb.append("    shortname: ").append(toIndentedString(shortname)).append("\n");
    sb.append("    showactivitydates: ").append(toIndentedString(showactivitydates)).append("\n");
    sb.append("    showcompletionconditions: ").append(toIndentedString(showcompletionconditions)).append("\n");
    sb.append("    showshortname: ").append(toIndentedString(showshortname)).append("\n");
    sb.append("    startdate: ").append(toIndentedString(startdate)).append("\n");
    sb.append("    summary: ").append(toIndentedString(summary)).append("\n");
    sb.append("    summaryformat: ").append(toIndentedString(summaryformat)).append("\n");
    sb.append("    timeaccess: ").append(toIndentedString(timeaccess)).append("\n");
    sb.append("    viewurl: ").append(toIndentedString(viewurl)).append("\n");
    sb.append("    visible: ").append(toIndentedString(visible)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("coursecategory");
    openapiFields.add("courseimage");
    openapiFields.add("enddate");
    openapiFields.add("fullname");
    openapiFields.add("fullnamedisplay");
    openapiFields.add("hasprogress");
    openapiFields.add("hidden");
    openapiFields.add("id");
    openapiFields.add("idnumber");
    openapiFields.add("isfavourite");
    openapiFields.add("pdfexportfont");
    openapiFields.add("progress");
    openapiFields.add("shortname");
    openapiFields.add("showactivitydates");
    openapiFields.add("showcompletionconditions");
    openapiFields.add("showshortname");
    openapiFields.add("startdate");
    openapiFields.add("summary");
    openapiFields.add("summaryformat");
    openapiFields.add("timeaccess");
    openapiFields.add("viewurl");
    openapiFields.add("visible");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("coursecategory");
    openapiRequiredFields.add("courseimage");
    openapiRequiredFields.add("enddate");
    openapiRequiredFields.add("fullname");
    openapiRequiredFields.add("fullnamedisplay");
    openapiRequiredFields.add("hasprogress");
    openapiRequiredFields.add("hidden");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("idnumber");
    openapiRequiredFields.add("isfavourite");
    openapiRequiredFields.add("pdfexportfont");
    openapiRequiredFields.add("shortname");
    openapiRequiredFields.add("showactivitydates");
    openapiRequiredFields.add("showcompletionconditions");
    openapiRequiredFields.add("showshortname");
    openapiRequiredFields.add("startdate");
    openapiRequiredFields.add("summary");
    openapiRequiredFields.add("summaryformat");
    openapiRequiredFields.add("viewurl");
    openapiRequiredFields.add("visible");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse is not found in the empty JSON string", CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("coursecategory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `coursecategory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("coursecategory").toString()));
      }
      if (!jsonObj.get("courseimage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `courseimage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("courseimage").toString()));
      }
      if (!jsonObj.get("fullname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fullname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fullname").toString()));
      }
      if (!jsonObj.get("fullnamedisplay").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fullnamedisplay` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fullnamedisplay").toString()));
      }
      if (!jsonObj.get("idnumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `idnumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("idnumber").toString()));
      }
      if (!jsonObj.get("pdfexportfont").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pdfexportfont` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pdfexportfont").toString()));
      }
      if (!jsonObj.get("shortname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shortname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shortname").toString()));
      }
      if (!jsonObj.get("summary").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `summary` to be a primitive type in the JSON string but got `%s`", jsonObj.get("summary").toString()));
      }
      if (!jsonObj.get("viewurl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `viewurl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("viewurl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse.class));

       return (TypeAdapter<T>) new TypeAdapter<CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse>() {
           @Override
           public void write(JsonWriter out, CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse
  * @throws IOException if the JSON string is invalid with respect to CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse
  */
  public static CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse.class);
  }

 /**
  * Convert an instance of CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

