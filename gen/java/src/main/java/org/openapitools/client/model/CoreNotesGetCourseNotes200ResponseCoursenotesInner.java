/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.joshuapare.JSON;

/**
 * CoreNotesGetCourseNotes200ResponseCoursenotesInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-18T20:58:28.689161-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class CoreNotesGetCourseNotes200ResponseCoursenotesInner {
  public static final String SERIALIZED_NAME_CONTENT = "content";
  @SerializedName(SERIALIZED_NAME_CONTENT)
  private String content = "null";

  public static final String SERIALIZED_NAME_COURSEID = "courseid";
  @SerializedName(SERIALIZED_NAME_COURSEID)
  private Integer courseid;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private Integer created = null;

  public static final String SERIALIZED_NAME_FORMAT = "format";
  @SerializedName(SERIALIZED_NAME_FORMAT)
  private Integer format;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id = null;

  public static final String SERIALIZED_NAME_LASTMODIFIED = "lastmodified";
  @SerializedName(SERIALIZED_NAME_LASTMODIFIED)
  private Integer lastmodified = null;

  public static final String SERIALIZED_NAME_PUBLISHSTATE = "publishstate";
  @SerializedName(SERIALIZED_NAME_PUBLISHSTATE)
  private String publishstate = "null";

  public static final String SERIALIZED_NAME_USERID = "userid";
  @SerializedName(SERIALIZED_NAME_USERID)
  private Integer userid;

  public static final String SERIALIZED_NAME_USERMODIFIED = "usermodified";
  @SerializedName(SERIALIZED_NAME_USERMODIFIED)
  private Integer usermodified = null;

  public CoreNotesGetCourseNotes200ResponseCoursenotesInner() {
  }

  public CoreNotesGetCourseNotes200ResponseCoursenotesInner content(String content) {
    this.content = content;
    return this;
  }

   /**
   * the content text formated
   * @return content
  **/
  @javax.annotation.Nullable
  public String getContent() {
    return content;
  }

  public void setContent(String content) {
    this.content = content;
  }


  public CoreNotesGetCourseNotes200ResponseCoursenotesInner courseid(Integer courseid) {
    this.courseid = courseid;
    return this;
  }

   /**
   * id of the course
   * @return courseid
  **/
  @javax.annotation.Nullable
  public Integer getCourseid() {
    return courseid;
  }

  public void setCourseid(Integer courseid) {
    this.courseid = courseid;
  }


  public CoreNotesGetCourseNotes200ResponseCoursenotesInner created(Integer created) {
    this.created = created;
    return this;
  }

   /**
   * time created (timestamp)
   * @return created
  **/
  @javax.annotation.Nullable
  public Integer getCreated() {
    return created;
  }

  public void setCreated(Integer created) {
    this.created = created;
  }


  public CoreNotesGetCourseNotes200ResponseCoursenotesInner format(Integer format) {
    this.format = format;
    return this;
  }

   /**
   * content format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)
   * @return format
  **/
  @javax.annotation.Nullable
  public Integer getFormat() {
    return format;
  }

  public void setFormat(Integer format) {
    this.format = format;
  }


  public CoreNotesGetCourseNotes200ResponseCoursenotesInner id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * id of this note
   * @return id
  **/
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public CoreNotesGetCourseNotes200ResponseCoursenotesInner lastmodified(Integer lastmodified) {
    this.lastmodified = lastmodified;
    return this;
  }

   /**
   * time of last modification (timestamp)
   * @return lastmodified
  **/
  @javax.annotation.Nullable
  public Integer getLastmodified() {
    return lastmodified;
  }

  public void setLastmodified(Integer lastmodified) {
    this.lastmodified = lastmodified;
  }


  public CoreNotesGetCourseNotes200ResponseCoursenotesInner publishstate(String publishstate) {
    this.publishstate = publishstate;
    return this;
  }

   /**
   * state of the note (i.e. draft, public, site) 
   * @return publishstate
  **/
  @javax.annotation.Nullable
  public String getPublishstate() {
    return publishstate;
  }

  public void setPublishstate(String publishstate) {
    this.publishstate = publishstate;
  }


  public CoreNotesGetCourseNotes200ResponseCoursenotesInner userid(Integer userid) {
    this.userid = userid;
    return this;
  }

   /**
   * user id
   * @return userid
  **/
  @javax.annotation.Nullable
  public Integer getUserid() {
    return userid;
  }

  public void setUserid(Integer userid) {
    this.userid = userid;
  }


  public CoreNotesGetCourseNotes200ResponseCoursenotesInner usermodified(Integer usermodified) {
    this.usermodified = usermodified;
    return this;
  }

   /**
   * user id of the creator of this note
   * @return usermodified
  **/
  @javax.annotation.Nullable
  public Integer getUsermodified() {
    return usermodified;
  }

  public void setUsermodified(Integer usermodified) {
    this.usermodified = usermodified;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CoreNotesGetCourseNotes200ResponseCoursenotesInner coreNotesGetCourseNotes200ResponseCoursenotesInner = (CoreNotesGetCourseNotes200ResponseCoursenotesInner) o;
    return Objects.equals(this.content, coreNotesGetCourseNotes200ResponseCoursenotesInner.content) &&
        Objects.equals(this.courseid, coreNotesGetCourseNotes200ResponseCoursenotesInner.courseid) &&
        Objects.equals(this.created, coreNotesGetCourseNotes200ResponseCoursenotesInner.created) &&
        Objects.equals(this.format, coreNotesGetCourseNotes200ResponseCoursenotesInner.format) &&
        Objects.equals(this.id, coreNotesGetCourseNotes200ResponseCoursenotesInner.id) &&
        Objects.equals(this.lastmodified, coreNotesGetCourseNotes200ResponseCoursenotesInner.lastmodified) &&
        Objects.equals(this.publishstate, coreNotesGetCourseNotes200ResponseCoursenotesInner.publishstate) &&
        Objects.equals(this.userid, coreNotesGetCourseNotes200ResponseCoursenotesInner.userid) &&
        Objects.equals(this.usermodified, coreNotesGetCourseNotes200ResponseCoursenotesInner.usermodified);
  }

  @Override
  public int hashCode() {
    return Objects.hash(content, courseid, created, format, id, lastmodified, publishstate, userid, usermodified);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CoreNotesGetCourseNotes200ResponseCoursenotesInner {\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    courseid: ").append(toIndentedString(courseid)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lastmodified: ").append(toIndentedString(lastmodified)).append("\n");
    sb.append("    publishstate: ").append(toIndentedString(publishstate)).append("\n");
    sb.append("    userid: ").append(toIndentedString(userid)).append("\n");
    sb.append("    usermodified: ").append(toIndentedString(usermodified)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("content");
    openapiFields.add("courseid");
    openapiFields.add("created");
    openapiFields.add("format");
    openapiFields.add("id");
    openapiFields.add("lastmodified");
    openapiFields.add("publishstate");
    openapiFields.add("userid");
    openapiFields.add("usermodified");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CoreNotesGetCourseNotes200ResponseCoursenotesInner
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CoreNotesGetCourseNotes200ResponseCoursenotesInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CoreNotesGetCourseNotes200ResponseCoursenotesInner is not found in the empty JSON string", CoreNotesGetCourseNotes200ResponseCoursenotesInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CoreNotesGetCourseNotes200ResponseCoursenotesInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CoreNotesGetCourseNotes200ResponseCoursenotesInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("content") != null && !jsonObj.get("content").isJsonNull()) && !jsonObj.get("content").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `content` to be a primitive type in the JSON string but got `%s`", jsonObj.get("content").toString()));
      }
      if ((jsonObj.get("publishstate") != null && !jsonObj.get("publishstate").isJsonNull()) && !jsonObj.get("publishstate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publishstate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publishstate").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CoreNotesGetCourseNotes200ResponseCoursenotesInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CoreNotesGetCourseNotes200ResponseCoursenotesInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CoreNotesGetCourseNotes200ResponseCoursenotesInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CoreNotesGetCourseNotes200ResponseCoursenotesInner.class));

       return (TypeAdapter<T>) new TypeAdapter<CoreNotesGetCourseNotes200ResponseCoursenotesInner>() {
           @Override
           public void write(JsonWriter out, CoreNotesGetCourseNotes200ResponseCoursenotesInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CoreNotesGetCourseNotes200ResponseCoursenotesInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CoreNotesGetCourseNotes200ResponseCoursenotesInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CoreNotesGetCourseNotes200ResponseCoursenotesInner
  * @throws IOException if the JSON string is invalid with respect to CoreNotesGetCourseNotes200ResponseCoursenotesInner
  */
  public static CoreNotesGetCourseNotes200ResponseCoursenotesInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CoreNotesGetCourseNotes200ResponseCoursenotesInner.class);
  }

 /**
  * Convert an instance of CoreNotesGetCourseNotes200ResponseCoursenotesInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

