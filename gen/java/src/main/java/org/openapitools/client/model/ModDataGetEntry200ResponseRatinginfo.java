/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ModDataGetEntry200ResponseRatinginfoRatingsInner;
import org.openapitools.client.model.ModDataGetEntry200ResponseRatinginfoScalesInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.joshuapare.JSON;

/**
 * ModDataGetEntry200ResponseRatinginfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-18T20:58:28.689161-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class ModDataGetEntry200ResponseRatinginfo {
  public static final String SERIALIZED_NAME_CANVIEWALL = "canviewall";
  @SerializedName(SERIALIZED_NAME_CANVIEWALL)
  private Boolean canviewall = null;

  public static final String SERIALIZED_NAME_CANVIEWANY = "canviewany";
  @SerializedName(SERIALIZED_NAME_CANVIEWANY)
  private Boolean canviewany = null;

  public static final String SERIALIZED_NAME_COMPONENT = "component";
  @SerializedName(SERIALIZED_NAME_COMPONENT)
  private String component = "null";

  public static final String SERIALIZED_NAME_CONTEXTID = "contextid";
  @SerializedName(SERIALIZED_NAME_CONTEXTID)
  private Integer contextid = null;

  public static final String SERIALIZED_NAME_RATINGAREA = "ratingarea";
  @SerializedName(SERIALIZED_NAME_RATINGAREA)
  private String ratingarea = "null";

  public static final String SERIALIZED_NAME_RATINGS = "ratings";
  @SerializedName(SERIALIZED_NAME_RATINGS)
  private List<ModDataGetEntry200ResponseRatinginfoRatingsInner> ratings = new ArrayList<>();

  public static final String SERIALIZED_NAME_SCALES = "scales";
  @SerializedName(SERIALIZED_NAME_SCALES)
  private List<ModDataGetEntry200ResponseRatinginfoScalesInner> scales = new ArrayList<>();

  public ModDataGetEntry200ResponseRatinginfo() {
  }

  public ModDataGetEntry200ResponseRatinginfo canviewall(Boolean canviewall) {
    this.canviewall = canviewall;
    return this;
  }

   /**
   * Whether the user can view all the individual ratings.
   * @return canviewall
  **/
  @javax.annotation.Nullable
  public Boolean getCanviewall() {
    return canviewall;
  }

  public void setCanviewall(Boolean canviewall) {
    this.canviewall = canviewall;
  }


  public ModDataGetEntry200ResponseRatinginfo canviewany(Boolean canviewany) {
    this.canviewany = canviewany;
    return this;
  }

   /**
   * Whether the user can view aggregate of ratings of others.
   * @return canviewany
  **/
  @javax.annotation.Nullable
  public Boolean getCanviewany() {
    return canviewany;
  }

  public void setCanviewany(Boolean canviewany) {
    this.canviewany = canviewany;
  }


  public ModDataGetEntry200ResponseRatinginfo component(String component) {
    this.component = component;
    return this;
  }

   /**
   * Context name.
   * @return component
  **/
  @javax.annotation.Nonnull
  public String getComponent() {
    return component;
  }

  public void setComponent(String component) {
    this.component = component;
  }


  public ModDataGetEntry200ResponseRatinginfo contextid(Integer contextid) {
    this.contextid = contextid;
    return this;
  }

   /**
   * Context id.
   * @return contextid
  **/
  @javax.annotation.Nonnull
  public Integer getContextid() {
    return contextid;
  }

  public void setContextid(Integer contextid) {
    this.contextid = contextid;
  }


  public ModDataGetEntry200ResponseRatinginfo ratingarea(String ratingarea) {
    this.ratingarea = ratingarea;
    return this;
  }

   /**
   * Rating area name.
   * @return ratingarea
  **/
  @javax.annotation.Nonnull
  public String getRatingarea() {
    return ratingarea;
  }

  public void setRatingarea(String ratingarea) {
    this.ratingarea = ratingarea;
  }


  public ModDataGetEntry200ResponseRatinginfo ratings(List<ModDataGetEntry200ResponseRatinginfoRatingsInner> ratings) {
    this.ratings = ratings;
    return this;
  }

  public ModDataGetEntry200ResponseRatinginfo addRatingsItem(ModDataGetEntry200ResponseRatinginfoRatingsInner ratingsItem) {
    if (this.ratings == null) {
      this.ratings = new ArrayList<>();
    }
    this.ratings.add(ratingsItem);
    return this;
  }

   /**
   * Get ratings
   * @return ratings
  **/
  @javax.annotation.Nullable
  public List<ModDataGetEntry200ResponseRatinginfoRatingsInner> getRatings() {
    return ratings;
  }

  public void setRatings(List<ModDataGetEntry200ResponseRatinginfoRatingsInner> ratings) {
    this.ratings = ratings;
  }


  public ModDataGetEntry200ResponseRatinginfo scales(List<ModDataGetEntry200ResponseRatinginfoScalesInner> scales) {
    this.scales = scales;
    return this;
  }

  public ModDataGetEntry200ResponseRatinginfo addScalesItem(ModDataGetEntry200ResponseRatinginfoScalesInner scalesItem) {
    if (this.scales == null) {
      this.scales = new ArrayList<>();
    }
    this.scales.add(scalesItem);
    return this;
  }

   /**
   * Get scales
   * @return scales
  **/
  @javax.annotation.Nullable
  public List<ModDataGetEntry200ResponseRatinginfoScalesInner> getScales() {
    return scales;
  }

  public void setScales(List<ModDataGetEntry200ResponseRatinginfoScalesInner> scales) {
    this.scales = scales;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModDataGetEntry200ResponseRatinginfo modDataGetEntry200ResponseRatinginfo = (ModDataGetEntry200ResponseRatinginfo) o;
    return Objects.equals(this.canviewall, modDataGetEntry200ResponseRatinginfo.canviewall) &&
        Objects.equals(this.canviewany, modDataGetEntry200ResponseRatinginfo.canviewany) &&
        Objects.equals(this.component, modDataGetEntry200ResponseRatinginfo.component) &&
        Objects.equals(this.contextid, modDataGetEntry200ResponseRatinginfo.contextid) &&
        Objects.equals(this.ratingarea, modDataGetEntry200ResponseRatinginfo.ratingarea) &&
        Objects.equals(this.ratings, modDataGetEntry200ResponseRatinginfo.ratings) &&
        Objects.equals(this.scales, modDataGetEntry200ResponseRatinginfo.scales);
  }

  @Override
  public int hashCode() {
    return Objects.hash(canviewall, canviewany, component, contextid, ratingarea, ratings, scales);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModDataGetEntry200ResponseRatinginfo {\n");
    sb.append("    canviewall: ").append(toIndentedString(canviewall)).append("\n");
    sb.append("    canviewany: ").append(toIndentedString(canviewany)).append("\n");
    sb.append("    component: ").append(toIndentedString(component)).append("\n");
    sb.append("    contextid: ").append(toIndentedString(contextid)).append("\n");
    sb.append("    ratingarea: ").append(toIndentedString(ratingarea)).append("\n");
    sb.append("    ratings: ").append(toIndentedString(ratings)).append("\n");
    sb.append("    scales: ").append(toIndentedString(scales)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("canviewall");
    openapiFields.add("canviewany");
    openapiFields.add("component");
    openapiFields.add("contextid");
    openapiFields.add("ratingarea");
    openapiFields.add("ratings");
    openapiFields.add("scales");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("component");
    openapiRequiredFields.add("contextid");
    openapiRequiredFields.add("ratingarea");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ModDataGetEntry200ResponseRatinginfo
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ModDataGetEntry200ResponseRatinginfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModDataGetEntry200ResponseRatinginfo is not found in the empty JSON string", ModDataGetEntry200ResponseRatinginfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ModDataGetEntry200ResponseRatinginfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModDataGetEntry200ResponseRatinginfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ModDataGetEntry200ResponseRatinginfo.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("component").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `component` to be a primitive type in the JSON string but got `%s`", jsonObj.get("component").toString()));
      }
      if (!jsonObj.get("ratingarea").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ratingarea` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ratingarea").toString()));
      }
      if (jsonObj.get("ratings") != null && !jsonObj.get("ratings").isJsonNull()) {
        JsonArray jsonArrayratings = jsonObj.getAsJsonArray("ratings");
        if (jsonArrayratings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ratings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ratings` to be an array in the JSON string but got `%s`", jsonObj.get("ratings").toString()));
          }

          // validate the optional field `ratings` (array)
          for (int i = 0; i < jsonArrayratings.size(); i++) {
            ModDataGetEntry200ResponseRatinginfoRatingsInner.validateJsonElement(jsonArrayratings.get(i));
          };
        }
      }
      if (jsonObj.get("scales") != null && !jsonObj.get("scales").isJsonNull()) {
        JsonArray jsonArrayscales = jsonObj.getAsJsonArray("scales");
        if (jsonArrayscales != null) {
          // ensure the json data is an array
          if (!jsonObj.get("scales").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `scales` to be an array in the JSON string but got `%s`", jsonObj.get("scales").toString()));
          }

          // validate the optional field `scales` (array)
          for (int i = 0; i < jsonArrayscales.size(); i++) {
            ModDataGetEntry200ResponseRatinginfoScalesInner.validateJsonElement(jsonArrayscales.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModDataGetEntry200ResponseRatinginfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModDataGetEntry200ResponseRatinginfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModDataGetEntry200ResponseRatinginfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModDataGetEntry200ResponseRatinginfo.class));

       return (TypeAdapter<T>) new TypeAdapter<ModDataGetEntry200ResponseRatinginfo>() {
           @Override
           public void write(JsonWriter out, ModDataGetEntry200ResponseRatinginfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModDataGetEntry200ResponseRatinginfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ModDataGetEntry200ResponseRatinginfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ModDataGetEntry200ResponseRatinginfo
  * @throws IOException if the JSON string is invalid with respect to ModDataGetEntry200ResponseRatinginfo
  */
  public static ModDataGetEntry200ResponseRatinginfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModDataGetEntry200ResponseRatinginfo.class);
  }

 /**
  * Convert an instance of ModDataGetEntry200ResponseRatinginfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

