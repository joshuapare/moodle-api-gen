/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AuthEmailSignupUser200ResponseWarningsInner;
import org.openapitools.client.model.ToolMobileGetPublicConfig200ResponseIdentityprovidersInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.joshuapare.JSON;

/**
 * ToolMobileGetPublicConfig200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-18T14:00:07.069642-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class ToolMobileGetPublicConfig200Response {
  public static final String SERIALIZED_NAME_AGEDIGITALCONSENTVERIFICATION = "agedigitalconsentverification";
  @SerializedName(SERIALIZED_NAME_AGEDIGITALCONSENTVERIFICATION)
  private Boolean agedigitalconsentverification = null;

  public static final String SERIALIZED_NAME_AUTHINSTRUCTIONS = "authinstructions";
  @SerializedName(SERIALIZED_NAME_AUTHINSTRUCTIONS)
  private String authinstructions = "null";

  public static final String SERIALIZED_NAME_AUTHLOGINVIAEMAIL = "authloginviaemail";
  @SerializedName(SERIALIZED_NAME_AUTHLOGINVIAEMAIL)
  private Integer authloginviaemail = null;

  public static final String SERIALIZED_NAME_AUTHNONEENABLED = "authnoneenabled";
  @SerializedName(SERIALIZED_NAME_AUTHNONEENABLED)
  private Integer authnoneenabled = null;

  public static final String SERIALIZED_NAME_AUTOLANG = "autolang";
  @SerializedName(SERIALIZED_NAME_AUTOLANG)
  private Integer autolang = null;

  public static final String SERIALIZED_NAME_COMPACTLOGOURL = "compactlogourl";
  @SerializedName(SERIALIZED_NAME_COMPACTLOGOURL)
  private String compactlogourl = "null";

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country = "null";

  public static final String SERIALIZED_NAME_ENABLEMOBILEWEBSERVICE = "enablemobilewebservice";
  @SerializedName(SERIALIZED_NAME_ENABLEMOBILEWEBSERVICE)
  private Integer enablemobilewebservice = null;

  public static final String SERIALIZED_NAME_ENABLEWEBSERVICES = "enablewebservices";
  @SerializedName(SERIALIZED_NAME_ENABLEWEBSERVICES)
  private Integer enablewebservices = null;

  public static final String SERIALIZED_NAME_FORGOTTENPASSWORDURL = "forgottenpasswordurl";
  @SerializedName(SERIALIZED_NAME_FORGOTTENPASSWORDURL)
  private String forgottenpasswordurl = "null";

  public static final String SERIALIZED_NAME_GUESTLOGIN = "guestlogin";
  @SerializedName(SERIALIZED_NAME_GUESTLOGIN)
  private Integer guestlogin = null;

  public static final String SERIALIZED_NAME_HTTPSWWWROOT = "httpswwwroot";
  @SerializedName(SERIALIZED_NAME_HTTPSWWWROOT)
  private String httpswwwroot = "null";

  public static final String SERIALIZED_NAME_IDENTITYPROVIDERS = "identityproviders";
  @SerializedName(SERIALIZED_NAME_IDENTITYPROVIDERS)
  private List<ToolMobileGetPublicConfig200ResponseIdentityprovidersInner> identityproviders = new ArrayList<>();

  public static final String SERIALIZED_NAME_LANG = "lang";
  @SerializedName(SERIALIZED_NAME_LANG)
  private String lang = "null";

  public static final String SERIALIZED_NAME_LANGLIST = "langlist";
  @SerializedName(SERIALIZED_NAME_LANGLIST)
  private String langlist = "null";

  public static final String SERIALIZED_NAME_LANGMENU = "langmenu";
  @SerializedName(SERIALIZED_NAME_LANGMENU)
  private Integer langmenu = null;

  public static final String SERIALIZED_NAME_LAUNCHURL = "launchurl";
  @SerializedName(SERIALIZED_NAME_LAUNCHURL)
  private String launchurl = "null";

  public static final String SERIALIZED_NAME_LOCALE = "locale";
  @SerializedName(SERIALIZED_NAME_LOCALE)
  private String locale = "null";

  public static final String SERIALIZED_NAME_LOGOURL = "logourl";
  @SerializedName(SERIALIZED_NAME_LOGOURL)
  private String logourl = "null";

  public static final String SERIALIZED_NAME_MAINTENANCEENABLED = "maintenanceenabled";
  @SerializedName(SERIALIZED_NAME_MAINTENANCEENABLED)
  private Integer maintenanceenabled = null;

  public static final String SERIALIZED_NAME_MAINTENANCEMESSAGE = "maintenancemessage";
  @SerializedName(SERIALIZED_NAME_MAINTENANCEMESSAGE)
  private String maintenancemessage = "null";

  public static final String SERIALIZED_NAME_MOBILECSSURL = "mobilecssurl";
  @SerializedName(SERIALIZED_NAME_MOBILECSSURL)
  private String mobilecssurl;

  public static final String SERIALIZED_NAME_REGISTERAUTH = "registerauth";
  @SerializedName(SERIALIZED_NAME_REGISTERAUTH)
  private String registerauth = "null";

  public static final String SERIALIZED_NAME_REMEMBERUSERNAME = "rememberusername";
  @SerializedName(SERIALIZED_NAME_REMEMBERUSERNAME)
  private Integer rememberusername = null;

  public static final String SERIALIZED_NAME_SITENAME = "sitename";
  @SerializedName(SERIALIZED_NAME_SITENAME)
  private String sitename = "null";

  public static final String SERIALIZED_NAME_SUPPORTAVAILABILITY = "supportavailability";
  @SerializedName(SERIALIZED_NAME_SUPPORTAVAILABILITY)
  private Integer supportavailability = null;

  public static final String SERIALIZED_NAME_SUPPORTEMAIL = "supportemail";
  @SerializedName(SERIALIZED_NAME_SUPPORTEMAIL)
  private String supportemail = "null";

  public static final String SERIALIZED_NAME_SUPPORTNAME = "supportname";
  @SerializedName(SERIALIZED_NAME_SUPPORTNAME)
  private String supportname = "null";

  public static final String SERIALIZED_NAME_SUPPORTPAGE = "supportpage";
  @SerializedName(SERIALIZED_NAME_SUPPORTPAGE)
  private String supportpage = "null";

  public static final String SERIALIZED_NAME_TOOL_MOBILE_ANDROIDAPPID = "tool_mobile_androidappid";
  @SerializedName(SERIALIZED_NAME_TOOL_MOBILE_ANDROIDAPPID)
  private String toolMobileAndroidappid = "null";

  public static final String SERIALIZED_NAME_TOOL_MOBILE_DISABLEDFEATURES = "tool_mobile_disabledfeatures";
  @SerializedName(SERIALIZED_NAME_TOOL_MOBILE_DISABLEDFEATURES)
  private String toolMobileDisabledfeatures = "null";

  public static final String SERIALIZED_NAME_TOOL_MOBILE_IOSAPPID = "tool_mobile_iosappid";
  @SerializedName(SERIALIZED_NAME_TOOL_MOBILE_IOSAPPID)
  private String toolMobileIosappid = "null";

  public static final String SERIALIZED_NAME_TOOL_MOBILE_MINIMUMVERSION = "tool_mobile_minimumversion";
  @SerializedName(SERIALIZED_NAME_TOOL_MOBILE_MINIMUMVERSION)
  private String toolMobileMinimumversion = "null";

  public static final String SERIALIZED_NAME_TOOL_MOBILE_QRCODETYPE = "tool_mobile_qrcodetype";
  @SerializedName(SERIALIZED_NAME_TOOL_MOBILE_QRCODETYPE)
  private Integer toolMobileQrcodetype = null;

  public static final String SERIALIZED_NAME_TOOL_MOBILE_SETUPLINK = "tool_mobile_setuplink";
  @SerializedName(SERIALIZED_NAME_TOOL_MOBILE_SETUPLINK)
  private String toolMobileSetuplink = "null";

  public static final String SERIALIZED_NAME_TYPEOFLOGIN = "typeoflogin";
  @SerializedName(SERIALIZED_NAME_TYPEOFLOGIN)
  private Integer typeoflogin = null;

  public static final String SERIALIZED_NAME_WARNINGS = "warnings";
  @SerializedName(SERIALIZED_NAME_WARNINGS)
  private List<AuthEmailSignupUser200ResponseWarningsInner> warnings = new ArrayList<>();

  public static final String SERIALIZED_NAME_WWWROOT = "wwwroot";
  @SerializedName(SERIALIZED_NAME_WWWROOT)
  private String wwwroot = "null";

  public ToolMobileGetPublicConfig200Response() {
  }

  public ToolMobileGetPublicConfig200Response agedigitalconsentverification(Boolean agedigitalconsentverification) {
    this.agedigitalconsentverification = agedigitalconsentverification;
    return this;
  }

   /**
   * Whether age digital consent verification                     is enabled.
   * @return agedigitalconsentverification
  **/
  @javax.annotation.Nullable
  public Boolean getAgedigitalconsentverification() {
    return agedigitalconsentverification;
  }

  public void setAgedigitalconsentverification(Boolean agedigitalconsentverification) {
    this.agedigitalconsentverification = agedigitalconsentverification;
  }


  public ToolMobileGetPublicConfig200Response authinstructions(String authinstructions) {
    this.authinstructions = authinstructions;
    return this;
  }

   /**
   * Authentication instructions.
   * @return authinstructions
  **/
  @javax.annotation.Nonnull
  public String getAuthinstructions() {
    return authinstructions;
  }

  public void setAuthinstructions(String authinstructions) {
    this.authinstructions = authinstructions;
  }


  public ToolMobileGetPublicConfig200Response authloginviaemail(Integer authloginviaemail) {
    this.authloginviaemail = authloginviaemail;
    return this;
  }

   /**
   * Whether log in via email is enabled.
   * @return authloginviaemail
  **/
  @javax.annotation.Nonnull
  public Integer getAuthloginviaemail() {
    return authloginviaemail;
  }

  public void setAuthloginviaemail(Integer authloginviaemail) {
    this.authloginviaemail = authloginviaemail;
  }


  public ToolMobileGetPublicConfig200Response authnoneenabled(Integer authnoneenabled) {
    this.authnoneenabled = authnoneenabled;
    return this;
  }

   /**
   * Whether auth none is enabled.
   * @return authnoneenabled
  **/
  @javax.annotation.Nonnull
  public Integer getAuthnoneenabled() {
    return authnoneenabled;
  }

  public void setAuthnoneenabled(Integer authnoneenabled) {
    this.authnoneenabled = authnoneenabled;
  }


  public ToolMobileGetPublicConfig200Response autolang(Integer autolang) {
    this.autolang = autolang;
    return this;
  }

   /**
   * Whether to detect default language                     from browser setting.
   * @return autolang
  **/
  @javax.annotation.Nullable
  public Integer getAutolang() {
    return autolang;
  }

  public void setAutolang(Integer autolang) {
    this.autolang = autolang;
  }


  public ToolMobileGetPublicConfig200Response compactlogourl(String compactlogourl) {
    this.compactlogourl = compactlogourl;
    return this;
  }

   /**
   * The site compact logo URL
   * @return compactlogourl
  **/
  @javax.annotation.Nullable
  public String getCompactlogourl() {
    return compactlogourl;
  }

  public void setCompactlogourl(String compactlogourl) {
    this.compactlogourl = compactlogourl;
  }


  public ToolMobileGetPublicConfig200Response country(String country) {
    this.country = country;
    return this;
  }

   /**
   * Default site country
   * @return country
  **/
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public ToolMobileGetPublicConfig200Response enablemobilewebservice(Integer enablemobilewebservice) {
    this.enablemobilewebservice = enablemobilewebservice;
    return this;
  }

   /**
   * Whether the Mobile service is enabled.
   * @return enablemobilewebservice
  **/
  @javax.annotation.Nonnull
  public Integer getEnablemobilewebservice() {
    return enablemobilewebservice;
  }

  public void setEnablemobilewebservice(Integer enablemobilewebservice) {
    this.enablemobilewebservice = enablemobilewebservice;
  }


  public ToolMobileGetPublicConfig200Response enablewebservices(Integer enablewebservices) {
    this.enablewebservices = enablewebservices;
    return this;
  }

   /**
   * Whether Web Services are enabled.
   * @return enablewebservices
  **/
  @javax.annotation.Nonnull
  public Integer getEnablewebservices() {
    return enablewebservices;
  }

  public void setEnablewebservices(Integer enablewebservices) {
    this.enablewebservices = enablewebservices;
  }


  public ToolMobileGetPublicConfig200Response forgottenpasswordurl(String forgottenpasswordurl) {
    this.forgottenpasswordurl = forgottenpasswordurl;
    return this;
  }

   /**
   * Forgotten password URL.
   * @return forgottenpasswordurl
  **/
  @javax.annotation.Nonnull
  public String getForgottenpasswordurl() {
    return forgottenpasswordurl;
  }

  public void setForgottenpasswordurl(String forgottenpasswordurl) {
    this.forgottenpasswordurl = forgottenpasswordurl;
  }


  public ToolMobileGetPublicConfig200Response guestlogin(Integer guestlogin) {
    this.guestlogin = guestlogin;
    return this;
  }

   /**
   * Whether guest login is enabled.
   * @return guestlogin
  **/
  @javax.annotation.Nonnull
  public Integer getGuestlogin() {
    return guestlogin;
  }

  public void setGuestlogin(Integer guestlogin) {
    this.guestlogin = guestlogin;
  }


  public ToolMobileGetPublicConfig200Response httpswwwroot(String httpswwwroot) {
    this.httpswwwroot = httpswwwroot;
    return this;
  }

   /**
   * Site https URL (if httpslogin is enabled).
   * @return httpswwwroot
  **/
  @javax.annotation.Nonnull
  public String getHttpswwwroot() {
    return httpswwwroot;
  }

  public void setHttpswwwroot(String httpswwwroot) {
    this.httpswwwroot = httpswwwroot;
  }


  public ToolMobileGetPublicConfig200Response identityproviders(List<ToolMobileGetPublicConfig200ResponseIdentityprovidersInner> identityproviders) {
    this.identityproviders = identityproviders;
    return this;
  }

  public ToolMobileGetPublicConfig200Response addIdentityprovidersItem(ToolMobileGetPublicConfig200ResponseIdentityprovidersInner identityprovidersItem) {
    if (this.identityproviders == null) {
      this.identityproviders = new ArrayList<>();
    }
    this.identityproviders.add(identityprovidersItem);
    return this;
  }

   /**
   * Get identityproviders
   * @return identityproviders
  **/
  @javax.annotation.Nullable
  public List<ToolMobileGetPublicConfig200ResponseIdentityprovidersInner> getIdentityproviders() {
    return identityproviders;
  }

  public void setIdentityproviders(List<ToolMobileGetPublicConfig200ResponseIdentityprovidersInner> identityproviders) {
    this.identityproviders = identityproviders;
  }


  public ToolMobileGetPublicConfig200Response lang(String lang) {
    this.lang = lang;
    return this;
  }

   /**
   * Default language for the site.
   * @return lang
  **/
  @javax.annotation.Nullable
  public String getLang() {
    return lang;
  }

  public void setLang(String lang) {
    this.lang = lang;
  }


  public ToolMobileGetPublicConfig200Response langlist(String langlist) {
    this.langlist = langlist;
    return this;
  }

   /**
   * Languages on language menu.
   * @return langlist
  **/
  @javax.annotation.Nullable
  public String getLanglist() {
    return langlist;
  }

  public void setLanglist(String langlist) {
    this.langlist = langlist;
  }


  public ToolMobileGetPublicConfig200Response langmenu(Integer langmenu) {
    this.langmenu = langmenu;
    return this;
  }

   /**
   * Whether the language menu should be displayed.
   * @return langmenu
  **/
  @javax.annotation.Nullable
  public Integer getLangmenu() {
    return langmenu;
  }

  public void setLangmenu(Integer langmenu) {
    this.langmenu = langmenu;
  }


  public ToolMobileGetPublicConfig200Response launchurl(String launchurl) {
    this.launchurl = launchurl;
    return this;
  }

   /**
   * SSO login launch URL.
   * @return launchurl
  **/
  @javax.annotation.Nullable
  public String getLaunchurl() {
    return launchurl;
  }

  public void setLaunchurl(String launchurl) {
    this.launchurl = launchurl;
  }


  public ToolMobileGetPublicConfig200Response locale(String locale) {
    this.locale = locale;
    return this;
  }

   /**
   * Sitewide locale.
   * @return locale
  **/
  @javax.annotation.Nullable
  public String getLocale() {
    return locale;
  }

  public void setLocale(String locale) {
    this.locale = locale;
  }


  public ToolMobileGetPublicConfig200Response logourl(String logourl) {
    this.logourl = logourl;
    return this;
  }

   /**
   * The site logo URL
   * @return logourl
  **/
  @javax.annotation.Nullable
  public String getLogourl() {
    return logourl;
  }

  public void setLogourl(String logourl) {
    this.logourl = logourl;
  }


  public ToolMobileGetPublicConfig200Response maintenanceenabled(Integer maintenanceenabled) {
    this.maintenanceenabled = maintenanceenabled;
    return this;
  }

   /**
   * Whether site maintenance is enabled.
   * @return maintenanceenabled
  **/
  @javax.annotation.Nonnull
  public Integer getMaintenanceenabled() {
    return maintenanceenabled;
  }

  public void setMaintenanceenabled(Integer maintenanceenabled) {
    this.maintenanceenabled = maintenanceenabled;
  }


  public ToolMobileGetPublicConfig200Response maintenancemessage(String maintenancemessage) {
    this.maintenancemessage = maintenancemessage;
    return this;
  }

   /**
   * Maintenance message.
   * @return maintenancemessage
  **/
  @javax.annotation.Nonnull
  public String getMaintenancemessage() {
    return maintenancemessage;
  }

  public void setMaintenancemessage(String maintenancemessage) {
    this.maintenancemessage = maintenancemessage;
  }


  public ToolMobileGetPublicConfig200Response mobilecssurl(String mobilecssurl) {
    this.mobilecssurl = mobilecssurl;
    return this;
  }

   /**
   * Mobile custom CSS theme
   * @return mobilecssurl
  **/
  @javax.annotation.Nullable
  public String getMobilecssurl() {
    return mobilecssurl;
  }

  public void setMobilecssurl(String mobilecssurl) {
    this.mobilecssurl = mobilecssurl;
  }


  public ToolMobileGetPublicConfig200Response registerauth(String registerauth) {
    this.registerauth = registerauth;
    return this;
  }

   /**
   * Authentication method for user registration.
   * @return registerauth
  **/
  @javax.annotation.Nonnull
  public String getRegisterauth() {
    return registerauth;
  }

  public void setRegisterauth(String registerauth) {
    this.registerauth = registerauth;
  }


  public ToolMobileGetPublicConfig200Response rememberusername(Integer rememberusername) {
    this.rememberusername = rememberusername;
    return this;
  }

   /**
   * Values: 0 for No, 1 for Yes, 2 for optional.
   * @return rememberusername
  **/
  @javax.annotation.Nonnull
  public Integer getRememberusername() {
    return rememberusername;
  }

  public void setRememberusername(Integer rememberusername) {
    this.rememberusername = rememberusername;
  }


  public ToolMobileGetPublicConfig200Response sitename(String sitename) {
    this.sitename = sitename;
    return this;
  }

   /**
   * Site name.
   * @return sitename
  **/
  @javax.annotation.Nonnull
  public String getSitename() {
    return sitename;
  }

  public void setSitename(String sitename) {
    this.sitename = sitename;
  }


  public ToolMobileGetPublicConfig200Response supportavailability(Integer supportavailability) {
    this.supportavailability = supportavailability;
    return this;
  }

   /**
   * Determines who has access to contact site support.
   * @return supportavailability
  **/
  @javax.annotation.Nullable
  public Integer getSupportavailability() {
    return supportavailability;
  }

  public void setSupportavailability(Integer supportavailability) {
    this.supportavailability = supportavailability;
  }


  public ToolMobileGetPublicConfig200Response supportemail(String supportemail) {
    this.supportemail = supportemail;
    return this;
  }

   /**
   * Site support contact email                     (only if age verification is enabled).
   * @return supportemail
  **/
  @javax.annotation.Nullable
  public String getSupportemail() {
    return supportemail;
  }

  public void setSupportemail(String supportemail) {
    this.supportemail = supportemail;
  }


  public ToolMobileGetPublicConfig200Response supportname(String supportname) {
    this.supportname = supportname;
    return this;
  }

   /**
   * Site support contact name                     (only if age verification is enabled).
   * @return supportname
  **/
  @javax.annotation.Nullable
  public String getSupportname() {
    return supportname;
  }

  public void setSupportname(String supportname) {
    this.supportname = supportname;
  }


  public ToolMobileGetPublicConfig200Response supportpage(String supportpage) {
    this.supportpage = supportpage;
    return this;
  }

   /**
   * Site support page link.
   * @return supportpage
  **/
  @javax.annotation.Nullable
  public String getSupportpage() {
    return supportpage;
  }

  public void setSupportpage(String supportpage) {
    this.supportpage = supportpage;
  }


  public ToolMobileGetPublicConfig200Response toolMobileAndroidappid(String toolMobileAndroidappid) {
    this.toolMobileAndroidappid = toolMobileAndroidappid;
    return this;
  }

   /**
   * Android app&#39;s unique identifier.
   * @return toolMobileAndroidappid
  **/
  @javax.annotation.Nullable
  public String getToolMobileAndroidappid() {
    return toolMobileAndroidappid;
  }

  public void setToolMobileAndroidappid(String toolMobileAndroidappid) {
    this.toolMobileAndroidappid = toolMobileAndroidappid;
  }


  public ToolMobileGetPublicConfig200Response toolMobileDisabledfeatures(String toolMobileDisabledfeatures) {
    this.toolMobileDisabledfeatures = toolMobileDisabledfeatures;
    return this;
  }

   /**
   * Disabled features in the app
   * @return toolMobileDisabledfeatures
  **/
  @javax.annotation.Nullable
  public String getToolMobileDisabledfeatures() {
    return toolMobileDisabledfeatures;
  }

  public void setToolMobileDisabledfeatures(String toolMobileDisabledfeatures) {
    this.toolMobileDisabledfeatures = toolMobileDisabledfeatures;
  }


  public ToolMobileGetPublicConfig200Response toolMobileIosappid(String toolMobileIosappid) {
    this.toolMobileIosappid = toolMobileIosappid;
    return this;
  }

   /**
   * iOS app&#39;s unique identifier.
   * @return toolMobileIosappid
  **/
  @javax.annotation.Nullable
  public String getToolMobileIosappid() {
    return toolMobileIosappid;
  }

  public void setToolMobileIosappid(String toolMobileIosappid) {
    this.toolMobileIosappid = toolMobileIosappid;
  }


  public ToolMobileGetPublicConfig200Response toolMobileMinimumversion(String toolMobileMinimumversion) {
    this.toolMobileMinimumversion = toolMobileMinimumversion;
    return this;
  }

   /**
   * Minimum required version to access.
   * @return toolMobileMinimumversion
  **/
  @javax.annotation.Nullable
  public String getToolMobileMinimumversion() {
    return toolMobileMinimumversion;
  }

  public void setToolMobileMinimumversion(String toolMobileMinimumversion) {
    this.toolMobileMinimumversion = toolMobileMinimumversion;
  }


  public ToolMobileGetPublicConfig200Response toolMobileQrcodetype(Integer toolMobileQrcodetype) {
    this.toolMobileQrcodetype = toolMobileQrcodetype;
    return this;
  }

   /**
   * QR login configuration.
   * @return toolMobileQrcodetype
  **/
  @javax.annotation.Nullable
  public Integer getToolMobileQrcodetype() {
    return toolMobileQrcodetype;
  }

  public void setToolMobileQrcodetype(Integer toolMobileQrcodetype) {
    this.toolMobileQrcodetype = toolMobileQrcodetype;
  }


  public ToolMobileGetPublicConfig200Response toolMobileSetuplink(String toolMobileSetuplink) {
    this.toolMobileSetuplink = toolMobileSetuplink;
    return this;
  }

   /**
   * App download page.
   * @return toolMobileSetuplink
  **/
  @javax.annotation.Nullable
  public String getToolMobileSetuplink() {
    return toolMobileSetuplink;
  }

  public void setToolMobileSetuplink(String toolMobileSetuplink) {
    this.toolMobileSetuplink = toolMobileSetuplink;
  }


  public ToolMobileGetPublicConfig200Response typeoflogin(Integer typeoflogin) {
    this.typeoflogin = typeoflogin;
    return this;
  }

   /**
   * The type of login. 1 for app, 2 for browser, 3 for embedded.
   * @return typeoflogin
  **/
  @javax.annotation.Nonnull
  public Integer getTypeoflogin() {
    return typeoflogin;
  }

  public void setTypeoflogin(Integer typeoflogin) {
    this.typeoflogin = typeoflogin;
  }


  public ToolMobileGetPublicConfig200Response warnings(List<AuthEmailSignupUser200ResponseWarningsInner> warnings) {
    this.warnings = warnings;
    return this;
  }

  public ToolMobileGetPublicConfig200Response addWarningsItem(AuthEmailSignupUser200ResponseWarningsInner warningsItem) {
    if (this.warnings == null) {
      this.warnings = new ArrayList<>();
    }
    this.warnings.add(warningsItem);
    return this;
  }

   /**
   * Get warnings
   * @return warnings
  **/
  @javax.annotation.Nullable
  public List<AuthEmailSignupUser200ResponseWarningsInner> getWarnings() {
    return warnings;
  }

  public void setWarnings(List<AuthEmailSignupUser200ResponseWarningsInner> warnings) {
    this.warnings = warnings;
  }


  public ToolMobileGetPublicConfig200Response wwwroot(String wwwroot) {
    this.wwwroot = wwwroot;
    return this;
  }

   /**
   * Site URL.
   * @return wwwroot
  **/
  @javax.annotation.Nonnull
  public String getWwwroot() {
    return wwwroot;
  }

  public void setWwwroot(String wwwroot) {
    this.wwwroot = wwwroot;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ToolMobileGetPublicConfig200Response toolMobileGetPublicConfig200Response = (ToolMobileGetPublicConfig200Response) o;
    return Objects.equals(this.agedigitalconsentverification, toolMobileGetPublicConfig200Response.agedigitalconsentverification) &&
        Objects.equals(this.authinstructions, toolMobileGetPublicConfig200Response.authinstructions) &&
        Objects.equals(this.authloginviaemail, toolMobileGetPublicConfig200Response.authloginviaemail) &&
        Objects.equals(this.authnoneenabled, toolMobileGetPublicConfig200Response.authnoneenabled) &&
        Objects.equals(this.autolang, toolMobileGetPublicConfig200Response.autolang) &&
        Objects.equals(this.compactlogourl, toolMobileGetPublicConfig200Response.compactlogourl) &&
        Objects.equals(this.country, toolMobileGetPublicConfig200Response.country) &&
        Objects.equals(this.enablemobilewebservice, toolMobileGetPublicConfig200Response.enablemobilewebservice) &&
        Objects.equals(this.enablewebservices, toolMobileGetPublicConfig200Response.enablewebservices) &&
        Objects.equals(this.forgottenpasswordurl, toolMobileGetPublicConfig200Response.forgottenpasswordurl) &&
        Objects.equals(this.guestlogin, toolMobileGetPublicConfig200Response.guestlogin) &&
        Objects.equals(this.httpswwwroot, toolMobileGetPublicConfig200Response.httpswwwroot) &&
        Objects.equals(this.identityproviders, toolMobileGetPublicConfig200Response.identityproviders) &&
        Objects.equals(this.lang, toolMobileGetPublicConfig200Response.lang) &&
        Objects.equals(this.langlist, toolMobileGetPublicConfig200Response.langlist) &&
        Objects.equals(this.langmenu, toolMobileGetPublicConfig200Response.langmenu) &&
        Objects.equals(this.launchurl, toolMobileGetPublicConfig200Response.launchurl) &&
        Objects.equals(this.locale, toolMobileGetPublicConfig200Response.locale) &&
        Objects.equals(this.logourl, toolMobileGetPublicConfig200Response.logourl) &&
        Objects.equals(this.maintenanceenabled, toolMobileGetPublicConfig200Response.maintenanceenabled) &&
        Objects.equals(this.maintenancemessage, toolMobileGetPublicConfig200Response.maintenancemessage) &&
        Objects.equals(this.mobilecssurl, toolMobileGetPublicConfig200Response.mobilecssurl) &&
        Objects.equals(this.registerauth, toolMobileGetPublicConfig200Response.registerauth) &&
        Objects.equals(this.rememberusername, toolMobileGetPublicConfig200Response.rememberusername) &&
        Objects.equals(this.sitename, toolMobileGetPublicConfig200Response.sitename) &&
        Objects.equals(this.supportavailability, toolMobileGetPublicConfig200Response.supportavailability) &&
        Objects.equals(this.supportemail, toolMobileGetPublicConfig200Response.supportemail) &&
        Objects.equals(this.supportname, toolMobileGetPublicConfig200Response.supportname) &&
        Objects.equals(this.supportpage, toolMobileGetPublicConfig200Response.supportpage) &&
        Objects.equals(this.toolMobileAndroidappid, toolMobileGetPublicConfig200Response.toolMobileAndroidappid) &&
        Objects.equals(this.toolMobileDisabledfeatures, toolMobileGetPublicConfig200Response.toolMobileDisabledfeatures) &&
        Objects.equals(this.toolMobileIosappid, toolMobileGetPublicConfig200Response.toolMobileIosappid) &&
        Objects.equals(this.toolMobileMinimumversion, toolMobileGetPublicConfig200Response.toolMobileMinimumversion) &&
        Objects.equals(this.toolMobileQrcodetype, toolMobileGetPublicConfig200Response.toolMobileQrcodetype) &&
        Objects.equals(this.toolMobileSetuplink, toolMobileGetPublicConfig200Response.toolMobileSetuplink) &&
        Objects.equals(this.typeoflogin, toolMobileGetPublicConfig200Response.typeoflogin) &&
        Objects.equals(this.warnings, toolMobileGetPublicConfig200Response.warnings) &&
        Objects.equals(this.wwwroot, toolMobileGetPublicConfig200Response.wwwroot);
  }

  @Override
  public int hashCode() {
    return Objects.hash(agedigitalconsentverification, authinstructions, authloginviaemail, authnoneenabled, autolang, compactlogourl, country, enablemobilewebservice, enablewebservices, forgottenpasswordurl, guestlogin, httpswwwroot, identityproviders, lang, langlist, langmenu, launchurl, locale, logourl, maintenanceenabled, maintenancemessage, mobilecssurl, registerauth, rememberusername, sitename, supportavailability, supportemail, supportname, supportpage, toolMobileAndroidappid, toolMobileDisabledfeatures, toolMobileIosappid, toolMobileMinimumversion, toolMobileQrcodetype, toolMobileSetuplink, typeoflogin, warnings, wwwroot);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ToolMobileGetPublicConfig200Response {\n");
    sb.append("    agedigitalconsentverification: ").append(toIndentedString(agedigitalconsentverification)).append("\n");
    sb.append("    authinstructions: ").append(toIndentedString(authinstructions)).append("\n");
    sb.append("    authloginviaemail: ").append(toIndentedString(authloginviaemail)).append("\n");
    sb.append("    authnoneenabled: ").append(toIndentedString(authnoneenabled)).append("\n");
    sb.append("    autolang: ").append(toIndentedString(autolang)).append("\n");
    sb.append("    compactlogourl: ").append(toIndentedString(compactlogourl)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    enablemobilewebservice: ").append(toIndentedString(enablemobilewebservice)).append("\n");
    sb.append("    enablewebservices: ").append(toIndentedString(enablewebservices)).append("\n");
    sb.append("    forgottenpasswordurl: ").append(toIndentedString(forgottenpasswordurl)).append("\n");
    sb.append("    guestlogin: ").append(toIndentedString(guestlogin)).append("\n");
    sb.append("    httpswwwroot: ").append(toIndentedString(httpswwwroot)).append("\n");
    sb.append("    identityproviders: ").append(toIndentedString(identityproviders)).append("\n");
    sb.append("    lang: ").append(toIndentedString(lang)).append("\n");
    sb.append("    langlist: ").append(toIndentedString(langlist)).append("\n");
    sb.append("    langmenu: ").append(toIndentedString(langmenu)).append("\n");
    sb.append("    launchurl: ").append(toIndentedString(launchurl)).append("\n");
    sb.append("    locale: ").append(toIndentedString(locale)).append("\n");
    sb.append("    logourl: ").append(toIndentedString(logourl)).append("\n");
    sb.append("    maintenanceenabled: ").append(toIndentedString(maintenanceenabled)).append("\n");
    sb.append("    maintenancemessage: ").append(toIndentedString(maintenancemessage)).append("\n");
    sb.append("    mobilecssurl: ").append(toIndentedString(mobilecssurl)).append("\n");
    sb.append("    registerauth: ").append(toIndentedString(registerauth)).append("\n");
    sb.append("    rememberusername: ").append(toIndentedString(rememberusername)).append("\n");
    sb.append("    sitename: ").append(toIndentedString(sitename)).append("\n");
    sb.append("    supportavailability: ").append(toIndentedString(supportavailability)).append("\n");
    sb.append("    supportemail: ").append(toIndentedString(supportemail)).append("\n");
    sb.append("    supportname: ").append(toIndentedString(supportname)).append("\n");
    sb.append("    supportpage: ").append(toIndentedString(supportpage)).append("\n");
    sb.append("    toolMobileAndroidappid: ").append(toIndentedString(toolMobileAndroidappid)).append("\n");
    sb.append("    toolMobileDisabledfeatures: ").append(toIndentedString(toolMobileDisabledfeatures)).append("\n");
    sb.append("    toolMobileIosappid: ").append(toIndentedString(toolMobileIosappid)).append("\n");
    sb.append("    toolMobileMinimumversion: ").append(toIndentedString(toolMobileMinimumversion)).append("\n");
    sb.append("    toolMobileQrcodetype: ").append(toIndentedString(toolMobileQrcodetype)).append("\n");
    sb.append("    toolMobileSetuplink: ").append(toIndentedString(toolMobileSetuplink)).append("\n");
    sb.append("    typeoflogin: ").append(toIndentedString(typeoflogin)).append("\n");
    sb.append("    warnings: ").append(toIndentedString(warnings)).append("\n");
    sb.append("    wwwroot: ").append(toIndentedString(wwwroot)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("agedigitalconsentverification");
    openapiFields.add("authinstructions");
    openapiFields.add("authloginviaemail");
    openapiFields.add("authnoneenabled");
    openapiFields.add("autolang");
    openapiFields.add("compactlogourl");
    openapiFields.add("country");
    openapiFields.add("enablemobilewebservice");
    openapiFields.add("enablewebservices");
    openapiFields.add("forgottenpasswordurl");
    openapiFields.add("guestlogin");
    openapiFields.add("httpswwwroot");
    openapiFields.add("identityproviders");
    openapiFields.add("lang");
    openapiFields.add("langlist");
    openapiFields.add("langmenu");
    openapiFields.add("launchurl");
    openapiFields.add("locale");
    openapiFields.add("logourl");
    openapiFields.add("maintenanceenabled");
    openapiFields.add("maintenancemessage");
    openapiFields.add("mobilecssurl");
    openapiFields.add("registerauth");
    openapiFields.add("rememberusername");
    openapiFields.add("sitename");
    openapiFields.add("supportavailability");
    openapiFields.add("supportemail");
    openapiFields.add("supportname");
    openapiFields.add("supportpage");
    openapiFields.add("tool_mobile_androidappid");
    openapiFields.add("tool_mobile_disabledfeatures");
    openapiFields.add("tool_mobile_iosappid");
    openapiFields.add("tool_mobile_minimumversion");
    openapiFields.add("tool_mobile_qrcodetype");
    openapiFields.add("tool_mobile_setuplink");
    openapiFields.add("typeoflogin");
    openapiFields.add("warnings");
    openapiFields.add("wwwroot");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("authinstructions");
    openapiRequiredFields.add("authloginviaemail");
    openapiRequiredFields.add("authnoneenabled");
    openapiRequiredFields.add("enablemobilewebservice");
    openapiRequiredFields.add("enablewebservices");
    openapiRequiredFields.add("forgottenpasswordurl");
    openapiRequiredFields.add("guestlogin");
    openapiRequiredFields.add("httpswwwroot");
    openapiRequiredFields.add("maintenanceenabled");
    openapiRequiredFields.add("maintenancemessage");
    openapiRequiredFields.add("registerauth");
    openapiRequiredFields.add("rememberusername");
    openapiRequiredFields.add("sitename");
    openapiRequiredFields.add("typeoflogin");
    openapiRequiredFields.add("wwwroot");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ToolMobileGetPublicConfig200Response
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ToolMobileGetPublicConfig200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ToolMobileGetPublicConfig200Response is not found in the empty JSON string", ToolMobileGetPublicConfig200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ToolMobileGetPublicConfig200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ToolMobileGetPublicConfig200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ToolMobileGetPublicConfig200Response.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("authinstructions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authinstructions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authinstructions").toString()));
      }
      if ((jsonObj.get("compactlogourl") != null && !jsonObj.get("compactlogourl").isJsonNull()) && !jsonObj.get("compactlogourl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `compactlogourl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("compactlogourl").toString()));
      }
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if (!jsonObj.get("forgottenpasswordurl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `forgottenpasswordurl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("forgottenpasswordurl").toString()));
      }
      if (!jsonObj.get("httpswwwroot").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `httpswwwroot` to be a primitive type in the JSON string but got `%s`", jsonObj.get("httpswwwroot").toString()));
      }
      if (jsonObj.get("identityproviders") != null && !jsonObj.get("identityproviders").isJsonNull()) {
        JsonArray jsonArrayidentityproviders = jsonObj.getAsJsonArray("identityproviders");
        if (jsonArrayidentityproviders != null) {
          // ensure the json data is an array
          if (!jsonObj.get("identityproviders").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `identityproviders` to be an array in the JSON string but got `%s`", jsonObj.get("identityproviders").toString()));
          }

          // validate the optional field `identityproviders` (array)
          for (int i = 0; i < jsonArrayidentityproviders.size(); i++) {
            ToolMobileGetPublicConfig200ResponseIdentityprovidersInner.validateJsonElement(jsonArrayidentityproviders.get(i));
          };
        }
      }
      if ((jsonObj.get("lang") != null && !jsonObj.get("lang").isJsonNull()) && !jsonObj.get("lang").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lang` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lang").toString()));
      }
      if ((jsonObj.get("langlist") != null && !jsonObj.get("langlist").isJsonNull()) && !jsonObj.get("langlist").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `langlist` to be a primitive type in the JSON string but got `%s`", jsonObj.get("langlist").toString()));
      }
      if ((jsonObj.get("launchurl") != null && !jsonObj.get("launchurl").isJsonNull()) && !jsonObj.get("launchurl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `launchurl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("launchurl").toString()));
      }
      if ((jsonObj.get("locale") != null && !jsonObj.get("locale").isJsonNull()) && !jsonObj.get("locale").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locale` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locale").toString()));
      }
      if ((jsonObj.get("logourl") != null && !jsonObj.get("logourl").isJsonNull()) && !jsonObj.get("logourl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logourl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logourl").toString()));
      }
      if (!jsonObj.get("maintenancemessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maintenancemessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maintenancemessage").toString()));
      }
      if ((jsonObj.get("mobilecssurl") != null && !jsonObj.get("mobilecssurl").isJsonNull()) && !jsonObj.get("mobilecssurl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mobilecssurl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mobilecssurl").toString()));
      }
      if (!jsonObj.get("registerauth").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `registerauth` to be a primitive type in the JSON string but got `%s`", jsonObj.get("registerauth").toString()));
      }
      if (!jsonObj.get("sitename").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sitename` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sitename").toString()));
      }
      if ((jsonObj.get("supportemail") != null && !jsonObj.get("supportemail").isJsonNull()) && !jsonObj.get("supportemail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `supportemail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("supportemail").toString()));
      }
      if ((jsonObj.get("supportname") != null && !jsonObj.get("supportname").isJsonNull()) && !jsonObj.get("supportname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `supportname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("supportname").toString()));
      }
      if ((jsonObj.get("supportpage") != null && !jsonObj.get("supportpage").isJsonNull()) && !jsonObj.get("supportpage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `supportpage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("supportpage").toString()));
      }
      if ((jsonObj.get("tool_mobile_androidappid") != null && !jsonObj.get("tool_mobile_androidappid").isJsonNull()) && !jsonObj.get("tool_mobile_androidappid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tool_mobile_androidappid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tool_mobile_androidappid").toString()));
      }
      if ((jsonObj.get("tool_mobile_disabledfeatures") != null && !jsonObj.get("tool_mobile_disabledfeatures").isJsonNull()) && !jsonObj.get("tool_mobile_disabledfeatures").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tool_mobile_disabledfeatures` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tool_mobile_disabledfeatures").toString()));
      }
      if ((jsonObj.get("tool_mobile_iosappid") != null && !jsonObj.get("tool_mobile_iosappid").isJsonNull()) && !jsonObj.get("tool_mobile_iosappid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tool_mobile_iosappid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tool_mobile_iosappid").toString()));
      }
      if ((jsonObj.get("tool_mobile_minimumversion") != null && !jsonObj.get("tool_mobile_minimumversion").isJsonNull()) && !jsonObj.get("tool_mobile_minimumversion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tool_mobile_minimumversion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tool_mobile_minimumversion").toString()));
      }
      if ((jsonObj.get("tool_mobile_setuplink") != null && !jsonObj.get("tool_mobile_setuplink").isJsonNull()) && !jsonObj.get("tool_mobile_setuplink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tool_mobile_setuplink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tool_mobile_setuplink").toString()));
      }
      if (jsonObj.get("warnings") != null && !jsonObj.get("warnings").isJsonNull()) {
        JsonArray jsonArraywarnings = jsonObj.getAsJsonArray("warnings");
        if (jsonArraywarnings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("warnings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `warnings` to be an array in the JSON string but got `%s`", jsonObj.get("warnings").toString()));
          }

          // validate the optional field `warnings` (array)
          for (int i = 0; i < jsonArraywarnings.size(); i++) {
            AuthEmailSignupUser200ResponseWarningsInner.validateJsonElement(jsonArraywarnings.get(i));
          };
        }
      }
      if (!jsonObj.get("wwwroot").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `wwwroot` to be a primitive type in the JSON string but got `%s`", jsonObj.get("wwwroot").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ToolMobileGetPublicConfig200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ToolMobileGetPublicConfig200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ToolMobileGetPublicConfig200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ToolMobileGetPublicConfig200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<ToolMobileGetPublicConfig200Response>() {
           @Override
           public void write(JsonWriter out, ToolMobileGetPublicConfig200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ToolMobileGetPublicConfig200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ToolMobileGetPublicConfig200Response given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ToolMobileGetPublicConfig200Response
  * @throws IOException if the JSON string is invalid with respect to ToolMobileGetPublicConfig200Response
  */
  public static ToolMobileGetPublicConfig200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ToolMobileGetPublicConfig200Response.class);
  }

 /**
  * Convert an instance of ToolMobileGetPublicConfig200Response to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

