/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.joshuapare.JSON;

/**
 * CoreTagGetTagindex200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-18T20:58:28.689161-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class CoreTagGetTagindex200Response {
  public static final String SERIALIZED_NAME_ANCHOR = "anchor";
  @SerializedName(SERIALIZED_NAME_ANCHOR)
  private String anchor = "null";

  public static final String SERIALIZED_NAME_COMPONENT = "component";
  @SerializedName(SERIALIZED_NAME_COMPONENT)
  private String component;

  public static final String SERIALIZED_NAME_CONTENT = "content";
  @SerializedName(SERIALIZED_NAME_CONTENT)
  private String content = "null";

  public static final String SERIALIZED_NAME_EXCLUSIVETEXT = "exclusivetext";
  @SerializedName(SERIALIZED_NAME_EXCLUSIVETEXT)
  private String exclusivetext = "null";

  public static final String SERIALIZED_NAME_EXCLUSIVEURL = "exclusiveurl";
  @SerializedName(SERIALIZED_NAME_EXCLUSIVEURL)
  private String exclusiveurl = "null";

  public static final String SERIALIZED_NAME_HASCONTENT = "hascontent";
  @SerializedName(SERIALIZED_NAME_HASCONTENT)
  private Integer hascontent = null;

  public static final String SERIALIZED_NAME_ITEMTYPE = "itemtype";
  @SerializedName(SERIALIZED_NAME_ITEMTYPE)
  private String itemtype = "null";

  public static final String SERIALIZED_NAME_NEXTPAGEURL = "nextpageurl";
  @SerializedName(SERIALIZED_NAME_NEXTPAGEURL)
  private String nextpageurl = "null";

  public static final String SERIALIZED_NAME_PREVPAGEURL = "prevpageurl";
  @SerializedName(SERIALIZED_NAME_PREVPAGEURL)
  private String prevpageurl;

  public static final String SERIALIZED_NAME_TA = "ta";
  @SerializedName(SERIALIZED_NAME_TA)
  private Integer ta;

  public static final String SERIALIZED_NAME_TAGID = "tagid";
  @SerializedName(SERIALIZED_NAME_TAGID)
  private Integer tagid = null;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public CoreTagGetTagindex200Response() {
  }

  public CoreTagGetTagindex200Response anchor(String anchor) {
    this.anchor = anchor;
    return this;
  }

   /**
   * name of anchor
   * @return anchor
  **/
  @javax.annotation.Nullable
  public String getAnchor() {
    return anchor;
  }

  public void setAnchor(String anchor) {
    this.anchor = anchor;
  }


  public CoreTagGetTagindex200Response component(String component) {
    this.component = component;
    return this;
  }

   /**
   * component
   * @return component
  **/
  @javax.annotation.Nonnull
  public String getComponent() {
    return component;
  }

  public void setComponent(String component) {
    this.component = component;
  }


  public CoreTagGetTagindex200Response content(String content) {
    this.content = content;
    return this;
  }

   /**
   * title
   * @return content
  **/
  @javax.annotation.Nonnull
  public String getContent() {
    return content;
  }

  public void setContent(String content) {
    this.content = content;
  }


  public CoreTagGetTagindex200Response exclusivetext(String exclusivetext) {
    this.exclusivetext = exclusivetext;
    return this;
  }

   /**
   * text for exclusive link
   * @return exclusivetext
  **/
  @javax.annotation.Nullable
  public String getExclusivetext() {
    return exclusivetext;
  }

  public void setExclusivetext(String exclusivetext) {
    this.exclusivetext = exclusivetext;
  }


  public CoreTagGetTagindex200Response exclusiveurl(String exclusiveurl) {
    this.exclusiveurl = exclusiveurl;
    return this;
  }

   /**
   * URL for exclusive link
   * @return exclusiveurl
  **/
  @javax.annotation.Nullable
  public String getExclusiveurl() {
    return exclusiveurl;
  }

  public void setExclusiveurl(String exclusiveurl) {
    this.exclusiveurl = exclusiveurl;
  }


  public CoreTagGetTagindex200Response hascontent(Integer hascontent) {
    this.hascontent = hascontent;
    return this;
  }

   /**
   * whether the content is present
   * @return hascontent
  **/
  @javax.annotation.Nonnull
  public Integer getHascontent() {
    return hascontent;
  }

  public void setHascontent(Integer hascontent) {
    this.hascontent = hascontent;
  }


  public CoreTagGetTagindex200Response itemtype(String itemtype) {
    this.itemtype = itemtype;
    return this;
  }

   /**
   * itemtype
   * @return itemtype
  **/
  @javax.annotation.Nonnull
  public String getItemtype() {
    return itemtype;
  }

  public void setItemtype(String itemtype) {
    this.itemtype = itemtype;
  }


  public CoreTagGetTagindex200Response nextpageurl(String nextpageurl) {
    this.nextpageurl = nextpageurl;
    return this;
  }

   /**
   * URL for the next page
   * @return nextpageurl
  **/
  @javax.annotation.Nullable
  public String getNextpageurl() {
    return nextpageurl;
  }

  public void setNextpageurl(String nextpageurl) {
    this.nextpageurl = nextpageurl;
  }


  public CoreTagGetTagindex200Response prevpageurl(String prevpageurl) {
    this.prevpageurl = prevpageurl;
    return this;
  }

   /**
   * URL for the next page
   * @return prevpageurl
  **/
  @javax.annotation.Nullable
  public String getPrevpageurl() {
    return prevpageurl;
  }

  public void setPrevpageurl(String prevpageurl) {
    this.prevpageurl = prevpageurl;
  }


  public CoreTagGetTagindex200Response ta(Integer ta) {
    this.ta = ta;
    return this;
  }

   /**
   * tag area id
   * @return ta
  **/
  @javax.annotation.Nonnull
  public Integer getTa() {
    return ta;
  }

  public void setTa(Integer ta) {
    this.ta = ta;
  }


  public CoreTagGetTagindex200Response tagid(Integer tagid) {
    this.tagid = tagid;
    return this;
  }

   /**
   * tag id
   * @return tagid
  **/
  @javax.annotation.Nonnull
  public Integer getTagid() {
    return tagid;
  }

  public void setTagid(Integer tagid) {
    this.tagid = tagid;
  }


  public CoreTagGetTagindex200Response title(String title) {
    this.title = title;
    return this;
  }

   /**
   * title
   * @return title
  **/
  @javax.annotation.Nonnull
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CoreTagGetTagindex200Response coreTagGetTagindex200Response = (CoreTagGetTagindex200Response) o;
    return Objects.equals(this.anchor, coreTagGetTagindex200Response.anchor) &&
        Objects.equals(this.component, coreTagGetTagindex200Response.component) &&
        Objects.equals(this.content, coreTagGetTagindex200Response.content) &&
        Objects.equals(this.exclusivetext, coreTagGetTagindex200Response.exclusivetext) &&
        Objects.equals(this.exclusiveurl, coreTagGetTagindex200Response.exclusiveurl) &&
        Objects.equals(this.hascontent, coreTagGetTagindex200Response.hascontent) &&
        Objects.equals(this.itemtype, coreTagGetTagindex200Response.itemtype) &&
        Objects.equals(this.nextpageurl, coreTagGetTagindex200Response.nextpageurl) &&
        Objects.equals(this.prevpageurl, coreTagGetTagindex200Response.prevpageurl) &&
        Objects.equals(this.ta, coreTagGetTagindex200Response.ta) &&
        Objects.equals(this.tagid, coreTagGetTagindex200Response.tagid) &&
        Objects.equals(this.title, coreTagGetTagindex200Response.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(anchor, component, content, exclusivetext, exclusiveurl, hascontent, itemtype, nextpageurl, prevpageurl, ta, tagid, title);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CoreTagGetTagindex200Response {\n");
    sb.append("    anchor: ").append(toIndentedString(anchor)).append("\n");
    sb.append("    component: ").append(toIndentedString(component)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    exclusivetext: ").append(toIndentedString(exclusivetext)).append("\n");
    sb.append("    exclusiveurl: ").append(toIndentedString(exclusiveurl)).append("\n");
    sb.append("    hascontent: ").append(toIndentedString(hascontent)).append("\n");
    sb.append("    itemtype: ").append(toIndentedString(itemtype)).append("\n");
    sb.append("    nextpageurl: ").append(toIndentedString(nextpageurl)).append("\n");
    sb.append("    prevpageurl: ").append(toIndentedString(prevpageurl)).append("\n");
    sb.append("    ta: ").append(toIndentedString(ta)).append("\n");
    sb.append("    tagid: ").append(toIndentedString(tagid)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("anchor");
    openapiFields.add("component");
    openapiFields.add("content");
    openapiFields.add("exclusivetext");
    openapiFields.add("exclusiveurl");
    openapiFields.add("hascontent");
    openapiFields.add("itemtype");
    openapiFields.add("nextpageurl");
    openapiFields.add("prevpageurl");
    openapiFields.add("ta");
    openapiFields.add("tagid");
    openapiFields.add("title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("component");
    openapiRequiredFields.add("content");
    openapiRequiredFields.add("hascontent");
    openapiRequiredFields.add("itemtype");
    openapiRequiredFields.add("ta");
    openapiRequiredFields.add("tagid");
    openapiRequiredFields.add("title");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CoreTagGetTagindex200Response
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CoreTagGetTagindex200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CoreTagGetTagindex200Response is not found in the empty JSON string", CoreTagGetTagindex200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CoreTagGetTagindex200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CoreTagGetTagindex200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CoreTagGetTagindex200Response.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("anchor") != null && !jsonObj.get("anchor").isJsonNull()) && !jsonObj.get("anchor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `anchor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("anchor").toString()));
      }
      if (!jsonObj.get("component").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `component` to be a primitive type in the JSON string but got `%s`", jsonObj.get("component").toString()));
      }
      if (!jsonObj.get("content").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `content` to be a primitive type in the JSON string but got `%s`", jsonObj.get("content").toString()));
      }
      if ((jsonObj.get("exclusivetext") != null && !jsonObj.get("exclusivetext").isJsonNull()) && !jsonObj.get("exclusivetext").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exclusivetext` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exclusivetext").toString()));
      }
      if ((jsonObj.get("exclusiveurl") != null && !jsonObj.get("exclusiveurl").isJsonNull()) && !jsonObj.get("exclusiveurl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exclusiveurl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exclusiveurl").toString()));
      }
      if (!jsonObj.get("itemtype").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemtype` to be a primitive type in the JSON string but got `%s`", jsonObj.get("itemtype").toString()));
      }
      if ((jsonObj.get("nextpageurl") != null && !jsonObj.get("nextpageurl").isJsonNull()) && !jsonObj.get("nextpageurl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nextpageurl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nextpageurl").toString()));
      }
      if ((jsonObj.get("prevpageurl") != null && !jsonObj.get("prevpageurl").isJsonNull()) && !jsonObj.get("prevpageurl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prevpageurl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prevpageurl").toString()));
      }
      if (!jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CoreTagGetTagindex200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CoreTagGetTagindex200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CoreTagGetTagindex200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CoreTagGetTagindex200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<CoreTagGetTagindex200Response>() {
           @Override
           public void write(JsonWriter out, CoreTagGetTagindex200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CoreTagGetTagindex200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CoreTagGetTagindex200Response given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CoreTagGetTagindex200Response
  * @throws IOException if the JSON string is invalid with respect to CoreTagGetTagindex200Response
  */
  public static CoreTagGetTagindex200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CoreTagGetTagindex200Response.class);
  }

 /**
  * Convert an instance of CoreTagGetTagindex200Response to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

