/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.joshuapare.JSON;

/**
 * ModForumAddDiscussionPost200ResponsePostCapabilities
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-18T20:58:28.689161-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class ModForumAddDiscussionPost200ResponsePostCapabilities {
  public static final String SERIALIZED_NAME_CANREPLYPRIVATELY = "canreplyprivately";
  @SerializedName(SERIALIZED_NAME_CANREPLYPRIVATELY)
  private Boolean canreplyprivately = null;

  public static final String SERIALIZED_NAME_CONTROLREADSTATUS = "controlreadstatus";
  @SerializedName(SERIALIZED_NAME_CONTROLREADSTATUS)
  private Boolean controlreadstatus = null;

  public static final String SERIALIZED_NAME_DELETE = "delete";
  @SerializedName(SERIALIZED_NAME_DELETE)
  private Boolean delete = null;

  public static final String SERIALIZED_NAME_EDIT = "edit";
  @SerializedName(SERIALIZED_NAME_EDIT)
  private Boolean edit = null;

  public static final String SERIALIZED_NAME_EXPORT = "export";
  @SerializedName(SERIALIZED_NAME_EXPORT)
  private Boolean export = null;

  public static final String SERIALIZED_NAME_REPLY = "reply";
  @SerializedName(SERIALIZED_NAME_REPLY)
  private Boolean reply = null;

  public static final String SERIALIZED_NAME_SELFENROL = "selfenrol";
  @SerializedName(SERIALIZED_NAME_SELFENROL)
  private Boolean selfenrol = null;

  public static final String SERIALIZED_NAME_SPLIT = "split";
  @SerializedName(SERIALIZED_NAME_SPLIT)
  private Boolean split = null;

  public static final String SERIALIZED_NAME_VIEW = "view";
  @SerializedName(SERIALIZED_NAME_VIEW)
  private Boolean view = null;

  public ModForumAddDiscussionPost200ResponsePostCapabilities() {
  }

  public ModForumAddDiscussionPost200ResponsePostCapabilities canreplyprivately(Boolean canreplyprivately) {
    this.canreplyprivately = canreplyprivately;
    return this;
  }

   /**
   * Whether the user can post a private reply
   * @return canreplyprivately
  **/
  @javax.annotation.Nonnull
  public Boolean getCanreplyprivately() {
    return canreplyprivately;
  }

  public void setCanreplyprivately(Boolean canreplyprivately) {
    this.canreplyprivately = canreplyprivately;
  }


  public ModForumAddDiscussionPost200ResponsePostCapabilities controlreadstatus(Boolean controlreadstatus) {
    this.controlreadstatus = controlreadstatus;
    return this;
  }

   /**
   * Whether the user can control the read status of the post
   * @return controlreadstatus
  **/
  @javax.annotation.Nonnull
  public Boolean getControlreadstatus() {
    return controlreadstatus;
  }

  public void setControlreadstatus(Boolean controlreadstatus) {
    this.controlreadstatus = controlreadstatus;
  }


  public ModForumAddDiscussionPost200ResponsePostCapabilities delete(Boolean delete) {
    this.delete = delete;
    return this;
  }

   /**
   * Whether the user can delete the post
   * @return delete
  **/
  @javax.annotation.Nonnull
  public Boolean getDelete() {
    return delete;
  }

  public void setDelete(Boolean delete) {
    this.delete = delete;
  }


  public ModForumAddDiscussionPost200ResponsePostCapabilities edit(Boolean edit) {
    this.edit = edit;
    return this;
  }

   /**
   * Whether the user can edit the post
   * @return edit
  **/
  @javax.annotation.Nonnull
  public Boolean getEdit() {
    return edit;
  }

  public void setEdit(Boolean edit) {
    this.edit = edit;
  }


  public ModForumAddDiscussionPost200ResponsePostCapabilities export(Boolean export) {
    this.export = export;
    return this;
  }

   /**
   * Whether the user can export the post
   * @return export
  **/
  @javax.annotation.Nonnull
  public Boolean getExport() {
    return export;
  }

  public void setExport(Boolean export) {
    this.export = export;
  }


  public ModForumAddDiscussionPost200ResponsePostCapabilities reply(Boolean reply) {
    this.reply = reply;
    return this;
  }

   /**
   * Whether the user can reply to the post
   * @return reply
  **/
  @javax.annotation.Nonnull
  public Boolean getReply() {
    return reply;
  }

  public void setReply(Boolean reply) {
    this.reply = reply;
  }


  public ModForumAddDiscussionPost200ResponsePostCapabilities selfenrol(Boolean selfenrol) {
    this.selfenrol = selfenrol;
    return this;
  }

   /**
   * Whether the user can self enrol into the course
   * @return selfenrol
  **/
  @javax.annotation.Nonnull
  public Boolean getSelfenrol() {
    return selfenrol;
  }

  public void setSelfenrol(Boolean selfenrol) {
    this.selfenrol = selfenrol;
  }


  public ModForumAddDiscussionPost200ResponsePostCapabilities split(Boolean split) {
    this.split = split;
    return this;
  }

   /**
   * Whether the user can split the post
   * @return split
  **/
  @javax.annotation.Nonnull
  public Boolean getSplit() {
    return split;
  }

  public void setSplit(Boolean split) {
    this.split = split;
  }


  public ModForumAddDiscussionPost200ResponsePostCapabilities view(Boolean view) {
    this.view = view;
    return this;
  }

   /**
   * Whether the user can view the post
   * @return view
  **/
  @javax.annotation.Nonnull
  public Boolean getView() {
    return view;
  }

  public void setView(Boolean view) {
    this.view = view;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModForumAddDiscussionPost200ResponsePostCapabilities modForumAddDiscussionPost200ResponsePostCapabilities = (ModForumAddDiscussionPost200ResponsePostCapabilities) o;
    return Objects.equals(this.canreplyprivately, modForumAddDiscussionPost200ResponsePostCapabilities.canreplyprivately) &&
        Objects.equals(this.controlreadstatus, modForumAddDiscussionPost200ResponsePostCapabilities.controlreadstatus) &&
        Objects.equals(this.delete, modForumAddDiscussionPost200ResponsePostCapabilities.delete) &&
        Objects.equals(this.edit, modForumAddDiscussionPost200ResponsePostCapabilities.edit) &&
        Objects.equals(this.export, modForumAddDiscussionPost200ResponsePostCapabilities.export) &&
        Objects.equals(this.reply, modForumAddDiscussionPost200ResponsePostCapabilities.reply) &&
        Objects.equals(this.selfenrol, modForumAddDiscussionPost200ResponsePostCapabilities.selfenrol) &&
        Objects.equals(this.split, modForumAddDiscussionPost200ResponsePostCapabilities.split) &&
        Objects.equals(this.view, modForumAddDiscussionPost200ResponsePostCapabilities.view);
  }

  @Override
  public int hashCode() {
    return Objects.hash(canreplyprivately, controlreadstatus, delete, edit, export, reply, selfenrol, split, view);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModForumAddDiscussionPost200ResponsePostCapabilities {\n");
    sb.append("    canreplyprivately: ").append(toIndentedString(canreplyprivately)).append("\n");
    sb.append("    controlreadstatus: ").append(toIndentedString(controlreadstatus)).append("\n");
    sb.append("    delete: ").append(toIndentedString(delete)).append("\n");
    sb.append("    edit: ").append(toIndentedString(edit)).append("\n");
    sb.append("    export: ").append(toIndentedString(export)).append("\n");
    sb.append("    reply: ").append(toIndentedString(reply)).append("\n");
    sb.append("    selfenrol: ").append(toIndentedString(selfenrol)).append("\n");
    sb.append("    split: ").append(toIndentedString(split)).append("\n");
    sb.append("    view: ").append(toIndentedString(view)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("canreplyprivately");
    openapiFields.add("controlreadstatus");
    openapiFields.add("delete");
    openapiFields.add("edit");
    openapiFields.add("export");
    openapiFields.add("reply");
    openapiFields.add("selfenrol");
    openapiFields.add("split");
    openapiFields.add("view");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("canreplyprivately");
    openapiRequiredFields.add("controlreadstatus");
    openapiRequiredFields.add("delete");
    openapiRequiredFields.add("edit");
    openapiRequiredFields.add("export");
    openapiRequiredFields.add("reply");
    openapiRequiredFields.add("selfenrol");
    openapiRequiredFields.add("split");
    openapiRequiredFields.add("view");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ModForumAddDiscussionPost200ResponsePostCapabilities
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ModForumAddDiscussionPost200ResponsePostCapabilities.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModForumAddDiscussionPost200ResponsePostCapabilities is not found in the empty JSON string", ModForumAddDiscussionPost200ResponsePostCapabilities.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ModForumAddDiscussionPost200ResponsePostCapabilities.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModForumAddDiscussionPost200ResponsePostCapabilities` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ModForumAddDiscussionPost200ResponsePostCapabilities.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModForumAddDiscussionPost200ResponsePostCapabilities.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModForumAddDiscussionPost200ResponsePostCapabilities' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModForumAddDiscussionPost200ResponsePostCapabilities> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModForumAddDiscussionPost200ResponsePostCapabilities.class));

       return (TypeAdapter<T>) new TypeAdapter<ModForumAddDiscussionPost200ResponsePostCapabilities>() {
           @Override
           public void write(JsonWriter out, ModForumAddDiscussionPost200ResponsePostCapabilities value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModForumAddDiscussionPost200ResponsePostCapabilities read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ModForumAddDiscussionPost200ResponsePostCapabilities given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ModForumAddDiscussionPost200ResponsePostCapabilities
  * @throws IOException if the JSON string is invalid with respect to ModForumAddDiscussionPost200ResponsePostCapabilities
  */
  public static ModForumAddDiscussionPost200ResponsePostCapabilities fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModForumAddDiscussionPost200ResponsePostCapabilities.class);
  }

 /**
  * Convert an instance of ModForumAddDiscussionPost200ResponsePostCapabilities to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

