/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CoreCompetencyGradeCompetency200ResponseActionuser;
import org.openapitools.client.model.CoreCompetencyReadPlan200ResponseCommentarea;
import org.openapitools.client.model.ToolLpDataForCompetencySummary200Response;
import org.openapitools.client.model.ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerUsercompetencycourse;
import org.openapitools.client.model.ToolLpDataForUserCompetencySummary200ResponseEvidenceInner;
import org.openapitools.client.model.ToolLpDataForUserCompetencySummary200ResponseUsercompetency;
import org.openapitools.client.model.ToolLpDataForUserCompetencySummary200ResponseUsercompetencyplan;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.joshuapare.JSON;

/**
 * ToolLpDataForUserCompetencySummary200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-18T14:00:07.069642-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class ToolLpDataForUserCompetencySummary200Response {
  public static final String SERIALIZED_NAME_CANGRADE = "cangrade";
  @SerializedName(SERIALIZED_NAME_CANGRADE)
  private Boolean cangrade = null;

  public static final String SERIALIZED_NAME_COMMENTAREA = "commentarea";
  @SerializedName(SERIALIZED_NAME_COMMENTAREA)
  private CoreCompetencyReadPlan200ResponseCommentarea commentarea;

  public static final String SERIALIZED_NAME_COMPETENCY = "competency";
  @SerializedName(SERIALIZED_NAME_COMPETENCY)
  private ToolLpDataForCompetencySummary200Response competency;

  public static final String SERIALIZED_NAME_EVIDENCE = "evidence";
  @SerializedName(SERIALIZED_NAME_EVIDENCE)
  private List<ToolLpDataForUserCompetencySummary200ResponseEvidenceInner> evidence = new ArrayList<>();

  public static final String SERIALIZED_NAME_SHOWRELATEDCOMPETENCIES = "showrelatedcompetencies";
  @SerializedName(SERIALIZED_NAME_SHOWRELATEDCOMPETENCIES)
  private Boolean showrelatedcompetencies = null;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private CoreCompetencyGradeCompetency200ResponseActionuser user;

  public static final String SERIALIZED_NAME_USERCOMPETENCY = "usercompetency";
  @SerializedName(SERIALIZED_NAME_USERCOMPETENCY)
  private ToolLpDataForUserCompetencySummary200ResponseUsercompetency usercompetency;

  public static final String SERIALIZED_NAME_USERCOMPETENCYCOURSE = "usercompetencycourse";
  @SerializedName(SERIALIZED_NAME_USERCOMPETENCYCOURSE)
  private ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerUsercompetencycourse usercompetencycourse;

  public static final String SERIALIZED_NAME_USERCOMPETENCYPLAN = "usercompetencyplan";
  @SerializedName(SERIALIZED_NAME_USERCOMPETENCYPLAN)
  private ToolLpDataForUserCompetencySummary200ResponseUsercompetencyplan usercompetencyplan;

  public ToolLpDataForUserCompetencySummary200Response() {
  }

  public ToolLpDataForUserCompetencySummary200Response cangrade(Boolean cangrade) {
    this.cangrade = cangrade;
    return this;
  }

   /**
   * cangrade
   * @return cangrade
  **/
  @javax.annotation.Nonnull
  public Boolean getCangrade() {
    return cangrade;
  }

  public void setCangrade(Boolean cangrade) {
    this.cangrade = cangrade;
  }


  public ToolLpDataForUserCompetencySummary200Response commentarea(CoreCompetencyReadPlan200ResponseCommentarea commentarea) {
    this.commentarea = commentarea;
    return this;
  }

   /**
   * Get commentarea
   * @return commentarea
  **/
  @javax.annotation.Nullable
  public CoreCompetencyReadPlan200ResponseCommentarea getCommentarea() {
    return commentarea;
  }

  public void setCommentarea(CoreCompetencyReadPlan200ResponseCommentarea commentarea) {
    this.commentarea = commentarea;
  }


  public ToolLpDataForUserCompetencySummary200Response competency(ToolLpDataForCompetencySummary200Response competency) {
    this.competency = competency;
    return this;
  }

   /**
   * Get competency
   * @return competency
  **/
  @javax.annotation.Nonnull
  public ToolLpDataForCompetencySummary200Response getCompetency() {
    return competency;
  }

  public void setCompetency(ToolLpDataForCompetencySummary200Response competency) {
    this.competency = competency;
  }


  public ToolLpDataForUserCompetencySummary200Response evidence(List<ToolLpDataForUserCompetencySummary200ResponseEvidenceInner> evidence) {
    this.evidence = evidence;
    return this;
  }

  public ToolLpDataForUserCompetencySummary200Response addEvidenceItem(ToolLpDataForUserCompetencySummary200ResponseEvidenceInner evidenceItem) {
    if (this.evidence == null) {
      this.evidence = new ArrayList<>();
    }
    this.evidence.add(evidenceItem);
    return this;
  }

   /**
   * Get evidence
   * @return evidence
  **/
  @javax.annotation.Nonnull
  public List<ToolLpDataForUserCompetencySummary200ResponseEvidenceInner> getEvidence() {
    return evidence;
  }

  public void setEvidence(List<ToolLpDataForUserCompetencySummary200ResponseEvidenceInner> evidence) {
    this.evidence = evidence;
  }


  public ToolLpDataForUserCompetencySummary200Response showrelatedcompetencies(Boolean showrelatedcompetencies) {
    this.showrelatedcompetencies = showrelatedcompetencies;
    return this;
  }

   /**
   * showrelatedcompetencies
   * @return showrelatedcompetencies
  **/
  @javax.annotation.Nonnull
  public Boolean getShowrelatedcompetencies() {
    return showrelatedcompetencies;
  }

  public void setShowrelatedcompetencies(Boolean showrelatedcompetencies) {
    this.showrelatedcompetencies = showrelatedcompetencies;
  }


  public ToolLpDataForUserCompetencySummary200Response user(CoreCompetencyGradeCompetency200ResponseActionuser user) {
    this.user = user;
    return this;
  }

   /**
   * Get user
   * @return user
  **/
  @javax.annotation.Nonnull
  public CoreCompetencyGradeCompetency200ResponseActionuser getUser() {
    return user;
  }

  public void setUser(CoreCompetencyGradeCompetency200ResponseActionuser user) {
    this.user = user;
  }


  public ToolLpDataForUserCompetencySummary200Response usercompetency(ToolLpDataForUserCompetencySummary200ResponseUsercompetency usercompetency) {
    this.usercompetency = usercompetency;
    return this;
  }

   /**
   * Get usercompetency
   * @return usercompetency
  **/
  @javax.annotation.Nullable
  public ToolLpDataForUserCompetencySummary200ResponseUsercompetency getUsercompetency() {
    return usercompetency;
  }

  public void setUsercompetency(ToolLpDataForUserCompetencySummary200ResponseUsercompetency usercompetency) {
    this.usercompetency = usercompetency;
  }


  public ToolLpDataForUserCompetencySummary200Response usercompetencycourse(ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerUsercompetencycourse usercompetencycourse) {
    this.usercompetencycourse = usercompetencycourse;
    return this;
  }

   /**
   * Get usercompetencycourse
   * @return usercompetencycourse
  **/
  @javax.annotation.Nullable
  public ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerUsercompetencycourse getUsercompetencycourse() {
    return usercompetencycourse;
  }

  public void setUsercompetencycourse(ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerUsercompetencycourse usercompetencycourse) {
    this.usercompetencycourse = usercompetencycourse;
  }


  public ToolLpDataForUserCompetencySummary200Response usercompetencyplan(ToolLpDataForUserCompetencySummary200ResponseUsercompetencyplan usercompetencyplan) {
    this.usercompetencyplan = usercompetencyplan;
    return this;
  }

   /**
   * Get usercompetencyplan
   * @return usercompetencyplan
  **/
  @javax.annotation.Nullable
  public ToolLpDataForUserCompetencySummary200ResponseUsercompetencyplan getUsercompetencyplan() {
    return usercompetencyplan;
  }

  public void setUsercompetencyplan(ToolLpDataForUserCompetencySummary200ResponseUsercompetencyplan usercompetencyplan) {
    this.usercompetencyplan = usercompetencyplan;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ToolLpDataForUserCompetencySummary200Response toolLpDataForUserCompetencySummary200Response = (ToolLpDataForUserCompetencySummary200Response) o;
    return Objects.equals(this.cangrade, toolLpDataForUserCompetencySummary200Response.cangrade) &&
        Objects.equals(this.commentarea, toolLpDataForUserCompetencySummary200Response.commentarea) &&
        Objects.equals(this.competency, toolLpDataForUserCompetencySummary200Response.competency) &&
        Objects.equals(this.evidence, toolLpDataForUserCompetencySummary200Response.evidence) &&
        Objects.equals(this.showrelatedcompetencies, toolLpDataForUserCompetencySummary200Response.showrelatedcompetencies) &&
        Objects.equals(this.user, toolLpDataForUserCompetencySummary200Response.user) &&
        Objects.equals(this.usercompetency, toolLpDataForUserCompetencySummary200Response.usercompetency) &&
        Objects.equals(this.usercompetencycourse, toolLpDataForUserCompetencySummary200Response.usercompetencycourse) &&
        Objects.equals(this.usercompetencyplan, toolLpDataForUserCompetencySummary200Response.usercompetencyplan);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cangrade, commentarea, competency, evidence, showrelatedcompetencies, user, usercompetency, usercompetencycourse, usercompetencyplan);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ToolLpDataForUserCompetencySummary200Response {\n");
    sb.append("    cangrade: ").append(toIndentedString(cangrade)).append("\n");
    sb.append("    commentarea: ").append(toIndentedString(commentarea)).append("\n");
    sb.append("    competency: ").append(toIndentedString(competency)).append("\n");
    sb.append("    evidence: ").append(toIndentedString(evidence)).append("\n");
    sb.append("    showrelatedcompetencies: ").append(toIndentedString(showrelatedcompetencies)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    usercompetency: ").append(toIndentedString(usercompetency)).append("\n");
    sb.append("    usercompetencycourse: ").append(toIndentedString(usercompetencycourse)).append("\n");
    sb.append("    usercompetencyplan: ").append(toIndentedString(usercompetencyplan)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cangrade");
    openapiFields.add("commentarea");
    openapiFields.add("competency");
    openapiFields.add("evidence");
    openapiFields.add("showrelatedcompetencies");
    openapiFields.add("user");
    openapiFields.add("usercompetency");
    openapiFields.add("usercompetencycourse");
    openapiFields.add("usercompetencyplan");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("cangrade");
    openapiRequiredFields.add("competency");
    openapiRequiredFields.add("evidence");
    openapiRequiredFields.add("showrelatedcompetencies");
    openapiRequiredFields.add("user");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ToolLpDataForUserCompetencySummary200Response
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ToolLpDataForUserCompetencySummary200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ToolLpDataForUserCompetencySummary200Response is not found in the empty JSON string", ToolLpDataForUserCompetencySummary200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ToolLpDataForUserCompetencySummary200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ToolLpDataForUserCompetencySummary200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ToolLpDataForUserCompetencySummary200Response.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `commentarea`
      if (jsonObj.get("commentarea") != null && !jsonObj.get("commentarea").isJsonNull()) {
        CoreCompetencyReadPlan200ResponseCommentarea.validateJsonElement(jsonObj.get("commentarea"));
      }
      // validate the required field `competency`
      ToolLpDataForCompetencySummary200Response.validateJsonElement(jsonObj.get("competency"));
      // ensure the json data is an array
      if (!jsonObj.get("evidence").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `evidence` to be an array in the JSON string but got `%s`", jsonObj.get("evidence").toString()));
      }

      JsonArray jsonArrayevidence = jsonObj.getAsJsonArray("evidence");
      // validate the required field `evidence` (array)
      for (int i = 0; i < jsonArrayevidence.size(); i++) {
        ToolLpDataForUserCompetencySummary200ResponseEvidenceInner.validateJsonElement(jsonArrayevidence.get(i));
      };
      // validate the required field `user`
      CoreCompetencyGradeCompetency200ResponseActionuser.validateJsonElement(jsonObj.get("user"));
      // validate the optional field `usercompetency`
      if (jsonObj.get("usercompetency") != null && !jsonObj.get("usercompetency").isJsonNull()) {
        ToolLpDataForUserCompetencySummary200ResponseUsercompetency.validateJsonElement(jsonObj.get("usercompetency"));
      }
      // validate the optional field `usercompetencycourse`
      if (jsonObj.get("usercompetencycourse") != null && !jsonObj.get("usercompetencycourse").isJsonNull()) {
        ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerUsercompetencycourse.validateJsonElement(jsonObj.get("usercompetencycourse"));
      }
      // validate the optional field `usercompetencyplan`
      if (jsonObj.get("usercompetencyplan") != null && !jsonObj.get("usercompetencyplan").isJsonNull()) {
        ToolLpDataForUserCompetencySummary200ResponseUsercompetencyplan.validateJsonElement(jsonObj.get("usercompetencyplan"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ToolLpDataForUserCompetencySummary200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ToolLpDataForUserCompetencySummary200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ToolLpDataForUserCompetencySummary200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ToolLpDataForUserCompetencySummary200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<ToolLpDataForUserCompetencySummary200Response>() {
           @Override
           public void write(JsonWriter out, ToolLpDataForUserCompetencySummary200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ToolLpDataForUserCompetencySummary200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ToolLpDataForUserCompetencySummary200Response given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ToolLpDataForUserCompetencySummary200Response
  * @throws IOException if the JSON string is invalid with respect to ToolLpDataForUserCompetencySummary200Response
  */
  public static ToolLpDataForUserCompetencySummary200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ToolLpDataForUserCompetencySummary200Response.class);
  }

 /**
  * Convert an instance of ToolLpDataForUserCompetencySummary200Response to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

