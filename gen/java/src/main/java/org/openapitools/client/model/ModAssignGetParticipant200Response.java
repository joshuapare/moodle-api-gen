/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ModAssignGetParticipant200ResponseUser;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.joshuapare.JSON;

/**
 * ModAssignGetParticipant200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-18T14:00:07.069642-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class ModAssignGetParticipant200Response {
  public static final String SERIALIZED_NAME_ALLOWSUBMISSIONSFROMDATE = "allowsubmissionsfromdate";
  @SerializedName(SERIALIZED_NAME_ALLOWSUBMISSIONSFROMDATE)
  private Integer allowsubmissionsfromdate = null;

  public static final String SERIALIZED_NAME_BLINDMARKING = "blindmarking";
  @SerializedName(SERIALIZED_NAME_BLINDMARKING)
  private Boolean blindmarking = null;

  public static final String SERIALIZED_NAME_CUTOFFDATE = "cutoffdate";
  @SerializedName(SERIALIZED_NAME_CUTOFFDATE)
  private Integer cutoffdate = null;

  public static final String SERIALIZED_NAME_DUEDATE = "duedate";
  @SerializedName(SERIALIZED_NAME_DUEDATE)
  private Integer duedate = null;

  public static final String SERIALIZED_NAME_DUEDATESTR = "duedatestr";
  @SerializedName(SERIALIZED_NAME_DUEDATESTR)
  private String duedatestr = "null";

  public static final String SERIALIZED_NAME_FULLNAME = "fullname";
  @SerializedName(SERIALIZED_NAME_FULLNAME)
  private String fullname;

  public static final String SERIALIZED_NAME_GRANTEDEXTENSION = "grantedextension";
  @SerializedName(SERIALIZED_NAME_GRANTEDEXTENSION)
  private Boolean grantedextension = null;

  public static final String SERIALIZED_NAME_GROUPID = "groupid";
  @SerializedName(SERIALIZED_NAME_GROUPID)
  private Integer groupid = null;

  public static final String SERIALIZED_NAME_GROUPNAME = "groupname";
  @SerializedName(SERIALIZED_NAME_GROUPNAME)
  private String groupname = "null";

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_REQUIREGRADING = "requiregrading";
  @SerializedName(SERIALIZED_NAME_REQUIREGRADING)
  private Boolean requiregrading = null;

  public static final String SERIALIZED_NAME_SUBMISSIONSTATUS = "submissionstatus";
  @SerializedName(SERIALIZED_NAME_SUBMISSIONSTATUS)
  private String submissionstatus = "null";

  public static final String SERIALIZED_NAME_SUBMITTED = "submitted";
  @SerializedName(SERIALIZED_NAME_SUBMITTED)
  private Boolean submitted = null;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private ModAssignGetParticipant200ResponseUser user;

  public ModAssignGetParticipant200Response() {
  }

  public ModAssignGetParticipant200Response allowsubmissionsfromdate(Integer allowsubmissionsfromdate) {
    this.allowsubmissionsfromdate = allowsubmissionsfromdate;
    return this;
  }

   /**
   * allowsubmissionsfromdate for the user
   * @return allowsubmissionsfromdate
  **/
  @javax.annotation.Nonnull
  public Integer getAllowsubmissionsfromdate() {
    return allowsubmissionsfromdate;
  }

  public void setAllowsubmissionsfromdate(Integer allowsubmissionsfromdate) {
    this.allowsubmissionsfromdate = allowsubmissionsfromdate;
  }


  public ModAssignGetParticipant200Response blindmarking(Boolean blindmarking) {
    this.blindmarking = blindmarking;
    return this;
  }

   /**
   * is blind marking enabled for this assignment
   * @return blindmarking
  **/
  @javax.annotation.Nonnull
  public Boolean getBlindmarking() {
    return blindmarking;
  }

  public void setBlindmarking(Boolean blindmarking) {
    this.blindmarking = blindmarking;
  }


  public ModAssignGetParticipant200Response cutoffdate(Integer cutoffdate) {
    this.cutoffdate = cutoffdate;
    return this;
  }

   /**
   * cutoffdate for the user
   * @return cutoffdate
  **/
  @javax.annotation.Nonnull
  public Integer getCutoffdate() {
    return cutoffdate;
  }

  public void setCutoffdate(Integer cutoffdate) {
    this.cutoffdate = cutoffdate;
  }


  public ModAssignGetParticipant200Response duedate(Integer duedate) {
    this.duedate = duedate;
    return this;
  }

   /**
   * duedate for the user
   * @return duedate
  **/
  @javax.annotation.Nonnull
  public Integer getDuedate() {
    return duedate;
  }

  public void setDuedate(Integer duedate) {
    this.duedate = duedate;
  }


  public ModAssignGetParticipant200Response duedatestr(String duedatestr) {
    this.duedatestr = duedatestr;
    return this;
  }

   /**
   * duedate for the user
   * @return duedatestr
  **/
  @javax.annotation.Nonnull
  public String getDuedatestr() {
    return duedatestr;
  }

  public void setDuedatestr(String duedatestr) {
    this.duedatestr = duedatestr;
  }


  public ModAssignGetParticipant200Response fullname(String fullname) {
    this.fullname = fullname;
    return this;
  }

   /**
   * The fullname of the user
   * @return fullname
  **/
  @javax.annotation.Nonnull
  public String getFullname() {
    return fullname;
  }

  public void setFullname(String fullname) {
    this.fullname = fullname;
  }


  public ModAssignGetParticipant200Response grantedextension(Boolean grantedextension) {
    this.grantedextension = grantedextension;
    return this;
  }

   /**
   * have they been granted an extension
   * @return grantedextension
  **/
  @javax.annotation.Nonnull
  public Boolean getGrantedextension() {
    return grantedextension;
  }

  public void setGrantedextension(Boolean grantedextension) {
    this.grantedextension = grantedextension;
  }


  public ModAssignGetParticipant200Response groupid(Integer groupid) {
    this.groupid = groupid;
    return this;
  }

   /**
   * for group assignments this is the group id
   * @return groupid
  **/
  @javax.annotation.Nullable
  public Integer getGroupid() {
    return groupid;
  }

  public void setGroupid(Integer groupid) {
    this.groupid = groupid;
  }


  public ModAssignGetParticipant200Response groupname(String groupname) {
    this.groupname = groupname;
    return this;
  }

   /**
   * for group assignments this is the group name
   * @return groupname
  **/
  @javax.annotation.Nullable
  public String getGroupname() {
    return groupname;
  }

  public void setGroupname(String groupname) {
    this.groupname = groupname;
  }


  public ModAssignGetParticipant200Response id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * ID of the user
   * @return id
  **/
  @javax.annotation.Nonnull
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public ModAssignGetParticipant200Response requiregrading(Boolean requiregrading) {
    this.requiregrading = requiregrading;
    return this;
  }

   /**
   * is their submission waiting for grading
   * @return requiregrading
  **/
  @javax.annotation.Nonnull
  public Boolean getRequiregrading() {
    return requiregrading;
  }

  public void setRequiregrading(Boolean requiregrading) {
    this.requiregrading = requiregrading;
  }


  public ModAssignGetParticipant200Response submissionstatus(String submissionstatus) {
    this.submissionstatus = submissionstatus;
    return this;
  }

   /**
   * The submission status (new, draft, reopened or submitted).                 Empty when not submitted.
   * @return submissionstatus
  **/
  @javax.annotation.Nullable
  public String getSubmissionstatus() {
    return submissionstatus;
  }

  public void setSubmissionstatus(String submissionstatus) {
    this.submissionstatus = submissionstatus;
  }


  public ModAssignGetParticipant200Response submitted(Boolean submitted) {
    this.submitted = submitted;
    return this;
  }

   /**
   * have they submitted their assignment
   * @return submitted
  **/
  @javax.annotation.Nonnull
  public Boolean getSubmitted() {
    return submitted;
  }

  public void setSubmitted(Boolean submitted) {
    this.submitted = submitted;
  }


  public ModAssignGetParticipant200Response user(ModAssignGetParticipant200ResponseUser user) {
    this.user = user;
    return this;
  }

   /**
   * Get user
   * @return user
  **/
  @javax.annotation.Nullable
  public ModAssignGetParticipant200ResponseUser getUser() {
    return user;
  }

  public void setUser(ModAssignGetParticipant200ResponseUser user) {
    this.user = user;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModAssignGetParticipant200Response modAssignGetParticipant200Response = (ModAssignGetParticipant200Response) o;
    return Objects.equals(this.allowsubmissionsfromdate, modAssignGetParticipant200Response.allowsubmissionsfromdate) &&
        Objects.equals(this.blindmarking, modAssignGetParticipant200Response.blindmarking) &&
        Objects.equals(this.cutoffdate, modAssignGetParticipant200Response.cutoffdate) &&
        Objects.equals(this.duedate, modAssignGetParticipant200Response.duedate) &&
        Objects.equals(this.duedatestr, modAssignGetParticipant200Response.duedatestr) &&
        Objects.equals(this.fullname, modAssignGetParticipant200Response.fullname) &&
        Objects.equals(this.grantedextension, modAssignGetParticipant200Response.grantedextension) &&
        Objects.equals(this.groupid, modAssignGetParticipant200Response.groupid) &&
        Objects.equals(this.groupname, modAssignGetParticipant200Response.groupname) &&
        Objects.equals(this.id, modAssignGetParticipant200Response.id) &&
        Objects.equals(this.requiregrading, modAssignGetParticipant200Response.requiregrading) &&
        Objects.equals(this.submissionstatus, modAssignGetParticipant200Response.submissionstatus) &&
        Objects.equals(this.submitted, modAssignGetParticipant200Response.submitted) &&
        Objects.equals(this.user, modAssignGetParticipant200Response.user);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowsubmissionsfromdate, blindmarking, cutoffdate, duedate, duedatestr, fullname, grantedextension, groupid, groupname, id, requiregrading, submissionstatus, submitted, user);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModAssignGetParticipant200Response {\n");
    sb.append("    allowsubmissionsfromdate: ").append(toIndentedString(allowsubmissionsfromdate)).append("\n");
    sb.append("    blindmarking: ").append(toIndentedString(blindmarking)).append("\n");
    sb.append("    cutoffdate: ").append(toIndentedString(cutoffdate)).append("\n");
    sb.append("    duedate: ").append(toIndentedString(duedate)).append("\n");
    sb.append("    duedatestr: ").append(toIndentedString(duedatestr)).append("\n");
    sb.append("    fullname: ").append(toIndentedString(fullname)).append("\n");
    sb.append("    grantedextension: ").append(toIndentedString(grantedextension)).append("\n");
    sb.append("    groupid: ").append(toIndentedString(groupid)).append("\n");
    sb.append("    groupname: ").append(toIndentedString(groupname)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    requiregrading: ").append(toIndentedString(requiregrading)).append("\n");
    sb.append("    submissionstatus: ").append(toIndentedString(submissionstatus)).append("\n");
    sb.append("    submitted: ").append(toIndentedString(submitted)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowsubmissionsfromdate");
    openapiFields.add("blindmarking");
    openapiFields.add("cutoffdate");
    openapiFields.add("duedate");
    openapiFields.add("duedatestr");
    openapiFields.add("fullname");
    openapiFields.add("grantedextension");
    openapiFields.add("groupid");
    openapiFields.add("groupname");
    openapiFields.add("id");
    openapiFields.add("requiregrading");
    openapiFields.add("submissionstatus");
    openapiFields.add("submitted");
    openapiFields.add("user");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("allowsubmissionsfromdate");
    openapiRequiredFields.add("blindmarking");
    openapiRequiredFields.add("cutoffdate");
    openapiRequiredFields.add("duedate");
    openapiRequiredFields.add("duedatestr");
    openapiRequiredFields.add("fullname");
    openapiRequiredFields.add("grantedextension");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("requiregrading");
    openapiRequiredFields.add("submitted");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ModAssignGetParticipant200Response
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ModAssignGetParticipant200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModAssignGetParticipant200Response is not found in the empty JSON string", ModAssignGetParticipant200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ModAssignGetParticipant200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModAssignGetParticipant200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ModAssignGetParticipant200Response.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("duedatestr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `duedatestr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("duedatestr").toString()));
      }
      if (!jsonObj.get("fullname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fullname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fullname").toString()));
      }
      if ((jsonObj.get("groupname") != null && !jsonObj.get("groupname").isJsonNull()) && !jsonObj.get("groupname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `groupname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("groupname").toString()));
      }
      if ((jsonObj.get("submissionstatus") != null && !jsonObj.get("submissionstatus").isJsonNull()) && !jsonObj.get("submissionstatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `submissionstatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("submissionstatus").toString()));
      }
      // validate the optional field `user`
      if (jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) {
        ModAssignGetParticipant200ResponseUser.validateJsonElement(jsonObj.get("user"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModAssignGetParticipant200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModAssignGetParticipant200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModAssignGetParticipant200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModAssignGetParticipant200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<ModAssignGetParticipant200Response>() {
           @Override
           public void write(JsonWriter out, ModAssignGetParticipant200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModAssignGetParticipant200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ModAssignGetParticipant200Response given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ModAssignGetParticipant200Response
  * @throws IOException if the JSON string is invalid with respect to ModAssignGetParticipant200Response
  */
  public static ModAssignGetParticipant200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModAssignGetParticipant200Response.class);
  }

 /**
  * Convert an instance of ModAssignGetParticipant200Response to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

