/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.joshuapare.JSON;

/**
 * comment
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-18T20:58:28.689161-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class CoreCommentGetComments200ResponseCommentsInner {
  public static final String SERIALIZED_NAME_AVATAR = "avatar";
  @SerializedName(SERIALIZED_NAME_AVATAR)
  private String avatar = "null";

  public static final String SERIALIZED_NAME_CONTENT = "content";
  @SerializedName(SERIALIZED_NAME_CONTENT)
  private String content = "null";

  public static final String SERIALIZED_NAME_DELETE = "delete";
  @SerializedName(SERIALIZED_NAME_DELETE)
  private Boolean delete = null;

  public static final String SERIALIZED_NAME_FORMAT = "format";
  @SerializedName(SERIALIZED_NAME_FORMAT)
  private Integer format;

  public static final String SERIALIZED_NAME_FULLNAME = "fullname";
  @SerializedName(SERIALIZED_NAME_FULLNAME)
  private String fullname = "null";

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id = null;

  public static final String SERIALIZED_NAME_PROFILEURL = "profileurl";
  @SerializedName(SERIALIZED_NAME_PROFILEURL)
  private String profileurl = "null";

  public static final String SERIALIZED_NAME_STRFTIMEFORMAT = "strftimeformat";
  @SerializedName(SERIALIZED_NAME_STRFTIMEFORMAT)
  private String strftimeformat = "null";

  public static final String SERIALIZED_NAME_TIME = "time";
  @SerializedName(SERIALIZED_NAME_TIME)
  private String time = "null";

  public static final String SERIALIZED_NAME_TIMECREATED = "timecreated";
  @SerializedName(SERIALIZED_NAME_TIMECREATED)
  private Integer timecreated = null;

  public static final String SERIALIZED_NAME_USERID = "userid";
  @SerializedName(SERIALIZED_NAME_USERID)
  private Integer userid;

  public CoreCommentGetComments200ResponseCommentsInner() {
  }

  public CoreCommentGetComments200ResponseCommentsInner avatar(String avatar) {
    this.avatar = avatar;
    return this;
  }

   /**
   * HTML user picture
   * @return avatar
  **/
  @javax.annotation.Nullable
  public String getAvatar() {
    return avatar;
  }

  public void setAvatar(String avatar) {
    this.avatar = avatar;
  }


  public CoreCommentGetComments200ResponseCommentsInner content(String content) {
    this.content = content;
    return this;
  }

   /**
   * The content text formatted
   * @return content
  **/
  @javax.annotation.Nullable
  public String getContent() {
    return content;
  }

  public void setContent(String content) {
    this.content = content;
  }


  public CoreCommentGetComments200ResponseCommentsInner delete(Boolean delete) {
    this.delete = delete;
    return this;
  }

   /**
   * Permission to delete&#x3D;true/false
   * @return delete
  **/
  @javax.annotation.Nullable
  public Boolean getDelete() {
    return delete;
  }

  public void setDelete(Boolean delete) {
    this.delete = delete;
  }


  public CoreCommentGetComments200ResponseCommentsInner format(Integer format) {
    this.format = format;
    return this;
  }

   /**
   * content format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)
   * @return format
  **/
  @javax.annotation.Nullable
  public Integer getFormat() {
    return format;
  }

  public void setFormat(Integer format) {
    this.format = format;
  }


  public CoreCommentGetComments200ResponseCommentsInner fullname(String fullname) {
    this.fullname = fullname;
    return this;
  }

   /**
   * fullname
   * @return fullname
  **/
  @javax.annotation.Nullable
  public String getFullname() {
    return fullname;
  }

  public void setFullname(String fullname) {
    this.fullname = fullname;
  }


  public CoreCommentGetComments200ResponseCommentsInner id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * Comment ID
   * @return id
  **/
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public CoreCommentGetComments200ResponseCommentsInner profileurl(String profileurl) {
    this.profileurl = profileurl;
    return this;
  }

   /**
   * URL profile
   * @return profileurl
  **/
  @javax.annotation.Nullable
  public String getProfileurl() {
    return profileurl;
  }

  public void setProfileurl(String profileurl) {
    this.profileurl = profileurl;
  }


  public CoreCommentGetComments200ResponseCommentsInner strftimeformat(String strftimeformat) {
    this.strftimeformat = strftimeformat;
    return this;
  }

   /**
   * Time format
   * @return strftimeformat
  **/
  @javax.annotation.Nullable
  public String getStrftimeformat() {
    return strftimeformat;
  }

  public void setStrftimeformat(String strftimeformat) {
    this.strftimeformat = strftimeformat;
  }


  public CoreCommentGetComments200ResponseCommentsInner time(String time) {
    this.time = time;
    return this;
  }

   /**
   * Time in human format
   * @return time
  **/
  @javax.annotation.Nullable
  public String getTime() {
    return time;
  }

  public void setTime(String time) {
    this.time = time;
  }


  public CoreCommentGetComments200ResponseCommentsInner timecreated(Integer timecreated) {
    this.timecreated = timecreated;
    return this;
  }

   /**
   * Time created (timestamp)
   * @return timecreated
  **/
  @javax.annotation.Nullable
  public Integer getTimecreated() {
    return timecreated;
  }

  public void setTimecreated(Integer timecreated) {
    this.timecreated = timecreated;
  }


  public CoreCommentGetComments200ResponseCommentsInner userid(Integer userid) {
    this.userid = userid;
    return this;
  }

   /**
   * User ID
   * @return userid
  **/
  @javax.annotation.Nullable
  public Integer getUserid() {
    return userid;
  }

  public void setUserid(Integer userid) {
    this.userid = userid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CoreCommentGetComments200ResponseCommentsInner coreCommentGetComments200ResponseCommentsInner = (CoreCommentGetComments200ResponseCommentsInner) o;
    return Objects.equals(this.avatar, coreCommentGetComments200ResponseCommentsInner.avatar) &&
        Objects.equals(this.content, coreCommentGetComments200ResponseCommentsInner.content) &&
        Objects.equals(this.delete, coreCommentGetComments200ResponseCommentsInner.delete) &&
        Objects.equals(this.format, coreCommentGetComments200ResponseCommentsInner.format) &&
        Objects.equals(this.fullname, coreCommentGetComments200ResponseCommentsInner.fullname) &&
        Objects.equals(this.id, coreCommentGetComments200ResponseCommentsInner.id) &&
        Objects.equals(this.profileurl, coreCommentGetComments200ResponseCommentsInner.profileurl) &&
        Objects.equals(this.strftimeformat, coreCommentGetComments200ResponseCommentsInner.strftimeformat) &&
        Objects.equals(this.time, coreCommentGetComments200ResponseCommentsInner.time) &&
        Objects.equals(this.timecreated, coreCommentGetComments200ResponseCommentsInner.timecreated) &&
        Objects.equals(this.userid, coreCommentGetComments200ResponseCommentsInner.userid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(avatar, content, delete, format, fullname, id, profileurl, strftimeformat, time, timecreated, userid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CoreCommentGetComments200ResponseCommentsInner {\n");
    sb.append("    avatar: ").append(toIndentedString(avatar)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    delete: ").append(toIndentedString(delete)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    fullname: ").append(toIndentedString(fullname)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    profileurl: ").append(toIndentedString(profileurl)).append("\n");
    sb.append("    strftimeformat: ").append(toIndentedString(strftimeformat)).append("\n");
    sb.append("    time: ").append(toIndentedString(time)).append("\n");
    sb.append("    timecreated: ").append(toIndentedString(timecreated)).append("\n");
    sb.append("    userid: ").append(toIndentedString(userid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("avatar");
    openapiFields.add("content");
    openapiFields.add("delete");
    openapiFields.add("format");
    openapiFields.add("fullname");
    openapiFields.add("id");
    openapiFields.add("profileurl");
    openapiFields.add("strftimeformat");
    openapiFields.add("time");
    openapiFields.add("timecreated");
    openapiFields.add("userid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CoreCommentGetComments200ResponseCommentsInner
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CoreCommentGetComments200ResponseCommentsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CoreCommentGetComments200ResponseCommentsInner is not found in the empty JSON string", CoreCommentGetComments200ResponseCommentsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CoreCommentGetComments200ResponseCommentsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CoreCommentGetComments200ResponseCommentsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("avatar") != null && !jsonObj.get("avatar").isJsonNull()) && !jsonObj.get("avatar").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `avatar` to be a primitive type in the JSON string but got `%s`", jsonObj.get("avatar").toString()));
      }
      if ((jsonObj.get("content") != null && !jsonObj.get("content").isJsonNull()) && !jsonObj.get("content").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `content` to be a primitive type in the JSON string but got `%s`", jsonObj.get("content").toString()));
      }
      if ((jsonObj.get("fullname") != null && !jsonObj.get("fullname").isJsonNull()) && !jsonObj.get("fullname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fullname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fullname").toString()));
      }
      if ((jsonObj.get("profileurl") != null && !jsonObj.get("profileurl").isJsonNull()) && !jsonObj.get("profileurl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `profileurl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("profileurl").toString()));
      }
      if ((jsonObj.get("strftimeformat") != null && !jsonObj.get("strftimeformat").isJsonNull()) && !jsonObj.get("strftimeformat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `strftimeformat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("strftimeformat").toString()));
      }
      if ((jsonObj.get("time") != null && !jsonObj.get("time").isJsonNull()) && !jsonObj.get("time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("time").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CoreCommentGetComments200ResponseCommentsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CoreCommentGetComments200ResponseCommentsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CoreCommentGetComments200ResponseCommentsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CoreCommentGetComments200ResponseCommentsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<CoreCommentGetComments200ResponseCommentsInner>() {
           @Override
           public void write(JsonWriter out, CoreCommentGetComments200ResponseCommentsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CoreCommentGetComments200ResponseCommentsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CoreCommentGetComments200ResponseCommentsInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CoreCommentGetComments200ResponseCommentsInner
  * @throws IOException if the JSON string is invalid with respect to CoreCommentGetComments200ResponseCommentsInner
  */
  public static CoreCommentGetComments200ResponseCommentsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CoreCommentGetComments200ResponseCommentsInner.class);
  }

 /**
  * Convert an instance of CoreCommentGetComments200ResponseCommentsInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

