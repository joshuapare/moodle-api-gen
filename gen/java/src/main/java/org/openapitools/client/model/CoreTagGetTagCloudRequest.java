/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.joshuapare.JSON;

/**
 * CoreTagGetTagCloudRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-18T14:00:07.069642-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class CoreTagGetTagCloudRequest {
  public static final String SERIALIZED_NAME_CTX = "ctx";
  @SerializedName(SERIALIZED_NAME_CTX)
  private Integer ctx = 0;

  public static final String SERIALIZED_NAME_FROMCTX = "fromctx";
  @SerializedName(SERIALIZED_NAME_FROMCTX)
  private Integer fromctx = 0;

  public static final String SERIALIZED_NAME_ISSTANDARD = "isstandard";
  @SerializedName(SERIALIZED_NAME_ISSTANDARD)
  private Boolean isstandard = false;

  public static final String SERIALIZED_NAME_LIMIT = "limit";
  @SerializedName(SERIALIZED_NAME_LIMIT)
  private Integer limit = 150;

  public static final String SERIALIZED_NAME_REC = "rec";
  @SerializedName(SERIALIZED_NAME_REC)
  private Integer rec = 1;

  public static final String SERIALIZED_NAME_SEARCH = "search";
  @SerializedName(SERIALIZED_NAME_SEARCH)
  private String search = "";

  public static final String SERIALIZED_NAME_SORT = "sort";
  @SerializedName(SERIALIZED_NAME_SORT)
  private String sort = "name";

  public static final String SERIALIZED_NAME_TAGCOLLID = "tagcollid";
  @SerializedName(SERIALIZED_NAME_TAGCOLLID)
  private Integer tagcollid = 0;

  public CoreTagGetTagCloudRequest() {
  }

  public CoreTagGetTagCloudRequest ctx(Integer ctx) {
    this.ctx = ctx;
    return this;
  }

   /**
   * Only retrieve tag instances in this context.
   * @return ctx
  **/
  @javax.annotation.Nullable
  public Integer getCtx() {
    return ctx;
  }

  public void setCtx(Integer ctx) {
    this.ctx = ctx;
  }


  public CoreTagGetTagCloudRequest fromctx(Integer fromctx) {
    this.fromctx = fromctx;
    return this;
  }

   /**
   * Context id where this tag cloud is displayed.
   * @return fromctx
  **/
  @javax.annotation.Nullable
  public Integer getFromctx() {
    return fromctx;
  }

  public void setFromctx(Integer fromctx) {
    this.fromctx = fromctx;
  }


  public CoreTagGetTagCloudRequest isstandard(Boolean isstandard) {
    this.isstandard = isstandard;
    return this;
  }

   /**
   * Whether to return only standard tags.
   * @return isstandard
  **/
  @javax.annotation.Nullable
  public Boolean getIsstandard() {
    return isstandard;
  }

  public void setIsstandard(Boolean isstandard) {
    this.isstandard = isstandard;
  }


  public CoreTagGetTagCloudRequest limit(Integer limit) {
    this.limit = limit;
    return this;
  }

   /**
   * Maximum number of tags to retrieve.
   * @return limit
  **/
  @javax.annotation.Nullable
  public Integer getLimit() {
    return limit;
  }

  public void setLimit(Integer limit) {
    this.limit = limit;
  }


  public CoreTagGetTagCloudRequest rec(Integer rec) {
    this.rec = rec;
    return this;
  }

   /**
   * Retrieve tag instances in the $ctx context and it&#39;s children.
   * @return rec
  **/
  @javax.annotation.Nullable
  public Integer getRec() {
    return rec;
  }

  public void setRec(Integer rec) {
    this.rec = rec;
  }


  public CoreTagGetTagCloudRequest search(String search) {
    this.search = search;
    return this;
  }

   /**
   * Search string.
   * @return search
  **/
  @javax.annotation.Nullable
  public String getSearch() {
    return search;
  }

  public void setSearch(String search) {
    this.search = search;
  }


  public CoreTagGetTagCloudRequest sort(String sort) {
    this.sort = sort;
    return this;
  }

   /**
   * Sort order for display                     (id, name, rawname, count, flag, isstandard, tagcollid).
   * @return sort
  **/
  @javax.annotation.Nullable
  public String getSort() {
    return sort;
  }

  public void setSort(String sort) {
    this.sort = sort;
  }


  public CoreTagGetTagCloudRequest tagcollid(Integer tagcollid) {
    this.tagcollid = tagcollid;
    return this;
  }

   /**
   * Tag collection id.
   * @return tagcollid
  **/
  @javax.annotation.Nullable
  public Integer getTagcollid() {
    return tagcollid;
  }

  public void setTagcollid(Integer tagcollid) {
    this.tagcollid = tagcollid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CoreTagGetTagCloudRequest coreTagGetTagCloudRequest = (CoreTagGetTagCloudRequest) o;
    return Objects.equals(this.ctx, coreTagGetTagCloudRequest.ctx) &&
        Objects.equals(this.fromctx, coreTagGetTagCloudRequest.fromctx) &&
        Objects.equals(this.isstandard, coreTagGetTagCloudRequest.isstandard) &&
        Objects.equals(this.limit, coreTagGetTagCloudRequest.limit) &&
        Objects.equals(this.rec, coreTagGetTagCloudRequest.rec) &&
        Objects.equals(this.search, coreTagGetTagCloudRequest.search) &&
        Objects.equals(this.sort, coreTagGetTagCloudRequest.sort) &&
        Objects.equals(this.tagcollid, coreTagGetTagCloudRequest.tagcollid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ctx, fromctx, isstandard, limit, rec, search, sort, tagcollid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CoreTagGetTagCloudRequest {\n");
    sb.append("    ctx: ").append(toIndentedString(ctx)).append("\n");
    sb.append("    fromctx: ").append(toIndentedString(fromctx)).append("\n");
    sb.append("    isstandard: ").append(toIndentedString(isstandard)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    rec: ").append(toIndentedString(rec)).append("\n");
    sb.append("    search: ").append(toIndentedString(search)).append("\n");
    sb.append("    sort: ").append(toIndentedString(sort)).append("\n");
    sb.append("    tagcollid: ").append(toIndentedString(tagcollid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ctx");
    openapiFields.add("fromctx");
    openapiFields.add("isstandard");
    openapiFields.add("limit");
    openapiFields.add("rec");
    openapiFields.add("search");
    openapiFields.add("sort");
    openapiFields.add("tagcollid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CoreTagGetTagCloudRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CoreTagGetTagCloudRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CoreTagGetTagCloudRequest is not found in the empty JSON string", CoreTagGetTagCloudRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CoreTagGetTagCloudRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CoreTagGetTagCloudRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("search") != null && !jsonObj.get("search").isJsonNull()) && !jsonObj.get("search").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `search` to be a primitive type in the JSON string but got `%s`", jsonObj.get("search").toString()));
      }
      if ((jsonObj.get("sort") != null && !jsonObj.get("sort").isJsonNull()) && !jsonObj.get("sort").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sort` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sort").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CoreTagGetTagCloudRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CoreTagGetTagCloudRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CoreTagGetTagCloudRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CoreTagGetTagCloudRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CoreTagGetTagCloudRequest>() {
           @Override
           public void write(JsonWriter out, CoreTagGetTagCloudRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CoreTagGetTagCloudRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CoreTagGetTagCloudRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CoreTagGetTagCloudRequest
  * @throws IOException if the JSON string is invalid with respect to CoreTagGetTagCloudRequest
  */
  public static CoreTagGetTagCloudRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CoreTagGetTagCloudRequest.class);
  }

 /**
  * Convert an instance of CoreTagGetTagCloudRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

