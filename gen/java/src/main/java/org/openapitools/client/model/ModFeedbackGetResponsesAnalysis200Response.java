/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AuthEmailSignupUser200ResponseWarningsInner;
import org.openapitools.client.model.ModFeedbackGetResponsesAnalysis200ResponseAnonattemptsInner;
import org.openapitools.client.model.ModFeedbackGetResponsesAnalysis200ResponseAttemptsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.joshuapare.JSON;

/**
 * ModFeedbackGetResponsesAnalysis200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-18T14:00:07.069642-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class ModFeedbackGetResponsesAnalysis200Response {
  public static final String SERIALIZED_NAME_ANONATTEMPTS = "anonattempts";
  @SerializedName(SERIALIZED_NAME_ANONATTEMPTS)
  private List<ModFeedbackGetResponsesAnalysis200ResponseAnonattemptsInner> anonattempts = new ArrayList<>();

  public static final String SERIALIZED_NAME_ATTEMPTS = "attempts";
  @SerializedName(SERIALIZED_NAME_ATTEMPTS)
  private List<ModFeedbackGetResponsesAnalysis200ResponseAttemptsInner> attempts = new ArrayList<>();

  public static final String SERIALIZED_NAME_TOTALANONATTEMPTS = "totalanonattempts";
  @SerializedName(SERIALIZED_NAME_TOTALANONATTEMPTS)
  private Integer totalanonattempts = null;

  public static final String SERIALIZED_NAME_TOTALATTEMPTS = "totalattempts";
  @SerializedName(SERIALIZED_NAME_TOTALATTEMPTS)
  private Integer totalattempts = null;

  public static final String SERIALIZED_NAME_WARNINGS = "warnings";
  @SerializedName(SERIALIZED_NAME_WARNINGS)
  private List<AuthEmailSignupUser200ResponseWarningsInner> warnings = new ArrayList<>();

  public ModFeedbackGetResponsesAnalysis200Response() {
  }

  public ModFeedbackGetResponsesAnalysis200Response anonattempts(List<ModFeedbackGetResponsesAnalysis200ResponseAnonattemptsInner> anonattempts) {
    this.anonattempts = anonattempts;
    return this;
  }

  public ModFeedbackGetResponsesAnalysis200Response addAnonattemptsItem(ModFeedbackGetResponsesAnalysis200ResponseAnonattemptsInner anonattemptsItem) {
    if (this.anonattempts == null) {
      this.anonattempts = new ArrayList<>();
    }
    this.anonattempts.add(anonattemptsItem);
    return this;
  }

   /**
   * Get anonattempts
   * @return anonattempts
  **/
  @javax.annotation.Nonnull
  public List<ModFeedbackGetResponsesAnalysis200ResponseAnonattemptsInner> getAnonattempts() {
    return anonattempts;
  }

  public void setAnonattempts(List<ModFeedbackGetResponsesAnalysis200ResponseAnonattemptsInner> anonattempts) {
    this.anonattempts = anonattempts;
  }


  public ModFeedbackGetResponsesAnalysis200Response attempts(List<ModFeedbackGetResponsesAnalysis200ResponseAttemptsInner> attempts) {
    this.attempts = attempts;
    return this;
  }

  public ModFeedbackGetResponsesAnalysis200Response addAttemptsItem(ModFeedbackGetResponsesAnalysis200ResponseAttemptsInner attemptsItem) {
    if (this.attempts == null) {
      this.attempts = new ArrayList<>();
    }
    this.attempts.add(attemptsItem);
    return this;
  }

   /**
   * Get attempts
   * @return attempts
  **/
  @javax.annotation.Nonnull
  public List<ModFeedbackGetResponsesAnalysis200ResponseAttemptsInner> getAttempts() {
    return attempts;
  }

  public void setAttempts(List<ModFeedbackGetResponsesAnalysis200ResponseAttemptsInner> attempts) {
    this.attempts = attempts;
  }


  public ModFeedbackGetResponsesAnalysis200Response totalanonattempts(Integer totalanonattempts) {
    this.totalanonattempts = totalanonattempts;
    return this;
  }

   /**
   * Total anonymous responses count.
   * @return totalanonattempts
  **/
  @javax.annotation.Nonnull
  public Integer getTotalanonattempts() {
    return totalanonattempts;
  }

  public void setTotalanonattempts(Integer totalanonattempts) {
    this.totalanonattempts = totalanonattempts;
  }


  public ModFeedbackGetResponsesAnalysis200Response totalattempts(Integer totalattempts) {
    this.totalattempts = totalattempts;
    return this;
  }

   /**
   * Total responses count.
   * @return totalattempts
  **/
  @javax.annotation.Nonnull
  public Integer getTotalattempts() {
    return totalattempts;
  }

  public void setTotalattempts(Integer totalattempts) {
    this.totalattempts = totalattempts;
  }


  public ModFeedbackGetResponsesAnalysis200Response warnings(List<AuthEmailSignupUser200ResponseWarningsInner> warnings) {
    this.warnings = warnings;
    return this;
  }

  public ModFeedbackGetResponsesAnalysis200Response addWarningsItem(AuthEmailSignupUser200ResponseWarningsInner warningsItem) {
    if (this.warnings == null) {
      this.warnings = new ArrayList<>();
    }
    this.warnings.add(warningsItem);
    return this;
  }

   /**
   * Get warnings
   * @return warnings
  **/
  @javax.annotation.Nullable
  public List<AuthEmailSignupUser200ResponseWarningsInner> getWarnings() {
    return warnings;
  }

  public void setWarnings(List<AuthEmailSignupUser200ResponseWarningsInner> warnings) {
    this.warnings = warnings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModFeedbackGetResponsesAnalysis200Response modFeedbackGetResponsesAnalysis200Response = (ModFeedbackGetResponsesAnalysis200Response) o;
    return Objects.equals(this.anonattempts, modFeedbackGetResponsesAnalysis200Response.anonattempts) &&
        Objects.equals(this.attempts, modFeedbackGetResponsesAnalysis200Response.attempts) &&
        Objects.equals(this.totalanonattempts, modFeedbackGetResponsesAnalysis200Response.totalanonattempts) &&
        Objects.equals(this.totalattempts, modFeedbackGetResponsesAnalysis200Response.totalattempts) &&
        Objects.equals(this.warnings, modFeedbackGetResponsesAnalysis200Response.warnings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(anonattempts, attempts, totalanonattempts, totalattempts, warnings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModFeedbackGetResponsesAnalysis200Response {\n");
    sb.append("    anonattempts: ").append(toIndentedString(anonattempts)).append("\n");
    sb.append("    attempts: ").append(toIndentedString(attempts)).append("\n");
    sb.append("    totalanonattempts: ").append(toIndentedString(totalanonattempts)).append("\n");
    sb.append("    totalattempts: ").append(toIndentedString(totalattempts)).append("\n");
    sb.append("    warnings: ").append(toIndentedString(warnings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("anonattempts");
    openapiFields.add("attempts");
    openapiFields.add("totalanonattempts");
    openapiFields.add("totalattempts");
    openapiFields.add("warnings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("anonattempts");
    openapiRequiredFields.add("attempts");
    openapiRequiredFields.add("totalanonattempts");
    openapiRequiredFields.add("totalattempts");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ModFeedbackGetResponsesAnalysis200Response
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ModFeedbackGetResponsesAnalysis200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModFeedbackGetResponsesAnalysis200Response is not found in the empty JSON string", ModFeedbackGetResponsesAnalysis200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ModFeedbackGetResponsesAnalysis200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModFeedbackGetResponsesAnalysis200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ModFeedbackGetResponsesAnalysis200Response.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("anonattempts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `anonattempts` to be an array in the JSON string but got `%s`", jsonObj.get("anonattempts").toString()));
      }

      JsonArray jsonArrayanonattempts = jsonObj.getAsJsonArray("anonattempts");
      // validate the required field `anonattempts` (array)
      for (int i = 0; i < jsonArrayanonattempts.size(); i++) {
        ModFeedbackGetResponsesAnalysis200ResponseAnonattemptsInner.validateJsonElement(jsonArrayanonattempts.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("attempts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `attempts` to be an array in the JSON string but got `%s`", jsonObj.get("attempts").toString()));
      }

      JsonArray jsonArrayattempts = jsonObj.getAsJsonArray("attempts");
      // validate the required field `attempts` (array)
      for (int i = 0; i < jsonArrayattempts.size(); i++) {
        ModFeedbackGetResponsesAnalysis200ResponseAttemptsInner.validateJsonElement(jsonArrayattempts.get(i));
      };
      if (jsonObj.get("warnings") != null && !jsonObj.get("warnings").isJsonNull()) {
        JsonArray jsonArraywarnings = jsonObj.getAsJsonArray("warnings");
        if (jsonArraywarnings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("warnings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `warnings` to be an array in the JSON string but got `%s`", jsonObj.get("warnings").toString()));
          }

          // validate the optional field `warnings` (array)
          for (int i = 0; i < jsonArraywarnings.size(); i++) {
            AuthEmailSignupUser200ResponseWarningsInner.validateJsonElement(jsonArraywarnings.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModFeedbackGetResponsesAnalysis200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModFeedbackGetResponsesAnalysis200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModFeedbackGetResponsesAnalysis200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModFeedbackGetResponsesAnalysis200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<ModFeedbackGetResponsesAnalysis200Response>() {
           @Override
           public void write(JsonWriter out, ModFeedbackGetResponsesAnalysis200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModFeedbackGetResponsesAnalysis200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ModFeedbackGetResponsesAnalysis200Response given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ModFeedbackGetResponsesAnalysis200Response
  * @throws IOException if the JSON string is invalid with respect to ModFeedbackGetResponsesAnalysis200Response
  */
  public static ModFeedbackGetResponsesAnalysis200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModFeedbackGetResponsesAnalysis200Response.class);
  }

 /**
  * Convert an instance of ModFeedbackGetResponsesAnalysis200Response to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

