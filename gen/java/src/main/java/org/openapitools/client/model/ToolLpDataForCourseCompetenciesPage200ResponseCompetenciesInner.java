/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CoreCompetencyCreateCompetency200Response;
import org.openapitools.client.model.ToolLpDataForCompetencySummary200ResponseComppath;
import org.openapitools.client.model.ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerCoursecompetency;
import org.openapitools.client.model.ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerCoursemodulesInner;
import org.openapitools.client.model.ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerPlansInner;
import org.openapitools.client.model.ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerRuleoutcomeoptionsInner;
import org.openapitools.client.model.ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerUsercompetencycourse;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.joshuapare.JSON;

/**
 * ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-18T20:58:28.689161-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInner {
  public static final String SERIALIZED_NAME_COMPETENCY = "competency";
  @SerializedName(SERIALIZED_NAME_COMPETENCY)
  private CoreCompetencyCreateCompetency200Response competency;

  public static final String SERIALIZED_NAME_COMPPATH = "comppath";
  @SerializedName(SERIALIZED_NAME_COMPPATH)
  private ToolLpDataForCompetencySummary200ResponseComppath comppath;

  public static final String SERIALIZED_NAME_COURSECOMPETENCY = "coursecompetency";
  @SerializedName(SERIALIZED_NAME_COURSECOMPETENCY)
  private ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerCoursecompetency coursecompetency;

  public static final String SERIALIZED_NAME_COURSEMODULES = "coursemodules";
  @SerializedName(SERIALIZED_NAME_COURSEMODULES)
  private List<ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerCoursemodulesInner> coursemodules = new ArrayList<>();

  public static final String SERIALIZED_NAME_PLANS = "plans";
  @SerializedName(SERIALIZED_NAME_PLANS)
  private List<ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerPlansInner> plans = new ArrayList<>();

  public static final String SERIALIZED_NAME_RULEOUTCOMEOPTIONS = "ruleoutcomeoptions";
  @SerializedName(SERIALIZED_NAME_RULEOUTCOMEOPTIONS)
  private List<ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerRuleoutcomeoptionsInner> ruleoutcomeoptions = new ArrayList<>();

  public static final String SERIALIZED_NAME_USERCOMPETENCYCOURSE = "usercompetencycourse";
  @SerializedName(SERIALIZED_NAME_USERCOMPETENCYCOURSE)
  private ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerUsercompetencycourse usercompetencycourse;

  public ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInner() {
  }

  public ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInner competency(CoreCompetencyCreateCompetency200Response competency) {
    this.competency = competency;
    return this;
  }

   /**
   * Get competency
   * @return competency
  **/
  @javax.annotation.Nullable
  public CoreCompetencyCreateCompetency200Response getCompetency() {
    return competency;
  }

  public void setCompetency(CoreCompetencyCreateCompetency200Response competency) {
    this.competency = competency;
  }


  public ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInner comppath(ToolLpDataForCompetencySummary200ResponseComppath comppath) {
    this.comppath = comppath;
    return this;
  }

   /**
   * Get comppath
   * @return comppath
  **/
  @javax.annotation.Nullable
  public ToolLpDataForCompetencySummary200ResponseComppath getComppath() {
    return comppath;
  }

  public void setComppath(ToolLpDataForCompetencySummary200ResponseComppath comppath) {
    this.comppath = comppath;
  }


  public ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInner coursecompetency(ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerCoursecompetency coursecompetency) {
    this.coursecompetency = coursecompetency;
    return this;
  }

   /**
   * Get coursecompetency
   * @return coursecompetency
  **/
  @javax.annotation.Nullable
  public ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerCoursecompetency getCoursecompetency() {
    return coursecompetency;
  }

  public void setCoursecompetency(ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerCoursecompetency coursecompetency) {
    this.coursecompetency = coursecompetency;
  }


  public ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInner coursemodules(List<ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerCoursemodulesInner> coursemodules) {
    this.coursemodules = coursemodules;
    return this;
  }

  public ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInner addCoursemodulesItem(ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerCoursemodulesInner coursemodulesItem) {
    if (this.coursemodules == null) {
      this.coursemodules = new ArrayList<>();
    }
    this.coursemodules.add(coursemodulesItem);
    return this;
  }

   /**
   * Get coursemodules
   * @return coursemodules
  **/
  @javax.annotation.Nullable
  public List<ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerCoursemodulesInner> getCoursemodules() {
    return coursemodules;
  }

  public void setCoursemodules(List<ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerCoursemodulesInner> coursemodules) {
    this.coursemodules = coursemodules;
  }


  public ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInner plans(List<ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerPlansInner> plans) {
    this.plans = plans;
    return this;
  }

  public ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInner addPlansItem(ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerPlansInner plansItem) {
    if (this.plans == null) {
      this.plans = new ArrayList<>();
    }
    this.plans.add(plansItem);
    return this;
  }

   /**
   * Get plans
   * @return plans
  **/
  @javax.annotation.Nullable
  public List<ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerPlansInner> getPlans() {
    return plans;
  }

  public void setPlans(List<ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerPlansInner> plans) {
    this.plans = plans;
  }


  public ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInner ruleoutcomeoptions(List<ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerRuleoutcomeoptionsInner> ruleoutcomeoptions) {
    this.ruleoutcomeoptions = ruleoutcomeoptions;
    return this;
  }

  public ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInner addRuleoutcomeoptionsItem(ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerRuleoutcomeoptionsInner ruleoutcomeoptionsItem) {
    if (this.ruleoutcomeoptions == null) {
      this.ruleoutcomeoptions = new ArrayList<>();
    }
    this.ruleoutcomeoptions.add(ruleoutcomeoptionsItem);
    return this;
  }

   /**
   * Get ruleoutcomeoptions
   * @return ruleoutcomeoptions
  **/
  @javax.annotation.Nullable
  public List<ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerRuleoutcomeoptionsInner> getRuleoutcomeoptions() {
    return ruleoutcomeoptions;
  }

  public void setRuleoutcomeoptions(List<ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerRuleoutcomeoptionsInner> ruleoutcomeoptions) {
    this.ruleoutcomeoptions = ruleoutcomeoptions;
  }


  public ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInner usercompetencycourse(ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerUsercompetencycourse usercompetencycourse) {
    this.usercompetencycourse = usercompetencycourse;
    return this;
  }

   /**
   * Get usercompetencycourse
   * @return usercompetencycourse
  **/
  @javax.annotation.Nullable
  public ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerUsercompetencycourse getUsercompetencycourse() {
    return usercompetencycourse;
  }

  public void setUsercompetencycourse(ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerUsercompetencycourse usercompetencycourse) {
    this.usercompetencycourse = usercompetencycourse;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInner toolLpDataForCourseCompetenciesPage200ResponseCompetenciesInner = (ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInner) o;
    return Objects.equals(this.competency, toolLpDataForCourseCompetenciesPage200ResponseCompetenciesInner.competency) &&
        Objects.equals(this.comppath, toolLpDataForCourseCompetenciesPage200ResponseCompetenciesInner.comppath) &&
        Objects.equals(this.coursecompetency, toolLpDataForCourseCompetenciesPage200ResponseCompetenciesInner.coursecompetency) &&
        Objects.equals(this.coursemodules, toolLpDataForCourseCompetenciesPage200ResponseCompetenciesInner.coursemodules) &&
        Objects.equals(this.plans, toolLpDataForCourseCompetenciesPage200ResponseCompetenciesInner.plans) &&
        Objects.equals(this.ruleoutcomeoptions, toolLpDataForCourseCompetenciesPage200ResponseCompetenciesInner.ruleoutcomeoptions) &&
        Objects.equals(this.usercompetencycourse, toolLpDataForCourseCompetenciesPage200ResponseCompetenciesInner.usercompetencycourse);
  }

  @Override
  public int hashCode() {
    return Objects.hash(competency, comppath, coursecompetency, coursemodules, plans, ruleoutcomeoptions, usercompetencycourse);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInner {\n");
    sb.append("    competency: ").append(toIndentedString(competency)).append("\n");
    sb.append("    comppath: ").append(toIndentedString(comppath)).append("\n");
    sb.append("    coursecompetency: ").append(toIndentedString(coursecompetency)).append("\n");
    sb.append("    coursemodules: ").append(toIndentedString(coursemodules)).append("\n");
    sb.append("    plans: ").append(toIndentedString(plans)).append("\n");
    sb.append("    ruleoutcomeoptions: ").append(toIndentedString(ruleoutcomeoptions)).append("\n");
    sb.append("    usercompetencycourse: ").append(toIndentedString(usercompetencycourse)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("competency");
    openapiFields.add("comppath");
    openapiFields.add("coursecompetency");
    openapiFields.add("coursemodules");
    openapiFields.add("plans");
    openapiFields.add("ruleoutcomeoptions");
    openapiFields.add("usercompetencycourse");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInner
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInner is not found in the empty JSON string", ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `competency`
      if (jsonObj.get("competency") != null && !jsonObj.get("competency").isJsonNull()) {
        CoreCompetencyCreateCompetency200Response.validateJsonElement(jsonObj.get("competency"));
      }
      // validate the optional field `comppath`
      if (jsonObj.get("comppath") != null && !jsonObj.get("comppath").isJsonNull()) {
        ToolLpDataForCompetencySummary200ResponseComppath.validateJsonElement(jsonObj.get("comppath"));
      }
      // validate the optional field `coursecompetency`
      if (jsonObj.get("coursecompetency") != null && !jsonObj.get("coursecompetency").isJsonNull()) {
        ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerCoursecompetency.validateJsonElement(jsonObj.get("coursecompetency"));
      }
      if (jsonObj.get("coursemodules") != null && !jsonObj.get("coursemodules").isJsonNull()) {
        JsonArray jsonArraycoursemodules = jsonObj.getAsJsonArray("coursemodules");
        if (jsonArraycoursemodules != null) {
          // ensure the json data is an array
          if (!jsonObj.get("coursemodules").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `coursemodules` to be an array in the JSON string but got `%s`", jsonObj.get("coursemodules").toString()));
          }

          // validate the optional field `coursemodules` (array)
          for (int i = 0; i < jsonArraycoursemodules.size(); i++) {
            ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerCoursemodulesInner.validateJsonElement(jsonArraycoursemodules.get(i));
          };
        }
      }
      if (jsonObj.get("plans") != null && !jsonObj.get("plans").isJsonNull()) {
        JsonArray jsonArrayplans = jsonObj.getAsJsonArray("plans");
        if (jsonArrayplans != null) {
          // ensure the json data is an array
          if (!jsonObj.get("plans").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `plans` to be an array in the JSON string but got `%s`", jsonObj.get("plans").toString()));
          }

          // validate the optional field `plans` (array)
          for (int i = 0; i < jsonArrayplans.size(); i++) {
            ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerPlansInner.validateJsonElement(jsonArrayplans.get(i));
          };
        }
      }
      if (jsonObj.get("ruleoutcomeoptions") != null && !jsonObj.get("ruleoutcomeoptions").isJsonNull()) {
        JsonArray jsonArrayruleoutcomeoptions = jsonObj.getAsJsonArray("ruleoutcomeoptions");
        if (jsonArrayruleoutcomeoptions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ruleoutcomeoptions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ruleoutcomeoptions` to be an array in the JSON string but got `%s`", jsonObj.get("ruleoutcomeoptions").toString()));
          }

          // validate the optional field `ruleoutcomeoptions` (array)
          for (int i = 0; i < jsonArrayruleoutcomeoptions.size(); i++) {
            ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerRuleoutcomeoptionsInner.validateJsonElement(jsonArrayruleoutcomeoptions.get(i));
          };
        }
      }
      // validate the optional field `usercompetencycourse`
      if (jsonObj.get("usercompetencycourse") != null && !jsonObj.get("usercompetencycourse").isJsonNull()) {
        ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerUsercompetencycourse.validateJsonElement(jsonObj.get("usercompetencycourse"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInner>() {
           @Override
           public void write(JsonWriter out, ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInner
  * @throws IOException if the JSON string is invalid with respect to ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInner
  */
  public static ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInner.class);
  }

 /**
  * Convert an instance of ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

