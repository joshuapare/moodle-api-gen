/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.joshuapare.JSON;

/**
 * ModQuizGetAttemptReview200ResponseAttempt
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-18T20:58:28.689161-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class ModQuizGetAttemptReview200ResponseAttempt {
  public static final String SERIALIZED_NAME_ATTEMPT = "attempt";
  @SerializedName(SERIALIZED_NAME_ATTEMPT)
  private Integer attempt;

  public static final String SERIALIZED_NAME_CURRENTPAGE = "currentpage";
  @SerializedName(SERIALIZED_NAME_CURRENTPAGE)
  private Integer currentpage;

  public static final String SERIALIZED_NAME_GRADEDNOTIFICATIONSENTTIME = "gradednotificationsenttime";
  @SerializedName(SERIALIZED_NAME_GRADEDNOTIFICATIONSENTTIME)
  private Integer gradednotificationsenttime;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_LAYOUT = "layout";
  @SerializedName(SERIALIZED_NAME_LAYOUT)
  private String layout;

  public static final String SERIALIZED_NAME_PREVIEW = "preview";
  @SerializedName(SERIALIZED_NAME_PREVIEW)
  private Integer preview;

  public static final String SERIALIZED_NAME_QUIZ = "quiz";
  @SerializedName(SERIALIZED_NAME_QUIZ)
  private Integer quiz;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_SUMGRADES = "sumgrades";
  @SerializedName(SERIALIZED_NAME_SUMGRADES)
  private BigDecimal sumgrades;

  public static final String SERIALIZED_NAME_TIMECHECKSTATE = "timecheckstate";
  @SerializedName(SERIALIZED_NAME_TIMECHECKSTATE)
  private Integer timecheckstate;

  public static final String SERIALIZED_NAME_TIMEFINISH = "timefinish";
  @SerializedName(SERIALIZED_NAME_TIMEFINISH)
  private Integer timefinish;

  public static final String SERIALIZED_NAME_TIMEMODIFIED = "timemodified";
  @SerializedName(SERIALIZED_NAME_TIMEMODIFIED)
  private Integer timemodified;

  public static final String SERIALIZED_NAME_TIMEMODIFIEDOFFLINE = "timemodifiedoffline";
  @SerializedName(SERIALIZED_NAME_TIMEMODIFIEDOFFLINE)
  private Integer timemodifiedoffline;

  public static final String SERIALIZED_NAME_TIMESTART = "timestart";
  @SerializedName(SERIALIZED_NAME_TIMESTART)
  private Integer timestart;

  public static final String SERIALIZED_NAME_UNIQUEID = "uniqueid";
  @SerializedName(SERIALIZED_NAME_UNIQUEID)
  private Integer uniqueid;

  public static final String SERIALIZED_NAME_USERID = "userid";
  @SerializedName(SERIALIZED_NAME_USERID)
  private Integer userid;

  public ModQuizGetAttemptReview200ResponseAttempt() {
  }

  public ModQuizGetAttemptReview200ResponseAttempt attempt(Integer attempt) {
    this.attempt = attempt;
    return this;
  }

   /**
   * Sequentially numbers this students attempts at this quiz.
   * @return attempt
  **/
  @javax.annotation.Nullable
  public Integer getAttempt() {
    return attempt;
  }

  public void setAttempt(Integer attempt) {
    this.attempt = attempt;
  }


  public ModQuizGetAttemptReview200ResponseAttempt currentpage(Integer currentpage) {
    this.currentpage = currentpage;
    return this;
  }

   /**
   * Attempt current page.
   * @return currentpage
  **/
  @javax.annotation.Nullable
  public Integer getCurrentpage() {
    return currentpage;
  }

  public void setCurrentpage(Integer currentpage) {
    this.currentpage = currentpage;
  }


  public ModQuizGetAttemptReview200ResponseAttempt gradednotificationsenttime(Integer gradednotificationsenttime) {
    this.gradednotificationsenttime = gradednotificationsenttime;
    return this;
  }

   /**
   * Time when the student was notified that manual grading of their attempt was complete.
   * @return gradednotificationsenttime
  **/
  @javax.annotation.Nullable
  public Integer getGradednotificationsenttime() {
    return gradednotificationsenttime;
  }

  public void setGradednotificationsenttime(Integer gradednotificationsenttime) {
    this.gradednotificationsenttime = gradednotificationsenttime;
  }


  public ModQuizGetAttemptReview200ResponseAttempt id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * Attempt id.
   * @return id
  **/
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public ModQuizGetAttemptReview200ResponseAttempt layout(String layout) {
    this.layout = layout;
    return this;
  }

   /**
   * Attempt layout.
   * @return layout
  **/
  @javax.annotation.Nullable
  public String getLayout() {
    return layout;
  }

  public void setLayout(String layout) {
    this.layout = layout;
  }


  public ModQuizGetAttemptReview200ResponseAttempt preview(Integer preview) {
    this.preview = preview;
    return this;
  }

   /**
   * Whether is a preview attempt or not.
   * @return preview
  **/
  @javax.annotation.Nullable
  public Integer getPreview() {
    return preview;
  }

  public void setPreview(Integer preview) {
    this.preview = preview;
  }


  public ModQuizGetAttemptReview200ResponseAttempt quiz(Integer quiz) {
    this.quiz = quiz;
    return this;
  }

   /**
   * Foreign key reference to the quiz that was attempted.
   * @return quiz
  **/
  @javax.annotation.Nullable
  public Integer getQuiz() {
    return quiz;
  }

  public void setQuiz(Integer quiz) {
    this.quiz = quiz;
  }


  public ModQuizGetAttemptReview200ResponseAttempt state(String state) {
    this.state = state;
    return this;
  }

   /**
   * The current state of the attempts. &#39;inprogress&#39;,                                                 &#39;overdue&#39;, &#39;finished&#39; or &#39;abandoned&#39;.
   * @return state
  **/
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }


  public ModQuizGetAttemptReview200ResponseAttempt sumgrades(BigDecimal sumgrades) {
    this.sumgrades = sumgrades;
    return this;
  }

   /**
   * Total marks for this attempt.
   * @return sumgrades
  **/
  @javax.annotation.Nullable
  public BigDecimal getSumgrades() {
    return sumgrades;
  }

  public void setSumgrades(BigDecimal sumgrades) {
    this.sumgrades = sumgrades;
  }


  public ModQuizGetAttemptReview200ResponseAttempt timecheckstate(Integer timecheckstate) {
    this.timecheckstate = timecheckstate;
    return this;
  }

   /**
   * Next time quiz cron should check attempt for                                                         state changes.  NULL means never check.
   * @return timecheckstate
  **/
  @javax.annotation.Nullable
  public Integer getTimecheckstate() {
    return timecheckstate;
  }

  public void setTimecheckstate(Integer timecheckstate) {
    this.timecheckstate = timecheckstate;
  }


  public ModQuizGetAttemptReview200ResponseAttempt timefinish(Integer timefinish) {
    this.timefinish = timefinish;
    return this;
  }

   /**
   * Time when the attempt was submitted.                                                     0 if the attempt has not been submitted yet.
   * @return timefinish
  **/
  @javax.annotation.Nullable
  public Integer getTimefinish() {
    return timefinish;
  }

  public void setTimefinish(Integer timefinish) {
    this.timefinish = timefinish;
  }


  public ModQuizGetAttemptReview200ResponseAttempt timemodified(Integer timemodified) {
    this.timemodified = timemodified;
    return this;
  }

   /**
   * Last modified time.
   * @return timemodified
  **/
  @javax.annotation.Nullable
  public Integer getTimemodified() {
    return timemodified;
  }

  public void setTimemodified(Integer timemodified) {
    this.timemodified = timemodified;
  }


  public ModQuizGetAttemptReview200ResponseAttempt timemodifiedoffline(Integer timemodifiedoffline) {
    this.timemodifiedoffline = timemodifiedoffline;
    return this;
  }

   /**
   * Last modified time via webservices.
   * @return timemodifiedoffline
  **/
  @javax.annotation.Nullable
  public Integer getTimemodifiedoffline() {
    return timemodifiedoffline;
  }

  public void setTimemodifiedoffline(Integer timemodifiedoffline) {
    this.timemodifiedoffline = timemodifiedoffline;
  }


  public ModQuizGetAttemptReview200ResponseAttempt timestart(Integer timestart) {
    this.timestart = timestart;
    return this;
  }

   /**
   * Time when the attempt was started.
   * @return timestart
  **/
  @javax.annotation.Nullable
  public Integer getTimestart() {
    return timestart;
  }

  public void setTimestart(Integer timestart) {
    this.timestart = timestart;
  }


  public ModQuizGetAttemptReview200ResponseAttempt uniqueid(Integer uniqueid) {
    this.uniqueid = uniqueid;
    return this;
  }

   /**
   * Foreign key reference to the question_usage that holds the                                                     details of the the question_attempts that make up this quiz                                                     attempt.
   * @return uniqueid
  **/
  @javax.annotation.Nullable
  public Integer getUniqueid() {
    return uniqueid;
  }

  public void setUniqueid(Integer uniqueid) {
    this.uniqueid = uniqueid;
  }


  public ModQuizGetAttemptReview200ResponseAttempt userid(Integer userid) {
    this.userid = userid;
    return this;
  }

   /**
   * Foreign key reference to the user whose attempt this is.
   * @return userid
  **/
  @javax.annotation.Nullable
  public Integer getUserid() {
    return userid;
  }

  public void setUserid(Integer userid) {
    this.userid = userid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModQuizGetAttemptReview200ResponseAttempt modQuizGetAttemptReview200ResponseAttempt = (ModQuizGetAttemptReview200ResponseAttempt) o;
    return Objects.equals(this.attempt, modQuizGetAttemptReview200ResponseAttempt.attempt) &&
        Objects.equals(this.currentpage, modQuizGetAttemptReview200ResponseAttempt.currentpage) &&
        Objects.equals(this.gradednotificationsenttime, modQuizGetAttemptReview200ResponseAttempt.gradednotificationsenttime) &&
        Objects.equals(this.id, modQuizGetAttemptReview200ResponseAttempt.id) &&
        Objects.equals(this.layout, modQuizGetAttemptReview200ResponseAttempt.layout) &&
        Objects.equals(this.preview, modQuizGetAttemptReview200ResponseAttempt.preview) &&
        Objects.equals(this.quiz, modQuizGetAttemptReview200ResponseAttempt.quiz) &&
        Objects.equals(this.state, modQuizGetAttemptReview200ResponseAttempt.state) &&
        Objects.equals(this.sumgrades, modQuizGetAttemptReview200ResponseAttempt.sumgrades) &&
        Objects.equals(this.timecheckstate, modQuizGetAttemptReview200ResponseAttempt.timecheckstate) &&
        Objects.equals(this.timefinish, modQuizGetAttemptReview200ResponseAttempt.timefinish) &&
        Objects.equals(this.timemodified, modQuizGetAttemptReview200ResponseAttempt.timemodified) &&
        Objects.equals(this.timemodifiedoffline, modQuizGetAttemptReview200ResponseAttempt.timemodifiedoffline) &&
        Objects.equals(this.timestart, modQuizGetAttemptReview200ResponseAttempt.timestart) &&
        Objects.equals(this.uniqueid, modQuizGetAttemptReview200ResponseAttempt.uniqueid) &&
        Objects.equals(this.userid, modQuizGetAttemptReview200ResponseAttempt.userid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attempt, currentpage, gradednotificationsenttime, id, layout, preview, quiz, state, sumgrades, timecheckstate, timefinish, timemodified, timemodifiedoffline, timestart, uniqueid, userid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModQuizGetAttemptReview200ResponseAttempt {\n");
    sb.append("    attempt: ").append(toIndentedString(attempt)).append("\n");
    sb.append("    currentpage: ").append(toIndentedString(currentpage)).append("\n");
    sb.append("    gradednotificationsenttime: ").append(toIndentedString(gradednotificationsenttime)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    layout: ").append(toIndentedString(layout)).append("\n");
    sb.append("    preview: ").append(toIndentedString(preview)).append("\n");
    sb.append("    quiz: ").append(toIndentedString(quiz)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    sumgrades: ").append(toIndentedString(sumgrades)).append("\n");
    sb.append("    timecheckstate: ").append(toIndentedString(timecheckstate)).append("\n");
    sb.append("    timefinish: ").append(toIndentedString(timefinish)).append("\n");
    sb.append("    timemodified: ").append(toIndentedString(timemodified)).append("\n");
    sb.append("    timemodifiedoffline: ").append(toIndentedString(timemodifiedoffline)).append("\n");
    sb.append("    timestart: ").append(toIndentedString(timestart)).append("\n");
    sb.append("    uniqueid: ").append(toIndentedString(uniqueid)).append("\n");
    sb.append("    userid: ").append(toIndentedString(userid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attempt");
    openapiFields.add("currentpage");
    openapiFields.add("gradednotificationsenttime");
    openapiFields.add("id");
    openapiFields.add("layout");
    openapiFields.add("preview");
    openapiFields.add("quiz");
    openapiFields.add("state");
    openapiFields.add("sumgrades");
    openapiFields.add("timecheckstate");
    openapiFields.add("timefinish");
    openapiFields.add("timemodified");
    openapiFields.add("timemodifiedoffline");
    openapiFields.add("timestart");
    openapiFields.add("uniqueid");
    openapiFields.add("userid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ModQuizGetAttemptReview200ResponseAttempt
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ModQuizGetAttemptReview200ResponseAttempt.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModQuizGetAttemptReview200ResponseAttempt is not found in the empty JSON string", ModQuizGetAttemptReview200ResponseAttempt.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ModQuizGetAttemptReview200ResponseAttempt.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModQuizGetAttemptReview200ResponseAttempt` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("layout") != null && !jsonObj.get("layout").isJsonNull()) && !jsonObj.get("layout").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `layout` to be a primitive type in the JSON string but got `%s`", jsonObj.get("layout").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModQuizGetAttemptReview200ResponseAttempt.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModQuizGetAttemptReview200ResponseAttempt' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModQuizGetAttemptReview200ResponseAttempt> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModQuizGetAttemptReview200ResponseAttempt.class));

       return (TypeAdapter<T>) new TypeAdapter<ModQuizGetAttemptReview200ResponseAttempt>() {
           @Override
           public void write(JsonWriter out, ModQuizGetAttemptReview200ResponseAttempt value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModQuizGetAttemptReview200ResponseAttempt read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ModQuizGetAttemptReview200ResponseAttempt given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ModQuizGetAttemptReview200ResponseAttempt
  * @throws IOException if the JSON string is invalid with respect to ModQuizGetAttemptReview200ResponseAttempt
  */
  public static ModQuizGetAttemptReview200ResponseAttempt fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModQuizGetAttemptReview200ResponseAttempt.class);
  }

 /**
  * Convert an instance of ModQuizGetAttemptReview200ResponseAttempt to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

