/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CoreCourseGetCourseModule200ResponseCmAdvancedgradingInner;
import org.openapitools.client.model.CoreCourseGetCourseModule200ResponseCmOutcomesInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.joshuapare.JSON;

/**
 * CoreCourseGetCourseModule200ResponseCm
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-18T14:00:07.069642-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class CoreCourseGetCourseModule200ResponseCm {
  public static final String SERIALIZED_NAME_ADDED = "added";
  @SerializedName(SERIALIZED_NAME_ADDED)
  private Integer added = null;

  public static final String SERIALIZED_NAME_ADVANCEDGRADING = "advancedgrading";
  @SerializedName(SERIALIZED_NAME_ADVANCEDGRADING)
  private List<CoreCourseGetCourseModule200ResponseCmAdvancedgradingInner> advancedgrading = new ArrayList<>();

  public static final String SERIALIZED_NAME_AVAILABILITY = "availability";
  @SerializedName(SERIALIZED_NAME_AVAILABILITY)
  private String availability = "null";

  public static final String SERIALIZED_NAME_COMPLETION = "completion";
  @SerializedName(SERIALIZED_NAME_COMPLETION)
  private Integer completion = null;

  public static final String SERIALIZED_NAME_COMPLETIONEXPECTED = "completionexpected";
  @SerializedName(SERIALIZED_NAME_COMPLETIONEXPECTED)
  private Integer completionexpected = null;

  public static final String SERIALIZED_NAME_COMPLETIONGRADEITEMNUMBER = "completiongradeitemnumber";
  @SerializedName(SERIALIZED_NAME_COMPLETIONGRADEITEMNUMBER)
  private Integer completiongradeitemnumber = null;

  public static final String SERIALIZED_NAME_COMPLETIONPASSGRADE = "completionpassgrade";
  @SerializedName(SERIALIZED_NAME_COMPLETIONPASSGRADE)
  private Integer completionpassgrade = null;

  public static final String SERIALIZED_NAME_COMPLETIONVIEW = "completionview";
  @SerializedName(SERIALIZED_NAME_COMPLETIONVIEW)
  private Integer completionview = null;

  public static final String SERIALIZED_NAME_COURSE = "course";
  @SerializedName(SERIALIZED_NAME_COURSE)
  private Integer course;

  public static final String SERIALIZED_NAME_DOWNLOADCONTENT = "downloadcontent";
  @SerializedName(SERIALIZED_NAME_DOWNLOADCONTENT)
  private Integer downloadcontent = null;

  public static final String SERIALIZED_NAME_GRADE = "grade";
  @SerializedName(SERIALIZED_NAME_GRADE)
  private BigDecimal grade = new BigDecimal("null");

  public static final String SERIALIZED_NAME_GRADECAT = "gradecat";
  @SerializedName(SERIALIZED_NAME_GRADECAT)
  private Integer gradecat = null;

  public static final String SERIALIZED_NAME_GRADEPASS = "gradepass";
  @SerializedName(SERIALIZED_NAME_GRADEPASS)
  private String gradepass = "null";

  public static final String SERIALIZED_NAME_GROUPINGID = "groupingid";
  @SerializedName(SERIALIZED_NAME_GROUPINGID)
  private Integer groupingid = null;

  public static final String SERIALIZED_NAME_GROUPMODE = "groupmode";
  @SerializedName(SERIALIZED_NAME_GROUPMODE)
  private Integer groupmode = null;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_IDNUMBER = "idnumber";
  @SerializedName(SERIALIZED_NAME_IDNUMBER)
  private String idnumber = "null";

  public static final String SERIALIZED_NAME_INDENT = "indent";
  @SerializedName(SERIALIZED_NAME_INDENT)
  private Integer indent = null;

  public static final String SERIALIZED_NAME_INSTANCE = "instance";
  @SerializedName(SERIALIZED_NAME_INSTANCE)
  private Integer instance = null;

  public static final String SERIALIZED_NAME_MODNAME = "modname";
  @SerializedName(SERIALIZED_NAME_MODNAME)
  private String modname = "null";

  public static final String SERIALIZED_NAME_MODULE = "module";
  @SerializedName(SERIALIZED_NAME_MODULE)
  private Integer module = null;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name = "null";

  public static final String SERIALIZED_NAME_OUTCOMES = "outcomes";
  @SerializedName(SERIALIZED_NAME_OUTCOMES)
  private List<CoreCourseGetCourseModule200ResponseCmOutcomesInner> outcomes = new ArrayList<>();

  public static final String SERIALIZED_NAME_SCALE = "scale";
  @SerializedName(SERIALIZED_NAME_SCALE)
  private String scale = "null";

  public static final String SERIALIZED_NAME_SCORE = "score";
  @SerializedName(SERIALIZED_NAME_SCORE)
  private Integer score = null;

  public static final String SERIALIZED_NAME_SECTION = "section";
  @SerializedName(SERIALIZED_NAME_SECTION)
  private Integer section = null;

  public static final String SERIALIZED_NAME_SECTIONNUM = "sectionnum";
  @SerializedName(SERIALIZED_NAME_SECTIONNUM)
  private Integer sectionnum = null;

  public static final String SERIALIZED_NAME_SHOWDESCRIPTION = "showdescription";
  @SerializedName(SERIALIZED_NAME_SHOWDESCRIPTION)
  private Integer showdescription = null;

  public static final String SERIALIZED_NAME_VISIBLE = "visible";
  @SerializedName(SERIALIZED_NAME_VISIBLE)
  private Integer visible = null;

  public static final String SERIALIZED_NAME_VISIBLEOLD = "visibleold";
  @SerializedName(SERIALIZED_NAME_VISIBLEOLD)
  private Integer visibleold = null;

  public static final String SERIALIZED_NAME_VISIBLEONCOURSEPAGE = "visibleoncoursepage";
  @SerializedName(SERIALIZED_NAME_VISIBLEONCOURSEPAGE)
  private Integer visibleoncoursepage = null;

  public CoreCourseGetCourseModule200ResponseCm() {
  }

  public CoreCourseGetCourseModule200ResponseCm added(Integer added) {
    this.added = added;
    return this;
  }

   /**
   * Time added
   * @return added
  **/
  @javax.annotation.Nullable
  public Integer getAdded() {
    return added;
  }

  public void setAdded(Integer added) {
    this.added = added;
  }


  public CoreCourseGetCourseModule200ResponseCm advancedgrading(List<CoreCourseGetCourseModule200ResponseCmAdvancedgradingInner> advancedgrading) {
    this.advancedgrading = advancedgrading;
    return this;
  }

  public CoreCourseGetCourseModule200ResponseCm addAdvancedgradingItem(CoreCourseGetCourseModule200ResponseCmAdvancedgradingInner advancedgradingItem) {
    if (this.advancedgrading == null) {
      this.advancedgrading = new ArrayList<>();
    }
    this.advancedgrading.add(advancedgradingItem);
    return this;
  }

   /**
   * Get advancedgrading
   * @return advancedgrading
  **/
  @javax.annotation.Nullable
  public List<CoreCourseGetCourseModule200ResponseCmAdvancedgradingInner> getAdvancedgrading() {
    return advancedgrading;
  }

  public void setAdvancedgrading(List<CoreCourseGetCourseModule200ResponseCmAdvancedgradingInner> advancedgrading) {
    this.advancedgrading = advancedgrading;
  }


  public CoreCourseGetCourseModule200ResponseCm availability(String availability) {
    this.availability = availability;
    return this;
  }

   /**
   * Availability settings
   * @return availability
  **/
  @javax.annotation.Nullable
  public String getAvailability() {
    return availability;
  }

  public void setAvailability(String availability) {
    this.availability = availability;
  }


  public CoreCourseGetCourseModule200ResponseCm completion(Integer completion) {
    this.completion = completion;
    return this;
  }

   /**
   * If completion is enabled
   * @return completion
  **/
  @javax.annotation.Nonnull
  public Integer getCompletion() {
    return completion;
  }

  public void setCompletion(Integer completion) {
    this.completion = completion;
  }


  public CoreCourseGetCourseModule200ResponseCm completionexpected(Integer completionexpected) {
    this.completionexpected = completionexpected;
    return this;
  }

   /**
   * Completion time expected
   * @return completionexpected
  **/
  @javax.annotation.Nullable
  public Integer getCompletionexpected() {
    return completionexpected;
  }

  public void setCompletionexpected(Integer completionexpected) {
    this.completionexpected = completionexpected;
  }


  public CoreCourseGetCourseModule200ResponseCm completiongradeitemnumber(Integer completiongradeitemnumber) {
    this.completiongradeitemnumber = completiongradeitemnumber;
    return this;
  }

   /**
   * Completion grade item
   * @return completiongradeitemnumber
  **/
  @javax.annotation.Nullable
  public Integer getCompletiongradeitemnumber() {
    return completiongradeitemnumber;
  }

  public void setCompletiongradeitemnumber(Integer completiongradeitemnumber) {
    this.completiongradeitemnumber = completiongradeitemnumber;
  }


  public CoreCourseGetCourseModule200ResponseCm completionpassgrade(Integer completionpassgrade) {
    this.completionpassgrade = completionpassgrade;
    return this;
  }

   /**
   * Completion pass grade setting
   * @return completionpassgrade
  **/
  @javax.annotation.Nullable
  public Integer getCompletionpassgrade() {
    return completionpassgrade;
  }

  public void setCompletionpassgrade(Integer completionpassgrade) {
    this.completionpassgrade = completionpassgrade;
  }


  public CoreCourseGetCourseModule200ResponseCm completionview(Integer completionview) {
    this.completionview = completionview;
    return this;
  }

   /**
   * Completion view setting
   * @return completionview
  **/
  @javax.annotation.Nullable
  public Integer getCompletionview() {
    return completionview;
  }

  public void setCompletionview(Integer completionview) {
    this.completionview = completionview;
  }


  public CoreCourseGetCourseModule200ResponseCm course(Integer course) {
    this.course = course;
    return this;
  }

   /**
   * The course id
   * @return course
  **/
  @javax.annotation.Nonnull
  public Integer getCourse() {
    return course;
  }

  public void setCourse(Integer course) {
    this.course = course;
  }


  public CoreCourseGetCourseModule200ResponseCm downloadcontent(Integer downloadcontent) {
    this.downloadcontent = downloadcontent;
    return this;
  }

   /**
   * The download content value
   * @return downloadcontent
  **/
  @javax.annotation.Nullable
  public Integer getDownloadcontent() {
    return downloadcontent;
  }

  public void setDownloadcontent(Integer downloadcontent) {
    this.downloadcontent = downloadcontent;
  }


  public CoreCourseGetCourseModule200ResponseCm grade(BigDecimal grade) {
    this.grade = grade;
    return this;
  }

   /**
   * Grade (max value or scale id)
   * @return grade
  **/
  @javax.annotation.Nullable
  public BigDecimal getGrade() {
    return grade;
  }

  public void setGrade(BigDecimal grade) {
    this.grade = grade;
  }


  public CoreCourseGetCourseModule200ResponseCm gradecat(Integer gradecat) {
    this.gradecat = gradecat;
    return this;
  }

   /**
   * Grade category
   * @return gradecat
  **/
  @javax.annotation.Nullable
  public Integer getGradecat() {
    return gradecat;
  }

  public void setGradecat(Integer gradecat) {
    this.gradecat = gradecat;
  }


  public CoreCourseGetCourseModule200ResponseCm gradepass(String gradepass) {
    this.gradepass = gradepass;
    return this;
  }

   /**
   * Grade to pass (float)
   * @return gradepass
  **/
  @javax.annotation.Nullable
  public String getGradepass() {
    return gradepass;
  }

  public void setGradepass(String gradepass) {
    this.gradepass = gradepass;
  }


  public CoreCourseGetCourseModule200ResponseCm groupingid(Integer groupingid) {
    this.groupingid = groupingid;
    return this;
  }

   /**
   * Grouping id
   * @return groupingid
  **/
  @javax.annotation.Nonnull
  public Integer getGroupingid() {
    return groupingid;
  }

  public void setGroupingid(Integer groupingid) {
    this.groupingid = groupingid;
  }


  public CoreCourseGetCourseModule200ResponseCm groupmode(Integer groupmode) {
    this.groupmode = groupmode;
    return this;
  }

   /**
   * Group mode
   * @return groupmode
  **/
  @javax.annotation.Nonnull
  public Integer getGroupmode() {
    return groupmode;
  }

  public void setGroupmode(Integer groupmode) {
    this.groupmode = groupmode;
  }


  public CoreCourseGetCourseModule200ResponseCm id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * The course module id
   * @return id
  **/
  @javax.annotation.Nonnull
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public CoreCourseGetCourseModule200ResponseCm idnumber(String idnumber) {
    this.idnumber = idnumber;
    return this;
  }

   /**
   * Module id number
   * @return idnumber
  **/
  @javax.annotation.Nullable
  public String getIdnumber() {
    return idnumber;
  }

  public void setIdnumber(String idnumber) {
    this.idnumber = idnumber;
  }


  public CoreCourseGetCourseModule200ResponseCm indent(Integer indent) {
    this.indent = indent;
    return this;
  }

   /**
   * Indentation
   * @return indent
  **/
  @javax.annotation.Nullable
  public Integer getIndent() {
    return indent;
  }

  public void setIndent(Integer indent) {
    this.indent = indent;
  }


  public CoreCourseGetCourseModule200ResponseCm instance(Integer instance) {
    this.instance = instance;
    return this;
  }

   /**
   * The activity instance id
   * @return instance
  **/
  @javax.annotation.Nonnull
  public Integer getInstance() {
    return instance;
  }

  public void setInstance(Integer instance) {
    this.instance = instance;
  }


  public CoreCourseGetCourseModule200ResponseCm modname(String modname) {
    this.modname = modname;
    return this;
  }

   /**
   * The module component name (forum, assign, etc..)
   * @return modname
  **/
  @javax.annotation.Nonnull
  public String getModname() {
    return modname;
  }

  public void setModname(String modname) {
    this.modname = modname;
  }


  public CoreCourseGetCourseModule200ResponseCm module(Integer module) {
    this.module = module;
    return this;
  }

   /**
   * The module type id
   * @return module
  **/
  @javax.annotation.Nonnull
  public Integer getModule() {
    return module;
  }

  public void setModule(Integer module) {
    this.module = module;
  }


  public CoreCourseGetCourseModule200ResponseCm name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The activity name
   * @return name
  **/
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CoreCourseGetCourseModule200ResponseCm outcomes(List<CoreCourseGetCourseModule200ResponseCmOutcomesInner> outcomes) {
    this.outcomes = outcomes;
    return this;
  }

  public CoreCourseGetCourseModule200ResponseCm addOutcomesItem(CoreCourseGetCourseModule200ResponseCmOutcomesInner outcomesItem) {
    if (this.outcomes == null) {
      this.outcomes = new ArrayList<>();
    }
    this.outcomes.add(outcomesItem);
    return this;
  }

   /**
   * Get outcomes
   * @return outcomes
  **/
  @javax.annotation.Nullable
  public List<CoreCourseGetCourseModule200ResponseCmOutcomesInner> getOutcomes() {
    return outcomes;
  }

  public void setOutcomes(List<CoreCourseGetCourseModule200ResponseCmOutcomesInner> outcomes) {
    this.outcomes = outcomes;
  }


  public CoreCourseGetCourseModule200ResponseCm scale(String scale) {
    this.scale = scale;
    return this;
  }

   /**
   * Scale items (if used)
   * @return scale
  **/
  @javax.annotation.Nullable
  public String getScale() {
    return scale;
  }

  public void setScale(String scale) {
    this.scale = scale;
  }


  public CoreCourseGetCourseModule200ResponseCm score(Integer score) {
    this.score = score;
    return this;
  }

   /**
   * Score
   * @return score
  **/
  @javax.annotation.Nullable
  public Integer getScore() {
    return score;
  }

  public void setScore(Integer score) {
    this.score = score;
  }


  public CoreCourseGetCourseModule200ResponseCm section(Integer section) {
    this.section = section;
    return this;
  }

   /**
   * The module section id
   * @return section
  **/
  @javax.annotation.Nonnull
  public Integer getSection() {
    return section;
  }

  public void setSection(Integer section) {
    this.section = section;
  }


  public CoreCourseGetCourseModule200ResponseCm sectionnum(Integer sectionnum) {
    this.sectionnum = sectionnum;
    return this;
  }

   /**
   * The module section number
   * @return sectionnum
  **/
  @javax.annotation.Nonnull
  public Integer getSectionnum() {
    return sectionnum;
  }

  public void setSectionnum(Integer sectionnum) {
    this.sectionnum = sectionnum;
  }


  public CoreCourseGetCourseModule200ResponseCm showdescription(Integer showdescription) {
    this.showdescription = showdescription;
    return this;
  }

   /**
   * If the description is showed
   * @return showdescription
  **/
  @javax.annotation.Nullable
  public Integer getShowdescription() {
    return showdescription;
  }

  public void setShowdescription(Integer showdescription) {
    this.showdescription = showdescription;
  }


  public CoreCourseGetCourseModule200ResponseCm visible(Integer visible) {
    this.visible = visible;
    return this;
  }

   /**
   * If visible
   * @return visible
  **/
  @javax.annotation.Nullable
  public Integer getVisible() {
    return visible;
  }

  public void setVisible(Integer visible) {
    this.visible = visible;
  }


  public CoreCourseGetCourseModule200ResponseCm visibleold(Integer visibleold) {
    this.visibleold = visibleold;
    return this;
  }

   /**
   * Visible old
   * @return visibleold
  **/
  @javax.annotation.Nullable
  public Integer getVisibleold() {
    return visibleold;
  }

  public void setVisibleold(Integer visibleold) {
    this.visibleold = visibleold;
  }


  public CoreCourseGetCourseModule200ResponseCm visibleoncoursepage(Integer visibleoncoursepage) {
    this.visibleoncoursepage = visibleoncoursepage;
    return this;
  }

   /**
   * If visible on course page
   * @return visibleoncoursepage
  **/
  @javax.annotation.Nullable
  public Integer getVisibleoncoursepage() {
    return visibleoncoursepage;
  }

  public void setVisibleoncoursepage(Integer visibleoncoursepage) {
    this.visibleoncoursepage = visibleoncoursepage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CoreCourseGetCourseModule200ResponseCm coreCourseGetCourseModule200ResponseCm = (CoreCourseGetCourseModule200ResponseCm) o;
    return Objects.equals(this.added, coreCourseGetCourseModule200ResponseCm.added) &&
        Objects.equals(this.advancedgrading, coreCourseGetCourseModule200ResponseCm.advancedgrading) &&
        Objects.equals(this.availability, coreCourseGetCourseModule200ResponseCm.availability) &&
        Objects.equals(this.completion, coreCourseGetCourseModule200ResponseCm.completion) &&
        Objects.equals(this.completionexpected, coreCourseGetCourseModule200ResponseCm.completionexpected) &&
        Objects.equals(this.completiongradeitemnumber, coreCourseGetCourseModule200ResponseCm.completiongradeitemnumber) &&
        Objects.equals(this.completionpassgrade, coreCourseGetCourseModule200ResponseCm.completionpassgrade) &&
        Objects.equals(this.completionview, coreCourseGetCourseModule200ResponseCm.completionview) &&
        Objects.equals(this.course, coreCourseGetCourseModule200ResponseCm.course) &&
        Objects.equals(this.downloadcontent, coreCourseGetCourseModule200ResponseCm.downloadcontent) &&
        Objects.equals(this.grade, coreCourseGetCourseModule200ResponseCm.grade) &&
        Objects.equals(this.gradecat, coreCourseGetCourseModule200ResponseCm.gradecat) &&
        Objects.equals(this.gradepass, coreCourseGetCourseModule200ResponseCm.gradepass) &&
        Objects.equals(this.groupingid, coreCourseGetCourseModule200ResponseCm.groupingid) &&
        Objects.equals(this.groupmode, coreCourseGetCourseModule200ResponseCm.groupmode) &&
        Objects.equals(this.id, coreCourseGetCourseModule200ResponseCm.id) &&
        Objects.equals(this.idnumber, coreCourseGetCourseModule200ResponseCm.idnumber) &&
        Objects.equals(this.indent, coreCourseGetCourseModule200ResponseCm.indent) &&
        Objects.equals(this.instance, coreCourseGetCourseModule200ResponseCm.instance) &&
        Objects.equals(this.modname, coreCourseGetCourseModule200ResponseCm.modname) &&
        Objects.equals(this.module, coreCourseGetCourseModule200ResponseCm.module) &&
        Objects.equals(this.name, coreCourseGetCourseModule200ResponseCm.name) &&
        Objects.equals(this.outcomes, coreCourseGetCourseModule200ResponseCm.outcomes) &&
        Objects.equals(this.scale, coreCourseGetCourseModule200ResponseCm.scale) &&
        Objects.equals(this.score, coreCourseGetCourseModule200ResponseCm.score) &&
        Objects.equals(this.section, coreCourseGetCourseModule200ResponseCm.section) &&
        Objects.equals(this.sectionnum, coreCourseGetCourseModule200ResponseCm.sectionnum) &&
        Objects.equals(this.showdescription, coreCourseGetCourseModule200ResponseCm.showdescription) &&
        Objects.equals(this.visible, coreCourseGetCourseModule200ResponseCm.visible) &&
        Objects.equals(this.visibleold, coreCourseGetCourseModule200ResponseCm.visibleold) &&
        Objects.equals(this.visibleoncoursepage, coreCourseGetCourseModule200ResponseCm.visibleoncoursepage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(added, advancedgrading, availability, completion, completionexpected, completiongradeitemnumber, completionpassgrade, completionview, course, downloadcontent, grade, gradecat, gradepass, groupingid, groupmode, id, idnumber, indent, instance, modname, module, name, outcomes, scale, score, section, sectionnum, showdescription, visible, visibleold, visibleoncoursepage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CoreCourseGetCourseModule200ResponseCm {\n");
    sb.append("    added: ").append(toIndentedString(added)).append("\n");
    sb.append("    advancedgrading: ").append(toIndentedString(advancedgrading)).append("\n");
    sb.append("    availability: ").append(toIndentedString(availability)).append("\n");
    sb.append("    completion: ").append(toIndentedString(completion)).append("\n");
    sb.append("    completionexpected: ").append(toIndentedString(completionexpected)).append("\n");
    sb.append("    completiongradeitemnumber: ").append(toIndentedString(completiongradeitemnumber)).append("\n");
    sb.append("    completionpassgrade: ").append(toIndentedString(completionpassgrade)).append("\n");
    sb.append("    completionview: ").append(toIndentedString(completionview)).append("\n");
    sb.append("    course: ").append(toIndentedString(course)).append("\n");
    sb.append("    downloadcontent: ").append(toIndentedString(downloadcontent)).append("\n");
    sb.append("    grade: ").append(toIndentedString(grade)).append("\n");
    sb.append("    gradecat: ").append(toIndentedString(gradecat)).append("\n");
    sb.append("    gradepass: ").append(toIndentedString(gradepass)).append("\n");
    sb.append("    groupingid: ").append(toIndentedString(groupingid)).append("\n");
    sb.append("    groupmode: ").append(toIndentedString(groupmode)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    idnumber: ").append(toIndentedString(idnumber)).append("\n");
    sb.append("    indent: ").append(toIndentedString(indent)).append("\n");
    sb.append("    instance: ").append(toIndentedString(instance)).append("\n");
    sb.append("    modname: ").append(toIndentedString(modname)).append("\n");
    sb.append("    module: ").append(toIndentedString(module)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    outcomes: ").append(toIndentedString(outcomes)).append("\n");
    sb.append("    scale: ").append(toIndentedString(scale)).append("\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("    section: ").append(toIndentedString(section)).append("\n");
    sb.append("    sectionnum: ").append(toIndentedString(sectionnum)).append("\n");
    sb.append("    showdescription: ").append(toIndentedString(showdescription)).append("\n");
    sb.append("    visible: ").append(toIndentedString(visible)).append("\n");
    sb.append("    visibleold: ").append(toIndentedString(visibleold)).append("\n");
    sb.append("    visibleoncoursepage: ").append(toIndentedString(visibleoncoursepage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("added");
    openapiFields.add("advancedgrading");
    openapiFields.add("availability");
    openapiFields.add("completion");
    openapiFields.add("completionexpected");
    openapiFields.add("completiongradeitemnumber");
    openapiFields.add("completionpassgrade");
    openapiFields.add("completionview");
    openapiFields.add("course");
    openapiFields.add("downloadcontent");
    openapiFields.add("grade");
    openapiFields.add("gradecat");
    openapiFields.add("gradepass");
    openapiFields.add("groupingid");
    openapiFields.add("groupmode");
    openapiFields.add("id");
    openapiFields.add("idnumber");
    openapiFields.add("indent");
    openapiFields.add("instance");
    openapiFields.add("modname");
    openapiFields.add("module");
    openapiFields.add("name");
    openapiFields.add("outcomes");
    openapiFields.add("scale");
    openapiFields.add("score");
    openapiFields.add("section");
    openapiFields.add("sectionnum");
    openapiFields.add("showdescription");
    openapiFields.add("visible");
    openapiFields.add("visibleold");
    openapiFields.add("visibleoncoursepage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("completion");
    openapiRequiredFields.add("course");
    openapiRequiredFields.add("groupingid");
    openapiRequiredFields.add("groupmode");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("instance");
    openapiRequiredFields.add("modname");
    openapiRequiredFields.add("module");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("section");
    openapiRequiredFields.add("sectionnum");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CoreCourseGetCourseModule200ResponseCm
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CoreCourseGetCourseModule200ResponseCm.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CoreCourseGetCourseModule200ResponseCm is not found in the empty JSON string", CoreCourseGetCourseModule200ResponseCm.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CoreCourseGetCourseModule200ResponseCm.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CoreCourseGetCourseModule200ResponseCm` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CoreCourseGetCourseModule200ResponseCm.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("advancedgrading") != null && !jsonObj.get("advancedgrading").isJsonNull()) {
        JsonArray jsonArrayadvancedgrading = jsonObj.getAsJsonArray("advancedgrading");
        if (jsonArrayadvancedgrading != null) {
          // ensure the json data is an array
          if (!jsonObj.get("advancedgrading").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `advancedgrading` to be an array in the JSON string but got `%s`", jsonObj.get("advancedgrading").toString()));
          }

          // validate the optional field `advancedgrading` (array)
          for (int i = 0; i < jsonArrayadvancedgrading.size(); i++) {
            CoreCourseGetCourseModule200ResponseCmAdvancedgradingInner.validateJsonElement(jsonArrayadvancedgrading.get(i));
          };
        }
      }
      if ((jsonObj.get("availability") != null && !jsonObj.get("availability").isJsonNull()) && !jsonObj.get("availability").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `availability` to be a primitive type in the JSON string but got `%s`", jsonObj.get("availability").toString()));
      }
      if ((jsonObj.get("gradepass") != null && !jsonObj.get("gradepass").isJsonNull()) && !jsonObj.get("gradepass").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gradepass` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gradepass").toString()));
      }
      if ((jsonObj.get("idnumber") != null && !jsonObj.get("idnumber").isJsonNull()) && !jsonObj.get("idnumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `idnumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("idnumber").toString()));
      }
      if (!jsonObj.get("modname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modname").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("outcomes") != null && !jsonObj.get("outcomes").isJsonNull()) {
        JsonArray jsonArrayoutcomes = jsonObj.getAsJsonArray("outcomes");
        if (jsonArrayoutcomes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("outcomes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `outcomes` to be an array in the JSON string but got `%s`", jsonObj.get("outcomes").toString()));
          }

          // validate the optional field `outcomes` (array)
          for (int i = 0; i < jsonArrayoutcomes.size(); i++) {
            CoreCourseGetCourseModule200ResponseCmOutcomesInner.validateJsonElement(jsonArrayoutcomes.get(i));
          };
        }
      }
      if ((jsonObj.get("scale") != null && !jsonObj.get("scale").isJsonNull()) && !jsonObj.get("scale").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scale` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scale").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CoreCourseGetCourseModule200ResponseCm.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CoreCourseGetCourseModule200ResponseCm' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CoreCourseGetCourseModule200ResponseCm> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CoreCourseGetCourseModule200ResponseCm.class));

       return (TypeAdapter<T>) new TypeAdapter<CoreCourseGetCourseModule200ResponseCm>() {
           @Override
           public void write(JsonWriter out, CoreCourseGetCourseModule200ResponseCm value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CoreCourseGetCourseModule200ResponseCm read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CoreCourseGetCourseModule200ResponseCm given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CoreCourseGetCourseModule200ResponseCm
  * @throws IOException if the JSON string is invalid with respect to CoreCourseGetCourseModule200ResponseCm
  */
  public static CoreCourseGetCourseModule200ResponseCm fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CoreCourseGetCourseModule200ResponseCm.class);
  }

 /**
  * Convert an instance of CoreCourseGetCourseModule200ResponseCm to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

