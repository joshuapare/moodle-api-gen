/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CoreCompetencyCreateCompetency200Response;
import org.openapitools.client.model.CoreCompetencyDuplicateCompetencyFramework200Response;
import org.openapitools.client.model.CoreCompetencyReadUserEvidence200ResponseCompetenciesInner;
import org.openapitools.client.model.CoreCourseGetEnrolledCoursesByTimelineClassification200ResponseCoursesInner;
import org.openapitools.client.model.ToolLpDataForCompetencySummary200ResponseComppath;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.joshuapare.JSON;

/**
 * ToolLpDataForTemplateCompetenciesPage200ResponseCompetenciesInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-18T20:58:28.689161-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class ToolLpDataForTemplateCompetenciesPage200ResponseCompetenciesInner {
  public static final String SERIALIZED_NAME_COMPETENCY = "competency";
  @SerializedName(SERIALIZED_NAME_COMPETENCY)
  private CoreCompetencyCreateCompetency200Response competency;

  public static final String SERIALIZED_NAME_COMPPATH = "comppath";
  @SerializedName(SERIALIZED_NAME_COMPPATH)
  private ToolLpDataForCompetencySummary200ResponseComppath comppath;

  public static final String SERIALIZED_NAME_FRAMEWORK = "framework";
  @SerializedName(SERIALIZED_NAME_FRAMEWORK)
  private CoreCompetencyDuplicateCompetencyFramework200Response framework;

  public static final String SERIALIZED_NAME_HASCOURSES = "hascourses";
  @SerializedName(SERIALIZED_NAME_HASCOURSES)
  private Boolean hascourses;

  public static final String SERIALIZED_NAME_HASRELATEDCOMPETENCIES = "hasrelatedcompetencies";
  @SerializedName(SERIALIZED_NAME_HASRELATEDCOMPETENCIES)
  private Boolean hasrelatedcompetencies;

  public static final String SERIALIZED_NAME_LINKEDCOURSES = "linkedcourses";
  @SerializedName(SERIALIZED_NAME_LINKEDCOURSES)
  private List<CoreCourseGetEnrolledCoursesByTimelineClassification200ResponseCoursesInner> linkedcourses = new ArrayList<>();

  public static final String SERIALIZED_NAME_PLUGINBASEURL = "pluginbaseurl";
  @SerializedName(SERIALIZED_NAME_PLUGINBASEURL)
  private String pluginbaseurl;

  public static final String SERIALIZED_NAME_RELATEDCOMPETENCIES = "relatedcompetencies";
  @SerializedName(SERIALIZED_NAME_RELATEDCOMPETENCIES)
  private List<CoreCompetencyReadUserEvidence200ResponseCompetenciesInner> relatedcompetencies = new ArrayList<>();

  public static final String SERIALIZED_NAME_SCALECONFIGURATION = "scaleconfiguration";
  @SerializedName(SERIALIZED_NAME_SCALECONFIGURATION)
  private String scaleconfiguration;

  public static final String SERIALIZED_NAME_SCALEID = "scaleid";
  @SerializedName(SERIALIZED_NAME_SCALEID)
  private Integer scaleid;

  public static final String SERIALIZED_NAME_TAXONOMYTERM = "taxonomyterm";
  @SerializedName(SERIALIZED_NAME_TAXONOMYTERM)
  private String taxonomyterm;

  public ToolLpDataForTemplateCompetenciesPage200ResponseCompetenciesInner() {
  }

  public ToolLpDataForTemplateCompetenciesPage200ResponseCompetenciesInner competency(CoreCompetencyCreateCompetency200Response competency) {
    this.competency = competency;
    return this;
  }

   /**
   * Get competency
   * @return competency
  **/
  @javax.annotation.Nullable
  public CoreCompetencyCreateCompetency200Response getCompetency() {
    return competency;
  }

  public void setCompetency(CoreCompetencyCreateCompetency200Response competency) {
    this.competency = competency;
  }


  public ToolLpDataForTemplateCompetenciesPage200ResponseCompetenciesInner comppath(ToolLpDataForCompetencySummary200ResponseComppath comppath) {
    this.comppath = comppath;
    return this;
  }

   /**
   * Get comppath
   * @return comppath
  **/
  @javax.annotation.Nullable
  public ToolLpDataForCompetencySummary200ResponseComppath getComppath() {
    return comppath;
  }

  public void setComppath(ToolLpDataForCompetencySummary200ResponseComppath comppath) {
    this.comppath = comppath;
  }


  public ToolLpDataForTemplateCompetenciesPage200ResponseCompetenciesInner framework(CoreCompetencyDuplicateCompetencyFramework200Response framework) {
    this.framework = framework;
    return this;
  }

   /**
   * Get framework
   * @return framework
  **/
  @javax.annotation.Nullable
  public CoreCompetencyDuplicateCompetencyFramework200Response getFramework() {
    return framework;
  }

  public void setFramework(CoreCompetencyDuplicateCompetencyFramework200Response framework) {
    this.framework = framework;
  }


  public ToolLpDataForTemplateCompetenciesPage200ResponseCompetenciesInner hascourses(Boolean hascourses) {
    this.hascourses = hascourses;
    return this;
  }

   /**
   * hascourses
   * @return hascourses
  **/
  @javax.annotation.Nullable
  public Boolean getHascourses() {
    return hascourses;
  }

  public void setHascourses(Boolean hascourses) {
    this.hascourses = hascourses;
  }


  public ToolLpDataForTemplateCompetenciesPage200ResponseCompetenciesInner hasrelatedcompetencies(Boolean hasrelatedcompetencies) {
    this.hasrelatedcompetencies = hasrelatedcompetencies;
    return this;
  }

   /**
   * hasrelatedcompetencies
   * @return hasrelatedcompetencies
  **/
  @javax.annotation.Nullable
  public Boolean getHasrelatedcompetencies() {
    return hasrelatedcompetencies;
  }

  public void setHasrelatedcompetencies(Boolean hasrelatedcompetencies) {
    this.hasrelatedcompetencies = hasrelatedcompetencies;
  }


  public ToolLpDataForTemplateCompetenciesPage200ResponseCompetenciesInner linkedcourses(List<CoreCourseGetEnrolledCoursesByTimelineClassification200ResponseCoursesInner> linkedcourses) {
    this.linkedcourses = linkedcourses;
    return this;
  }

  public ToolLpDataForTemplateCompetenciesPage200ResponseCompetenciesInner addLinkedcoursesItem(CoreCourseGetEnrolledCoursesByTimelineClassification200ResponseCoursesInner linkedcoursesItem) {
    if (this.linkedcourses == null) {
      this.linkedcourses = new ArrayList<>();
    }
    this.linkedcourses.add(linkedcoursesItem);
    return this;
  }

   /**
   * Get linkedcourses
   * @return linkedcourses
  **/
  @javax.annotation.Nullable
  public List<CoreCourseGetEnrolledCoursesByTimelineClassification200ResponseCoursesInner> getLinkedcourses() {
    return linkedcourses;
  }

  public void setLinkedcourses(List<CoreCourseGetEnrolledCoursesByTimelineClassification200ResponseCoursesInner> linkedcourses) {
    this.linkedcourses = linkedcourses;
  }


  public ToolLpDataForTemplateCompetenciesPage200ResponseCompetenciesInner pluginbaseurl(String pluginbaseurl) {
    this.pluginbaseurl = pluginbaseurl;
    return this;
  }

   /**
   * pluginbaseurl
   * @return pluginbaseurl
  **/
  @javax.annotation.Nullable
  public String getPluginbaseurl() {
    return pluginbaseurl;
  }

  public void setPluginbaseurl(String pluginbaseurl) {
    this.pluginbaseurl = pluginbaseurl;
  }


  public ToolLpDataForTemplateCompetenciesPage200ResponseCompetenciesInner relatedcompetencies(List<CoreCompetencyReadUserEvidence200ResponseCompetenciesInner> relatedcompetencies) {
    this.relatedcompetencies = relatedcompetencies;
    return this;
  }

  public ToolLpDataForTemplateCompetenciesPage200ResponseCompetenciesInner addRelatedcompetenciesItem(CoreCompetencyReadUserEvidence200ResponseCompetenciesInner relatedcompetenciesItem) {
    if (this.relatedcompetencies == null) {
      this.relatedcompetencies = new ArrayList<>();
    }
    this.relatedcompetencies.add(relatedcompetenciesItem);
    return this;
  }

   /**
   * Get relatedcompetencies
   * @return relatedcompetencies
  **/
  @javax.annotation.Nullable
  public List<CoreCompetencyReadUserEvidence200ResponseCompetenciesInner> getRelatedcompetencies() {
    return relatedcompetencies;
  }

  public void setRelatedcompetencies(List<CoreCompetencyReadUserEvidence200ResponseCompetenciesInner> relatedcompetencies) {
    this.relatedcompetencies = relatedcompetencies;
  }


  public ToolLpDataForTemplateCompetenciesPage200ResponseCompetenciesInner scaleconfiguration(String scaleconfiguration) {
    this.scaleconfiguration = scaleconfiguration;
    return this;
  }

   /**
   * scaleconfiguration
   * @return scaleconfiguration
  **/
  @javax.annotation.Nullable
  public String getScaleconfiguration() {
    return scaleconfiguration;
  }

  public void setScaleconfiguration(String scaleconfiguration) {
    this.scaleconfiguration = scaleconfiguration;
  }


  public ToolLpDataForTemplateCompetenciesPage200ResponseCompetenciesInner scaleid(Integer scaleid) {
    this.scaleid = scaleid;
    return this;
  }

   /**
   * scaleid
   * @return scaleid
  **/
  @javax.annotation.Nullable
  public Integer getScaleid() {
    return scaleid;
  }

  public void setScaleid(Integer scaleid) {
    this.scaleid = scaleid;
  }


  public ToolLpDataForTemplateCompetenciesPage200ResponseCompetenciesInner taxonomyterm(String taxonomyterm) {
    this.taxonomyterm = taxonomyterm;
    return this;
  }

   /**
   * taxonomyterm
   * @return taxonomyterm
  **/
  @javax.annotation.Nullable
  public String getTaxonomyterm() {
    return taxonomyterm;
  }

  public void setTaxonomyterm(String taxonomyterm) {
    this.taxonomyterm = taxonomyterm;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ToolLpDataForTemplateCompetenciesPage200ResponseCompetenciesInner toolLpDataForTemplateCompetenciesPage200ResponseCompetenciesInner = (ToolLpDataForTemplateCompetenciesPage200ResponseCompetenciesInner) o;
    return Objects.equals(this.competency, toolLpDataForTemplateCompetenciesPage200ResponseCompetenciesInner.competency) &&
        Objects.equals(this.comppath, toolLpDataForTemplateCompetenciesPage200ResponseCompetenciesInner.comppath) &&
        Objects.equals(this.framework, toolLpDataForTemplateCompetenciesPage200ResponseCompetenciesInner.framework) &&
        Objects.equals(this.hascourses, toolLpDataForTemplateCompetenciesPage200ResponseCompetenciesInner.hascourses) &&
        Objects.equals(this.hasrelatedcompetencies, toolLpDataForTemplateCompetenciesPage200ResponseCompetenciesInner.hasrelatedcompetencies) &&
        Objects.equals(this.linkedcourses, toolLpDataForTemplateCompetenciesPage200ResponseCompetenciesInner.linkedcourses) &&
        Objects.equals(this.pluginbaseurl, toolLpDataForTemplateCompetenciesPage200ResponseCompetenciesInner.pluginbaseurl) &&
        Objects.equals(this.relatedcompetencies, toolLpDataForTemplateCompetenciesPage200ResponseCompetenciesInner.relatedcompetencies) &&
        Objects.equals(this.scaleconfiguration, toolLpDataForTemplateCompetenciesPage200ResponseCompetenciesInner.scaleconfiguration) &&
        Objects.equals(this.scaleid, toolLpDataForTemplateCompetenciesPage200ResponseCompetenciesInner.scaleid) &&
        Objects.equals(this.taxonomyterm, toolLpDataForTemplateCompetenciesPage200ResponseCompetenciesInner.taxonomyterm);
  }

  @Override
  public int hashCode() {
    return Objects.hash(competency, comppath, framework, hascourses, hasrelatedcompetencies, linkedcourses, pluginbaseurl, relatedcompetencies, scaleconfiguration, scaleid, taxonomyterm);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ToolLpDataForTemplateCompetenciesPage200ResponseCompetenciesInner {\n");
    sb.append("    competency: ").append(toIndentedString(competency)).append("\n");
    sb.append("    comppath: ").append(toIndentedString(comppath)).append("\n");
    sb.append("    framework: ").append(toIndentedString(framework)).append("\n");
    sb.append("    hascourses: ").append(toIndentedString(hascourses)).append("\n");
    sb.append("    hasrelatedcompetencies: ").append(toIndentedString(hasrelatedcompetencies)).append("\n");
    sb.append("    linkedcourses: ").append(toIndentedString(linkedcourses)).append("\n");
    sb.append("    pluginbaseurl: ").append(toIndentedString(pluginbaseurl)).append("\n");
    sb.append("    relatedcompetencies: ").append(toIndentedString(relatedcompetencies)).append("\n");
    sb.append("    scaleconfiguration: ").append(toIndentedString(scaleconfiguration)).append("\n");
    sb.append("    scaleid: ").append(toIndentedString(scaleid)).append("\n");
    sb.append("    taxonomyterm: ").append(toIndentedString(taxonomyterm)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("competency");
    openapiFields.add("comppath");
    openapiFields.add("framework");
    openapiFields.add("hascourses");
    openapiFields.add("hasrelatedcompetencies");
    openapiFields.add("linkedcourses");
    openapiFields.add("pluginbaseurl");
    openapiFields.add("relatedcompetencies");
    openapiFields.add("scaleconfiguration");
    openapiFields.add("scaleid");
    openapiFields.add("taxonomyterm");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ToolLpDataForTemplateCompetenciesPage200ResponseCompetenciesInner
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ToolLpDataForTemplateCompetenciesPage200ResponseCompetenciesInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ToolLpDataForTemplateCompetenciesPage200ResponseCompetenciesInner is not found in the empty JSON string", ToolLpDataForTemplateCompetenciesPage200ResponseCompetenciesInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ToolLpDataForTemplateCompetenciesPage200ResponseCompetenciesInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ToolLpDataForTemplateCompetenciesPage200ResponseCompetenciesInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `competency`
      if (jsonObj.get("competency") != null && !jsonObj.get("competency").isJsonNull()) {
        CoreCompetencyCreateCompetency200Response.validateJsonElement(jsonObj.get("competency"));
      }
      // validate the optional field `comppath`
      if (jsonObj.get("comppath") != null && !jsonObj.get("comppath").isJsonNull()) {
        ToolLpDataForCompetencySummary200ResponseComppath.validateJsonElement(jsonObj.get("comppath"));
      }
      // validate the optional field `framework`
      if (jsonObj.get("framework") != null && !jsonObj.get("framework").isJsonNull()) {
        CoreCompetencyDuplicateCompetencyFramework200Response.validateJsonElement(jsonObj.get("framework"));
      }
      if (jsonObj.get("linkedcourses") != null && !jsonObj.get("linkedcourses").isJsonNull()) {
        JsonArray jsonArraylinkedcourses = jsonObj.getAsJsonArray("linkedcourses");
        if (jsonArraylinkedcourses != null) {
          // ensure the json data is an array
          if (!jsonObj.get("linkedcourses").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `linkedcourses` to be an array in the JSON string but got `%s`", jsonObj.get("linkedcourses").toString()));
          }

          // validate the optional field `linkedcourses` (array)
          for (int i = 0; i < jsonArraylinkedcourses.size(); i++) {
            CoreCourseGetEnrolledCoursesByTimelineClassification200ResponseCoursesInner.validateJsonElement(jsonArraylinkedcourses.get(i));
          };
        }
      }
      if ((jsonObj.get("pluginbaseurl") != null && !jsonObj.get("pluginbaseurl").isJsonNull()) && !jsonObj.get("pluginbaseurl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pluginbaseurl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pluginbaseurl").toString()));
      }
      if (jsonObj.get("relatedcompetencies") != null && !jsonObj.get("relatedcompetencies").isJsonNull()) {
        JsonArray jsonArrayrelatedcompetencies = jsonObj.getAsJsonArray("relatedcompetencies");
        if (jsonArrayrelatedcompetencies != null) {
          // ensure the json data is an array
          if (!jsonObj.get("relatedcompetencies").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `relatedcompetencies` to be an array in the JSON string but got `%s`", jsonObj.get("relatedcompetencies").toString()));
          }

          // validate the optional field `relatedcompetencies` (array)
          for (int i = 0; i < jsonArrayrelatedcompetencies.size(); i++) {
            CoreCompetencyReadUserEvidence200ResponseCompetenciesInner.validateJsonElement(jsonArrayrelatedcompetencies.get(i));
          };
        }
      }
      if ((jsonObj.get("scaleconfiguration") != null && !jsonObj.get("scaleconfiguration").isJsonNull()) && !jsonObj.get("scaleconfiguration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scaleconfiguration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scaleconfiguration").toString()));
      }
      if ((jsonObj.get("taxonomyterm") != null && !jsonObj.get("taxonomyterm").isJsonNull()) && !jsonObj.get("taxonomyterm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taxonomyterm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taxonomyterm").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ToolLpDataForTemplateCompetenciesPage200ResponseCompetenciesInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ToolLpDataForTemplateCompetenciesPage200ResponseCompetenciesInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ToolLpDataForTemplateCompetenciesPage200ResponseCompetenciesInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ToolLpDataForTemplateCompetenciesPage200ResponseCompetenciesInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ToolLpDataForTemplateCompetenciesPage200ResponseCompetenciesInner>() {
           @Override
           public void write(JsonWriter out, ToolLpDataForTemplateCompetenciesPage200ResponseCompetenciesInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ToolLpDataForTemplateCompetenciesPage200ResponseCompetenciesInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ToolLpDataForTemplateCompetenciesPage200ResponseCompetenciesInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ToolLpDataForTemplateCompetenciesPage200ResponseCompetenciesInner
  * @throws IOException if the JSON string is invalid with respect to ToolLpDataForTemplateCompetenciesPage200ResponseCompetenciesInner
  */
  public static ToolLpDataForTemplateCompetenciesPage200ResponseCompetenciesInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ToolLpDataForTemplateCompetenciesPage200ResponseCompetenciesInner.class);
  }

 /**
  * Convert an instance of ToolLpDataForTemplateCompetenciesPage200ResponseCompetenciesInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

