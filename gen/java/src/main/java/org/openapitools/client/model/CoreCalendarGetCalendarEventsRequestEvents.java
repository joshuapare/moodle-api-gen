/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.joshuapare.JSON;

/**
 * CoreCalendarGetCalendarEventsRequestEvents
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-18T20:58:28.689161-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class CoreCalendarGetCalendarEventsRequestEvents {
  public static final String SERIALIZED_NAME_CATEGORYIDS = "categoryids";
  @SerializedName(SERIALIZED_NAME_CATEGORYIDS)
  private List<Object> categoryids = new ArrayList<>();

  public static final String SERIALIZED_NAME_COURSEIDS = "courseids";
  @SerializedName(SERIALIZED_NAME_COURSEIDS)
  private List<Object> courseids = new ArrayList<>();

  public static final String SERIALIZED_NAME_EVENTIDS = "eventids";
  @SerializedName(SERIALIZED_NAME_EVENTIDS)
  private List<Object> eventids = new ArrayList<>();

  public static final String SERIALIZED_NAME_GROUPIDS = "groupids";
  @SerializedName(SERIALIZED_NAME_GROUPIDS)
  private List<Object> groupids = new ArrayList<>();

  public CoreCalendarGetCalendarEventsRequestEvents() {
  }

  public CoreCalendarGetCalendarEventsRequestEvents categoryids(List<Object> categoryids) {
    this.categoryids = categoryids;
    return this;
  }

  public CoreCalendarGetCalendarEventsRequestEvents addCategoryidsItem(Object categoryidsItem) {
    if (this.categoryids == null) {
      this.categoryids = new ArrayList<>();
    }
    this.categoryids.add(categoryidsItem);
    return this;
  }

   /**
   * Get categoryids
   * @return categoryids
  **/
  @javax.annotation.Nullable
  public List<Object> getCategoryids() {
    return categoryids;
  }

  public void setCategoryids(List<Object> categoryids) {
    this.categoryids = categoryids;
  }


  public CoreCalendarGetCalendarEventsRequestEvents courseids(List<Object> courseids) {
    this.courseids = courseids;
    return this;
  }

  public CoreCalendarGetCalendarEventsRequestEvents addCourseidsItem(Object courseidsItem) {
    if (this.courseids == null) {
      this.courseids = new ArrayList<>();
    }
    this.courseids.add(courseidsItem);
    return this;
  }

   /**
   * Get courseids
   * @return courseids
  **/
  @javax.annotation.Nullable
  public List<Object> getCourseids() {
    return courseids;
  }

  public void setCourseids(List<Object> courseids) {
    this.courseids = courseids;
  }


  public CoreCalendarGetCalendarEventsRequestEvents eventids(List<Object> eventids) {
    this.eventids = eventids;
    return this;
  }

  public CoreCalendarGetCalendarEventsRequestEvents addEventidsItem(Object eventidsItem) {
    if (this.eventids == null) {
      this.eventids = new ArrayList<>();
    }
    this.eventids.add(eventidsItem);
    return this;
  }

   /**
   * Get eventids
   * @return eventids
  **/
  @javax.annotation.Nullable
  public List<Object> getEventids() {
    return eventids;
  }

  public void setEventids(List<Object> eventids) {
    this.eventids = eventids;
  }


  public CoreCalendarGetCalendarEventsRequestEvents groupids(List<Object> groupids) {
    this.groupids = groupids;
    return this;
  }

  public CoreCalendarGetCalendarEventsRequestEvents addGroupidsItem(Object groupidsItem) {
    if (this.groupids == null) {
      this.groupids = new ArrayList<>();
    }
    this.groupids.add(groupidsItem);
    return this;
  }

   /**
   * Get groupids
   * @return groupids
  **/
  @javax.annotation.Nullable
  public List<Object> getGroupids() {
    return groupids;
  }

  public void setGroupids(List<Object> groupids) {
    this.groupids = groupids;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CoreCalendarGetCalendarEventsRequestEvents coreCalendarGetCalendarEventsRequestEvents = (CoreCalendarGetCalendarEventsRequestEvents) o;
    return Objects.equals(this.categoryids, coreCalendarGetCalendarEventsRequestEvents.categoryids) &&
        Objects.equals(this.courseids, coreCalendarGetCalendarEventsRequestEvents.courseids) &&
        Objects.equals(this.eventids, coreCalendarGetCalendarEventsRequestEvents.eventids) &&
        Objects.equals(this.groupids, coreCalendarGetCalendarEventsRequestEvents.groupids);
  }

  @Override
  public int hashCode() {
    return Objects.hash(categoryids, courseids, eventids, groupids);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CoreCalendarGetCalendarEventsRequestEvents {\n");
    sb.append("    categoryids: ").append(toIndentedString(categoryids)).append("\n");
    sb.append("    courseids: ").append(toIndentedString(courseids)).append("\n");
    sb.append("    eventids: ").append(toIndentedString(eventids)).append("\n");
    sb.append("    groupids: ").append(toIndentedString(groupids)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("categoryids");
    openapiFields.add("courseids");
    openapiFields.add("eventids");
    openapiFields.add("groupids");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CoreCalendarGetCalendarEventsRequestEvents
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CoreCalendarGetCalendarEventsRequestEvents.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CoreCalendarGetCalendarEventsRequestEvents is not found in the empty JSON string", CoreCalendarGetCalendarEventsRequestEvents.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CoreCalendarGetCalendarEventsRequestEvents.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CoreCalendarGetCalendarEventsRequestEvents` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("categoryids") != null && !jsonObj.get("categoryids").isJsonNull() && !jsonObj.get("categoryids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `categoryids` to be an array in the JSON string but got `%s`", jsonObj.get("categoryids").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("courseids") != null && !jsonObj.get("courseids").isJsonNull() && !jsonObj.get("courseids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `courseids` to be an array in the JSON string but got `%s`", jsonObj.get("courseids").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("eventids") != null && !jsonObj.get("eventids").isJsonNull() && !jsonObj.get("eventids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventids` to be an array in the JSON string but got `%s`", jsonObj.get("eventids").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("groupids") != null && !jsonObj.get("groupids").isJsonNull() && !jsonObj.get("groupids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `groupids` to be an array in the JSON string but got `%s`", jsonObj.get("groupids").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CoreCalendarGetCalendarEventsRequestEvents.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CoreCalendarGetCalendarEventsRequestEvents' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CoreCalendarGetCalendarEventsRequestEvents> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CoreCalendarGetCalendarEventsRequestEvents.class));

       return (TypeAdapter<T>) new TypeAdapter<CoreCalendarGetCalendarEventsRequestEvents>() {
           @Override
           public void write(JsonWriter out, CoreCalendarGetCalendarEventsRequestEvents value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CoreCalendarGetCalendarEventsRequestEvents read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CoreCalendarGetCalendarEventsRequestEvents given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CoreCalendarGetCalendarEventsRequestEvents
  * @throws IOException if the JSON string is invalid with respect to CoreCalendarGetCalendarEventsRequestEvents
  */
  public static CoreCalendarGetCalendarEventsRequestEvents fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CoreCalendarGetCalendarEventsRequestEvents.class);
  }

 /**
  * Convert an instance of CoreCalendarGetCalendarEventsRequestEvents to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

