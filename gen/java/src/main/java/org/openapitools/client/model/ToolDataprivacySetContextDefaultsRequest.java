/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.joshuapare.JSON;

/**
 * ToolDataprivacySetContextDefaultsRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-18T14:00:07.069642-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class ToolDataprivacySetContextDefaultsRequest {
  public static final String SERIALIZED_NAME_ACTIVITY = "activity";
  @SerializedName(SERIALIZED_NAME_ACTIVITY)
  private String activity;

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private Integer category = null;

  public static final String SERIALIZED_NAME_CONTEXTLEVEL = "contextlevel";
  @SerializedName(SERIALIZED_NAME_CONTEXTLEVEL)
  private Integer contextlevel = null;

  public static final String SERIALIZED_NAME_OVERRIDE = "override";
  @SerializedName(SERIALIZED_NAME_OVERRIDE)
  private Boolean override = false;

  public static final String SERIALIZED_NAME_PURPOSE = "purpose";
  @SerializedName(SERIALIZED_NAME_PURPOSE)
  private Integer purpose = null;

  public ToolDataprivacySetContextDefaultsRequest() {
  }

  public ToolDataprivacySetContextDefaultsRequest activity(String activity) {
    this.activity = activity;
    return this;
  }

   /**
   * The plugin name of the activity
   * @return activity
  **/
  @javax.annotation.Nullable
  public String getActivity() {
    return activity;
  }

  public void setActivity(String activity) {
    this.activity = activity;
  }


  public ToolDataprivacySetContextDefaultsRequest category(Integer category) {
    this.category = category;
    return this;
  }

   /**
   * The default category for the given context level
   * @return category
  **/
  @javax.annotation.Nonnull
  public Integer getCategory() {
    return category;
  }

  public void setCategory(Integer category) {
    this.category = category;
  }


  public ToolDataprivacySetContextDefaultsRequest contextlevel(Integer contextlevel) {
    this.contextlevel = contextlevel;
    return this;
  }

   /**
   * The context level
   * @return contextlevel
  **/
  @javax.annotation.Nonnull
  public Integer getContextlevel() {
    return contextlevel;
  }

  public void setContextlevel(Integer contextlevel) {
    this.contextlevel = contextlevel;
  }


  public ToolDataprivacySetContextDefaultsRequest override(Boolean override) {
    this.override = override;
    return this;
  }

   /**
   * Whether to override existing instances with the defaults
   * @return override
  **/
  @javax.annotation.Nullable
  public Boolean getOverride() {
    return override;
  }

  public void setOverride(Boolean override) {
    this.override = override;
  }


  public ToolDataprivacySetContextDefaultsRequest purpose(Integer purpose) {
    this.purpose = purpose;
    return this;
  }

   /**
   * The default purpose for the given context level
   * @return purpose
  **/
  @javax.annotation.Nonnull
  public Integer getPurpose() {
    return purpose;
  }

  public void setPurpose(Integer purpose) {
    this.purpose = purpose;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ToolDataprivacySetContextDefaultsRequest toolDataprivacySetContextDefaultsRequest = (ToolDataprivacySetContextDefaultsRequest) o;
    return Objects.equals(this.activity, toolDataprivacySetContextDefaultsRequest.activity) &&
        Objects.equals(this.category, toolDataprivacySetContextDefaultsRequest.category) &&
        Objects.equals(this.contextlevel, toolDataprivacySetContextDefaultsRequest.contextlevel) &&
        Objects.equals(this.override, toolDataprivacySetContextDefaultsRequest.override) &&
        Objects.equals(this.purpose, toolDataprivacySetContextDefaultsRequest.purpose);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activity, category, contextlevel, override, purpose);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ToolDataprivacySetContextDefaultsRequest {\n");
    sb.append("    activity: ").append(toIndentedString(activity)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    contextlevel: ").append(toIndentedString(contextlevel)).append("\n");
    sb.append("    override: ").append(toIndentedString(override)).append("\n");
    sb.append("    purpose: ").append(toIndentedString(purpose)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activity");
    openapiFields.add("category");
    openapiFields.add("contextlevel");
    openapiFields.add("override");
    openapiFields.add("purpose");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("category");
    openapiRequiredFields.add("contextlevel");
    openapiRequiredFields.add("purpose");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ToolDataprivacySetContextDefaultsRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ToolDataprivacySetContextDefaultsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ToolDataprivacySetContextDefaultsRequest is not found in the empty JSON string", ToolDataprivacySetContextDefaultsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ToolDataprivacySetContextDefaultsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ToolDataprivacySetContextDefaultsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ToolDataprivacySetContextDefaultsRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("activity") != null && !jsonObj.get("activity").isJsonNull()) && !jsonObj.get("activity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `activity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("activity").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ToolDataprivacySetContextDefaultsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ToolDataprivacySetContextDefaultsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ToolDataprivacySetContextDefaultsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ToolDataprivacySetContextDefaultsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ToolDataprivacySetContextDefaultsRequest>() {
           @Override
           public void write(JsonWriter out, ToolDataprivacySetContextDefaultsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ToolDataprivacySetContextDefaultsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ToolDataprivacySetContextDefaultsRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ToolDataprivacySetContextDefaultsRequest
  * @throws IOException if the JSON string is invalid with respect to ToolDataprivacySetContextDefaultsRequest
  */
  public static ToolDataprivacySetContextDefaultsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ToolDataprivacySetContextDefaultsRequest.class);
  }

 /**
  * Convert an instance of ToolDataprivacySetContextDefaultsRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

