/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CoreWebserviceGetSiteInfo200ResponseAdvancedfeaturesInner;
import org.openapitools.client.model.CoreWebserviceGetSiteInfo200ResponseFunctionsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.joshuapare.JSON;

/**
 * CoreWebserviceGetSiteInfo200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-18T20:58:28.689161-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class CoreWebserviceGetSiteInfo200Response {
  public static final String SERIALIZED_NAME_ADVANCEDFEATURES = "advancedfeatures";
  @SerializedName(SERIALIZED_NAME_ADVANCEDFEATURES)
  private List<CoreWebserviceGetSiteInfo200ResponseAdvancedfeaturesInner> advancedfeatures = new ArrayList<>();

  public static final String SERIALIZED_NAME_DOWNLOADFILES = "downloadfiles";
  @SerializedName(SERIALIZED_NAME_DOWNLOADFILES)
  private Integer downloadfiles = null;

  public static final String SERIALIZED_NAME_FIRSTNAME = "firstname";
  @SerializedName(SERIALIZED_NAME_FIRSTNAME)
  private String firstname = "null";

  public static final String SERIALIZED_NAME_FULLNAME = "fullname";
  @SerializedName(SERIALIZED_NAME_FULLNAME)
  private String fullname = "null";

  public static final String SERIALIZED_NAME_FUNCTIONS = "functions";
  @SerializedName(SERIALIZED_NAME_FUNCTIONS)
  private List<CoreWebserviceGetSiteInfo200ResponseFunctionsInner> functions = new ArrayList<>();

  public static final String SERIALIZED_NAME_LANG = "lang";
  @SerializedName(SERIALIZED_NAME_LANG)
  private String lang = "null";

  public static final String SERIALIZED_NAME_LASTNAME = "lastname";
  @SerializedName(SERIALIZED_NAME_LASTNAME)
  private String lastname = "null";

  public static final String SERIALIZED_NAME_LIMITCONCURRENTLOGINS = "limitconcurrentlogins";
  @SerializedName(SERIALIZED_NAME_LIMITCONCURRENTLOGINS)
  private Integer limitconcurrentlogins = null;

  public static final String SERIALIZED_NAME_MOBILECSSURL = "mobilecssurl";
  @SerializedName(SERIALIZED_NAME_MOBILECSSURL)
  private String mobilecssurl = "null";

  public static final String SERIALIZED_NAME_RELEASE = "release";
  @SerializedName(SERIALIZED_NAME_RELEASE)
  private String release = "null";

  public static final String SERIALIZED_NAME_SITECALENDARTYPE = "sitecalendartype";
  @SerializedName(SERIALIZED_NAME_SITECALENDARTYPE)
  private String sitecalendartype = "null";

  public static final String SERIALIZED_NAME_SITEID = "siteid";
  @SerializedName(SERIALIZED_NAME_SITEID)
  private Integer siteid = null;

  public static final String SERIALIZED_NAME_SITENAME = "sitename";
  @SerializedName(SERIALIZED_NAME_SITENAME)
  private String sitename = "null";

  public static final String SERIALIZED_NAME_SITEURL = "siteurl";
  @SerializedName(SERIALIZED_NAME_SITEURL)
  private String siteurl = "null";

  public static final String SERIALIZED_NAME_THEME = "theme";
  @SerializedName(SERIALIZED_NAME_THEME)
  private String theme = "null";

  public static final String SERIALIZED_NAME_UPLOADFILES = "uploadfiles";
  @SerializedName(SERIALIZED_NAME_UPLOADFILES)
  private Integer uploadfiles = null;

  public static final String SERIALIZED_NAME_USERCALENDARTYPE = "usercalendartype";
  @SerializedName(SERIALIZED_NAME_USERCALENDARTYPE)
  private String usercalendartype = "null";

  public static final String SERIALIZED_NAME_USERCANMANAGEOWNFILES = "usercanmanageownfiles";
  @SerializedName(SERIALIZED_NAME_USERCANMANAGEOWNFILES)
  private Boolean usercanmanageownfiles = null;

  public static final String SERIALIZED_NAME_USERHOMEPAGE = "userhomepage";
  @SerializedName(SERIALIZED_NAME_USERHOMEPAGE)
  private Integer userhomepage = null;

  public static final String SERIALIZED_NAME_USERID = "userid";
  @SerializedName(SERIALIZED_NAME_USERID)
  private Integer userid;

  public static final String SERIALIZED_NAME_USERISSITEADMIN = "userissiteadmin";
  @SerializedName(SERIALIZED_NAME_USERISSITEADMIN)
  private Boolean userissiteadmin = null;

  public static final String SERIALIZED_NAME_USERMAXUPLOADFILESIZE = "usermaxuploadfilesize";
  @SerializedName(SERIALIZED_NAME_USERMAXUPLOADFILESIZE)
  private Integer usermaxuploadfilesize = null;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username = "null";

  public static final String SERIALIZED_NAME_USERPICTUREURL = "userpictureurl";
  @SerializedName(SERIALIZED_NAME_USERPICTUREURL)
  private String userpictureurl = "null";

  public static final String SERIALIZED_NAME_USERPRIVATEACCESSKEY = "userprivateaccesskey";
  @SerializedName(SERIALIZED_NAME_USERPRIVATEACCESSKEY)
  private String userprivateaccesskey = "null";

  public static final String SERIALIZED_NAME_USERQUOTA = "userquota";
  @SerializedName(SERIALIZED_NAME_USERQUOTA)
  private Integer userquota = null;

  public static final String SERIALIZED_NAME_USERSESSIONSCOUNT = "usersessionscount";
  @SerializedName(SERIALIZED_NAME_USERSESSIONSCOUNT)
  private Integer usersessionscount = null;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version = "null";

  public CoreWebserviceGetSiteInfo200Response() {
  }

  public CoreWebserviceGetSiteInfo200Response advancedfeatures(List<CoreWebserviceGetSiteInfo200ResponseAdvancedfeaturesInner> advancedfeatures) {
    this.advancedfeatures = advancedfeatures;
    return this;
  }

  public CoreWebserviceGetSiteInfo200Response addAdvancedfeaturesItem(CoreWebserviceGetSiteInfo200ResponseAdvancedfeaturesInner advancedfeaturesItem) {
    if (this.advancedfeatures == null) {
      this.advancedfeatures = new ArrayList<>();
    }
    this.advancedfeatures.add(advancedfeaturesItem);
    return this;
  }

   /**
   * Get advancedfeatures
   * @return advancedfeatures
  **/
  @javax.annotation.Nullable
  public List<CoreWebserviceGetSiteInfo200ResponseAdvancedfeaturesInner> getAdvancedfeatures() {
    return advancedfeatures;
  }

  public void setAdvancedfeatures(List<CoreWebserviceGetSiteInfo200ResponseAdvancedfeaturesInner> advancedfeatures) {
    this.advancedfeatures = advancedfeatures;
  }


  public CoreWebserviceGetSiteInfo200Response downloadfiles(Integer downloadfiles) {
    this.downloadfiles = downloadfiles;
    return this;
  }

   /**
   * 1 if users are allowed to download files, 0 if not
   * @return downloadfiles
  **/
  @javax.annotation.Nullable
  public Integer getDownloadfiles() {
    return downloadfiles;
  }

  public void setDownloadfiles(Integer downloadfiles) {
    this.downloadfiles = downloadfiles;
  }


  public CoreWebserviceGetSiteInfo200Response firstname(String firstname) {
    this.firstname = firstname;
    return this;
  }

   /**
   * first name
   * @return firstname
  **/
  @javax.annotation.Nonnull
  public String getFirstname() {
    return firstname;
  }

  public void setFirstname(String firstname) {
    this.firstname = firstname;
  }


  public CoreWebserviceGetSiteInfo200Response fullname(String fullname) {
    this.fullname = fullname;
    return this;
  }

   /**
   * user full name
   * @return fullname
  **/
  @javax.annotation.Nonnull
  public String getFullname() {
    return fullname;
  }

  public void setFullname(String fullname) {
    this.fullname = fullname;
  }


  public CoreWebserviceGetSiteInfo200Response functions(List<CoreWebserviceGetSiteInfo200ResponseFunctionsInner> functions) {
    this.functions = functions;
    return this;
  }

  public CoreWebserviceGetSiteInfo200Response addFunctionsItem(CoreWebserviceGetSiteInfo200ResponseFunctionsInner functionsItem) {
    if (this.functions == null) {
      this.functions = new ArrayList<>();
    }
    this.functions.add(functionsItem);
    return this;
  }

   /**
   * Get functions
   * @return functions
  **/
  @javax.annotation.Nonnull
  public List<CoreWebserviceGetSiteInfo200ResponseFunctionsInner> getFunctions() {
    return functions;
  }

  public void setFunctions(List<CoreWebserviceGetSiteInfo200ResponseFunctionsInner> functions) {
    this.functions = functions;
  }


  public CoreWebserviceGetSiteInfo200Response lang(String lang) {
    this.lang = lang;
    return this;
  }

   /**
   * Current language.
   * @return lang
  **/
  @javax.annotation.Nonnull
  public String getLang() {
    return lang;
  }

  public void setLang(String lang) {
    this.lang = lang;
  }


  public CoreWebserviceGetSiteInfo200Response lastname(String lastname) {
    this.lastname = lastname;
    return this;
  }

   /**
   * last name
   * @return lastname
  **/
  @javax.annotation.Nonnull
  public String getLastname() {
    return lastname;
  }

  public void setLastname(String lastname) {
    this.lastname = lastname;
  }


  public CoreWebserviceGetSiteInfo200Response limitconcurrentlogins(Integer limitconcurrentlogins) {
    this.limitconcurrentlogins = limitconcurrentlogins;
    return this;
  }

   /**
   * Number of concurrent sessions allowed
   * @return limitconcurrentlogins
  **/
  @javax.annotation.Nullable
  public Integer getLimitconcurrentlogins() {
    return limitconcurrentlogins;
  }

  public void setLimitconcurrentlogins(Integer limitconcurrentlogins) {
    this.limitconcurrentlogins = limitconcurrentlogins;
  }


  public CoreWebserviceGetSiteInfo200Response mobilecssurl(String mobilecssurl) {
    this.mobilecssurl = mobilecssurl;
    return this;
  }

   /**
   * Mobile custom CSS theme
   * @return mobilecssurl
  **/
  @javax.annotation.Nullable
  public String getMobilecssurl() {
    return mobilecssurl;
  }

  public void setMobilecssurl(String mobilecssurl) {
    this.mobilecssurl = mobilecssurl;
  }


  public CoreWebserviceGetSiteInfo200Response release(String release) {
    this.release = release;
    return this;
  }

   /**
   * Moodle release number
   * @return release
  **/
  @javax.annotation.Nullable
  public String getRelease() {
    return release;
  }

  public void setRelease(String release) {
    this.release = release;
  }


  public CoreWebserviceGetSiteInfo200Response sitecalendartype(String sitecalendartype) {
    this.sitecalendartype = sitecalendartype;
    return this;
  }

   /**
   * Calendar type set in the site.
   * @return sitecalendartype
  **/
  @javax.annotation.Nullable
  public String getSitecalendartype() {
    return sitecalendartype;
  }

  public void setSitecalendartype(String sitecalendartype) {
    this.sitecalendartype = sitecalendartype;
  }


  public CoreWebserviceGetSiteInfo200Response siteid(Integer siteid) {
    this.siteid = siteid;
    return this;
  }

   /**
   * Site course ID
   * @return siteid
  **/
  @javax.annotation.Nullable
  public Integer getSiteid() {
    return siteid;
  }

  public void setSiteid(Integer siteid) {
    this.siteid = siteid;
  }


  public CoreWebserviceGetSiteInfo200Response sitename(String sitename) {
    this.sitename = sitename;
    return this;
  }

   /**
   * site name
   * @return sitename
  **/
  @javax.annotation.Nonnull
  public String getSitename() {
    return sitename;
  }

  public void setSitename(String sitename) {
    this.sitename = sitename;
  }


  public CoreWebserviceGetSiteInfo200Response siteurl(String siteurl) {
    this.siteurl = siteurl;
    return this;
  }

   /**
   * site url
   * @return siteurl
  **/
  @javax.annotation.Nonnull
  public String getSiteurl() {
    return siteurl;
  }

  public void setSiteurl(String siteurl) {
    this.siteurl = siteurl;
  }


  public CoreWebserviceGetSiteInfo200Response theme(String theme) {
    this.theme = theme;
    return this;
  }

   /**
   * Current theme for the user.
   * @return theme
  **/
  @javax.annotation.Nullable
  public String getTheme() {
    return theme;
  }

  public void setTheme(String theme) {
    this.theme = theme;
  }


  public CoreWebserviceGetSiteInfo200Response uploadfiles(Integer uploadfiles) {
    this.uploadfiles = uploadfiles;
    return this;
  }

   /**
   * 1 if users are allowed to upload files, 0 if not
   * @return uploadfiles
  **/
  @javax.annotation.Nullable
  public Integer getUploadfiles() {
    return uploadfiles;
  }

  public void setUploadfiles(Integer uploadfiles) {
    this.uploadfiles = uploadfiles;
  }


  public CoreWebserviceGetSiteInfo200Response usercalendartype(String usercalendartype) {
    this.usercalendartype = usercalendartype;
    return this;
  }

   /**
   * Calendar typed used by the user.
   * @return usercalendartype
  **/
  @javax.annotation.Nullable
  public String getUsercalendartype() {
    return usercalendartype;
  }

  public void setUsercalendartype(String usercalendartype) {
    this.usercalendartype = usercalendartype;
  }


  public CoreWebserviceGetSiteInfo200Response usercanmanageownfiles(Boolean usercanmanageownfiles) {
    this.usercanmanageownfiles = usercanmanageownfiles;
    return this;
  }

   /**
   * true if the user can manage his own files
   * @return usercanmanageownfiles
  **/
  @javax.annotation.Nullable
  public Boolean getUsercanmanageownfiles() {
    return usercanmanageownfiles;
  }

  public void setUsercanmanageownfiles(Boolean usercanmanageownfiles) {
    this.usercanmanageownfiles = usercanmanageownfiles;
  }


  public CoreWebserviceGetSiteInfo200Response userhomepage(Integer userhomepage) {
    this.userhomepage = userhomepage;
    return this;
  }

   /**
   * the default home page for the user: 0 for the site home, 1 for dashboard
   * @return userhomepage
  **/
  @javax.annotation.Nullable
  public Integer getUserhomepage() {
    return userhomepage;
  }

  public void setUserhomepage(Integer userhomepage) {
    this.userhomepage = userhomepage;
  }


  public CoreWebserviceGetSiteInfo200Response userid(Integer userid) {
    this.userid = userid;
    return this;
  }

   /**
   * user id
   * @return userid
  **/
  @javax.annotation.Nonnull
  public Integer getUserid() {
    return userid;
  }

  public void setUserid(Integer userid) {
    this.userid = userid;
  }


  public CoreWebserviceGetSiteInfo200Response userissiteadmin(Boolean userissiteadmin) {
    this.userissiteadmin = userissiteadmin;
    return this;
  }

   /**
   * Whether the user is a site admin or not.
   * @return userissiteadmin
  **/
  @javax.annotation.Nullable
  public Boolean getUserissiteadmin() {
    return userissiteadmin;
  }

  public void setUserissiteadmin(Boolean userissiteadmin) {
    this.userissiteadmin = userissiteadmin;
  }


  public CoreWebserviceGetSiteInfo200Response usermaxuploadfilesize(Integer usermaxuploadfilesize) {
    this.usermaxuploadfilesize = usermaxuploadfilesize;
    return this;
  }

   /**
   * user max upload file size (bytes). -1 means the user can ignore the upload file size
   * @return usermaxuploadfilesize
  **/
  @javax.annotation.Nullable
  public Integer getUsermaxuploadfilesize() {
    return usermaxuploadfilesize;
  }

  public void setUsermaxuploadfilesize(Integer usermaxuploadfilesize) {
    this.usermaxuploadfilesize = usermaxuploadfilesize;
  }


  public CoreWebserviceGetSiteInfo200Response username(String username) {
    this.username = username;
    return this;
  }

   /**
   * username
   * @return username
  **/
  @javax.annotation.Nonnull
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }


  public CoreWebserviceGetSiteInfo200Response userpictureurl(String userpictureurl) {
    this.userpictureurl = userpictureurl;
    return this;
  }

   /**
   * the user profile picture.                     Warning: this url is the public URL that only works when forcelogin is set to NO and guestaccess is set to YES.                     In order to retrieve user profile pictures independently of the Moodle config, replace \&quot;pluginfile.php\&quot; by                     \&quot;webservice/pluginfile.php?token&#x3D;WSTOKEN&amp;file&#x3D;\&quot;                     Of course the user can only see profile picture depending                     on his/her permissions. Moreover it is recommended to use HTTPS too.
   * @return userpictureurl
  **/
  @javax.annotation.Nonnull
  public String getUserpictureurl() {
    return userpictureurl;
  }

  public void setUserpictureurl(String userpictureurl) {
    this.userpictureurl = userpictureurl;
  }


  public CoreWebserviceGetSiteInfo200Response userprivateaccesskey(String userprivateaccesskey) {
    this.userprivateaccesskey = userprivateaccesskey;
    return this;
  }

   /**
   * Private user access key for fetching files.
   * @return userprivateaccesskey
  **/
  @javax.annotation.Nullable
  public String getUserprivateaccesskey() {
    return userprivateaccesskey;
  }

  public void setUserprivateaccesskey(String userprivateaccesskey) {
    this.userprivateaccesskey = userprivateaccesskey;
  }


  public CoreWebserviceGetSiteInfo200Response userquota(Integer userquota) {
    this.userquota = userquota;
    return this;
  }

   /**
   * user quota (bytes). 0 means user can ignore the quota
   * @return userquota
  **/
  @javax.annotation.Nullable
  public Integer getUserquota() {
    return userquota;
  }

  public void setUserquota(Integer userquota) {
    this.userquota = userquota;
  }


  public CoreWebserviceGetSiteInfo200Response usersessionscount(Integer usersessionscount) {
    this.usersessionscount = usersessionscount;
    return this;
  }

   /**
   * Number of active sessions for current user.                     Only returned when limitconcurrentlogins is used.
   * @return usersessionscount
  **/
  @javax.annotation.Nullable
  public Integer getUsersessionscount() {
    return usersessionscount;
  }

  public void setUsersessionscount(Integer usersessionscount) {
    this.usersessionscount = usersessionscount;
  }


  public CoreWebserviceGetSiteInfo200Response version(String version) {
    this.version = version;
    return this;
  }

   /**
   * Moodle version number
   * @return version
  **/
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CoreWebserviceGetSiteInfo200Response coreWebserviceGetSiteInfo200Response = (CoreWebserviceGetSiteInfo200Response) o;
    return Objects.equals(this.advancedfeatures, coreWebserviceGetSiteInfo200Response.advancedfeatures) &&
        Objects.equals(this.downloadfiles, coreWebserviceGetSiteInfo200Response.downloadfiles) &&
        Objects.equals(this.firstname, coreWebserviceGetSiteInfo200Response.firstname) &&
        Objects.equals(this.fullname, coreWebserviceGetSiteInfo200Response.fullname) &&
        Objects.equals(this.functions, coreWebserviceGetSiteInfo200Response.functions) &&
        Objects.equals(this.lang, coreWebserviceGetSiteInfo200Response.lang) &&
        Objects.equals(this.lastname, coreWebserviceGetSiteInfo200Response.lastname) &&
        Objects.equals(this.limitconcurrentlogins, coreWebserviceGetSiteInfo200Response.limitconcurrentlogins) &&
        Objects.equals(this.mobilecssurl, coreWebserviceGetSiteInfo200Response.mobilecssurl) &&
        Objects.equals(this.release, coreWebserviceGetSiteInfo200Response.release) &&
        Objects.equals(this.sitecalendartype, coreWebserviceGetSiteInfo200Response.sitecalendartype) &&
        Objects.equals(this.siteid, coreWebserviceGetSiteInfo200Response.siteid) &&
        Objects.equals(this.sitename, coreWebserviceGetSiteInfo200Response.sitename) &&
        Objects.equals(this.siteurl, coreWebserviceGetSiteInfo200Response.siteurl) &&
        Objects.equals(this.theme, coreWebserviceGetSiteInfo200Response.theme) &&
        Objects.equals(this.uploadfiles, coreWebserviceGetSiteInfo200Response.uploadfiles) &&
        Objects.equals(this.usercalendartype, coreWebserviceGetSiteInfo200Response.usercalendartype) &&
        Objects.equals(this.usercanmanageownfiles, coreWebserviceGetSiteInfo200Response.usercanmanageownfiles) &&
        Objects.equals(this.userhomepage, coreWebserviceGetSiteInfo200Response.userhomepage) &&
        Objects.equals(this.userid, coreWebserviceGetSiteInfo200Response.userid) &&
        Objects.equals(this.userissiteadmin, coreWebserviceGetSiteInfo200Response.userissiteadmin) &&
        Objects.equals(this.usermaxuploadfilesize, coreWebserviceGetSiteInfo200Response.usermaxuploadfilesize) &&
        Objects.equals(this.username, coreWebserviceGetSiteInfo200Response.username) &&
        Objects.equals(this.userpictureurl, coreWebserviceGetSiteInfo200Response.userpictureurl) &&
        Objects.equals(this.userprivateaccesskey, coreWebserviceGetSiteInfo200Response.userprivateaccesskey) &&
        Objects.equals(this.userquota, coreWebserviceGetSiteInfo200Response.userquota) &&
        Objects.equals(this.usersessionscount, coreWebserviceGetSiteInfo200Response.usersessionscount) &&
        Objects.equals(this.version, coreWebserviceGetSiteInfo200Response.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(advancedfeatures, downloadfiles, firstname, fullname, functions, lang, lastname, limitconcurrentlogins, mobilecssurl, release, sitecalendartype, siteid, sitename, siteurl, theme, uploadfiles, usercalendartype, usercanmanageownfiles, userhomepage, userid, userissiteadmin, usermaxuploadfilesize, username, userpictureurl, userprivateaccesskey, userquota, usersessionscount, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CoreWebserviceGetSiteInfo200Response {\n");
    sb.append("    advancedfeatures: ").append(toIndentedString(advancedfeatures)).append("\n");
    sb.append("    downloadfiles: ").append(toIndentedString(downloadfiles)).append("\n");
    sb.append("    firstname: ").append(toIndentedString(firstname)).append("\n");
    sb.append("    fullname: ").append(toIndentedString(fullname)).append("\n");
    sb.append("    functions: ").append(toIndentedString(functions)).append("\n");
    sb.append("    lang: ").append(toIndentedString(lang)).append("\n");
    sb.append("    lastname: ").append(toIndentedString(lastname)).append("\n");
    sb.append("    limitconcurrentlogins: ").append(toIndentedString(limitconcurrentlogins)).append("\n");
    sb.append("    mobilecssurl: ").append(toIndentedString(mobilecssurl)).append("\n");
    sb.append("    release: ").append(toIndentedString(release)).append("\n");
    sb.append("    sitecalendartype: ").append(toIndentedString(sitecalendartype)).append("\n");
    sb.append("    siteid: ").append(toIndentedString(siteid)).append("\n");
    sb.append("    sitename: ").append(toIndentedString(sitename)).append("\n");
    sb.append("    siteurl: ").append(toIndentedString(siteurl)).append("\n");
    sb.append("    theme: ").append(toIndentedString(theme)).append("\n");
    sb.append("    uploadfiles: ").append(toIndentedString(uploadfiles)).append("\n");
    sb.append("    usercalendartype: ").append(toIndentedString(usercalendartype)).append("\n");
    sb.append("    usercanmanageownfiles: ").append(toIndentedString(usercanmanageownfiles)).append("\n");
    sb.append("    userhomepage: ").append(toIndentedString(userhomepage)).append("\n");
    sb.append("    userid: ").append(toIndentedString(userid)).append("\n");
    sb.append("    userissiteadmin: ").append(toIndentedString(userissiteadmin)).append("\n");
    sb.append("    usermaxuploadfilesize: ").append(toIndentedString(usermaxuploadfilesize)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    userpictureurl: ").append(toIndentedString(userpictureurl)).append("\n");
    sb.append("    userprivateaccesskey: ").append(toIndentedString(userprivateaccesskey)).append("\n");
    sb.append("    userquota: ").append(toIndentedString(userquota)).append("\n");
    sb.append("    usersessionscount: ").append(toIndentedString(usersessionscount)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("advancedfeatures");
    openapiFields.add("downloadfiles");
    openapiFields.add("firstname");
    openapiFields.add("fullname");
    openapiFields.add("functions");
    openapiFields.add("lang");
    openapiFields.add("lastname");
    openapiFields.add("limitconcurrentlogins");
    openapiFields.add("mobilecssurl");
    openapiFields.add("release");
    openapiFields.add("sitecalendartype");
    openapiFields.add("siteid");
    openapiFields.add("sitename");
    openapiFields.add("siteurl");
    openapiFields.add("theme");
    openapiFields.add("uploadfiles");
    openapiFields.add("usercalendartype");
    openapiFields.add("usercanmanageownfiles");
    openapiFields.add("userhomepage");
    openapiFields.add("userid");
    openapiFields.add("userissiteadmin");
    openapiFields.add("usermaxuploadfilesize");
    openapiFields.add("username");
    openapiFields.add("userpictureurl");
    openapiFields.add("userprivateaccesskey");
    openapiFields.add("userquota");
    openapiFields.add("usersessionscount");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("firstname");
    openapiRequiredFields.add("fullname");
    openapiRequiredFields.add("functions");
    openapiRequiredFields.add("lang");
    openapiRequiredFields.add("lastname");
    openapiRequiredFields.add("sitename");
    openapiRequiredFields.add("siteurl");
    openapiRequiredFields.add("userid");
    openapiRequiredFields.add("username");
    openapiRequiredFields.add("userpictureurl");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CoreWebserviceGetSiteInfo200Response
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CoreWebserviceGetSiteInfo200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CoreWebserviceGetSiteInfo200Response is not found in the empty JSON string", CoreWebserviceGetSiteInfo200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CoreWebserviceGetSiteInfo200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CoreWebserviceGetSiteInfo200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CoreWebserviceGetSiteInfo200Response.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("advancedfeatures") != null && !jsonObj.get("advancedfeatures").isJsonNull()) {
        JsonArray jsonArrayadvancedfeatures = jsonObj.getAsJsonArray("advancedfeatures");
        if (jsonArrayadvancedfeatures != null) {
          // ensure the json data is an array
          if (!jsonObj.get("advancedfeatures").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `advancedfeatures` to be an array in the JSON string but got `%s`", jsonObj.get("advancedfeatures").toString()));
          }

          // validate the optional field `advancedfeatures` (array)
          for (int i = 0; i < jsonArrayadvancedfeatures.size(); i++) {
            CoreWebserviceGetSiteInfo200ResponseAdvancedfeaturesInner.validateJsonElement(jsonArrayadvancedfeatures.get(i));
          };
        }
      }
      if (!jsonObj.get("firstname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstname").toString()));
      }
      if (!jsonObj.get("fullname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fullname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fullname").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("functions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `functions` to be an array in the JSON string but got `%s`", jsonObj.get("functions").toString()));
      }

      JsonArray jsonArrayfunctions = jsonObj.getAsJsonArray("functions");
      // validate the required field `functions` (array)
      for (int i = 0; i < jsonArrayfunctions.size(); i++) {
        CoreWebserviceGetSiteInfo200ResponseFunctionsInner.validateJsonElement(jsonArrayfunctions.get(i));
      };
      if (!jsonObj.get("lang").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lang` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lang").toString()));
      }
      if (!jsonObj.get("lastname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastname").toString()));
      }
      if ((jsonObj.get("mobilecssurl") != null && !jsonObj.get("mobilecssurl").isJsonNull()) && !jsonObj.get("mobilecssurl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mobilecssurl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mobilecssurl").toString()));
      }
      if ((jsonObj.get("release") != null && !jsonObj.get("release").isJsonNull()) && !jsonObj.get("release").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `release` to be a primitive type in the JSON string but got `%s`", jsonObj.get("release").toString()));
      }
      if ((jsonObj.get("sitecalendartype") != null && !jsonObj.get("sitecalendartype").isJsonNull()) && !jsonObj.get("sitecalendartype").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sitecalendartype` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sitecalendartype").toString()));
      }
      if (!jsonObj.get("sitename").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sitename` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sitename").toString()));
      }
      if (!jsonObj.get("siteurl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `siteurl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("siteurl").toString()));
      }
      if ((jsonObj.get("theme") != null && !jsonObj.get("theme").isJsonNull()) && !jsonObj.get("theme").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `theme` to be a primitive type in the JSON string but got `%s`", jsonObj.get("theme").toString()));
      }
      if ((jsonObj.get("usercalendartype") != null && !jsonObj.get("usercalendartype").isJsonNull()) && !jsonObj.get("usercalendartype").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `usercalendartype` to be a primitive type in the JSON string but got `%s`", jsonObj.get("usercalendartype").toString()));
      }
      if (!jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
      if (!jsonObj.get("userpictureurl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userpictureurl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userpictureurl").toString()));
      }
      if ((jsonObj.get("userprivateaccesskey") != null && !jsonObj.get("userprivateaccesskey").isJsonNull()) && !jsonObj.get("userprivateaccesskey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userprivateaccesskey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userprivateaccesskey").toString()));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CoreWebserviceGetSiteInfo200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CoreWebserviceGetSiteInfo200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CoreWebserviceGetSiteInfo200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CoreWebserviceGetSiteInfo200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<CoreWebserviceGetSiteInfo200Response>() {
           @Override
           public void write(JsonWriter out, CoreWebserviceGetSiteInfo200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CoreWebserviceGetSiteInfo200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CoreWebserviceGetSiteInfo200Response given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CoreWebserviceGetSiteInfo200Response
  * @throws IOException if the JSON string is invalid with respect to CoreWebserviceGetSiteInfo200Response
  */
  public static CoreWebserviceGetSiteInfo200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CoreWebserviceGetSiteInfo200Response.class);
  }

 /**
  * Convert an instance of CoreWebserviceGetSiteInfo200Response to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

