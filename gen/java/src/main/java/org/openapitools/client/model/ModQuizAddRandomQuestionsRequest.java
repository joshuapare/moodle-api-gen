/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.joshuapare.JSON;

/**
 * ModQuizAddRandomQuestionsRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-18T20:58:28.689161-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class ModQuizAddRandomQuestionsRequest {
  public static final String SERIALIZED_NAME_ADDONPAGE = "addonpage";
  @SerializedName(SERIALIZED_NAME_ADDONPAGE)
  private Integer addonpage = null;

  public static final String SERIALIZED_NAME_CMID = "cmid";
  @SerializedName(SERIALIZED_NAME_CMID)
  private Integer cmid = null;

  public static final String SERIALIZED_NAME_FILTERCONDITION = "filtercondition";
  @SerializedName(SERIALIZED_NAME_FILTERCONDITION)
  private String filtercondition = "";

  public static final String SERIALIZED_NAME_NEWCATEGORY = "newcategory";
  @SerializedName(SERIALIZED_NAME_NEWCATEGORY)
  private String newcategory = "";

  public static final String SERIALIZED_NAME_PARENTCATEGORY = "parentcategory";
  @SerializedName(SERIALIZED_NAME_PARENTCATEGORY)
  private String parentcategory = "0";

  public static final String SERIALIZED_NAME_RANDOMCOUNT = "randomcount";
  @SerializedName(SERIALIZED_NAME_RANDOMCOUNT)
  private Integer randomcount = null;

  public ModQuizAddRandomQuestionsRequest() {
  }

  public ModQuizAddRandomQuestionsRequest addonpage(Integer addonpage) {
    this.addonpage = addonpage;
    return this;
  }

   /**
   * The page where random questions will be added to
   * @return addonpage
  **/
  @javax.annotation.Nonnull
  public Integer getAddonpage() {
    return addonpage;
  }

  public void setAddonpage(Integer addonpage) {
    this.addonpage = addonpage;
  }


  public ModQuizAddRandomQuestionsRequest cmid(Integer cmid) {
    this.cmid = cmid;
    return this;
  }

   /**
   * The cmid of the quiz
   * @return cmid
  **/
  @javax.annotation.Nonnull
  public Integer getCmid() {
    return cmid;
  }

  public void setCmid(Integer cmid) {
    this.cmid = cmid;
  }


  public ModQuizAddRandomQuestionsRequest filtercondition(String filtercondition) {
    this.filtercondition = filtercondition;
    return this;
  }

   /**
   * (Optional) The filter condition used when adding random questions from an existing category.                     Not required if adding random questions from a new category.
   * @return filtercondition
  **/
  @javax.annotation.Nullable
  public String getFiltercondition() {
    return filtercondition;
  }

  public void setFiltercondition(String filtercondition) {
    this.filtercondition = filtercondition;
  }


  public ModQuizAddRandomQuestionsRequest newcategory(String newcategory) {
    this.newcategory = newcategory;
    return this;
  }

   /**
   * (Optional) The name of a new question category to create and use for the random questions.
   * @return newcategory
  **/
  @javax.annotation.Nullable
  public String getNewcategory() {
    return newcategory;
  }

  public void setNewcategory(String newcategory) {
    this.newcategory = newcategory;
  }


  public ModQuizAddRandomQuestionsRequest parentcategory(String parentcategory) {
    this.parentcategory = parentcategory;
    return this;
  }

   /**
   * (Optional) The parent of the new question category, if creating one.
   * @return parentcategory
  **/
  @javax.annotation.Nullable
  public String getParentcategory() {
    return parentcategory;
  }

  public void setParentcategory(String parentcategory) {
    this.parentcategory = parentcategory;
  }


  public ModQuizAddRandomQuestionsRequest randomcount(Integer randomcount) {
    this.randomcount = randomcount;
    return this;
  }

   /**
   * Number of random questions
   * @return randomcount
  **/
  @javax.annotation.Nonnull
  public Integer getRandomcount() {
    return randomcount;
  }

  public void setRandomcount(Integer randomcount) {
    this.randomcount = randomcount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModQuizAddRandomQuestionsRequest modQuizAddRandomQuestionsRequest = (ModQuizAddRandomQuestionsRequest) o;
    return Objects.equals(this.addonpage, modQuizAddRandomQuestionsRequest.addonpage) &&
        Objects.equals(this.cmid, modQuizAddRandomQuestionsRequest.cmid) &&
        Objects.equals(this.filtercondition, modQuizAddRandomQuestionsRequest.filtercondition) &&
        Objects.equals(this.newcategory, modQuizAddRandomQuestionsRequest.newcategory) &&
        Objects.equals(this.parentcategory, modQuizAddRandomQuestionsRequest.parentcategory) &&
        Objects.equals(this.randomcount, modQuizAddRandomQuestionsRequest.randomcount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addonpage, cmid, filtercondition, newcategory, parentcategory, randomcount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModQuizAddRandomQuestionsRequest {\n");
    sb.append("    addonpage: ").append(toIndentedString(addonpage)).append("\n");
    sb.append("    cmid: ").append(toIndentedString(cmid)).append("\n");
    sb.append("    filtercondition: ").append(toIndentedString(filtercondition)).append("\n");
    sb.append("    newcategory: ").append(toIndentedString(newcategory)).append("\n");
    sb.append("    parentcategory: ").append(toIndentedString(parentcategory)).append("\n");
    sb.append("    randomcount: ").append(toIndentedString(randomcount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("addonpage");
    openapiFields.add("cmid");
    openapiFields.add("filtercondition");
    openapiFields.add("newcategory");
    openapiFields.add("parentcategory");
    openapiFields.add("randomcount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("addonpage");
    openapiRequiredFields.add("cmid");
    openapiRequiredFields.add("randomcount");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ModQuizAddRandomQuestionsRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ModQuizAddRandomQuestionsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModQuizAddRandomQuestionsRequest is not found in the empty JSON string", ModQuizAddRandomQuestionsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ModQuizAddRandomQuestionsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModQuizAddRandomQuestionsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ModQuizAddRandomQuestionsRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("filtercondition") != null && !jsonObj.get("filtercondition").isJsonNull()) && !jsonObj.get("filtercondition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filtercondition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filtercondition").toString()));
      }
      if ((jsonObj.get("newcategory") != null && !jsonObj.get("newcategory").isJsonNull()) && !jsonObj.get("newcategory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `newcategory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("newcategory").toString()));
      }
      if ((jsonObj.get("parentcategory") != null && !jsonObj.get("parentcategory").isJsonNull()) && !jsonObj.get("parentcategory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentcategory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parentcategory").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModQuizAddRandomQuestionsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModQuizAddRandomQuestionsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModQuizAddRandomQuestionsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModQuizAddRandomQuestionsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ModQuizAddRandomQuestionsRequest>() {
           @Override
           public void write(JsonWriter out, ModQuizAddRandomQuestionsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModQuizAddRandomQuestionsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ModQuizAddRandomQuestionsRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ModQuizAddRandomQuestionsRequest
  * @throws IOException if the JSON string is invalid with respect to ModQuizAddRandomQuestionsRequest
  */
  public static ModQuizAddRandomQuestionsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModQuizAddRandomQuestionsRequest.class);
  }

 /**
  * Convert an instance of ModQuizAddRandomQuestionsRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

