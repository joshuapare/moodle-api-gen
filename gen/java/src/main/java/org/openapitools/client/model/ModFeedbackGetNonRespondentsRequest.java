/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.joshuapare.JSON;

/**
 * ModFeedbackGetNonRespondentsRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-18T20:58:28.689161-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class ModFeedbackGetNonRespondentsRequest {
  public static final String SERIALIZED_NAME_COURSEID = "courseid";
  @SerializedName(SERIALIZED_NAME_COURSEID)
  private Integer courseid = 0;

  public static final String SERIALIZED_NAME_FEEDBACKID = "feedbackid";
  @SerializedName(SERIALIZED_NAME_FEEDBACKID)
  private Integer feedbackid;

  public static final String SERIALIZED_NAME_GROUPID = "groupid";
  @SerializedName(SERIALIZED_NAME_GROUPID)
  private Integer groupid = 0;

  public static final String SERIALIZED_NAME_PAGE = "page";
  @SerializedName(SERIALIZED_NAME_PAGE)
  private Integer page = 0;

  public static final String SERIALIZED_NAME_PERPAGE = "perpage";
  @SerializedName(SERIALIZED_NAME_PERPAGE)
  private Integer perpage = 0;

  public static final String SERIALIZED_NAME_SORT = "sort";
  @SerializedName(SERIALIZED_NAME_SORT)
  private String sort = "lastaccess";

  public ModFeedbackGetNonRespondentsRequest() {
  }

  public ModFeedbackGetNonRespondentsRequest courseid(Integer courseid) {
    this.courseid = courseid;
    return this;
  }

   /**
   * Course where user completes the feedback (for site feedbacks only).
   * @return courseid
  **/
  @javax.annotation.Nullable
  public Integer getCourseid() {
    return courseid;
  }

  public void setCourseid(Integer courseid) {
    this.courseid = courseid;
  }


  public ModFeedbackGetNonRespondentsRequest feedbackid(Integer feedbackid) {
    this.feedbackid = feedbackid;
    return this;
  }

   /**
   * Feedback instance id
   * @return feedbackid
  **/
  @javax.annotation.Nonnull
  public Integer getFeedbackid() {
    return feedbackid;
  }

  public void setFeedbackid(Integer feedbackid) {
    this.feedbackid = feedbackid;
  }


  public ModFeedbackGetNonRespondentsRequest groupid(Integer groupid) {
    this.groupid = groupid;
    return this;
  }

   /**
   * Group id, 0 means that the function will determine the user group.
   * @return groupid
  **/
  @javax.annotation.Nullable
  public Integer getGroupid() {
    return groupid;
  }

  public void setGroupid(Integer groupid) {
    this.groupid = groupid;
  }


  public ModFeedbackGetNonRespondentsRequest page(Integer page) {
    this.page = page;
    return this;
  }

   /**
   * The page of records to return.
   * @return page
  **/
  @javax.annotation.Nullable
  public Integer getPage() {
    return page;
  }

  public void setPage(Integer page) {
    this.page = page;
  }


  public ModFeedbackGetNonRespondentsRequest perpage(Integer perpage) {
    this.perpage = perpage;
    return this;
  }

   /**
   * The number of records to return per page.
   * @return perpage
  **/
  @javax.annotation.Nullable
  public Integer getPerpage() {
    return perpage;
  }

  public void setPerpage(Integer perpage) {
    this.perpage = perpage;
  }


  public ModFeedbackGetNonRespondentsRequest sort(String sort) {
    this.sort = sort;
    return this;
  }

   /**
   * Sort param, must be firstname, lastname or lastaccess (default).
   * @return sort
  **/
  @javax.annotation.Nullable
  public String getSort() {
    return sort;
  }

  public void setSort(String sort) {
    this.sort = sort;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModFeedbackGetNonRespondentsRequest modFeedbackGetNonRespondentsRequest = (ModFeedbackGetNonRespondentsRequest) o;
    return Objects.equals(this.courseid, modFeedbackGetNonRespondentsRequest.courseid) &&
        Objects.equals(this.feedbackid, modFeedbackGetNonRespondentsRequest.feedbackid) &&
        Objects.equals(this.groupid, modFeedbackGetNonRespondentsRequest.groupid) &&
        Objects.equals(this.page, modFeedbackGetNonRespondentsRequest.page) &&
        Objects.equals(this.perpage, modFeedbackGetNonRespondentsRequest.perpage) &&
        Objects.equals(this.sort, modFeedbackGetNonRespondentsRequest.sort);
  }

  @Override
  public int hashCode() {
    return Objects.hash(courseid, feedbackid, groupid, page, perpage, sort);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModFeedbackGetNonRespondentsRequest {\n");
    sb.append("    courseid: ").append(toIndentedString(courseid)).append("\n");
    sb.append("    feedbackid: ").append(toIndentedString(feedbackid)).append("\n");
    sb.append("    groupid: ").append(toIndentedString(groupid)).append("\n");
    sb.append("    page: ").append(toIndentedString(page)).append("\n");
    sb.append("    perpage: ").append(toIndentedString(perpage)).append("\n");
    sb.append("    sort: ").append(toIndentedString(sort)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("courseid");
    openapiFields.add("feedbackid");
    openapiFields.add("groupid");
    openapiFields.add("page");
    openapiFields.add("perpage");
    openapiFields.add("sort");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("feedbackid");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ModFeedbackGetNonRespondentsRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ModFeedbackGetNonRespondentsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModFeedbackGetNonRespondentsRequest is not found in the empty JSON string", ModFeedbackGetNonRespondentsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ModFeedbackGetNonRespondentsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModFeedbackGetNonRespondentsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ModFeedbackGetNonRespondentsRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("sort") != null && !jsonObj.get("sort").isJsonNull()) && !jsonObj.get("sort").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sort` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sort").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModFeedbackGetNonRespondentsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModFeedbackGetNonRespondentsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModFeedbackGetNonRespondentsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModFeedbackGetNonRespondentsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ModFeedbackGetNonRespondentsRequest>() {
           @Override
           public void write(JsonWriter out, ModFeedbackGetNonRespondentsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModFeedbackGetNonRespondentsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ModFeedbackGetNonRespondentsRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ModFeedbackGetNonRespondentsRequest
  * @throws IOException if the JSON string is invalid with respect to ModFeedbackGetNonRespondentsRequest
  */
  public static ModFeedbackGetNonRespondentsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModFeedbackGetNonRespondentsRequest.class);
  }

 /**
  * Convert an instance of ModFeedbackGetNonRespondentsRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

