/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.joshuapare.JSON;

/**
 * ToolTemplatelibraryListTemplatesRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-18T14:00:07.069642-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class ToolTemplatelibraryListTemplatesRequest {
  public static final String SERIALIZED_NAME_COMPONENT = "component";
  @SerializedName(SERIALIZED_NAME_COMPONENT)
  private String component = "";

  public static final String SERIALIZED_NAME_SEARCH = "search";
  @SerializedName(SERIALIZED_NAME_SEARCH)
  private String search = "";

  public static final String SERIALIZED_NAME_THEMENAME = "themename";
  @SerializedName(SERIALIZED_NAME_THEMENAME)
  private String themename = "";

  public ToolTemplatelibraryListTemplatesRequest() {
  }

  public ToolTemplatelibraryListTemplatesRequest component(String component) {
    this.component = component;
    return this;
  }

   /**
   * The component to search
   * @return component
  **/
  @javax.annotation.Nullable
  public String getComponent() {
    return component;
  }

  public void setComponent(String component) {
    this.component = component;
  }


  public ToolTemplatelibraryListTemplatesRequest search(String search) {
    this.search = search;
    return this;
  }

   /**
   * The search string
   * @return search
  **/
  @javax.annotation.Nullable
  public String getSearch() {
    return search;
  }

  public void setSearch(String search) {
    this.search = search;
  }


  public ToolTemplatelibraryListTemplatesRequest themename(String themename) {
    this.themename = themename;
    return this;
  }

   /**
   * The current theme
   * @return themename
  **/
  @javax.annotation.Nullable
  public String getThemename() {
    return themename;
  }

  public void setThemename(String themename) {
    this.themename = themename;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ToolTemplatelibraryListTemplatesRequest toolTemplatelibraryListTemplatesRequest = (ToolTemplatelibraryListTemplatesRequest) o;
    return Objects.equals(this.component, toolTemplatelibraryListTemplatesRequest.component) &&
        Objects.equals(this.search, toolTemplatelibraryListTemplatesRequest.search) &&
        Objects.equals(this.themename, toolTemplatelibraryListTemplatesRequest.themename);
  }

  @Override
  public int hashCode() {
    return Objects.hash(component, search, themename);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ToolTemplatelibraryListTemplatesRequest {\n");
    sb.append("    component: ").append(toIndentedString(component)).append("\n");
    sb.append("    search: ").append(toIndentedString(search)).append("\n");
    sb.append("    themename: ").append(toIndentedString(themename)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("component");
    openapiFields.add("search");
    openapiFields.add("themename");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ToolTemplatelibraryListTemplatesRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ToolTemplatelibraryListTemplatesRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ToolTemplatelibraryListTemplatesRequest is not found in the empty JSON string", ToolTemplatelibraryListTemplatesRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ToolTemplatelibraryListTemplatesRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ToolTemplatelibraryListTemplatesRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("component") != null && !jsonObj.get("component").isJsonNull()) && !jsonObj.get("component").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `component` to be a primitive type in the JSON string but got `%s`", jsonObj.get("component").toString()));
      }
      if ((jsonObj.get("search") != null && !jsonObj.get("search").isJsonNull()) && !jsonObj.get("search").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `search` to be a primitive type in the JSON string but got `%s`", jsonObj.get("search").toString()));
      }
      if ((jsonObj.get("themename") != null && !jsonObj.get("themename").isJsonNull()) && !jsonObj.get("themename").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `themename` to be a primitive type in the JSON string but got `%s`", jsonObj.get("themename").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ToolTemplatelibraryListTemplatesRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ToolTemplatelibraryListTemplatesRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ToolTemplatelibraryListTemplatesRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ToolTemplatelibraryListTemplatesRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ToolTemplatelibraryListTemplatesRequest>() {
           @Override
           public void write(JsonWriter out, ToolTemplatelibraryListTemplatesRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ToolTemplatelibraryListTemplatesRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ToolTemplatelibraryListTemplatesRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ToolTemplatelibraryListTemplatesRequest
  * @throws IOException if the JSON string is invalid with respect to ToolTemplatelibraryListTemplatesRequest
  */
  public static ToolTemplatelibraryListTemplatesRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ToolTemplatelibraryListTemplatesRequest.class);
  }

 /**
  * Convert an instance of ToolTemplatelibraryListTemplatesRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

