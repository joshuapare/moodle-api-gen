/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.joshuapare.JSON;

/**
 * CoreMessageGetConversation200ResponseMembersInnerContactrequestsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-18T14:00:07.069642-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class CoreMessageGetConversation200ResponseMembersInnerContactrequestsInner {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id = null;

  public static final String SERIALIZED_NAME_REQUESTEDUSERID = "requesteduserid";
  @SerializedName(SERIALIZED_NAME_REQUESTEDUSERID)
  private Integer requesteduserid = null;

  public static final String SERIALIZED_NAME_TIMECREATED = "timecreated";
  @SerializedName(SERIALIZED_NAME_TIMECREATED)
  private Integer timecreated = null;

  public static final String SERIALIZED_NAME_USERID = "userid";
  @SerializedName(SERIALIZED_NAME_USERID)
  private Integer userid = null;

  public CoreMessageGetConversation200ResponseMembersInnerContactrequestsInner() {
  }

  public CoreMessageGetConversation200ResponseMembersInnerContactrequestsInner id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * The id of the contact request
   * @return id
  **/
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public CoreMessageGetConversation200ResponseMembersInnerContactrequestsInner requesteduserid(Integer requesteduserid) {
    this.requesteduserid = requesteduserid;
    return this;
  }

   /**
   * The id of the user confirming the request
   * @return requesteduserid
  **/
  @javax.annotation.Nullable
  public Integer getRequesteduserid() {
    return requesteduserid;
  }

  public void setRequesteduserid(Integer requesteduserid) {
    this.requesteduserid = requesteduserid;
  }


  public CoreMessageGetConversation200ResponseMembersInnerContactrequestsInner timecreated(Integer timecreated) {
    this.timecreated = timecreated;
    return this;
  }

   /**
   * The timecreated timestamp for the contact request
   * @return timecreated
  **/
  @javax.annotation.Nullable
  public Integer getTimecreated() {
    return timecreated;
  }

  public void setTimecreated(Integer timecreated) {
    this.timecreated = timecreated;
  }


  public CoreMessageGetConversation200ResponseMembersInnerContactrequestsInner userid(Integer userid) {
    this.userid = userid;
    return this;
  }

   /**
   * The id of the user who created the contact request
   * @return userid
  **/
  @javax.annotation.Nullable
  public Integer getUserid() {
    return userid;
  }

  public void setUserid(Integer userid) {
    this.userid = userid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CoreMessageGetConversation200ResponseMembersInnerContactrequestsInner coreMessageGetConversation200ResponseMembersInnerContactrequestsInner = (CoreMessageGetConversation200ResponseMembersInnerContactrequestsInner) o;
    return Objects.equals(this.id, coreMessageGetConversation200ResponseMembersInnerContactrequestsInner.id) &&
        Objects.equals(this.requesteduserid, coreMessageGetConversation200ResponseMembersInnerContactrequestsInner.requesteduserid) &&
        Objects.equals(this.timecreated, coreMessageGetConversation200ResponseMembersInnerContactrequestsInner.timecreated) &&
        Objects.equals(this.userid, coreMessageGetConversation200ResponseMembersInnerContactrequestsInner.userid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, requesteduserid, timecreated, userid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CoreMessageGetConversation200ResponseMembersInnerContactrequestsInner {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    requesteduserid: ").append(toIndentedString(requesteduserid)).append("\n");
    sb.append("    timecreated: ").append(toIndentedString(timecreated)).append("\n");
    sb.append("    userid: ").append(toIndentedString(userid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("requesteduserid");
    openapiFields.add("timecreated");
    openapiFields.add("userid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CoreMessageGetConversation200ResponseMembersInnerContactrequestsInner
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CoreMessageGetConversation200ResponseMembersInnerContactrequestsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CoreMessageGetConversation200ResponseMembersInnerContactrequestsInner is not found in the empty JSON string", CoreMessageGetConversation200ResponseMembersInnerContactrequestsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CoreMessageGetConversation200ResponseMembersInnerContactrequestsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CoreMessageGetConversation200ResponseMembersInnerContactrequestsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CoreMessageGetConversation200ResponseMembersInnerContactrequestsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CoreMessageGetConversation200ResponseMembersInnerContactrequestsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CoreMessageGetConversation200ResponseMembersInnerContactrequestsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CoreMessageGetConversation200ResponseMembersInnerContactrequestsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<CoreMessageGetConversation200ResponseMembersInnerContactrequestsInner>() {
           @Override
           public void write(JsonWriter out, CoreMessageGetConversation200ResponseMembersInnerContactrequestsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CoreMessageGetConversation200ResponseMembersInnerContactrequestsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CoreMessageGetConversation200ResponseMembersInnerContactrequestsInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CoreMessageGetConversation200ResponseMembersInnerContactrequestsInner
  * @throws IOException if the JSON string is invalid with respect to CoreMessageGetConversation200ResponseMembersInnerContactrequestsInner
  */
  public static CoreMessageGetConversation200ResponseMembersInnerContactrequestsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CoreMessageGetConversation200ResponseMembersInnerContactrequestsInner.class);
  }

 /**
  * Convert an instance of CoreMessageGetConversation200ResponseMembersInnerContactrequestsInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

