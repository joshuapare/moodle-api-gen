/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AuthEmailSignupUser200ResponseWarningsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.joshuapare.JSON;

/**
 * ModForumGetForumAccessInformation200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-18T20:58:28.689161-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class ModForumGetForumAccessInformation200Response {
  public static final String SERIALIZED_NAME_CANADDINSTANCE = "canaddinstance";
  @SerializedName(SERIALIZED_NAME_CANADDINSTANCE)
  private Boolean canaddinstance = null;

  public static final String SERIALIZED_NAME_CANADDNEWS = "canaddnews";
  @SerializedName(SERIALIZED_NAME_CANADDNEWS)
  private Boolean canaddnews = null;

  public static final String SERIALIZED_NAME_CANADDQUESTION = "canaddquestion";
  @SerializedName(SERIALIZED_NAME_CANADDQUESTION)
  private Boolean canaddquestion = null;

  public static final String SERIALIZED_NAME_CANALLOWFORCESUBSCRIBE = "canallowforcesubscribe";
  @SerializedName(SERIALIZED_NAME_CANALLOWFORCESUBSCRIBE)
  private Boolean canallowforcesubscribe = null;

  public static final String SERIALIZED_NAME_CANCANMAILNOW = "cancanmailnow";
  @SerializedName(SERIALIZED_NAME_CANCANMAILNOW)
  private Boolean cancanmailnow = null;

  public static final String SERIALIZED_NAME_CANCANOVERRIDECUTOFF = "cancanoverridecutoff";
  @SerializedName(SERIALIZED_NAME_CANCANOVERRIDECUTOFF)
  private Boolean cancanoverridecutoff = null;

  public static final String SERIALIZED_NAME_CANCANOVERRIDEDISCUSSIONLOCK = "cancanoverridediscussionlock";
  @SerializedName(SERIALIZED_NAME_CANCANOVERRIDEDISCUSSIONLOCK)
  private Boolean cancanoverridediscussionlock = null;

  public static final String SERIALIZED_NAME_CANCANPOSTTOMYGROUPS = "cancanposttomygroups";
  @SerializedName(SERIALIZED_NAME_CANCANPOSTTOMYGROUPS)
  private Boolean cancanposttomygroups = null;

  public static final String SERIALIZED_NAME_CANCANTOGGLEFAVOURITE = "cancantogglefavourite";
  @SerializedName(SERIALIZED_NAME_CANCANTOGGLEFAVOURITE)
  private Boolean cancantogglefavourite = null;

  public static final String SERIALIZED_NAME_CANCREATEATTACHMENT = "cancreateattachment";
  @SerializedName(SERIALIZED_NAME_CANCREATEATTACHMENT)
  private Boolean cancreateattachment = null;

  public static final String SERIALIZED_NAME_CANDELETEANYPOST = "candeleteanypost";
  @SerializedName(SERIALIZED_NAME_CANDELETEANYPOST)
  private Boolean candeleteanypost = null;

  public static final String SERIALIZED_NAME_CANDELETEOWNPOST = "candeleteownpost";
  @SerializedName(SERIALIZED_NAME_CANDELETEOWNPOST)
  private Boolean candeleteownpost = null;

  public static final String SERIALIZED_NAME_CANEDITANYPOST = "caneditanypost";
  @SerializedName(SERIALIZED_NAME_CANEDITANYPOST)
  private Boolean caneditanypost = null;

  public static final String SERIALIZED_NAME_CANEXPORTDISCUSSION = "canexportdiscussion";
  @SerializedName(SERIALIZED_NAME_CANEXPORTDISCUSSION)
  private Boolean canexportdiscussion = null;

  public static final String SERIALIZED_NAME_CANEXPORTFORUM = "canexportforum";
  @SerializedName(SERIALIZED_NAME_CANEXPORTFORUM)
  private Boolean canexportforum = null;

  public static final String SERIALIZED_NAME_CANEXPORTOWNPOST = "canexportownpost";
  @SerializedName(SERIALIZED_NAME_CANEXPORTOWNPOST)
  private Boolean canexportownpost = null;

  public static final String SERIALIZED_NAME_CANEXPORTPOST = "canexportpost";
  @SerializedName(SERIALIZED_NAME_CANEXPORTPOST)
  private Boolean canexportpost = null;

  public static final String SERIALIZED_NAME_CANGRADE = "cangrade";
  @SerializedName(SERIALIZED_NAME_CANGRADE)
  private Boolean cangrade = null;

  public static final String SERIALIZED_NAME_CANMANAGESUBSCRIPTIONS = "canmanagesubscriptions";
  @SerializedName(SERIALIZED_NAME_CANMANAGESUBSCRIPTIONS)
  private Boolean canmanagesubscriptions = null;

  public static final String SERIALIZED_NAME_CANMOVEDISCUSSIONS = "canmovediscussions";
  @SerializedName(SERIALIZED_NAME_CANMOVEDISCUSSIONS)
  private Boolean canmovediscussions = null;

  public static final String SERIALIZED_NAME_CANPINDISCUSSIONS = "canpindiscussions";
  @SerializedName(SERIALIZED_NAME_CANPINDISCUSSIONS)
  private Boolean canpindiscussions = null;

  public static final String SERIALIZED_NAME_CANPOSTPRIVATEREPLY = "canpostprivatereply";
  @SerializedName(SERIALIZED_NAME_CANPOSTPRIVATEREPLY)
  private Boolean canpostprivatereply = null;

  public static final String SERIALIZED_NAME_CANPOSTWITHOUTTHROTTLING = "canpostwithoutthrottling";
  @SerializedName(SERIALIZED_NAME_CANPOSTWITHOUTTHROTTLING)
  private Boolean canpostwithoutthrottling = null;

  public static final String SERIALIZED_NAME_CANRATE = "canrate";
  @SerializedName(SERIALIZED_NAME_CANRATE)
  private Boolean canrate = null;

  public static final String SERIALIZED_NAME_CANREADPRIVATEREPLIES = "canreadprivatereplies";
  @SerializedName(SERIALIZED_NAME_CANREADPRIVATEREPLIES)
  private Boolean canreadprivatereplies = null;

  public static final String SERIALIZED_NAME_CANREPLYNEWS = "canreplynews";
  @SerializedName(SERIALIZED_NAME_CANREPLYNEWS)
  private Boolean canreplynews = null;

  public static final String SERIALIZED_NAME_CANREPLYPOST = "canreplypost";
  @SerializedName(SERIALIZED_NAME_CANREPLYPOST)
  private Boolean canreplypost = null;

  public static final String SERIALIZED_NAME_CANSPLITDISCUSSIONS = "cansplitdiscussions";
  @SerializedName(SERIALIZED_NAME_CANSPLITDISCUSSIONS)
  private Boolean cansplitdiscussions = null;

  public static final String SERIALIZED_NAME_CANSTARTDISCUSSION = "canstartdiscussion";
  @SerializedName(SERIALIZED_NAME_CANSTARTDISCUSSION)
  private Boolean canstartdiscussion = null;

  public static final String SERIALIZED_NAME_CANVIEWALLRATINGS = "canviewallratings";
  @SerializedName(SERIALIZED_NAME_CANVIEWALLRATINGS)
  private Boolean canviewallratings = null;

  public static final String SERIALIZED_NAME_CANVIEWANYRATING = "canviewanyrating";
  @SerializedName(SERIALIZED_NAME_CANVIEWANYRATING)
  private Boolean canviewanyrating = null;

  public static final String SERIALIZED_NAME_CANVIEWDISCUSSION = "canviewdiscussion";
  @SerializedName(SERIALIZED_NAME_CANVIEWDISCUSSION)
  private Boolean canviewdiscussion = null;

  public static final String SERIALIZED_NAME_CANVIEWHIDDENTIMEDPOSTS = "canviewhiddentimedposts";
  @SerializedName(SERIALIZED_NAME_CANVIEWHIDDENTIMEDPOSTS)
  private Boolean canviewhiddentimedposts = null;

  public static final String SERIALIZED_NAME_CANVIEWQANDAWITHOUTPOSTING = "canviewqandawithoutposting";
  @SerializedName(SERIALIZED_NAME_CANVIEWQANDAWITHOUTPOSTING)
  private Boolean canviewqandawithoutposting = null;

  public static final String SERIALIZED_NAME_CANVIEWRATING = "canviewrating";
  @SerializedName(SERIALIZED_NAME_CANVIEWRATING)
  private Boolean canviewrating = null;

  public static final String SERIALIZED_NAME_CANVIEWSUBSCRIBERS = "canviewsubscribers";
  @SerializedName(SERIALIZED_NAME_CANVIEWSUBSCRIBERS)
  private Boolean canviewsubscribers = null;

  public static final String SERIALIZED_NAME_WARNINGS = "warnings";
  @SerializedName(SERIALIZED_NAME_WARNINGS)
  private List<AuthEmailSignupUser200ResponseWarningsInner> warnings = new ArrayList<>();

  public ModForumGetForumAccessInformation200Response() {
  }

  public ModForumGetForumAccessInformation200Response canaddinstance(Boolean canaddinstance) {
    this.canaddinstance = canaddinstance;
    return this;
  }

   /**
   * Whether the user has the capability mod/forum:addinstance allowed.
   * @return canaddinstance
  **/
  @javax.annotation.Nullable
  public Boolean getCanaddinstance() {
    return canaddinstance;
  }

  public void setCanaddinstance(Boolean canaddinstance) {
    this.canaddinstance = canaddinstance;
  }


  public ModForumGetForumAccessInformation200Response canaddnews(Boolean canaddnews) {
    this.canaddnews = canaddnews;
    return this;
  }

   /**
   * Whether the user has the capability mod/forum:addnews allowed.
   * @return canaddnews
  **/
  @javax.annotation.Nullable
  public Boolean getCanaddnews() {
    return canaddnews;
  }

  public void setCanaddnews(Boolean canaddnews) {
    this.canaddnews = canaddnews;
  }


  public ModForumGetForumAccessInformation200Response canaddquestion(Boolean canaddquestion) {
    this.canaddquestion = canaddquestion;
    return this;
  }

   /**
   * Whether the user has the capability mod/forum:addquestion allowed.
   * @return canaddquestion
  **/
  @javax.annotation.Nullable
  public Boolean getCanaddquestion() {
    return canaddquestion;
  }

  public void setCanaddquestion(Boolean canaddquestion) {
    this.canaddquestion = canaddquestion;
  }


  public ModForumGetForumAccessInformation200Response canallowforcesubscribe(Boolean canallowforcesubscribe) {
    this.canallowforcesubscribe = canallowforcesubscribe;
    return this;
  }

   /**
   * Whether the user has the capability mod/forum:allowforcesubscribe allowed.
   * @return canallowforcesubscribe
  **/
  @javax.annotation.Nullable
  public Boolean getCanallowforcesubscribe() {
    return canallowforcesubscribe;
  }

  public void setCanallowforcesubscribe(Boolean canallowforcesubscribe) {
    this.canallowforcesubscribe = canallowforcesubscribe;
  }


  public ModForumGetForumAccessInformation200Response cancanmailnow(Boolean cancanmailnow) {
    this.cancanmailnow = cancanmailnow;
    return this;
  }

   /**
   * Whether the user has the capability mod/forum:canmailnow allowed.
   * @return cancanmailnow
  **/
  @javax.annotation.Nullable
  public Boolean getCancanmailnow() {
    return cancanmailnow;
  }

  public void setCancanmailnow(Boolean cancanmailnow) {
    this.cancanmailnow = cancanmailnow;
  }


  public ModForumGetForumAccessInformation200Response cancanoverridecutoff(Boolean cancanoverridecutoff) {
    this.cancanoverridecutoff = cancanoverridecutoff;
    return this;
  }

   /**
   * Whether the user has the capability mod/forum:canoverridecutoff allowed.
   * @return cancanoverridecutoff
  **/
  @javax.annotation.Nullable
  public Boolean getCancanoverridecutoff() {
    return cancanoverridecutoff;
  }

  public void setCancanoverridecutoff(Boolean cancanoverridecutoff) {
    this.cancanoverridecutoff = cancanoverridecutoff;
  }


  public ModForumGetForumAccessInformation200Response cancanoverridediscussionlock(Boolean cancanoverridediscussionlock) {
    this.cancanoverridediscussionlock = cancanoverridediscussionlock;
    return this;
  }

   /**
   * Whether the user has the capability mod/forum:canoverridediscussionlock allowed.
   * @return cancanoverridediscussionlock
  **/
  @javax.annotation.Nullable
  public Boolean getCancanoverridediscussionlock() {
    return cancanoverridediscussionlock;
  }

  public void setCancanoverridediscussionlock(Boolean cancanoverridediscussionlock) {
    this.cancanoverridediscussionlock = cancanoverridediscussionlock;
  }


  public ModForumGetForumAccessInformation200Response cancanposttomygroups(Boolean cancanposttomygroups) {
    this.cancanposttomygroups = cancanposttomygroups;
    return this;
  }

   /**
   * Whether the user has the capability mod/forum:canposttomygroups allowed.
   * @return cancanposttomygroups
  **/
  @javax.annotation.Nullable
  public Boolean getCancanposttomygroups() {
    return cancanposttomygroups;
  }

  public void setCancanposttomygroups(Boolean cancanposttomygroups) {
    this.cancanposttomygroups = cancanposttomygroups;
  }


  public ModForumGetForumAccessInformation200Response cancantogglefavourite(Boolean cancantogglefavourite) {
    this.cancantogglefavourite = cancantogglefavourite;
    return this;
  }

   /**
   * Whether the user has the capability mod/forum:cantogglefavourite allowed.
   * @return cancantogglefavourite
  **/
  @javax.annotation.Nullable
  public Boolean getCancantogglefavourite() {
    return cancantogglefavourite;
  }

  public void setCancantogglefavourite(Boolean cancantogglefavourite) {
    this.cancantogglefavourite = cancantogglefavourite;
  }


  public ModForumGetForumAccessInformation200Response cancreateattachment(Boolean cancreateattachment) {
    this.cancreateattachment = cancreateattachment;
    return this;
  }

   /**
   * Whether the user has the capability mod/forum:createattachment allowed.
   * @return cancreateattachment
  **/
  @javax.annotation.Nullable
  public Boolean getCancreateattachment() {
    return cancreateattachment;
  }

  public void setCancreateattachment(Boolean cancreateattachment) {
    this.cancreateattachment = cancreateattachment;
  }


  public ModForumGetForumAccessInformation200Response candeleteanypost(Boolean candeleteanypost) {
    this.candeleteanypost = candeleteanypost;
    return this;
  }

   /**
   * Whether the user has the capability mod/forum:deleteanypost allowed.
   * @return candeleteanypost
  **/
  @javax.annotation.Nullable
  public Boolean getCandeleteanypost() {
    return candeleteanypost;
  }

  public void setCandeleteanypost(Boolean candeleteanypost) {
    this.candeleteanypost = candeleteanypost;
  }


  public ModForumGetForumAccessInformation200Response candeleteownpost(Boolean candeleteownpost) {
    this.candeleteownpost = candeleteownpost;
    return this;
  }

   /**
   * Whether the user has the capability mod/forum:deleteownpost allowed.
   * @return candeleteownpost
  **/
  @javax.annotation.Nullable
  public Boolean getCandeleteownpost() {
    return candeleteownpost;
  }

  public void setCandeleteownpost(Boolean candeleteownpost) {
    this.candeleteownpost = candeleteownpost;
  }


  public ModForumGetForumAccessInformation200Response caneditanypost(Boolean caneditanypost) {
    this.caneditanypost = caneditanypost;
    return this;
  }

   /**
   * Whether the user has the capability mod/forum:editanypost allowed.
   * @return caneditanypost
  **/
  @javax.annotation.Nullable
  public Boolean getCaneditanypost() {
    return caneditanypost;
  }

  public void setCaneditanypost(Boolean caneditanypost) {
    this.caneditanypost = caneditanypost;
  }


  public ModForumGetForumAccessInformation200Response canexportdiscussion(Boolean canexportdiscussion) {
    this.canexportdiscussion = canexportdiscussion;
    return this;
  }

   /**
   * Whether the user has the capability mod/forum:exportdiscussion allowed.
   * @return canexportdiscussion
  **/
  @javax.annotation.Nullable
  public Boolean getCanexportdiscussion() {
    return canexportdiscussion;
  }

  public void setCanexportdiscussion(Boolean canexportdiscussion) {
    this.canexportdiscussion = canexportdiscussion;
  }


  public ModForumGetForumAccessInformation200Response canexportforum(Boolean canexportforum) {
    this.canexportforum = canexportforum;
    return this;
  }

   /**
   * Whether the user has the capability mod/forum:exportforum allowed.
   * @return canexportforum
  **/
  @javax.annotation.Nullable
  public Boolean getCanexportforum() {
    return canexportforum;
  }

  public void setCanexportforum(Boolean canexportforum) {
    this.canexportforum = canexportforum;
  }


  public ModForumGetForumAccessInformation200Response canexportownpost(Boolean canexportownpost) {
    this.canexportownpost = canexportownpost;
    return this;
  }

   /**
   * Whether the user has the capability mod/forum:exportownpost allowed.
   * @return canexportownpost
  **/
  @javax.annotation.Nullable
  public Boolean getCanexportownpost() {
    return canexportownpost;
  }

  public void setCanexportownpost(Boolean canexportownpost) {
    this.canexportownpost = canexportownpost;
  }


  public ModForumGetForumAccessInformation200Response canexportpost(Boolean canexportpost) {
    this.canexportpost = canexportpost;
    return this;
  }

   /**
   * Whether the user has the capability mod/forum:exportpost allowed.
   * @return canexportpost
  **/
  @javax.annotation.Nullable
  public Boolean getCanexportpost() {
    return canexportpost;
  }

  public void setCanexportpost(Boolean canexportpost) {
    this.canexportpost = canexportpost;
  }


  public ModForumGetForumAccessInformation200Response cangrade(Boolean cangrade) {
    this.cangrade = cangrade;
    return this;
  }

   /**
   * Whether the user has the capability mod/forum:grade allowed.
   * @return cangrade
  **/
  @javax.annotation.Nullable
  public Boolean getCangrade() {
    return cangrade;
  }

  public void setCangrade(Boolean cangrade) {
    this.cangrade = cangrade;
  }


  public ModForumGetForumAccessInformation200Response canmanagesubscriptions(Boolean canmanagesubscriptions) {
    this.canmanagesubscriptions = canmanagesubscriptions;
    return this;
  }

   /**
   * Whether the user has the capability mod/forum:managesubscriptions allowed.
   * @return canmanagesubscriptions
  **/
  @javax.annotation.Nullable
  public Boolean getCanmanagesubscriptions() {
    return canmanagesubscriptions;
  }

  public void setCanmanagesubscriptions(Boolean canmanagesubscriptions) {
    this.canmanagesubscriptions = canmanagesubscriptions;
  }


  public ModForumGetForumAccessInformation200Response canmovediscussions(Boolean canmovediscussions) {
    this.canmovediscussions = canmovediscussions;
    return this;
  }

   /**
   * Whether the user has the capability mod/forum:movediscussions allowed.
   * @return canmovediscussions
  **/
  @javax.annotation.Nullable
  public Boolean getCanmovediscussions() {
    return canmovediscussions;
  }

  public void setCanmovediscussions(Boolean canmovediscussions) {
    this.canmovediscussions = canmovediscussions;
  }


  public ModForumGetForumAccessInformation200Response canpindiscussions(Boolean canpindiscussions) {
    this.canpindiscussions = canpindiscussions;
    return this;
  }

   /**
   * Whether the user has the capability mod/forum:pindiscussions allowed.
   * @return canpindiscussions
  **/
  @javax.annotation.Nullable
  public Boolean getCanpindiscussions() {
    return canpindiscussions;
  }

  public void setCanpindiscussions(Boolean canpindiscussions) {
    this.canpindiscussions = canpindiscussions;
  }


  public ModForumGetForumAccessInformation200Response canpostprivatereply(Boolean canpostprivatereply) {
    this.canpostprivatereply = canpostprivatereply;
    return this;
  }

   /**
   * Whether the user has the capability mod/forum:postprivatereply allowed.
   * @return canpostprivatereply
  **/
  @javax.annotation.Nullable
  public Boolean getCanpostprivatereply() {
    return canpostprivatereply;
  }

  public void setCanpostprivatereply(Boolean canpostprivatereply) {
    this.canpostprivatereply = canpostprivatereply;
  }


  public ModForumGetForumAccessInformation200Response canpostwithoutthrottling(Boolean canpostwithoutthrottling) {
    this.canpostwithoutthrottling = canpostwithoutthrottling;
    return this;
  }

   /**
   * Whether the user has the capability mod/forum:postwithoutthrottling allowed.
   * @return canpostwithoutthrottling
  **/
  @javax.annotation.Nullable
  public Boolean getCanpostwithoutthrottling() {
    return canpostwithoutthrottling;
  }

  public void setCanpostwithoutthrottling(Boolean canpostwithoutthrottling) {
    this.canpostwithoutthrottling = canpostwithoutthrottling;
  }


  public ModForumGetForumAccessInformation200Response canrate(Boolean canrate) {
    this.canrate = canrate;
    return this;
  }

   /**
   * Whether the user has the capability mod/forum:rate allowed.
   * @return canrate
  **/
  @javax.annotation.Nullable
  public Boolean getCanrate() {
    return canrate;
  }

  public void setCanrate(Boolean canrate) {
    this.canrate = canrate;
  }


  public ModForumGetForumAccessInformation200Response canreadprivatereplies(Boolean canreadprivatereplies) {
    this.canreadprivatereplies = canreadprivatereplies;
    return this;
  }

   /**
   * Whether the user has the capability mod/forum:readprivatereplies allowed.
   * @return canreadprivatereplies
  **/
  @javax.annotation.Nullable
  public Boolean getCanreadprivatereplies() {
    return canreadprivatereplies;
  }

  public void setCanreadprivatereplies(Boolean canreadprivatereplies) {
    this.canreadprivatereplies = canreadprivatereplies;
  }


  public ModForumGetForumAccessInformation200Response canreplynews(Boolean canreplynews) {
    this.canreplynews = canreplynews;
    return this;
  }

   /**
   * Whether the user has the capability mod/forum:replynews allowed.
   * @return canreplynews
  **/
  @javax.annotation.Nullable
  public Boolean getCanreplynews() {
    return canreplynews;
  }

  public void setCanreplynews(Boolean canreplynews) {
    this.canreplynews = canreplynews;
  }


  public ModForumGetForumAccessInformation200Response canreplypost(Boolean canreplypost) {
    this.canreplypost = canreplypost;
    return this;
  }

   /**
   * Whether the user has the capability mod/forum:replypost allowed.
   * @return canreplypost
  **/
  @javax.annotation.Nullable
  public Boolean getCanreplypost() {
    return canreplypost;
  }

  public void setCanreplypost(Boolean canreplypost) {
    this.canreplypost = canreplypost;
  }


  public ModForumGetForumAccessInformation200Response cansplitdiscussions(Boolean cansplitdiscussions) {
    this.cansplitdiscussions = cansplitdiscussions;
    return this;
  }

   /**
   * Whether the user has the capability mod/forum:splitdiscussions allowed.
   * @return cansplitdiscussions
  **/
  @javax.annotation.Nullable
  public Boolean getCansplitdiscussions() {
    return cansplitdiscussions;
  }

  public void setCansplitdiscussions(Boolean cansplitdiscussions) {
    this.cansplitdiscussions = cansplitdiscussions;
  }


  public ModForumGetForumAccessInformation200Response canstartdiscussion(Boolean canstartdiscussion) {
    this.canstartdiscussion = canstartdiscussion;
    return this;
  }

   /**
   * Whether the user has the capability mod/forum:startdiscussion allowed.
   * @return canstartdiscussion
  **/
  @javax.annotation.Nullable
  public Boolean getCanstartdiscussion() {
    return canstartdiscussion;
  }

  public void setCanstartdiscussion(Boolean canstartdiscussion) {
    this.canstartdiscussion = canstartdiscussion;
  }


  public ModForumGetForumAccessInformation200Response canviewallratings(Boolean canviewallratings) {
    this.canviewallratings = canviewallratings;
    return this;
  }

   /**
   * Whether the user has the capability mod/forum:viewallratings allowed.
   * @return canviewallratings
  **/
  @javax.annotation.Nullable
  public Boolean getCanviewallratings() {
    return canviewallratings;
  }

  public void setCanviewallratings(Boolean canviewallratings) {
    this.canviewallratings = canviewallratings;
  }


  public ModForumGetForumAccessInformation200Response canviewanyrating(Boolean canviewanyrating) {
    this.canviewanyrating = canviewanyrating;
    return this;
  }

   /**
   * Whether the user has the capability mod/forum:viewanyrating allowed.
   * @return canviewanyrating
  **/
  @javax.annotation.Nullable
  public Boolean getCanviewanyrating() {
    return canviewanyrating;
  }

  public void setCanviewanyrating(Boolean canviewanyrating) {
    this.canviewanyrating = canviewanyrating;
  }


  public ModForumGetForumAccessInformation200Response canviewdiscussion(Boolean canviewdiscussion) {
    this.canviewdiscussion = canviewdiscussion;
    return this;
  }

   /**
   * Whether the user has the capability mod/forum:viewdiscussion allowed.
   * @return canviewdiscussion
  **/
  @javax.annotation.Nullable
  public Boolean getCanviewdiscussion() {
    return canviewdiscussion;
  }

  public void setCanviewdiscussion(Boolean canviewdiscussion) {
    this.canviewdiscussion = canviewdiscussion;
  }


  public ModForumGetForumAccessInformation200Response canviewhiddentimedposts(Boolean canviewhiddentimedposts) {
    this.canviewhiddentimedposts = canviewhiddentimedposts;
    return this;
  }

   /**
   * Whether the user has the capability mod/forum:viewhiddentimedposts allowed.
   * @return canviewhiddentimedposts
  **/
  @javax.annotation.Nullable
  public Boolean getCanviewhiddentimedposts() {
    return canviewhiddentimedposts;
  }

  public void setCanviewhiddentimedposts(Boolean canviewhiddentimedposts) {
    this.canviewhiddentimedposts = canviewhiddentimedposts;
  }


  public ModForumGetForumAccessInformation200Response canviewqandawithoutposting(Boolean canviewqandawithoutposting) {
    this.canviewqandawithoutposting = canviewqandawithoutposting;
    return this;
  }

   /**
   * Whether the user has the capability mod/forum:viewqandawithoutposting allowed.
   * @return canviewqandawithoutposting
  **/
  @javax.annotation.Nullable
  public Boolean getCanviewqandawithoutposting() {
    return canviewqandawithoutposting;
  }

  public void setCanviewqandawithoutposting(Boolean canviewqandawithoutposting) {
    this.canviewqandawithoutposting = canviewqandawithoutposting;
  }


  public ModForumGetForumAccessInformation200Response canviewrating(Boolean canviewrating) {
    this.canviewrating = canviewrating;
    return this;
  }

   /**
   * Whether the user has the capability mod/forum:viewrating allowed.
   * @return canviewrating
  **/
  @javax.annotation.Nullable
  public Boolean getCanviewrating() {
    return canviewrating;
  }

  public void setCanviewrating(Boolean canviewrating) {
    this.canviewrating = canviewrating;
  }


  public ModForumGetForumAccessInformation200Response canviewsubscribers(Boolean canviewsubscribers) {
    this.canviewsubscribers = canviewsubscribers;
    return this;
  }

   /**
   * Whether the user has the capability mod/forum:viewsubscribers allowed.
   * @return canviewsubscribers
  **/
  @javax.annotation.Nullable
  public Boolean getCanviewsubscribers() {
    return canviewsubscribers;
  }

  public void setCanviewsubscribers(Boolean canviewsubscribers) {
    this.canviewsubscribers = canviewsubscribers;
  }


  public ModForumGetForumAccessInformation200Response warnings(List<AuthEmailSignupUser200ResponseWarningsInner> warnings) {
    this.warnings = warnings;
    return this;
  }

  public ModForumGetForumAccessInformation200Response addWarningsItem(AuthEmailSignupUser200ResponseWarningsInner warningsItem) {
    if (this.warnings == null) {
      this.warnings = new ArrayList<>();
    }
    this.warnings.add(warningsItem);
    return this;
  }

   /**
   * Get warnings
   * @return warnings
  **/
  @javax.annotation.Nullable
  public List<AuthEmailSignupUser200ResponseWarningsInner> getWarnings() {
    return warnings;
  }

  public void setWarnings(List<AuthEmailSignupUser200ResponseWarningsInner> warnings) {
    this.warnings = warnings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModForumGetForumAccessInformation200Response modForumGetForumAccessInformation200Response = (ModForumGetForumAccessInformation200Response) o;
    return Objects.equals(this.canaddinstance, modForumGetForumAccessInformation200Response.canaddinstance) &&
        Objects.equals(this.canaddnews, modForumGetForumAccessInformation200Response.canaddnews) &&
        Objects.equals(this.canaddquestion, modForumGetForumAccessInformation200Response.canaddquestion) &&
        Objects.equals(this.canallowforcesubscribe, modForumGetForumAccessInformation200Response.canallowforcesubscribe) &&
        Objects.equals(this.cancanmailnow, modForumGetForumAccessInformation200Response.cancanmailnow) &&
        Objects.equals(this.cancanoverridecutoff, modForumGetForumAccessInformation200Response.cancanoverridecutoff) &&
        Objects.equals(this.cancanoverridediscussionlock, modForumGetForumAccessInformation200Response.cancanoverridediscussionlock) &&
        Objects.equals(this.cancanposttomygroups, modForumGetForumAccessInformation200Response.cancanposttomygroups) &&
        Objects.equals(this.cancantogglefavourite, modForumGetForumAccessInformation200Response.cancantogglefavourite) &&
        Objects.equals(this.cancreateattachment, modForumGetForumAccessInformation200Response.cancreateattachment) &&
        Objects.equals(this.candeleteanypost, modForumGetForumAccessInformation200Response.candeleteanypost) &&
        Objects.equals(this.candeleteownpost, modForumGetForumAccessInformation200Response.candeleteownpost) &&
        Objects.equals(this.caneditanypost, modForumGetForumAccessInformation200Response.caneditanypost) &&
        Objects.equals(this.canexportdiscussion, modForumGetForumAccessInformation200Response.canexportdiscussion) &&
        Objects.equals(this.canexportforum, modForumGetForumAccessInformation200Response.canexportforum) &&
        Objects.equals(this.canexportownpost, modForumGetForumAccessInformation200Response.canexportownpost) &&
        Objects.equals(this.canexportpost, modForumGetForumAccessInformation200Response.canexportpost) &&
        Objects.equals(this.cangrade, modForumGetForumAccessInformation200Response.cangrade) &&
        Objects.equals(this.canmanagesubscriptions, modForumGetForumAccessInformation200Response.canmanagesubscriptions) &&
        Objects.equals(this.canmovediscussions, modForumGetForumAccessInformation200Response.canmovediscussions) &&
        Objects.equals(this.canpindiscussions, modForumGetForumAccessInformation200Response.canpindiscussions) &&
        Objects.equals(this.canpostprivatereply, modForumGetForumAccessInformation200Response.canpostprivatereply) &&
        Objects.equals(this.canpostwithoutthrottling, modForumGetForumAccessInformation200Response.canpostwithoutthrottling) &&
        Objects.equals(this.canrate, modForumGetForumAccessInformation200Response.canrate) &&
        Objects.equals(this.canreadprivatereplies, modForumGetForumAccessInformation200Response.canreadprivatereplies) &&
        Objects.equals(this.canreplynews, modForumGetForumAccessInformation200Response.canreplynews) &&
        Objects.equals(this.canreplypost, modForumGetForumAccessInformation200Response.canreplypost) &&
        Objects.equals(this.cansplitdiscussions, modForumGetForumAccessInformation200Response.cansplitdiscussions) &&
        Objects.equals(this.canstartdiscussion, modForumGetForumAccessInformation200Response.canstartdiscussion) &&
        Objects.equals(this.canviewallratings, modForumGetForumAccessInformation200Response.canviewallratings) &&
        Objects.equals(this.canviewanyrating, modForumGetForumAccessInformation200Response.canviewanyrating) &&
        Objects.equals(this.canviewdiscussion, modForumGetForumAccessInformation200Response.canviewdiscussion) &&
        Objects.equals(this.canviewhiddentimedposts, modForumGetForumAccessInformation200Response.canviewhiddentimedposts) &&
        Objects.equals(this.canviewqandawithoutposting, modForumGetForumAccessInformation200Response.canviewqandawithoutposting) &&
        Objects.equals(this.canviewrating, modForumGetForumAccessInformation200Response.canviewrating) &&
        Objects.equals(this.canviewsubscribers, modForumGetForumAccessInformation200Response.canviewsubscribers) &&
        Objects.equals(this.warnings, modForumGetForumAccessInformation200Response.warnings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(canaddinstance, canaddnews, canaddquestion, canallowforcesubscribe, cancanmailnow, cancanoverridecutoff, cancanoverridediscussionlock, cancanposttomygroups, cancantogglefavourite, cancreateattachment, candeleteanypost, candeleteownpost, caneditanypost, canexportdiscussion, canexportforum, canexportownpost, canexportpost, cangrade, canmanagesubscriptions, canmovediscussions, canpindiscussions, canpostprivatereply, canpostwithoutthrottling, canrate, canreadprivatereplies, canreplynews, canreplypost, cansplitdiscussions, canstartdiscussion, canviewallratings, canviewanyrating, canviewdiscussion, canviewhiddentimedposts, canviewqandawithoutposting, canviewrating, canviewsubscribers, warnings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModForumGetForumAccessInformation200Response {\n");
    sb.append("    canaddinstance: ").append(toIndentedString(canaddinstance)).append("\n");
    sb.append("    canaddnews: ").append(toIndentedString(canaddnews)).append("\n");
    sb.append("    canaddquestion: ").append(toIndentedString(canaddquestion)).append("\n");
    sb.append("    canallowforcesubscribe: ").append(toIndentedString(canallowforcesubscribe)).append("\n");
    sb.append("    cancanmailnow: ").append(toIndentedString(cancanmailnow)).append("\n");
    sb.append("    cancanoverridecutoff: ").append(toIndentedString(cancanoverridecutoff)).append("\n");
    sb.append("    cancanoverridediscussionlock: ").append(toIndentedString(cancanoverridediscussionlock)).append("\n");
    sb.append("    cancanposttomygroups: ").append(toIndentedString(cancanposttomygroups)).append("\n");
    sb.append("    cancantogglefavourite: ").append(toIndentedString(cancantogglefavourite)).append("\n");
    sb.append("    cancreateattachment: ").append(toIndentedString(cancreateattachment)).append("\n");
    sb.append("    candeleteanypost: ").append(toIndentedString(candeleteanypost)).append("\n");
    sb.append("    candeleteownpost: ").append(toIndentedString(candeleteownpost)).append("\n");
    sb.append("    caneditanypost: ").append(toIndentedString(caneditanypost)).append("\n");
    sb.append("    canexportdiscussion: ").append(toIndentedString(canexportdiscussion)).append("\n");
    sb.append("    canexportforum: ").append(toIndentedString(canexportforum)).append("\n");
    sb.append("    canexportownpost: ").append(toIndentedString(canexportownpost)).append("\n");
    sb.append("    canexportpost: ").append(toIndentedString(canexportpost)).append("\n");
    sb.append("    cangrade: ").append(toIndentedString(cangrade)).append("\n");
    sb.append("    canmanagesubscriptions: ").append(toIndentedString(canmanagesubscriptions)).append("\n");
    sb.append("    canmovediscussions: ").append(toIndentedString(canmovediscussions)).append("\n");
    sb.append("    canpindiscussions: ").append(toIndentedString(canpindiscussions)).append("\n");
    sb.append("    canpostprivatereply: ").append(toIndentedString(canpostprivatereply)).append("\n");
    sb.append("    canpostwithoutthrottling: ").append(toIndentedString(canpostwithoutthrottling)).append("\n");
    sb.append("    canrate: ").append(toIndentedString(canrate)).append("\n");
    sb.append("    canreadprivatereplies: ").append(toIndentedString(canreadprivatereplies)).append("\n");
    sb.append("    canreplynews: ").append(toIndentedString(canreplynews)).append("\n");
    sb.append("    canreplypost: ").append(toIndentedString(canreplypost)).append("\n");
    sb.append("    cansplitdiscussions: ").append(toIndentedString(cansplitdiscussions)).append("\n");
    sb.append("    canstartdiscussion: ").append(toIndentedString(canstartdiscussion)).append("\n");
    sb.append("    canviewallratings: ").append(toIndentedString(canviewallratings)).append("\n");
    sb.append("    canviewanyrating: ").append(toIndentedString(canviewanyrating)).append("\n");
    sb.append("    canviewdiscussion: ").append(toIndentedString(canviewdiscussion)).append("\n");
    sb.append("    canviewhiddentimedposts: ").append(toIndentedString(canviewhiddentimedposts)).append("\n");
    sb.append("    canviewqandawithoutposting: ").append(toIndentedString(canviewqandawithoutposting)).append("\n");
    sb.append("    canviewrating: ").append(toIndentedString(canviewrating)).append("\n");
    sb.append("    canviewsubscribers: ").append(toIndentedString(canviewsubscribers)).append("\n");
    sb.append("    warnings: ").append(toIndentedString(warnings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("canaddinstance");
    openapiFields.add("canaddnews");
    openapiFields.add("canaddquestion");
    openapiFields.add("canallowforcesubscribe");
    openapiFields.add("cancanmailnow");
    openapiFields.add("cancanoverridecutoff");
    openapiFields.add("cancanoverridediscussionlock");
    openapiFields.add("cancanposttomygroups");
    openapiFields.add("cancantogglefavourite");
    openapiFields.add("cancreateattachment");
    openapiFields.add("candeleteanypost");
    openapiFields.add("candeleteownpost");
    openapiFields.add("caneditanypost");
    openapiFields.add("canexportdiscussion");
    openapiFields.add("canexportforum");
    openapiFields.add("canexportownpost");
    openapiFields.add("canexportpost");
    openapiFields.add("cangrade");
    openapiFields.add("canmanagesubscriptions");
    openapiFields.add("canmovediscussions");
    openapiFields.add("canpindiscussions");
    openapiFields.add("canpostprivatereply");
    openapiFields.add("canpostwithoutthrottling");
    openapiFields.add("canrate");
    openapiFields.add("canreadprivatereplies");
    openapiFields.add("canreplynews");
    openapiFields.add("canreplypost");
    openapiFields.add("cansplitdiscussions");
    openapiFields.add("canstartdiscussion");
    openapiFields.add("canviewallratings");
    openapiFields.add("canviewanyrating");
    openapiFields.add("canviewdiscussion");
    openapiFields.add("canviewhiddentimedposts");
    openapiFields.add("canviewqandawithoutposting");
    openapiFields.add("canviewrating");
    openapiFields.add("canviewsubscribers");
    openapiFields.add("warnings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ModForumGetForumAccessInformation200Response
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ModForumGetForumAccessInformation200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModForumGetForumAccessInformation200Response is not found in the empty JSON string", ModForumGetForumAccessInformation200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ModForumGetForumAccessInformation200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModForumGetForumAccessInformation200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("warnings") != null && !jsonObj.get("warnings").isJsonNull()) {
        JsonArray jsonArraywarnings = jsonObj.getAsJsonArray("warnings");
        if (jsonArraywarnings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("warnings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `warnings` to be an array in the JSON string but got `%s`", jsonObj.get("warnings").toString()));
          }

          // validate the optional field `warnings` (array)
          for (int i = 0; i < jsonArraywarnings.size(); i++) {
            AuthEmailSignupUser200ResponseWarningsInner.validateJsonElement(jsonArraywarnings.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModForumGetForumAccessInformation200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModForumGetForumAccessInformation200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModForumGetForumAccessInformation200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModForumGetForumAccessInformation200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<ModForumGetForumAccessInformation200Response>() {
           @Override
           public void write(JsonWriter out, ModForumGetForumAccessInformation200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModForumGetForumAccessInformation200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ModForumGetForumAccessInformation200Response given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ModForumGetForumAccessInformation200Response
  * @throws IOException if the JSON string is invalid with respect to ModForumGetForumAccessInformation200Response
  */
  public static ModForumGetForumAccessInformation200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModForumGetForumAccessInformation200Response.class);
  }

 /**
  * Convert an instance of ModForumGetForumAccessInformation200Response to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

