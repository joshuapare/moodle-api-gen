/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.joshuapare.JSON;

/**
 * message
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-18T20:58:28.689161-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class MessagePopupGetPopupNotifications200ResponseNotificationsInner {
  public static final String SERIALIZED_NAME_COMPONENT = "component";
  @SerializedName(SERIALIZED_NAME_COMPONENT)
  private String component;

  public static final String SERIALIZED_NAME_CONTEXTURL = "contexturl";
  @SerializedName(SERIALIZED_NAME_CONTEXTURL)
  private String contexturl;

  public static final String SERIALIZED_NAME_CONTEXTURLNAME = "contexturlname";
  @SerializedName(SERIALIZED_NAME_CONTEXTURLNAME)
  private String contexturlname;

  public static final String SERIALIZED_NAME_CUSTOMDATA = "customdata";
  @SerializedName(SERIALIZED_NAME_CUSTOMDATA)
  private String customdata;

  public static final String SERIALIZED_NAME_DELETED = "deleted";
  @SerializedName(SERIALIZED_NAME_DELETED)
  private Boolean deleted = null;

  public static final String SERIALIZED_NAME_EVENTTYPE = "eventtype";
  @SerializedName(SERIALIZED_NAME_EVENTTYPE)
  private String eventtype;

  public static final String SERIALIZED_NAME_FULLMESSAGE = "fullmessage";
  @SerializedName(SERIALIZED_NAME_FULLMESSAGE)
  private String fullmessage;

  public static final String SERIALIZED_NAME_FULLMESSAGEFORMAT = "fullmessageformat";
  @SerializedName(SERIALIZED_NAME_FULLMESSAGEFORMAT)
  private Integer fullmessageformat;

  public static final String SERIALIZED_NAME_FULLMESSAGEHTML = "fullmessagehtml";
  @SerializedName(SERIALIZED_NAME_FULLMESSAGEHTML)
  private String fullmessagehtml;

  public static final String SERIALIZED_NAME_ICONURL = "iconurl";
  @SerializedName(SERIALIZED_NAME_ICONURL)
  private String iconurl = "null";

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id = null;

  public static final String SERIALIZED_NAME_READ = "read";
  @SerializedName(SERIALIZED_NAME_READ)
  private Boolean read = null;

  public static final String SERIALIZED_NAME_SHORTENEDSUBJECT = "shortenedsubject";
  @SerializedName(SERIALIZED_NAME_SHORTENEDSUBJECT)
  private String shortenedsubject = "null";

  public static final String SERIALIZED_NAME_SMALLMESSAGE = "smallmessage";
  @SerializedName(SERIALIZED_NAME_SMALLMESSAGE)
  private String smallmessage;

  public static final String SERIALIZED_NAME_SUBJECT = "subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private String subject = "null";

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  public static final String SERIALIZED_NAME_TIMECREATED = "timecreated";
  @SerializedName(SERIALIZED_NAME_TIMECREATED)
  private Integer timecreated;

  public static final String SERIALIZED_NAME_TIMECREATEDPRETTY = "timecreatedpretty";
  @SerializedName(SERIALIZED_NAME_TIMECREATEDPRETTY)
  private String timecreatedpretty = "null";

  public static final String SERIALIZED_NAME_TIMEREAD = "timeread";
  @SerializedName(SERIALIZED_NAME_TIMEREAD)
  private Integer timeread;

  public static final String SERIALIZED_NAME_USERIDFROM = "useridfrom";
  @SerializedName(SERIALIZED_NAME_USERIDFROM)
  private Integer useridfrom;

  public static final String SERIALIZED_NAME_USERIDTO = "useridto";
  @SerializedName(SERIALIZED_NAME_USERIDTO)
  private Integer useridto;

  public MessagePopupGetPopupNotifications200ResponseNotificationsInner() {
  }

  public MessagePopupGetPopupNotifications200ResponseNotificationsInner component(String component) {
    this.component = component;
    return this;
  }

   /**
   * The component that generated the notification
   * @return component
  **/
  @javax.annotation.Nullable
  public String getComponent() {
    return component;
  }

  public void setComponent(String component) {
    this.component = component;
  }


  public MessagePopupGetPopupNotifications200ResponseNotificationsInner contexturl(String contexturl) {
    this.contexturl = contexturl;
    return this;
  }

   /**
   * Context URL
   * @return contexturl
  **/
  @javax.annotation.Nullable
  public String getContexturl() {
    return contexturl;
  }

  public void setContexturl(String contexturl) {
    this.contexturl = contexturl;
  }


  public MessagePopupGetPopupNotifications200ResponseNotificationsInner contexturlname(String contexturlname) {
    this.contexturlname = contexturlname;
    return this;
  }

   /**
   * Context URL link name
   * @return contexturlname
  **/
  @javax.annotation.Nullable
  public String getContexturlname() {
    return contexturlname;
  }

  public void setContexturlname(String contexturlname) {
    this.contexturlname = contexturlname;
  }


  public MessagePopupGetPopupNotifications200ResponseNotificationsInner customdata(String customdata) {
    this.customdata = customdata;
    return this;
  }

   /**
   * Custom data to be passed to the message processor.                                 The data here is serialised using json_encode().
   * @return customdata
  **/
  @javax.annotation.Nullable
  public String getCustomdata() {
    return customdata;
  }

  public void setCustomdata(String customdata) {
    this.customdata = customdata;
  }


  public MessagePopupGetPopupNotifications200ResponseNotificationsInner deleted(Boolean deleted) {
    this.deleted = deleted;
    return this;
  }

   /**
   * notification deletion status
   * @return deleted
  **/
  @javax.annotation.Nullable
  public Boolean getDeleted() {
    return deleted;
  }

  public void setDeleted(Boolean deleted) {
    this.deleted = deleted;
  }


  public MessagePopupGetPopupNotifications200ResponseNotificationsInner eventtype(String eventtype) {
    this.eventtype = eventtype;
    return this;
  }

   /**
   * The type of notification
   * @return eventtype
  **/
  @javax.annotation.Nullable
  public String getEventtype() {
    return eventtype;
  }

  public void setEventtype(String eventtype) {
    this.eventtype = eventtype;
  }


  public MessagePopupGetPopupNotifications200ResponseNotificationsInner fullmessage(String fullmessage) {
    this.fullmessage = fullmessage;
    return this;
  }

   /**
   * The message
   * @return fullmessage
  **/
  @javax.annotation.Nullable
  public String getFullmessage() {
    return fullmessage;
  }

  public void setFullmessage(String fullmessage) {
    this.fullmessage = fullmessage;
  }


  public MessagePopupGetPopupNotifications200ResponseNotificationsInner fullmessageformat(Integer fullmessageformat) {
    this.fullmessageformat = fullmessageformat;
    return this;
  }

   /**
   * fullmessage format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)
   * @return fullmessageformat
  **/
  @javax.annotation.Nullable
  public Integer getFullmessageformat() {
    return fullmessageformat;
  }

  public void setFullmessageformat(Integer fullmessageformat) {
    this.fullmessageformat = fullmessageformat;
  }


  public MessagePopupGetPopupNotifications200ResponseNotificationsInner fullmessagehtml(String fullmessagehtml) {
    this.fullmessagehtml = fullmessagehtml;
    return this;
  }

   /**
   * The message in html
   * @return fullmessagehtml
  **/
  @javax.annotation.Nullable
  public String getFullmessagehtml() {
    return fullmessagehtml;
  }

  public void setFullmessagehtml(String fullmessagehtml) {
    this.fullmessagehtml = fullmessagehtml;
  }


  public MessagePopupGetPopupNotifications200ResponseNotificationsInner iconurl(String iconurl) {
    this.iconurl = iconurl;
    return this;
  }

   /**
   * URL for notification icon
   * @return iconurl
  **/
  @javax.annotation.Nullable
  public String getIconurl() {
    return iconurl;
  }

  public void setIconurl(String iconurl) {
    this.iconurl = iconurl;
  }


  public MessagePopupGetPopupNotifications200ResponseNotificationsInner id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * Notification id (this is not guaranteed to be unique                                 within this result set)
   * @return id
  **/
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public MessagePopupGetPopupNotifications200ResponseNotificationsInner read(Boolean read) {
    this.read = read;
    return this;
  }

   /**
   * notification read status
   * @return read
  **/
  @javax.annotation.Nullable
  public Boolean getRead() {
    return read;
  }

  public void setRead(Boolean read) {
    this.read = read;
  }


  public MessagePopupGetPopupNotifications200ResponseNotificationsInner shortenedsubject(String shortenedsubject) {
    this.shortenedsubject = shortenedsubject;
    return this;
  }

   /**
   * The notification subject shortened                                 with ellipsis
   * @return shortenedsubject
  **/
  @javax.annotation.Nullable
  public String getShortenedsubject() {
    return shortenedsubject;
  }

  public void setShortenedsubject(String shortenedsubject) {
    this.shortenedsubject = shortenedsubject;
  }


  public MessagePopupGetPopupNotifications200ResponseNotificationsInner smallmessage(String smallmessage) {
    this.smallmessage = smallmessage;
    return this;
  }

   /**
   * The shorten message
   * @return smallmessage
  **/
  @javax.annotation.Nullable
  public String getSmallmessage() {
    return smallmessage;
  }

  public void setSmallmessage(String smallmessage) {
    this.smallmessage = smallmessage;
  }


  public MessagePopupGetPopupNotifications200ResponseNotificationsInner subject(String subject) {
    this.subject = subject;
    return this;
  }

   /**
   * The notification subject
   * @return subject
  **/
  @javax.annotation.Nullable
  public String getSubject() {
    return subject;
  }

  public void setSubject(String subject) {
    this.subject = subject;
  }


  public MessagePopupGetPopupNotifications200ResponseNotificationsInner text(String text) {
    this.text = text;
    return this;
  }

   /**
   * The message text formated
   * @return text
  **/
  @javax.annotation.Nullable
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }


  public MessagePopupGetPopupNotifications200ResponseNotificationsInner timecreated(Integer timecreated) {
    this.timecreated = timecreated;
    return this;
  }

   /**
   * Time created
   * @return timecreated
  **/
  @javax.annotation.Nullable
  public Integer getTimecreated() {
    return timecreated;
  }

  public void setTimecreated(Integer timecreated) {
    this.timecreated = timecreated;
  }


  public MessagePopupGetPopupNotifications200ResponseNotificationsInner timecreatedpretty(String timecreatedpretty) {
    this.timecreatedpretty = timecreatedpretty;
    return this;
  }

   /**
   * Time created in a pretty format
   * @return timecreatedpretty
  **/
  @javax.annotation.Nullable
  public String getTimecreatedpretty() {
    return timecreatedpretty;
  }

  public void setTimecreatedpretty(String timecreatedpretty) {
    this.timecreatedpretty = timecreatedpretty;
  }


  public MessagePopupGetPopupNotifications200ResponseNotificationsInner timeread(Integer timeread) {
    this.timeread = timeread;
    return this;
  }

   /**
   * Time read
   * @return timeread
  **/
  @javax.annotation.Nullable
  public Integer getTimeread() {
    return timeread;
  }

  public void setTimeread(Integer timeread) {
    this.timeread = timeread;
  }


  public MessagePopupGetPopupNotifications200ResponseNotificationsInner useridfrom(Integer useridfrom) {
    this.useridfrom = useridfrom;
    return this;
  }

   /**
   * User from id
   * @return useridfrom
  **/
  @javax.annotation.Nullable
  public Integer getUseridfrom() {
    return useridfrom;
  }

  public void setUseridfrom(Integer useridfrom) {
    this.useridfrom = useridfrom;
  }


  public MessagePopupGetPopupNotifications200ResponseNotificationsInner useridto(Integer useridto) {
    this.useridto = useridto;
    return this;
  }

   /**
   * User to id
   * @return useridto
  **/
  @javax.annotation.Nullable
  public Integer getUseridto() {
    return useridto;
  }

  public void setUseridto(Integer useridto) {
    this.useridto = useridto;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MessagePopupGetPopupNotifications200ResponseNotificationsInner messagePopupGetPopupNotifications200ResponseNotificationsInner = (MessagePopupGetPopupNotifications200ResponseNotificationsInner) o;
    return Objects.equals(this.component, messagePopupGetPopupNotifications200ResponseNotificationsInner.component) &&
        Objects.equals(this.contexturl, messagePopupGetPopupNotifications200ResponseNotificationsInner.contexturl) &&
        Objects.equals(this.contexturlname, messagePopupGetPopupNotifications200ResponseNotificationsInner.contexturlname) &&
        Objects.equals(this.customdata, messagePopupGetPopupNotifications200ResponseNotificationsInner.customdata) &&
        Objects.equals(this.deleted, messagePopupGetPopupNotifications200ResponseNotificationsInner.deleted) &&
        Objects.equals(this.eventtype, messagePopupGetPopupNotifications200ResponseNotificationsInner.eventtype) &&
        Objects.equals(this.fullmessage, messagePopupGetPopupNotifications200ResponseNotificationsInner.fullmessage) &&
        Objects.equals(this.fullmessageformat, messagePopupGetPopupNotifications200ResponseNotificationsInner.fullmessageformat) &&
        Objects.equals(this.fullmessagehtml, messagePopupGetPopupNotifications200ResponseNotificationsInner.fullmessagehtml) &&
        Objects.equals(this.iconurl, messagePopupGetPopupNotifications200ResponseNotificationsInner.iconurl) &&
        Objects.equals(this.id, messagePopupGetPopupNotifications200ResponseNotificationsInner.id) &&
        Objects.equals(this.read, messagePopupGetPopupNotifications200ResponseNotificationsInner.read) &&
        Objects.equals(this.shortenedsubject, messagePopupGetPopupNotifications200ResponseNotificationsInner.shortenedsubject) &&
        Objects.equals(this.smallmessage, messagePopupGetPopupNotifications200ResponseNotificationsInner.smallmessage) &&
        Objects.equals(this.subject, messagePopupGetPopupNotifications200ResponseNotificationsInner.subject) &&
        Objects.equals(this.text, messagePopupGetPopupNotifications200ResponseNotificationsInner.text) &&
        Objects.equals(this.timecreated, messagePopupGetPopupNotifications200ResponseNotificationsInner.timecreated) &&
        Objects.equals(this.timecreatedpretty, messagePopupGetPopupNotifications200ResponseNotificationsInner.timecreatedpretty) &&
        Objects.equals(this.timeread, messagePopupGetPopupNotifications200ResponseNotificationsInner.timeread) &&
        Objects.equals(this.useridfrom, messagePopupGetPopupNotifications200ResponseNotificationsInner.useridfrom) &&
        Objects.equals(this.useridto, messagePopupGetPopupNotifications200ResponseNotificationsInner.useridto);
  }

  @Override
  public int hashCode() {
    return Objects.hash(component, contexturl, contexturlname, customdata, deleted, eventtype, fullmessage, fullmessageformat, fullmessagehtml, iconurl, id, read, shortenedsubject, smallmessage, subject, text, timecreated, timecreatedpretty, timeread, useridfrom, useridto);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MessagePopupGetPopupNotifications200ResponseNotificationsInner {\n");
    sb.append("    component: ").append(toIndentedString(component)).append("\n");
    sb.append("    contexturl: ").append(toIndentedString(contexturl)).append("\n");
    sb.append("    contexturlname: ").append(toIndentedString(contexturlname)).append("\n");
    sb.append("    customdata: ").append(toIndentedString(customdata)).append("\n");
    sb.append("    deleted: ").append(toIndentedString(deleted)).append("\n");
    sb.append("    eventtype: ").append(toIndentedString(eventtype)).append("\n");
    sb.append("    fullmessage: ").append(toIndentedString(fullmessage)).append("\n");
    sb.append("    fullmessageformat: ").append(toIndentedString(fullmessageformat)).append("\n");
    sb.append("    fullmessagehtml: ").append(toIndentedString(fullmessagehtml)).append("\n");
    sb.append("    iconurl: ").append(toIndentedString(iconurl)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    read: ").append(toIndentedString(read)).append("\n");
    sb.append("    shortenedsubject: ").append(toIndentedString(shortenedsubject)).append("\n");
    sb.append("    smallmessage: ").append(toIndentedString(smallmessage)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    timecreated: ").append(toIndentedString(timecreated)).append("\n");
    sb.append("    timecreatedpretty: ").append(toIndentedString(timecreatedpretty)).append("\n");
    sb.append("    timeread: ").append(toIndentedString(timeread)).append("\n");
    sb.append("    useridfrom: ").append(toIndentedString(useridfrom)).append("\n");
    sb.append("    useridto: ").append(toIndentedString(useridto)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("component");
    openapiFields.add("contexturl");
    openapiFields.add("contexturlname");
    openapiFields.add("customdata");
    openapiFields.add("deleted");
    openapiFields.add("eventtype");
    openapiFields.add("fullmessage");
    openapiFields.add("fullmessageformat");
    openapiFields.add("fullmessagehtml");
    openapiFields.add("iconurl");
    openapiFields.add("id");
    openapiFields.add("read");
    openapiFields.add("shortenedsubject");
    openapiFields.add("smallmessage");
    openapiFields.add("subject");
    openapiFields.add("text");
    openapiFields.add("timecreated");
    openapiFields.add("timecreatedpretty");
    openapiFields.add("timeread");
    openapiFields.add("useridfrom");
    openapiFields.add("useridto");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to MessagePopupGetPopupNotifications200ResponseNotificationsInner
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MessagePopupGetPopupNotifications200ResponseNotificationsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MessagePopupGetPopupNotifications200ResponseNotificationsInner is not found in the empty JSON string", MessagePopupGetPopupNotifications200ResponseNotificationsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MessagePopupGetPopupNotifications200ResponseNotificationsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MessagePopupGetPopupNotifications200ResponseNotificationsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("component") != null && !jsonObj.get("component").isJsonNull()) && !jsonObj.get("component").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `component` to be a primitive type in the JSON string but got `%s`", jsonObj.get("component").toString()));
      }
      if ((jsonObj.get("contexturl") != null && !jsonObj.get("contexturl").isJsonNull()) && !jsonObj.get("contexturl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contexturl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contexturl").toString()));
      }
      if ((jsonObj.get("contexturlname") != null && !jsonObj.get("contexturlname").isJsonNull()) && !jsonObj.get("contexturlname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contexturlname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contexturlname").toString()));
      }
      if ((jsonObj.get("customdata") != null && !jsonObj.get("customdata").isJsonNull()) && !jsonObj.get("customdata").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customdata` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customdata").toString()));
      }
      if ((jsonObj.get("eventtype") != null && !jsonObj.get("eventtype").isJsonNull()) && !jsonObj.get("eventtype").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventtype` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventtype").toString()));
      }
      if ((jsonObj.get("fullmessage") != null && !jsonObj.get("fullmessage").isJsonNull()) && !jsonObj.get("fullmessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fullmessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fullmessage").toString()));
      }
      if ((jsonObj.get("fullmessagehtml") != null && !jsonObj.get("fullmessagehtml").isJsonNull()) && !jsonObj.get("fullmessagehtml").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fullmessagehtml` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fullmessagehtml").toString()));
      }
      if ((jsonObj.get("iconurl") != null && !jsonObj.get("iconurl").isJsonNull()) && !jsonObj.get("iconurl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iconurl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iconurl").toString()));
      }
      if ((jsonObj.get("shortenedsubject") != null && !jsonObj.get("shortenedsubject").isJsonNull()) && !jsonObj.get("shortenedsubject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shortenedsubject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shortenedsubject").toString()));
      }
      if ((jsonObj.get("smallmessage") != null && !jsonObj.get("smallmessage").isJsonNull()) && !jsonObj.get("smallmessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `smallmessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("smallmessage").toString()));
      }
      if ((jsonObj.get("subject") != null && !jsonObj.get("subject").isJsonNull()) && !jsonObj.get("subject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subject").toString()));
      }
      if ((jsonObj.get("text") != null && !jsonObj.get("text").isJsonNull()) && !jsonObj.get("text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text").toString()));
      }
      if ((jsonObj.get("timecreatedpretty") != null && !jsonObj.get("timecreatedpretty").isJsonNull()) && !jsonObj.get("timecreatedpretty").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timecreatedpretty` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timecreatedpretty").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MessagePopupGetPopupNotifications200ResponseNotificationsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MessagePopupGetPopupNotifications200ResponseNotificationsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MessagePopupGetPopupNotifications200ResponseNotificationsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MessagePopupGetPopupNotifications200ResponseNotificationsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<MessagePopupGetPopupNotifications200ResponseNotificationsInner>() {
           @Override
           public void write(JsonWriter out, MessagePopupGetPopupNotifications200ResponseNotificationsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MessagePopupGetPopupNotifications200ResponseNotificationsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MessagePopupGetPopupNotifications200ResponseNotificationsInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MessagePopupGetPopupNotifications200ResponseNotificationsInner
  * @throws IOException if the JSON string is invalid with respect to MessagePopupGetPopupNotifications200ResponseNotificationsInner
  */
  public static MessagePopupGetPopupNotifications200ResponseNotificationsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MessagePopupGetPopupNotifications200ResponseNotificationsInner.class);
  }

 /**
  * Convert an instance of MessagePopupGetPopupNotifications200ResponseNotificationsInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

