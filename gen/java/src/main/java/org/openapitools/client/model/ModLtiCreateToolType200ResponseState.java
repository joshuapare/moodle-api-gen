/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.joshuapare.JSON;

/**
 * ModLtiCreateToolType200ResponseState
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-18T20:58:28.689161-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class ModLtiCreateToolType200ResponseState {
  public static final String SERIALIZED_NAME_CONFIGURED = "configured";
  @SerializedName(SERIALIZED_NAME_CONFIGURED)
  private Boolean configured = null;

  public static final String SERIALIZED_NAME_PENDING = "pending";
  @SerializedName(SERIALIZED_NAME_PENDING)
  private Boolean pending = null;

  public static final String SERIALIZED_NAME_REJECTED = "rejected";
  @SerializedName(SERIALIZED_NAME_REJECTED)
  private Boolean rejected = null;

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text = "null";

  public static final String SERIALIZED_NAME_UNKNOWN = "unknown";
  @SerializedName(SERIALIZED_NAME_UNKNOWN)
  private Boolean unknown = null;

  public ModLtiCreateToolType200ResponseState() {
  }

  public ModLtiCreateToolType200ResponseState configured(Boolean configured) {
    this.configured = configured;
    return this;
  }

   /**
   * Is the state configured
   * @return configured
  **/
  @javax.annotation.Nonnull
  public Boolean getConfigured() {
    return configured;
  }

  public void setConfigured(Boolean configured) {
    this.configured = configured;
  }


  public ModLtiCreateToolType200ResponseState pending(Boolean pending) {
    this.pending = pending;
    return this;
  }

   /**
   * Is the state pending
   * @return pending
  **/
  @javax.annotation.Nonnull
  public Boolean getPending() {
    return pending;
  }

  public void setPending(Boolean pending) {
    this.pending = pending;
  }


  public ModLtiCreateToolType200ResponseState rejected(Boolean rejected) {
    this.rejected = rejected;
    return this;
  }

   /**
   * Is the state rejected
   * @return rejected
  **/
  @javax.annotation.Nonnull
  public Boolean getRejected() {
    return rejected;
  }

  public void setRejected(Boolean rejected) {
    this.rejected = rejected;
  }


  public ModLtiCreateToolType200ResponseState text(String text) {
    this.text = text;
    return this;
  }

   /**
   * Tool type state name string
   * @return text
  **/
  @javax.annotation.Nonnull
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }


  public ModLtiCreateToolType200ResponseState unknown(Boolean unknown) {
    this.unknown = unknown;
    return this;
  }

   /**
   * Is the state unknown
   * @return unknown
  **/
  @javax.annotation.Nonnull
  public Boolean getUnknown() {
    return unknown;
  }

  public void setUnknown(Boolean unknown) {
    this.unknown = unknown;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModLtiCreateToolType200ResponseState modLtiCreateToolType200ResponseState = (ModLtiCreateToolType200ResponseState) o;
    return Objects.equals(this.configured, modLtiCreateToolType200ResponseState.configured) &&
        Objects.equals(this.pending, modLtiCreateToolType200ResponseState.pending) &&
        Objects.equals(this.rejected, modLtiCreateToolType200ResponseState.rejected) &&
        Objects.equals(this.text, modLtiCreateToolType200ResponseState.text) &&
        Objects.equals(this.unknown, modLtiCreateToolType200ResponseState.unknown);
  }

  @Override
  public int hashCode() {
    return Objects.hash(configured, pending, rejected, text, unknown);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModLtiCreateToolType200ResponseState {\n");
    sb.append("    configured: ").append(toIndentedString(configured)).append("\n");
    sb.append("    pending: ").append(toIndentedString(pending)).append("\n");
    sb.append("    rejected: ").append(toIndentedString(rejected)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    unknown: ").append(toIndentedString(unknown)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("configured");
    openapiFields.add("pending");
    openapiFields.add("rejected");
    openapiFields.add("text");
    openapiFields.add("unknown");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("configured");
    openapiRequiredFields.add("pending");
    openapiRequiredFields.add("rejected");
    openapiRequiredFields.add("text");
    openapiRequiredFields.add("unknown");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ModLtiCreateToolType200ResponseState
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ModLtiCreateToolType200ResponseState.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModLtiCreateToolType200ResponseState is not found in the empty JSON string", ModLtiCreateToolType200ResponseState.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ModLtiCreateToolType200ResponseState.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModLtiCreateToolType200ResponseState` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ModLtiCreateToolType200ResponseState.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModLtiCreateToolType200ResponseState.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModLtiCreateToolType200ResponseState' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModLtiCreateToolType200ResponseState> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModLtiCreateToolType200ResponseState.class));

       return (TypeAdapter<T>) new TypeAdapter<ModLtiCreateToolType200ResponseState>() {
           @Override
           public void write(JsonWriter out, ModLtiCreateToolType200ResponseState value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModLtiCreateToolType200ResponseState read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ModLtiCreateToolType200ResponseState given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ModLtiCreateToolType200ResponseState
  * @throws IOException if the JSON string is invalid with respect to ModLtiCreateToolType200ResponseState
  */
  public static ModLtiCreateToolType200ResponseState fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModLtiCreateToolType200ResponseState.class);
  }

 /**
  * Convert an instance of ModLtiCreateToolType200ResponseState to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

