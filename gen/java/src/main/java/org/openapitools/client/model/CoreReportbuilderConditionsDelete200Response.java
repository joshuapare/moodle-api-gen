/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CoreReportbuilderConditionsDelete200ResponseAvailableconditionsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.joshuapare.JSON;

/**
 * CoreReportbuilderConditionsDelete200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-18T20:58:28.689161-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class CoreReportbuilderConditionsDelete200Response {
  public static final String SERIALIZED_NAME_ACTIVECONDITIONSFORM = "activeconditionsform";
  @SerializedName(SERIALIZED_NAME_ACTIVECONDITIONSFORM)
  private String activeconditionsform;

  public static final String SERIALIZED_NAME_AVAILABLECONDITIONS = "availableconditions";
  @SerializedName(SERIALIZED_NAME_AVAILABLECONDITIONS)
  private List<CoreReportbuilderConditionsDelete200ResponseAvailableconditionsInner> availableconditions = new ArrayList<>();

  public static final String SERIALIZED_NAME_HASACTIVECONDITIONS = "hasactiveconditions";
  @SerializedName(SERIALIZED_NAME_HASACTIVECONDITIONS)
  private Boolean hasactiveconditions;

  public static final String SERIALIZED_NAME_HASAVAILABLECONDITIONS = "hasavailableconditions";
  @SerializedName(SERIALIZED_NAME_HASAVAILABLECONDITIONS)
  private Boolean hasavailableconditions;

  public static final String SERIALIZED_NAME_HELPICON = "helpicon";
  @SerializedName(SERIALIZED_NAME_HELPICON)
  private String helpicon;

  public static final String SERIALIZED_NAME_JAVASCRIPT = "javascript";
  @SerializedName(SERIALIZED_NAME_JAVASCRIPT)
  private String javascript;

  public CoreReportbuilderConditionsDelete200Response() {
  }

  public CoreReportbuilderConditionsDelete200Response activeconditionsform(String activeconditionsform) {
    this.activeconditionsform = activeconditionsform;
    return this;
  }

   /**
   * activeconditionsform
   * @return activeconditionsform
  **/
  @javax.annotation.Nonnull
  public String getActiveconditionsform() {
    return activeconditionsform;
  }

  public void setActiveconditionsform(String activeconditionsform) {
    this.activeconditionsform = activeconditionsform;
  }


  public CoreReportbuilderConditionsDelete200Response availableconditions(List<CoreReportbuilderConditionsDelete200ResponseAvailableconditionsInner> availableconditions) {
    this.availableconditions = availableconditions;
    return this;
  }

  public CoreReportbuilderConditionsDelete200Response addAvailableconditionsItem(CoreReportbuilderConditionsDelete200ResponseAvailableconditionsInner availableconditionsItem) {
    if (this.availableconditions == null) {
      this.availableconditions = new ArrayList<>();
    }
    this.availableconditions.add(availableconditionsItem);
    return this;
  }

   /**
   * Get availableconditions
   * @return availableconditions
  **/
  @javax.annotation.Nonnull
  public List<CoreReportbuilderConditionsDelete200ResponseAvailableconditionsInner> getAvailableconditions() {
    return availableconditions;
  }

  public void setAvailableconditions(List<CoreReportbuilderConditionsDelete200ResponseAvailableconditionsInner> availableconditions) {
    this.availableconditions = availableconditions;
  }


  public CoreReportbuilderConditionsDelete200Response hasactiveconditions(Boolean hasactiveconditions) {
    this.hasactiveconditions = hasactiveconditions;
    return this;
  }

   /**
   * hasactiveconditions
   * @return hasactiveconditions
  **/
  @javax.annotation.Nonnull
  public Boolean getHasactiveconditions() {
    return hasactiveconditions;
  }

  public void setHasactiveconditions(Boolean hasactiveconditions) {
    this.hasactiveconditions = hasactiveconditions;
  }


  public CoreReportbuilderConditionsDelete200Response hasavailableconditions(Boolean hasavailableconditions) {
    this.hasavailableconditions = hasavailableconditions;
    return this;
  }

   /**
   * hasavailableconditions
   * @return hasavailableconditions
  **/
  @javax.annotation.Nonnull
  public Boolean getHasavailableconditions() {
    return hasavailableconditions;
  }

  public void setHasavailableconditions(Boolean hasavailableconditions) {
    this.hasavailableconditions = hasavailableconditions;
  }


  public CoreReportbuilderConditionsDelete200Response helpicon(String helpicon) {
    this.helpicon = helpicon;
    return this;
  }

   /**
   * helpicon
   * @return helpicon
  **/
  @javax.annotation.Nonnull
  public String getHelpicon() {
    return helpicon;
  }

  public void setHelpicon(String helpicon) {
    this.helpicon = helpicon;
  }


  public CoreReportbuilderConditionsDelete200Response javascript(String javascript) {
    this.javascript = javascript;
    return this;
  }

   /**
   * javascript
   * @return javascript
  **/
  @javax.annotation.Nullable
  public String getJavascript() {
    return javascript;
  }

  public void setJavascript(String javascript) {
    this.javascript = javascript;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CoreReportbuilderConditionsDelete200Response coreReportbuilderConditionsDelete200Response = (CoreReportbuilderConditionsDelete200Response) o;
    return Objects.equals(this.activeconditionsform, coreReportbuilderConditionsDelete200Response.activeconditionsform) &&
        Objects.equals(this.availableconditions, coreReportbuilderConditionsDelete200Response.availableconditions) &&
        Objects.equals(this.hasactiveconditions, coreReportbuilderConditionsDelete200Response.hasactiveconditions) &&
        Objects.equals(this.hasavailableconditions, coreReportbuilderConditionsDelete200Response.hasavailableconditions) &&
        Objects.equals(this.helpicon, coreReportbuilderConditionsDelete200Response.helpicon) &&
        Objects.equals(this.javascript, coreReportbuilderConditionsDelete200Response.javascript);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activeconditionsform, availableconditions, hasactiveconditions, hasavailableconditions, helpicon, javascript);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CoreReportbuilderConditionsDelete200Response {\n");
    sb.append("    activeconditionsform: ").append(toIndentedString(activeconditionsform)).append("\n");
    sb.append("    availableconditions: ").append(toIndentedString(availableconditions)).append("\n");
    sb.append("    hasactiveconditions: ").append(toIndentedString(hasactiveconditions)).append("\n");
    sb.append("    hasavailableconditions: ").append(toIndentedString(hasavailableconditions)).append("\n");
    sb.append("    helpicon: ").append(toIndentedString(helpicon)).append("\n");
    sb.append("    javascript: ").append(toIndentedString(javascript)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activeconditionsform");
    openapiFields.add("availableconditions");
    openapiFields.add("hasactiveconditions");
    openapiFields.add("hasavailableconditions");
    openapiFields.add("helpicon");
    openapiFields.add("javascript");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("activeconditionsform");
    openapiRequiredFields.add("availableconditions");
    openapiRequiredFields.add("hasactiveconditions");
    openapiRequiredFields.add("hasavailableconditions");
    openapiRequiredFields.add("helpicon");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CoreReportbuilderConditionsDelete200Response
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CoreReportbuilderConditionsDelete200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CoreReportbuilderConditionsDelete200Response is not found in the empty JSON string", CoreReportbuilderConditionsDelete200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CoreReportbuilderConditionsDelete200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CoreReportbuilderConditionsDelete200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CoreReportbuilderConditionsDelete200Response.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("activeconditionsform").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `activeconditionsform` to be a primitive type in the JSON string but got `%s`", jsonObj.get("activeconditionsform").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("availableconditions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `availableconditions` to be an array in the JSON string but got `%s`", jsonObj.get("availableconditions").toString()));
      }

      JsonArray jsonArrayavailableconditions = jsonObj.getAsJsonArray("availableconditions");
      // validate the required field `availableconditions` (array)
      for (int i = 0; i < jsonArrayavailableconditions.size(); i++) {
        CoreReportbuilderConditionsDelete200ResponseAvailableconditionsInner.validateJsonElement(jsonArrayavailableconditions.get(i));
      };
      if (!jsonObj.get("helpicon").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `helpicon` to be a primitive type in the JSON string but got `%s`", jsonObj.get("helpicon").toString()));
      }
      if ((jsonObj.get("javascript") != null && !jsonObj.get("javascript").isJsonNull()) && !jsonObj.get("javascript").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `javascript` to be a primitive type in the JSON string but got `%s`", jsonObj.get("javascript").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CoreReportbuilderConditionsDelete200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CoreReportbuilderConditionsDelete200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CoreReportbuilderConditionsDelete200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CoreReportbuilderConditionsDelete200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<CoreReportbuilderConditionsDelete200Response>() {
           @Override
           public void write(JsonWriter out, CoreReportbuilderConditionsDelete200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CoreReportbuilderConditionsDelete200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CoreReportbuilderConditionsDelete200Response given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CoreReportbuilderConditionsDelete200Response
  * @throws IOException if the JSON string is invalid with respect to CoreReportbuilderConditionsDelete200Response
  */
  public static CoreReportbuilderConditionsDelete200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CoreReportbuilderConditionsDelete200Response.class);
  }

 /**
  * Convert an instance of CoreReportbuilderConditionsDelete200Response to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

