/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.joshuapare.JSON;

/**
 * ModFeedbackGetUnfinishedResponses200ResponseResponsesInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-18T20:58:28.689161-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class ModFeedbackGetUnfinishedResponses200ResponseResponsesInner {
  public static final String SERIALIZED_NAME_COMPLETED = "completed";
  @SerializedName(SERIALIZED_NAME_COMPLETED)
  private Integer completed = null;

  public static final String SERIALIZED_NAME_COURSE_ID = "course_id";
  @SerializedName(SERIALIZED_NAME_COURSE_ID)
  private Integer courseId;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_ITEM = "item";
  @SerializedName(SERIALIZED_NAME_ITEM)
  private Integer item;

  public static final String SERIALIZED_NAME_TMP_COMPLETED = "tmp_completed";
  @SerializedName(SERIALIZED_NAME_TMP_COMPLETED)
  private Integer tmpCompleted;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private String value;

  public ModFeedbackGetUnfinishedResponses200ResponseResponsesInner() {
  }

  public ModFeedbackGetUnfinishedResponses200ResponseResponsesInner completed(Integer completed) {
    this.completed = completed;
    return this;
  }

   /**
   * Reference to the feedback_completedtmp table.
   * @return completed
  **/
  @javax.annotation.Nullable
  public Integer getCompleted() {
    return completed;
  }

  public void setCompleted(Integer completed) {
    this.completed = completed;
  }


  public ModFeedbackGetUnfinishedResponses200ResponseResponsesInner courseId(Integer courseId) {
    this.courseId = courseId;
    return this;
  }

   /**
   * The course id this record belongs to.
   * @return courseId
  **/
  @javax.annotation.Nullable
  public Integer getCourseId() {
    return courseId;
  }

  public void setCourseId(Integer courseId) {
    this.courseId = courseId;
  }


  public ModFeedbackGetUnfinishedResponses200ResponseResponsesInner id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * The record id.
   * @return id
  **/
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public ModFeedbackGetUnfinishedResponses200ResponseResponsesInner item(Integer item) {
    this.item = item;
    return this;
  }

   /**
   * The item id that was responded.
   * @return item
  **/
  @javax.annotation.Nullable
  public Integer getItem() {
    return item;
  }

  public void setItem(Integer item) {
    this.item = item;
  }


  public ModFeedbackGetUnfinishedResponses200ResponseResponsesInner tmpCompleted(Integer tmpCompleted) {
    this.tmpCompleted = tmpCompleted;
    return this;
  }

   /**
   * Old field - not used anymore.
   * @return tmpCompleted
  **/
  @javax.annotation.Nullable
  public Integer getTmpCompleted() {
    return tmpCompleted;
  }

  public void setTmpCompleted(Integer tmpCompleted) {
    this.tmpCompleted = tmpCompleted;
  }


  public ModFeedbackGetUnfinishedResponses200ResponseResponsesInner value(String value) {
    this.value = value;
    return this;
  }

   /**
   * The response value.
   * @return value
  **/
  @javax.annotation.Nullable
  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModFeedbackGetUnfinishedResponses200ResponseResponsesInner modFeedbackGetUnfinishedResponses200ResponseResponsesInner = (ModFeedbackGetUnfinishedResponses200ResponseResponsesInner) o;
    return Objects.equals(this.completed, modFeedbackGetUnfinishedResponses200ResponseResponsesInner.completed) &&
        Objects.equals(this.courseId, modFeedbackGetUnfinishedResponses200ResponseResponsesInner.courseId) &&
        Objects.equals(this.id, modFeedbackGetUnfinishedResponses200ResponseResponsesInner.id) &&
        Objects.equals(this.item, modFeedbackGetUnfinishedResponses200ResponseResponsesInner.item) &&
        Objects.equals(this.tmpCompleted, modFeedbackGetUnfinishedResponses200ResponseResponsesInner.tmpCompleted) &&
        Objects.equals(this.value, modFeedbackGetUnfinishedResponses200ResponseResponsesInner.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(completed, courseId, id, item, tmpCompleted, value);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModFeedbackGetUnfinishedResponses200ResponseResponsesInner {\n");
    sb.append("    completed: ").append(toIndentedString(completed)).append("\n");
    sb.append("    courseId: ").append(toIndentedString(courseId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    item: ").append(toIndentedString(item)).append("\n");
    sb.append("    tmpCompleted: ").append(toIndentedString(tmpCompleted)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("completed");
    openapiFields.add("course_id");
    openapiFields.add("id");
    openapiFields.add("item");
    openapiFields.add("tmp_completed");
    openapiFields.add("value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ModFeedbackGetUnfinishedResponses200ResponseResponsesInner
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ModFeedbackGetUnfinishedResponses200ResponseResponsesInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModFeedbackGetUnfinishedResponses200ResponseResponsesInner is not found in the empty JSON string", ModFeedbackGetUnfinishedResponses200ResponseResponsesInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ModFeedbackGetUnfinishedResponses200ResponseResponsesInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModFeedbackGetUnfinishedResponses200ResponseResponsesInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("value") != null && !jsonObj.get("value").isJsonNull()) && !jsonObj.get("value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("value").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModFeedbackGetUnfinishedResponses200ResponseResponsesInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModFeedbackGetUnfinishedResponses200ResponseResponsesInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModFeedbackGetUnfinishedResponses200ResponseResponsesInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModFeedbackGetUnfinishedResponses200ResponseResponsesInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ModFeedbackGetUnfinishedResponses200ResponseResponsesInner>() {
           @Override
           public void write(JsonWriter out, ModFeedbackGetUnfinishedResponses200ResponseResponsesInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModFeedbackGetUnfinishedResponses200ResponseResponsesInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ModFeedbackGetUnfinishedResponses200ResponseResponsesInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ModFeedbackGetUnfinishedResponses200ResponseResponsesInner
  * @throws IOException if the JSON string is invalid with respect to ModFeedbackGetUnfinishedResponses200ResponseResponsesInner
  */
  public static ModFeedbackGetUnfinishedResponses200ResponseResponsesInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModFeedbackGetUnfinishedResponses200ResponseResponsesInner.class);
  }

 /**
  * Convert an instance of ModFeedbackGetUnfinishedResponses200ResponseResponsesInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

