/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.joshuapare.JSON;

/**
 * CoreTagGetTagindexRequestTagindex
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-18T14:00:07.069642-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class CoreTagGetTagindexRequestTagindex {
  public static final String SERIALIZED_NAME_CTX = "ctx";
  @SerializedName(SERIALIZED_NAME_CTX)
  private Integer ctx = 0;

  public static final String SERIALIZED_NAME_EXCL = "excl";
  @SerializedName(SERIALIZED_NAME_EXCL)
  private Boolean excl = 0;

  public static final String SERIALIZED_NAME_FROM = "from";
  @SerializedName(SERIALIZED_NAME_FROM)
  private Integer from = 0;

  public static final String SERIALIZED_NAME_PAGE = "page";
  @SerializedName(SERIALIZED_NAME_PAGE)
  private Integer page = 0;

  public static final String SERIALIZED_NAME_REC = "rec";
  @SerializedName(SERIALIZED_NAME_REC)
  private Integer rec = 1;

  public static final String SERIALIZED_NAME_TA = "ta";
  @SerializedName(SERIALIZED_NAME_TA)
  private Integer ta = null;

  public static final String SERIALIZED_NAME_TAG = "tag";
  @SerializedName(SERIALIZED_NAME_TAG)
  private String tag = "null";

  public static final String SERIALIZED_NAME_TC = "tc";
  @SerializedName(SERIALIZED_NAME_TC)
  private Integer tc = null;

  public CoreTagGetTagindexRequestTagindex() {
  }

  public CoreTagGetTagindexRequestTagindex ctx(Integer ctx) {
    this.ctx = ctx;
    return this;
  }

   /**
   * context id where to search for items
   * @return ctx
  **/
  @javax.annotation.Nullable
  public Integer getCtx() {
    return ctx;
  }

  public void setCtx(Integer ctx) {
    this.ctx = ctx;
  }


  public CoreTagGetTagindexRequestTagindex excl(Boolean excl) {
    this.excl = excl;
    return this;
  }

   /**
   * exlusive mode for this tag area
   * @return excl
  **/
  @javax.annotation.Nullable
  public Boolean getExcl() {
    return excl;
  }

  public void setExcl(Boolean excl) {
    this.excl = excl;
  }


  public CoreTagGetTagindexRequestTagindex from(Integer from) {
    this.from = from;
    return this;
  }

   /**
   * context id where the link was displayed
   * @return from
  **/
  @javax.annotation.Nullable
  public Integer getFrom() {
    return from;
  }

  public void setFrom(Integer from) {
    this.from = from;
  }


  public CoreTagGetTagindexRequestTagindex page(Integer page) {
    this.page = page;
    return this;
  }

   /**
   * page number (0-based)
   * @return page
  **/
  @javax.annotation.Nullable
  public Integer getPage() {
    return page;
  }

  public void setPage(Integer page) {
    this.page = page;
  }


  public CoreTagGetTagindexRequestTagindex rec(Integer rec) {
    this.rec = rec;
    return this;
  }

   /**
   * search in the context recursive
   * @return rec
  **/
  @javax.annotation.Nullable
  public Integer getRec() {
    return rec;
  }

  public void setRec(Integer rec) {
    this.rec = rec;
  }


  public CoreTagGetTagindexRequestTagindex ta(Integer ta) {
    this.ta = ta;
    return this;
  }

   /**
   * tag area id
   * @return ta
  **/
  @javax.annotation.Nonnull
  public Integer getTa() {
    return ta;
  }

  public void setTa(Integer ta) {
    this.ta = ta;
  }


  public CoreTagGetTagindexRequestTagindex tag(String tag) {
    this.tag = tag;
    return this;
  }

   /**
   * tag name
   * @return tag
  **/
  @javax.annotation.Nonnull
  public String getTag() {
    return tag;
  }

  public void setTag(String tag) {
    this.tag = tag;
  }


  public CoreTagGetTagindexRequestTagindex tc(Integer tc) {
    this.tc = tc;
    return this;
  }

   /**
   * tag collection id
   * @return tc
  **/
  @javax.annotation.Nonnull
  public Integer getTc() {
    return tc;
  }

  public void setTc(Integer tc) {
    this.tc = tc;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CoreTagGetTagindexRequestTagindex coreTagGetTagindexRequestTagindex = (CoreTagGetTagindexRequestTagindex) o;
    return Objects.equals(this.ctx, coreTagGetTagindexRequestTagindex.ctx) &&
        Objects.equals(this.excl, coreTagGetTagindexRequestTagindex.excl) &&
        Objects.equals(this.from, coreTagGetTagindexRequestTagindex.from) &&
        Objects.equals(this.page, coreTagGetTagindexRequestTagindex.page) &&
        Objects.equals(this.rec, coreTagGetTagindexRequestTagindex.rec) &&
        Objects.equals(this.ta, coreTagGetTagindexRequestTagindex.ta) &&
        Objects.equals(this.tag, coreTagGetTagindexRequestTagindex.tag) &&
        Objects.equals(this.tc, coreTagGetTagindexRequestTagindex.tc);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ctx, excl, from, page, rec, ta, tag, tc);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CoreTagGetTagindexRequestTagindex {\n");
    sb.append("    ctx: ").append(toIndentedString(ctx)).append("\n");
    sb.append("    excl: ").append(toIndentedString(excl)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    page: ").append(toIndentedString(page)).append("\n");
    sb.append("    rec: ").append(toIndentedString(rec)).append("\n");
    sb.append("    ta: ").append(toIndentedString(ta)).append("\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("    tc: ").append(toIndentedString(tc)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ctx");
    openapiFields.add("excl");
    openapiFields.add("from");
    openapiFields.add("page");
    openapiFields.add("rec");
    openapiFields.add("ta");
    openapiFields.add("tag");
    openapiFields.add("tc");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ta");
    openapiRequiredFields.add("tag");
    openapiRequiredFields.add("tc");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CoreTagGetTagindexRequestTagindex
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CoreTagGetTagindexRequestTagindex.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CoreTagGetTagindexRequestTagindex is not found in the empty JSON string", CoreTagGetTagindexRequestTagindex.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CoreTagGetTagindexRequestTagindex.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CoreTagGetTagindexRequestTagindex` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CoreTagGetTagindexRequestTagindex.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("tag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tag").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CoreTagGetTagindexRequestTagindex.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CoreTagGetTagindexRequestTagindex' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CoreTagGetTagindexRequestTagindex> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CoreTagGetTagindexRequestTagindex.class));

       return (TypeAdapter<T>) new TypeAdapter<CoreTagGetTagindexRequestTagindex>() {
           @Override
           public void write(JsonWriter out, CoreTagGetTagindexRequestTagindex value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CoreTagGetTagindexRequestTagindex read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CoreTagGetTagindexRequestTagindex given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CoreTagGetTagindexRequestTagindex
  * @throws IOException if the JSON string is invalid with respect to CoreTagGetTagindexRequestTagindex
  */
  public static CoreTagGetTagindexRequestTagindex fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CoreTagGetTagindexRequestTagindex.class);
  }

 /**
  * Convert an instance of CoreTagGetTagindexRequestTagindex to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

