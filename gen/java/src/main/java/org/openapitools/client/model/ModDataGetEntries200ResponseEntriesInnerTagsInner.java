/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.joshuapare.JSON;

/**
 * ModDataGetEntries200ResponseEntriesInnerTagsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-18T20:58:28.689161-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class ModDataGetEntries200ResponseEntriesInnerTagsInner {
  public static final String SERIALIZED_NAME_FLAG = "flag";
  @SerializedName(SERIALIZED_NAME_FLAG)
  private Integer flag = 0;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_ISSTANDARD = "isstandard";
  @SerializedName(SERIALIZED_NAME_ISSTANDARD)
  private Boolean isstandard = false;

  public static final String SERIALIZED_NAME_ITEMID = "itemid";
  @SerializedName(SERIALIZED_NAME_ITEMID)
  private Integer itemid;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ORDERING = "ordering";
  @SerializedName(SERIALIZED_NAME_ORDERING)
  private Integer ordering;

  public static final String SERIALIZED_NAME_RAWNAME = "rawname";
  @SerializedName(SERIALIZED_NAME_RAWNAME)
  private String rawname;

  public static final String SERIALIZED_NAME_TAGCOLLID = "tagcollid";
  @SerializedName(SERIALIZED_NAME_TAGCOLLID)
  private Integer tagcollid;

  public static final String SERIALIZED_NAME_TAGINSTANCECONTEXTID = "taginstancecontextid";
  @SerializedName(SERIALIZED_NAME_TAGINSTANCECONTEXTID)
  private Integer taginstancecontextid;

  public static final String SERIALIZED_NAME_TAGINSTANCEID = "taginstanceid";
  @SerializedName(SERIALIZED_NAME_TAGINSTANCEID)
  private Integer taginstanceid;

  public ModDataGetEntries200ResponseEntriesInnerTagsInner() {
  }

  public ModDataGetEntries200ResponseEntriesInnerTagsInner flag(Integer flag) {
    this.flag = flag;
    return this;
  }

   /**
   * Whether the tag is flagged as inappropriate.
   * @return flag
  **/
  @javax.annotation.Nullable
  public Integer getFlag() {
    return flag;
  }

  public void setFlag(Integer flag) {
    this.flag = flag;
  }


  public ModDataGetEntries200ResponseEntriesInnerTagsInner id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * Tag id.
   * @return id
  **/
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public ModDataGetEntries200ResponseEntriesInnerTagsInner isstandard(Boolean isstandard) {
    this.isstandard = isstandard;
    return this;
  }

   /**
   * Whether this tag is standard.
   * @return isstandard
  **/
  @javax.annotation.Nullable
  public Boolean getIsstandard() {
    return isstandard;
  }

  public void setIsstandard(Boolean isstandard) {
    this.isstandard = isstandard;
  }


  public ModDataGetEntries200ResponseEntriesInnerTagsInner itemid(Integer itemid) {
    this.itemid = itemid;
    return this;
  }

   /**
   * Id of the record tagged.
   * @return itemid
  **/
  @javax.annotation.Nullable
  public Integer getItemid() {
    return itemid;
  }

  public void setItemid(Integer itemid) {
    this.itemid = itemid;
  }


  public ModDataGetEntries200ResponseEntriesInnerTagsInner name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Tag name.
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ModDataGetEntries200ResponseEntriesInnerTagsInner ordering(Integer ordering) {
    this.ordering = ordering;
    return this;
  }

   /**
   * Tag ordering.
   * @return ordering
  **/
  @javax.annotation.Nullable
  public Integer getOrdering() {
    return ordering;
  }

  public void setOrdering(Integer ordering) {
    this.ordering = ordering;
  }


  public ModDataGetEntries200ResponseEntriesInnerTagsInner rawname(String rawname) {
    this.rawname = rawname;
    return this;
  }

   /**
   * The raw, unnormalised name for the tag as entered by users.
   * @return rawname
  **/
  @javax.annotation.Nullable
  public String getRawname() {
    return rawname;
  }

  public void setRawname(String rawname) {
    this.rawname = rawname;
  }


  public ModDataGetEntries200ResponseEntriesInnerTagsInner tagcollid(Integer tagcollid) {
    this.tagcollid = tagcollid;
    return this;
  }

   /**
   * Tag collection id.
   * @return tagcollid
  **/
  @javax.annotation.Nullable
  public Integer getTagcollid() {
    return tagcollid;
  }

  public void setTagcollid(Integer tagcollid) {
    this.tagcollid = tagcollid;
  }


  public ModDataGetEntries200ResponseEntriesInnerTagsInner taginstancecontextid(Integer taginstancecontextid) {
    this.taginstancecontextid = taginstancecontextid;
    return this;
  }

   /**
   * Context the tag instance belongs to.
   * @return taginstancecontextid
  **/
  @javax.annotation.Nullable
  public Integer getTaginstancecontextid() {
    return taginstancecontextid;
  }

  public void setTaginstancecontextid(Integer taginstancecontextid) {
    this.taginstancecontextid = taginstancecontextid;
  }


  public ModDataGetEntries200ResponseEntriesInnerTagsInner taginstanceid(Integer taginstanceid) {
    this.taginstanceid = taginstanceid;
    return this;
  }

   /**
   * Tag instance id.
   * @return taginstanceid
  **/
  @javax.annotation.Nullable
  public Integer getTaginstanceid() {
    return taginstanceid;
  }

  public void setTaginstanceid(Integer taginstanceid) {
    this.taginstanceid = taginstanceid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModDataGetEntries200ResponseEntriesInnerTagsInner modDataGetEntries200ResponseEntriesInnerTagsInner = (ModDataGetEntries200ResponseEntriesInnerTagsInner) o;
    return Objects.equals(this.flag, modDataGetEntries200ResponseEntriesInnerTagsInner.flag) &&
        Objects.equals(this.id, modDataGetEntries200ResponseEntriesInnerTagsInner.id) &&
        Objects.equals(this.isstandard, modDataGetEntries200ResponseEntriesInnerTagsInner.isstandard) &&
        Objects.equals(this.itemid, modDataGetEntries200ResponseEntriesInnerTagsInner.itemid) &&
        Objects.equals(this.name, modDataGetEntries200ResponseEntriesInnerTagsInner.name) &&
        Objects.equals(this.ordering, modDataGetEntries200ResponseEntriesInnerTagsInner.ordering) &&
        Objects.equals(this.rawname, modDataGetEntries200ResponseEntriesInnerTagsInner.rawname) &&
        Objects.equals(this.tagcollid, modDataGetEntries200ResponseEntriesInnerTagsInner.tagcollid) &&
        Objects.equals(this.taginstancecontextid, modDataGetEntries200ResponseEntriesInnerTagsInner.taginstancecontextid) &&
        Objects.equals(this.taginstanceid, modDataGetEntries200ResponseEntriesInnerTagsInner.taginstanceid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(flag, id, isstandard, itemid, name, ordering, rawname, tagcollid, taginstancecontextid, taginstanceid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModDataGetEntries200ResponseEntriesInnerTagsInner {\n");
    sb.append("    flag: ").append(toIndentedString(flag)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isstandard: ").append(toIndentedString(isstandard)).append("\n");
    sb.append("    itemid: ").append(toIndentedString(itemid)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    ordering: ").append(toIndentedString(ordering)).append("\n");
    sb.append("    rawname: ").append(toIndentedString(rawname)).append("\n");
    sb.append("    tagcollid: ").append(toIndentedString(tagcollid)).append("\n");
    sb.append("    taginstancecontextid: ").append(toIndentedString(taginstancecontextid)).append("\n");
    sb.append("    taginstanceid: ").append(toIndentedString(taginstanceid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("flag");
    openapiFields.add("id");
    openapiFields.add("isstandard");
    openapiFields.add("itemid");
    openapiFields.add("name");
    openapiFields.add("ordering");
    openapiFields.add("rawname");
    openapiFields.add("tagcollid");
    openapiFields.add("taginstancecontextid");
    openapiFields.add("taginstanceid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ModDataGetEntries200ResponseEntriesInnerTagsInner
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ModDataGetEntries200ResponseEntriesInnerTagsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModDataGetEntries200ResponseEntriesInnerTagsInner is not found in the empty JSON string", ModDataGetEntries200ResponseEntriesInnerTagsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ModDataGetEntries200ResponseEntriesInnerTagsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModDataGetEntries200ResponseEntriesInnerTagsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("rawname") != null && !jsonObj.get("rawname").isJsonNull()) && !jsonObj.get("rawname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rawname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rawname").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModDataGetEntries200ResponseEntriesInnerTagsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModDataGetEntries200ResponseEntriesInnerTagsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModDataGetEntries200ResponseEntriesInnerTagsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModDataGetEntries200ResponseEntriesInnerTagsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ModDataGetEntries200ResponseEntriesInnerTagsInner>() {
           @Override
           public void write(JsonWriter out, ModDataGetEntries200ResponseEntriesInnerTagsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModDataGetEntries200ResponseEntriesInnerTagsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ModDataGetEntries200ResponseEntriesInnerTagsInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ModDataGetEntries200ResponseEntriesInnerTagsInner
  * @throws IOException if the JSON string is invalid with respect to ModDataGetEntries200ResponseEntriesInnerTagsInner
  */
  public static ModDataGetEntries200ResponseEntriesInnerTagsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModDataGetEntries200ResponseEntriesInnerTagsInner.class);
  }

 /**
  * Convert an instance of ModDataGetEntries200ResponseEntriesInnerTagsInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

