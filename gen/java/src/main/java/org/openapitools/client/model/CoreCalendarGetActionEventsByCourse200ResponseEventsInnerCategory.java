/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.joshuapare.JSON;

/**
 * CoreCalendarGetActionEventsByCourse200ResponseEventsInnerCategory
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-18T20:58:28.689161-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class CoreCalendarGetActionEventsByCourse200ResponseEventsInnerCategory {
  public static final String SERIALIZED_NAME_COURSECOUNT = "coursecount";
  @SerializedName(SERIALIZED_NAME_COURSECOUNT)
  private Integer coursecount = 0;

  public static final String SERIALIZED_NAME_DEPTH = "depth";
  @SerializedName(SERIALIZED_NAME_DEPTH)
  private Integer depth = 0;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description = "null";

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id = null;

  public static final String SERIALIZED_NAME_IDNUMBER = "idnumber";
  @SerializedName(SERIALIZED_NAME_IDNUMBER)
  private String idnumber = "null";

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name = "";

  public static final String SERIALIZED_NAME_NESTEDNAME = "nestedname";
  @SerializedName(SERIALIZED_NAME_NESTEDNAME)
  private String nestedname = "null";

  public static final String SERIALIZED_NAME_PARENT = "parent";
  @SerializedName(SERIALIZED_NAME_PARENT)
  private Integer parent = null;

  public static final String SERIALIZED_NAME_TIMEMODIFIED = "timemodified";
  @SerializedName(SERIALIZED_NAME_TIMEMODIFIED)
  private Integer timemodified = 0;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_VISIBLE = "visible";
  @SerializedName(SERIALIZED_NAME_VISIBLE)
  private Integer visible = 1;

  public CoreCalendarGetActionEventsByCourse200ResponseEventsInnerCategory() {
  }

  public CoreCalendarGetActionEventsByCourse200ResponseEventsInnerCategory coursecount(Integer coursecount) {
    this.coursecount = coursecount;
    return this;
  }

   /**
   * coursecount
   * @return coursecount
  **/
  @javax.annotation.Nonnull
  public Integer getCoursecount() {
    return coursecount;
  }

  public void setCoursecount(Integer coursecount) {
    this.coursecount = coursecount;
  }


  public CoreCalendarGetActionEventsByCourse200ResponseEventsInnerCategory depth(Integer depth) {
    this.depth = depth;
    return this;
  }

   /**
   * depth
   * @return depth
  **/
  @javax.annotation.Nonnull
  public Integer getDepth() {
    return depth;
  }

  public void setDepth(Integer depth) {
    this.depth = depth;
  }


  public CoreCalendarGetActionEventsByCourse200ResponseEventsInnerCategory description(String description) {
    this.description = description;
    return this;
  }

   /**
   * description
   * @return description
  **/
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CoreCalendarGetActionEventsByCourse200ResponseEventsInnerCategory id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * id
   * @return id
  **/
  @javax.annotation.Nonnull
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public CoreCalendarGetActionEventsByCourse200ResponseEventsInnerCategory idnumber(String idnumber) {
    this.idnumber = idnumber;
    return this;
  }

   /**
   * idnumber
   * @return idnumber
  **/
  @javax.annotation.Nonnull
  public String getIdnumber() {
    return idnumber;
  }

  public void setIdnumber(String idnumber) {
    this.idnumber = idnumber;
  }


  public CoreCalendarGetActionEventsByCourse200ResponseEventsInnerCategory name(String name) {
    this.name = name;
    return this;
  }

   /**
   * name
   * @return name
  **/
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CoreCalendarGetActionEventsByCourse200ResponseEventsInnerCategory nestedname(String nestedname) {
    this.nestedname = nestedname;
    return this;
  }

   /**
   * nestedname
   * @return nestedname
  **/
  @javax.annotation.Nonnull
  public String getNestedname() {
    return nestedname;
  }

  public void setNestedname(String nestedname) {
    this.nestedname = nestedname;
  }


  public CoreCalendarGetActionEventsByCourse200ResponseEventsInnerCategory parent(Integer parent) {
    this.parent = parent;
    return this;
  }

   /**
   * parent
   * @return parent
  **/
  @javax.annotation.Nonnull
  public Integer getParent() {
    return parent;
  }

  public void setParent(Integer parent) {
    this.parent = parent;
  }


  public CoreCalendarGetActionEventsByCourse200ResponseEventsInnerCategory timemodified(Integer timemodified) {
    this.timemodified = timemodified;
    return this;
  }

   /**
   * timemodified
   * @return timemodified
  **/
  @javax.annotation.Nonnull
  public Integer getTimemodified() {
    return timemodified;
  }

  public void setTimemodified(Integer timemodified) {
    this.timemodified = timemodified;
  }


  public CoreCalendarGetActionEventsByCourse200ResponseEventsInnerCategory url(String url) {
    this.url = url;
    return this;
  }

   /**
   * url
   * @return url
  **/
  @javax.annotation.Nonnull
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public CoreCalendarGetActionEventsByCourse200ResponseEventsInnerCategory visible(Integer visible) {
    this.visible = visible;
    return this;
  }

   /**
   * visible
   * @return visible
  **/
  @javax.annotation.Nonnull
  public Integer getVisible() {
    return visible;
  }

  public void setVisible(Integer visible) {
    this.visible = visible;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CoreCalendarGetActionEventsByCourse200ResponseEventsInnerCategory coreCalendarGetActionEventsByCourse200ResponseEventsInnerCategory = (CoreCalendarGetActionEventsByCourse200ResponseEventsInnerCategory) o;
    return Objects.equals(this.coursecount, coreCalendarGetActionEventsByCourse200ResponseEventsInnerCategory.coursecount) &&
        Objects.equals(this.depth, coreCalendarGetActionEventsByCourse200ResponseEventsInnerCategory.depth) &&
        Objects.equals(this.description, coreCalendarGetActionEventsByCourse200ResponseEventsInnerCategory.description) &&
        Objects.equals(this.id, coreCalendarGetActionEventsByCourse200ResponseEventsInnerCategory.id) &&
        Objects.equals(this.idnumber, coreCalendarGetActionEventsByCourse200ResponseEventsInnerCategory.idnumber) &&
        Objects.equals(this.name, coreCalendarGetActionEventsByCourse200ResponseEventsInnerCategory.name) &&
        Objects.equals(this.nestedname, coreCalendarGetActionEventsByCourse200ResponseEventsInnerCategory.nestedname) &&
        Objects.equals(this.parent, coreCalendarGetActionEventsByCourse200ResponseEventsInnerCategory.parent) &&
        Objects.equals(this.timemodified, coreCalendarGetActionEventsByCourse200ResponseEventsInnerCategory.timemodified) &&
        Objects.equals(this.url, coreCalendarGetActionEventsByCourse200ResponseEventsInnerCategory.url) &&
        Objects.equals(this.visible, coreCalendarGetActionEventsByCourse200ResponseEventsInnerCategory.visible);
  }

  @Override
  public int hashCode() {
    return Objects.hash(coursecount, depth, description, id, idnumber, name, nestedname, parent, timemodified, url, visible);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CoreCalendarGetActionEventsByCourse200ResponseEventsInnerCategory {\n");
    sb.append("    coursecount: ").append(toIndentedString(coursecount)).append("\n");
    sb.append("    depth: ").append(toIndentedString(depth)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    idnumber: ").append(toIndentedString(idnumber)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nestedname: ").append(toIndentedString(nestedname)).append("\n");
    sb.append("    parent: ").append(toIndentedString(parent)).append("\n");
    sb.append("    timemodified: ").append(toIndentedString(timemodified)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    visible: ").append(toIndentedString(visible)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("coursecount");
    openapiFields.add("depth");
    openapiFields.add("description");
    openapiFields.add("id");
    openapiFields.add("idnumber");
    openapiFields.add("name");
    openapiFields.add("nestedname");
    openapiFields.add("parent");
    openapiFields.add("timemodified");
    openapiFields.add("url");
    openapiFields.add("visible");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("coursecount");
    openapiRequiredFields.add("depth");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("idnumber");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("nestedname");
    openapiRequiredFields.add("parent");
    openapiRequiredFields.add("timemodified");
    openapiRequiredFields.add("url");
    openapiRequiredFields.add("visible");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CoreCalendarGetActionEventsByCourse200ResponseEventsInnerCategory
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CoreCalendarGetActionEventsByCourse200ResponseEventsInnerCategory.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CoreCalendarGetActionEventsByCourse200ResponseEventsInnerCategory is not found in the empty JSON string", CoreCalendarGetActionEventsByCourse200ResponseEventsInnerCategory.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CoreCalendarGetActionEventsByCourse200ResponseEventsInnerCategory.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CoreCalendarGetActionEventsByCourse200ResponseEventsInnerCategory` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CoreCalendarGetActionEventsByCourse200ResponseEventsInnerCategory.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("idnumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `idnumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("idnumber").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("nestedname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nestedname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nestedname").toString()));
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CoreCalendarGetActionEventsByCourse200ResponseEventsInnerCategory.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CoreCalendarGetActionEventsByCourse200ResponseEventsInnerCategory' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CoreCalendarGetActionEventsByCourse200ResponseEventsInnerCategory> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CoreCalendarGetActionEventsByCourse200ResponseEventsInnerCategory.class));

       return (TypeAdapter<T>) new TypeAdapter<CoreCalendarGetActionEventsByCourse200ResponseEventsInnerCategory>() {
           @Override
           public void write(JsonWriter out, CoreCalendarGetActionEventsByCourse200ResponseEventsInnerCategory value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CoreCalendarGetActionEventsByCourse200ResponseEventsInnerCategory read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CoreCalendarGetActionEventsByCourse200ResponseEventsInnerCategory given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CoreCalendarGetActionEventsByCourse200ResponseEventsInnerCategory
  * @throws IOException if the JSON string is invalid with respect to CoreCalendarGetActionEventsByCourse200ResponseEventsInnerCategory
  */
  public static CoreCalendarGetActionEventsByCourse200ResponseEventsInnerCategory fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CoreCalendarGetActionEventsByCourse200ResponseEventsInnerCategory.class);
  }

 /**
  * Convert an instance of CoreCalendarGetActionEventsByCourse200ResponseEventsInnerCategory to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

