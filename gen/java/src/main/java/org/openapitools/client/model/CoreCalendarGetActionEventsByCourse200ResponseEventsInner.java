/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CoreCalendarGetActionEventsByCourse200ResponseEventsInnerAction;
import org.openapitools.client.model.CoreCalendarGetActionEventsByCourse200ResponseEventsInnerCategory;
import org.openapitools.client.model.CoreCalendarGetActionEventsByCourse200ResponseEventsInnerCourse;
import org.openapitools.client.model.CoreCalendarGetActionEventsByCourse200ResponseEventsInnerIcon;
import org.openapitools.client.model.CoreCalendarGetActionEventsByCourse200ResponseEventsInnerSubscription;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.joshuapare.JSON;

/**
 * CoreCalendarGetActionEventsByCourse200ResponseEventsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-18T14:00:07.069642-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class CoreCalendarGetActionEventsByCourse200ResponseEventsInner {
  public static final String SERIALIZED_NAME_ACTION = "action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private CoreCalendarGetActionEventsByCourse200ResponseEventsInnerAction action;

  public static final String SERIALIZED_NAME_ACTIVITYNAME = "activityname";
  @SerializedName(SERIALIZED_NAME_ACTIVITYNAME)
  private String activityname = "null";

  public static final String SERIALIZED_NAME_ACTIVITYSTR = "activitystr";
  @SerializedName(SERIALIZED_NAME_ACTIVITYSTR)
  private String activitystr = "null";

  public static final String SERIALIZED_NAME_CANDELETE = "candelete";
  @SerializedName(SERIALIZED_NAME_CANDELETE)
  private Boolean candelete = null;

  public static final String SERIALIZED_NAME_CANEDIT = "canedit";
  @SerializedName(SERIALIZED_NAME_CANEDIT)
  private Boolean canedit = null;

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private CoreCalendarGetActionEventsByCourse200ResponseEventsInnerCategory category;

  public static final String SERIALIZED_NAME_CATEGORYID = "categoryid";
  @SerializedName(SERIALIZED_NAME_CATEGORYID)
  private Integer categoryid = null;

  public static final String SERIALIZED_NAME_COMPONENT = "component";
  @SerializedName(SERIALIZED_NAME_COMPONENT)
  private String component = "null";

  public static final String SERIALIZED_NAME_COURSE = "course";
  @SerializedName(SERIALIZED_NAME_COURSE)
  private CoreCalendarGetActionEventsByCourse200ResponseEventsInnerCourse course;

  public static final String SERIALIZED_NAME_DELETEURL = "deleteurl";
  @SerializedName(SERIALIZED_NAME_DELETEURL)
  private String deleteurl = "null";

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description = "null";

  public static final String SERIALIZED_NAME_DESCRIPTIONFORMAT = "descriptionformat";
  @SerializedName(SERIALIZED_NAME_DESCRIPTIONFORMAT)
  private Integer descriptionformat = 1;

  public static final String SERIALIZED_NAME_EDITURL = "editurl";
  @SerializedName(SERIALIZED_NAME_EDITURL)
  private String editurl = "null";

  public static final String SERIALIZED_NAME_EVENTCOUNT = "eventcount";
  @SerializedName(SERIALIZED_NAME_EVENTCOUNT)
  private Integer eventcount = null;

  public static final String SERIALIZED_NAME_EVENTTYPE = "eventtype";
  @SerializedName(SERIALIZED_NAME_EVENTTYPE)
  private String eventtype = "null";

  public static final String SERIALIZED_NAME_FORMATTEDLOCATION = "formattedlocation";
  @SerializedName(SERIALIZED_NAME_FORMATTEDLOCATION)
  private String formattedlocation = "null";

  public static final String SERIALIZED_NAME_FORMATTEDTIME = "formattedtime";
  @SerializedName(SERIALIZED_NAME_FORMATTEDTIME)
  private String formattedtime = "null";

  public static final String SERIALIZED_NAME_GROUPID = "groupid";
  @SerializedName(SERIALIZED_NAME_GROUPID)
  private Integer groupid = null;

  public static final String SERIALIZED_NAME_GROUPNAME = "groupname";
  @SerializedName(SERIALIZED_NAME_GROUPNAME)
  private String groupname = "null";

  public static final String SERIALIZED_NAME_ICON = "icon";
  @SerializedName(SERIALIZED_NAME_ICON)
  private CoreCalendarGetActionEventsByCourse200ResponseEventsInnerIcon icon;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_INSTANCE = "instance";
  @SerializedName(SERIALIZED_NAME_INSTANCE)
  private Integer instance = null;

  public static final String SERIALIZED_NAME_ISACTIONEVENT = "isactionevent";
  @SerializedName(SERIALIZED_NAME_ISACTIONEVENT)
  private Boolean isactionevent = null;

  public static final String SERIALIZED_NAME_ISCATEGORYEVENT = "iscategoryevent";
  @SerializedName(SERIALIZED_NAME_ISCATEGORYEVENT)
  private Boolean iscategoryevent = null;

  public static final String SERIALIZED_NAME_ISCOURSEEVENT = "iscourseevent";
  @SerializedName(SERIALIZED_NAME_ISCOURSEEVENT)
  private Boolean iscourseevent = null;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location = "null";

  public static final String SERIALIZED_NAME_MODULENAME = "modulename";
  @SerializedName(SERIALIZED_NAME_MODULENAME)
  private String modulename = "null";

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NORMALISEDEVENTTYPE = "normalisedeventtype";
  @SerializedName(SERIALIZED_NAME_NORMALISEDEVENTTYPE)
  private String normalisedeventtype = "null";

  public static final String SERIALIZED_NAME_NORMALISEDEVENTTYPETEXT = "normalisedeventtypetext";
  @SerializedName(SERIALIZED_NAME_NORMALISEDEVENTTYPETEXT)
  private String normalisedeventtypetext = "null";

  public static final String SERIALIZED_NAME_OVERDUE = "overdue";
  @SerializedName(SERIALIZED_NAME_OVERDUE)
  private Boolean overdue = false;

  public static final String SERIALIZED_NAME_PURPOSE = "purpose";
  @SerializedName(SERIALIZED_NAME_PURPOSE)
  private String purpose = "null";

  public static final String SERIALIZED_NAME_REPEATID = "repeatid";
  @SerializedName(SERIALIZED_NAME_REPEATID)
  private Integer repeatid = null;

  public static final String SERIALIZED_NAME_SUBSCRIPTION = "subscription";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION)
  private CoreCalendarGetActionEventsByCourse200ResponseEventsInnerSubscription subscription;

  public static final String SERIALIZED_NAME_TIMEDURATION = "timeduration";
  @SerializedName(SERIALIZED_NAME_TIMEDURATION)
  private Integer timeduration = null;

  public static final String SERIALIZED_NAME_TIMEMODIFIED = "timemodified";
  @SerializedName(SERIALIZED_NAME_TIMEMODIFIED)
  private Integer timemodified = null;

  public static final String SERIALIZED_NAME_TIMESORT = "timesort";
  @SerializedName(SERIALIZED_NAME_TIMESORT)
  private Integer timesort = null;

  public static final String SERIALIZED_NAME_TIMESTART = "timestart";
  @SerializedName(SERIALIZED_NAME_TIMESTART)
  private Integer timestart = null;

  public static final String SERIALIZED_NAME_TIMEUSERMIDNIGHT = "timeusermidnight";
  @SerializedName(SERIALIZED_NAME_TIMEUSERMIDNIGHT)
  private Integer timeusermidnight = null;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_USERID = "userid";
  @SerializedName(SERIALIZED_NAME_USERID)
  private Integer userid = null;

  public static final String SERIALIZED_NAME_VIEWURL = "viewurl";
  @SerializedName(SERIALIZED_NAME_VIEWURL)
  private String viewurl;

  public static final String SERIALIZED_NAME_VISIBLE = "visible";
  @SerializedName(SERIALIZED_NAME_VISIBLE)
  private Integer visible = null;

  public CoreCalendarGetActionEventsByCourse200ResponseEventsInner() {
  }

  public CoreCalendarGetActionEventsByCourse200ResponseEventsInner action(CoreCalendarGetActionEventsByCourse200ResponseEventsInnerAction action) {
    this.action = action;
    return this;
  }

   /**
   * Get action
   * @return action
  **/
  @javax.annotation.Nullable
  public CoreCalendarGetActionEventsByCourse200ResponseEventsInnerAction getAction() {
    return action;
  }

  public void setAction(CoreCalendarGetActionEventsByCourse200ResponseEventsInnerAction action) {
    this.action = action;
  }


  public CoreCalendarGetActionEventsByCourse200ResponseEventsInner activityname(String activityname) {
    this.activityname = activityname;
    return this;
  }

   /**
   * activityname
   * @return activityname
  **/
  @javax.annotation.Nullable
  public String getActivityname() {
    return activityname;
  }

  public void setActivityname(String activityname) {
    this.activityname = activityname;
  }


  public CoreCalendarGetActionEventsByCourse200ResponseEventsInner activitystr(String activitystr) {
    this.activitystr = activitystr;
    return this;
  }

   /**
   * activitystr
   * @return activitystr
  **/
  @javax.annotation.Nullable
  public String getActivitystr() {
    return activitystr;
  }

  public void setActivitystr(String activitystr) {
    this.activitystr = activitystr;
  }


  public CoreCalendarGetActionEventsByCourse200ResponseEventsInner candelete(Boolean candelete) {
    this.candelete = candelete;
    return this;
  }

   /**
   * candelete
   * @return candelete
  **/
  @javax.annotation.Nullable
  public Boolean getCandelete() {
    return candelete;
  }

  public void setCandelete(Boolean candelete) {
    this.candelete = candelete;
  }


  public CoreCalendarGetActionEventsByCourse200ResponseEventsInner canedit(Boolean canedit) {
    this.canedit = canedit;
    return this;
  }

   /**
   * canedit
   * @return canedit
  **/
  @javax.annotation.Nullable
  public Boolean getCanedit() {
    return canedit;
  }

  public void setCanedit(Boolean canedit) {
    this.canedit = canedit;
  }


  public CoreCalendarGetActionEventsByCourse200ResponseEventsInner category(CoreCalendarGetActionEventsByCourse200ResponseEventsInnerCategory category) {
    this.category = category;
    return this;
  }

   /**
   * Get category
   * @return category
  **/
  @javax.annotation.Nullable
  public CoreCalendarGetActionEventsByCourse200ResponseEventsInnerCategory getCategory() {
    return category;
  }

  public void setCategory(CoreCalendarGetActionEventsByCourse200ResponseEventsInnerCategory category) {
    this.category = category;
  }


  public CoreCalendarGetActionEventsByCourse200ResponseEventsInner categoryid(Integer categoryid) {
    this.categoryid = categoryid;
    return this;
  }

   /**
   * categoryid
   * @return categoryid
  **/
  @javax.annotation.Nullable
  public Integer getCategoryid() {
    return categoryid;
  }

  public void setCategoryid(Integer categoryid) {
    this.categoryid = categoryid;
  }


  public CoreCalendarGetActionEventsByCourse200ResponseEventsInner component(String component) {
    this.component = component;
    return this;
  }

   /**
   * component
   * @return component
  **/
  @javax.annotation.Nullable
  public String getComponent() {
    return component;
  }

  public void setComponent(String component) {
    this.component = component;
  }


  public CoreCalendarGetActionEventsByCourse200ResponseEventsInner course(CoreCalendarGetActionEventsByCourse200ResponseEventsInnerCourse course) {
    this.course = course;
    return this;
  }

   /**
   * Get course
   * @return course
  **/
  @javax.annotation.Nullable
  public CoreCalendarGetActionEventsByCourse200ResponseEventsInnerCourse getCourse() {
    return course;
  }

  public void setCourse(CoreCalendarGetActionEventsByCourse200ResponseEventsInnerCourse course) {
    this.course = course;
  }


  public CoreCalendarGetActionEventsByCourse200ResponseEventsInner deleteurl(String deleteurl) {
    this.deleteurl = deleteurl;
    return this;
  }

   /**
   * deleteurl
   * @return deleteurl
  **/
  @javax.annotation.Nullable
  public String getDeleteurl() {
    return deleteurl;
  }

  public void setDeleteurl(String deleteurl) {
    this.deleteurl = deleteurl;
  }


  public CoreCalendarGetActionEventsByCourse200ResponseEventsInner description(String description) {
    this.description = description;
    return this;
  }

   /**
   * description
   * @return description
  **/
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CoreCalendarGetActionEventsByCourse200ResponseEventsInner descriptionformat(Integer descriptionformat) {
    this.descriptionformat = descriptionformat;
    return this;
  }

   /**
   * description format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)
   * @return descriptionformat
  **/
  @javax.annotation.Nullable
  public Integer getDescriptionformat() {
    return descriptionformat;
  }

  public void setDescriptionformat(Integer descriptionformat) {
    this.descriptionformat = descriptionformat;
  }


  public CoreCalendarGetActionEventsByCourse200ResponseEventsInner editurl(String editurl) {
    this.editurl = editurl;
    return this;
  }

   /**
   * editurl
   * @return editurl
  **/
  @javax.annotation.Nullable
  public String getEditurl() {
    return editurl;
  }

  public void setEditurl(String editurl) {
    this.editurl = editurl;
  }


  public CoreCalendarGetActionEventsByCourse200ResponseEventsInner eventcount(Integer eventcount) {
    this.eventcount = eventcount;
    return this;
  }

   /**
   * eventcount
   * @return eventcount
  **/
  @javax.annotation.Nullable
  public Integer getEventcount() {
    return eventcount;
  }

  public void setEventcount(Integer eventcount) {
    this.eventcount = eventcount;
  }


  public CoreCalendarGetActionEventsByCourse200ResponseEventsInner eventtype(String eventtype) {
    this.eventtype = eventtype;
    return this;
  }

   /**
   * eventtype
   * @return eventtype
  **/
  @javax.annotation.Nullable
  public String getEventtype() {
    return eventtype;
  }

  public void setEventtype(String eventtype) {
    this.eventtype = eventtype;
  }


  public CoreCalendarGetActionEventsByCourse200ResponseEventsInner formattedlocation(String formattedlocation) {
    this.formattedlocation = formattedlocation;
    return this;
  }

   /**
   * formattedlocation
   * @return formattedlocation
  **/
  @javax.annotation.Nullable
  public String getFormattedlocation() {
    return formattedlocation;
  }

  public void setFormattedlocation(String formattedlocation) {
    this.formattedlocation = formattedlocation;
  }


  public CoreCalendarGetActionEventsByCourse200ResponseEventsInner formattedtime(String formattedtime) {
    this.formattedtime = formattedtime;
    return this;
  }

   /**
   * formattedtime
   * @return formattedtime
  **/
  @javax.annotation.Nullable
  public String getFormattedtime() {
    return formattedtime;
  }

  public void setFormattedtime(String formattedtime) {
    this.formattedtime = formattedtime;
  }


  public CoreCalendarGetActionEventsByCourse200ResponseEventsInner groupid(Integer groupid) {
    this.groupid = groupid;
    return this;
  }

   /**
   * groupid
   * @return groupid
  **/
  @javax.annotation.Nullable
  public Integer getGroupid() {
    return groupid;
  }

  public void setGroupid(Integer groupid) {
    this.groupid = groupid;
  }


  public CoreCalendarGetActionEventsByCourse200ResponseEventsInner groupname(String groupname) {
    this.groupname = groupname;
    return this;
  }

   /**
   * groupname
   * @return groupname
  **/
  @javax.annotation.Nullable
  public String getGroupname() {
    return groupname;
  }

  public void setGroupname(String groupname) {
    this.groupname = groupname;
  }


  public CoreCalendarGetActionEventsByCourse200ResponseEventsInner icon(CoreCalendarGetActionEventsByCourse200ResponseEventsInnerIcon icon) {
    this.icon = icon;
    return this;
  }

   /**
   * Get icon
   * @return icon
  **/
  @javax.annotation.Nullable
  public CoreCalendarGetActionEventsByCourse200ResponseEventsInnerIcon getIcon() {
    return icon;
  }

  public void setIcon(CoreCalendarGetActionEventsByCourse200ResponseEventsInnerIcon icon) {
    this.icon = icon;
  }


  public CoreCalendarGetActionEventsByCourse200ResponseEventsInner id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * id
   * @return id
  **/
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public CoreCalendarGetActionEventsByCourse200ResponseEventsInner instance(Integer instance) {
    this.instance = instance;
    return this;
  }

   /**
   * instance
   * @return instance
  **/
  @javax.annotation.Nullable
  public Integer getInstance() {
    return instance;
  }

  public void setInstance(Integer instance) {
    this.instance = instance;
  }


  public CoreCalendarGetActionEventsByCourse200ResponseEventsInner isactionevent(Boolean isactionevent) {
    this.isactionevent = isactionevent;
    return this;
  }

   /**
   * isactionevent
   * @return isactionevent
  **/
  @javax.annotation.Nullable
  public Boolean getIsactionevent() {
    return isactionevent;
  }

  public void setIsactionevent(Boolean isactionevent) {
    this.isactionevent = isactionevent;
  }


  public CoreCalendarGetActionEventsByCourse200ResponseEventsInner iscategoryevent(Boolean iscategoryevent) {
    this.iscategoryevent = iscategoryevent;
    return this;
  }

   /**
   * iscategoryevent
   * @return iscategoryevent
  **/
  @javax.annotation.Nullable
  public Boolean getIscategoryevent() {
    return iscategoryevent;
  }

  public void setIscategoryevent(Boolean iscategoryevent) {
    this.iscategoryevent = iscategoryevent;
  }


  public CoreCalendarGetActionEventsByCourse200ResponseEventsInner iscourseevent(Boolean iscourseevent) {
    this.iscourseevent = iscourseevent;
    return this;
  }

   /**
   * iscourseevent
   * @return iscourseevent
  **/
  @javax.annotation.Nullable
  public Boolean getIscourseevent() {
    return iscourseevent;
  }

  public void setIscourseevent(Boolean iscourseevent) {
    this.iscourseevent = iscourseevent;
  }


  public CoreCalendarGetActionEventsByCourse200ResponseEventsInner location(String location) {
    this.location = location;
    return this;
  }

   /**
   * location
   * @return location
  **/
  @javax.annotation.Nullable
  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }


  public CoreCalendarGetActionEventsByCourse200ResponseEventsInner modulename(String modulename) {
    this.modulename = modulename;
    return this;
  }

   /**
   * modulename
   * @return modulename
  **/
  @javax.annotation.Nullable
  public String getModulename() {
    return modulename;
  }

  public void setModulename(String modulename) {
    this.modulename = modulename;
  }


  public CoreCalendarGetActionEventsByCourse200ResponseEventsInner name(String name) {
    this.name = name;
    return this;
  }

   /**
   * name
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CoreCalendarGetActionEventsByCourse200ResponseEventsInner normalisedeventtype(String normalisedeventtype) {
    this.normalisedeventtype = normalisedeventtype;
    return this;
  }

   /**
   * normalisedeventtype
   * @return normalisedeventtype
  **/
  @javax.annotation.Nullable
  public String getNormalisedeventtype() {
    return normalisedeventtype;
  }

  public void setNormalisedeventtype(String normalisedeventtype) {
    this.normalisedeventtype = normalisedeventtype;
  }


  public CoreCalendarGetActionEventsByCourse200ResponseEventsInner normalisedeventtypetext(String normalisedeventtypetext) {
    this.normalisedeventtypetext = normalisedeventtypetext;
    return this;
  }

   /**
   * normalisedeventtypetext
   * @return normalisedeventtypetext
  **/
  @javax.annotation.Nullable
  public String getNormalisedeventtypetext() {
    return normalisedeventtypetext;
  }

  public void setNormalisedeventtypetext(String normalisedeventtypetext) {
    this.normalisedeventtypetext = normalisedeventtypetext;
  }


  public CoreCalendarGetActionEventsByCourse200ResponseEventsInner overdue(Boolean overdue) {
    this.overdue = overdue;
    return this;
  }

   /**
   * overdue
   * @return overdue
  **/
  @javax.annotation.Nullable
  public Boolean getOverdue() {
    return overdue;
  }

  public void setOverdue(Boolean overdue) {
    this.overdue = overdue;
  }


  public CoreCalendarGetActionEventsByCourse200ResponseEventsInner purpose(String purpose) {
    this.purpose = purpose;
    return this;
  }

   /**
   * purpose
   * @return purpose
  **/
  @javax.annotation.Nullable
  public String getPurpose() {
    return purpose;
  }

  public void setPurpose(String purpose) {
    this.purpose = purpose;
  }


  public CoreCalendarGetActionEventsByCourse200ResponseEventsInner repeatid(Integer repeatid) {
    this.repeatid = repeatid;
    return this;
  }

   /**
   * repeatid
   * @return repeatid
  **/
  @javax.annotation.Nullable
  public Integer getRepeatid() {
    return repeatid;
  }

  public void setRepeatid(Integer repeatid) {
    this.repeatid = repeatid;
  }


  public CoreCalendarGetActionEventsByCourse200ResponseEventsInner subscription(CoreCalendarGetActionEventsByCourse200ResponseEventsInnerSubscription subscription) {
    this.subscription = subscription;
    return this;
  }

   /**
   * Get subscription
   * @return subscription
  **/
  @javax.annotation.Nullable
  public CoreCalendarGetActionEventsByCourse200ResponseEventsInnerSubscription getSubscription() {
    return subscription;
  }

  public void setSubscription(CoreCalendarGetActionEventsByCourse200ResponseEventsInnerSubscription subscription) {
    this.subscription = subscription;
  }


  public CoreCalendarGetActionEventsByCourse200ResponseEventsInner timeduration(Integer timeduration) {
    this.timeduration = timeduration;
    return this;
  }

   /**
   * timeduration
   * @return timeduration
  **/
  @javax.annotation.Nullable
  public Integer getTimeduration() {
    return timeduration;
  }

  public void setTimeduration(Integer timeduration) {
    this.timeduration = timeduration;
  }


  public CoreCalendarGetActionEventsByCourse200ResponseEventsInner timemodified(Integer timemodified) {
    this.timemodified = timemodified;
    return this;
  }

   /**
   * timemodified
   * @return timemodified
  **/
  @javax.annotation.Nullable
  public Integer getTimemodified() {
    return timemodified;
  }

  public void setTimemodified(Integer timemodified) {
    this.timemodified = timemodified;
  }


  public CoreCalendarGetActionEventsByCourse200ResponseEventsInner timesort(Integer timesort) {
    this.timesort = timesort;
    return this;
  }

   /**
   * timesort
   * @return timesort
  **/
  @javax.annotation.Nullable
  public Integer getTimesort() {
    return timesort;
  }

  public void setTimesort(Integer timesort) {
    this.timesort = timesort;
  }


  public CoreCalendarGetActionEventsByCourse200ResponseEventsInner timestart(Integer timestart) {
    this.timestart = timestart;
    return this;
  }

   /**
   * timestart
   * @return timestart
  **/
  @javax.annotation.Nullable
  public Integer getTimestart() {
    return timestart;
  }

  public void setTimestart(Integer timestart) {
    this.timestart = timestart;
  }


  public CoreCalendarGetActionEventsByCourse200ResponseEventsInner timeusermidnight(Integer timeusermidnight) {
    this.timeusermidnight = timeusermidnight;
    return this;
  }

   /**
   * timeusermidnight
   * @return timeusermidnight
  **/
  @javax.annotation.Nullable
  public Integer getTimeusermidnight() {
    return timeusermidnight;
  }

  public void setTimeusermidnight(Integer timeusermidnight) {
    this.timeusermidnight = timeusermidnight;
  }


  public CoreCalendarGetActionEventsByCourse200ResponseEventsInner url(String url) {
    this.url = url;
    return this;
  }

   /**
   * url
   * @return url
  **/
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public CoreCalendarGetActionEventsByCourse200ResponseEventsInner userid(Integer userid) {
    this.userid = userid;
    return this;
  }

   /**
   * userid
   * @return userid
  **/
  @javax.annotation.Nullable
  public Integer getUserid() {
    return userid;
  }

  public void setUserid(Integer userid) {
    this.userid = userid;
  }


  public CoreCalendarGetActionEventsByCourse200ResponseEventsInner viewurl(String viewurl) {
    this.viewurl = viewurl;
    return this;
  }

   /**
   * viewurl
   * @return viewurl
  **/
  @javax.annotation.Nullable
  public String getViewurl() {
    return viewurl;
  }

  public void setViewurl(String viewurl) {
    this.viewurl = viewurl;
  }


  public CoreCalendarGetActionEventsByCourse200ResponseEventsInner visible(Integer visible) {
    this.visible = visible;
    return this;
  }

   /**
   * visible
   * @return visible
  **/
  @javax.annotation.Nullable
  public Integer getVisible() {
    return visible;
  }

  public void setVisible(Integer visible) {
    this.visible = visible;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CoreCalendarGetActionEventsByCourse200ResponseEventsInner coreCalendarGetActionEventsByCourse200ResponseEventsInner = (CoreCalendarGetActionEventsByCourse200ResponseEventsInner) o;
    return Objects.equals(this.action, coreCalendarGetActionEventsByCourse200ResponseEventsInner.action) &&
        Objects.equals(this.activityname, coreCalendarGetActionEventsByCourse200ResponseEventsInner.activityname) &&
        Objects.equals(this.activitystr, coreCalendarGetActionEventsByCourse200ResponseEventsInner.activitystr) &&
        Objects.equals(this.candelete, coreCalendarGetActionEventsByCourse200ResponseEventsInner.candelete) &&
        Objects.equals(this.canedit, coreCalendarGetActionEventsByCourse200ResponseEventsInner.canedit) &&
        Objects.equals(this.category, coreCalendarGetActionEventsByCourse200ResponseEventsInner.category) &&
        Objects.equals(this.categoryid, coreCalendarGetActionEventsByCourse200ResponseEventsInner.categoryid) &&
        Objects.equals(this.component, coreCalendarGetActionEventsByCourse200ResponseEventsInner.component) &&
        Objects.equals(this.course, coreCalendarGetActionEventsByCourse200ResponseEventsInner.course) &&
        Objects.equals(this.deleteurl, coreCalendarGetActionEventsByCourse200ResponseEventsInner.deleteurl) &&
        Objects.equals(this.description, coreCalendarGetActionEventsByCourse200ResponseEventsInner.description) &&
        Objects.equals(this.descriptionformat, coreCalendarGetActionEventsByCourse200ResponseEventsInner.descriptionformat) &&
        Objects.equals(this.editurl, coreCalendarGetActionEventsByCourse200ResponseEventsInner.editurl) &&
        Objects.equals(this.eventcount, coreCalendarGetActionEventsByCourse200ResponseEventsInner.eventcount) &&
        Objects.equals(this.eventtype, coreCalendarGetActionEventsByCourse200ResponseEventsInner.eventtype) &&
        Objects.equals(this.formattedlocation, coreCalendarGetActionEventsByCourse200ResponseEventsInner.formattedlocation) &&
        Objects.equals(this.formattedtime, coreCalendarGetActionEventsByCourse200ResponseEventsInner.formattedtime) &&
        Objects.equals(this.groupid, coreCalendarGetActionEventsByCourse200ResponseEventsInner.groupid) &&
        Objects.equals(this.groupname, coreCalendarGetActionEventsByCourse200ResponseEventsInner.groupname) &&
        Objects.equals(this.icon, coreCalendarGetActionEventsByCourse200ResponseEventsInner.icon) &&
        Objects.equals(this.id, coreCalendarGetActionEventsByCourse200ResponseEventsInner.id) &&
        Objects.equals(this.instance, coreCalendarGetActionEventsByCourse200ResponseEventsInner.instance) &&
        Objects.equals(this.isactionevent, coreCalendarGetActionEventsByCourse200ResponseEventsInner.isactionevent) &&
        Objects.equals(this.iscategoryevent, coreCalendarGetActionEventsByCourse200ResponseEventsInner.iscategoryevent) &&
        Objects.equals(this.iscourseevent, coreCalendarGetActionEventsByCourse200ResponseEventsInner.iscourseevent) &&
        Objects.equals(this.location, coreCalendarGetActionEventsByCourse200ResponseEventsInner.location) &&
        Objects.equals(this.modulename, coreCalendarGetActionEventsByCourse200ResponseEventsInner.modulename) &&
        Objects.equals(this.name, coreCalendarGetActionEventsByCourse200ResponseEventsInner.name) &&
        Objects.equals(this.normalisedeventtype, coreCalendarGetActionEventsByCourse200ResponseEventsInner.normalisedeventtype) &&
        Objects.equals(this.normalisedeventtypetext, coreCalendarGetActionEventsByCourse200ResponseEventsInner.normalisedeventtypetext) &&
        Objects.equals(this.overdue, coreCalendarGetActionEventsByCourse200ResponseEventsInner.overdue) &&
        Objects.equals(this.purpose, coreCalendarGetActionEventsByCourse200ResponseEventsInner.purpose) &&
        Objects.equals(this.repeatid, coreCalendarGetActionEventsByCourse200ResponseEventsInner.repeatid) &&
        Objects.equals(this.subscription, coreCalendarGetActionEventsByCourse200ResponseEventsInner.subscription) &&
        Objects.equals(this.timeduration, coreCalendarGetActionEventsByCourse200ResponseEventsInner.timeduration) &&
        Objects.equals(this.timemodified, coreCalendarGetActionEventsByCourse200ResponseEventsInner.timemodified) &&
        Objects.equals(this.timesort, coreCalendarGetActionEventsByCourse200ResponseEventsInner.timesort) &&
        Objects.equals(this.timestart, coreCalendarGetActionEventsByCourse200ResponseEventsInner.timestart) &&
        Objects.equals(this.timeusermidnight, coreCalendarGetActionEventsByCourse200ResponseEventsInner.timeusermidnight) &&
        Objects.equals(this.url, coreCalendarGetActionEventsByCourse200ResponseEventsInner.url) &&
        Objects.equals(this.userid, coreCalendarGetActionEventsByCourse200ResponseEventsInner.userid) &&
        Objects.equals(this.viewurl, coreCalendarGetActionEventsByCourse200ResponseEventsInner.viewurl) &&
        Objects.equals(this.visible, coreCalendarGetActionEventsByCourse200ResponseEventsInner.visible);
  }

  @Override
  public int hashCode() {
    return Objects.hash(action, activityname, activitystr, candelete, canedit, category, categoryid, component, course, deleteurl, description, descriptionformat, editurl, eventcount, eventtype, formattedlocation, formattedtime, groupid, groupname, icon, id, instance, isactionevent, iscategoryevent, iscourseevent, location, modulename, name, normalisedeventtype, normalisedeventtypetext, overdue, purpose, repeatid, subscription, timeduration, timemodified, timesort, timestart, timeusermidnight, url, userid, viewurl, visible);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CoreCalendarGetActionEventsByCourse200ResponseEventsInner {\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    activityname: ").append(toIndentedString(activityname)).append("\n");
    sb.append("    activitystr: ").append(toIndentedString(activitystr)).append("\n");
    sb.append("    candelete: ").append(toIndentedString(candelete)).append("\n");
    sb.append("    canedit: ").append(toIndentedString(canedit)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    categoryid: ").append(toIndentedString(categoryid)).append("\n");
    sb.append("    component: ").append(toIndentedString(component)).append("\n");
    sb.append("    course: ").append(toIndentedString(course)).append("\n");
    sb.append("    deleteurl: ").append(toIndentedString(deleteurl)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    descriptionformat: ").append(toIndentedString(descriptionformat)).append("\n");
    sb.append("    editurl: ").append(toIndentedString(editurl)).append("\n");
    sb.append("    eventcount: ").append(toIndentedString(eventcount)).append("\n");
    sb.append("    eventtype: ").append(toIndentedString(eventtype)).append("\n");
    sb.append("    formattedlocation: ").append(toIndentedString(formattedlocation)).append("\n");
    sb.append("    formattedtime: ").append(toIndentedString(formattedtime)).append("\n");
    sb.append("    groupid: ").append(toIndentedString(groupid)).append("\n");
    sb.append("    groupname: ").append(toIndentedString(groupname)).append("\n");
    sb.append("    icon: ").append(toIndentedString(icon)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    instance: ").append(toIndentedString(instance)).append("\n");
    sb.append("    isactionevent: ").append(toIndentedString(isactionevent)).append("\n");
    sb.append("    iscategoryevent: ").append(toIndentedString(iscategoryevent)).append("\n");
    sb.append("    iscourseevent: ").append(toIndentedString(iscourseevent)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    modulename: ").append(toIndentedString(modulename)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    normalisedeventtype: ").append(toIndentedString(normalisedeventtype)).append("\n");
    sb.append("    normalisedeventtypetext: ").append(toIndentedString(normalisedeventtypetext)).append("\n");
    sb.append("    overdue: ").append(toIndentedString(overdue)).append("\n");
    sb.append("    purpose: ").append(toIndentedString(purpose)).append("\n");
    sb.append("    repeatid: ").append(toIndentedString(repeatid)).append("\n");
    sb.append("    subscription: ").append(toIndentedString(subscription)).append("\n");
    sb.append("    timeduration: ").append(toIndentedString(timeduration)).append("\n");
    sb.append("    timemodified: ").append(toIndentedString(timemodified)).append("\n");
    sb.append("    timesort: ").append(toIndentedString(timesort)).append("\n");
    sb.append("    timestart: ").append(toIndentedString(timestart)).append("\n");
    sb.append("    timeusermidnight: ").append(toIndentedString(timeusermidnight)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    userid: ").append(toIndentedString(userid)).append("\n");
    sb.append("    viewurl: ").append(toIndentedString(viewurl)).append("\n");
    sb.append("    visible: ").append(toIndentedString(visible)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("action");
    openapiFields.add("activityname");
    openapiFields.add("activitystr");
    openapiFields.add("candelete");
    openapiFields.add("canedit");
    openapiFields.add("category");
    openapiFields.add("categoryid");
    openapiFields.add("component");
    openapiFields.add("course");
    openapiFields.add("deleteurl");
    openapiFields.add("description");
    openapiFields.add("descriptionformat");
    openapiFields.add("editurl");
    openapiFields.add("eventcount");
    openapiFields.add("eventtype");
    openapiFields.add("formattedlocation");
    openapiFields.add("formattedtime");
    openapiFields.add("groupid");
    openapiFields.add("groupname");
    openapiFields.add("icon");
    openapiFields.add("id");
    openapiFields.add("instance");
    openapiFields.add("isactionevent");
    openapiFields.add("iscategoryevent");
    openapiFields.add("iscourseevent");
    openapiFields.add("location");
    openapiFields.add("modulename");
    openapiFields.add("name");
    openapiFields.add("normalisedeventtype");
    openapiFields.add("normalisedeventtypetext");
    openapiFields.add("overdue");
    openapiFields.add("purpose");
    openapiFields.add("repeatid");
    openapiFields.add("subscription");
    openapiFields.add("timeduration");
    openapiFields.add("timemodified");
    openapiFields.add("timesort");
    openapiFields.add("timestart");
    openapiFields.add("timeusermidnight");
    openapiFields.add("url");
    openapiFields.add("userid");
    openapiFields.add("viewurl");
    openapiFields.add("visible");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CoreCalendarGetActionEventsByCourse200ResponseEventsInner
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CoreCalendarGetActionEventsByCourse200ResponseEventsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CoreCalendarGetActionEventsByCourse200ResponseEventsInner is not found in the empty JSON string", CoreCalendarGetActionEventsByCourse200ResponseEventsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CoreCalendarGetActionEventsByCourse200ResponseEventsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CoreCalendarGetActionEventsByCourse200ResponseEventsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `action`
      if (jsonObj.get("action") != null && !jsonObj.get("action").isJsonNull()) {
        CoreCalendarGetActionEventsByCourse200ResponseEventsInnerAction.validateJsonElement(jsonObj.get("action"));
      }
      if ((jsonObj.get("activityname") != null && !jsonObj.get("activityname").isJsonNull()) && !jsonObj.get("activityname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `activityname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("activityname").toString()));
      }
      if ((jsonObj.get("activitystr") != null && !jsonObj.get("activitystr").isJsonNull()) && !jsonObj.get("activitystr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `activitystr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("activitystr").toString()));
      }
      // validate the optional field `category`
      if (jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) {
        CoreCalendarGetActionEventsByCourse200ResponseEventsInnerCategory.validateJsonElement(jsonObj.get("category"));
      }
      if ((jsonObj.get("component") != null && !jsonObj.get("component").isJsonNull()) && !jsonObj.get("component").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `component` to be a primitive type in the JSON string but got `%s`", jsonObj.get("component").toString()));
      }
      // validate the optional field `course`
      if (jsonObj.get("course") != null && !jsonObj.get("course").isJsonNull()) {
        CoreCalendarGetActionEventsByCourse200ResponseEventsInnerCourse.validateJsonElement(jsonObj.get("course"));
      }
      if ((jsonObj.get("deleteurl") != null && !jsonObj.get("deleteurl").isJsonNull()) && !jsonObj.get("deleteurl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deleteurl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deleteurl").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("editurl") != null && !jsonObj.get("editurl").isJsonNull()) && !jsonObj.get("editurl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `editurl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("editurl").toString()));
      }
      if ((jsonObj.get("eventtype") != null && !jsonObj.get("eventtype").isJsonNull()) && !jsonObj.get("eventtype").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventtype` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventtype").toString()));
      }
      if ((jsonObj.get("formattedlocation") != null && !jsonObj.get("formattedlocation").isJsonNull()) && !jsonObj.get("formattedlocation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `formattedlocation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("formattedlocation").toString()));
      }
      if ((jsonObj.get("formattedtime") != null && !jsonObj.get("formattedtime").isJsonNull()) && !jsonObj.get("formattedtime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `formattedtime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("formattedtime").toString()));
      }
      if ((jsonObj.get("groupname") != null && !jsonObj.get("groupname").isJsonNull()) && !jsonObj.get("groupname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `groupname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("groupname").toString()));
      }
      // validate the optional field `icon`
      if (jsonObj.get("icon") != null && !jsonObj.get("icon").isJsonNull()) {
        CoreCalendarGetActionEventsByCourse200ResponseEventsInnerIcon.validateJsonElement(jsonObj.get("icon"));
      }
      if ((jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) && !jsonObj.get("location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location").toString()));
      }
      if ((jsonObj.get("modulename") != null && !jsonObj.get("modulename").isJsonNull()) && !jsonObj.get("modulename").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modulename` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modulename").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("normalisedeventtype") != null && !jsonObj.get("normalisedeventtype").isJsonNull()) && !jsonObj.get("normalisedeventtype").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `normalisedeventtype` to be a primitive type in the JSON string but got `%s`", jsonObj.get("normalisedeventtype").toString()));
      }
      if ((jsonObj.get("normalisedeventtypetext") != null && !jsonObj.get("normalisedeventtypetext").isJsonNull()) && !jsonObj.get("normalisedeventtypetext").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `normalisedeventtypetext` to be a primitive type in the JSON string but got `%s`", jsonObj.get("normalisedeventtypetext").toString()));
      }
      if ((jsonObj.get("purpose") != null && !jsonObj.get("purpose").isJsonNull()) && !jsonObj.get("purpose").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `purpose` to be a primitive type in the JSON string but got `%s`", jsonObj.get("purpose").toString()));
      }
      // validate the optional field `subscription`
      if (jsonObj.get("subscription") != null && !jsonObj.get("subscription").isJsonNull()) {
        CoreCalendarGetActionEventsByCourse200ResponseEventsInnerSubscription.validateJsonElement(jsonObj.get("subscription"));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if ((jsonObj.get("viewurl") != null && !jsonObj.get("viewurl").isJsonNull()) && !jsonObj.get("viewurl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `viewurl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("viewurl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CoreCalendarGetActionEventsByCourse200ResponseEventsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CoreCalendarGetActionEventsByCourse200ResponseEventsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CoreCalendarGetActionEventsByCourse200ResponseEventsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CoreCalendarGetActionEventsByCourse200ResponseEventsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<CoreCalendarGetActionEventsByCourse200ResponseEventsInner>() {
           @Override
           public void write(JsonWriter out, CoreCalendarGetActionEventsByCourse200ResponseEventsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CoreCalendarGetActionEventsByCourse200ResponseEventsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CoreCalendarGetActionEventsByCourse200ResponseEventsInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CoreCalendarGetActionEventsByCourse200ResponseEventsInner
  * @throws IOException if the JSON string is invalid with respect to CoreCalendarGetActionEventsByCourse200ResponseEventsInner
  */
  public static CoreCalendarGetActionEventsByCourse200ResponseEventsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CoreCalendarGetActionEventsByCourse200ResponseEventsInner.class);
  }

 /**
  * Convert an instance of CoreCalendarGetActionEventsByCourse200ResponseEventsInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

