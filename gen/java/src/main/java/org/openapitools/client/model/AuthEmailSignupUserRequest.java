/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AuthEmailSignupUserRequestCustomprofilefieldsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.joshuapare.JSON;

/**
 * AuthEmailSignupUserRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-18T14:00:07.069642-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class AuthEmailSignupUserRequest {
  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city = "";

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country = "";

  public static final String SERIALIZED_NAME_CUSTOMPROFILEFIELDS = "customprofilefields";
  @SerializedName(SERIALIZED_NAME_CUSTOMPROFILEFIELDS)
  private List<AuthEmailSignupUserRequestCustomprofilefieldsInner> customprofilefields = new ArrayList<>();

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email = "null";

  public static final String SERIALIZED_NAME_FIRSTNAME = "firstname";
  @SerializedName(SERIALIZED_NAME_FIRSTNAME)
  private String firstname = "null";

  public static final String SERIALIZED_NAME_LASTNAME = "lastname";
  @SerializedName(SERIALIZED_NAME_LASTNAME)
  private String lastname = "null";

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password = "null";

  public static final String SERIALIZED_NAME_RECAPTCHACHALLENGEHASH = "recaptchachallengehash";
  @SerializedName(SERIALIZED_NAME_RECAPTCHACHALLENGEHASH)
  private String recaptchachallengehash = "";

  public static final String SERIALIZED_NAME_RECAPTCHARESPONSE = "recaptcharesponse";
  @SerializedName(SERIALIZED_NAME_RECAPTCHARESPONSE)
  private String recaptcharesponse = "";

  public static final String SERIALIZED_NAME_REDIRECT = "redirect";
  @SerializedName(SERIALIZED_NAME_REDIRECT)
  private String redirect = "";

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username = "null";

  public AuthEmailSignupUserRequest() {
  }

  public AuthEmailSignupUserRequest city(String city) {
    this.city = city;
    return this;
  }

   /**
   * Home city of the user
   * @return city
  **/
  @javax.annotation.Nullable
  public String getCity() {
    return city;
  }

  public void setCity(String city) {
    this.city = city;
  }


  public AuthEmailSignupUserRequest country(String country) {
    this.country = country;
    return this;
  }

   /**
   * Home country code
   * @return country
  **/
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public AuthEmailSignupUserRequest customprofilefields(List<AuthEmailSignupUserRequestCustomprofilefieldsInner> customprofilefields) {
    this.customprofilefields = customprofilefields;
    return this;
  }

  public AuthEmailSignupUserRequest addCustomprofilefieldsItem(AuthEmailSignupUserRequestCustomprofilefieldsInner customprofilefieldsItem) {
    if (this.customprofilefields == null) {
      this.customprofilefields = new ArrayList<>();
    }
    this.customprofilefields.add(customprofilefieldsItem);
    return this;
  }

   /**
   * Get customprofilefields
   * @return customprofilefields
  **/
  @javax.annotation.Nullable
  public List<AuthEmailSignupUserRequestCustomprofilefieldsInner> getCustomprofilefields() {
    return customprofilefields;
  }

  public void setCustomprofilefields(List<AuthEmailSignupUserRequestCustomprofilefieldsInner> customprofilefields) {
    this.customprofilefields = customprofilefields;
  }


  public AuthEmailSignupUserRequest email(String email) {
    this.email = email;
    return this;
  }

   /**
   * A valid and unique email address
   * @return email
  **/
  @javax.annotation.Nonnull
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public AuthEmailSignupUserRequest firstname(String firstname) {
    this.firstname = firstname;
    return this;
  }

   /**
   * The first name(s) of the user
   * @return firstname
  **/
  @javax.annotation.Nonnull
  public String getFirstname() {
    return firstname;
  }

  public void setFirstname(String firstname) {
    this.firstname = firstname;
  }


  public AuthEmailSignupUserRequest lastname(String lastname) {
    this.lastname = lastname;
    return this;
  }

   /**
   * The family name of the user
   * @return lastname
  **/
  @javax.annotation.Nonnull
  public String getLastname() {
    return lastname;
  }

  public void setLastname(String lastname) {
    this.lastname = lastname;
  }


  public AuthEmailSignupUserRequest password(String password) {
    this.password = password;
    return this;
  }

   /**
   * Plain text password
   * @return password
  **/
  @javax.annotation.Nonnull
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }


  public AuthEmailSignupUserRequest recaptchachallengehash(String recaptchachallengehash) {
    this.recaptchachallengehash = recaptchachallengehash;
    return this;
  }

   /**
   * Recaptcha challenge hash
   * @return recaptchachallengehash
  **/
  @javax.annotation.Nullable
  public String getRecaptchachallengehash() {
    return recaptchachallengehash;
  }

  public void setRecaptchachallengehash(String recaptchachallengehash) {
    this.recaptchachallengehash = recaptchachallengehash;
  }


  public AuthEmailSignupUserRequest recaptcharesponse(String recaptcharesponse) {
    this.recaptcharesponse = recaptcharesponse;
    return this;
  }

   /**
   * Recaptcha response
   * @return recaptcharesponse
  **/
  @javax.annotation.Nullable
  public String getRecaptcharesponse() {
    return recaptcharesponse;
  }

  public void setRecaptcharesponse(String recaptcharesponse) {
    this.recaptcharesponse = recaptcharesponse;
  }


  public AuthEmailSignupUserRequest redirect(String redirect) {
    this.redirect = redirect;
    return this;
  }

   /**
   * Redirect the user to this site url after confirmation.
   * @return redirect
  **/
  @javax.annotation.Nullable
  public String getRedirect() {
    return redirect;
  }

  public void setRedirect(String redirect) {
    this.redirect = redirect;
  }


  public AuthEmailSignupUserRequest username(String username) {
    this.username = username;
    return this;
  }

   /**
   * Username
   * @return username
  **/
  @javax.annotation.Nonnull
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AuthEmailSignupUserRequest authEmailSignupUserRequest = (AuthEmailSignupUserRequest) o;
    return Objects.equals(this.city, authEmailSignupUserRequest.city) &&
        Objects.equals(this.country, authEmailSignupUserRequest.country) &&
        Objects.equals(this.customprofilefields, authEmailSignupUserRequest.customprofilefields) &&
        Objects.equals(this.email, authEmailSignupUserRequest.email) &&
        Objects.equals(this.firstname, authEmailSignupUserRequest.firstname) &&
        Objects.equals(this.lastname, authEmailSignupUserRequest.lastname) &&
        Objects.equals(this.password, authEmailSignupUserRequest.password) &&
        Objects.equals(this.recaptchachallengehash, authEmailSignupUserRequest.recaptchachallengehash) &&
        Objects.equals(this.recaptcharesponse, authEmailSignupUserRequest.recaptcharesponse) &&
        Objects.equals(this.redirect, authEmailSignupUserRequest.redirect) &&
        Objects.equals(this.username, authEmailSignupUserRequest.username);
  }

  @Override
  public int hashCode() {
    return Objects.hash(city, country, customprofilefields, email, firstname, lastname, password, recaptchachallengehash, recaptcharesponse, redirect, username);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AuthEmailSignupUserRequest {\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    customprofilefields: ").append(toIndentedString(customprofilefields)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    firstname: ").append(toIndentedString(firstname)).append("\n");
    sb.append("    lastname: ").append(toIndentedString(lastname)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    recaptchachallengehash: ").append(toIndentedString(recaptchachallengehash)).append("\n");
    sb.append("    recaptcharesponse: ").append(toIndentedString(recaptcharesponse)).append("\n");
    sb.append("    redirect: ").append(toIndentedString(redirect)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("city");
    openapiFields.add("country");
    openapiFields.add("customprofilefields");
    openapiFields.add("email");
    openapiFields.add("firstname");
    openapiFields.add("lastname");
    openapiFields.add("password");
    openapiFields.add("recaptchachallengehash");
    openapiFields.add("recaptcharesponse");
    openapiFields.add("redirect");
    openapiFields.add("username");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("email");
    openapiRequiredFields.add("firstname");
    openapiRequiredFields.add("lastname");
    openapiRequiredFields.add("password");
    openapiRequiredFields.add("username");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to AuthEmailSignupUserRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AuthEmailSignupUserRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AuthEmailSignupUserRequest is not found in the empty JSON string", AuthEmailSignupUserRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AuthEmailSignupUserRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AuthEmailSignupUserRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AuthEmailSignupUserRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("city") != null && !jsonObj.get("city").isJsonNull()) && !jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if (jsonObj.get("customprofilefields") != null && !jsonObj.get("customprofilefields").isJsonNull()) {
        JsonArray jsonArraycustomprofilefields = jsonObj.getAsJsonArray("customprofilefields");
        if (jsonArraycustomprofilefields != null) {
          // ensure the json data is an array
          if (!jsonObj.get("customprofilefields").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `customprofilefields` to be an array in the JSON string but got `%s`", jsonObj.get("customprofilefields").toString()));
          }

          // validate the optional field `customprofilefields` (array)
          for (int i = 0; i < jsonArraycustomprofilefields.size(); i++) {
            AuthEmailSignupUserRequestCustomprofilefieldsInner.validateJsonElement(jsonArraycustomprofilefields.get(i));
          };
        }
      }
      if (!jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if (!jsonObj.get("firstname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstname").toString()));
      }
      if (!jsonObj.get("lastname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastname").toString()));
      }
      if (!jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      if ((jsonObj.get("recaptchachallengehash") != null && !jsonObj.get("recaptchachallengehash").isJsonNull()) && !jsonObj.get("recaptchachallengehash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recaptchachallengehash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recaptchachallengehash").toString()));
      }
      if ((jsonObj.get("recaptcharesponse") != null && !jsonObj.get("recaptcharesponse").isJsonNull()) && !jsonObj.get("recaptcharesponse").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recaptcharesponse` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recaptcharesponse").toString()));
      }
      if ((jsonObj.get("redirect") != null && !jsonObj.get("redirect").isJsonNull()) && !jsonObj.get("redirect").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `redirect` to be a primitive type in the JSON string but got `%s`", jsonObj.get("redirect").toString()));
      }
      if (!jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AuthEmailSignupUserRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AuthEmailSignupUserRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AuthEmailSignupUserRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AuthEmailSignupUserRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<AuthEmailSignupUserRequest>() {
           @Override
           public void write(JsonWriter out, AuthEmailSignupUserRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AuthEmailSignupUserRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AuthEmailSignupUserRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AuthEmailSignupUserRequest
  * @throws IOException if the JSON string is invalid with respect to AuthEmailSignupUserRequest
  */
  public static AuthEmailSignupUserRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AuthEmailSignupUserRequest.class);
  }

 /**
  * Convert an instance of AuthEmailSignupUserRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

