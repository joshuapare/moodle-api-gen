/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.joshuapare.JSON;

/**
 * ModChoiceGetChoiceOptions200ResponseOptionsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-18T20:58:28.689161-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class ModChoiceGetChoiceOptions200ResponseOptionsInner {
  public static final String SERIALIZED_NAME_CHECKED = "checked";
  @SerializedName(SERIALIZED_NAME_CHECKED)
  private Boolean checked = null;

  public static final String SERIALIZED_NAME_COUNTANSWERS = "countanswers";
  @SerializedName(SERIALIZED_NAME_COUNTANSWERS)
  private Integer countanswers = null;

  public static final String SERIALIZED_NAME_DISABLED = "disabled";
  @SerializedName(SERIALIZED_NAME_DISABLED)
  private Boolean disabled = null;

  public static final String SERIALIZED_NAME_DISPLAYLAYOUT = "displaylayout";
  @SerializedName(SERIALIZED_NAME_DISPLAYLAYOUT)
  private Boolean displaylayout = null;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id = null;

  public static final String SERIALIZED_NAME_MAXANSWERS = "maxanswers";
  @SerializedName(SERIALIZED_NAME_MAXANSWERS)
  private Integer maxanswers = null;

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text = "null";

  public ModChoiceGetChoiceOptions200ResponseOptionsInner() {
  }

  public ModChoiceGetChoiceOptions200ResponseOptionsInner checked(Boolean checked) {
    this.checked = checked;
    return this;
  }

   /**
   * we already answered
   * @return checked
  **/
  @javax.annotation.Nullable
  public Boolean getChecked() {
    return checked;
  }

  public void setChecked(Boolean checked) {
    this.checked = checked;
  }


  public ModChoiceGetChoiceOptions200ResponseOptionsInner countanswers(Integer countanswers) {
    this.countanswers = countanswers;
    return this;
  }

   /**
   * number of answers
   * @return countanswers
  **/
  @javax.annotation.Nullable
  public Integer getCountanswers() {
    return countanswers;
  }

  public void setCountanswers(Integer countanswers) {
    this.countanswers = countanswers;
  }


  public ModChoiceGetChoiceOptions200ResponseOptionsInner disabled(Boolean disabled) {
    this.disabled = disabled;
    return this;
  }

   /**
   * option disabled
   * @return disabled
  **/
  @javax.annotation.Nullable
  public Boolean getDisabled() {
    return disabled;
  }

  public void setDisabled(Boolean disabled) {
    this.disabled = disabled;
  }


  public ModChoiceGetChoiceOptions200ResponseOptionsInner displaylayout(Boolean displaylayout) {
    this.displaylayout = displaylayout;
    return this;
  }

   /**
   * true for orizontal, otherwise vertical
   * @return displaylayout
  **/
  @javax.annotation.Nullable
  public Boolean getDisplaylayout() {
    return displaylayout;
  }

  public void setDisplaylayout(Boolean displaylayout) {
    this.displaylayout = displaylayout;
  }


  public ModChoiceGetChoiceOptions200ResponseOptionsInner id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * option id
   * @return id
  **/
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public ModChoiceGetChoiceOptions200ResponseOptionsInner maxanswers(Integer maxanswers) {
    this.maxanswers = maxanswers;
    return this;
  }

   /**
   * maximum number of answers
   * @return maxanswers
  **/
  @javax.annotation.Nullable
  public Integer getMaxanswers() {
    return maxanswers;
  }

  public void setMaxanswers(Integer maxanswers) {
    this.maxanswers = maxanswers;
  }


  public ModChoiceGetChoiceOptions200ResponseOptionsInner text(String text) {
    this.text = text;
    return this;
  }

   /**
   * text of the choice
   * @return text
  **/
  @javax.annotation.Nullable
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModChoiceGetChoiceOptions200ResponseOptionsInner modChoiceGetChoiceOptions200ResponseOptionsInner = (ModChoiceGetChoiceOptions200ResponseOptionsInner) o;
    return Objects.equals(this.checked, modChoiceGetChoiceOptions200ResponseOptionsInner.checked) &&
        Objects.equals(this.countanswers, modChoiceGetChoiceOptions200ResponseOptionsInner.countanswers) &&
        Objects.equals(this.disabled, modChoiceGetChoiceOptions200ResponseOptionsInner.disabled) &&
        Objects.equals(this.displaylayout, modChoiceGetChoiceOptions200ResponseOptionsInner.displaylayout) &&
        Objects.equals(this.id, modChoiceGetChoiceOptions200ResponseOptionsInner.id) &&
        Objects.equals(this.maxanswers, modChoiceGetChoiceOptions200ResponseOptionsInner.maxanswers) &&
        Objects.equals(this.text, modChoiceGetChoiceOptions200ResponseOptionsInner.text);
  }

  @Override
  public int hashCode() {
    return Objects.hash(checked, countanswers, disabled, displaylayout, id, maxanswers, text);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModChoiceGetChoiceOptions200ResponseOptionsInner {\n");
    sb.append("    checked: ").append(toIndentedString(checked)).append("\n");
    sb.append("    countanswers: ").append(toIndentedString(countanswers)).append("\n");
    sb.append("    disabled: ").append(toIndentedString(disabled)).append("\n");
    sb.append("    displaylayout: ").append(toIndentedString(displaylayout)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    maxanswers: ").append(toIndentedString(maxanswers)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("checked");
    openapiFields.add("countanswers");
    openapiFields.add("disabled");
    openapiFields.add("displaylayout");
    openapiFields.add("id");
    openapiFields.add("maxanswers");
    openapiFields.add("text");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ModChoiceGetChoiceOptions200ResponseOptionsInner
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ModChoiceGetChoiceOptions200ResponseOptionsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModChoiceGetChoiceOptions200ResponseOptionsInner is not found in the empty JSON string", ModChoiceGetChoiceOptions200ResponseOptionsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ModChoiceGetChoiceOptions200ResponseOptionsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModChoiceGetChoiceOptions200ResponseOptionsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("text") != null && !jsonObj.get("text").isJsonNull()) && !jsonObj.get("text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModChoiceGetChoiceOptions200ResponseOptionsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModChoiceGetChoiceOptions200ResponseOptionsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModChoiceGetChoiceOptions200ResponseOptionsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModChoiceGetChoiceOptions200ResponseOptionsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ModChoiceGetChoiceOptions200ResponseOptionsInner>() {
           @Override
           public void write(JsonWriter out, ModChoiceGetChoiceOptions200ResponseOptionsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModChoiceGetChoiceOptions200ResponseOptionsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ModChoiceGetChoiceOptions200ResponseOptionsInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ModChoiceGetChoiceOptions200ResponseOptionsInner
  * @throws IOException if the JSON string is invalid with respect to ModChoiceGetChoiceOptions200ResponseOptionsInner
  */
  public static ModChoiceGetChoiceOptions200ResponseOptionsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModChoiceGetChoiceOptions200ResponseOptionsInner.class);
  }

 /**
  * Convert an instance of ModChoiceGetChoiceOptions200ResponseOptionsInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

