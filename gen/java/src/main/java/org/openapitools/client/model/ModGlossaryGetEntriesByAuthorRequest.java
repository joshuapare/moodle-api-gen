/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ModGlossaryGetEntriesByAuthorRequestOptions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.joshuapare.JSON;

/**
 * ModGlossaryGetEntriesByAuthorRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-18T14:00:07.069642-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class ModGlossaryGetEntriesByAuthorRequest {
  public static final String SERIALIZED_NAME_FIELD = "field";
  @SerializedName(SERIALIZED_NAME_FIELD)
  private String field = "LASTNAME";

  public static final String SERIALIZED_NAME_FROM = "from";
  @SerializedName(SERIALIZED_NAME_FROM)
  private Integer from = 0;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_LETTER = "letter";
  @SerializedName(SERIALIZED_NAME_LETTER)
  private String letter = "null";

  public static final String SERIALIZED_NAME_LIMIT = "limit";
  @SerializedName(SERIALIZED_NAME_LIMIT)
  private Integer limit = 20;

  public static final String SERIALIZED_NAME_OPTIONS = "options";
  @SerializedName(SERIALIZED_NAME_OPTIONS)
  private ModGlossaryGetEntriesByAuthorRequestOptions options;

  public static final String SERIALIZED_NAME_SORT = "sort";
  @SerializedName(SERIALIZED_NAME_SORT)
  private String sort = "ASC";

  public ModGlossaryGetEntriesByAuthorRequest() {
  }

  public ModGlossaryGetEntriesByAuthorRequest field(String field) {
    this.field = field;
    return this;
  }

   /**
   * Search and order using: &#39;FIRSTNAME&#39; or &#39;LASTNAME&#39;
   * @return field
  **/
  @javax.annotation.Nullable
  public String getField() {
    return field;
  }

  public void setField(String field) {
    this.field = field;
  }


  public ModGlossaryGetEntriesByAuthorRequest from(Integer from) {
    this.from = from;
    return this;
  }

   /**
   * Start returning records from here
   * @return from
  **/
  @javax.annotation.Nullable
  public Integer getFrom() {
    return from;
  }

  public void setFrom(Integer from) {
    this.from = from;
  }


  public ModGlossaryGetEntriesByAuthorRequest id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * Glossary entry ID
   * @return id
  **/
  @javax.annotation.Nonnull
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public ModGlossaryGetEntriesByAuthorRequest letter(String letter) {
    this.letter = letter;
    return this;
  }

   /**
   * First letter of firstname or lastname, or either keywords: &#39;ALL&#39; or &#39;SPECIAL&#39;.
   * @return letter
  **/
  @javax.annotation.Nonnull
  public String getLetter() {
    return letter;
  }

  public void setLetter(String letter) {
    this.letter = letter;
  }


  public ModGlossaryGetEntriesByAuthorRequest limit(Integer limit) {
    this.limit = limit;
    return this;
  }

   /**
   * Number of records to return
   * @return limit
  **/
  @javax.annotation.Nullable
  public Integer getLimit() {
    return limit;
  }

  public void setLimit(Integer limit) {
    this.limit = limit;
  }


  public ModGlossaryGetEntriesByAuthorRequest options(ModGlossaryGetEntriesByAuthorRequestOptions options) {
    this.options = options;
    return this;
  }

   /**
   * Get options
   * @return options
  **/
  @javax.annotation.Nullable
  public ModGlossaryGetEntriesByAuthorRequestOptions getOptions() {
    return options;
  }

  public void setOptions(ModGlossaryGetEntriesByAuthorRequestOptions options) {
    this.options = options;
  }


  public ModGlossaryGetEntriesByAuthorRequest sort(String sort) {
    this.sort = sort;
    return this;
  }

   /**
   * The direction of the order: &#39;ASC&#39; or &#39;DESC&#39;
   * @return sort
  **/
  @javax.annotation.Nullable
  public String getSort() {
    return sort;
  }

  public void setSort(String sort) {
    this.sort = sort;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModGlossaryGetEntriesByAuthorRequest modGlossaryGetEntriesByAuthorRequest = (ModGlossaryGetEntriesByAuthorRequest) o;
    return Objects.equals(this.field, modGlossaryGetEntriesByAuthorRequest.field) &&
        Objects.equals(this.from, modGlossaryGetEntriesByAuthorRequest.from) &&
        Objects.equals(this.id, modGlossaryGetEntriesByAuthorRequest.id) &&
        Objects.equals(this.letter, modGlossaryGetEntriesByAuthorRequest.letter) &&
        Objects.equals(this.limit, modGlossaryGetEntriesByAuthorRequest.limit) &&
        Objects.equals(this.options, modGlossaryGetEntriesByAuthorRequest.options) &&
        Objects.equals(this.sort, modGlossaryGetEntriesByAuthorRequest.sort);
  }

  @Override
  public int hashCode() {
    return Objects.hash(field, from, id, letter, limit, options, sort);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModGlossaryGetEntriesByAuthorRequest {\n");
    sb.append("    field: ").append(toIndentedString(field)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    letter: ").append(toIndentedString(letter)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    sort: ").append(toIndentedString(sort)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("field");
    openapiFields.add("from");
    openapiFields.add("id");
    openapiFields.add("letter");
    openapiFields.add("limit");
    openapiFields.add("options");
    openapiFields.add("sort");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("letter");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ModGlossaryGetEntriesByAuthorRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ModGlossaryGetEntriesByAuthorRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModGlossaryGetEntriesByAuthorRequest is not found in the empty JSON string", ModGlossaryGetEntriesByAuthorRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ModGlossaryGetEntriesByAuthorRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModGlossaryGetEntriesByAuthorRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ModGlossaryGetEntriesByAuthorRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("field") != null && !jsonObj.get("field").isJsonNull()) && !jsonObj.get("field").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `field` to be a primitive type in the JSON string but got `%s`", jsonObj.get("field").toString()));
      }
      if (!jsonObj.get("letter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `letter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("letter").toString()));
      }
      // validate the optional field `options`
      if (jsonObj.get("options") != null && !jsonObj.get("options").isJsonNull()) {
        ModGlossaryGetEntriesByAuthorRequestOptions.validateJsonElement(jsonObj.get("options"));
      }
      if ((jsonObj.get("sort") != null && !jsonObj.get("sort").isJsonNull()) && !jsonObj.get("sort").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sort` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sort").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModGlossaryGetEntriesByAuthorRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModGlossaryGetEntriesByAuthorRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModGlossaryGetEntriesByAuthorRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModGlossaryGetEntriesByAuthorRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ModGlossaryGetEntriesByAuthorRequest>() {
           @Override
           public void write(JsonWriter out, ModGlossaryGetEntriesByAuthorRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModGlossaryGetEntriesByAuthorRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ModGlossaryGetEntriesByAuthorRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ModGlossaryGetEntriesByAuthorRequest
  * @throws IOException if the JSON string is invalid with respect to ModGlossaryGetEntriesByAuthorRequest
  */
  public static ModGlossaryGetEntriesByAuthorRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModGlossaryGetEntriesByAuthorRequest.class);
  }

 /**
  * Convert an instance of ModGlossaryGetEntriesByAuthorRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

