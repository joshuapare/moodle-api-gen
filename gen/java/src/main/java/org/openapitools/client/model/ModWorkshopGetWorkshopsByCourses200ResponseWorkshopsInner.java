/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.joshuapare.JSON;

/**
 * ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-18T14:00:07.069642-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner {
  public static final String SERIALIZED_NAME_ASSESSMENTEND = "assessmentend";
  @SerializedName(SERIALIZED_NAME_ASSESSMENTEND)
  private Integer assessmentend = 0;

  public static final String SERIALIZED_NAME_ASSESSMENTSTART = "assessmentstart";
  @SerializedName(SERIALIZED_NAME_ASSESSMENTSTART)
  private Integer assessmentstart = 0;

  public static final String SERIALIZED_NAME_CONCLUSION = "conclusion";
  @SerializedName(SERIALIZED_NAME_CONCLUSION)
  private String conclusion = "null";

  public static final String SERIALIZED_NAME_CONCLUSIONFILES = "conclusionfiles";
  @SerializedName(SERIALIZED_NAME_CONCLUSIONFILES)
  private List<CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner> conclusionfiles = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONCLUSIONFORMAT = "conclusionformat";
  @SerializedName(SERIALIZED_NAME_CONCLUSIONFORMAT)
  private Integer conclusionformat = 0;

  public static final String SERIALIZED_NAME_COURSE = "course";
  @SerializedName(SERIALIZED_NAME_COURSE)
  private Integer course = null;

  public static final String SERIALIZED_NAME_COURSEMODULE = "coursemodule";
  @SerializedName(SERIALIZED_NAME_COURSEMODULE)
  private Integer coursemodule;

  public static final String SERIALIZED_NAME_EVALUATION = "evaluation";
  @SerializedName(SERIALIZED_NAME_EVALUATION)
  private String evaluation = "null";

  public static final String SERIALIZED_NAME_EXAMPLESMODE = "examplesmode";
  @SerializedName(SERIALIZED_NAME_EXAMPLESMODE)
  private Integer examplesmode = 0;

  public static final String SERIALIZED_NAME_GRADE = "grade";
  @SerializedName(SERIALIZED_NAME_GRADE)
  private BigDecimal grade = new BigDecimal("80");

  public static final String SERIALIZED_NAME_GRADEDECIMALS = "gradedecimals";
  @SerializedName(SERIALIZED_NAME_GRADEDECIMALS)
  private Integer gradedecimals = 0;

  public static final String SERIALIZED_NAME_GRADINGGRADE = "gradinggrade";
  @SerializedName(SERIALIZED_NAME_GRADINGGRADE)
  private BigDecimal gradinggrade = new BigDecimal("20");

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_INSTRUCTAUTHORS = "instructauthors";
  @SerializedName(SERIALIZED_NAME_INSTRUCTAUTHORS)
  private String instructauthors = "null";

  public static final String SERIALIZED_NAME_INSTRUCTAUTHORSFILES = "instructauthorsfiles";
  @SerializedName(SERIALIZED_NAME_INSTRUCTAUTHORSFILES)
  private List<CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner> instructauthorsfiles = new ArrayList<>();

  public static final String SERIALIZED_NAME_INSTRUCTAUTHORSFORMAT = "instructauthorsformat";
  @SerializedName(SERIALIZED_NAME_INSTRUCTAUTHORSFORMAT)
  private Integer instructauthorsformat = 0;

  public static final String SERIALIZED_NAME_INSTRUCTREVIEWERS = "instructreviewers";
  @SerializedName(SERIALIZED_NAME_INSTRUCTREVIEWERS)
  private String instructreviewers = "null";

  public static final String SERIALIZED_NAME_INSTRUCTREVIEWERSFILES = "instructreviewersfiles";
  @SerializedName(SERIALIZED_NAME_INSTRUCTREVIEWERSFILES)
  private List<CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner> instructreviewersfiles = new ArrayList<>();

  public static final String SERIALIZED_NAME_INSTRUCTREVIEWERSFORMAT = "instructreviewersformat";
  @SerializedName(SERIALIZED_NAME_INSTRUCTREVIEWERSFORMAT)
  private Integer instructreviewersformat = 0;

  public static final String SERIALIZED_NAME_INTRO = "intro";
  @SerializedName(SERIALIZED_NAME_INTRO)
  private String intro = "";

  public static final String SERIALIZED_NAME_INTROFILES = "introfiles";
  @SerializedName(SERIALIZED_NAME_INTROFILES)
  private List<CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner> introfiles = new ArrayList<>();

  public static final String SERIALIZED_NAME_INTROFORMAT = "introformat";
  @SerializedName(SERIALIZED_NAME_INTROFORMAT)
  private Integer introformat = 0;

  public static final String SERIALIZED_NAME_LANG = "lang";
  @SerializedName(SERIALIZED_NAME_LANG)
  private String lang;

  public static final String SERIALIZED_NAME_LATESUBMISSIONS = "latesubmissions";
  @SerializedName(SERIALIZED_NAME_LATESUBMISSIONS)
  private Boolean latesubmissions = false;

  public static final String SERIALIZED_NAME_MAXBYTES = "maxbytes";
  @SerializedName(SERIALIZED_NAME_MAXBYTES)
  private Integer maxbytes = 100000;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name = "null";

  public static final String SERIALIZED_NAME_NATTACHMENTS = "nattachments";
  @SerializedName(SERIALIZED_NAME_NATTACHMENTS)
  private Integer nattachments = 1;

  public static final String SERIALIZED_NAME_OVERALLFEEDBACKFILES = "overallfeedbackfiles";
  @SerializedName(SERIALIZED_NAME_OVERALLFEEDBACKFILES)
  private Integer overallfeedbackfiles = 0;

  public static final String SERIALIZED_NAME_OVERALLFEEDBACKFILETYPES = "overallfeedbackfiletypes";
  @SerializedName(SERIALIZED_NAME_OVERALLFEEDBACKFILETYPES)
  private String overallfeedbackfiletypes = "null";

  public static final String SERIALIZED_NAME_OVERALLFEEDBACKMAXBYTES = "overallfeedbackmaxbytes";
  @SerializedName(SERIALIZED_NAME_OVERALLFEEDBACKMAXBYTES)
  private Integer overallfeedbackmaxbytes = 100000;

  public static final String SERIALIZED_NAME_OVERALLFEEDBACKMODE = "overallfeedbackmode";
  @SerializedName(SERIALIZED_NAME_OVERALLFEEDBACKMODE)
  private Integer overallfeedbackmode = 1;

  public static final String SERIALIZED_NAME_PHASE = "phase";
  @SerializedName(SERIALIZED_NAME_PHASE)
  private Integer phase = 0;

  public static final String SERIALIZED_NAME_PHASESWITCHASSESSMENT = "phaseswitchassessment";
  @SerializedName(SERIALIZED_NAME_PHASESWITCHASSESSMENT)
  private Boolean phaseswitchassessment = false;

  public static final String SERIALIZED_NAME_STRATEGY = "strategy";
  @SerializedName(SERIALIZED_NAME_STRATEGY)
  private String strategy = "null";

  public static final String SERIALIZED_NAME_SUBMISSIONEND = "submissionend";
  @SerializedName(SERIALIZED_NAME_SUBMISSIONEND)
  private Integer submissionend = 0;

  public static final String SERIALIZED_NAME_SUBMISSIONFILETYPES = "submissionfiletypes";
  @SerializedName(SERIALIZED_NAME_SUBMISSIONFILETYPES)
  private String submissionfiletypes;

  public static final String SERIALIZED_NAME_SUBMISSIONSTART = "submissionstart";
  @SerializedName(SERIALIZED_NAME_SUBMISSIONSTART)
  private Integer submissionstart = 0;

  public static final String SERIALIZED_NAME_SUBMISSIONTYPEFILE = "submissiontypefile";
  @SerializedName(SERIALIZED_NAME_SUBMISSIONTYPEFILE)
  private Integer submissiontypefile = 1;

  public static final String SERIALIZED_NAME_SUBMISSIONTYPETEXT = "submissiontypetext";
  @SerializedName(SERIALIZED_NAME_SUBMISSIONTYPETEXT)
  private Integer submissiontypetext = 1;

  public static final String SERIALIZED_NAME_TIMEMODIFIED = "timemodified";
  @SerializedName(SERIALIZED_NAME_TIMEMODIFIED)
  private Integer timemodified = null;

  public static final String SERIALIZED_NAME_USEEXAMPLES = "useexamples";
  @SerializedName(SERIALIZED_NAME_USEEXAMPLES)
  private Boolean useexamples = false;

  public static final String SERIALIZED_NAME_USEPEERASSESSMENT = "usepeerassessment";
  @SerializedName(SERIALIZED_NAME_USEPEERASSESSMENT)
  private Boolean usepeerassessment = false;

  public static final String SERIALIZED_NAME_USESELFASSESSMENT = "useselfassessment";
  @SerializedName(SERIALIZED_NAME_USESELFASSESSMENT)
  private Boolean useselfassessment = false;

  public ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner() {
  }

  public ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner assessmentend(Integer assessmentend) {
    this.assessmentend = assessmentend;
    return this;
  }

   /**
   * 0 &#x3D; will be closed manually, greater than 0 the timestamp of the end of the assessment phase.
   * @return assessmentend
  **/
  @javax.annotation.Nullable
  public Integer getAssessmentend() {
    return assessmentend;
  }

  public void setAssessmentend(Integer assessmentend) {
    this.assessmentend = assessmentend;
  }


  public ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner assessmentstart(Integer assessmentstart) {
    this.assessmentstart = assessmentstart;
    return this;
  }

   /**
   * 0 &#x3D; will be started manually, greater than 0 the timestamp of the start of the assessment phase.
   * @return assessmentstart
  **/
  @javax.annotation.Nullable
  public Integer getAssessmentstart() {
    return assessmentstart;
  }

  public void setAssessmentstart(Integer assessmentstart) {
    this.assessmentstart = assessmentstart;
  }


  public ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner conclusion(String conclusion) {
    this.conclusion = conclusion;
    return this;
  }

   /**
   * A text to be displayed at the end of the workshop.
   * @return conclusion
  **/
  @javax.annotation.Nullable
  public String getConclusion() {
    return conclusion;
  }

  public void setConclusion(String conclusion) {
    this.conclusion = conclusion;
  }


  public ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner conclusionfiles(List<CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner> conclusionfiles) {
    this.conclusionfiles = conclusionfiles;
    return this;
  }

  public ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner addConclusionfilesItem(CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner conclusionfilesItem) {
    if (this.conclusionfiles == null) {
      this.conclusionfiles = new ArrayList<>();
    }
    this.conclusionfiles.add(conclusionfilesItem);
    return this;
  }

   /**
   * Get conclusionfiles
   * @return conclusionfiles
  **/
  @javax.annotation.Nullable
  public List<CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner> getConclusionfiles() {
    return conclusionfiles;
  }

  public void setConclusionfiles(List<CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner> conclusionfiles) {
    this.conclusionfiles = conclusionfiles;
  }


  public ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner conclusionformat(Integer conclusionformat) {
    this.conclusionformat = conclusionformat;
    return this;
  }

   /**
   * conclusion format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)
   * @return conclusionformat
  **/
  @javax.annotation.Nullable
  public Integer getConclusionformat() {
    return conclusionformat;
  }

  public void setConclusionformat(Integer conclusionformat) {
    this.conclusionformat = conclusionformat;
  }


  public ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner course(Integer course) {
    this.course = course;
    return this;
  }

   /**
   * Course id this workshop is part of.
   * @return course
  **/
  @javax.annotation.Nullable
  public Integer getCourse() {
    return course;
  }

  public void setCourse(Integer course) {
    this.course = course;
  }


  public ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner coursemodule(Integer coursemodule) {
    this.coursemodule = coursemodule;
    return this;
  }

   /**
   * coursemodule
   * @return coursemodule
  **/
  @javax.annotation.Nullable
  public Integer getCoursemodule() {
    return coursemodule;
  }

  public void setCoursemodule(Integer coursemodule) {
    this.coursemodule = coursemodule;
  }


  public ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner evaluation(String evaluation) {
    this.evaluation = evaluation;
    return this;
  }

   /**
   * The recently used grading evaluation method.
   * @return evaluation
  **/
  @javax.annotation.Nullable
  public String getEvaluation() {
    return evaluation;
  }

  public void setEvaluation(String evaluation) {
    this.evaluation = evaluation;
  }


  public ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner examplesmode(Integer examplesmode) {
    this.examplesmode = examplesmode;
    return this;
  }

   /**
   * 0 &#x3D; example assessments are voluntary, 1 &#x3D; examples must be assessed before submission,                     2 &#x3D; examples are available after own submission and must be assessed before peer/self assessment phase.
   * @return examplesmode
  **/
  @javax.annotation.Nullable
  public Integer getExamplesmode() {
    return examplesmode;
  }

  public void setExamplesmode(Integer examplesmode) {
    this.examplesmode = examplesmode;
  }


  public ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner grade(BigDecimal grade) {
    this.grade = grade;
    return this;
  }

   /**
   * The maximum grade for submission.
   * @return grade
  **/
  @javax.annotation.Nullable
  public BigDecimal getGrade() {
    return grade;
  }

  public void setGrade(BigDecimal grade) {
    this.grade = grade;
  }


  public ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner gradedecimals(Integer gradedecimals) {
    this.gradedecimals = gradedecimals;
    return this;
  }

   /**
   * Number of digits that should be shown after the decimal point when displaying grades.
   * @return gradedecimals
  **/
  @javax.annotation.Nullable
  public Integer getGradedecimals() {
    return gradedecimals;
  }

  public void setGradedecimals(Integer gradedecimals) {
    this.gradedecimals = gradedecimals;
  }


  public ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner gradinggrade(BigDecimal gradinggrade) {
    this.gradinggrade = gradinggrade;
    return this;
  }

   /**
   * The maximum grade for assessment.
   * @return gradinggrade
  **/
  @javax.annotation.Nullable
  public BigDecimal getGradinggrade() {
    return gradinggrade;
  }

  public void setGradinggrade(BigDecimal gradinggrade) {
    this.gradinggrade = gradinggrade;
  }


  public ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * The primary key of the record.
   * @return id
  **/
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner instructauthors(String instructauthors) {
    this.instructauthors = instructauthors;
    return this;
  }

   /**
   * Instructions for the submission phase.
   * @return instructauthors
  **/
  @javax.annotation.Nullable
  public String getInstructauthors() {
    return instructauthors;
  }

  public void setInstructauthors(String instructauthors) {
    this.instructauthors = instructauthors;
  }


  public ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner instructauthorsfiles(List<CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner> instructauthorsfiles) {
    this.instructauthorsfiles = instructauthorsfiles;
    return this;
  }

  public ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner addInstructauthorsfilesItem(CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner instructauthorsfilesItem) {
    if (this.instructauthorsfiles == null) {
      this.instructauthorsfiles = new ArrayList<>();
    }
    this.instructauthorsfiles.add(instructauthorsfilesItem);
    return this;
  }

   /**
   * Get instructauthorsfiles
   * @return instructauthorsfiles
  **/
  @javax.annotation.Nullable
  public List<CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner> getInstructauthorsfiles() {
    return instructauthorsfiles;
  }

  public void setInstructauthorsfiles(List<CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner> instructauthorsfiles) {
    this.instructauthorsfiles = instructauthorsfiles;
  }


  public ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner instructauthorsformat(Integer instructauthorsformat) {
    this.instructauthorsformat = instructauthorsformat;
    return this;
  }

   /**
   * instructauthors format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)
   * @return instructauthorsformat
  **/
  @javax.annotation.Nullable
  public Integer getInstructauthorsformat() {
    return instructauthorsformat;
  }

  public void setInstructauthorsformat(Integer instructauthorsformat) {
    this.instructauthorsformat = instructauthorsformat;
  }


  public ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner instructreviewers(String instructreviewers) {
    this.instructreviewers = instructreviewers;
    return this;
  }

   /**
   * Instructions for the assessment phase.
   * @return instructreviewers
  **/
  @javax.annotation.Nullable
  public String getInstructreviewers() {
    return instructreviewers;
  }

  public void setInstructreviewers(String instructreviewers) {
    this.instructreviewers = instructreviewers;
  }


  public ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner instructreviewersfiles(List<CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner> instructreviewersfiles) {
    this.instructreviewersfiles = instructreviewersfiles;
    return this;
  }

  public ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner addInstructreviewersfilesItem(CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner instructreviewersfilesItem) {
    if (this.instructreviewersfiles == null) {
      this.instructreviewersfiles = new ArrayList<>();
    }
    this.instructreviewersfiles.add(instructreviewersfilesItem);
    return this;
  }

   /**
   * Get instructreviewersfiles
   * @return instructreviewersfiles
  **/
  @javax.annotation.Nullable
  public List<CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner> getInstructreviewersfiles() {
    return instructreviewersfiles;
  }

  public void setInstructreviewersfiles(List<CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner> instructreviewersfiles) {
    this.instructreviewersfiles = instructreviewersfiles;
  }


  public ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner instructreviewersformat(Integer instructreviewersformat) {
    this.instructreviewersformat = instructreviewersformat;
    return this;
  }

   /**
   * instructreviewers format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)
   * @return instructreviewersformat
  **/
  @javax.annotation.Nullable
  public Integer getInstructreviewersformat() {
    return instructreviewersformat;
  }

  public void setInstructreviewersformat(Integer instructreviewersformat) {
    this.instructreviewersformat = instructreviewersformat;
  }


  public ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner intro(String intro) {
    this.intro = intro;
    return this;
  }

   /**
   * Workshop introduction text.
   * @return intro
  **/
  @javax.annotation.Nullable
  public String getIntro() {
    return intro;
  }

  public void setIntro(String intro) {
    this.intro = intro;
  }


  public ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner introfiles(List<CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner> introfiles) {
    this.introfiles = introfiles;
    return this;
  }

  public ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner addIntrofilesItem(CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner introfilesItem) {
    if (this.introfiles == null) {
      this.introfiles = new ArrayList<>();
    }
    this.introfiles.add(introfilesItem);
    return this;
  }

   /**
   * Get introfiles
   * @return introfiles
  **/
  @javax.annotation.Nullable
  public List<CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner> getIntrofiles() {
    return introfiles;
  }

  public void setIntrofiles(List<CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner> introfiles) {
    this.introfiles = introfiles;
  }


  public ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner introformat(Integer introformat) {
    this.introformat = introformat;
    return this;
  }

   /**
   * intro format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)
   * @return introformat
  **/
  @javax.annotation.Nullable
  public Integer getIntroformat() {
    return introformat;
  }

  public void setIntroformat(Integer introformat) {
    this.introformat = introformat;
  }


  public ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner lang(String lang) {
    this.lang = lang;
    return this;
  }

   /**
   * Forced activity language
   * @return lang
  **/
  @javax.annotation.Nullable
  public String getLang() {
    return lang;
  }

  public void setLang(String lang) {
    this.lang = lang;
  }


  public ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner latesubmissions(Boolean latesubmissions) {
    this.latesubmissions = latesubmissions;
    return this;
  }

   /**
   * Allow submitting the work after the deadline.
   * @return latesubmissions
  **/
  @javax.annotation.Nullable
  public Boolean getLatesubmissions() {
    return latesubmissions;
  }

  public void setLatesubmissions(Boolean latesubmissions) {
    this.latesubmissions = latesubmissions;
  }


  public ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner maxbytes(Integer maxbytes) {
    this.maxbytes = maxbytes;
    return this;
  }

   /**
   * Maximum size of the one attached file.
   * @return maxbytes
  **/
  @javax.annotation.Nullable
  public Integer getMaxbytes() {
    return maxbytes;
  }

  public void setMaxbytes(Integer maxbytes) {
    this.maxbytes = maxbytes;
  }


  public ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Workshop name.
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner nattachments(Integer nattachments) {
    this.nattachments = nattachments;
    return this;
  }

   /**
   * Maximum number of submission attachments.
   * @return nattachments
  **/
  @javax.annotation.Nullable
  public Integer getNattachments() {
    return nattachments;
  }

  public void setNattachments(Integer nattachments) {
    this.nattachments = nattachments;
  }


  public ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner overallfeedbackfiles(Integer overallfeedbackfiles) {
    this.overallfeedbackfiles = overallfeedbackfiles;
    return this;
  }

   /**
   * Number of allowed attachments to the overall feedback.
   * @return overallfeedbackfiles
  **/
  @javax.annotation.Nullable
  public Integer getOverallfeedbackfiles() {
    return overallfeedbackfiles;
  }

  public void setOverallfeedbackfiles(Integer overallfeedbackfiles) {
    this.overallfeedbackfiles = overallfeedbackfiles;
  }


  public ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner overallfeedbackfiletypes(String overallfeedbackfiletypes) {
    this.overallfeedbackfiletypes = overallfeedbackfiletypes;
    return this;
  }

   /**
   * Comma separated list of file extensions.
   * @return overallfeedbackfiletypes
  **/
  @javax.annotation.Nullable
  public String getOverallfeedbackfiletypes() {
    return overallfeedbackfiletypes;
  }

  public void setOverallfeedbackfiletypes(String overallfeedbackfiletypes) {
    this.overallfeedbackfiletypes = overallfeedbackfiletypes;
  }


  public ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner overallfeedbackmaxbytes(Integer overallfeedbackmaxbytes) {
    this.overallfeedbackmaxbytes = overallfeedbackmaxbytes;
    return this;
  }

   /**
   * Maximum size of one file attached to the overall feedback.
   * @return overallfeedbackmaxbytes
  **/
  @javax.annotation.Nullable
  public Integer getOverallfeedbackmaxbytes() {
    return overallfeedbackmaxbytes;
  }

  public void setOverallfeedbackmaxbytes(Integer overallfeedbackmaxbytes) {
    this.overallfeedbackmaxbytes = overallfeedbackmaxbytes;
  }


  public ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner overallfeedbackmode(Integer overallfeedbackmode) {
    this.overallfeedbackmode = overallfeedbackmode;
    return this;
  }

   /**
   * Mode of the overall feedback support.
   * @return overallfeedbackmode
  **/
  @javax.annotation.Nullable
  public Integer getOverallfeedbackmode() {
    return overallfeedbackmode;
  }

  public void setOverallfeedbackmode(Integer overallfeedbackmode) {
    this.overallfeedbackmode = overallfeedbackmode;
  }


  public ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner phase(Integer phase) {
    this.phase = phase;
    return this;
  }

   /**
   * The current phase of workshop (0 &#x3D; not available, 1 &#x3D; submission, 2 &#x3D; assessment, 3 &#x3D; closed).
   * @return phase
  **/
  @javax.annotation.Nullable
  public Integer getPhase() {
    return phase;
  }

  public void setPhase(Integer phase) {
    this.phase = phase;
  }


  public ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner phaseswitchassessment(Boolean phaseswitchassessment) {
    this.phaseswitchassessment = phaseswitchassessment;
    return this;
  }

   /**
   * Automatically switch to the assessment phase after the submissions deadline.
   * @return phaseswitchassessment
  **/
  @javax.annotation.Nullable
  public Boolean getPhaseswitchassessment() {
    return phaseswitchassessment;
  }

  public void setPhaseswitchassessment(Boolean phaseswitchassessment) {
    this.phaseswitchassessment = phaseswitchassessment;
  }


  public ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner strategy(String strategy) {
    this.strategy = strategy;
    return this;
  }

   /**
   * The type of the current grading strategy used in this workshop.
   * @return strategy
  **/
  @javax.annotation.Nullable
  public String getStrategy() {
    return strategy;
  }

  public void setStrategy(String strategy) {
    this.strategy = strategy;
  }


  public ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner submissionend(Integer submissionend) {
    this.submissionend = submissionend;
    return this;
  }

   /**
   * 0 &#x3D; will be closed manually, greater than 0 the timestamp of the end of the submission phase.
   * @return submissionend
  **/
  @javax.annotation.Nullable
  public Integer getSubmissionend() {
    return submissionend;
  }

  public void setSubmissionend(Integer submissionend) {
    this.submissionend = submissionend;
  }


  public ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner submissionfiletypes(String submissionfiletypes) {
    this.submissionfiletypes = submissionfiletypes;
    return this;
  }

   /**
   * Comma separated list of file extensions.
   * @return submissionfiletypes
  **/
  @javax.annotation.Nullable
  public String getSubmissionfiletypes() {
    return submissionfiletypes;
  }

  public void setSubmissionfiletypes(String submissionfiletypes) {
    this.submissionfiletypes = submissionfiletypes;
  }


  public ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner submissionstart(Integer submissionstart) {
    this.submissionstart = submissionstart;
    return this;
  }

   /**
   * 0 &#x3D; will be started manually, greater than 0 the timestamp of the start of the submission phase.
   * @return submissionstart
  **/
  @javax.annotation.Nullable
  public Integer getSubmissionstart() {
    return submissionstart;
  }

  public void setSubmissionstart(Integer submissionstart) {
    this.submissionstart = submissionstart;
  }


  public ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner submissiontypefile(Integer submissiontypefile) {
    this.submissiontypefile = submissiontypefile;
    return this;
  }

   /**
   * Indicates whether a file upload is required as part of each submission. 0 for no, 1 for optional, 2 for required.
   * @return submissiontypefile
  **/
  @javax.annotation.Nullable
  public Integer getSubmissiontypefile() {
    return submissiontypefile;
  }

  public void setSubmissiontypefile(Integer submissiontypefile) {
    this.submissiontypefile = submissiontypefile;
  }


  public ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner submissiontypetext(Integer submissiontypetext) {
    this.submissiontypetext = submissiontypetext;
    return this;
  }

   /**
   * Indicates whether text is required as part of each submission. 0 for no, 1 for optional, 2 for required.
   * @return submissiontypetext
  **/
  @javax.annotation.Nullable
  public Integer getSubmissiontypetext() {
    return submissiontypetext;
  }

  public void setSubmissiontypetext(Integer submissiontypetext) {
    this.submissiontypetext = submissiontypetext;
  }


  public ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner timemodified(Integer timemodified) {
    this.timemodified = timemodified;
    return this;
  }

   /**
   * The timestamp when the module was modified.
   * @return timemodified
  **/
  @javax.annotation.Nullable
  public Integer getTimemodified() {
    return timemodified;
  }

  public void setTimemodified(Integer timemodified) {
    this.timemodified = timemodified;
  }


  public ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner useexamples(Boolean useexamples) {
    this.useexamples = useexamples;
    return this;
  }

   /**
   * Optional feature: students practise evaluating on example submissions from teacher.
   * @return useexamples
  **/
  @javax.annotation.Nullable
  public Boolean getUseexamples() {
    return useexamples;
  }

  public void setUseexamples(Boolean useexamples) {
    this.useexamples = useexamples;
  }


  public ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner usepeerassessment(Boolean usepeerassessment) {
    this.usepeerassessment = usepeerassessment;
    return this;
  }

   /**
   * Optional feature: students perform peer assessment of others&#39; work.
   * @return usepeerassessment
  **/
  @javax.annotation.Nullable
  public Boolean getUsepeerassessment() {
    return usepeerassessment;
  }

  public void setUsepeerassessment(Boolean usepeerassessment) {
    this.usepeerassessment = usepeerassessment;
  }


  public ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner useselfassessment(Boolean useselfassessment) {
    this.useselfassessment = useselfassessment;
    return this;
  }

   /**
   * Optional feature: students perform self assessment of their own work.
   * @return useselfassessment
  **/
  @javax.annotation.Nullable
  public Boolean getUseselfassessment() {
    return useselfassessment;
  }

  public void setUseselfassessment(Boolean useselfassessment) {
    this.useselfassessment = useselfassessment;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner modWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner = (ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner) o;
    return Objects.equals(this.assessmentend, modWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner.assessmentend) &&
        Objects.equals(this.assessmentstart, modWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner.assessmentstart) &&
        Objects.equals(this.conclusion, modWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner.conclusion) &&
        Objects.equals(this.conclusionfiles, modWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner.conclusionfiles) &&
        Objects.equals(this.conclusionformat, modWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner.conclusionformat) &&
        Objects.equals(this.course, modWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner.course) &&
        Objects.equals(this.coursemodule, modWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner.coursemodule) &&
        Objects.equals(this.evaluation, modWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner.evaluation) &&
        Objects.equals(this.examplesmode, modWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner.examplesmode) &&
        Objects.equals(this.grade, modWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner.grade) &&
        Objects.equals(this.gradedecimals, modWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner.gradedecimals) &&
        Objects.equals(this.gradinggrade, modWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner.gradinggrade) &&
        Objects.equals(this.id, modWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner.id) &&
        Objects.equals(this.instructauthors, modWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner.instructauthors) &&
        Objects.equals(this.instructauthorsfiles, modWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner.instructauthorsfiles) &&
        Objects.equals(this.instructauthorsformat, modWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner.instructauthorsformat) &&
        Objects.equals(this.instructreviewers, modWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner.instructreviewers) &&
        Objects.equals(this.instructreviewersfiles, modWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner.instructreviewersfiles) &&
        Objects.equals(this.instructreviewersformat, modWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner.instructreviewersformat) &&
        Objects.equals(this.intro, modWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner.intro) &&
        Objects.equals(this.introfiles, modWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner.introfiles) &&
        Objects.equals(this.introformat, modWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner.introformat) &&
        Objects.equals(this.lang, modWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner.lang) &&
        Objects.equals(this.latesubmissions, modWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner.latesubmissions) &&
        Objects.equals(this.maxbytes, modWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner.maxbytes) &&
        Objects.equals(this.name, modWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner.name) &&
        Objects.equals(this.nattachments, modWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner.nattachments) &&
        Objects.equals(this.overallfeedbackfiles, modWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner.overallfeedbackfiles) &&
        Objects.equals(this.overallfeedbackfiletypes, modWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner.overallfeedbackfiletypes) &&
        Objects.equals(this.overallfeedbackmaxbytes, modWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner.overallfeedbackmaxbytes) &&
        Objects.equals(this.overallfeedbackmode, modWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner.overallfeedbackmode) &&
        Objects.equals(this.phase, modWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner.phase) &&
        Objects.equals(this.phaseswitchassessment, modWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner.phaseswitchassessment) &&
        Objects.equals(this.strategy, modWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner.strategy) &&
        Objects.equals(this.submissionend, modWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner.submissionend) &&
        Objects.equals(this.submissionfiletypes, modWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner.submissionfiletypes) &&
        Objects.equals(this.submissionstart, modWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner.submissionstart) &&
        Objects.equals(this.submissiontypefile, modWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner.submissiontypefile) &&
        Objects.equals(this.submissiontypetext, modWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner.submissiontypetext) &&
        Objects.equals(this.timemodified, modWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner.timemodified) &&
        Objects.equals(this.useexamples, modWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner.useexamples) &&
        Objects.equals(this.usepeerassessment, modWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner.usepeerassessment) &&
        Objects.equals(this.useselfassessment, modWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner.useselfassessment);
  }

  @Override
  public int hashCode() {
    return Objects.hash(assessmentend, assessmentstart, conclusion, conclusionfiles, conclusionformat, course, coursemodule, evaluation, examplesmode, grade, gradedecimals, gradinggrade, id, instructauthors, instructauthorsfiles, instructauthorsformat, instructreviewers, instructreviewersfiles, instructreviewersformat, intro, introfiles, introformat, lang, latesubmissions, maxbytes, name, nattachments, overallfeedbackfiles, overallfeedbackfiletypes, overallfeedbackmaxbytes, overallfeedbackmode, phase, phaseswitchassessment, strategy, submissionend, submissionfiletypes, submissionstart, submissiontypefile, submissiontypetext, timemodified, useexamples, usepeerassessment, useselfassessment);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner {\n");
    sb.append("    assessmentend: ").append(toIndentedString(assessmentend)).append("\n");
    sb.append("    assessmentstart: ").append(toIndentedString(assessmentstart)).append("\n");
    sb.append("    conclusion: ").append(toIndentedString(conclusion)).append("\n");
    sb.append("    conclusionfiles: ").append(toIndentedString(conclusionfiles)).append("\n");
    sb.append("    conclusionformat: ").append(toIndentedString(conclusionformat)).append("\n");
    sb.append("    course: ").append(toIndentedString(course)).append("\n");
    sb.append("    coursemodule: ").append(toIndentedString(coursemodule)).append("\n");
    sb.append("    evaluation: ").append(toIndentedString(evaluation)).append("\n");
    sb.append("    examplesmode: ").append(toIndentedString(examplesmode)).append("\n");
    sb.append("    grade: ").append(toIndentedString(grade)).append("\n");
    sb.append("    gradedecimals: ").append(toIndentedString(gradedecimals)).append("\n");
    sb.append("    gradinggrade: ").append(toIndentedString(gradinggrade)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    instructauthors: ").append(toIndentedString(instructauthors)).append("\n");
    sb.append("    instructauthorsfiles: ").append(toIndentedString(instructauthorsfiles)).append("\n");
    sb.append("    instructauthorsformat: ").append(toIndentedString(instructauthorsformat)).append("\n");
    sb.append("    instructreviewers: ").append(toIndentedString(instructreviewers)).append("\n");
    sb.append("    instructreviewersfiles: ").append(toIndentedString(instructreviewersfiles)).append("\n");
    sb.append("    instructreviewersformat: ").append(toIndentedString(instructreviewersformat)).append("\n");
    sb.append("    intro: ").append(toIndentedString(intro)).append("\n");
    sb.append("    introfiles: ").append(toIndentedString(introfiles)).append("\n");
    sb.append("    introformat: ").append(toIndentedString(introformat)).append("\n");
    sb.append("    lang: ").append(toIndentedString(lang)).append("\n");
    sb.append("    latesubmissions: ").append(toIndentedString(latesubmissions)).append("\n");
    sb.append("    maxbytes: ").append(toIndentedString(maxbytes)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nattachments: ").append(toIndentedString(nattachments)).append("\n");
    sb.append("    overallfeedbackfiles: ").append(toIndentedString(overallfeedbackfiles)).append("\n");
    sb.append("    overallfeedbackfiletypes: ").append(toIndentedString(overallfeedbackfiletypes)).append("\n");
    sb.append("    overallfeedbackmaxbytes: ").append(toIndentedString(overallfeedbackmaxbytes)).append("\n");
    sb.append("    overallfeedbackmode: ").append(toIndentedString(overallfeedbackmode)).append("\n");
    sb.append("    phase: ").append(toIndentedString(phase)).append("\n");
    sb.append("    phaseswitchassessment: ").append(toIndentedString(phaseswitchassessment)).append("\n");
    sb.append("    strategy: ").append(toIndentedString(strategy)).append("\n");
    sb.append("    submissionend: ").append(toIndentedString(submissionend)).append("\n");
    sb.append("    submissionfiletypes: ").append(toIndentedString(submissionfiletypes)).append("\n");
    sb.append("    submissionstart: ").append(toIndentedString(submissionstart)).append("\n");
    sb.append("    submissiontypefile: ").append(toIndentedString(submissiontypefile)).append("\n");
    sb.append("    submissiontypetext: ").append(toIndentedString(submissiontypetext)).append("\n");
    sb.append("    timemodified: ").append(toIndentedString(timemodified)).append("\n");
    sb.append("    useexamples: ").append(toIndentedString(useexamples)).append("\n");
    sb.append("    usepeerassessment: ").append(toIndentedString(usepeerassessment)).append("\n");
    sb.append("    useselfassessment: ").append(toIndentedString(useselfassessment)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("assessmentend");
    openapiFields.add("assessmentstart");
    openapiFields.add("conclusion");
    openapiFields.add("conclusionfiles");
    openapiFields.add("conclusionformat");
    openapiFields.add("course");
    openapiFields.add("coursemodule");
    openapiFields.add("evaluation");
    openapiFields.add("examplesmode");
    openapiFields.add("grade");
    openapiFields.add("gradedecimals");
    openapiFields.add("gradinggrade");
    openapiFields.add("id");
    openapiFields.add("instructauthors");
    openapiFields.add("instructauthorsfiles");
    openapiFields.add("instructauthorsformat");
    openapiFields.add("instructreviewers");
    openapiFields.add("instructreviewersfiles");
    openapiFields.add("instructreviewersformat");
    openapiFields.add("intro");
    openapiFields.add("introfiles");
    openapiFields.add("introformat");
    openapiFields.add("lang");
    openapiFields.add("latesubmissions");
    openapiFields.add("maxbytes");
    openapiFields.add("name");
    openapiFields.add("nattachments");
    openapiFields.add("overallfeedbackfiles");
    openapiFields.add("overallfeedbackfiletypes");
    openapiFields.add("overallfeedbackmaxbytes");
    openapiFields.add("overallfeedbackmode");
    openapiFields.add("phase");
    openapiFields.add("phaseswitchassessment");
    openapiFields.add("strategy");
    openapiFields.add("submissionend");
    openapiFields.add("submissionfiletypes");
    openapiFields.add("submissionstart");
    openapiFields.add("submissiontypefile");
    openapiFields.add("submissiontypetext");
    openapiFields.add("timemodified");
    openapiFields.add("useexamples");
    openapiFields.add("usepeerassessment");
    openapiFields.add("useselfassessment");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner is not found in the empty JSON string", ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("conclusion") != null && !jsonObj.get("conclusion").isJsonNull()) && !jsonObj.get("conclusion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conclusion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conclusion").toString()));
      }
      if (jsonObj.get("conclusionfiles") != null && !jsonObj.get("conclusionfiles").isJsonNull()) {
        JsonArray jsonArrayconclusionfiles = jsonObj.getAsJsonArray("conclusionfiles");
        if (jsonArrayconclusionfiles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("conclusionfiles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `conclusionfiles` to be an array in the JSON string but got `%s`", jsonObj.get("conclusionfiles").toString()));
          }

          // validate the optional field `conclusionfiles` (array)
          for (int i = 0; i < jsonArrayconclusionfiles.size(); i++) {
            CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner.validateJsonElement(jsonArrayconclusionfiles.get(i));
          };
        }
      }
      if ((jsonObj.get("evaluation") != null && !jsonObj.get("evaluation").isJsonNull()) && !jsonObj.get("evaluation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `evaluation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("evaluation").toString()));
      }
      if ((jsonObj.get("instructauthors") != null && !jsonObj.get("instructauthors").isJsonNull()) && !jsonObj.get("instructauthors").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instructauthors` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instructauthors").toString()));
      }
      if (jsonObj.get("instructauthorsfiles") != null && !jsonObj.get("instructauthorsfiles").isJsonNull()) {
        JsonArray jsonArrayinstructauthorsfiles = jsonObj.getAsJsonArray("instructauthorsfiles");
        if (jsonArrayinstructauthorsfiles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("instructauthorsfiles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `instructauthorsfiles` to be an array in the JSON string but got `%s`", jsonObj.get("instructauthorsfiles").toString()));
          }

          // validate the optional field `instructauthorsfiles` (array)
          for (int i = 0; i < jsonArrayinstructauthorsfiles.size(); i++) {
            CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner.validateJsonElement(jsonArrayinstructauthorsfiles.get(i));
          };
        }
      }
      if ((jsonObj.get("instructreviewers") != null && !jsonObj.get("instructreviewers").isJsonNull()) && !jsonObj.get("instructreviewers").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instructreviewers` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instructreviewers").toString()));
      }
      if (jsonObj.get("instructreviewersfiles") != null && !jsonObj.get("instructreviewersfiles").isJsonNull()) {
        JsonArray jsonArrayinstructreviewersfiles = jsonObj.getAsJsonArray("instructreviewersfiles");
        if (jsonArrayinstructreviewersfiles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("instructreviewersfiles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `instructreviewersfiles` to be an array in the JSON string but got `%s`", jsonObj.get("instructreviewersfiles").toString()));
          }

          // validate the optional field `instructreviewersfiles` (array)
          for (int i = 0; i < jsonArrayinstructreviewersfiles.size(); i++) {
            CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner.validateJsonElement(jsonArrayinstructreviewersfiles.get(i));
          };
        }
      }
      if ((jsonObj.get("intro") != null && !jsonObj.get("intro").isJsonNull()) && !jsonObj.get("intro").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `intro` to be a primitive type in the JSON string but got `%s`", jsonObj.get("intro").toString()));
      }
      if (jsonObj.get("introfiles") != null && !jsonObj.get("introfiles").isJsonNull()) {
        JsonArray jsonArrayintrofiles = jsonObj.getAsJsonArray("introfiles");
        if (jsonArrayintrofiles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("introfiles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `introfiles` to be an array in the JSON string but got `%s`", jsonObj.get("introfiles").toString()));
          }

          // validate the optional field `introfiles` (array)
          for (int i = 0; i < jsonArrayintrofiles.size(); i++) {
            CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner.validateJsonElement(jsonArrayintrofiles.get(i));
          };
        }
      }
      if ((jsonObj.get("lang") != null && !jsonObj.get("lang").isJsonNull()) && !jsonObj.get("lang").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lang` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lang").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("overallfeedbackfiletypes") != null && !jsonObj.get("overallfeedbackfiletypes").isJsonNull()) && !jsonObj.get("overallfeedbackfiletypes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `overallfeedbackfiletypes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("overallfeedbackfiletypes").toString()));
      }
      if ((jsonObj.get("strategy") != null && !jsonObj.get("strategy").isJsonNull()) && !jsonObj.get("strategy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `strategy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("strategy").toString()));
      }
      if ((jsonObj.get("submissionfiletypes") != null && !jsonObj.get("submissionfiletypes").isJsonNull()) && !jsonObj.get("submissionfiletypes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `submissionfiletypes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("submissionfiletypes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner>() {
           @Override
           public void write(JsonWriter out, ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner
  * @throws IOException if the JSON string is invalid with respect to ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner
  */
  public static ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner.class);
  }

 /**
  * Convert an instance of ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

