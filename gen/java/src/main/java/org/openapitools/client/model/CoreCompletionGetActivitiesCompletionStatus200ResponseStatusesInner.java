/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CoreCompletionGetActivitiesCompletionStatus200ResponseStatusesInnerDetailsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.joshuapare.JSON;

/**
 * Activity
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-18T20:58:28.689161-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class CoreCompletionGetActivitiesCompletionStatus200ResponseStatusesInner {
  public static final String SERIALIZED_NAME_CMID = "cmid";
  @SerializedName(SERIALIZED_NAME_CMID)
  private Integer cmid = null;

  public static final String SERIALIZED_NAME_DETAILS = "details";
  @SerializedName(SERIALIZED_NAME_DETAILS)
  private List<CoreCompletionGetActivitiesCompletionStatus200ResponseStatusesInnerDetailsInner> details = new ArrayList<>();

  public static final String SERIALIZED_NAME_HASCOMPLETION = "hascompletion";
  @SerializedName(SERIALIZED_NAME_HASCOMPLETION)
  private Boolean hascompletion = null;

  public static final String SERIALIZED_NAME_INSTANCE = "instance";
  @SerializedName(SERIALIZED_NAME_INSTANCE)
  private Integer instance = null;

  public static final String SERIALIZED_NAME_ISAUTOMATIC = "isautomatic";
  @SerializedName(SERIALIZED_NAME_ISAUTOMATIC)
  private Boolean isautomatic = null;

  public static final String SERIALIZED_NAME_ISTRACKEDUSER = "istrackeduser";
  @SerializedName(SERIALIZED_NAME_ISTRACKEDUSER)
  private Boolean istrackeduser = null;

  public static final String SERIALIZED_NAME_MODNAME = "modname";
  @SerializedName(SERIALIZED_NAME_MODNAME)
  private String modname = "null";

  public static final String SERIALIZED_NAME_OVERRIDEBY = "overrideby";
  @SerializedName(SERIALIZED_NAME_OVERRIDEBY)
  private Integer overrideby = null;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private Integer state = null;

  public static final String SERIALIZED_NAME_TIMECOMPLETED = "timecompleted";
  @SerializedName(SERIALIZED_NAME_TIMECOMPLETED)
  private Integer timecompleted = null;

  public static final String SERIALIZED_NAME_TRACKING = "tracking";
  @SerializedName(SERIALIZED_NAME_TRACKING)
  private Integer tracking = null;

  public static final String SERIALIZED_NAME_USERVISIBLE = "uservisible";
  @SerializedName(SERIALIZED_NAME_USERVISIBLE)
  private Boolean uservisible = null;

  public static final String SERIALIZED_NAME_VALUEUSED = "valueused";
  @SerializedName(SERIALIZED_NAME_VALUEUSED)
  private Boolean valueused = null;

  public CoreCompletionGetActivitiesCompletionStatus200ResponseStatusesInner() {
  }

  public CoreCompletionGetActivitiesCompletionStatus200ResponseStatusesInner cmid(Integer cmid) {
    this.cmid = cmid;
    return this;
  }

   /**
   * course module ID
   * @return cmid
  **/
  @javax.annotation.Nullable
  public Integer getCmid() {
    return cmid;
  }

  public void setCmid(Integer cmid) {
    this.cmid = cmid;
  }


  public CoreCompletionGetActivitiesCompletionStatus200ResponseStatusesInner details(List<CoreCompletionGetActivitiesCompletionStatus200ResponseStatusesInnerDetailsInner> details) {
    this.details = details;
    return this;
  }

  public CoreCompletionGetActivitiesCompletionStatus200ResponseStatusesInner addDetailsItem(CoreCompletionGetActivitiesCompletionStatus200ResponseStatusesInnerDetailsInner detailsItem) {
    if (this.details == null) {
      this.details = new ArrayList<>();
    }
    this.details.add(detailsItem);
    return this;
  }

   /**
   * Get details
   * @return details
  **/
  @javax.annotation.Nullable
  public List<CoreCompletionGetActivitiesCompletionStatus200ResponseStatusesInnerDetailsInner> getDetails() {
    return details;
  }

  public void setDetails(List<CoreCompletionGetActivitiesCompletionStatus200ResponseStatusesInnerDetailsInner> details) {
    this.details = details;
  }


  public CoreCompletionGetActivitiesCompletionStatus200ResponseStatusesInner hascompletion(Boolean hascompletion) {
    this.hascompletion = hascompletion;
    return this;
  }

   /**
   * Whether this activity module has completion enabled
   * @return hascompletion
  **/
  @javax.annotation.Nullable
  public Boolean getHascompletion() {
    return hascompletion;
  }

  public void setHascompletion(Boolean hascompletion) {
    this.hascompletion = hascompletion;
  }


  public CoreCompletionGetActivitiesCompletionStatus200ResponseStatusesInner instance(Integer instance) {
    this.instance = instance;
    return this;
  }

   /**
   * instance ID
   * @return instance
  **/
  @javax.annotation.Nullable
  public Integer getInstance() {
    return instance;
  }

  public void setInstance(Integer instance) {
    this.instance = instance;
  }


  public CoreCompletionGetActivitiesCompletionStatus200ResponseStatusesInner isautomatic(Boolean isautomatic) {
    this.isautomatic = isautomatic;
    return this;
  }

   /**
   * Whether this activity module instance tracks completion automatically.
   * @return isautomatic
  **/
  @javax.annotation.Nullable
  public Boolean getIsautomatic() {
    return isautomatic;
  }

  public void setIsautomatic(Boolean isautomatic) {
    this.isautomatic = isautomatic;
  }


  public CoreCompletionGetActivitiesCompletionStatus200ResponseStatusesInner istrackeduser(Boolean istrackeduser) {
    this.istrackeduser = istrackeduser;
    return this;
  }

   /**
   * Whether completion is being tracked for this user.
   * @return istrackeduser
  **/
  @javax.annotation.Nullable
  public Boolean getIstrackeduser() {
    return istrackeduser;
  }

  public void setIstrackeduser(Boolean istrackeduser) {
    this.istrackeduser = istrackeduser;
  }


  public CoreCompletionGetActivitiesCompletionStatus200ResponseStatusesInner modname(String modname) {
    this.modname = modname;
    return this;
  }

   /**
   * activity module name
   * @return modname
  **/
  @javax.annotation.Nullable
  public String getModname() {
    return modname;
  }

  public void setModname(String modname) {
    this.modname = modname;
  }


  public CoreCompletionGetActivitiesCompletionStatus200ResponseStatusesInner overrideby(Integer overrideby) {
    this.overrideby = overrideby;
    return this;
  }

   /**
   * The user id who has overriden the status, or null
   * @return overrideby
  **/
  @javax.annotation.Nullable
  public Integer getOverrideby() {
    return overrideby;
  }

  public void setOverrideby(Integer overrideby) {
    this.overrideby = overrideby;
  }


  public CoreCompletionGetActivitiesCompletionStatus200ResponseStatusesInner state(Integer state) {
    this.state = state;
    return this;
  }

   /**
   * Completion state value:                                     0 means incomplete,                                     1 complete,                                     2 complete pass,                                     3 complete fail
   * @return state
  **/
  @javax.annotation.Nullable
  public Integer getState() {
    return state;
  }

  public void setState(Integer state) {
    this.state = state;
  }


  public CoreCompletionGetActivitiesCompletionStatus200ResponseStatusesInner timecompleted(Integer timecompleted) {
    this.timecompleted = timecompleted;
    return this;
  }

   /**
   * timestamp for completed activity
   * @return timecompleted
  **/
  @javax.annotation.Nullable
  public Integer getTimecompleted() {
    return timecompleted;
  }

  public void setTimecompleted(Integer timecompleted) {
    this.timecompleted = timecompleted;
  }


  public CoreCompletionGetActivitiesCompletionStatus200ResponseStatusesInner tracking(Integer tracking) {
    this.tracking = tracking;
    return this;
  }

   /**
   * type of tracking:                                     0 means none,                                     1 manual,                                     2 automatic
   * @return tracking
  **/
  @javax.annotation.Nullable
  public Integer getTracking() {
    return tracking;
  }

  public void setTracking(Integer tracking) {
    this.tracking = tracking;
  }


  public CoreCompletionGetActivitiesCompletionStatus200ResponseStatusesInner uservisible(Boolean uservisible) {
    this.uservisible = uservisible;
    return this;
  }

   /**
   * Whether this activity is visible to the user.
   * @return uservisible
  **/
  @javax.annotation.Nullable
  public Boolean getUservisible() {
    return uservisible;
  }

  public void setUservisible(Boolean uservisible) {
    this.uservisible = uservisible;
  }


  public CoreCompletionGetActivitiesCompletionStatus200ResponseStatusesInner valueused(Boolean valueused) {
    this.valueused = valueused;
    return this;
  }

   /**
   * Whether the completion status affects the availability of another activity.
   * @return valueused
  **/
  @javax.annotation.Nullable
  public Boolean getValueused() {
    return valueused;
  }

  public void setValueused(Boolean valueused) {
    this.valueused = valueused;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CoreCompletionGetActivitiesCompletionStatus200ResponseStatusesInner coreCompletionGetActivitiesCompletionStatus200ResponseStatusesInner = (CoreCompletionGetActivitiesCompletionStatus200ResponseStatusesInner) o;
    return Objects.equals(this.cmid, coreCompletionGetActivitiesCompletionStatus200ResponseStatusesInner.cmid) &&
        Objects.equals(this.details, coreCompletionGetActivitiesCompletionStatus200ResponseStatusesInner.details) &&
        Objects.equals(this.hascompletion, coreCompletionGetActivitiesCompletionStatus200ResponseStatusesInner.hascompletion) &&
        Objects.equals(this.instance, coreCompletionGetActivitiesCompletionStatus200ResponseStatusesInner.instance) &&
        Objects.equals(this.isautomatic, coreCompletionGetActivitiesCompletionStatus200ResponseStatusesInner.isautomatic) &&
        Objects.equals(this.istrackeduser, coreCompletionGetActivitiesCompletionStatus200ResponseStatusesInner.istrackeduser) &&
        Objects.equals(this.modname, coreCompletionGetActivitiesCompletionStatus200ResponseStatusesInner.modname) &&
        Objects.equals(this.overrideby, coreCompletionGetActivitiesCompletionStatus200ResponseStatusesInner.overrideby) &&
        Objects.equals(this.state, coreCompletionGetActivitiesCompletionStatus200ResponseStatusesInner.state) &&
        Objects.equals(this.timecompleted, coreCompletionGetActivitiesCompletionStatus200ResponseStatusesInner.timecompleted) &&
        Objects.equals(this.tracking, coreCompletionGetActivitiesCompletionStatus200ResponseStatusesInner.tracking) &&
        Objects.equals(this.uservisible, coreCompletionGetActivitiesCompletionStatus200ResponseStatusesInner.uservisible) &&
        Objects.equals(this.valueused, coreCompletionGetActivitiesCompletionStatus200ResponseStatusesInner.valueused);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cmid, details, hascompletion, instance, isautomatic, istrackeduser, modname, overrideby, state, timecompleted, tracking, uservisible, valueused);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CoreCompletionGetActivitiesCompletionStatus200ResponseStatusesInner {\n");
    sb.append("    cmid: ").append(toIndentedString(cmid)).append("\n");
    sb.append("    details: ").append(toIndentedString(details)).append("\n");
    sb.append("    hascompletion: ").append(toIndentedString(hascompletion)).append("\n");
    sb.append("    instance: ").append(toIndentedString(instance)).append("\n");
    sb.append("    isautomatic: ").append(toIndentedString(isautomatic)).append("\n");
    sb.append("    istrackeduser: ").append(toIndentedString(istrackeduser)).append("\n");
    sb.append("    modname: ").append(toIndentedString(modname)).append("\n");
    sb.append("    overrideby: ").append(toIndentedString(overrideby)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    timecompleted: ").append(toIndentedString(timecompleted)).append("\n");
    sb.append("    tracking: ").append(toIndentedString(tracking)).append("\n");
    sb.append("    uservisible: ").append(toIndentedString(uservisible)).append("\n");
    sb.append("    valueused: ").append(toIndentedString(valueused)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cmid");
    openapiFields.add("details");
    openapiFields.add("hascompletion");
    openapiFields.add("instance");
    openapiFields.add("isautomatic");
    openapiFields.add("istrackeduser");
    openapiFields.add("modname");
    openapiFields.add("overrideby");
    openapiFields.add("state");
    openapiFields.add("timecompleted");
    openapiFields.add("tracking");
    openapiFields.add("uservisible");
    openapiFields.add("valueused");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CoreCompletionGetActivitiesCompletionStatus200ResponseStatusesInner
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CoreCompletionGetActivitiesCompletionStatus200ResponseStatusesInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CoreCompletionGetActivitiesCompletionStatus200ResponseStatusesInner is not found in the empty JSON string", CoreCompletionGetActivitiesCompletionStatus200ResponseStatusesInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CoreCompletionGetActivitiesCompletionStatus200ResponseStatusesInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CoreCompletionGetActivitiesCompletionStatus200ResponseStatusesInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("details") != null && !jsonObj.get("details").isJsonNull()) {
        JsonArray jsonArraydetails = jsonObj.getAsJsonArray("details");
        if (jsonArraydetails != null) {
          // ensure the json data is an array
          if (!jsonObj.get("details").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `details` to be an array in the JSON string but got `%s`", jsonObj.get("details").toString()));
          }

          // validate the optional field `details` (array)
          for (int i = 0; i < jsonArraydetails.size(); i++) {
            CoreCompletionGetActivitiesCompletionStatus200ResponseStatusesInnerDetailsInner.validateJsonElement(jsonArraydetails.get(i));
          };
        }
      }
      if ((jsonObj.get("modname") != null && !jsonObj.get("modname").isJsonNull()) && !jsonObj.get("modname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modname").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CoreCompletionGetActivitiesCompletionStatus200ResponseStatusesInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CoreCompletionGetActivitiesCompletionStatus200ResponseStatusesInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CoreCompletionGetActivitiesCompletionStatus200ResponseStatusesInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CoreCompletionGetActivitiesCompletionStatus200ResponseStatusesInner.class));

       return (TypeAdapter<T>) new TypeAdapter<CoreCompletionGetActivitiesCompletionStatus200ResponseStatusesInner>() {
           @Override
           public void write(JsonWriter out, CoreCompletionGetActivitiesCompletionStatus200ResponseStatusesInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CoreCompletionGetActivitiesCompletionStatus200ResponseStatusesInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CoreCompletionGetActivitiesCompletionStatus200ResponseStatusesInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CoreCompletionGetActivitiesCompletionStatus200ResponseStatusesInner
  * @throws IOException if the JSON string is invalid with respect to CoreCompletionGetActivitiesCompletionStatus200ResponseStatusesInner
  */
  public static CoreCompletionGetActivitiesCompletionStatus200ResponseStatusesInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CoreCompletionGetActivitiesCompletionStatus200ResponseStatusesInner.class);
  }

 /**
  * Convert an instance of CoreCompletionGetActivitiesCompletionStatus200ResponseStatusesInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

