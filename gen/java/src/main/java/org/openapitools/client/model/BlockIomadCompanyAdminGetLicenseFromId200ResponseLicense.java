/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.joshuapare.JSON;

/**
 * BlockIomadCompanyAdminGetLicenseFromId200ResponseLicense
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-18T20:58:28.689161-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class BlockIomadCompanyAdminGetLicenseFromId200ResponseLicense {
  public static final String SERIALIZED_NAME_ALLALLOCATED = "allallocated";
  @SerializedName(SERIALIZED_NAME_ALLALLOCATED)
  private Boolean allallocated = null;

  public static final String SERIALIZED_NAME_ALLOCATION = "allocation";
  @SerializedName(SERIALIZED_NAME_ALLOCATION)
  private Integer allocation = null;

  public static final String SERIALIZED_NAME_COMPANYID = "companyid";
  @SerializedName(SERIALIZED_NAME_COMPANYID)
  private Integer companyid;

  public static final String SERIALIZED_NAME_EXPIRYDATE = "expirydate";
  @SerializedName(SERIALIZED_NAME_EXPIRYDATE)
  private Integer expirydate = null;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_INSTANT = "instant";
  @SerializedName(SERIALIZED_NAME_INSTANT)
  private Boolean instant = null;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PARENTID = "parentid";
  @SerializedName(SERIALIZED_NAME_PARENTID)
  private Integer parentid = null;

  public static final String SERIALIZED_NAME_PROGRAM = "program";
  @SerializedName(SERIALIZED_NAME_PROGRAM)
  private Boolean program = null;

  public static final String SERIALIZED_NAME_REFERENCE = "reference";
  @SerializedName(SERIALIZED_NAME_REFERENCE)
  private String reference = "null";

  public static final String SERIALIZED_NAME_STARTDATE = "startdate";
  @SerializedName(SERIALIZED_NAME_STARTDATE)
  private Integer startdate = null;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private Integer type;

  public static final String SERIALIZED_NAME_USED = "used";
  @SerializedName(SERIALIZED_NAME_USED)
  private Integer used = null;

  public static final String SERIALIZED_NAME_VALIDLENGTH = "validlength";
  @SerializedName(SERIALIZED_NAME_VALIDLENGTH)
  private Integer validlength = null;

  public BlockIomadCompanyAdminGetLicenseFromId200ResponseLicense() {
  }

  public BlockIomadCompanyAdminGetLicenseFromId200ResponseLicense allallocated(Boolean allallocated) {
    this.allallocated = allallocated;
    return this;
  }

   /**
   * All licenses allocated
   * @return allallocated
  **/
  @javax.annotation.Nonnull
  public Boolean getAllallocated() {
    return allallocated;
  }

  public void setAllallocated(Boolean allallocated) {
    this.allallocated = allallocated;
  }


  public BlockIomadCompanyAdminGetLicenseFromId200ResponseLicense allocation(Integer allocation) {
    this.allocation = allocation;
    return this;
  }

   /**
   * Allocation
   * @return allocation
  **/
  @javax.annotation.Nonnull
  public Integer getAllocation() {
    return allocation;
  }

  public void setAllocation(Integer allocation) {
    this.allocation = allocation;
  }


  public BlockIomadCompanyAdminGetLicenseFromId200ResponseLicense companyid(Integer companyid) {
    this.companyid = companyid;
    return this;
  }

   /**
   * Company ID
   * @return companyid
  **/
  @javax.annotation.Nonnull
  public Integer getCompanyid() {
    return companyid;
  }

  public void setCompanyid(Integer companyid) {
    this.companyid = companyid;
  }


  public BlockIomadCompanyAdminGetLicenseFromId200ResponseLicense expirydate(Integer expirydate) {
    this.expirydate = expirydate;
    return this;
  }

   /**
   * Expiry date
   * @return expirydate
  **/
  @javax.annotation.Nonnull
  public Integer getExpirydate() {
    return expirydate;
  }

  public void setExpirydate(Integer expirydate) {
    this.expirydate = expirydate;
  }


  public BlockIomadCompanyAdminGetLicenseFromId200ResponseLicense id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * License ID
   * @return id
  **/
  @javax.annotation.Nonnull
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public BlockIomadCompanyAdminGetLicenseFromId200ResponseLicense instant(Boolean instant) {
    this.instant = instant;
    return this;
  }

   /**
   * Instant
   * @return instant
  **/
  @javax.annotation.Nonnull
  public Boolean getInstant() {
    return instant;
  }

  public void setInstant(Boolean instant) {
    this.instant = instant;
  }


  public BlockIomadCompanyAdminGetLicenseFromId200ResponseLicense name(String name) {
    this.name = name;
    return this;
  }

   /**
   * License name
   * @return name
  **/
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public BlockIomadCompanyAdminGetLicenseFromId200ResponseLicense parentid(Integer parentid) {
    this.parentid = parentid;
    return this;
  }

   /**
   * Parent ID
   * @return parentid
  **/
  @javax.annotation.Nonnull
  public Integer getParentid() {
    return parentid;
  }

  public void setParentid(Integer parentid) {
    this.parentid = parentid;
  }


  public BlockIomadCompanyAdminGetLicenseFromId200ResponseLicense program(Boolean program) {
    this.program = program;
    return this;
  }

   /**
   * Program
   * @return program
  **/
  @javax.annotation.Nonnull
  public Boolean getProgram() {
    return program;
  }

  public void setProgram(Boolean program) {
    this.program = program;
  }


  public BlockIomadCompanyAdminGetLicenseFromId200ResponseLicense reference(String reference) {
    this.reference = reference;
    return this;
  }

   /**
   * Reference
   * @return reference
  **/
  @javax.annotation.Nonnull
  public String getReference() {
    return reference;
  }

  public void setReference(String reference) {
    this.reference = reference;
  }


  public BlockIomadCompanyAdminGetLicenseFromId200ResponseLicense startdate(Integer startdate) {
    this.startdate = startdate;
    return this;
  }

   /**
   * Start date
   * @return startdate
  **/
  @javax.annotation.Nonnull
  public Integer getStartdate() {
    return startdate;
  }

  public void setStartdate(Integer startdate) {
    this.startdate = startdate;
  }


  public BlockIomadCompanyAdminGetLicenseFromId200ResponseLicense type(Integer type) {
    this.type = type;
    return this;
  }

   /**
   * License type - 0 &#x3D; standard, 1 &#x3D; reusable, 2 &#x3D; standard educator, 3 &#x3D; reusable educator
   * @return type
  **/
  @javax.annotation.Nonnull
  public Integer getType() {
    return type;
  }

  public void setType(Integer type) {
    this.type = type;
  }


  public BlockIomadCompanyAdminGetLicenseFromId200ResponseLicense used(Integer used) {
    this.used = used;
    return this;
  }

   /**
   * Used
   * @return used
  **/
  @javax.annotation.Nonnull
  public Integer getUsed() {
    return used;
  }

  public void setUsed(Integer used) {
    this.used = used;
  }


  public BlockIomadCompanyAdminGetLicenseFromId200ResponseLicense validlength(Integer validlength) {
    this.validlength = validlength;
    return this;
  }

   /**
   * Valid length
   * @return validlength
  **/
  @javax.annotation.Nonnull
  public Integer getValidlength() {
    return validlength;
  }

  public void setValidlength(Integer validlength) {
    this.validlength = validlength;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BlockIomadCompanyAdminGetLicenseFromId200ResponseLicense blockIomadCompanyAdminGetLicenseFromId200ResponseLicense = (BlockIomadCompanyAdminGetLicenseFromId200ResponseLicense) o;
    return Objects.equals(this.allallocated, blockIomadCompanyAdminGetLicenseFromId200ResponseLicense.allallocated) &&
        Objects.equals(this.allocation, blockIomadCompanyAdminGetLicenseFromId200ResponseLicense.allocation) &&
        Objects.equals(this.companyid, blockIomadCompanyAdminGetLicenseFromId200ResponseLicense.companyid) &&
        Objects.equals(this.expirydate, blockIomadCompanyAdminGetLicenseFromId200ResponseLicense.expirydate) &&
        Objects.equals(this.id, blockIomadCompanyAdminGetLicenseFromId200ResponseLicense.id) &&
        Objects.equals(this.instant, blockIomadCompanyAdminGetLicenseFromId200ResponseLicense.instant) &&
        Objects.equals(this.name, blockIomadCompanyAdminGetLicenseFromId200ResponseLicense.name) &&
        Objects.equals(this.parentid, blockIomadCompanyAdminGetLicenseFromId200ResponseLicense.parentid) &&
        Objects.equals(this.program, blockIomadCompanyAdminGetLicenseFromId200ResponseLicense.program) &&
        Objects.equals(this.reference, blockIomadCompanyAdminGetLicenseFromId200ResponseLicense.reference) &&
        Objects.equals(this.startdate, blockIomadCompanyAdminGetLicenseFromId200ResponseLicense.startdate) &&
        Objects.equals(this.type, blockIomadCompanyAdminGetLicenseFromId200ResponseLicense.type) &&
        Objects.equals(this.used, blockIomadCompanyAdminGetLicenseFromId200ResponseLicense.used) &&
        Objects.equals(this.validlength, blockIomadCompanyAdminGetLicenseFromId200ResponseLicense.validlength);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allallocated, allocation, companyid, expirydate, id, instant, name, parentid, program, reference, startdate, type, used, validlength);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BlockIomadCompanyAdminGetLicenseFromId200ResponseLicense {\n");
    sb.append("    allallocated: ").append(toIndentedString(allallocated)).append("\n");
    sb.append("    allocation: ").append(toIndentedString(allocation)).append("\n");
    sb.append("    companyid: ").append(toIndentedString(companyid)).append("\n");
    sb.append("    expirydate: ").append(toIndentedString(expirydate)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    instant: ").append(toIndentedString(instant)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    parentid: ").append(toIndentedString(parentid)).append("\n");
    sb.append("    program: ").append(toIndentedString(program)).append("\n");
    sb.append("    reference: ").append(toIndentedString(reference)).append("\n");
    sb.append("    startdate: ").append(toIndentedString(startdate)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    used: ").append(toIndentedString(used)).append("\n");
    sb.append("    validlength: ").append(toIndentedString(validlength)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allallocated");
    openapiFields.add("allocation");
    openapiFields.add("companyid");
    openapiFields.add("expirydate");
    openapiFields.add("id");
    openapiFields.add("instant");
    openapiFields.add("name");
    openapiFields.add("parentid");
    openapiFields.add("program");
    openapiFields.add("reference");
    openapiFields.add("startdate");
    openapiFields.add("type");
    openapiFields.add("used");
    openapiFields.add("validlength");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("allallocated");
    openapiRequiredFields.add("allocation");
    openapiRequiredFields.add("companyid");
    openapiRequiredFields.add("expirydate");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("instant");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("parentid");
    openapiRequiredFields.add("program");
    openapiRequiredFields.add("reference");
    openapiRequiredFields.add("startdate");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("used");
    openapiRequiredFields.add("validlength");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to BlockIomadCompanyAdminGetLicenseFromId200ResponseLicense
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BlockIomadCompanyAdminGetLicenseFromId200ResponseLicense.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BlockIomadCompanyAdminGetLicenseFromId200ResponseLicense is not found in the empty JSON string", BlockIomadCompanyAdminGetLicenseFromId200ResponseLicense.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BlockIomadCompanyAdminGetLicenseFromId200ResponseLicense.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BlockIomadCompanyAdminGetLicenseFromId200ResponseLicense` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BlockIomadCompanyAdminGetLicenseFromId200ResponseLicense.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("reference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reference").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BlockIomadCompanyAdminGetLicenseFromId200ResponseLicense.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BlockIomadCompanyAdminGetLicenseFromId200ResponseLicense' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BlockIomadCompanyAdminGetLicenseFromId200ResponseLicense> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BlockIomadCompanyAdminGetLicenseFromId200ResponseLicense.class));

       return (TypeAdapter<T>) new TypeAdapter<BlockIomadCompanyAdminGetLicenseFromId200ResponseLicense>() {
           @Override
           public void write(JsonWriter out, BlockIomadCompanyAdminGetLicenseFromId200ResponseLicense value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BlockIomadCompanyAdminGetLicenseFromId200ResponseLicense read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BlockIomadCompanyAdminGetLicenseFromId200ResponseLicense given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BlockIomadCompanyAdminGetLicenseFromId200ResponseLicense
  * @throws IOException if the JSON string is invalid with respect to BlockIomadCompanyAdminGetLicenseFromId200ResponseLicense
  */
  public static BlockIomadCompanyAdminGetLicenseFromId200ResponseLicense fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BlockIomadCompanyAdminGetLicenseFromId200ResponseLicense.class);
  }

 /**
  * Convert an instance of BlockIomadCompanyAdminGetLicenseFromId200ResponseLicense to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

