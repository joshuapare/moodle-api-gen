/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.joshuapare.JSON;

/**
 * CoreCourseSearchCoursesRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-18T20:58:28.689161-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class CoreCourseSearchCoursesRequest {
  public static final String SERIALIZED_NAME_CRITERIANAME = "criterianame";
  @SerializedName(SERIALIZED_NAME_CRITERIANAME)
  private String criterianame = "null";

  public static final String SERIALIZED_NAME_CRITERIAVALUE = "criteriavalue";
  @SerializedName(SERIALIZED_NAME_CRITERIAVALUE)
  private String criteriavalue = "null";

  public static final String SERIALIZED_NAME_LIMITTOENROLLED = "limittoenrolled";
  @SerializedName(SERIALIZED_NAME_LIMITTOENROLLED)
  private Boolean limittoenrolled = 0;

  public static final String SERIALIZED_NAME_ONLYWITHCOMPLETION = "onlywithcompletion";
  @SerializedName(SERIALIZED_NAME_ONLYWITHCOMPLETION)
  private Boolean onlywithcompletion = 0;

  public static final String SERIALIZED_NAME_PAGE = "page";
  @SerializedName(SERIALIZED_NAME_PAGE)
  private Integer page = 0;

  public static final String SERIALIZED_NAME_PERPAGE = "perpage";
  @SerializedName(SERIALIZED_NAME_PERPAGE)
  private Integer perpage = 0;

  public static final String SERIALIZED_NAME_REQUIREDCAPABILITIES = "requiredcapabilities";
  @SerializedName(SERIALIZED_NAME_REQUIREDCAPABILITIES)
  private List<Object> requiredcapabilities = new ArrayList<>();

  public CoreCourseSearchCoursesRequest() {
  }

  public CoreCourseSearchCoursesRequest criterianame(String criterianame) {
    this.criterianame = criterianame;
    return this;
  }

   /**
   * criteria name                                                         (search, modulelist (only admins), blocklist (only admins), tagid)
   * @return criterianame
  **/
  @javax.annotation.Nonnull
  public String getCriterianame() {
    return criterianame;
  }

  public void setCriterianame(String criterianame) {
    this.criterianame = criterianame;
  }


  public CoreCourseSearchCoursesRequest criteriavalue(String criteriavalue) {
    this.criteriavalue = criteriavalue;
    return this;
  }

   /**
   * criteria value
   * @return criteriavalue
  **/
  @javax.annotation.Nonnull
  public String getCriteriavalue() {
    return criteriavalue;
  }

  public void setCriteriavalue(String criteriavalue) {
    this.criteriavalue = criteriavalue;
  }


  public CoreCourseSearchCoursesRequest limittoenrolled(Boolean limittoenrolled) {
    this.limittoenrolled = limittoenrolled;
    return this;
  }

   /**
   * limit to enrolled courses
   * @return limittoenrolled
  **/
  @javax.annotation.Nullable
  public Boolean getLimittoenrolled() {
    return limittoenrolled;
  }

  public void setLimittoenrolled(Boolean limittoenrolled) {
    this.limittoenrolled = limittoenrolled;
  }


  public CoreCourseSearchCoursesRequest onlywithcompletion(Boolean onlywithcompletion) {
    this.onlywithcompletion = onlywithcompletion;
    return this;
  }

   /**
   * limit to courses where completion is enabled
   * @return onlywithcompletion
  **/
  @javax.annotation.Nullable
  public Boolean getOnlywithcompletion() {
    return onlywithcompletion;
  }

  public void setOnlywithcompletion(Boolean onlywithcompletion) {
    this.onlywithcompletion = onlywithcompletion;
  }


  public CoreCourseSearchCoursesRequest page(Integer page) {
    this.page = page;
    return this;
  }

   /**
   * page number (0 based)
   * @return page
  **/
  @javax.annotation.Nullable
  public Integer getPage() {
    return page;
  }

  public void setPage(Integer page) {
    this.page = page;
  }


  public CoreCourseSearchCoursesRequest perpage(Integer perpage) {
    this.perpage = perpage;
    return this;
  }

   /**
   * items per page
   * @return perpage
  **/
  @javax.annotation.Nullable
  public Integer getPerpage() {
    return perpage;
  }

  public void setPerpage(Integer perpage) {
    this.perpage = perpage;
  }


  public CoreCourseSearchCoursesRequest requiredcapabilities(List<Object> requiredcapabilities) {
    this.requiredcapabilities = requiredcapabilities;
    return this;
  }

  public CoreCourseSearchCoursesRequest addRequiredcapabilitiesItem(Object requiredcapabilitiesItem) {
    if (this.requiredcapabilities == null) {
      this.requiredcapabilities = new ArrayList<>();
    }
    this.requiredcapabilities.add(requiredcapabilitiesItem);
    return this;
  }

   /**
   * Get requiredcapabilities
   * @return requiredcapabilities
  **/
  @javax.annotation.Nullable
  public List<Object> getRequiredcapabilities() {
    return requiredcapabilities;
  }

  public void setRequiredcapabilities(List<Object> requiredcapabilities) {
    this.requiredcapabilities = requiredcapabilities;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CoreCourseSearchCoursesRequest coreCourseSearchCoursesRequest = (CoreCourseSearchCoursesRequest) o;
    return Objects.equals(this.criterianame, coreCourseSearchCoursesRequest.criterianame) &&
        Objects.equals(this.criteriavalue, coreCourseSearchCoursesRequest.criteriavalue) &&
        Objects.equals(this.limittoenrolled, coreCourseSearchCoursesRequest.limittoenrolled) &&
        Objects.equals(this.onlywithcompletion, coreCourseSearchCoursesRequest.onlywithcompletion) &&
        Objects.equals(this.page, coreCourseSearchCoursesRequest.page) &&
        Objects.equals(this.perpage, coreCourseSearchCoursesRequest.perpage) &&
        Objects.equals(this.requiredcapabilities, coreCourseSearchCoursesRequest.requiredcapabilities);
  }

  @Override
  public int hashCode() {
    return Objects.hash(criterianame, criteriavalue, limittoenrolled, onlywithcompletion, page, perpage, requiredcapabilities);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CoreCourseSearchCoursesRequest {\n");
    sb.append("    criterianame: ").append(toIndentedString(criterianame)).append("\n");
    sb.append("    criteriavalue: ").append(toIndentedString(criteriavalue)).append("\n");
    sb.append("    limittoenrolled: ").append(toIndentedString(limittoenrolled)).append("\n");
    sb.append("    onlywithcompletion: ").append(toIndentedString(onlywithcompletion)).append("\n");
    sb.append("    page: ").append(toIndentedString(page)).append("\n");
    sb.append("    perpage: ").append(toIndentedString(perpage)).append("\n");
    sb.append("    requiredcapabilities: ").append(toIndentedString(requiredcapabilities)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("criterianame");
    openapiFields.add("criteriavalue");
    openapiFields.add("limittoenrolled");
    openapiFields.add("onlywithcompletion");
    openapiFields.add("page");
    openapiFields.add("perpage");
    openapiFields.add("requiredcapabilities");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("criterianame");
    openapiRequiredFields.add("criteriavalue");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CoreCourseSearchCoursesRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CoreCourseSearchCoursesRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CoreCourseSearchCoursesRequest is not found in the empty JSON string", CoreCourseSearchCoursesRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CoreCourseSearchCoursesRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CoreCourseSearchCoursesRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CoreCourseSearchCoursesRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("criterianame").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `criterianame` to be a primitive type in the JSON string but got `%s`", jsonObj.get("criterianame").toString()));
      }
      if (!jsonObj.get("criteriavalue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `criteriavalue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("criteriavalue").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("requiredcapabilities") != null && !jsonObj.get("requiredcapabilities").isJsonNull() && !jsonObj.get("requiredcapabilities").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `requiredcapabilities` to be an array in the JSON string but got `%s`", jsonObj.get("requiredcapabilities").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CoreCourseSearchCoursesRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CoreCourseSearchCoursesRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CoreCourseSearchCoursesRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CoreCourseSearchCoursesRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CoreCourseSearchCoursesRequest>() {
           @Override
           public void write(JsonWriter out, CoreCourseSearchCoursesRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CoreCourseSearchCoursesRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CoreCourseSearchCoursesRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CoreCourseSearchCoursesRequest
  * @throws IOException if the JSON string is invalid with respect to CoreCourseSearchCoursesRequest
  */
  public static CoreCourseSearchCoursesRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CoreCourseSearchCoursesRequest.class);
  }

 /**
  * Convert an instance of CoreCourseSearchCoursesRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

