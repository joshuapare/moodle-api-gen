/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AuthEmailSignupUser200ResponseWarningsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.joshuapare.JSON;

/**
 * ModDataGetDataAccessInformation200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-18T14:00:07.069642-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class ModDataGetDataAccessInformation200Response {
  public static final String SERIALIZED_NAME_CANADDENTRY = "canaddentry";
  @SerializedName(SERIALIZED_NAME_CANADDENTRY)
  private Boolean canaddentry = null;

  public static final String SERIALIZED_NAME_CANAPPROVE = "canapprove";
  @SerializedName(SERIALIZED_NAME_CANAPPROVE)
  private Boolean canapprove = null;

  public static final String SERIALIZED_NAME_CANMANAGEENTRIES = "canmanageentries";
  @SerializedName(SERIALIZED_NAME_CANMANAGEENTRIES)
  private Boolean canmanageentries = null;

  public static final String SERIALIZED_NAME_ENTRIESLEFTTOADD = "entrieslefttoadd";
  @SerializedName(SERIALIZED_NAME_ENTRIESLEFTTOADD)
  private Integer entrieslefttoadd = null;

  public static final String SERIALIZED_NAME_ENTRIESLEFTTOVIEW = "entrieslefttoview";
  @SerializedName(SERIALIZED_NAME_ENTRIESLEFTTOVIEW)
  private Integer entrieslefttoview = null;

  public static final String SERIALIZED_NAME_GROUPID = "groupid";
  @SerializedName(SERIALIZED_NAME_GROUPID)
  private Integer groupid = null;

  public static final String SERIALIZED_NAME_INREADONLYPERIOD = "inreadonlyperiod";
  @SerializedName(SERIALIZED_NAME_INREADONLYPERIOD)
  private Boolean inreadonlyperiod = null;

  public static final String SERIALIZED_NAME_NUMENTRIES = "numentries";
  @SerializedName(SERIALIZED_NAME_NUMENTRIES)
  private Integer numentries = null;

  public static final String SERIALIZED_NAME_TIMEAVAILABLE = "timeavailable";
  @SerializedName(SERIALIZED_NAME_TIMEAVAILABLE)
  private Boolean timeavailable = null;

  public static final String SERIALIZED_NAME_WARNINGS = "warnings";
  @SerializedName(SERIALIZED_NAME_WARNINGS)
  private List<AuthEmailSignupUser200ResponseWarningsInner> warnings = new ArrayList<>();

  public ModDataGetDataAccessInformation200Response() {
  }

  public ModDataGetDataAccessInformation200Response canaddentry(Boolean canaddentry) {
    this.canaddentry = canaddentry;
    return this;
  }

   /**
   * Whether the user can add entries or not.
   * @return canaddentry
  **/
  @javax.annotation.Nonnull
  public Boolean getCanaddentry() {
    return canaddentry;
  }

  public void setCanaddentry(Boolean canaddentry) {
    this.canaddentry = canaddentry;
  }


  public ModDataGetDataAccessInformation200Response canapprove(Boolean canapprove) {
    this.canapprove = canapprove;
    return this;
  }

   /**
   * Whether the user can approve entries or not.
   * @return canapprove
  **/
  @javax.annotation.Nonnull
  public Boolean getCanapprove() {
    return canapprove;
  }

  public void setCanapprove(Boolean canapprove) {
    this.canapprove = canapprove;
  }


  public ModDataGetDataAccessInformation200Response canmanageentries(Boolean canmanageentries) {
    this.canmanageentries = canmanageentries;
    return this;
  }

   /**
   * Whether the user can manage entries or not.
   * @return canmanageentries
  **/
  @javax.annotation.Nonnull
  public Boolean getCanmanageentries() {
    return canmanageentries;
  }

  public void setCanmanageentries(Boolean canmanageentries) {
    this.canmanageentries = canmanageentries;
  }


  public ModDataGetDataAccessInformation200Response entrieslefttoadd(Integer entrieslefttoadd) {
    this.entrieslefttoadd = entrieslefttoadd;
    return this;
  }

   /**
   * The number of entries left to complete the activity.
   * @return entrieslefttoadd
  **/
  @javax.annotation.Nonnull
  public Integer getEntrieslefttoadd() {
    return entrieslefttoadd;
  }

  public void setEntrieslefttoadd(Integer entrieslefttoadd) {
    this.entrieslefttoadd = entrieslefttoadd;
  }


  public ModDataGetDataAccessInformation200Response entrieslefttoview(Integer entrieslefttoview) {
    this.entrieslefttoview = entrieslefttoview;
    return this;
  }

   /**
   * The number of entries left to view other users entries.
   * @return entrieslefttoview
  **/
  @javax.annotation.Nonnull
  public Integer getEntrieslefttoview() {
    return entrieslefttoview;
  }

  public void setEntrieslefttoview(Integer entrieslefttoview) {
    this.entrieslefttoview = entrieslefttoview;
  }


  public ModDataGetDataAccessInformation200Response groupid(Integer groupid) {
    this.groupid = groupid;
    return this;
  }

   /**
   * User current group id (calculated)
   * @return groupid
  **/
  @javax.annotation.Nonnull
  public Integer getGroupid() {
    return groupid;
  }

  public void setGroupid(Integer groupid) {
    this.groupid = groupid;
  }


  public ModDataGetDataAccessInformation200Response inreadonlyperiod(Boolean inreadonlyperiod) {
    this.inreadonlyperiod = inreadonlyperiod;
    return this;
  }

   /**
   * Whether the database is in read mode only.
   * @return inreadonlyperiod
  **/
  @javax.annotation.Nonnull
  public Boolean getInreadonlyperiod() {
    return inreadonlyperiod;
  }

  public void setInreadonlyperiod(Boolean inreadonlyperiod) {
    this.inreadonlyperiod = inreadonlyperiod;
  }


  public ModDataGetDataAccessInformation200Response numentries(Integer numentries) {
    this.numentries = numentries;
    return this;
  }

   /**
   * The number of entries the current user added.
   * @return numentries
  **/
  @javax.annotation.Nonnull
  public Integer getNumentries() {
    return numentries;
  }

  public void setNumentries(Integer numentries) {
    this.numentries = numentries;
  }


  public ModDataGetDataAccessInformation200Response timeavailable(Boolean timeavailable) {
    this.timeavailable = timeavailable;
    return this;
  }

   /**
   * Whether the database is available or not by time restrictions.
   * @return timeavailable
  **/
  @javax.annotation.Nonnull
  public Boolean getTimeavailable() {
    return timeavailable;
  }

  public void setTimeavailable(Boolean timeavailable) {
    this.timeavailable = timeavailable;
  }


  public ModDataGetDataAccessInformation200Response warnings(List<AuthEmailSignupUser200ResponseWarningsInner> warnings) {
    this.warnings = warnings;
    return this;
  }

  public ModDataGetDataAccessInformation200Response addWarningsItem(AuthEmailSignupUser200ResponseWarningsInner warningsItem) {
    if (this.warnings == null) {
      this.warnings = new ArrayList<>();
    }
    this.warnings.add(warningsItem);
    return this;
  }

   /**
   * Get warnings
   * @return warnings
  **/
  @javax.annotation.Nullable
  public List<AuthEmailSignupUser200ResponseWarningsInner> getWarnings() {
    return warnings;
  }

  public void setWarnings(List<AuthEmailSignupUser200ResponseWarningsInner> warnings) {
    this.warnings = warnings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModDataGetDataAccessInformation200Response modDataGetDataAccessInformation200Response = (ModDataGetDataAccessInformation200Response) o;
    return Objects.equals(this.canaddentry, modDataGetDataAccessInformation200Response.canaddentry) &&
        Objects.equals(this.canapprove, modDataGetDataAccessInformation200Response.canapprove) &&
        Objects.equals(this.canmanageentries, modDataGetDataAccessInformation200Response.canmanageentries) &&
        Objects.equals(this.entrieslefttoadd, modDataGetDataAccessInformation200Response.entrieslefttoadd) &&
        Objects.equals(this.entrieslefttoview, modDataGetDataAccessInformation200Response.entrieslefttoview) &&
        Objects.equals(this.groupid, modDataGetDataAccessInformation200Response.groupid) &&
        Objects.equals(this.inreadonlyperiod, modDataGetDataAccessInformation200Response.inreadonlyperiod) &&
        Objects.equals(this.numentries, modDataGetDataAccessInformation200Response.numentries) &&
        Objects.equals(this.timeavailable, modDataGetDataAccessInformation200Response.timeavailable) &&
        Objects.equals(this.warnings, modDataGetDataAccessInformation200Response.warnings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(canaddentry, canapprove, canmanageentries, entrieslefttoadd, entrieslefttoview, groupid, inreadonlyperiod, numentries, timeavailable, warnings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModDataGetDataAccessInformation200Response {\n");
    sb.append("    canaddentry: ").append(toIndentedString(canaddentry)).append("\n");
    sb.append("    canapprove: ").append(toIndentedString(canapprove)).append("\n");
    sb.append("    canmanageentries: ").append(toIndentedString(canmanageentries)).append("\n");
    sb.append("    entrieslefttoadd: ").append(toIndentedString(entrieslefttoadd)).append("\n");
    sb.append("    entrieslefttoview: ").append(toIndentedString(entrieslefttoview)).append("\n");
    sb.append("    groupid: ").append(toIndentedString(groupid)).append("\n");
    sb.append("    inreadonlyperiod: ").append(toIndentedString(inreadonlyperiod)).append("\n");
    sb.append("    numentries: ").append(toIndentedString(numentries)).append("\n");
    sb.append("    timeavailable: ").append(toIndentedString(timeavailable)).append("\n");
    sb.append("    warnings: ").append(toIndentedString(warnings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("canaddentry");
    openapiFields.add("canapprove");
    openapiFields.add("canmanageentries");
    openapiFields.add("entrieslefttoadd");
    openapiFields.add("entrieslefttoview");
    openapiFields.add("groupid");
    openapiFields.add("inreadonlyperiod");
    openapiFields.add("numentries");
    openapiFields.add("timeavailable");
    openapiFields.add("warnings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("canaddentry");
    openapiRequiredFields.add("canapprove");
    openapiRequiredFields.add("canmanageentries");
    openapiRequiredFields.add("entrieslefttoadd");
    openapiRequiredFields.add("entrieslefttoview");
    openapiRequiredFields.add("groupid");
    openapiRequiredFields.add("inreadonlyperiod");
    openapiRequiredFields.add("numentries");
    openapiRequiredFields.add("timeavailable");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ModDataGetDataAccessInformation200Response
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ModDataGetDataAccessInformation200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModDataGetDataAccessInformation200Response is not found in the empty JSON string", ModDataGetDataAccessInformation200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ModDataGetDataAccessInformation200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModDataGetDataAccessInformation200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ModDataGetDataAccessInformation200Response.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("warnings") != null && !jsonObj.get("warnings").isJsonNull()) {
        JsonArray jsonArraywarnings = jsonObj.getAsJsonArray("warnings");
        if (jsonArraywarnings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("warnings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `warnings` to be an array in the JSON string but got `%s`", jsonObj.get("warnings").toString()));
          }

          // validate the optional field `warnings` (array)
          for (int i = 0; i < jsonArraywarnings.size(); i++) {
            AuthEmailSignupUser200ResponseWarningsInner.validateJsonElement(jsonArraywarnings.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModDataGetDataAccessInformation200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModDataGetDataAccessInformation200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModDataGetDataAccessInformation200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModDataGetDataAccessInformation200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<ModDataGetDataAccessInformation200Response>() {
           @Override
           public void write(JsonWriter out, ModDataGetDataAccessInformation200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModDataGetDataAccessInformation200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ModDataGetDataAccessInformation200Response given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ModDataGetDataAccessInformation200Response
  * @throws IOException if the JSON string is invalid with respect to ModDataGetDataAccessInformation200Response
  */
  public static ModDataGetDataAccessInformation200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModDataGetDataAccessInformation200Response.class);
  }

 /**
  * Convert an instance of ModDataGetDataAccessInformation200Response to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

