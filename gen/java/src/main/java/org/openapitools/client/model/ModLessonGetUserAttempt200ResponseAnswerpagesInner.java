/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ModLessonGetPages200ResponsePagesInnerPage;
import org.openapitools.client.model.ModLessonGetUserAttempt200ResponseAnswerpagesInnerAnswerdata;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.joshuapare.JSON;

/**
 * ModLessonGetUserAttempt200ResponseAnswerpagesInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-18T14:00:07.069642-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class ModLessonGetUserAttempt200ResponseAnswerpagesInner {
  public static final String SERIALIZED_NAME_ANSWERDATA = "answerdata";
  @SerializedName(SERIALIZED_NAME_ANSWERDATA)
  private ModLessonGetUserAttempt200ResponseAnswerpagesInnerAnswerdata answerdata;

  public static final String SERIALIZED_NAME_CONTENTS = "contents";
  @SerializedName(SERIALIZED_NAME_CONTENTS)
  private String contents = "null";

  public static final String SERIALIZED_NAME_GRAYOUT = "grayout";
  @SerializedName(SERIALIZED_NAME_GRAYOUT)
  private Integer grayout = null;

  public static final String SERIALIZED_NAME_PAGE = "page";
  @SerializedName(SERIALIZED_NAME_PAGE)
  private ModLessonGetPages200ResponsePagesInnerPage page;

  public static final String SERIALIZED_NAME_QTYPE = "qtype";
  @SerializedName(SERIALIZED_NAME_QTYPE)
  private String qtype = "null";

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title = "null";

  public ModLessonGetUserAttempt200ResponseAnswerpagesInner() {
  }

  public ModLessonGetUserAttempt200ResponseAnswerpagesInner answerdata(ModLessonGetUserAttempt200ResponseAnswerpagesInnerAnswerdata answerdata) {
    this.answerdata = answerdata;
    return this;
  }

   /**
   * Get answerdata
   * @return answerdata
  **/
  @javax.annotation.Nullable
  public ModLessonGetUserAttempt200ResponseAnswerpagesInnerAnswerdata getAnswerdata() {
    return answerdata;
  }

  public void setAnswerdata(ModLessonGetUserAttempt200ResponseAnswerpagesInnerAnswerdata answerdata) {
    this.answerdata = answerdata;
  }


  public ModLessonGetUserAttempt200ResponseAnswerpagesInner contents(String contents) {
    this.contents = contents;
    return this;
  }

   /**
   * Page contents.
   * @return contents
  **/
  @javax.annotation.Nullable
  public String getContents() {
    return contents;
  }

  public void setContents(String contents) {
    this.contents = contents;
  }


  public ModLessonGetUserAttempt200ResponseAnswerpagesInner grayout(Integer grayout) {
    this.grayout = grayout;
    return this;
  }

   /**
   * If is required to apply a grayout.
   * @return grayout
  **/
  @javax.annotation.Nullable
  public Integer getGrayout() {
    return grayout;
  }

  public void setGrayout(Integer grayout) {
    this.grayout = grayout;
  }


  public ModLessonGetUserAttempt200ResponseAnswerpagesInner page(ModLessonGetPages200ResponsePagesInnerPage page) {
    this.page = page;
    return this;
  }

   /**
   * Get page
   * @return page
  **/
  @javax.annotation.Nullable
  public ModLessonGetPages200ResponsePagesInnerPage getPage() {
    return page;
  }

  public void setPage(ModLessonGetPages200ResponsePagesInnerPage page) {
    this.page = page;
  }


  public ModLessonGetUserAttempt200ResponseAnswerpagesInner qtype(String qtype) {
    this.qtype = qtype;
    return this;
  }

   /**
   * Identifies the page type of this page.
   * @return qtype
  **/
  @javax.annotation.Nullable
  public String getQtype() {
    return qtype;
  }

  public void setQtype(String qtype) {
    this.qtype = qtype;
  }


  public ModLessonGetUserAttempt200ResponseAnswerpagesInner title(String title) {
    this.title = title;
    return this;
  }

   /**
   * Page title.
   * @return title
  **/
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModLessonGetUserAttempt200ResponseAnswerpagesInner modLessonGetUserAttempt200ResponseAnswerpagesInner = (ModLessonGetUserAttempt200ResponseAnswerpagesInner) o;
    return Objects.equals(this.answerdata, modLessonGetUserAttempt200ResponseAnswerpagesInner.answerdata) &&
        Objects.equals(this.contents, modLessonGetUserAttempt200ResponseAnswerpagesInner.contents) &&
        Objects.equals(this.grayout, modLessonGetUserAttempt200ResponseAnswerpagesInner.grayout) &&
        Objects.equals(this.page, modLessonGetUserAttempt200ResponseAnswerpagesInner.page) &&
        Objects.equals(this.qtype, modLessonGetUserAttempt200ResponseAnswerpagesInner.qtype) &&
        Objects.equals(this.title, modLessonGetUserAttempt200ResponseAnswerpagesInner.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(answerdata, contents, grayout, page, qtype, title);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModLessonGetUserAttempt200ResponseAnswerpagesInner {\n");
    sb.append("    answerdata: ").append(toIndentedString(answerdata)).append("\n");
    sb.append("    contents: ").append(toIndentedString(contents)).append("\n");
    sb.append("    grayout: ").append(toIndentedString(grayout)).append("\n");
    sb.append("    page: ").append(toIndentedString(page)).append("\n");
    sb.append("    qtype: ").append(toIndentedString(qtype)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("answerdata");
    openapiFields.add("contents");
    openapiFields.add("grayout");
    openapiFields.add("page");
    openapiFields.add("qtype");
    openapiFields.add("title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ModLessonGetUserAttempt200ResponseAnswerpagesInner
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ModLessonGetUserAttempt200ResponseAnswerpagesInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModLessonGetUserAttempt200ResponseAnswerpagesInner is not found in the empty JSON string", ModLessonGetUserAttempt200ResponseAnswerpagesInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ModLessonGetUserAttempt200ResponseAnswerpagesInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModLessonGetUserAttempt200ResponseAnswerpagesInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `answerdata`
      if (jsonObj.get("answerdata") != null && !jsonObj.get("answerdata").isJsonNull()) {
        ModLessonGetUserAttempt200ResponseAnswerpagesInnerAnswerdata.validateJsonElement(jsonObj.get("answerdata"));
      }
      if ((jsonObj.get("contents") != null && !jsonObj.get("contents").isJsonNull()) && !jsonObj.get("contents").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contents` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contents").toString()));
      }
      // validate the optional field `page`
      if (jsonObj.get("page") != null && !jsonObj.get("page").isJsonNull()) {
        ModLessonGetPages200ResponsePagesInnerPage.validateJsonElement(jsonObj.get("page"));
      }
      if ((jsonObj.get("qtype") != null && !jsonObj.get("qtype").isJsonNull()) && !jsonObj.get("qtype").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `qtype` to be a primitive type in the JSON string but got `%s`", jsonObj.get("qtype").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModLessonGetUserAttempt200ResponseAnswerpagesInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModLessonGetUserAttempt200ResponseAnswerpagesInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModLessonGetUserAttempt200ResponseAnswerpagesInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModLessonGetUserAttempt200ResponseAnswerpagesInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ModLessonGetUserAttempt200ResponseAnswerpagesInner>() {
           @Override
           public void write(JsonWriter out, ModLessonGetUserAttempt200ResponseAnswerpagesInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModLessonGetUserAttempt200ResponseAnswerpagesInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ModLessonGetUserAttempt200ResponseAnswerpagesInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ModLessonGetUserAttempt200ResponseAnswerpagesInner
  * @throws IOException if the JSON string is invalid with respect to ModLessonGetUserAttempt200ResponseAnswerpagesInner
  */
  public static ModLessonGetUserAttempt200ResponseAnswerpagesInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModLessonGetUserAttempt200ResponseAnswerpagesInner.class);
  }

 /**
  * Convert an instance of ModLessonGetUserAttempt200ResponseAnswerpagesInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

