/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AuthEmailSignupUser200ResponseWarningsInner;
import org.openapitools.client.model.ModFeedbackGetAnalysis200ResponseItemsdataInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.joshuapare.JSON;

/**
 * ModFeedbackGetAnalysis200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-18T20:58:28.689161-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class ModFeedbackGetAnalysis200Response {
  public static final String SERIALIZED_NAME_COMPLETEDCOUNT = "completedcount";
  @SerializedName(SERIALIZED_NAME_COMPLETEDCOUNT)
  private Integer completedcount = null;

  public static final String SERIALIZED_NAME_ITEMSCOUNT = "itemscount";
  @SerializedName(SERIALIZED_NAME_ITEMSCOUNT)
  private Integer itemscount = null;

  public static final String SERIALIZED_NAME_ITEMSDATA = "itemsdata";
  @SerializedName(SERIALIZED_NAME_ITEMSDATA)
  private List<ModFeedbackGetAnalysis200ResponseItemsdataInner> itemsdata = new ArrayList<>();

  public static final String SERIALIZED_NAME_WARNINGS = "warnings";
  @SerializedName(SERIALIZED_NAME_WARNINGS)
  private List<AuthEmailSignupUser200ResponseWarningsInner> warnings = new ArrayList<>();

  public ModFeedbackGetAnalysis200Response() {
  }

  public ModFeedbackGetAnalysis200Response completedcount(Integer completedcount) {
    this.completedcount = completedcount;
    return this;
  }

   /**
   * Number of completed submissions.
   * @return completedcount
  **/
  @javax.annotation.Nonnull
  public Integer getCompletedcount() {
    return completedcount;
  }

  public void setCompletedcount(Integer completedcount) {
    this.completedcount = completedcount;
  }


  public ModFeedbackGetAnalysis200Response itemscount(Integer itemscount) {
    this.itemscount = itemscount;
    return this;
  }

   /**
   * Number of items (questions).
   * @return itemscount
  **/
  @javax.annotation.Nonnull
  public Integer getItemscount() {
    return itemscount;
  }

  public void setItemscount(Integer itemscount) {
    this.itemscount = itemscount;
  }


  public ModFeedbackGetAnalysis200Response itemsdata(List<ModFeedbackGetAnalysis200ResponseItemsdataInner> itemsdata) {
    this.itemsdata = itemsdata;
    return this;
  }

  public ModFeedbackGetAnalysis200Response addItemsdataItem(ModFeedbackGetAnalysis200ResponseItemsdataInner itemsdataItem) {
    if (this.itemsdata == null) {
      this.itemsdata = new ArrayList<>();
    }
    this.itemsdata.add(itemsdataItem);
    return this;
  }

   /**
   * Get itemsdata
   * @return itemsdata
  **/
  @javax.annotation.Nonnull
  public List<ModFeedbackGetAnalysis200ResponseItemsdataInner> getItemsdata() {
    return itemsdata;
  }

  public void setItemsdata(List<ModFeedbackGetAnalysis200ResponseItemsdataInner> itemsdata) {
    this.itemsdata = itemsdata;
  }


  public ModFeedbackGetAnalysis200Response warnings(List<AuthEmailSignupUser200ResponseWarningsInner> warnings) {
    this.warnings = warnings;
    return this;
  }

  public ModFeedbackGetAnalysis200Response addWarningsItem(AuthEmailSignupUser200ResponseWarningsInner warningsItem) {
    if (this.warnings == null) {
      this.warnings = new ArrayList<>();
    }
    this.warnings.add(warningsItem);
    return this;
  }

   /**
   * Get warnings
   * @return warnings
  **/
  @javax.annotation.Nullable
  public List<AuthEmailSignupUser200ResponseWarningsInner> getWarnings() {
    return warnings;
  }

  public void setWarnings(List<AuthEmailSignupUser200ResponseWarningsInner> warnings) {
    this.warnings = warnings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModFeedbackGetAnalysis200Response modFeedbackGetAnalysis200Response = (ModFeedbackGetAnalysis200Response) o;
    return Objects.equals(this.completedcount, modFeedbackGetAnalysis200Response.completedcount) &&
        Objects.equals(this.itemscount, modFeedbackGetAnalysis200Response.itemscount) &&
        Objects.equals(this.itemsdata, modFeedbackGetAnalysis200Response.itemsdata) &&
        Objects.equals(this.warnings, modFeedbackGetAnalysis200Response.warnings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(completedcount, itemscount, itemsdata, warnings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModFeedbackGetAnalysis200Response {\n");
    sb.append("    completedcount: ").append(toIndentedString(completedcount)).append("\n");
    sb.append("    itemscount: ").append(toIndentedString(itemscount)).append("\n");
    sb.append("    itemsdata: ").append(toIndentedString(itemsdata)).append("\n");
    sb.append("    warnings: ").append(toIndentedString(warnings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("completedcount");
    openapiFields.add("itemscount");
    openapiFields.add("itemsdata");
    openapiFields.add("warnings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("completedcount");
    openapiRequiredFields.add("itemscount");
    openapiRequiredFields.add("itemsdata");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ModFeedbackGetAnalysis200Response
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ModFeedbackGetAnalysis200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModFeedbackGetAnalysis200Response is not found in the empty JSON string", ModFeedbackGetAnalysis200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ModFeedbackGetAnalysis200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModFeedbackGetAnalysis200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ModFeedbackGetAnalysis200Response.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("itemsdata").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemsdata` to be an array in the JSON string but got `%s`", jsonObj.get("itemsdata").toString()));
      }

      JsonArray jsonArrayitemsdata = jsonObj.getAsJsonArray("itemsdata");
      // validate the required field `itemsdata` (array)
      for (int i = 0; i < jsonArrayitemsdata.size(); i++) {
        ModFeedbackGetAnalysis200ResponseItemsdataInner.validateJsonElement(jsonArrayitemsdata.get(i));
      };
      if (jsonObj.get("warnings") != null && !jsonObj.get("warnings").isJsonNull()) {
        JsonArray jsonArraywarnings = jsonObj.getAsJsonArray("warnings");
        if (jsonArraywarnings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("warnings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `warnings` to be an array in the JSON string but got `%s`", jsonObj.get("warnings").toString()));
          }

          // validate the optional field `warnings` (array)
          for (int i = 0; i < jsonArraywarnings.size(); i++) {
            AuthEmailSignupUser200ResponseWarningsInner.validateJsonElement(jsonArraywarnings.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModFeedbackGetAnalysis200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModFeedbackGetAnalysis200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModFeedbackGetAnalysis200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModFeedbackGetAnalysis200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<ModFeedbackGetAnalysis200Response>() {
           @Override
           public void write(JsonWriter out, ModFeedbackGetAnalysis200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModFeedbackGetAnalysis200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ModFeedbackGetAnalysis200Response given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ModFeedbackGetAnalysis200Response
  * @throws IOException if the JSON string is invalid with respect to ModFeedbackGetAnalysis200Response
  */
  public static ModFeedbackGetAnalysis200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModFeedbackGetAnalysis200Response.class);
  }

 /**
  * Convert an instance of ModFeedbackGetAnalysis200Response to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

