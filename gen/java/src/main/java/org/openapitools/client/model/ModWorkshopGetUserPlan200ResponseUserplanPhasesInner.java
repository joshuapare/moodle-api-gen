/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ModWorkshopGetUserPlan200ResponseUserplanPhasesInnerActionsInner;
import org.openapitools.client.model.ModWorkshopGetUserPlan200ResponseUserplanPhasesInnerTasksInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.joshuapare.JSON;

/**
 * ModWorkshopGetUserPlan200ResponseUserplanPhasesInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-18T14:00:07.069642-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class ModWorkshopGetUserPlan200ResponseUserplanPhasesInner {
  public static final String SERIALIZED_NAME_ACTIONS = "actions";
  @SerializedName(SERIALIZED_NAME_ACTIONS)
  private List<ModWorkshopGetUserPlan200ResponseUserplanPhasesInnerActionsInner> actions = new ArrayList<>();

  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active = null;

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private Integer code = null;

  public static final String SERIALIZED_NAME_TASKS = "tasks";
  @SerializedName(SERIALIZED_NAME_TASKS)
  private List<ModWorkshopGetUserPlan200ResponseUserplanPhasesInnerTasksInner> tasks = new ArrayList<>();

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title = "null";

  public ModWorkshopGetUserPlan200ResponseUserplanPhasesInner() {
  }

  public ModWorkshopGetUserPlan200ResponseUserplanPhasesInner actions(List<ModWorkshopGetUserPlan200ResponseUserplanPhasesInnerActionsInner> actions) {
    this.actions = actions;
    return this;
  }

  public ModWorkshopGetUserPlan200ResponseUserplanPhasesInner addActionsItem(ModWorkshopGetUserPlan200ResponseUserplanPhasesInnerActionsInner actionsItem) {
    if (this.actions == null) {
      this.actions = new ArrayList<>();
    }
    this.actions.add(actionsItem);
    return this;
  }

   /**
   * Get actions
   * @return actions
  **/
  @javax.annotation.Nullable
  public List<ModWorkshopGetUserPlan200ResponseUserplanPhasesInnerActionsInner> getActions() {
    return actions;
  }

  public void setActions(List<ModWorkshopGetUserPlan200ResponseUserplanPhasesInnerActionsInner> actions) {
    this.actions = actions;
  }


  public ModWorkshopGetUserPlan200ResponseUserplanPhasesInner active(Boolean active) {
    this.active = active;
    return this;
  }

   /**
   * Whether is the active task.
   * @return active
  **/
  @javax.annotation.Nullable
  public Boolean getActive() {
    return active;
  }

  public void setActive(Boolean active) {
    this.active = active;
  }


  public ModWorkshopGetUserPlan200ResponseUserplanPhasesInner code(Integer code) {
    this.code = code;
    return this;
  }

   /**
   * Phase code.
   * @return code
  **/
  @javax.annotation.Nullable
  public Integer getCode() {
    return code;
  }

  public void setCode(Integer code) {
    this.code = code;
  }


  public ModWorkshopGetUserPlan200ResponseUserplanPhasesInner tasks(List<ModWorkshopGetUserPlan200ResponseUserplanPhasesInnerTasksInner> tasks) {
    this.tasks = tasks;
    return this;
  }

  public ModWorkshopGetUserPlan200ResponseUserplanPhasesInner addTasksItem(ModWorkshopGetUserPlan200ResponseUserplanPhasesInnerTasksInner tasksItem) {
    if (this.tasks == null) {
      this.tasks = new ArrayList<>();
    }
    this.tasks.add(tasksItem);
    return this;
  }

   /**
   * Get tasks
   * @return tasks
  **/
  @javax.annotation.Nullable
  public List<ModWorkshopGetUserPlan200ResponseUserplanPhasesInnerTasksInner> getTasks() {
    return tasks;
  }

  public void setTasks(List<ModWorkshopGetUserPlan200ResponseUserplanPhasesInnerTasksInner> tasks) {
    this.tasks = tasks;
  }


  public ModWorkshopGetUserPlan200ResponseUserplanPhasesInner title(String title) {
    this.title = title;
    return this;
  }

   /**
   * Phase title.
   * @return title
  **/
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModWorkshopGetUserPlan200ResponseUserplanPhasesInner modWorkshopGetUserPlan200ResponseUserplanPhasesInner = (ModWorkshopGetUserPlan200ResponseUserplanPhasesInner) o;
    return Objects.equals(this.actions, modWorkshopGetUserPlan200ResponseUserplanPhasesInner.actions) &&
        Objects.equals(this.active, modWorkshopGetUserPlan200ResponseUserplanPhasesInner.active) &&
        Objects.equals(this.code, modWorkshopGetUserPlan200ResponseUserplanPhasesInner.code) &&
        Objects.equals(this.tasks, modWorkshopGetUserPlan200ResponseUserplanPhasesInner.tasks) &&
        Objects.equals(this.title, modWorkshopGetUserPlan200ResponseUserplanPhasesInner.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actions, active, code, tasks, title);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModWorkshopGetUserPlan200ResponseUserplanPhasesInner {\n");
    sb.append("    actions: ").append(toIndentedString(actions)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    tasks: ").append(toIndentedString(tasks)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("actions");
    openapiFields.add("active");
    openapiFields.add("code");
    openapiFields.add("tasks");
    openapiFields.add("title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ModWorkshopGetUserPlan200ResponseUserplanPhasesInner
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ModWorkshopGetUserPlan200ResponseUserplanPhasesInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModWorkshopGetUserPlan200ResponseUserplanPhasesInner is not found in the empty JSON string", ModWorkshopGetUserPlan200ResponseUserplanPhasesInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ModWorkshopGetUserPlan200ResponseUserplanPhasesInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModWorkshopGetUserPlan200ResponseUserplanPhasesInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("actions") != null && !jsonObj.get("actions").isJsonNull()) {
        JsonArray jsonArrayactions = jsonObj.getAsJsonArray("actions");
        if (jsonArrayactions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("actions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `actions` to be an array in the JSON string but got `%s`", jsonObj.get("actions").toString()));
          }

          // validate the optional field `actions` (array)
          for (int i = 0; i < jsonArrayactions.size(); i++) {
            ModWorkshopGetUserPlan200ResponseUserplanPhasesInnerActionsInner.validateJsonElement(jsonArrayactions.get(i));
          };
        }
      }
      if (jsonObj.get("tasks") != null && !jsonObj.get("tasks").isJsonNull()) {
        JsonArray jsonArraytasks = jsonObj.getAsJsonArray("tasks");
        if (jsonArraytasks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tasks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tasks` to be an array in the JSON string but got `%s`", jsonObj.get("tasks").toString()));
          }

          // validate the optional field `tasks` (array)
          for (int i = 0; i < jsonArraytasks.size(); i++) {
            ModWorkshopGetUserPlan200ResponseUserplanPhasesInnerTasksInner.validateJsonElement(jsonArraytasks.get(i));
          };
        }
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModWorkshopGetUserPlan200ResponseUserplanPhasesInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModWorkshopGetUserPlan200ResponseUserplanPhasesInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModWorkshopGetUserPlan200ResponseUserplanPhasesInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModWorkshopGetUserPlan200ResponseUserplanPhasesInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ModWorkshopGetUserPlan200ResponseUserplanPhasesInner>() {
           @Override
           public void write(JsonWriter out, ModWorkshopGetUserPlan200ResponseUserplanPhasesInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModWorkshopGetUserPlan200ResponseUserplanPhasesInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ModWorkshopGetUserPlan200ResponseUserplanPhasesInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ModWorkshopGetUserPlan200ResponseUserplanPhasesInner
  * @throws IOException if the JSON string is invalid with respect to ModWorkshopGetUserPlan200ResponseUserplanPhasesInner
  */
  public static ModWorkshopGetUserPlan200ResponseUserplanPhasesInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModWorkshopGetUserPlan200ResponseUserplanPhasesInner.class);
  }

 /**
  * Convert an instance of ModWorkshopGetUserPlan200ResponseUserplanPhasesInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

