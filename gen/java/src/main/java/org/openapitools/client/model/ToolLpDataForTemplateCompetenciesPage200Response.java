/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CoreCompetencyCreateTemplate200Response;
import org.openapitools.client.model.ToolLpDataForTemplateCompetenciesPage200ResponseCompetenciesInner;
import org.openapitools.client.model.ToolLpDataForTemplateCompetenciesPage200ResponseStatistics;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.joshuapare.JSON;

/**
 * ToolLpDataForTemplateCompetenciesPage200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-18T14:00:07.069642-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class ToolLpDataForTemplateCompetenciesPage200Response {
  public static final String SERIALIZED_NAME_CANMANAGECOMPETENCYFRAMEWORKS = "canmanagecompetencyframeworks";
  @SerializedName(SERIALIZED_NAME_CANMANAGECOMPETENCYFRAMEWORKS)
  private Boolean canmanagecompetencyframeworks;

  public static final String SERIALIZED_NAME_CANMANAGETEMPLATECOMPETENCIES = "canmanagetemplatecompetencies";
  @SerializedName(SERIALIZED_NAME_CANMANAGETEMPLATECOMPETENCIES)
  private Boolean canmanagetemplatecompetencies = null;

  public static final String SERIALIZED_NAME_COMPETENCIES = "competencies";
  @SerializedName(SERIALIZED_NAME_COMPETENCIES)
  private List<ToolLpDataForTemplateCompetenciesPage200ResponseCompetenciesInner> competencies = new ArrayList<>();

  public static final String SERIALIZED_NAME_MANAGEURL = "manageurl";
  @SerializedName(SERIALIZED_NAME_MANAGEURL)
  private String manageurl;

  public static final String SERIALIZED_NAME_PAGECONTEXTID = "pagecontextid";
  @SerializedName(SERIALIZED_NAME_PAGECONTEXTID)
  private Integer pagecontextid;

  public static final String SERIALIZED_NAME_PLUGINBASEURL = "pluginbaseurl";
  @SerializedName(SERIALIZED_NAME_PLUGINBASEURL)
  private String pluginbaseurl = "null";

  public static final String SERIALIZED_NAME_STATISTICS = "statistics";
  @SerializedName(SERIALIZED_NAME_STATISTICS)
  private ToolLpDataForTemplateCompetenciesPage200ResponseStatistics statistics;

  public static final String SERIALIZED_NAME_TEMPLATE = "template";
  @SerializedName(SERIALIZED_NAME_TEMPLATE)
  private CoreCompetencyCreateTemplate200Response template;

  public ToolLpDataForTemplateCompetenciesPage200Response() {
  }

  public ToolLpDataForTemplateCompetenciesPage200Response canmanagecompetencyframeworks(Boolean canmanagecompetencyframeworks) {
    this.canmanagecompetencyframeworks = canmanagecompetencyframeworks;
    return this;
  }

   /**
   * User can manage competency frameworks
   * @return canmanagecompetencyframeworks
  **/
  @javax.annotation.Nonnull
  public Boolean getCanmanagecompetencyframeworks() {
    return canmanagecompetencyframeworks;
  }

  public void setCanmanagecompetencyframeworks(Boolean canmanagecompetencyframeworks) {
    this.canmanagecompetencyframeworks = canmanagecompetencyframeworks;
  }


  public ToolLpDataForTemplateCompetenciesPage200Response canmanagetemplatecompetencies(Boolean canmanagetemplatecompetencies) {
    this.canmanagetemplatecompetencies = canmanagetemplatecompetencies;
    return this;
  }

   /**
   * User can manage learning plan templates
   * @return canmanagetemplatecompetencies
  **/
  @javax.annotation.Nonnull
  public Boolean getCanmanagetemplatecompetencies() {
    return canmanagetemplatecompetencies;
  }

  public void setCanmanagetemplatecompetencies(Boolean canmanagetemplatecompetencies) {
    this.canmanagetemplatecompetencies = canmanagetemplatecompetencies;
  }


  public ToolLpDataForTemplateCompetenciesPage200Response competencies(List<ToolLpDataForTemplateCompetenciesPage200ResponseCompetenciesInner> competencies) {
    this.competencies = competencies;
    return this;
  }

  public ToolLpDataForTemplateCompetenciesPage200Response addCompetenciesItem(ToolLpDataForTemplateCompetenciesPage200ResponseCompetenciesInner competenciesItem) {
    if (this.competencies == null) {
      this.competencies = new ArrayList<>();
    }
    this.competencies.add(competenciesItem);
    return this;
  }

   /**
   * Get competencies
   * @return competencies
  **/
  @javax.annotation.Nonnull
  public List<ToolLpDataForTemplateCompetenciesPage200ResponseCompetenciesInner> getCompetencies() {
    return competencies;
  }

  public void setCompetencies(List<ToolLpDataForTemplateCompetenciesPage200ResponseCompetenciesInner> competencies) {
    this.competencies = competencies;
  }


  public ToolLpDataForTemplateCompetenciesPage200Response manageurl(String manageurl) {
    this.manageurl = manageurl;
    return this;
  }

   /**
   * Url to the manage competencies page.
   * @return manageurl
  **/
  @javax.annotation.Nonnull
  public String getManageurl() {
    return manageurl;
  }

  public void setManageurl(String manageurl) {
    this.manageurl = manageurl;
  }


  public ToolLpDataForTemplateCompetenciesPage200Response pagecontextid(Integer pagecontextid) {
    this.pagecontextid = pagecontextid;
    return this;
  }

   /**
   * Context ID
   * @return pagecontextid
  **/
  @javax.annotation.Nonnull
  public Integer getPagecontextid() {
    return pagecontextid;
  }

  public void setPagecontextid(Integer pagecontextid) {
    this.pagecontextid = pagecontextid;
  }


  public ToolLpDataForTemplateCompetenciesPage200Response pluginbaseurl(String pluginbaseurl) {
    this.pluginbaseurl = pluginbaseurl;
    return this;
  }

   /**
   * Base URL of the plugin.
   * @return pluginbaseurl
  **/
  @javax.annotation.Nonnull
  public String getPluginbaseurl() {
    return pluginbaseurl;
  }

  public void setPluginbaseurl(String pluginbaseurl) {
    this.pluginbaseurl = pluginbaseurl;
  }


  public ToolLpDataForTemplateCompetenciesPage200Response statistics(ToolLpDataForTemplateCompetenciesPage200ResponseStatistics statistics) {
    this.statistics = statistics;
    return this;
  }

   /**
   * Get statistics
   * @return statistics
  **/
  @javax.annotation.Nonnull
  public ToolLpDataForTemplateCompetenciesPage200ResponseStatistics getStatistics() {
    return statistics;
  }

  public void setStatistics(ToolLpDataForTemplateCompetenciesPage200ResponseStatistics statistics) {
    this.statistics = statistics;
  }


  public ToolLpDataForTemplateCompetenciesPage200Response template(CoreCompetencyCreateTemplate200Response template) {
    this.template = template;
    return this;
  }

   /**
   * Get template
   * @return template
  **/
  @javax.annotation.Nonnull
  public CoreCompetencyCreateTemplate200Response getTemplate() {
    return template;
  }

  public void setTemplate(CoreCompetencyCreateTemplate200Response template) {
    this.template = template;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ToolLpDataForTemplateCompetenciesPage200Response toolLpDataForTemplateCompetenciesPage200Response = (ToolLpDataForTemplateCompetenciesPage200Response) o;
    return Objects.equals(this.canmanagecompetencyframeworks, toolLpDataForTemplateCompetenciesPage200Response.canmanagecompetencyframeworks) &&
        Objects.equals(this.canmanagetemplatecompetencies, toolLpDataForTemplateCompetenciesPage200Response.canmanagetemplatecompetencies) &&
        Objects.equals(this.competencies, toolLpDataForTemplateCompetenciesPage200Response.competencies) &&
        Objects.equals(this.manageurl, toolLpDataForTemplateCompetenciesPage200Response.manageurl) &&
        Objects.equals(this.pagecontextid, toolLpDataForTemplateCompetenciesPage200Response.pagecontextid) &&
        Objects.equals(this.pluginbaseurl, toolLpDataForTemplateCompetenciesPage200Response.pluginbaseurl) &&
        Objects.equals(this.statistics, toolLpDataForTemplateCompetenciesPage200Response.statistics) &&
        Objects.equals(this.template, toolLpDataForTemplateCompetenciesPage200Response.template);
  }

  @Override
  public int hashCode() {
    return Objects.hash(canmanagecompetencyframeworks, canmanagetemplatecompetencies, competencies, manageurl, pagecontextid, pluginbaseurl, statistics, template);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ToolLpDataForTemplateCompetenciesPage200Response {\n");
    sb.append("    canmanagecompetencyframeworks: ").append(toIndentedString(canmanagecompetencyframeworks)).append("\n");
    sb.append("    canmanagetemplatecompetencies: ").append(toIndentedString(canmanagetemplatecompetencies)).append("\n");
    sb.append("    competencies: ").append(toIndentedString(competencies)).append("\n");
    sb.append("    manageurl: ").append(toIndentedString(manageurl)).append("\n");
    sb.append("    pagecontextid: ").append(toIndentedString(pagecontextid)).append("\n");
    sb.append("    pluginbaseurl: ").append(toIndentedString(pluginbaseurl)).append("\n");
    sb.append("    statistics: ").append(toIndentedString(statistics)).append("\n");
    sb.append("    template: ").append(toIndentedString(template)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("canmanagecompetencyframeworks");
    openapiFields.add("canmanagetemplatecompetencies");
    openapiFields.add("competencies");
    openapiFields.add("manageurl");
    openapiFields.add("pagecontextid");
    openapiFields.add("pluginbaseurl");
    openapiFields.add("statistics");
    openapiFields.add("template");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("canmanagecompetencyframeworks");
    openapiRequiredFields.add("canmanagetemplatecompetencies");
    openapiRequiredFields.add("competencies");
    openapiRequiredFields.add("manageurl");
    openapiRequiredFields.add("pagecontextid");
    openapiRequiredFields.add("pluginbaseurl");
    openapiRequiredFields.add("statistics");
    openapiRequiredFields.add("template");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ToolLpDataForTemplateCompetenciesPage200Response
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ToolLpDataForTemplateCompetenciesPage200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ToolLpDataForTemplateCompetenciesPage200Response is not found in the empty JSON string", ToolLpDataForTemplateCompetenciesPage200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ToolLpDataForTemplateCompetenciesPage200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ToolLpDataForTemplateCompetenciesPage200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ToolLpDataForTemplateCompetenciesPage200Response.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("competencies").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `competencies` to be an array in the JSON string but got `%s`", jsonObj.get("competencies").toString()));
      }

      JsonArray jsonArraycompetencies = jsonObj.getAsJsonArray("competencies");
      // validate the required field `competencies` (array)
      for (int i = 0; i < jsonArraycompetencies.size(); i++) {
        ToolLpDataForTemplateCompetenciesPage200ResponseCompetenciesInner.validateJsonElement(jsonArraycompetencies.get(i));
      };
      if (!jsonObj.get("manageurl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `manageurl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("manageurl").toString()));
      }
      if (!jsonObj.get("pluginbaseurl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pluginbaseurl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pluginbaseurl").toString()));
      }
      // validate the required field `statistics`
      ToolLpDataForTemplateCompetenciesPage200ResponseStatistics.validateJsonElement(jsonObj.get("statistics"));
      // validate the required field `template`
      CoreCompetencyCreateTemplate200Response.validateJsonElement(jsonObj.get("template"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ToolLpDataForTemplateCompetenciesPage200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ToolLpDataForTemplateCompetenciesPage200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ToolLpDataForTemplateCompetenciesPage200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ToolLpDataForTemplateCompetenciesPage200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<ToolLpDataForTemplateCompetenciesPage200Response>() {
           @Override
           public void write(JsonWriter out, ToolLpDataForTemplateCompetenciesPage200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ToolLpDataForTemplateCompetenciesPage200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ToolLpDataForTemplateCompetenciesPage200Response given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ToolLpDataForTemplateCompetenciesPage200Response
  * @throws IOException if the JSON string is invalid with respect to ToolLpDataForTemplateCompetenciesPage200Response
  */
  public static ToolLpDataForTemplateCompetenciesPage200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ToolLpDataForTemplateCompetenciesPage200Response.class);
  }

 /**
  * Convert an instance of ToolLpDataForTemplateCompetenciesPage200Response to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

