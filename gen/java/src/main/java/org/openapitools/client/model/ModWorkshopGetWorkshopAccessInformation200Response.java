/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AuthEmailSignupUser200ResponseWarningsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.joshuapare.JSON;

/**
 * ModWorkshopGetWorkshopAccessInformation200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-18T14:00:07.069642-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class ModWorkshopGetWorkshopAccessInformation200Response {
  public static final String SERIALIZED_NAME_ASSESSINGALLOWED = "assessingallowed";
  @SerializedName(SERIALIZED_NAME_ASSESSINGALLOWED)
  private Boolean assessingallowed = null;

  public static final String SERIALIZED_NAME_ASSESSINGEXAMPLESALLOWED = "assessingexamplesallowed";
  @SerializedName(SERIALIZED_NAME_ASSESSINGEXAMPLESALLOWED)
  private Boolean assessingexamplesallowed = null;

  public static final String SERIALIZED_NAME_CANADDINSTANCE = "canaddinstance";
  @SerializedName(SERIALIZED_NAME_CANADDINSTANCE)
  private Boolean canaddinstance = null;

  public static final String SERIALIZED_NAME_CANALLOCATE = "canallocate";
  @SerializedName(SERIALIZED_NAME_CANALLOCATE)
  private Boolean canallocate = null;

  public static final String SERIALIZED_NAME_CANDELETESUBMISSIONS = "candeletesubmissions";
  @SerializedName(SERIALIZED_NAME_CANDELETESUBMISSIONS)
  private Boolean candeletesubmissions = null;

  public static final String SERIALIZED_NAME_CANEDITDIMENSIONS = "caneditdimensions";
  @SerializedName(SERIALIZED_NAME_CANEDITDIMENSIONS)
  private Boolean caneditdimensions = null;

  public static final String SERIALIZED_NAME_CANEXPORTSUBMISSIONS = "canexportsubmissions";
  @SerializedName(SERIALIZED_NAME_CANEXPORTSUBMISSIONS)
  private Boolean canexportsubmissions = null;

  public static final String SERIALIZED_NAME_CANIGNOREDEADLINES = "canignoredeadlines";
  @SerializedName(SERIALIZED_NAME_CANIGNOREDEADLINES)
  private Boolean canignoredeadlines = null;

  public static final String SERIALIZED_NAME_CANMANAGEEXAMPLES = "canmanageexamples";
  @SerializedName(SERIALIZED_NAME_CANMANAGEEXAMPLES)
  private Boolean canmanageexamples = null;

  public static final String SERIALIZED_NAME_CANOVERRIDEGRADES = "canoverridegrades";
  @SerializedName(SERIALIZED_NAME_CANOVERRIDEGRADES)
  private Boolean canoverridegrades = null;

  public static final String SERIALIZED_NAME_CANPEERASSESS = "canpeerassess";
  @SerializedName(SERIALIZED_NAME_CANPEERASSESS)
  private Boolean canpeerassess = null;

  public static final String SERIALIZED_NAME_CANPUBLISHSUBMISSIONS = "canpublishsubmissions";
  @SerializedName(SERIALIZED_NAME_CANPUBLISHSUBMISSIONS)
  private Boolean canpublishsubmissions = null;

  public static final String SERIALIZED_NAME_CANSUBMIT = "cansubmit";
  @SerializedName(SERIALIZED_NAME_CANSUBMIT)
  private Boolean cansubmit = null;

  public static final String SERIALIZED_NAME_CANSWITCHPHASE = "canswitchphase";
  @SerializedName(SERIALIZED_NAME_CANSWITCHPHASE)
  private Boolean canswitchphase = null;

  public static final String SERIALIZED_NAME_CANVIEW = "canview";
  @SerializedName(SERIALIZED_NAME_CANVIEW)
  private Boolean canview = null;

  public static final String SERIALIZED_NAME_CANVIEWALLASSESSMENTS = "canviewallassessments";
  @SerializedName(SERIALIZED_NAME_CANVIEWALLASSESSMENTS)
  private Boolean canviewallassessments = null;

  public static final String SERIALIZED_NAME_CANVIEWALLSUBMISSIONS = "canviewallsubmissions";
  @SerializedName(SERIALIZED_NAME_CANVIEWALLSUBMISSIONS)
  private Boolean canviewallsubmissions = null;

  public static final String SERIALIZED_NAME_CANVIEWAUTHORNAMES = "canviewauthornames";
  @SerializedName(SERIALIZED_NAME_CANVIEWAUTHORNAMES)
  private Boolean canviewauthornames = null;

  public static final String SERIALIZED_NAME_CANVIEWAUTHORPUBLISHED = "canviewauthorpublished";
  @SerializedName(SERIALIZED_NAME_CANVIEWAUTHORPUBLISHED)
  private Boolean canviewauthorpublished = null;

  public static final String SERIALIZED_NAME_CANVIEWPUBLISHEDSUBMISSIONS = "canviewpublishedsubmissions";
  @SerializedName(SERIALIZED_NAME_CANVIEWPUBLISHEDSUBMISSIONS)
  private Boolean canviewpublishedsubmissions = null;

  public static final String SERIALIZED_NAME_CANVIEWREVIEWERNAMES = "canviewreviewernames";
  @SerializedName(SERIALIZED_NAME_CANVIEWREVIEWERNAMES)
  private Boolean canviewreviewernames = null;

  public static final String SERIALIZED_NAME_CREATINGSUBMISSIONALLOWED = "creatingsubmissionallowed";
  @SerializedName(SERIALIZED_NAME_CREATINGSUBMISSIONALLOWED)
  private Boolean creatingsubmissionallowed = null;

  public static final String SERIALIZED_NAME_EXAMPLESASSESSEDBEFOREASSESSMENT = "examplesassessedbeforeassessment";
  @SerializedName(SERIALIZED_NAME_EXAMPLESASSESSEDBEFOREASSESSMENT)
  private Boolean examplesassessedbeforeassessment = null;

  public static final String SERIALIZED_NAME_EXAMPLESASSESSEDBEFORESUBMISSION = "examplesassessedbeforesubmission";
  @SerializedName(SERIALIZED_NAME_EXAMPLESASSESSEDBEFORESUBMISSION)
  private Boolean examplesassessedbeforesubmission = null;

  public static final String SERIALIZED_NAME_MODIFYINGSUBMISSIONALLOWED = "modifyingsubmissionallowed";
  @SerializedName(SERIALIZED_NAME_MODIFYINGSUBMISSIONALLOWED)
  private Boolean modifyingsubmissionallowed = null;

  public static final String SERIALIZED_NAME_WARNINGS = "warnings";
  @SerializedName(SERIALIZED_NAME_WARNINGS)
  private List<AuthEmailSignupUser200ResponseWarningsInner> warnings = new ArrayList<>();

  public ModWorkshopGetWorkshopAccessInformation200Response() {
  }

  public ModWorkshopGetWorkshopAccessInformation200Response assessingallowed(Boolean assessingallowed) {
    this.assessingallowed = assessingallowed;
    return this;
  }

   /**
   * Is the user allowed to create/edit his assessments?
   * @return assessingallowed
  **/
  @javax.annotation.Nonnull
  public Boolean getAssessingallowed() {
    return assessingallowed;
  }

  public void setAssessingallowed(Boolean assessingallowed) {
    this.assessingallowed = assessingallowed;
  }


  public ModWorkshopGetWorkshopAccessInformation200Response assessingexamplesallowed(Boolean assessingexamplesallowed) {
    this.assessingexamplesallowed = assessingexamplesallowed;
    return this;
  }

   /**
   * Are reviewers allowed to create/edit their assessments of the example submissions?.
   * @return assessingexamplesallowed
  **/
  @javax.annotation.Nonnull
  public Boolean getAssessingexamplesallowed() {
    return assessingexamplesallowed;
  }

  public void setAssessingexamplesallowed(Boolean assessingexamplesallowed) {
    this.assessingexamplesallowed = assessingexamplesallowed;
  }


  public ModWorkshopGetWorkshopAccessInformation200Response canaddinstance(Boolean canaddinstance) {
    this.canaddinstance = canaddinstance;
    return this;
  }

   /**
   * Whether the user has the capability mod/workshop:addinstance allowed.
   * @return canaddinstance
  **/
  @javax.annotation.Nonnull
  public Boolean getCanaddinstance() {
    return canaddinstance;
  }

  public void setCanaddinstance(Boolean canaddinstance) {
    this.canaddinstance = canaddinstance;
  }


  public ModWorkshopGetWorkshopAccessInformation200Response canallocate(Boolean canallocate) {
    this.canallocate = canallocate;
    return this;
  }

   /**
   * Whether the user has the capability mod/workshop:allocate allowed.
   * @return canallocate
  **/
  @javax.annotation.Nonnull
  public Boolean getCanallocate() {
    return canallocate;
  }

  public void setCanallocate(Boolean canallocate) {
    this.canallocate = canallocate;
  }


  public ModWorkshopGetWorkshopAccessInformation200Response candeletesubmissions(Boolean candeletesubmissions) {
    this.candeletesubmissions = candeletesubmissions;
    return this;
  }

   /**
   * Whether the user has the capability mod/workshop:deletesubmissions allowed.
   * @return candeletesubmissions
  **/
  @javax.annotation.Nonnull
  public Boolean getCandeletesubmissions() {
    return candeletesubmissions;
  }

  public void setCandeletesubmissions(Boolean candeletesubmissions) {
    this.candeletesubmissions = candeletesubmissions;
  }


  public ModWorkshopGetWorkshopAccessInformation200Response caneditdimensions(Boolean caneditdimensions) {
    this.caneditdimensions = caneditdimensions;
    return this;
  }

   /**
   * Whether the user has the capability mod/workshop:editdimensions allowed.
   * @return caneditdimensions
  **/
  @javax.annotation.Nonnull
  public Boolean getCaneditdimensions() {
    return caneditdimensions;
  }

  public void setCaneditdimensions(Boolean caneditdimensions) {
    this.caneditdimensions = caneditdimensions;
  }


  public ModWorkshopGetWorkshopAccessInformation200Response canexportsubmissions(Boolean canexportsubmissions) {
    this.canexportsubmissions = canexportsubmissions;
    return this;
  }

   /**
   * Whether the user has the capability mod/workshop:exportsubmissions allowed.
   * @return canexportsubmissions
  **/
  @javax.annotation.Nonnull
  public Boolean getCanexportsubmissions() {
    return canexportsubmissions;
  }

  public void setCanexportsubmissions(Boolean canexportsubmissions) {
    this.canexportsubmissions = canexportsubmissions;
  }


  public ModWorkshopGetWorkshopAccessInformation200Response canignoredeadlines(Boolean canignoredeadlines) {
    this.canignoredeadlines = canignoredeadlines;
    return this;
  }

   /**
   * Whether the user has the capability mod/workshop:ignoredeadlines allowed.
   * @return canignoredeadlines
  **/
  @javax.annotation.Nonnull
  public Boolean getCanignoredeadlines() {
    return canignoredeadlines;
  }

  public void setCanignoredeadlines(Boolean canignoredeadlines) {
    this.canignoredeadlines = canignoredeadlines;
  }


  public ModWorkshopGetWorkshopAccessInformation200Response canmanageexamples(Boolean canmanageexamples) {
    this.canmanageexamples = canmanageexamples;
    return this;
  }

   /**
   * Whether the user has the capability mod/workshop:manageexamples allowed.
   * @return canmanageexamples
  **/
  @javax.annotation.Nonnull
  public Boolean getCanmanageexamples() {
    return canmanageexamples;
  }

  public void setCanmanageexamples(Boolean canmanageexamples) {
    this.canmanageexamples = canmanageexamples;
  }


  public ModWorkshopGetWorkshopAccessInformation200Response canoverridegrades(Boolean canoverridegrades) {
    this.canoverridegrades = canoverridegrades;
    return this;
  }

   /**
   * Whether the user has the capability mod/workshop:overridegrades allowed.
   * @return canoverridegrades
  **/
  @javax.annotation.Nonnull
  public Boolean getCanoverridegrades() {
    return canoverridegrades;
  }

  public void setCanoverridegrades(Boolean canoverridegrades) {
    this.canoverridegrades = canoverridegrades;
  }


  public ModWorkshopGetWorkshopAccessInformation200Response canpeerassess(Boolean canpeerassess) {
    this.canpeerassess = canpeerassess;
    return this;
  }

   /**
   * Whether the user has the capability mod/workshop:peerassess allowed.
   * @return canpeerassess
  **/
  @javax.annotation.Nonnull
  public Boolean getCanpeerassess() {
    return canpeerassess;
  }

  public void setCanpeerassess(Boolean canpeerassess) {
    this.canpeerassess = canpeerassess;
  }


  public ModWorkshopGetWorkshopAccessInformation200Response canpublishsubmissions(Boolean canpublishsubmissions) {
    this.canpublishsubmissions = canpublishsubmissions;
    return this;
  }

   /**
   * Whether the user has the capability mod/workshop:publishsubmissions allowed.
   * @return canpublishsubmissions
  **/
  @javax.annotation.Nonnull
  public Boolean getCanpublishsubmissions() {
    return canpublishsubmissions;
  }

  public void setCanpublishsubmissions(Boolean canpublishsubmissions) {
    this.canpublishsubmissions = canpublishsubmissions;
  }


  public ModWorkshopGetWorkshopAccessInformation200Response cansubmit(Boolean cansubmit) {
    this.cansubmit = cansubmit;
    return this;
  }

   /**
   * Whether the user has the capability mod/workshop:submit allowed.
   * @return cansubmit
  **/
  @javax.annotation.Nonnull
  public Boolean getCansubmit() {
    return cansubmit;
  }

  public void setCansubmit(Boolean cansubmit) {
    this.cansubmit = cansubmit;
  }


  public ModWorkshopGetWorkshopAccessInformation200Response canswitchphase(Boolean canswitchphase) {
    this.canswitchphase = canswitchphase;
    return this;
  }

   /**
   * Whether the user has the capability mod/workshop:switchphase allowed.
   * @return canswitchphase
  **/
  @javax.annotation.Nonnull
  public Boolean getCanswitchphase() {
    return canswitchphase;
  }

  public void setCanswitchphase(Boolean canswitchphase) {
    this.canswitchphase = canswitchphase;
  }


  public ModWorkshopGetWorkshopAccessInformation200Response canview(Boolean canview) {
    this.canview = canview;
    return this;
  }

   /**
   * Whether the user has the capability mod/workshop:view allowed.
   * @return canview
  **/
  @javax.annotation.Nonnull
  public Boolean getCanview() {
    return canview;
  }

  public void setCanview(Boolean canview) {
    this.canview = canview;
  }


  public ModWorkshopGetWorkshopAccessInformation200Response canviewallassessments(Boolean canviewallassessments) {
    this.canviewallassessments = canviewallassessments;
    return this;
  }

   /**
   * Whether the user has the capability mod/workshop:viewallassessments allowed.
   * @return canviewallassessments
  **/
  @javax.annotation.Nonnull
  public Boolean getCanviewallassessments() {
    return canviewallassessments;
  }

  public void setCanviewallassessments(Boolean canviewallassessments) {
    this.canviewallassessments = canviewallassessments;
  }


  public ModWorkshopGetWorkshopAccessInformation200Response canviewallsubmissions(Boolean canviewallsubmissions) {
    this.canviewallsubmissions = canviewallsubmissions;
    return this;
  }

   /**
   * Whether the user has the capability mod/workshop:viewallsubmissions allowed.
   * @return canviewallsubmissions
  **/
  @javax.annotation.Nonnull
  public Boolean getCanviewallsubmissions() {
    return canviewallsubmissions;
  }

  public void setCanviewallsubmissions(Boolean canviewallsubmissions) {
    this.canviewallsubmissions = canviewallsubmissions;
  }


  public ModWorkshopGetWorkshopAccessInformation200Response canviewauthornames(Boolean canviewauthornames) {
    this.canviewauthornames = canviewauthornames;
    return this;
  }

   /**
   * Whether the user has the capability mod/workshop:viewauthornames allowed.
   * @return canviewauthornames
  **/
  @javax.annotation.Nonnull
  public Boolean getCanviewauthornames() {
    return canviewauthornames;
  }

  public void setCanviewauthornames(Boolean canviewauthornames) {
    this.canviewauthornames = canviewauthornames;
  }


  public ModWorkshopGetWorkshopAccessInformation200Response canviewauthorpublished(Boolean canviewauthorpublished) {
    this.canviewauthorpublished = canviewauthorpublished;
    return this;
  }

   /**
   * Whether the user has the capability mod/workshop:viewauthorpublished allowed.
   * @return canviewauthorpublished
  **/
  @javax.annotation.Nonnull
  public Boolean getCanviewauthorpublished() {
    return canviewauthorpublished;
  }

  public void setCanviewauthorpublished(Boolean canviewauthorpublished) {
    this.canviewauthorpublished = canviewauthorpublished;
  }


  public ModWorkshopGetWorkshopAccessInformation200Response canviewpublishedsubmissions(Boolean canviewpublishedsubmissions) {
    this.canviewpublishedsubmissions = canviewpublishedsubmissions;
    return this;
  }

   /**
   * Whether the user has the capability mod/workshop:viewpublishedsubmissions allowed.
   * @return canviewpublishedsubmissions
  **/
  @javax.annotation.Nonnull
  public Boolean getCanviewpublishedsubmissions() {
    return canviewpublishedsubmissions;
  }

  public void setCanviewpublishedsubmissions(Boolean canviewpublishedsubmissions) {
    this.canviewpublishedsubmissions = canviewpublishedsubmissions;
  }


  public ModWorkshopGetWorkshopAccessInformation200Response canviewreviewernames(Boolean canviewreviewernames) {
    this.canviewreviewernames = canviewreviewernames;
    return this;
  }

   /**
   * Whether the user has the capability mod/workshop:viewreviewernames allowed.
   * @return canviewreviewernames
  **/
  @javax.annotation.Nonnull
  public Boolean getCanviewreviewernames() {
    return canviewreviewernames;
  }

  public void setCanviewreviewernames(Boolean canviewreviewernames) {
    this.canviewreviewernames = canviewreviewernames;
  }


  public ModWorkshopGetWorkshopAccessInformation200Response creatingsubmissionallowed(Boolean creatingsubmissionallowed) {
    this.creatingsubmissionallowed = creatingsubmissionallowed;
    return this;
  }

   /**
   * Is the given user allowed to create their submission?
   * @return creatingsubmissionallowed
  **/
  @javax.annotation.Nonnull
  public Boolean getCreatingsubmissionallowed() {
    return creatingsubmissionallowed;
  }

  public void setCreatingsubmissionallowed(Boolean creatingsubmissionallowed) {
    this.creatingsubmissionallowed = creatingsubmissionallowed;
  }


  public ModWorkshopGetWorkshopAccessInformation200Response examplesassessedbeforeassessment(Boolean examplesassessedbeforeassessment) {
    this.examplesassessedbeforeassessment = examplesassessedbeforeassessment;
    return this;
  }

   /**
   * Whether the given user has assessed all his required examples before assessment                 (always true if there are not examples to assessor not configured to check before assessment).
   * @return examplesassessedbeforeassessment
  **/
  @javax.annotation.Nonnull
  public Boolean getExamplesassessedbeforeassessment() {
    return examplesassessedbeforeassessment;
  }

  public void setExamplesassessedbeforeassessment(Boolean examplesassessedbeforeassessment) {
    this.examplesassessedbeforeassessment = examplesassessedbeforeassessment;
  }


  public ModWorkshopGetWorkshopAccessInformation200Response examplesassessedbeforesubmission(Boolean examplesassessedbeforesubmission) {
    this.examplesassessedbeforesubmission = examplesassessedbeforesubmission;
    return this;
  }

   /**
   * Whether the given user has assessed all his required examples before submission                 (always true if there are not examples to assess or not configured to check before submission).
   * @return examplesassessedbeforesubmission
  **/
  @javax.annotation.Nonnull
  public Boolean getExamplesassessedbeforesubmission() {
    return examplesassessedbeforesubmission;
  }

  public void setExamplesassessedbeforesubmission(Boolean examplesassessedbeforesubmission) {
    this.examplesassessedbeforesubmission = examplesassessedbeforesubmission;
  }


  public ModWorkshopGetWorkshopAccessInformation200Response modifyingsubmissionallowed(Boolean modifyingsubmissionallowed) {
    this.modifyingsubmissionallowed = modifyingsubmissionallowed;
    return this;
  }

   /**
   * Is the user allowed to modify his existing submission?
   * @return modifyingsubmissionallowed
  **/
  @javax.annotation.Nonnull
  public Boolean getModifyingsubmissionallowed() {
    return modifyingsubmissionallowed;
  }

  public void setModifyingsubmissionallowed(Boolean modifyingsubmissionallowed) {
    this.modifyingsubmissionallowed = modifyingsubmissionallowed;
  }


  public ModWorkshopGetWorkshopAccessInformation200Response warnings(List<AuthEmailSignupUser200ResponseWarningsInner> warnings) {
    this.warnings = warnings;
    return this;
  }

  public ModWorkshopGetWorkshopAccessInformation200Response addWarningsItem(AuthEmailSignupUser200ResponseWarningsInner warningsItem) {
    if (this.warnings == null) {
      this.warnings = new ArrayList<>();
    }
    this.warnings.add(warningsItem);
    return this;
  }

   /**
   * Get warnings
   * @return warnings
  **/
  @javax.annotation.Nullable
  public List<AuthEmailSignupUser200ResponseWarningsInner> getWarnings() {
    return warnings;
  }

  public void setWarnings(List<AuthEmailSignupUser200ResponseWarningsInner> warnings) {
    this.warnings = warnings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModWorkshopGetWorkshopAccessInformation200Response modWorkshopGetWorkshopAccessInformation200Response = (ModWorkshopGetWorkshopAccessInformation200Response) o;
    return Objects.equals(this.assessingallowed, modWorkshopGetWorkshopAccessInformation200Response.assessingallowed) &&
        Objects.equals(this.assessingexamplesallowed, modWorkshopGetWorkshopAccessInformation200Response.assessingexamplesallowed) &&
        Objects.equals(this.canaddinstance, modWorkshopGetWorkshopAccessInformation200Response.canaddinstance) &&
        Objects.equals(this.canallocate, modWorkshopGetWorkshopAccessInformation200Response.canallocate) &&
        Objects.equals(this.candeletesubmissions, modWorkshopGetWorkshopAccessInformation200Response.candeletesubmissions) &&
        Objects.equals(this.caneditdimensions, modWorkshopGetWorkshopAccessInformation200Response.caneditdimensions) &&
        Objects.equals(this.canexportsubmissions, modWorkshopGetWorkshopAccessInformation200Response.canexportsubmissions) &&
        Objects.equals(this.canignoredeadlines, modWorkshopGetWorkshopAccessInformation200Response.canignoredeadlines) &&
        Objects.equals(this.canmanageexamples, modWorkshopGetWorkshopAccessInformation200Response.canmanageexamples) &&
        Objects.equals(this.canoverridegrades, modWorkshopGetWorkshopAccessInformation200Response.canoverridegrades) &&
        Objects.equals(this.canpeerassess, modWorkshopGetWorkshopAccessInformation200Response.canpeerassess) &&
        Objects.equals(this.canpublishsubmissions, modWorkshopGetWorkshopAccessInformation200Response.canpublishsubmissions) &&
        Objects.equals(this.cansubmit, modWorkshopGetWorkshopAccessInformation200Response.cansubmit) &&
        Objects.equals(this.canswitchphase, modWorkshopGetWorkshopAccessInformation200Response.canswitchphase) &&
        Objects.equals(this.canview, modWorkshopGetWorkshopAccessInformation200Response.canview) &&
        Objects.equals(this.canviewallassessments, modWorkshopGetWorkshopAccessInformation200Response.canviewallassessments) &&
        Objects.equals(this.canviewallsubmissions, modWorkshopGetWorkshopAccessInformation200Response.canviewallsubmissions) &&
        Objects.equals(this.canviewauthornames, modWorkshopGetWorkshopAccessInformation200Response.canviewauthornames) &&
        Objects.equals(this.canviewauthorpublished, modWorkshopGetWorkshopAccessInformation200Response.canviewauthorpublished) &&
        Objects.equals(this.canviewpublishedsubmissions, modWorkshopGetWorkshopAccessInformation200Response.canviewpublishedsubmissions) &&
        Objects.equals(this.canviewreviewernames, modWorkshopGetWorkshopAccessInformation200Response.canviewreviewernames) &&
        Objects.equals(this.creatingsubmissionallowed, modWorkshopGetWorkshopAccessInformation200Response.creatingsubmissionallowed) &&
        Objects.equals(this.examplesassessedbeforeassessment, modWorkshopGetWorkshopAccessInformation200Response.examplesassessedbeforeassessment) &&
        Objects.equals(this.examplesassessedbeforesubmission, modWorkshopGetWorkshopAccessInformation200Response.examplesassessedbeforesubmission) &&
        Objects.equals(this.modifyingsubmissionallowed, modWorkshopGetWorkshopAccessInformation200Response.modifyingsubmissionallowed) &&
        Objects.equals(this.warnings, modWorkshopGetWorkshopAccessInformation200Response.warnings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(assessingallowed, assessingexamplesallowed, canaddinstance, canallocate, candeletesubmissions, caneditdimensions, canexportsubmissions, canignoredeadlines, canmanageexamples, canoverridegrades, canpeerassess, canpublishsubmissions, cansubmit, canswitchphase, canview, canviewallassessments, canviewallsubmissions, canviewauthornames, canviewauthorpublished, canviewpublishedsubmissions, canviewreviewernames, creatingsubmissionallowed, examplesassessedbeforeassessment, examplesassessedbeforesubmission, modifyingsubmissionallowed, warnings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModWorkshopGetWorkshopAccessInformation200Response {\n");
    sb.append("    assessingallowed: ").append(toIndentedString(assessingallowed)).append("\n");
    sb.append("    assessingexamplesallowed: ").append(toIndentedString(assessingexamplesallowed)).append("\n");
    sb.append("    canaddinstance: ").append(toIndentedString(canaddinstance)).append("\n");
    sb.append("    canallocate: ").append(toIndentedString(canallocate)).append("\n");
    sb.append("    candeletesubmissions: ").append(toIndentedString(candeletesubmissions)).append("\n");
    sb.append("    caneditdimensions: ").append(toIndentedString(caneditdimensions)).append("\n");
    sb.append("    canexportsubmissions: ").append(toIndentedString(canexportsubmissions)).append("\n");
    sb.append("    canignoredeadlines: ").append(toIndentedString(canignoredeadlines)).append("\n");
    sb.append("    canmanageexamples: ").append(toIndentedString(canmanageexamples)).append("\n");
    sb.append("    canoverridegrades: ").append(toIndentedString(canoverridegrades)).append("\n");
    sb.append("    canpeerassess: ").append(toIndentedString(canpeerassess)).append("\n");
    sb.append("    canpublishsubmissions: ").append(toIndentedString(canpublishsubmissions)).append("\n");
    sb.append("    cansubmit: ").append(toIndentedString(cansubmit)).append("\n");
    sb.append("    canswitchphase: ").append(toIndentedString(canswitchphase)).append("\n");
    sb.append("    canview: ").append(toIndentedString(canview)).append("\n");
    sb.append("    canviewallassessments: ").append(toIndentedString(canviewallassessments)).append("\n");
    sb.append("    canviewallsubmissions: ").append(toIndentedString(canviewallsubmissions)).append("\n");
    sb.append("    canviewauthornames: ").append(toIndentedString(canviewauthornames)).append("\n");
    sb.append("    canviewauthorpublished: ").append(toIndentedString(canviewauthorpublished)).append("\n");
    sb.append("    canviewpublishedsubmissions: ").append(toIndentedString(canviewpublishedsubmissions)).append("\n");
    sb.append("    canviewreviewernames: ").append(toIndentedString(canviewreviewernames)).append("\n");
    sb.append("    creatingsubmissionallowed: ").append(toIndentedString(creatingsubmissionallowed)).append("\n");
    sb.append("    examplesassessedbeforeassessment: ").append(toIndentedString(examplesassessedbeforeassessment)).append("\n");
    sb.append("    examplesassessedbeforesubmission: ").append(toIndentedString(examplesassessedbeforesubmission)).append("\n");
    sb.append("    modifyingsubmissionallowed: ").append(toIndentedString(modifyingsubmissionallowed)).append("\n");
    sb.append("    warnings: ").append(toIndentedString(warnings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("assessingallowed");
    openapiFields.add("assessingexamplesallowed");
    openapiFields.add("canaddinstance");
    openapiFields.add("canallocate");
    openapiFields.add("candeletesubmissions");
    openapiFields.add("caneditdimensions");
    openapiFields.add("canexportsubmissions");
    openapiFields.add("canignoredeadlines");
    openapiFields.add("canmanageexamples");
    openapiFields.add("canoverridegrades");
    openapiFields.add("canpeerassess");
    openapiFields.add("canpublishsubmissions");
    openapiFields.add("cansubmit");
    openapiFields.add("canswitchphase");
    openapiFields.add("canview");
    openapiFields.add("canviewallassessments");
    openapiFields.add("canviewallsubmissions");
    openapiFields.add("canviewauthornames");
    openapiFields.add("canviewauthorpublished");
    openapiFields.add("canviewpublishedsubmissions");
    openapiFields.add("canviewreviewernames");
    openapiFields.add("creatingsubmissionallowed");
    openapiFields.add("examplesassessedbeforeassessment");
    openapiFields.add("examplesassessedbeforesubmission");
    openapiFields.add("modifyingsubmissionallowed");
    openapiFields.add("warnings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("assessingallowed");
    openapiRequiredFields.add("assessingexamplesallowed");
    openapiRequiredFields.add("canaddinstance");
    openapiRequiredFields.add("canallocate");
    openapiRequiredFields.add("candeletesubmissions");
    openapiRequiredFields.add("caneditdimensions");
    openapiRequiredFields.add("canexportsubmissions");
    openapiRequiredFields.add("canignoredeadlines");
    openapiRequiredFields.add("canmanageexamples");
    openapiRequiredFields.add("canoverridegrades");
    openapiRequiredFields.add("canpeerassess");
    openapiRequiredFields.add("canpublishsubmissions");
    openapiRequiredFields.add("cansubmit");
    openapiRequiredFields.add("canswitchphase");
    openapiRequiredFields.add("canview");
    openapiRequiredFields.add("canviewallassessments");
    openapiRequiredFields.add("canviewallsubmissions");
    openapiRequiredFields.add("canviewauthornames");
    openapiRequiredFields.add("canviewauthorpublished");
    openapiRequiredFields.add("canviewpublishedsubmissions");
    openapiRequiredFields.add("canviewreviewernames");
    openapiRequiredFields.add("creatingsubmissionallowed");
    openapiRequiredFields.add("examplesassessedbeforeassessment");
    openapiRequiredFields.add("examplesassessedbeforesubmission");
    openapiRequiredFields.add("modifyingsubmissionallowed");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ModWorkshopGetWorkshopAccessInformation200Response
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ModWorkshopGetWorkshopAccessInformation200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModWorkshopGetWorkshopAccessInformation200Response is not found in the empty JSON string", ModWorkshopGetWorkshopAccessInformation200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ModWorkshopGetWorkshopAccessInformation200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModWorkshopGetWorkshopAccessInformation200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ModWorkshopGetWorkshopAccessInformation200Response.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("warnings") != null && !jsonObj.get("warnings").isJsonNull()) {
        JsonArray jsonArraywarnings = jsonObj.getAsJsonArray("warnings");
        if (jsonArraywarnings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("warnings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `warnings` to be an array in the JSON string but got `%s`", jsonObj.get("warnings").toString()));
          }

          // validate the optional field `warnings` (array)
          for (int i = 0; i < jsonArraywarnings.size(); i++) {
            AuthEmailSignupUser200ResponseWarningsInner.validateJsonElement(jsonArraywarnings.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModWorkshopGetWorkshopAccessInformation200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModWorkshopGetWorkshopAccessInformation200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModWorkshopGetWorkshopAccessInformation200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModWorkshopGetWorkshopAccessInformation200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<ModWorkshopGetWorkshopAccessInformation200Response>() {
           @Override
           public void write(JsonWriter out, ModWorkshopGetWorkshopAccessInformation200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModWorkshopGetWorkshopAccessInformation200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ModWorkshopGetWorkshopAccessInformation200Response given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ModWorkshopGetWorkshopAccessInformation200Response
  * @throws IOException if the JSON string is invalid with respect to ModWorkshopGetWorkshopAccessInformation200Response
  */
  public static ModWorkshopGetWorkshopAccessInformation200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModWorkshopGetWorkshopAccessInformation200Response.class);
  }

 /**
  * Convert an instance of ModWorkshopGetWorkshopAccessInformation200Response to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

