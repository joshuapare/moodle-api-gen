/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CoreBadgesGetUserBadges200ResponseBadgesInnerAlignmentInner;
import org.openapitools.client.model.CoreBadgesGetUserBadges200ResponseBadgesInnerEndorsement;
import org.openapitools.client.model.CoreBadgesGetUserBadges200ResponseBadgesInnerRelatedbadgesInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.joshuapare.JSON;

/**
 * CoreBadgesGetUserBadges200ResponseBadgesInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-18T14:00:07.069642-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class CoreBadgesGetUserBadges200ResponseBadgesInner {
  public static final String SERIALIZED_NAME_ALIGNMENT = "alignment";
  @SerializedName(SERIALIZED_NAME_ALIGNMENT)
  private List<CoreBadgesGetUserBadges200ResponseBadgesInnerAlignmentInner> alignment = new ArrayList<>();

  public static final String SERIALIZED_NAME_ATTACHMENT = "attachment";
  @SerializedName(SERIALIZED_NAME_ATTACHMENT)
  private Integer attachment = 1;

  public static final String SERIALIZED_NAME_BADGEURL = "badgeurl";
  @SerializedName(SERIALIZED_NAME_BADGEURL)
  private String badgeurl;

  public static final String SERIALIZED_NAME_COURSEID = "courseid";
  @SerializedName(SERIALIZED_NAME_COURSEID)
  private Integer courseid;

  public static final String SERIALIZED_NAME_DATEEXPIRE = "dateexpire";
  @SerializedName(SERIALIZED_NAME_DATEEXPIRE)
  private Integer dateexpire;

  public static final String SERIALIZED_NAME_DATEISSUED = "dateissued";
  @SerializedName(SERIALIZED_NAME_DATEISSUED)
  private Integer dateissued = 0;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_ENDORSEMENT = "endorsement";
  @SerializedName(SERIALIZED_NAME_ENDORSEMENT)
  private CoreBadgesGetUserBadges200ResponseBadgesInnerEndorsement endorsement;

  public static final String SERIALIZED_NAME_EXPIREDATE = "expiredate";
  @SerializedName(SERIALIZED_NAME_EXPIREDATE)
  private Integer expiredate;

  public static final String SERIALIZED_NAME_EXPIREPERIOD = "expireperiod";
  @SerializedName(SERIALIZED_NAME_EXPIREPERIOD)
  private Integer expireperiod;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_IMAGEAUTHOREMAIL = "imageauthoremail";
  @SerializedName(SERIALIZED_NAME_IMAGEAUTHOREMAIL)
  private String imageauthoremail;

  public static final String SERIALIZED_NAME_IMAGEAUTHORNAME = "imageauthorname";
  @SerializedName(SERIALIZED_NAME_IMAGEAUTHORNAME)
  private String imageauthorname;

  public static final String SERIALIZED_NAME_IMAGEAUTHORURL = "imageauthorurl";
  @SerializedName(SERIALIZED_NAME_IMAGEAUTHORURL)
  private String imageauthorurl;

  public static final String SERIALIZED_NAME_IMAGECAPTION = "imagecaption";
  @SerializedName(SERIALIZED_NAME_IMAGECAPTION)
  private String imagecaption;

  public static final String SERIALIZED_NAME_ISSUEDID = "issuedid";
  @SerializedName(SERIALIZED_NAME_ISSUEDID)
  private Integer issuedid;

  public static final String SERIALIZED_NAME_ISSUERCONTACT = "issuercontact";
  @SerializedName(SERIALIZED_NAME_ISSUERCONTACT)
  private String issuercontact;

  public static final String SERIALIZED_NAME_ISSUERNAME = "issuername";
  @SerializedName(SERIALIZED_NAME_ISSUERNAME)
  private String issuername;

  public static final String SERIALIZED_NAME_ISSUERURL = "issuerurl";
  @SerializedName(SERIALIZED_NAME_ISSUERURL)
  private String issuerurl;

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private String language;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_MESSAGESUBJECT = "messagesubject";
  @SerializedName(SERIALIZED_NAME_MESSAGESUBJECT)
  private String messagesubject;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NEXTCRON = "nextcron";
  @SerializedName(SERIALIZED_NAME_NEXTCRON)
  private Integer nextcron;

  public static final String SERIALIZED_NAME_NOTIFICATION = "notification";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION)
  private Integer notification = 1;

  public static final String SERIALIZED_NAME_RELATEDBADGES = "relatedbadges";
  @SerializedName(SERIALIZED_NAME_RELATEDBADGES)
  private List<CoreBadgesGetUserBadges200ResponseBadgesInnerRelatedbadgesInner> relatedbadges = new ArrayList<>();

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private Integer status = 0;

  public static final String SERIALIZED_NAME_TIMECREATED = "timecreated";
  @SerializedName(SERIALIZED_NAME_TIMECREATED)
  private Integer timecreated = 0;

  public static final String SERIALIZED_NAME_TIMEMODIFIED = "timemodified";
  @SerializedName(SERIALIZED_NAME_TIMEMODIFIED)
  private Integer timemodified = 0;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private Integer type = 1;

  public static final String SERIALIZED_NAME_UNIQUEHASH = "uniquehash";
  @SerializedName(SERIALIZED_NAME_UNIQUEHASH)
  private String uniquehash;

  public static final String SERIALIZED_NAME_USERCREATED = "usercreated";
  @SerializedName(SERIALIZED_NAME_USERCREATED)
  private Integer usercreated;

  public static final String SERIALIZED_NAME_USERMODIFIED = "usermodified";
  @SerializedName(SERIALIZED_NAME_USERMODIFIED)
  private Integer usermodified;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public static final String SERIALIZED_NAME_VISIBLE = "visible";
  @SerializedName(SERIALIZED_NAME_VISIBLE)
  private Integer visible = 0;

  public CoreBadgesGetUserBadges200ResponseBadgesInner() {
  }

  public CoreBadgesGetUserBadges200ResponseBadgesInner alignment(List<CoreBadgesGetUserBadges200ResponseBadgesInnerAlignmentInner> alignment) {
    this.alignment = alignment;
    return this;
  }

  public CoreBadgesGetUserBadges200ResponseBadgesInner addAlignmentItem(CoreBadgesGetUserBadges200ResponseBadgesInnerAlignmentInner alignmentItem) {
    if (this.alignment == null) {
      this.alignment = new ArrayList<>();
    }
    this.alignment.add(alignmentItem);
    return this;
  }

   /**
   * Get alignment
   * @return alignment
  **/
  @javax.annotation.Nullable
  public List<CoreBadgesGetUserBadges200ResponseBadgesInnerAlignmentInner> getAlignment() {
    return alignment;
  }

  public void setAlignment(List<CoreBadgesGetUserBadges200ResponseBadgesInnerAlignmentInner> alignment) {
    this.alignment = alignment;
  }


  public CoreBadgesGetUserBadges200ResponseBadgesInner attachment(Integer attachment) {
    this.attachment = attachment;
    return this;
  }

   /**
   * Attachment
   * @return attachment
  **/
  @javax.annotation.Nullable
  public Integer getAttachment() {
    return attachment;
  }

  public void setAttachment(Integer attachment) {
    this.attachment = attachment;
  }


  public CoreBadgesGetUserBadges200ResponseBadgesInner badgeurl(String badgeurl) {
    this.badgeurl = badgeurl;
    return this;
  }

   /**
   * Badge URL
   * @return badgeurl
  **/
  @javax.annotation.Nullable
  public String getBadgeurl() {
    return badgeurl;
  }

  public void setBadgeurl(String badgeurl) {
    this.badgeurl = badgeurl;
  }


  public CoreBadgesGetUserBadges200ResponseBadgesInner courseid(Integer courseid) {
    this.courseid = courseid;
    return this;
  }

   /**
   * Course id
   * @return courseid
  **/
  @javax.annotation.Nullable
  public Integer getCourseid() {
    return courseid;
  }

  public void setCourseid(Integer courseid) {
    this.courseid = courseid;
  }


  public CoreBadgesGetUserBadges200ResponseBadgesInner dateexpire(Integer dateexpire) {
    this.dateexpire = dateexpire;
    return this;
  }

   /**
   * Date expire
   * @return dateexpire
  **/
  @javax.annotation.Nullable
  public Integer getDateexpire() {
    return dateexpire;
  }

  public void setDateexpire(Integer dateexpire) {
    this.dateexpire = dateexpire;
  }


  public CoreBadgesGetUserBadges200ResponseBadgesInner dateissued(Integer dateissued) {
    this.dateissued = dateissued;
    return this;
  }

   /**
   * Date issued
   * @return dateissued
  **/
  @javax.annotation.Nullable
  public Integer getDateissued() {
    return dateissued;
  }

  public void setDateissued(Integer dateissued) {
    this.dateissued = dateissued;
  }


  public CoreBadgesGetUserBadges200ResponseBadgesInner description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Badge description
   * @return description
  **/
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CoreBadgesGetUserBadges200ResponseBadgesInner email(String email) {
    this.email = email;
    return this;
  }

   /**
   * User email
   * @return email
  **/
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public CoreBadgesGetUserBadges200ResponseBadgesInner endorsement(CoreBadgesGetUserBadges200ResponseBadgesInnerEndorsement endorsement) {
    this.endorsement = endorsement;
    return this;
  }

   /**
   * Get endorsement
   * @return endorsement
  **/
  @javax.annotation.Nullable
  public CoreBadgesGetUserBadges200ResponseBadgesInnerEndorsement getEndorsement() {
    return endorsement;
  }

  public void setEndorsement(CoreBadgesGetUserBadges200ResponseBadgesInnerEndorsement endorsement) {
    this.endorsement = endorsement;
  }


  public CoreBadgesGetUserBadges200ResponseBadgesInner expiredate(Integer expiredate) {
    this.expiredate = expiredate;
    return this;
  }

   /**
   * Expire date
   * @return expiredate
  **/
  @javax.annotation.Nullable
  public Integer getExpiredate() {
    return expiredate;
  }

  public void setExpiredate(Integer expiredate) {
    this.expiredate = expiredate;
  }


  public CoreBadgesGetUserBadges200ResponseBadgesInner expireperiod(Integer expireperiod) {
    this.expireperiod = expireperiod;
    return this;
  }

   /**
   * Expire period
   * @return expireperiod
  **/
  @javax.annotation.Nullable
  public Integer getExpireperiod() {
    return expireperiod;
  }

  public void setExpireperiod(Integer expireperiod) {
    this.expireperiod = expireperiod;
  }


  public CoreBadgesGetUserBadges200ResponseBadgesInner id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * Badge id
   * @return id
  **/
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public CoreBadgesGetUserBadges200ResponseBadgesInner imageauthoremail(String imageauthoremail) {
    this.imageauthoremail = imageauthoremail;
    return this;
  }

   /**
   * Email of the image author
   * @return imageauthoremail
  **/
  @javax.annotation.Nullable
  public String getImageauthoremail() {
    return imageauthoremail;
  }

  public void setImageauthoremail(String imageauthoremail) {
    this.imageauthoremail = imageauthoremail;
  }


  public CoreBadgesGetUserBadges200ResponseBadgesInner imageauthorname(String imageauthorname) {
    this.imageauthorname = imageauthorname;
    return this;
  }

   /**
   * Name of the image author
   * @return imageauthorname
  **/
  @javax.annotation.Nullable
  public String getImageauthorname() {
    return imageauthorname;
  }

  public void setImageauthorname(String imageauthorname) {
    this.imageauthorname = imageauthorname;
  }


  public CoreBadgesGetUserBadges200ResponseBadgesInner imageauthorurl(String imageauthorurl) {
    this.imageauthorurl = imageauthorurl;
    return this;
  }

   /**
   * URL of the image author
   * @return imageauthorurl
  **/
  @javax.annotation.Nullable
  public String getImageauthorurl() {
    return imageauthorurl;
  }

  public void setImageauthorurl(String imageauthorurl) {
    this.imageauthorurl = imageauthorurl;
  }


  public CoreBadgesGetUserBadges200ResponseBadgesInner imagecaption(String imagecaption) {
    this.imagecaption = imagecaption;
    return this;
  }

   /**
   * Caption of the image
   * @return imagecaption
  **/
  @javax.annotation.Nullable
  public String getImagecaption() {
    return imagecaption;
  }

  public void setImagecaption(String imagecaption) {
    this.imagecaption = imagecaption;
  }


  public CoreBadgesGetUserBadges200ResponseBadgesInner issuedid(Integer issuedid) {
    this.issuedid = issuedid;
    return this;
  }

   /**
   * Issued id
   * @return issuedid
  **/
  @javax.annotation.Nullable
  public Integer getIssuedid() {
    return issuedid;
  }

  public void setIssuedid(Integer issuedid) {
    this.issuedid = issuedid;
  }


  public CoreBadgesGetUserBadges200ResponseBadgesInner issuercontact(String issuercontact) {
    this.issuercontact = issuercontact;
    return this;
  }

   /**
   * Issuer contact
   * @return issuercontact
  **/
  @javax.annotation.Nullable
  public String getIssuercontact() {
    return issuercontact;
  }

  public void setIssuercontact(String issuercontact) {
    this.issuercontact = issuercontact;
  }


  public CoreBadgesGetUserBadges200ResponseBadgesInner issuername(String issuername) {
    this.issuername = issuername;
    return this;
  }

   /**
   * Issuer name
   * @return issuername
  **/
  @javax.annotation.Nullable
  public String getIssuername() {
    return issuername;
  }

  public void setIssuername(String issuername) {
    this.issuername = issuername;
  }


  public CoreBadgesGetUserBadges200ResponseBadgesInner issuerurl(String issuerurl) {
    this.issuerurl = issuerurl;
    return this;
  }

   /**
   * Issuer URL
   * @return issuerurl
  **/
  @javax.annotation.Nullable
  public String getIssuerurl() {
    return issuerurl;
  }

  public void setIssuerurl(String issuerurl) {
    this.issuerurl = issuerurl;
  }


  public CoreBadgesGetUserBadges200ResponseBadgesInner language(String language) {
    this.language = language;
    return this;
  }

   /**
   * Language
   * @return language
  **/
  @javax.annotation.Nullable
  public String getLanguage() {
    return language;
  }

  public void setLanguage(String language) {
    this.language = language;
  }


  public CoreBadgesGetUserBadges200ResponseBadgesInner message(String message) {
    this.message = message;
    return this;
  }

   /**
   * Message
   * @return message
  **/
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public CoreBadgesGetUserBadges200ResponseBadgesInner messagesubject(String messagesubject) {
    this.messagesubject = messagesubject;
    return this;
  }

   /**
   * Message subject
   * @return messagesubject
  **/
  @javax.annotation.Nullable
  public String getMessagesubject() {
    return messagesubject;
  }

  public void setMessagesubject(String messagesubject) {
    this.messagesubject = messagesubject;
  }


  public CoreBadgesGetUserBadges200ResponseBadgesInner name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Badge name
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CoreBadgesGetUserBadges200ResponseBadgesInner nextcron(Integer nextcron) {
    this.nextcron = nextcron;
    return this;
  }

   /**
   * Next cron
   * @return nextcron
  **/
  @javax.annotation.Nullable
  public Integer getNextcron() {
    return nextcron;
  }

  public void setNextcron(Integer nextcron) {
    this.nextcron = nextcron;
  }


  public CoreBadgesGetUserBadges200ResponseBadgesInner notification(Integer notification) {
    this.notification = notification;
    return this;
  }

   /**
   * Whether to notify when badge is awarded
   * @return notification
  **/
  @javax.annotation.Nullable
  public Integer getNotification() {
    return notification;
  }

  public void setNotification(Integer notification) {
    this.notification = notification;
  }


  public CoreBadgesGetUserBadges200ResponseBadgesInner relatedbadges(List<CoreBadgesGetUserBadges200ResponseBadgesInnerRelatedbadgesInner> relatedbadges) {
    this.relatedbadges = relatedbadges;
    return this;
  }

  public CoreBadgesGetUserBadges200ResponseBadgesInner addRelatedbadgesItem(CoreBadgesGetUserBadges200ResponseBadgesInnerRelatedbadgesInner relatedbadgesItem) {
    if (this.relatedbadges == null) {
      this.relatedbadges = new ArrayList<>();
    }
    this.relatedbadges.add(relatedbadgesItem);
    return this;
  }

   /**
   * Get relatedbadges
   * @return relatedbadges
  **/
  @javax.annotation.Nullable
  public List<CoreBadgesGetUserBadges200ResponseBadgesInnerRelatedbadgesInner> getRelatedbadges() {
    return relatedbadges;
  }

  public void setRelatedbadges(List<CoreBadgesGetUserBadges200ResponseBadgesInnerRelatedbadgesInner> relatedbadges) {
    this.relatedbadges = relatedbadges;
  }


  public CoreBadgesGetUserBadges200ResponseBadgesInner status(Integer status) {
    this.status = status;
    return this;
  }

   /**
   * Status
   * @return status
  **/
  @javax.annotation.Nullable
  public Integer getStatus() {
    return status;
  }

  public void setStatus(Integer status) {
    this.status = status;
  }


  public CoreBadgesGetUserBadges200ResponseBadgesInner timecreated(Integer timecreated) {
    this.timecreated = timecreated;
    return this;
  }

   /**
   * Time created
   * @return timecreated
  **/
  @javax.annotation.Nullable
  public Integer getTimecreated() {
    return timecreated;
  }

  public void setTimecreated(Integer timecreated) {
    this.timecreated = timecreated;
  }


  public CoreBadgesGetUserBadges200ResponseBadgesInner timemodified(Integer timemodified) {
    this.timemodified = timemodified;
    return this;
  }

   /**
   * Time modified
   * @return timemodified
  **/
  @javax.annotation.Nullable
  public Integer getTimemodified() {
    return timemodified;
  }

  public void setTimemodified(Integer timemodified) {
    this.timemodified = timemodified;
  }


  public CoreBadgesGetUserBadges200ResponseBadgesInner type(Integer type) {
    this.type = type;
    return this;
  }

   /**
   * Type
   * @return type
  **/
  @javax.annotation.Nullable
  public Integer getType() {
    return type;
  }

  public void setType(Integer type) {
    this.type = type;
  }


  public CoreBadgesGetUserBadges200ResponseBadgesInner uniquehash(String uniquehash) {
    this.uniquehash = uniquehash;
    return this;
  }

   /**
   * Unique hash
   * @return uniquehash
  **/
  @javax.annotation.Nullable
  public String getUniquehash() {
    return uniquehash;
  }

  public void setUniquehash(String uniquehash) {
    this.uniquehash = uniquehash;
  }


  public CoreBadgesGetUserBadges200ResponseBadgesInner usercreated(Integer usercreated) {
    this.usercreated = usercreated;
    return this;
  }

   /**
   * User created
   * @return usercreated
  **/
  @javax.annotation.Nullable
  public Integer getUsercreated() {
    return usercreated;
  }

  public void setUsercreated(Integer usercreated) {
    this.usercreated = usercreated;
  }


  public CoreBadgesGetUserBadges200ResponseBadgesInner usermodified(Integer usermodified) {
    this.usermodified = usermodified;
    return this;
  }

   /**
   * User modified
   * @return usermodified
  **/
  @javax.annotation.Nullable
  public Integer getUsermodified() {
    return usermodified;
  }

  public void setUsermodified(Integer usermodified) {
    this.usermodified = usermodified;
  }


  public CoreBadgesGetUserBadges200ResponseBadgesInner version(String version) {
    this.version = version;
    return this;
  }

   /**
   * Version
   * @return version
  **/
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }


  public CoreBadgesGetUserBadges200ResponseBadgesInner visible(Integer visible) {
    this.visible = visible;
    return this;
  }

   /**
   * Visible
   * @return visible
  **/
  @javax.annotation.Nullable
  public Integer getVisible() {
    return visible;
  }

  public void setVisible(Integer visible) {
    this.visible = visible;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CoreBadgesGetUserBadges200ResponseBadgesInner coreBadgesGetUserBadges200ResponseBadgesInner = (CoreBadgesGetUserBadges200ResponseBadgesInner) o;
    return Objects.equals(this.alignment, coreBadgesGetUserBadges200ResponseBadgesInner.alignment) &&
        Objects.equals(this.attachment, coreBadgesGetUserBadges200ResponseBadgesInner.attachment) &&
        Objects.equals(this.badgeurl, coreBadgesGetUserBadges200ResponseBadgesInner.badgeurl) &&
        Objects.equals(this.courseid, coreBadgesGetUserBadges200ResponseBadgesInner.courseid) &&
        Objects.equals(this.dateexpire, coreBadgesGetUserBadges200ResponseBadgesInner.dateexpire) &&
        Objects.equals(this.dateissued, coreBadgesGetUserBadges200ResponseBadgesInner.dateissued) &&
        Objects.equals(this.description, coreBadgesGetUserBadges200ResponseBadgesInner.description) &&
        Objects.equals(this.email, coreBadgesGetUserBadges200ResponseBadgesInner.email) &&
        Objects.equals(this.endorsement, coreBadgesGetUserBadges200ResponseBadgesInner.endorsement) &&
        Objects.equals(this.expiredate, coreBadgesGetUserBadges200ResponseBadgesInner.expiredate) &&
        Objects.equals(this.expireperiod, coreBadgesGetUserBadges200ResponseBadgesInner.expireperiod) &&
        Objects.equals(this.id, coreBadgesGetUserBadges200ResponseBadgesInner.id) &&
        Objects.equals(this.imageauthoremail, coreBadgesGetUserBadges200ResponseBadgesInner.imageauthoremail) &&
        Objects.equals(this.imageauthorname, coreBadgesGetUserBadges200ResponseBadgesInner.imageauthorname) &&
        Objects.equals(this.imageauthorurl, coreBadgesGetUserBadges200ResponseBadgesInner.imageauthorurl) &&
        Objects.equals(this.imagecaption, coreBadgesGetUserBadges200ResponseBadgesInner.imagecaption) &&
        Objects.equals(this.issuedid, coreBadgesGetUserBadges200ResponseBadgesInner.issuedid) &&
        Objects.equals(this.issuercontact, coreBadgesGetUserBadges200ResponseBadgesInner.issuercontact) &&
        Objects.equals(this.issuername, coreBadgesGetUserBadges200ResponseBadgesInner.issuername) &&
        Objects.equals(this.issuerurl, coreBadgesGetUserBadges200ResponseBadgesInner.issuerurl) &&
        Objects.equals(this.language, coreBadgesGetUserBadges200ResponseBadgesInner.language) &&
        Objects.equals(this.message, coreBadgesGetUserBadges200ResponseBadgesInner.message) &&
        Objects.equals(this.messagesubject, coreBadgesGetUserBadges200ResponseBadgesInner.messagesubject) &&
        Objects.equals(this.name, coreBadgesGetUserBadges200ResponseBadgesInner.name) &&
        Objects.equals(this.nextcron, coreBadgesGetUserBadges200ResponseBadgesInner.nextcron) &&
        Objects.equals(this.notification, coreBadgesGetUserBadges200ResponseBadgesInner.notification) &&
        Objects.equals(this.relatedbadges, coreBadgesGetUserBadges200ResponseBadgesInner.relatedbadges) &&
        Objects.equals(this.status, coreBadgesGetUserBadges200ResponseBadgesInner.status) &&
        Objects.equals(this.timecreated, coreBadgesGetUserBadges200ResponseBadgesInner.timecreated) &&
        Objects.equals(this.timemodified, coreBadgesGetUserBadges200ResponseBadgesInner.timemodified) &&
        Objects.equals(this.type, coreBadgesGetUserBadges200ResponseBadgesInner.type) &&
        Objects.equals(this.uniquehash, coreBadgesGetUserBadges200ResponseBadgesInner.uniquehash) &&
        Objects.equals(this.usercreated, coreBadgesGetUserBadges200ResponseBadgesInner.usercreated) &&
        Objects.equals(this.usermodified, coreBadgesGetUserBadges200ResponseBadgesInner.usermodified) &&
        Objects.equals(this.version, coreBadgesGetUserBadges200ResponseBadgesInner.version) &&
        Objects.equals(this.visible, coreBadgesGetUserBadges200ResponseBadgesInner.visible);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alignment, attachment, badgeurl, courseid, dateexpire, dateissued, description, email, endorsement, expiredate, expireperiod, id, imageauthoremail, imageauthorname, imageauthorurl, imagecaption, issuedid, issuercontact, issuername, issuerurl, language, message, messagesubject, name, nextcron, notification, relatedbadges, status, timecreated, timemodified, type, uniquehash, usercreated, usermodified, version, visible);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CoreBadgesGetUserBadges200ResponseBadgesInner {\n");
    sb.append("    alignment: ").append(toIndentedString(alignment)).append("\n");
    sb.append("    attachment: ").append(toIndentedString(attachment)).append("\n");
    sb.append("    badgeurl: ").append(toIndentedString(badgeurl)).append("\n");
    sb.append("    courseid: ").append(toIndentedString(courseid)).append("\n");
    sb.append("    dateexpire: ").append(toIndentedString(dateexpire)).append("\n");
    sb.append("    dateissued: ").append(toIndentedString(dateissued)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    endorsement: ").append(toIndentedString(endorsement)).append("\n");
    sb.append("    expiredate: ").append(toIndentedString(expiredate)).append("\n");
    sb.append("    expireperiod: ").append(toIndentedString(expireperiod)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    imageauthoremail: ").append(toIndentedString(imageauthoremail)).append("\n");
    sb.append("    imageauthorname: ").append(toIndentedString(imageauthorname)).append("\n");
    sb.append("    imageauthorurl: ").append(toIndentedString(imageauthorurl)).append("\n");
    sb.append("    imagecaption: ").append(toIndentedString(imagecaption)).append("\n");
    sb.append("    issuedid: ").append(toIndentedString(issuedid)).append("\n");
    sb.append("    issuercontact: ").append(toIndentedString(issuercontact)).append("\n");
    sb.append("    issuername: ").append(toIndentedString(issuername)).append("\n");
    sb.append("    issuerurl: ").append(toIndentedString(issuerurl)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    messagesubject: ").append(toIndentedString(messagesubject)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nextcron: ").append(toIndentedString(nextcron)).append("\n");
    sb.append("    notification: ").append(toIndentedString(notification)).append("\n");
    sb.append("    relatedbadges: ").append(toIndentedString(relatedbadges)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    timecreated: ").append(toIndentedString(timecreated)).append("\n");
    sb.append("    timemodified: ").append(toIndentedString(timemodified)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    uniquehash: ").append(toIndentedString(uniquehash)).append("\n");
    sb.append("    usercreated: ").append(toIndentedString(usercreated)).append("\n");
    sb.append("    usermodified: ").append(toIndentedString(usermodified)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    visible: ").append(toIndentedString(visible)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alignment");
    openapiFields.add("attachment");
    openapiFields.add("badgeurl");
    openapiFields.add("courseid");
    openapiFields.add("dateexpire");
    openapiFields.add("dateissued");
    openapiFields.add("description");
    openapiFields.add("email");
    openapiFields.add("endorsement");
    openapiFields.add("expiredate");
    openapiFields.add("expireperiod");
    openapiFields.add("id");
    openapiFields.add("imageauthoremail");
    openapiFields.add("imageauthorname");
    openapiFields.add("imageauthorurl");
    openapiFields.add("imagecaption");
    openapiFields.add("issuedid");
    openapiFields.add("issuercontact");
    openapiFields.add("issuername");
    openapiFields.add("issuerurl");
    openapiFields.add("language");
    openapiFields.add("message");
    openapiFields.add("messagesubject");
    openapiFields.add("name");
    openapiFields.add("nextcron");
    openapiFields.add("notification");
    openapiFields.add("relatedbadges");
    openapiFields.add("status");
    openapiFields.add("timecreated");
    openapiFields.add("timemodified");
    openapiFields.add("type");
    openapiFields.add("uniquehash");
    openapiFields.add("usercreated");
    openapiFields.add("usermodified");
    openapiFields.add("version");
    openapiFields.add("visible");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CoreBadgesGetUserBadges200ResponseBadgesInner
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CoreBadgesGetUserBadges200ResponseBadgesInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CoreBadgesGetUserBadges200ResponseBadgesInner is not found in the empty JSON string", CoreBadgesGetUserBadges200ResponseBadgesInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CoreBadgesGetUserBadges200ResponseBadgesInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CoreBadgesGetUserBadges200ResponseBadgesInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("alignment") != null && !jsonObj.get("alignment").isJsonNull()) {
        JsonArray jsonArrayalignment = jsonObj.getAsJsonArray("alignment");
        if (jsonArrayalignment != null) {
          // ensure the json data is an array
          if (!jsonObj.get("alignment").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `alignment` to be an array in the JSON string but got `%s`", jsonObj.get("alignment").toString()));
          }

          // validate the optional field `alignment` (array)
          for (int i = 0; i < jsonArrayalignment.size(); i++) {
            CoreBadgesGetUserBadges200ResponseBadgesInnerAlignmentInner.validateJsonElement(jsonArrayalignment.get(i));
          };
        }
      }
      if ((jsonObj.get("badgeurl") != null && !jsonObj.get("badgeurl").isJsonNull()) && !jsonObj.get("badgeurl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `badgeurl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("badgeurl").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      // validate the optional field `endorsement`
      if (jsonObj.get("endorsement") != null && !jsonObj.get("endorsement").isJsonNull()) {
        CoreBadgesGetUserBadges200ResponseBadgesInnerEndorsement.validateJsonElement(jsonObj.get("endorsement"));
      }
      if ((jsonObj.get("imageauthoremail") != null && !jsonObj.get("imageauthoremail").isJsonNull()) && !jsonObj.get("imageauthoremail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imageauthoremail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imageauthoremail").toString()));
      }
      if ((jsonObj.get("imageauthorname") != null && !jsonObj.get("imageauthorname").isJsonNull()) && !jsonObj.get("imageauthorname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imageauthorname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imageauthorname").toString()));
      }
      if ((jsonObj.get("imageauthorurl") != null && !jsonObj.get("imageauthorurl").isJsonNull()) && !jsonObj.get("imageauthorurl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imageauthorurl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imageauthorurl").toString()));
      }
      if ((jsonObj.get("imagecaption") != null && !jsonObj.get("imagecaption").isJsonNull()) && !jsonObj.get("imagecaption").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imagecaption` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imagecaption").toString()));
      }
      if ((jsonObj.get("issuercontact") != null && !jsonObj.get("issuercontact").isJsonNull()) && !jsonObj.get("issuercontact").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuercontact` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuercontact").toString()));
      }
      if ((jsonObj.get("issuername") != null && !jsonObj.get("issuername").isJsonNull()) && !jsonObj.get("issuername").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuername` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuername").toString()));
      }
      if ((jsonObj.get("issuerurl") != null && !jsonObj.get("issuerurl").isJsonNull()) && !jsonObj.get("issuerurl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuerurl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuerurl").toString()));
      }
      if ((jsonObj.get("language") != null && !jsonObj.get("language").isJsonNull()) && !jsonObj.get("language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language").toString()));
      }
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if ((jsonObj.get("messagesubject") != null && !jsonObj.get("messagesubject").isJsonNull()) && !jsonObj.get("messagesubject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `messagesubject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("messagesubject").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("relatedbadges") != null && !jsonObj.get("relatedbadges").isJsonNull()) {
        JsonArray jsonArrayrelatedbadges = jsonObj.getAsJsonArray("relatedbadges");
        if (jsonArrayrelatedbadges != null) {
          // ensure the json data is an array
          if (!jsonObj.get("relatedbadges").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `relatedbadges` to be an array in the JSON string but got `%s`", jsonObj.get("relatedbadges").toString()));
          }

          // validate the optional field `relatedbadges` (array)
          for (int i = 0; i < jsonArrayrelatedbadges.size(); i++) {
            CoreBadgesGetUserBadges200ResponseBadgesInnerRelatedbadgesInner.validateJsonElement(jsonArrayrelatedbadges.get(i));
          };
        }
      }
      if ((jsonObj.get("uniquehash") != null && !jsonObj.get("uniquehash").isJsonNull()) && !jsonObj.get("uniquehash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uniquehash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uniquehash").toString()));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CoreBadgesGetUserBadges200ResponseBadgesInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CoreBadgesGetUserBadges200ResponseBadgesInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CoreBadgesGetUserBadges200ResponseBadgesInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CoreBadgesGetUserBadges200ResponseBadgesInner.class));

       return (TypeAdapter<T>) new TypeAdapter<CoreBadgesGetUserBadges200ResponseBadgesInner>() {
           @Override
           public void write(JsonWriter out, CoreBadgesGetUserBadges200ResponseBadgesInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CoreBadgesGetUserBadges200ResponseBadgesInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CoreBadgesGetUserBadges200ResponseBadgesInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CoreBadgesGetUserBadges200ResponseBadgesInner
  * @throws IOException if the JSON string is invalid with respect to CoreBadgesGetUserBadges200ResponseBadgesInner
  */
  public static CoreBadgesGetUserBadges200ResponseBadgesInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CoreBadgesGetUserBadges200ResponseBadgesInner.class);
  }

 /**
  * Convert an instance of CoreBadgesGetUserBadges200ResponseBadgesInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

