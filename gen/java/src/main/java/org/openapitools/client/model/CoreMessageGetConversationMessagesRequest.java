/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.joshuapare.JSON;

/**
 * CoreMessageGetConversationMessagesRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-18T20:58:28.689161-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class CoreMessageGetConversationMessagesRequest {
  public static final String SERIALIZED_NAME_CONVID = "convid";
  @SerializedName(SERIALIZED_NAME_CONVID)
  private Integer convid;

  public static final String SERIALIZED_NAME_CURRENTUSERID = "currentuserid";
  @SerializedName(SERIALIZED_NAME_CURRENTUSERID)
  private Integer currentuserid = null;

  public static final String SERIALIZED_NAME_LIMITFROM = "limitfrom";
  @SerializedName(SERIALIZED_NAME_LIMITFROM)
  private Integer limitfrom = 0;

  public static final String SERIALIZED_NAME_LIMITNUM = "limitnum";
  @SerializedName(SERIALIZED_NAME_LIMITNUM)
  private Integer limitnum = 0;

  public static final String SERIALIZED_NAME_NEWEST = "newest";
  @SerializedName(SERIALIZED_NAME_NEWEST)
  private Boolean newest = false;

  public static final String SERIALIZED_NAME_TIMEFROM = "timefrom";
  @SerializedName(SERIALIZED_NAME_TIMEFROM)
  private Integer timefrom = 0;

  public CoreMessageGetConversationMessagesRequest() {
  }

  public CoreMessageGetConversationMessagesRequest convid(Integer convid) {
    this.convid = convid;
    return this;
  }

   /**
   * The conversation id
   * @return convid
  **/
  @javax.annotation.Nonnull
  public Integer getConvid() {
    return convid;
  }

  public void setConvid(Integer convid) {
    this.convid = convid;
  }


  public CoreMessageGetConversationMessagesRequest currentuserid(Integer currentuserid) {
    this.currentuserid = currentuserid;
    return this;
  }

   /**
   * The current user&#39;s id
   * @return currentuserid
  **/
  @javax.annotation.Nonnull
  public Integer getCurrentuserid() {
    return currentuserid;
  }

  public void setCurrentuserid(Integer currentuserid) {
    this.currentuserid = currentuserid;
  }


  public CoreMessageGetConversationMessagesRequest limitfrom(Integer limitfrom) {
    this.limitfrom = limitfrom;
    return this;
  }

   /**
   * Limit from
   * @return limitfrom
  **/
  @javax.annotation.Nullable
  public Integer getLimitfrom() {
    return limitfrom;
  }

  public void setLimitfrom(Integer limitfrom) {
    this.limitfrom = limitfrom;
  }


  public CoreMessageGetConversationMessagesRequest limitnum(Integer limitnum) {
    this.limitnum = limitnum;
    return this;
  }

   /**
   * Limit number
   * @return limitnum
  **/
  @javax.annotation.Nullable
  public Integer getLimitnum() {
    return limitnum;
  }

  public void setLimitnum(Integer limitnum) {
    this.limitnum = limitnum;
  }


  public CoreMessageGetConversationMessagesRequest newest(Boolean newest) {
    this.newest = newest;
    return this;
  }

   /**
   * Newest first?
   * @return newest
  **/
  @javax.annotation.Nullable
  public Boolean getNewest() {
    return newest;
  }

  public void setNewest(Boolean newest) {
    this.newest = newest;
  }


  public CoreMessageGetConversationMessagesRequest timefrom(Integer timefrom) {
    this.timefrom = timefrom;
    return this;
  }

   /**
   * The timestamp from which the messages were created
   * @return timefrom
  **/
  @javax.annotation.Nullable
  public Integer getTimefrom() {
    return timefrom;
  }

  public void setTimefrom(Integer timefrom) {
    this.timefrom = timefrom;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CoreMessageGetConversationMessagesRequest coreMessageGetConversationMessagesRequest = (CoreMessageGetConversationMessagesRequest) o;
    return Objects.equals(this.convid, coreMessageGetConversationMessagesRequest.convid) &&
        Objects.equals(this.currentuserid, coreMessageGetConversationMessagesRequest.currentuserid) &&
        Objects.equals(this.limitfrom, coreMessageGetConversationMessagesRequest.limitfrom) &&
        Objects.equals(this.limitnum, coreMessageGetConversationMessagesRequest.limitnum) &&
        Objects.equals(this.newest, coreMessageGetConversationMessagesRequest.newest) &&
        Objects.equals(this.timefrom, coreMessageGetConversationMessagesRequest.timefrom);
  }

  @Override
  public int hashCode() {
    return Objects.hash(convid, currentuserid, limitfrom, limitnum, newest, timefrom);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CoreMessageGetConversationMessagesRequest {\n");
    sb.append("    convid: ").append(toIndentedString(convid)).append("\n");
    sb.append("    currentuserid: ").append(toIndentedString(currentuserid)).append("\n");
    sb.append("    limitfrom: ").append(toIndentedString(limitfrom)).append("\n");
    sb.append("    limitnum: ").append(toIndentedString(limitnum)).append("\n");
    sb.append("    newest: ").append(toIndentedString(newest)).append("\n");
    sb.append("    timefrom: ").append(toIndentedString(timefrom)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("convid");
    openapiFields.add("currentuserid");
    openapiFields.add("limitfrom");
    openapiFields.add("limitnum");
    openapiFields.add("newest");
    openapiFields.add("timefrom");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("convid");
    openapiRequiredFields.add("currentuserid");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CoreMessageGetConversationMessagesRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CoreMessageGetConversationMessagesRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CoreMessageGetConversationMessagesRequest is not found in the empty JSON string", CoreMessageGetConversationMessagesRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CoreMessageGetConversationMessagesRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CoreMessageGetConversationMessagesRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CoreMessageGetConversationMessagesRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CoreMessageGetConversationMessagesRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CoreMessageGetConversationMessagesRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CoreMessageGetConversationMessagesRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CoreMessageGetConversationMessagesRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CoreMessageGetConversationMessagesRequest>() {
           @Override
           public void write(JsonWriter out, CoreMessageGetConversationMessagesRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CoreMessageGetConversationMessagesRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CoreMessageGetConversationMessagesRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CoreMessageGetConversationMessagesRequest
  * @throws IOException if the JSON string is invalid with respect to CoreMessageGetConversationMessagesRequest
  */
  public static CoreMessageGetConversationMessagesRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CoreMessageGetConversationMessagesRequest.class);
  }

 /**
  * Convert an instance of CoreMessageGetConversationMessagesRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

