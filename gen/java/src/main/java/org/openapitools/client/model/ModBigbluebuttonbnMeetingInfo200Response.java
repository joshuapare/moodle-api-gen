/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ModBigbluebuttonbnMeetingInfo200ResponseFeaturesInner;
import org.openapitools.client.model.ModBigbluebuttonbnMeetingInfo200ResponsePresentationsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.joshuapare.JSON;

/**
 * ModBigbluebuttonbnMeetingInfo200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-18T14:00:07.069642-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class ModBigbluebuttonbnMeetingInfo200Response {
  public static final String SERIALIZED_NAME_BIGBLUEBUTTONBNID = "bigbluebuttonbnid";
  @SerializedName(SERIALIZED_NAME_BIGBLUEBUTTONBNID)
  private String bigbluebuttonbnid = "null";

  public static final String SERIALIZED_NAME_CANJOIN = "canjoin";
  @SerializedName(SERIALIZED_NAME_CANJOIN)
  private Boolean canjoin = null;

  public static final String SERIALIZED_NAME_CLOSINGTIME = "closingtime";
  @SerializedName(SERIALIZED_NAME_CLOSINGTIME)
  private Integer closingtime = null;

  public static final String SERIALIZED_NAME_CMID = "cmid";
  @SerializedName(SERIALIZED_NAME_CMID)
  private Integer cmid = null;

  public static final String SERIALIZED_NAME_FEATURES = "features";
  @SerializedName(SERIALIZED_NAME_FEATURES)
  private List<ModBigbluebuttonbnMeetingInfo200ResponseFeaturesInner> features = new ArrayList<>();

  public static final String SERIALIZED_NAME_GROUPID = "groupid";
  @SerializedName(SERIALIZED_NAME_GROUPID)
  private Integer groupid = 0;

  public static final String SERIALIZED_NAME_GUESTACCESSENABLED = "guestaccessenabled";
  @SerializedName(SERIALIZED_NAME_GUESTACCESSENABLED)
  private Boolean guestaccessenabled = null;

  public static final String SERIALIZED_NAME_GUESTJOINURL = "guestjoinurl";
  @SerializedName(SERIALIZED_NAME_GUESTJOINURL)
  private String guestjoinurl = "null";

  public static final String SERIALIZED_NAME_GUESTPASSWORD = "guestpassword";
  @SerializedName(SERIALIZED_NAME_GUESTPASSWORD)
  private String guestpassword = "null";

  public static final String SERIALIZED_NAME_ISMODERATOR = "ismoderator";
  @SerializedName(SERIALIZED_NAME_ISMODERATOR)
  private Boolean ismoderator = null;

  public static final String SERIALIZED_NAME_JOINURL = "joinurl";
  @SerializedName(SERIALIZED_NAME_JOINURL)
  private String joinurl = "null";

  public static final String SERIALIZED_NAME_MEETINGID = "meetingid";
  @SerializedName(SERIALIZED_NAME_MEETINGID)
  private String meetingid;

  public static final String SERIALIZED_NAME_MODERATORCOUNT = "moderatorcount";
  @SerializedName(SERIALIZED_NAME_MODERATORCOUNT)
  private Integer moderatorcount = null;

  public static final String SERIALIZED_NAME_MODERATORPLURAL = "moderatorplural";
  @SerializedName(SERIALIZED_NAME_MODERATORPLURAL)
  private Boolean moderatorplural = null;

  public static final String SERIALIZED_NAME_OPENINGTIME = "openingtime";
  @SerializedName(SERIALIZED_NAME_OPENINGTIME)
  private Integer openingtime = null;

  public static final String SERIALIZED_NAME_PARTICIPANTCOUNT = "participantcount";
  @SerializedName(SERIALIZED_NAME_PARTICIPANTCOUNT)
  private Integer participantcount = null;

  public static final String SERIALIZED_NAME_PARTICIPANTPLURAL = "participantplural";
  @SerializedName(SERIALIZED_NAME_PARTICIPANTPLURAL)
  private Boolean participantplural = null;

  public static final String SERIALIZED_NAME_PRESENTATIONS = "presentations";
  @SerializedName(SERIALIZED_NAME_PRESENTATIONS)
  private List<ModBigbluebuttonbnMeetingInfo200ResponsePresentationsInner> presentations = new ArrayList<>();

  public static final String SERIALIZED_NAME_STARTEDAT = "startedat";
  @SerializedName(SERIALIZED_NAME_STARTEDAT)
  private Integer startedat = null;

  public static final String SERIALIZED_NAME_STATUSCLOSED = "statusclosed";
  @SerializedName(SERIALIZED_NAME_STATUSCLOSED)
  private Boolean statusclosed = null;

  public static final String SERIALIZED_NAME_STATUSMESSAGE = "statusmessage";
  @SerializedName(SERIALIZED_NAME_STATUSMESSAGE)
  private String statusmessage = "null";

  public static final String SERIALIZED_NAME_STATUSOPEN = "statusopen";
  @SerializedName(SERIALIZED_NAME_STATUSOPEN)
  private Boolean statusopen = null;

  public static final String SERIALIZED_NAME_STATUSRUNNING = "statusrunning";
  @SerializedName(SERIALIZED_NAME_STATUSRUNNING)
  private Boolean statusrunning = null;

  public static final String SERIALIZED_NAME_USERLIMIT = "userlimit";
  @SerializedName(SERIALIZED_NAME_USERLIMIT)
  private Integer userlimit = null;

  public ModBigbluebuttonbnMeetingInfo200Response() {
  }

  public ModBigbluebuttonbnMeetingInfo200Response bigbluebuttonbnid(String bigbluebuttonbnid) {
    this.bigbluebuttonbnid = bigbluebuttonbnid;
    return this;
  }

   /**
   * bigbluebuttonbn instance id
   * @return bigbluebuttonbnid
  **/
  @javax.annotation.Nonnull
  public String getBigbluebuttonbnid() {
    return bigbluebuttonbnid;
  }

  public void setBigbluebuttonbnid(String bigbluebuttonbnid) {
    this.bigbluebuttonbnid = bigbluebuttonbnid;
  }


  public ModBigbluebuttonbnMeetingInfo200Response canjoin(Boolean canjoin) {
    this.canjoin = canjoin;
    return this;
  }

   /**
   * Can join
   * @return canjoin
  **/
  @javax.annotation.Nonnull
  public Boolean getCanjoin() {
    return canjoin;
  }

  public void setCanjoin(Boolean canjoin) {
    this.canjoin = canjoin;
  }


  public ModBigbluebuttonbnMeetingInfo200Response closingtime(Integer closingtime) {
    this.closingtime = closingtime;
    return this;
  }

   /**
   * Closing time
   * @return closingtime
  **/
  @javax.annotation.Nullable
  public Integer getClosingtime() {
    return closingtime;
  }

  public void setClosingtime(Integer closingtime) {
    this.closingtime = closingtime;
  }


  public ModBigbluebuttonbnMeetingInfo200Response cmid(Integer cmid) {
    this.cmid = cmid;
    return this;
  }

   /**
   * CM id
   * @return cmid
  **/
  @javax.annotation.Nonnull
  public Integer getCmid() {
    return cmid;
  }

  public void setCmid(Integer cmid) {
    this.cmid = cmid;
  }


  public ModBigbluebuttonbnMeetingInfo200Response features(List<ModBigbluebuttonbnMeetingInfo200ResponseFeaturesInner> features) {
    this.features = features;
    return this;
  }

  public ModBigbluebuttonbnMeetingInfo200Response addFeaturesItem(ModBigbluebuttonbnMeetingInfo200ResponseFeaturesInner featuresItem) {
    if (this.features == null) {
      this.features = new ArrayList<>();
    }
    this.features.add(featuresItem);
    return this;
  }

   /**
   * Get features
   * @return features
  **/
  @javax.annotation.Nullable
  public List<ModBigbluebuttonbnMeetingInfo200ResponseFeaturesInner> getFeatures() {
    return features;
  }

  public void setFeatures(List<ModBigbluebuttonbnMeetingInfo200ResponseFeaturesInner> features) {
    this.features = features;
  }


  public ModBigbluebuttonbnMeetingInfo200Response groupid(Integer groupid) {
    this.groupid = groupid;
    return this;
  }

   /**
   * bigbluebuttonbn group id
   * @return groupid
  **/
  @javax.annotation.Nullable
  public Integer getGroupid() {
    return groupid;
  }

  public void setGroupid(Integer groupid) {
    this.groupid = groupid;
  }


  public ModBigbluebuttonbnMeetingInfo200Response guestaccessenabled(Boolean guestaccessenabled) {
    this.guestaccessenabled = guestaccessenabled;
    return this;
  }

   /**
   * Guest access enabled
   * @return guestaccessenabled
  **/
  @javax.annotation.Nullable
  public Boolean getGuestaccessenabled() {
    return guestaccessenabled;
  }

  public void setGuestaccessenabled(Boolean guestaccessenabled) {
    this.guestaccessenabled = guestaccessenabled;
  }


  public ModBigbluebuttonbnMeetingInfo200Response guestjoinurl(String guestjoinurl) {
    this.guestjoinurl = guestjoinurl;
    return this;
  }

   /**
   * Guest URL
   * @return guestjoinurl
  **/
  @javax.annotation.Nullable
  public String getGuestjoinurl() {
    return guestjoinurl;
  }

  public void setGuestjoinurl(String guestjoinurl) {
    this.guestjoinurl = guestjoinurl;
  }


  public ModBigbluebuttonbnMeetingInfo200Response guestpassword(String guestpassword) {
    this.guestpassword = guestpassword;
    return this;
  }

   /**
   * Guest join password
   * @return guestpassword
  **/
  @javax.annotation.Nullable
  public String getGuestpassword() {
    return guestpassword;
  }

  public void setGuestpassword(String guestpassword) {
    this.guestpassword = guestpassword;
  }


  public ModBigbluebuttonbnMeetingInfo200Response ismoderator(Boolean ismoderator) {
    this.ismoderator = ismoderator;
    return this;
  }

   /**
   * Is moderator
   * @return ismoderator
  **/
  @javax.annotation.Nonnull
  public Boolean getIsmoderator() {
    return ismoderator;
  }

  public void setIsmoderator(Boolean ismoderator) {
    this.ismoderator = ismoderator;
  }


  public ModBigbluebuttonbnMeetingInfo200Response joinurl(String joinurl) {
    this.joinurl = joinurl;
    return this;
  }

   /**
   * Join URL
   * @return joinurl
  **/
  @javax.annotation.Nonnull
  public String getJoinurl() {
    return joinurl;
  }

  public void setJoinurl(String joinurl) {
    this.joinurl = joinurl;
  }


  public ModBigbluebuttonbnMeetingInfo200Response meetingid(String meetingid) {
    this.meetingid = meetingid;
    return this;
  }

   /**
   * Meeting id
   * @return meetingid
  **/
  @javax.annotation.Nonnull
  public String getMeetingid() {
    return meetingid;
  }

  public void setMeetingid(String meetingid) {
    this.meetingid = meetingid;
  }


  public ModBigbluebuttonbnMeetingInfo200Response moderatorcount(Integer moderatorcount) {
    this.moderatorcount = moderatorcount;
    return this;
  }

   /**
   * Moderator count
   * @return moderatorcount
  **/
  @javax.annotation.Nullable
  public Integer getModeratorcount() {
    return moderatorcount;
  }

  public void setModeratorcount(Integer moderatorcount) {
    this.moderatorcount = moderatorcount;
  }


  public ModBigbluebuttonbnMeetingInfo200Response moderatorplural(Boolean moderatorplural) {
    this.moderatorplural = moderatorplural;
    return this;
  }

   /**
   * Several moderators ?
   * @return moderatorplural
  **/
  @javax.annotation.Nullable
  public Boolean getModeratorplural() {
    return moderatorplural;
  }

  public void setModeratorplural(Boolean moderatorplural) {
    this.moderatorplural = moderatorplural;
  }


  public ModBigbluebuttonbnMeetingInfo200Response openingtime(Integer openingtime) {
    this.openingtime = openingtime;
    return this;
  }

   /**
   * Opening time
   * @return openingtime
  **/
  @javax.annotation.Nullable
  public Integer getOpeningtime() {
    return openingtime;
  }

  public void setOpeningtime(Integer openingtime) {
    this.openingtime = openingtime;
  }


  public ModBigbluebuttonbnMeetingInfo200Response participantcount(Integer participantcount) {
    this.participantcount = participantcount;
    return this;
  }

   /**
   * Participant count
   * @return participantcount
  **/
  @javax.annotation.Nullable
  public Integer getParticipantcount() {
    return participantcount;
  }

  public void setParticipantcount(Integer participantcount) {
    this.participantcount = participantcount;
  }


  public ModBigbluebuttonbnMeetingInfo200Response participantplural(Boolean participantplural) {
    this.participantplural = participantplural;
    return this;
  }

   /**
   * Several participants ?
   * @return participantplural
  **/
  @javax.annotation.Nullable
  public Boolean getParticipantplural() {
    return participantplural;
  }

  public void setParticipantplural(Boolean participantplural) {
    this.participantplural = participantplural;
  }


  public ModBigbluebuttonbnMeetingInfo200Response presentations(List<ModBigbluebuttonbnMeetingInfo200ResponsePresentationsInner> presentations) {
    this.presentations = presentations;
    return this;
  }

  public ModBigbluebuttonbnMeetingInfo200Response addPresentationsItem(ModBigbluebuttonbnMeetingInfo200ResponsePresentationsInner presentationsItem) {
    if (this.presentations == null) {
      this.presentations = new ArrayList<>();
    }
    this.presentations.add(presentationsItem);
    return this;
  }

   /**
   * Get presentations
   * @return presentations
  **/
  @javax.annotation.Nonnull
  public List<ModBigbluebuttonbnMeetingInfo200ResponsePresentationsInner> getPresentations() {
    return presentations;
  }

  public void setPresentations(List<ModBigbluebuttonbnMeetingInfo200ResponsePresentationsInner> presentations) {
    this.presentations = presentations;
  }


  public ModBigbluebuttonbnMeetingInfo200Response startedat(Integer startedat) {
    this.startedat = startedat;
    return this;
  }

   /**
   * Started at
   * @return startedat
  **/
  @javax.annotation.Nullable
  public Integer getStartedat() {
    return startedat;
  }

  public void setStartedat(Integer startedat) {
    this.startedat = startedat;
  }


  public ModBigbluebuttonbnMeetingInfo200Response statusclosed(Boolean statusclosed) {
    this.statusclosed = statusclosed;
    return this;
  }

   /**
   * Status closed
   * @return statusclosed
  **/
  @javax.annotation.Nullable
  public Boolean getStatusclosed() {
    return statusclosed;
  }

  public void setStatusclosed(Boolean statusclosed) {
    this.statusclosed = statusclosed;
  }


  public ModBigbluebuttonbnMeetingInfo200Response statusmessage(String statusmessage) {
    this.statusmessage = statusmessage;
    return this;
  }

   /**
   * Status message
   * @return statusmessage
  **/
  @javax.annotation.Nullable
  public String getStatusmessage() {
    return statusmessage;
  }

  public void setStatusmessage(String statusmessage) {
    this.statusmessage = statusmessage;
  }


  public ModBigbluebuttonbnMeetingInfo200Response statusopen(Boolean statusopen) {
    this.statusopen = statusopen;
    return this;
  }

   /**
   * Status open
   * @return statusopen
  **/
  @javax.annotation.Nullable
  public Boolean getStatusopen() {
    return statusopen;
  }

  public void setStatusopen(Boolean statusopen) {
    this.statusopen = statusopen;
  }


  public ModBigbluebuttonbnMeetingInfo200Response statusrunning(Boolean statusrunning) {
    this.statusrunning = statusrunning;
    return this;
  }

   /**
   * Status running
   * @return statusrunning
  **/
  @javax.annotation.Nullable
  public Boolean getStatusrunning() {
    return statusrunning;
  }

  public void setStatusrunning(Boolean statusrunning) {
    this.statusrunning = statusrunning;
  }


  public ModBigbluebuttonbnMeetingInfo200Response userlimit(Integer userlimit) {
    this.userlimit = userlimit;
    return this;
  }

   /**
   * User limit
   * @return userlimit
  **/
  @javax.annotation.Nonnull
  public Integer getUserlimit() {
    return userlimit;
  }

  public void setUserlimit(Integer userlimit) {
    this.userlimit = userlimit;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModBigbluebuttonbnMeetingInfo200Response modBigbluebuttonbnMeetingInfo200Response = (ModBigbluebuttonbnMeetingInfo200Response) o;
    return Objects.equals(this.bigbluebuttonbnid, modBigbluebuttonbnMeetingInfo200Response.bigbluebuttonbnid) &&
        Objects.equals(this.canjoin, modBigbluebuttonbnMeetingInfo200Response.canjoin) &&
        Objects.equals(this.closingtime, modBigbluebuttonbnMeetingInfo200Response.closingtime) &&
        Objects.equals(this.cmid, modBigbluebuttonbnMeetingInfo200Response.cmid) &&
        Objects.equals(this.features, modBigbluebuttonbnMeetingInfo200Response.features) &&
        Objects.equals(this.groupid, modBigbluebuttonbnMeetingInfo200Response.groupid) &&
        Objects.equals(this.guestaccessenabled, modBigbluebuttonbnMeetingInfo200Response.guestaccessenabled) &&
        Objects.equals(this.guestjoinurl, modBigbluebuttonbnMeetingInfo200Response.guestjoinurl) &&
        Objects.equals(this.guestpassword, modBigbluebuttonbnMeetingInfo200Response.guestpassword) &&
        Objects.equals(this.ismoderator, modBigbluebuttonbnMeetingInfo200Response.ismoderator) &&
        Objects.equals(this.joinurl, modBigbluebuttonbnMeetingInfo200Response.joinurl) &&
        Objects.equals(this.meetingid, modBigbluebuttonbnMeetingInfo200Response.meetingid) &&
        Objects.equals(this.moderatorcount, modBigbluebuttonbnMeetingInfo200Response.moderatorcount) &&
        Objects.equals(this.moderatorplural, modBigbluebuttonbnMeetingInfo200Response.moderatorplural) &&
        Objects.equals(this.openingtime, modBigbluebuttonbnMeetingInfo200Response.openingtime) &&
        Objects.equals(this.participantcount, modBigbluebuttonbnMeetingInfo200Response.participantcount) &&
        Objects.equals(this.participantplural, modBigbluebuttonbnMeetingInfo200Response.participantplural) &&
        Objects.equals(this.presentations, modBigbluebuttonbnMeetingInfo200Response.presentations) &&
        Objects.equals(this.startedat, modBigbluebuttonbnMeetingInfo200Response.startedat) &&
        Objects.equals(this.statusclosed, modBigbluebuttonbnMeetingInfo200Response.statusclosed) &&
        Objects.equals(this.statusmessage, modBigbluebuttonbnMeetingInfo200Response.statusmessage) &&
        Objects.equals(this.statusopen, modBigbluebuttonbnMeetingInfo200Response.statusopen) &&
        Objects.equals(this.statusrunning, modBigbluebuttonbnMeetingInfo200Response.statusrunning) &&
        Objects.equals(this.userlimit, modBigbluebuttonbnMeetingInfo200Response.userlimit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bigbluebuttonbnid, canjoin, closingtime, cmid, features, groupid, guestaccessenabled, guestjoinurl, guestpassword, ismoderator, joinurl, meetingid, moderatorcount, moderatorplural, openingtime, participantcount, participantplural, presentations, startedat, statusclosed, statusmessage, statusopen, statusrunning, userlimit);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModBigbluebuttonbnMeetingInfo200Response {\n");
    sb.append("    bigbluebuttonbnid: ").append(toIndentedString(bigbluebuttonbnid)).append("\n");
    sb.append("    canjoin: ").append(toIndentedString(canjoin)).append("\n");
    sb.append("    closingtime: ").append(toIndentedString(closingtime)).append("\n");
    sb.append("    cmid: ").append(toIndentedString(cmid)).append("\n");
    sb.append("    features: ").append(toIndentedString(features)).append("\n");
    sb.append("    groupid: ").append(toIndentedString(groupid)).append("\n");
    sb.append("    guestaccessenabled: ").append(toIndentedString(guestaccessenabled)).append("\n");
    sb.append("    guestjoinurl: ").append(toIndentedString(guestjoinurl)).append("\n");
    sb.append("    guestpassword: ").append(toIndentedString(guestpassword)).append("\n");
    sb.append("    ismoderator: ").append(toIndentedString(ismoderator)).append("\n");
    sb.append("    joinurl: ").append(toIndentedString(joinurl)).append("\n");
    sb.append("    meetingid: ").append(toIndentedString(meetingid)).append("\n");
    sb.append("    moderatorcount: ").append(toIndentedString(moderatorcount)).append("\n");
    sb.append("    moderatorplural: ").append(toIndentedString(moderatorplural)).append("\n");
    sb.append("    openingtime: ").append(toIndentedString(openingtime)).append("\n");
    sb.append("    participantcount: ").append(toIndentedString(participantcount)).append("\n");
    sb.append("    participantplural: ").append(toIndentedString(participantplural)).append("\n");
    sb.append("    presentations: ").append(toIndentedString(presentations)).append("\n");
    sb.append("    startedat: ").append(toIndentedString(startedat)).append("\n");
    sb.append("    statusclosed: ").append(toIndentedString(statusclosed)).append("\n");
    sb.append("    statusmessage: ").append(toIndentedString(statusmessage)).append("\n");
    sb.append("    statusopen: ").append(toIndentedString(statusopen)).append("\n");
    sb.append("    statusrunning: ").append(toIndentedString(statusrunning)).append("\n");
    sb.append("    userlimit: ").append(toIndentedString(userlimit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bigbluebuttonbnid");
    openapiFields.add("canjoin");
    openapiFields.add("closingtime");
    openapiFields.add("cmid");
    openapiFields.add("features");
    openapiFields.add("groupid");
    openapiFields.add("guestaccessenabled");
    openapiFields.add("guestjoinurl");
    openapiFields.add("guestpassword");
    openapiFields.add("ismoderator");
    openapiFields.add("joinurl");
    openapiFields.add("meetingid");
    openapiFields.add("moderatorcount");
    openapiFields.add("moderatorplural");
    openapiFields.add("openingtime");
    openapiFields.add("participantcount");
    openapiFields.add("participantplural");
    openapiFields.add("presentations");
    openapiFields.add("startedat");
    openapiFields.add("statusclosed");
    openapiFields.add("statusmessage");
    openapiFields.add("statusopen");
    openapiFields.add("statusrunning");
    openapiFields.add("userlimit");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("bigbluebuttonbnid");
    openapiRequiredFields.add("canjoin");
    openapiRequiredFields.add("cmid");
    openapiRequiredFields.add("ismoderator");
    openapiRequiredFields.add("joinurl");
    openapiRequiredFields.add("meetingid");
    openapiRequiredFields.add("presentations");
    openapiRequiredFields.add("userlimit");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ModBigbluebuttonbnMeetingInfo200Response
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ModBigbluebuttonbnMeetingInfo200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModBigbluebuttonbnMeetingInfo200Response is not found in the empty JSON string", ModBigbluebuttonbnMeetingInfo200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ModBigbluebuttonbnMeetingInfo200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModBigbluebuttonbnMeetingInfo200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ModBigbluebuttonbnMeetingInfo200Response.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("bigbluebuttonbnid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bigbluebuttonbnid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bigbluebuttonbnid").toString()));
      }
      if (jsonObj.get("features") != null && !jsonObj.get("features").isJsonNull()) {
        JsonArray jsonArrayfeatures = jsonObj.getAsJsonArray("features");
        if (jsonArrayfeatures != null) {
          // ensure the json data is an array
          if (!jsonObj.get("features").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `features` to be an array in the JSON string but got `%s`", jsonObj.get("features").toString()));
          }

          // validate the optional field `features` (array)
          for (int i = 0; i < jsonArrayfeatures.size(); i++) {
            ModBigbluebuttonbnMeetingInfo200ResponseFeaturesInner.validateJsonElement(jsonArrayfeatures.get(i));
          };
        }
      }
      if ((jsonObj.get("guestjoinurl") != null && !jsonObj.get("guestjoinurl").isJsonNull()) && !jsonObj.get("guestjoinurl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `guestjoinurl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("guestjoinurl").toString()));
      }
      if ((jsonObj.get("guestpassword") != null && !jsonObj.get("guestpassword").isJsonNull()) && !jsonObj.get("guestpassword").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `guestpassword` to be a primitive type in the JSON string but got `%s`", jsonObj.get("guestpassword").toString()));
      }
      if (!jsonObj.get("joinurl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `joinurl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("joinurl").toString()));
      }
      if (!jsonObj.get("meetingid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `meetingid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("meetingid").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("presentations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `presentations` to be an array in the JSON string but got `%s`", jsonObj.get("presentations").toString()));
      }

      JsonArray jsonArraypresentations = jsonObj.getAsJsonArray("presentations");
      // validate the required field `presentations` (array)
      for (int i = 0; i < jsonArraypresentations.size(); i++) {
        ModBigbluebuttonbnMeetingInfo200ResponsePresentationsInner.validateJsonElement(jsonArraypresentations.get(i));
      };
      if ((jsonObj.get("statusmessage") != null && !jsonObj.get("statusmessage").isJsonNull()) && !jsonObj.get("statusmessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statusmessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statusmessage").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModBigbluebuttonbnMeetingInfo200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModBigbluebuttonbnMeetingInfo200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModBigbluebuttonbnMeetingInfo200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModBigbluebuttonbnMeetingInfo200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<ModBigbluebuttonbnMeetingInfo200Response>() {
           @Override
           public void write(JsonWriter out, ModBigbluebuttonbnMeetingInfo200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModBigbluebuttonbnMeetingInfo200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ModBigbluebuttonbnMeetingInfo200Response given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ModBigbluebuttonbnMeetingInfo200Response
  * @throws IOException if the JSON string is invalid with respect to ModBigbluebuttonbnMeetingInfo200Response
  */
  public static ModBigbluebuttonbnMeetingInfo200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModBigbluebuttonbnMeetingInfo200Response.class);
  }

 /**
  * Convert an instance of ModBigbluebuttonbnMeetingInfo200Response to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

