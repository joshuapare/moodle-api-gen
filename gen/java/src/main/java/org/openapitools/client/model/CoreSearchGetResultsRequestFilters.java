/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.joshuapare.JSON;

/**
 * CoreSearchGetResultsRequestFilters
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-18T14:00:07.069642-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class CoreSearchGetResultsRequestFilters {
  public static final String SERIALIZED_NAME_AREAIDS = "areaids";
  @SerializedName(SERIALIZED_NAME_AREAIDS)
  private List<Object> areaids = new ArrayList<>();

  public static final String SERIALIZED_NAME_CAT = "cat";
  @SerializedName(SERIALIZED_NAME_CAT)
  private String cat = "";

  public static final String SERIALIZED_NAME_CONTEXTIDS = "contextids";
  @SerializedName(SERIALIZED_NAME_CONTEXTIDS)
  private List<Object> contextids = new ArrayList<>();

  public static final String SERIALIZED_NAME_COURSEIDS = "courseids";
  @SerializedName(SERIALIZED_NAME_COURSEIDS)
  private List<Object> courseids = new ArrayList<>();

  public static final String SERIALIZED_NAME_GROUPIDS = "groupids";
  @SerializedName(SERIALIZED_NAME_GROUPIDS)
  private List<Object> groupids = new ArrayList<>();

  public static final String SERIALIZED_NAME_MYCOURSESONLY = "mycoursesonly";
  @SerializedName(SERIALIZED_NAME_MYCOURSESONLY)
  private Boolean mycoursesonly = false;

  public static final String SERIALIZED_NAME_ORDER = "order";
  @SerializedName(SERIALIZED_NAME_ORDER)
  private String order = "";

  public static final String SERIALIZED_NAME_TIMEEND = "timeend";
  @SerializedName(SERIALIZED_NAME_TIMEEND)
  private Integer timeend = 0;

  public static final String SERIALIZED_NAME_TIMESTART = "timestart";
  @SerializedName(SERIALIZED_NAME_TIMESTART)
  private Integer timestart = 0;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title = "null";

  public static final String SERIALIZED_NAME_USERIDS = "userids";
  @SerializedName(SERIALIZED_NAME_USERIDS)
  private List<Object> userids = new ArrayList<>();

  public CoreSearchGetResultsRequestFilters() {
  }

  public CoreSearchGetResultsRequestFilters areaids(List<Object> areaids) {
    this.areaids = areaids;
    return this;
  }

  public CoreSearchGetResultsRequestFilters addAreaidsItem(Object areaidsItem) {
    if (this.areaids == null) {
      this.areaids = new ArrayList<>();
    }
    this.areaids.add(areaidsItem);
    return this;
  }

   /**
   * Get areaids
   * @return areaids
  **/
  @javax.annotation.Nullable
  public List<Object> getAreaids() {
    return areaids;
  }

  public void setAreaids(List<Object> areaids) {
    this.areaids = areaids;
  }


  public CoreSearchGetResultsRequestFilters cat(String cat) {
    this.cat = cat;
    return this;
  }

   /**
   * category to filter areas
   * @return cat
  **/
  @javax.annotation.Nullable
  public String getCat() {
    return cat;
  }

  public void setCat(String cat) {
    this.cat = cat;
  }


  public CoreSearchGetResultsRequestFilters contextids(List<Object> contextids) {
    this.contextids = contextids;
    return this;
  }

  public CoreSearchGetResultsRequestFilters addContextidsItem(Object contextidsItem) {
    if (this.contextids == null) {
      this.contextids = new ArrayList<>();
    }
    this.contextids.add(contextidsItem);
    return this;
  }

   /**
   * Get contextids
   * @return contextids
  **/
  @javax.annotation.Nullable
  public List<Object> getContextids() {
    return contextids;
  }

  public void setContextids(List<Object> contextids) {
    this.contextids = contextids;
  }


  public CoreSearchGetResultsRequestFilters courseids(List<Object> courseids) {
    this.courseids = courseids;
    return this;
  }

  public CoreSearchGetResultsRequestFilters addCourseidsItem(Object courseidsItem) {
    if (this.courseids == null) {
      this.courseids = new ArrayList<>();
    }
    this.courseids.add(courseidsItem);
    return this;
  }

   /**
   * Get courseids
   * @return courseids
  **/
  @javax.annotation.Nullable
  public List<Object> getCourseids() {
    return courseids;
  }

  public void setCourseids(List<Object> courseids) {
    this.courseids = courseids;
  }


  public CoreSearchGetResultsRequestFilters groupids(List<Object> groupids) {
    this.groupids = groupids;
    return this;
  }

  public CoreSearchGetResultsRequestFilters addGroupidsItem(Object groupidsItem) {
    if (this.groupids == null) {
      this.groupids = new ArrayList<>();
    }
    this.groupids.add(groupidsItem);
    return this;
  }

   /**
   * Get groupids
   * @return groupids
  **/
  @javax.annotation.Nullable
  public List<Object> getGroupids() {
    return groupids;
  }

  public void setGroupids(List<Object> groupids) {
    this.groupids = groupids;
  }


  public CoreSearchGetResultsRequestFilters mycoursesonly(Boolean mycoursesonly) {
    this.mycoursesonly = mycoursesonly;
    return this;
  }

   /**
   * only results from my courses
   * @return mycoursesonly
  **/
  @javax.annotation.Nullable
  public Boolean getMycoursesonly() {
    return mycoursesonly;
  }

  public void setMycoursesonly(Boolean mycoursesonly) {
    this.mycoursesonly = mycoursesonly;
  }


  public CoreSearchGetResultsRequestFilters order(String order) {
    this.order = order;
    return this;
  }

   /**
   * how to order
   * @return order
  **/
  @javax.annotation.Nullable
  public String getOrder() {
    return order;
  }

  public void setOrder(String order) {
    this.order = order;
  }


  public CoreSearchGetResultsRequestFilters timeend(Integer timeend) {
    this.timeend = timeend;
    return this;
  }

   /**
   * docs modified before this date
   * @return timeend
  **/
  @javax.annotation.Nullable
  public Integer getTimeend() {
    return timeend;
  }

  public void setTimeend(Integer timeend) {
    this.timeend = timeend;
  }


  public CoreSearchGetResultsRequestFilters timestart(Integer timestart) {
    this.timestart = timestart;
    return this;
  }

   /**
   * docs modified after this date
   * @return timestart
  **/
  @javax.annotation.Nullable
  public Integer getTimestart() {
    return timestart;
  }

  public void setTimestart(Integer timestart) {
    this.timestart = timestart;
  }


  public CoreSearchGetResultsRequestFilters title(String title) {
    this.title = title;
    return this;
  }

   /**
   * result title
   * @return title
  **/
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public CoreSearchGetResultsRequestFilters userids(List<Object> userids) {
    this.userids = userids;
    return this;
  }

  public CoreSearchGetResultsRequestFilters addUseridsItem(Object useridsItem) {
    if (this.userids == null) {
      this.userids = new ArrayList<>();
    }
    this.userids.add(useridsItem);
    return this;
  }

   /**
   * Get userids
   * @return userids
  **/
  @javax.annotation.Nullable
  public List<Object> getUserids() {
    return userids;
  }

  public void setUserids(List<Object> userids) {
    this.userids = userids;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CoreSearchGetResultsRequestFilters coreSearchGetResultsRequestFilters = (CoreSearchGetResultsRequestFilters) o;
    return Objects.equals(this.areaids, coreSearchGetResultsRequestFilters.areaids) &&
        Objects.equals(this.cat, coreSearchGetResultsRequestFilters.cat) &&
        Objects.equals(this.contextids, coreSearchGetResultsRequestFilters.contextids) &&
        Objects.equals(this.courseids, coreSearchGetResultsRequestFilters.courseids) &&
        Objects.equals(this.groupids, coreSearchGetResultsRequestFilters.groupids) &&
        Objects.equals(this.mycoursesonly, coreSearchGetResultsRequestFilters.mycoursesonly) &&
        Objects.equals(this.order, coreSearchGetResultsRequestFilters.order) &&
        Objects.equals(this.timeend, coreSearchGetResultsRequestFilters.timeend) &&
        Objects.equals(this.timestart, coreSearchGetResultsRequestFilters.timestart) &&
        Objects.equals(this.title, coreSearchGetResultsRequestFilters.title) &&
        Objects.equals(this.userids, coreSearchGetResultsRequestFilters.userids);
  }

  @Override
  public int hashCode() {
    return Objects.hash(areaids, cat, contextids, courseids, groupids, mycoursesonly, order, timeend, timestart, title, userids);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CoreSearchGetResultsRequestFilters {\n");
    sb.append("    areaids: ").append(toIndentedString(areaids)).append("\n");
    sb.append("    cat: ").append(toIndentedString(cat)).append("\n");
    sb.append("    contextids: ").append(toIndentedString(contextids)).append("\n");
    sb.append("    courseids: ").append(toIndentedString(courseids)).append("\n");
    sb.append("    groupids: ").append(toIndentedString(groupids)).append("\n");
    sb.append("    mycoursesonly: ").append(toIndentedString(mycoursesonly)).append("\n");
    sb.append("    order: ").append(toIndentedString(order)).append("\n");
    sb.append("    timeend: ").append(toIndentedString(timeend)).append("\n");
    sb.append("    timestart: ").append(toIndentedString(timestart)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    userids: ").append(toIndentedString(userids)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("areaids");
    openapiFields.add("cat");
    openapiFields.add("contextids");
    openapiFields.add("courseids");
    openapiFields.add("groupids");
    openapiFields.add("mycoursesonly");
    openapiFields.add("order");
    openapiFields.add("timeend");
    openapiFields.add("timestart");
    openapiFields.add("title");
    openapiFields.add("userids");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CoreSearchGetResultsRequestFilters
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CoreSearchGetResultsRequestFilters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CoreSearchGetResultsRequestFilters is not found in the empty JSON string", CoreSearchGetResultsRequestFilters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CoreSearchGetResultsRequestFilters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CoreSearchGetResultsRequestFilters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("areaids") != null && !jsonObj.get("areaids").isJsonNull() && !jsonObj.get("areaids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `areaids` to be an array in the JSON string but got `%s`", jsonObj.get("areaids").toString()));
      }
      if ((jsonObj.get("cat") != null && !jsonObj.get("cat").isJsonNull()) && !jsonObj.get("cat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cat").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("contextids") != null && !jsonObj.get("contextids").isJsonNull() && !jsonObj.get("contextids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `contextids` to be an array in the JSON string but got `%s`", jsonObj.get("contextids").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("courseids") != null && !jsonObj.get("courseids").isJsonNull() && !jsonObj.get("courseids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `courseids` to be an array in the JSON string but got `%s`", jsonObj.get("courseids").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("groupids") != null && !jsonObj.get("groupids").isJsonNull() && !jsonObj.get("groupids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `groupids` to be an array in the JSON string but got `%s`", jsonObj.get("groupids").toString()));
      }
      if ((jsonObj.get("order") != null && !jsonObj.get("order").isJsonNull()) && !jsonObj.get("order").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `order` to be a primitive type in the JSON string but got `%s`", jsonObj.get("order").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("userids") != null && !jsonObj.get("userids").isJsonNull() && !jsonObj.get("userids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `userids` to be an array in the JSON string but got `%s`", jsonObj.get("userids").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CoreSearchGetResultsRequestFilters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CoreSearchGetResultsRequestFilters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CoreSearchGetResultsRequestFilters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CoreSearchGetResultsRequestFilters.class));

       return (TypeAdapter<T>) new TypeAdapter<CoreSearchGetResultsRequestFilters>() {
           @Override
           public void write(JsonWriter out, CoreSearchGetResultsRequestFilters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CoreSearchGetResultsRequestFilters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CoreSearchGetResultsRequestFilters given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CoreSearchGetResultsRequestFilters
  * @throws IOException if the JSON string is invalid with respect to CoreSearchGetResultsRequestFilters
  */
  public static CoreSearchGetResultsRequestFilters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CoreSearchGetResultsRequestFilters.class);
  }

 /**
  * Convert an instance of CoreSearchGetResultsRequestFilters to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

