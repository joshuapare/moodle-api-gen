/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ModAssignGetSubmissionStatus200ResponseFeedbackGrade;
import org.openapitools.client.model.ModAssignGetSubmissionStatus200ResponseLastattemptSubmissionPluginsInner;
import org.openapitools.client.model.ModAssignGetSubmissionStatus200ResponseLastattemptTeamsubmission;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.joshuapare.JSON;

/**
 * ModAssignGetSubmissionStatus200ResponsePreviousattemptsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-18T20:58:28.689161-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class ModAssignGetSubmissionStatus200ResponsePreviousattemptsInner {
  public static final String SERIALIZED_NAME_ATTEMPTNUMBER = "attemptnumber";
  @SerializedName(SERIALIZED_NAME_ATTEMPTNUMBER)
  private Integer attemptnumber = null;

  public static final String SERIALIZED_NAME_FEEDBACKPLUGINS = "feedbackplugins";
  @SerializedName(SERIALIZED_NAME_FEEDBACKPLUGINS)
  private List<ModAssignGetSubmissionStatus200ResponseLastattemptSubmissionPluginsInner> feedbackplugins = new ArrayList<>();

  public static final String SERIALIZED_NAME_GRADE = "grade";
  @SerializedName(SERIALIZED_NAME_GRADE)
  private ModAssignGetSubmissionStatus200ResponseFeedbackGrade grade;

  public static final String SERIALIZED_NAME_SUBMISSION = "submission";
  @SerializedName(SERIALIZED_NAME_SUBMISSION)
  private ModAssignGetSubmissionStatus200ResponseLastattemptTeamsubmission submission;

  public ModAssignGetSubmissionStatus200ResponsePreviousattemptsInner() {
  }

  public ModAssignGetSubmissionStatus200ResponsePreviousattemptsInner attemptnumber(Integer attemptnumber) {
    this.attemptnumber = attemptnumber;
    return this;
  }

   /**
   * Attempt number.
   * @return attemptnumber
  **/
  @javax.annotation.Nullable
  public Integer getAttemptnumber() {
    return attemptnumber;
  }

  public void setAttemptnumber(Integer attemptnumber) {
    this.attemptnumber = attemptnumber;
  }


  public ModAssignGetSubmissionStatus200ResponsePreviousattemptsInner feedbackplugins(List<ModAssignGetSubmissionStatus200ResponseLastattemptSubmissionPluginsInner> feedbackplugins) {
    this.feedbackplugins = feedbackplugins;
    return this;
  }

  public ModAssignGetSubmissionStatus200ResponsePreviousattemptsInner addFeedbackpluginsItem(ModAssignGetSubmissionStatus200ResponseLastattemptSubmissionPluginsInner feedbackpluginsItem) {
    if (this.feedbackplugins == null) {
      this.feedbackplugins = new ArrayList<>();
    }
    this.feedbackplugins.add(feedbackpluginsItem);
    return this;
  }

   /**
   * Get feedbackplugins
   * @return feedbackplugins
  **/
  @javax.annotation.Nullable
  public List<ModAssignGetSubmissionStatus200ResponseLastattemptSubmissionPluginsInner> getFeedbackplugins() {
    return feedbackplugins;
  }

  public void setFeedbackplugins(List<ModAssignGetSubmissionStatus200ResponseLastattemptSubmissionPluginsInner> feedbackplugins) {
    this.feedbackplugins = feedbackplugins;
  }


  public ModAssignGetSubmissionStatus200ResponsePreviousattemptsInner grade(ModAssignGetSubmissionStatus200ResponseFeedbackGrade grade) {
    this.grade = grade;
    return this;
  }

   /**
   * Get grade
   * @return grade
  **/
  @javax.annotation.Nullable
  public ModAssignGetSubmissionStatus200ResponseFeedbackGrade getGrade() {
    return grade;
  }

  public void setGrade(ModAssignGetSubmissionStatus200ResponseFeedbackGrade grade) {
    this.grade = grade;
  }


  public ModAssignGetSubmissionStatus200ResponsePreviousattemptsInner submission(ModAssignGetSubmissionStatus200ResponseLastattemptTeamsubmission submission) {
    this.submission = submission;
    return this;
  }

   /**
   * Get submission
   * @return submission
  **/
  @javax.annotation.Nullable
  public ModAssignGetSubmissionStatus200ResponseLastattemptTeamsubmission getSubmission() {
    return submission;
  }

  public void setSubmission(ModAssignGetSubmissionStatus200ResponseLastattemptTeamsubmission submission) {
    this.submission = submission;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModAssignGetSubmissionStatus200ResponsePreviousattemptsInner modAssignGetSubmissionStatus200ResponsePreviousattemptsInner = (ModAssignGetSubmissionStatus200ResponsePreviousattemptsInner) o;
    return Objects.equals(this.attemptnumber, modAssignGetSubmissionStatus200ResponsePreviousattemptsInner.attemptnumber) &&
        Objects.equals(this.feedbackplugins, modAssignGetSubmissionStatus200ResponsePreviousattemptsInner.feedbackplugins) &&
        Objects.equals(this.grade, modAssignGetSubmissionStatus200ResponsePreviousattemptsInner.grade) &&
        Objects.equals(this.submission, modAssignGetSubmissionStatus200ResponsePreviousattemptsInner.submission);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attemptnumber, feedbackplugins, grade, submission);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModAssignGetSubmissionStatus200ResponsePreviousattemptsInner {\n");
    sb.append("    attemptnumber: ").append(toIndentedString(attemptnumber)).append("\n");
    sb.append("    feedbackplugins: ").append(toIndentedString(feedbackplugins)).append("\n");
    sb.append("    grade: ").append(toIndentedString(grade)).append("\n");
    sb.append("    submission: ").append(toIndentedString(submission)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attemptnumber");
    openapiFields.add("feedbackplugins");
    openapiFields.add("grade");
    openapiFields.add("submission");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ModAssignGetSubmissionStatus200ResponsePreviousattemptsInner
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ModAssignGetSubmissionStatus200ResponsePreviousattemptsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModAssignGetSubmissionStatus200ResponsePreviousattemptsInner is not found in the empty JSON string", ModAssignGetSubmissionStatus200ResponsePreviousattemptsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ModAssignGetSubmissionStatus200ResponsePreviousattemptsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModAssignGetSubmissionStatus200ResponsePreviousattemptsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("feedbackplugins") != null && !jsonObj.get("feedbackplugins").isJsonNull()) {
        JsonArray jsonArrayfeedbackplugins = jsonObj.getAsJsonArray("feedbackplugins");
        if (jsonArrayfeedbackplugins != null) {
          // ensure the json data is an array
          if (!jsonObj.get("feedbackplugins").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `feedbackplugins` to be an array in the JSON string but got `%s`", jsonObj.get("feedbackplugins").toString()));
          }

          // validate the optional field `feedbackplugins` (array)
          for (int i = 0; i < jsonArrayfeedbackplugins.size(); i++) {
            ModAssignGetSubmissionStatus200ResponseLastattemptSubmissionPluginsInner.validateJsonElement(jsonArrayfeedbackplugins.get(i));
          };
        }
      }
      // validate the optional field `grade`
      if (jsonObj.get("grade") != null && !jsonObj.get("grade").isJsonNull()) {
        ModAssignGetSubmissionStatus200ResponseFeedbackGrade.validateJsonElement(jsonObj.get("grade"));
      }
      // validate the optional field `submission`
      if (jsonObj.get("submission") != null && !jsonObj.get("submission").isJsonNull()) {
        ModAssignGetSubmissionStatus200ResponseLastattemptTeamsubmission.validateJsonElement(jsonObj.get("submission"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModAssignGetSubmissionStatus200ResponsePreviousattemptsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModAssignGetSubmissionStatus200ResponsePreviousattemptsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModAssignGetSubmissionStatus200ResponsePreviousattemptsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModAssignGetSubmissionStatus200ResponsePreviousattemptsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ModAssignGetSubmissionStatus200ResponsePreviousattemptsInner>() {
           @Override
           public void write(JsonWriter out, ModAssignGetSubmissionStatus200ResponsePreviousattemptsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModAssignGetSubmissionStatus200ResponsePreviousattemptsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ModAssignGetSubmissionStatus200ResponsePreviousattemptsInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ModAssignGetSubmissionStatus200ResponsePreviousattemptsInner
  * @throws IOException if the JSON string is invalid with respect to ModAssignGetSubmissionStatus200ResponsePreviousattemptsInner
  */
  public static ModAssignGetSubmissionStatus200ResponsePreviousattemptsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModAssignGetSubmissionStatus200ResponsePreviousattemptsInner.class);
  }

 /**
  * Convert an instance of ModAssignGetSubmissionStatus200ResponsePreviousattemptsInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

