/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ModChatGetSessions200ResponseSessionsInnerSessionusersInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.joshuapare.JSON;

/**
 * ModChatGetSessions200ResponseSessionsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-18T20:58:28.689161-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class ModChatGetSessions200ResponseSessionsInner {
  public static final String SERIALIZED_NAME_ISCOMPLETE = "iscomplete";
  @SerializedName(SERIALIZED_NAME_ISCOMPLETE)
  private Boolean iscomplete = null;

  public static final String SERIALIZED_NAME_SESSIONEND = "sessionend";
  @SerializedName(SERIALIZED_NAME_SESSIONEND)
  private Integer sessionend = null;

  public static final String SERIALIZED_NAME_SESSIONSTART = "sessionstart";
  @SerializedName(SERIALIZED_NAME_SESSIONSTART)
  private Integer sessionstart = null;

  public static final String SERIALIZED_NAME_SESSIONUSERS = "sessionusers";
  @SerializedName(SERIALIZED_NAME_SESSIONUSERS)
  private List<ModChatGetSessions200ResponseSessionsInnerSessionusersInner> sessionusers = new ArrayList<>();

  public ModChatGetSessions200ResponseSessionsInner() {
  }

  public ModChatGetSessions200ResponseSessionsInner iscomplete(Boolean iscomplete) {
    this.iscomplete = iscomplete;
    return this;
  }

   /**
   * Whether the session is completed or not.
   * @return iscomplete
  **/
  @javax.annotation.Nullable
  public Boolean getIscomplete() {
    return iscomplete;
  }

  public void setIscomplete(Boolean iscomplete) {
    this.iscomplete = iscomplete;
  }


  public ModChatGetSessions200ResponseSessionsInner sessionend(Integer sessionend) {
    this.sessionend = sessionend;
    return this;
  }

   /**
   * Session end time.
   * @return sessionend
  **/
  @javax.annotation.Nullable
  public Integer getSessionend() {
    return sessionend;
  }

  public void setSessionend(Integer sessionend) {
    this.sessionend = sessionend;
  }


  public ModChatGetSessions200ResponseSessionsInner sessionstart(Integer sessionstart) {
    this.sessionstart = sessionstart;
    return this;
  }

   /**
   * Session start time.
   * @return sessionstart
  **/
  @javax.annotation.Nullable
  public Integer getSessionstart() {
    return sessionstart;
  }

  public void setSessionstart(Integer sessionstart) {
    this.sessionstart = sessionstart;
  }


  public ModChatGetSessions200ResponseSessionsInner sessionusers(List<ModChatGetSessions200ResponseSessionsInnerSessionusersInner> sessionusers) {
    this.sessionusers = sessionusers;
    return this;
  }

  public ModChatGetSessions200ResponseSessionsInner addSessionusersItem(ModChatGetSessions200ResponseSessionsInnerSessionusersInner sessionusersItem) {
    if (this.sessionusers == null) {
      this.sessionusers = new ArrayList<>();
    }
    this.sessionusers.add(sessionusersItem);
    return this;
  }

   /**
   * Get sessionusers
   * @return sessionusers
  **/
  @javax.annotation.Nullable
  public List<ModChatGetSessions200ResponseSessionsInnerSessionusersInner> getSessionusers() {
    return sessionusers;
  }

  public void setSessionusers(List<ModChatGetSessions200ResponseSessionsInnerSessionusersInner> sessionusers) {
    this.sessionusers = sessionusers;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModChatGetSessions200ResponseSessionsInner modChatGetSessions200ResponseSessionsInner = (ModChatGetSessions200ResponseSessionsInner) o;
    return Objects.equals(this.iscomplete, modChatGetSessions200ResponseSessionsInner.iscomplete) &&
        Objects.equals(this.sessionend, modChatGetSessions200ResponseSessionsInner.sessionend) &&
        Objects.equals(this.sessionstart, modChatGetSessions200ResponseSessionsInner.sessionstart) &&
        Objects.equals(this.sessionusers, modChatGetSessions200ResponseSessionsInner.sessionusers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(iscomplete, sessionend, sessionstart, sessionusers);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModChatGetSessions200ResponseSessionsInner {\n");
    sb.append("    iscomplete: ").append(toIndentedString(iscomplete)).append("\n");
    sb.append("    sessionend: ").append(toIndentedString(sessionend)).append("\n");
    sb.append("    sessionstart: ").append(toIndentedString(sessionstart)).append("\n");
    sb.append("    sessionusers: ").append(toIndentedString(sessionusers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("iscomplete");
    openapiFields.add("sessionend");
    openapiFields.add("sessionstart");
    openapiFields.add("sessionusers");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ModChatGetSessions200ResponseSessionsInner
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ModChatGetSessions200ResponseSessionsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModChatGetSessions200ResponseSessionsInner is not found in the empty JSON string", ModChatGetSessions200ResponseSessionsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ModChatGetSessions200ResponseSessionsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModChatGetSessions200ResponseSessionsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("sessionusers") != null && !jsonObj.get("sessionusers").isJsonNull()) {
        JsonArray jsonArraysessionusers = jsonObj.getAsJsonArray("sessionusers");
        if (jsonArraysessionusers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("sessionusers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `sessionusers` to be an array in the JSON string but got `%s`", jsonObj.get("sessionusers").toString()));
          }

          // validate the optional field `sessionusers` (array)
          for (int i = 0; i < jsonArraysessionusers.size(); i++) {
            ModChatGetSessions200ResponseSessionsInnerSessionusersInner.validateJsonElement(jsonArraysessionusers.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModChatGetSessions200ResponseSessionsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModChatGetSessions200ResponseSessionsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModChatGetSessions200ResponseSessionsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModChatGetSessions200ResponseSessionsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ModChatGetSessions200ResponseSessionsInner>() {
           @Override
           public void write(JsonWriter out, ModChatGetSessions200ResponseSessionsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModChatGetSessions200ResponseSessionsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ModChatGetSessions200ResponseSessionsInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ModChatGetSessions200ResponseSessionsInner
  * @throws IOException if the JSON string is invalid with respect to ModChatGetSessions200ResponseSessionsInner
  */
  public static ModChatGetSessions200ResponseSessionsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModChatGetSessions200ResponseSessionsInner.class);
  }

 /**
  * Convert an instance of ModChatGetSessions200ResponseSessionsInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

