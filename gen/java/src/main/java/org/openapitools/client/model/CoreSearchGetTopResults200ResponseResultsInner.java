/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.joshuapare.JSON;

/**
 * CoreSearchGetTopResults200ResponseResultsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-18T20:58:28.689161-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class CoreSearchGetTopResults200ResponseResultsInner {
  public static final String SERIALIZED_NAME_AREANAME = "areaname";
  @SerializedName(SERIALIZED_NAME_AREANAME)
  private String areaname;

  public static final String SERIALIZED_NAME_COMPONENTNAME = "componentname";
  @SerializedName(SERIALIZED_NAME_COMPONENTNAME)
  private String componentname;

  public static final String SERIALIZED_NAME_CONTENT = "content";
  @SerializedName(SERIALIZED_NAME_CONTENT)
  private String content = "";

  public static final String SERIALIZED_NAME_CONTEXTID = "contextid";
  @SerializedName(SERIALIZED_NAME_CONTEXTID)
  private Integer contextid;

  public static final String SERIALIZED_NAME_CONTEXTURL = "contexturl";
  @SerializedName(SERIALIZED_NAME_CONTEXTURL)
  private String contexturl;

  public static final String SERIALIZED_NAME_COURSEFULLNAME = "coursefullname";
  @SerializedName(SERIALIZED_NAME_COURSEFULLNAME)
  private String coursefullname;

  public static final String SERIALIZED_NAME_COURSEURL = "courseurl";
  @SerializedName(SERIALIZED_NAME_COURSEURL)
  private String courseurl;

  public static final String SERIALIZED_NAME_DESCRIPTION1 = "description1";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION1)
  private String description1 = "";

  public static final String SERIALIZED_NAME_DESCRIPTION2 = "description2";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION2)
  private String description2 = "";

  public static final String SERIALIZED_NAME_DOCURL = "docurl";
  @SerializedName(SERIALIZED_NAME_DOCURL)
  private String docurl;

  public static final String SERIALIZED_NAME_FILENAME = "filename";
  @SerializedName(SERIALIZED_NAME_FILENAME)
  private String filename;

  public static final String SERIALIZED_NAME_FILENAMES = "filenames";
  @SerializedName(SERIALIZED_NAME_FILENAMES)
  private String filenames;

  public static final String SERIALIZED_NAME_ICONURL = "iconurl";
  @SerializedName(SERIALIZED_NAME_ICONURL)
  private String iconurl = "";

  public static final String SERIALIZED_NAME_ITEMID = "itemid";
  @SerializedName(SERIALIZED_NAME_ITEMID)
  private Integer itemid;

  public static final String SERIALIZED_NAME_MULTIPLEFILES = "multiplefiles";
  @SerializedName(SERIALIZED_NAME_MULTIPLEFILES)
  private Integer multiplefiles;

  public static final String SERIALIZED_NAME_TEXTFORMAT = "textformat";
  @SerializedName(SERIALIZED_NAME_TEXTFORMAT)
  private Integer textformat;

  public static final String SERIALIZED_NAME_TIMEMODIFIED = "timemodified";
  @SerializedName(SERIALIZED_NAME_TIMEMODIFIED)
  private Integer timemodified;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_USERFULLNAME = "userfullname";
  @SerializedName(SERIALIZED_NAME_USERFULLNAME)
  private String userfullname;

  public static final String SERIALIZED_NAME_USERID = "userid";
  @SerializedName(SERIALIZED_NAME_USERID)
  private Integer userid;

  public static final String SERIALIZED_NAME_USERURL = "userurl";
  @SerializedName(SERIALIZED_NAME_USERURL)
  private String userurl;

  public CoreSearchGetTopResults200ResponseResultsInner() {
  }

  public CoreSearchGetTopResults200ResponseResultsInner areaname(String areaname) {
    this.areaname = areaname;
    return this;
  }

   /**
   * search area name
   * @return areaname
  **/
  @javax.annotation.Nullable
  public String getAreaname() {
    return areaname;
  }

  public void setAreaname(String areaname) {
    this.areaname = areaname;
  }


  public CoreSearchGetTopResults200ResponseResultsInner componentname(String componentname) {
    this.componentname = componentname;
    return this;
  }

   /**
   * component name
   * @return componentname
  **/
  @javax.annotation.Nullable
  public String getComponentname() {
    return componentname;
  }

  public void setComponentname(String componentname) {
    this.componentname = componentname;
  }


  public CoreSearchGetTopResults200ResponseResultsInner content(String content) {
    this.content = content;
    return this;
  }

   /**
   * result contents
   * @return content
  **/
  @javax.annotation.Nullable
  public String getContent() {
    return content;
  }

  public void setContent(String content) {
    this.content = content;
  }


  public CoreSearchGetTopResults200ResponseResultsInner contextid(Integer contextid) {
    this.contextid = contextid;
    return this;
  }

   /**
   * result context id
   * @return contextid
  **/
  @javax.annotation.Nullable
  public Integer getContextid() {
    return contextid;
  }

  public void setContextid(Integer contextid) {
    this.contextid = contextid;
  }


  public CoreSearchGetTopResults200ResponseResultsInner contexturl(String contexturl) {
    this.contexturl = contexturl;
    return this;
  }

   /**
   * result context url
   * @return contexturl
  **/
  @javax.annotation.Nullable
  public String getContexturl() {
    return contexturl;
  }

  public void setContexturl(String contexturl) {
    this.contexturl = contexturl;
  }


  public CoreSearchGetTopResults200ResponseResultsInner coursefullname(String coursefullname) {
    this.coursefullname = coursefullname;
    return this;
  }

   /**
   * result course fullname
   * @return coursefullname
  **/
  @javax.annotation.Nullable
  public String getCoursefullname() {
    return coursefullname;
  }

  public void setCoursefullname(String coursefullname) {
    this.coursefullname = coursefullname;
  }


  public CoreSearchGetTopResults200ResponseResultsInner courseurl(String courseurl) {
    this.courseurl = courseurl;
    return this;
  }

   /**
   * result course url
   * @return courseurl
  **/
  @javax.annotation.Nullable
  public String getCourseurl() {
    return courseurl;
  }

  public void setCourseurl(String courseurl) {
    this.courseurl = courseurl;
  }


  public CoreSearchGetTopResults200ResponseResultsInner description1(String description1) {
    this.description1 = description1;
    return this;
  }

   /**
   * extra result contents, depends on the search area
   * @return description1
  **/
  @javax.annotation.Nullable
  public String getDescription1() {
    return description1;
  }

  public void setDescription1(String description1) {
    this.description1 = description1;
  }


  public CoreSearchGetTopResults200ResponseResultsInner description2(String description2) {
    this.description2 = description2;
    return this;
  }

   /**
   * extra result contents, depends on the search area
   * @return description2
  **/
  @javax.annotation.Nullable
  public String getDescription2() {
    return description2;
  }

  public void setDescription2(String description2) {
    this.description2 = description2;
  }


  public CoreSearchGetTopResults200ResponseResultsInner docurl(String docurl) {
    this.docurl = docurl;
    return this;
  }

   /**
   * result url
   * @return docurl
  **/
  @javax.annotation.Nullable
  public String getDocurl() {
    return docurl;
  }

  public void setDocurl(String docurl) {
    this.docurl = docurl;
  }


  public CoreSearchGetTopResults200ResponseResultsInner filename(String filename) {
    this.filename = filename;
    return this;
  }

   /**
   * result file name if present
   * @return filename
  **/
  @javax.annotation.Nullable
  public String getFilename() {
    return filename;
  }

  public void setFilename(String filename) {
    this.filename = filename;
  }


  public CoreSearchGetTopResults200ResponseResultsInner filenames(String filenames) {
    this.filenames = filenames;
    return this;
  }

   /**
   * result file names if present
   * @return filenames
  **/
  @javax.annotation.Nullable
  public String getFilenames() {
    return filenames;
  }

  public void setFilenames(String filenames) {
    this.filenames = filenames;
  }


  public CoreSearchGetTopResults200ResponseResultsInner iconurl(String iconurl) {
    this.iconurl = iconurl;
    return this;
  }

   /**
   * icon url
   * @return iconurl
  **/
  @javax.annotation.Nullable
  public String getIconurl() {
    return iconurl;
  }

  public void setIconurl(String iconurl) {
    this.iconurl = iconurl;
  }


  public CoreSearchGetTopResults200ResponseResultsInner itemid(Integer itemid) {
    this.itemid = itemid;
    return this;
  }

   /**
   * unique id in the search area scope
   * @return itemid
  **/
  @javax.annotation.Nullable
  public Integer getItemid() {
    return itemid;
  }

  public void setItemid(Integer itemid) {
    this.itemid = itemid;
  }


  public CoreSearchGetTopResults200ResponseResultsInner multiplefiles(Integer multiplefiles) {
    this.multiplefiles = multiplefiles;
    return this;
  }

   /**
   * whether multiple files are returned or not
   * @return multiplefiles
  **/
  @javax.annotation.Nullable
  public Integer getMultiplefiles() {
    return multiplefiles;
  }

  public void setMultiplefiles(Integer multiplefiles) {
    this.multiplefiles = multiplefiles;
  }


  public CoreSearchGetTopResults200ResponseResultsInner textformat(Integer textformat) {
    this.textformat = textformat;
    return this;
  }

   /**
   * text fields format, it is the same for all of them
   * @return textformat
  **/
  @javax.annotation.Nullable
  public Integer getTextformat() {
    return textformat;
  }

  public void setTextformat(Integer textformat) {
    this.textformat = textformat;
  }


  public CoreSearchGetTopResults200ResponseResultsInner timemodified(Integer timemodified) {
    this.timemodified = timemodified;
    return this;
  }

   /**
   * result modified time
   * @return timemodified
  **/
  @javax.annotation.Nullable
  public Integer getTimemodified() {
    return timemodified;
  }

  public void setTimemodified(Integer timemodified) {
    this.timemodified = timemodified;
  }


  public CoreSearchGetTopResults200ResponseResultsInner title(String title) {
    this.title = title;
    return this;
  }

   /**
   * result title
   * @return title
  **/
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public CoreSearchGetTopResults200ResponseResultsInner userfullname(String userfullname) {
    this.userfullname = userfullname;
    return this;
  }

   /**
   * user fullname
   * @return userfullname
  **/
  @javax.annotation.Nullable
  public String getUserfullname() {
    return userfullname;
  }

  public void setUserfullname(String userfullname) {
    this.userfullname = userfullname;
  }


  public CoreSearchGetTopResults200ResponseResultsInner userid(Integer userid) {
    this.userid = userid;
    return this;
  }

   /**
   * user id
   * @return userid
  **/
  @javax.annotation.Nullable
  public Integer getUserid() {
    return userid;
  }

  public void setUserid(Integer userid) {
    this.userid = userid;
  }


  public CoreSearchGetTopResults200ResponseResultsInner userurl(String userurl) {
    this.userurl = userurl;
    return this;
  }

   /**
   * user url
   * @return userurl
  **/
  @javax.annotation.Nullable
  public String getUserurl() {
    return userurl;
  }

  public void setUserurl(String userurl) {
    this.userurl = userurl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CoreSearchGetTopResults200ResponseResultsInner coreSearchGetTopResults200ResponseResultsInner = (CoreSearchGetTopResults200ResponseResultsInner) o;
    return Objects.equals(this.areaname, coreSearchGetTopResults200ResponseResultsInner.areaname) &&
        Objects.equals(this.componentname, coreSearchGetTopResults200ResponseResultsInner.componentname) &&
        Objects.equals(this.content, coreSearchGetTopResults200ResponseResultsInner.content) &&
        Objects.equals(this.contextid, coreSearchGetTopResults200ResponseResultsInner.contextid) &&
        Objects.equals(this.contexturl, coreSearchGetTopResults200ResponseResultsInner.contexturl) &&
        Objects.equals(this.coursefullname, coreSearchGetTopResults200ResponseResultsInner.coursefullname) &&
        Objects.equals(this.courseurl, coreSearchGetTopResults200ResponseResultsInner.courseurl) &&
        Objects.equals(this.description1, coreSearchGetTopResults200ResponseResultsInner.description1) &&
        Objects.equals(this.description2, coreSearchGetTopResults200ResponseResultsInner.description2) &&
        Objects.equals(this.docurl, coreSearchGetTopResults200ResponseResultsInner.docurl) &&
        Objects.equals(this.filename, coreSearchGetTopResults200ResponseResultsInner.filename) &&
        Objects.equals(this.filenames, coreSearchGetTopResults200ResponseResultsInner.filenames) &&
        Objects.equals(this.iconurl, coreSearchGetTopResults200ResponseResultsInner.iconurl) &&
        Objects.equals(this.itemid, coreSearchGetTopResults200ResponseResultsInner.itemid) &&
        Objects.equals(this.multiplefiles, coreSearchGetTopResults200ResponseResultsInner.multiplefiles) &&
        Objects.equals(this.textformat, coreSearchGetTopResults200ResponseResultsInner.textformat) &&
        Objects.equals(this.timemodified, coreSearchGetTopResults200ResponseResultsInner.timemodified) &&
        Objects.equals(this.title, coreSearchGetTopResults200ResponseResultsInner.title) &&
        Objects.equals(this.userfullname, coreSearchGetTopResults200ResponseResultsInner.userfullname) &&
        Objects.equals(this.userid, coreSearchGetTopResults200ResponseResultsInner.userid) &&
        Objects.equals(this.userurl, coreSearchGetTopResults200ResponseResultsInner.userurl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(areaname, componentname, content, contextid, contexturl, coursefullname, courseurl, description1, description2, docurl, filename, filenames, iconurl, itemid, multiplefiles, textformat, timemodified, title, userfullname, userid, userurl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CoreSearchGetTopResults200ResponseResultsInner {\n");
    sb.append("    areaname: ").append(toIndentedString(areaname)).append("\n");
    sb.append("    componentname: ").append(toIndentedString(componentname)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    contextid: ").append(toIndentedString(contextid)).append("\n");
    sb.append("    contexturl: ").append(toIndentedString(contexturl)).append("\n");
    sb.append("    coursefullname: ").append(toIndentedString(coursefullname)).append("\n");
    sb.append("    courseurl: ").append(toIndentedString(courseurl)).append("\n");
    sb.append("    description1: ").append(toIndentedString(description1)).append("\n");
    sb.append("    description2: ").append(toIndentedString(description2)).append("\n");
    sb.append("    docurl: ").append(toIndentedString(docurl)).append("\n");
    sb.append("    filename: ").append(toIndentedString(filename)).append("\n");
    sb.append("    filenames: ").append(toIndentedString(filenames)).append("\n");
    sb.append("    iconurl: ").append(toIndentedString(iconurl)).append("\n");
    sb.append("    itemid: ").append(toIndentedString(itemid)).append("\n");
    sb.append("    multiplefiles: ").append(toIndentedString(multiplefiles)).append("\n");
    sb.append("    textformat: ").append(toIndentedString(textformat)).append("\n");
    sb.append("    timemodified: ").append(toIndentedString(timemodified)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    userfullname: ").append(toIndentedString(userfullname)).append("\n");
    sb.append("    userid: ").append(toIndentedString(userid)).append("\n");
    sb.append("    userurl: ").append(toIndentedString(userurl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("areaname");
    openapiFields.add("componentname");
    openapiFields.add("content");
    openapiFields.add("contextid");
    openapiFields.add("contexturl");
    openapiFields.add("coursefullname");
    openapiFields.add("courseurl");
    openapiFields.add("description1");
    openapiFields.add("description2");
    openapiFields.add("docurl");
    openapiFields.add("filename");
    openapiFields.add("filenames");
    openapiFields.add("iconurl");
    openapiFields.add("itemid");
    openapiFields.add("multiplefiles");
    openapiFields.add("textformat");
    openapiFields.add("timemodified");
    openapiFields.add("title");
    openapiFields.add("userfullname");
    openapiFields.add("userid");
    openapiFields.add("userurl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CoreSearchGetTopResults200ResponseResultsInner
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CoreSearchGetTopResults200ResponseResultsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CoreSearchGetTopResults200ResponseResultsInner is not found in the empty JSON string", CoreSearchGetTopResults200ResponseResultsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CoreSearchGetTopResults200ResponseResultsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CoreSearchGetTopResults200ResponseResultsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("areaname") != null && !jsonObj.get("areaname").isJsonNull()) && !jsonObj.get("areaname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `areaname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("areaname").toString()));
      }
      if ((jsonObj.get("componentname") != null && !jsonObj.get("componentname").isJsonNull()) && !jsonObj.get("componentname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `componentname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("componentname").toString()));
      }
      if ((jsonObj.get("content") != null && !jsonObj.get("content").isJsonNull()) && !jsonObj.get("content").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `content` to be a primitive type in the JSON string but got `%s`", jsonObj.get("content").toString()));
      }
      if ((jsonObj.get("contexturl") != null && !jsonObj.get("contexturl").isJsonNull()) && !jsonObj.get("contexturl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contexturl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contexturl").toString()));
      }
      if ((jsonObj.get("coursefullname") != null && !jsonObj.get("coursefullname").isJsonNull()) && !jsonObj.get("coursefullname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `coursefullname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("coursefullname").toString()));
      }
      if ((jsonObj.get("courseurl") != null && !jsonObj.get("courseurl").isJsonNull()) && !jsonObj.get("courseurl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `courseurl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("courseurl").toString()));
      }
      if ((jsonObj.get("description1") != null && !jsonObj.get("description1").isJsonNull()) && !jsonObj.get("description1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description1").toString()));
      }
      if ((jsonObj.get("description2") != null && !jsonObj.get("description2").isJsonNull()) && !jsonObj.get("description2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description2").toString()));
      }
      if ((jsonObj.get("docurl") != null && !jsonObj.get("docurl").isJsonNull()) && !jsonObj.get("docurl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `docurl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("docurl").toString()));
      }
      if ((jsonObj.get("filename") != null && !jsonObj.get("filename").isJsonNull()) && !jsonObj.get("filename").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filename` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filename").toString()));
      }
      if ((jsonObj.get("filenames") != null && !jsonObj.get("filenames").isJsonNull()) && !jsonObj.get("filenames").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filenames` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filenames").toString()));
      }
      if ((jsonObj.get("iconurl") != null && !jsonObj.get("iconurl").isJsonNull()) && !jsonObj.get("iconurl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iconurl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iconurl").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("userfullname") != null && !jsonObj.get("userfullname").isJsonNull()) && !jsonObj.get("userfullname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userfullname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userfullname").toString()));
      }
      if ((jsonObj.get("userurl") != null && !jsonObj.get("userurl").isJsonNull()) && !jsonObj.get("userurl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userurl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userurl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CoreSearchGetTopResults200ResponseResultsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CoreSearchGetTopResults200ResponseResultsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CoreSearchGetTopResults200ResponseResultsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CoreSearchGetTopResults200ResponseResultsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<CoreSearchGetTopResults200ResponseResultsInner>() {
           @Override
           public void write(JsonWriter out, CoreSearchGetTopResults200ResponseResultsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CoreSearchGetTopResults200ResponseResultsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CoreSearchGetTopResults200ResponseResultsInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CoreSearchGetTopResults200ResponseResultsInner
  * @throws IOException if the JSON string is invalid with respect to CoreSearchGetTopResults200ResponseResultsInner
  */
  public static CoreSearchGetTopResults200ResponseResultsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CoreSearchGetTopResults200ResponseResultsInner.class);
  }

 /**
  * Convert an instance of CoreSearchGetTopResults200ResponseResultsInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

