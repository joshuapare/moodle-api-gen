/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ModDataGetEntries200ResponseEntriesInnerTagsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.joshuapare.JSON;

/**
 * Pages
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-18T14:00:07.069642-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class ModWikiGetSubwikiPages200ResponsePagesInner {
  public static final String SERIALIZED_NAME_CACHEDCONTENT = "cachedcontent";
  @SerializedName(SERIALIZED_NAME_CACHEDCONTENT)
  private String cachedcontent;

  public static final String SERIALIZED_NAME_CANEDITPAGE = "caneditpage";
  @SerializedName(SERIALIZED_NAME_CANEDITPAGE)
  private Boolean caneditpage;

  public static final String SERIALIZED_NAME_CONTENTFORMAT = "contentformat";
  @SerializedName(SERIALIZED_NAME_CONTENTFORMAT)
  private Integer contentformat;

  public static final String SERIALIZED_NAME_CONTENTSIZE = "contentsize";
  @SerializedName(SERIALIZED_NAME_CONTENTSIZE)
  private Integer contentsize = null;

  public static final String SERIALIZED_NAME_FIRSTPAGE = "firstpage";
  @SerializedName(SERIALIZED_NAME_FIRSTPAGE)
  private Boolean firstpage = null;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_PAGEVIEWS = "pageviews";
  @SerializedName(SERIALIZED_NAME_PAGEVIEWS)
  private Integer pageviews = null;

  public static final String SERIALIZED_NAME_READONLY = "readonly";
  @SerializedName(SERIALIZED_NAME_READONLY)
  private Integer readonly = null;

  public static final String SERIALIZED_NAME_SUBWIKIID = "subwikiid";
  @SerializedName(SERIALIZED_NAME_SUBWIKIID)
  private Integer subwikiid;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<ModDataGetEntries200ResponseEntriesInnerTagsInner> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_TIMECREATED = "timecreated";
  @SerializedName(SERIALIZED_NAME_TIMECREATED)
  private Integer timecreated = null;

  public static final String SERIALIZED_NAME_TIMEMODIFIED = "timemodified";
  @SerializedName(SERIALIZED_NAME_TIMEMODIFIED)
  private Integer timemodified = null;

  public static final String SERIALIZED_NAME_TIMERENDERED = "timerendered";
  @SerializedName(SERIALIZED_NAME_TIMERENDERED)
  private Integer timerendered = null;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_USERID = "userid";
  @SerializedName(SERIALIZED_NAME_USERID)
  private Integer userid = null;

  public ModWikiGetSubwikiPages200ResponsePagesInner() {
  }

  public ModWikiGetSubwikiPages200ResponsePagesInner cachedcontent(String cachedcontent) {
    this.cachedcontent = cachedcontent;
    return this;
  }

   /**
   * Page contents.
   * @return cachedcontent
  **/
  @javax.annotation.Nullable
  public String getCachedcontent() {
    return cachedcontent;
  }

  public void setCachedcontent(String cachedcontent) {
    this.cachedcontent = cachedcontent;
  }


  public ModWikiGetSubwikiPages200ResponsePagesInner caneditpage(Boolean caneditpage) {
    this.caneditpage = caneditpage;
    return this;
  }

   /**
   * True if user can edit the page.
   * @return caneditpage
  **/
  @javax.annotation.Nullable
  public Boolean getCaneditpage() {
    return caneditpage;
  }

  public void setCaneditpage(Boolean caneditpage) {
    this.caneditpage = caneditpage;
  }


  public ModWikiGetSubwikiPages200ResponsePagesInner contentformat(Integer contentformat) {
    this.contentformat = contentformat;
    return this;
  }

   /**
   * cachedcontent format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)
   * @return contentformat
  **/
  @javax.annotation.Nullable
  public Integer getContentformat() {
    return contentformat;
  }

  public void setContentformat(Integer contentformat) {
    this.contentformat = contentformat;
  }


  public ModWikiGetSubwikiPages200ResponsePagesInner contentsize(Integer contentsize) {
    this.contentsize = contentsize;
    return this;
  }

   /**
   * Size of page contents in bytes (doesn&#39;t include size of attached files).
   * @return contentsize
  **/
  @javax.annotation.Nullable
  public Integer getContentsize() {
    return contentsize;
  }

  public void setContentsize(Integer contentsize) {
    this.contentsize = contentsize;
  }


  public ModWikiGetSubwikiPages200ResponsePagesInner firstpage(Boolean firstpage) {
    this.firstpage = firstpage;
    return this;
  }

   /**
   * True if it&#39;s the first page.
   * @return firstpage
  **/
  @javax.annotation.Nullable
  public Boolean getFirstpage() {
    return firstpage;
  }

  public void setFirstpage(Boolean firstpage) {
    this.firstpage = firstpage;
  }


  public ModWikiGetSubwikiPages200ResponsePagesInner id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * Page ID.
   * @return id
  **/
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public ModWikiGetSubwikiPages200ResponsePagesInner pageviews(Integer pageviews) {
    this.pageviews = pageviews;
    return this;
  }

   /**
   * Number of times the page has been viewed.
   * @return pageviews
  **/
  @javax.annotation.Nullable
  public Integer getPageviews() {
    return pageviews;
  }

  public void setPageviews(Integer pageviews) {
    this.pageviews = pageviews;
  }


  public ModWikiGetSubwikiPages200ResponsePagesInner readonly(Integer readonly) {
    this.readonly = readonly;
    return this;
  }

   /**
   * 1 if readonly, 0 otherwise.
   * @return readonly
  **/
  @javax.annotation.Nullable
  public Integer getReadonly() {
    return readonly;
  }

  public void setReadonly(Integer readonly) {
    this.readonly = readonly;
  }


  public ModWikiGetSubwikiPages200ResponsePagesInner subwikiid(Integer subwikiid) {
    this.subwikiid = subwikiid;
    return this;
  }

   /**
   * Page&#39;s subwiki ID.
   * @return subwikiid
  **/
  @javax.annotation.Nullable
  public Integer getSubwikiid() {
    return subwikiid;
  }

  public void setSubwikiid(Integer subwikiid) {
    this.subwikiid = subwikiid;
  }


  public ModWikiGetSubwikiPages200ResponsePagesInner tags(List<ModDataGetEntries200ResponseEntriesInnerTagsInner> tags) {
    this.tags = tags;
    return this;
  }

  public ModWikiGetSubwikiPages200ResponsePagesInner addTagsItem(ModDataGetEntries200ResponseEntriesInnerTagsInner tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @javax.annotation.Nullable
  public List<ModDataGetEntries200ResponseEntriesInnerTagsInner> getTags() {
    return tags;
  }

  public void setTags(List<ModDataGetEntries200ResponseEntriesInnerTagsInner> tags) {
    this.tags = tags;
  }


  public ModWikiGetSubwikiPages200ResponsePagesInner timecreated(Integer timecreated) {
    this.timecreated = timecreated;
    return this;
  }

   /**
   * Time of creation.
   * @return timecreated
  **/
  @javax.annotation.Nullable
  public Integer getTimecreated() {
    return timecreated;
  }

  public void setTimecreated(Integer timecreated) {
    this.timecreated = timecreated;
  }


  public ModWikiGetSubwikiPages200ResponsePagesInner timemodified(Integer timemodified) {
    this.timemodified = timemodified;
    return this;
  }

   /**
   * Time of last modification.
   * @return timemodified
  **/
  @javax.annotation.Nullable
  public Integer getTimemodified() {
    return timemodified;
  }

  public void setTimemodified(Integer timemodified) {
    this.timemodified = timemodified;
  }


  public ModWikiGetSubwikiPages200ResponsePagesInner timerendered(Integer timerendered) {
    this.timerendered = timerendered;
    return this;
  }

   /**
   * Time of last renderization.
   * @return timerendered
  **/
  @javax.annotation.Nullable
  public Integer getTimerendered() {
    return timerendered;
  }

  public void setTimerendered(Integer timerendered) {
    this.timerendered = timerendered;
  }


  public ModWikiGetSubwikiPages200ResponsePagesInner title(String title) {
    this.title = title;
    return this;
  }

   /**
   * Page title.
   * @return title
  **/
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public ModWikiGetSubwikiPages200ResponsePagesInner userid(Integer userid) {
    this.userid = userid;
    return this;
  }

   /**
   * ID of the user that last modified the page.
   * @return userid
  **/
  @javax.annotation.Nullable
  public Integer getUserid() {
    return userid;
  }

  public void setUserid(Integer userid) {
    this.userid = userid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModWikiGetSubwikiPages200ResponsePagesInner modWikiGetSubwikiPages200ResponsePagesInner = (ModWikiGetSubwikiPages200ResponsePagesInner) o;
    return Objects.equals(this.cachedcontent, modWikiGetSubwikiPages200ResponsePagesInner.cachedcontent) &&
        Objects.equals(this.caneditpage, modWikiGetSubwikiPages200ResponsePagesInner.caneditpage) &&
        Objects.equals(this.contentformat, modWikiGetSubwikiPages200ResponsePagesInner.contentformat) &&
        Objects.equals(this.contentsize, modWikiGetSubwikiPages200ResponsePagesInner.contentsize) &&
        Objects.equals(this.firstpage, modWikiGetSubwikiPages200ResponsePagesInner.firstpage) &&
        Objects.equals(this.id, modWikiGetSubwikiPages200ResponsePagesInner.id) &&
        Objects.equals(this.pageviews, modWikiGetSubwikiPages200ResponsePagesInner.pageviews) &&
        Objects.equals(this.readonly, modWikiGetSubwikiPages200ResponsePagesInner.readonly) &&
        Objects.equals(this.subwikiid, modWikiGetSubwikiPages200ResponsePagesInner.subwikiid) &&
        Objects.equals(this.tags, modWikiGetSubwikiPages200ResponsePagesInner.tags) &&
        Objects.equals(this.timecreated, modWikiGetSubwikiPages200ResponsePagesInner.timecreated) &&
        Objects.equals(this.timemodified, modWikiGetSubwikiPages200ResponsePagesInner.timemodified) &&
        Objects.equals(this.timerendered, modWikiGetSubwikiPages200ResponsePagesInner.timerendered) &&
        Objects.equals(this.title, modWikiGetSubwikiPages200ResponsePagesInner.title) &&
        Objects.equals(this.userid, modWikiGetSubwikiPages200ResponsePagesInner.userid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cachedcontent, caneditpage, contentformat, contentsize, firstpage, id, pageviews, readonly, subwikiid, tags, timecreated, timemodified, timerendered, title, userid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModWikiGetSubwikiPages200ResponsePagesInner {\n");
    sb.append("    cachedcontent: ").append(toIndentedString(cachedcontent)).append("\n");
    sb.append("    caneditpage: ").append(toIndentedString(caneditpage)).append("\n");
    sb.append("    contentformat: ").append(toIndentedString(contentformat)).append("\n");
    sb.append("    contentsize: ").append(toIndentedString(contentsize)).append("\n");
    sb.append("    firstpage: ").append(toIndentedString(firstpage)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    pageviews: ").append(toIndentedString(pageviews)).append("\n");
    sb.append("    readonly: ").append(toIndentedString(readonly)).append("\n");
    sb.append("    subwikiid: ").append(toIndentedString(subwikiid)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    timecreated: ").append(toIndentedString(timecreated)).append("\n");
    sb.append("    timemodified: ").append(toIndentedString(timemodified)).append("\n");
    sb.append("    timerendered: ").append(toIndentedString(timerendered)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    userid: ").append(toIndentedString(userid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cachedcontent");
    openapiFields.add("caneditpage");
    openapiFields.add("contentformat");
    openapiFields.add("contentsize");
    openapiFields.add("firstpage");
    openapiFields.add("id");
    openapiFields.add("pageviews");
    openapiFields.add("readonly");
    openapiFields.add("subwikiid");
    openapiFields.add("tags");
    openapiFields.add("timecreated");
    openapiFields.add("timemodified");
    openapiFields.add("timerendered");
    openapiFields.add("title");
    openapiFields.add("userid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ModWikiGetSubwikiPages200ResponsePagesInner
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ModWikiGetSubwikiPages200ResponsePagesInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModWikiGetSubwikiPages200ResponsePagesInner is not found in the empty JSON string", ModWikiGetSubwikiPages200ResponsePagesInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ModWikiGetSubwikiPages200ResponsePagesInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModWikiGetSubwikiPages200ResponsePagesInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("cachedcontent") != null && !jsonObj.get("cachedcontent").isJsonNull()) && !jsonObj.get("cachedcontent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cachedcontent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cachedcontent").toString()));
      }
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        JsonArray jsonArraytags = jsonObj.getAsJsonArray("tags");
        if (jsonArraytags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
          }

          // validate the optional field `tags` (array)
          for (int i = 0; i < jsonArraytags.size(); i++) {
            ModDataGetEntries200ResponseEntriesInnerTagsInner.validateJsonElement(jsonArraytags.get(i));
          };
        }
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModWikiGetSubwikiPages200ResponsePagesInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModWikiGetSubwikiPages200ResponsePagesInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModWikiGetSubwikiPages200ResponsePagesInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModWikiGetSubwikiPages200ResponsePagesInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ModWikiGetSubwikiPages200ResponsePagesInner>() {
           @Override
           public void write(JsonWriter out, ModWikiGetSubwikiPages200ResponsePagesInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModWikiGetSubwikiPages200ResponsePagesInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ModWikiGetSubwikiPages200ResponsePagesInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ModWikiGetSubwikiPages200ResponsePagesInner
  * @throws IOException if the JSON string is invalid with respect to ModWikiGetSubwikiPages200ResponsePagesInner
  */
  public static ModWikiGetSubwikiPages200ResponsePagesInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModWikiGetSubwikiPages200ResponsePagesInner.class);
  }

 /**
  * Convert an instance of ModWikiGetSubwikiPages200ResponsePagesInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

