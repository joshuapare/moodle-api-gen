/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.joshuapare.JSON;

/**
 * ModQuizGetQuizzesByCourses200ResponseQuizzesInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-18T20:58:28.689161-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class ModQuizGetQuizzesByCourses200ResponseQuizzesInner {
  public static final String SERIALIZED_NAME_ALLOWOFFLINEATTEMPTS = "allowofflineattempts";
  @SerializedName(SERIALIZED_NAME_ALLOWOFFLINEATTEMPTS)
  private Integer allowofflineattempts = null;

  public static final String SERIALIZED_NAME_ATTEMPTONLAST = "attemptonlast";
  @SerializedName(SERIALIZED_NAME_ATTEMPTONLAST)
  private Integer attemptonlast = null;

  public static final String SERIALIZED_NAME_ATTEMPTS = "attempts";
  @SerializedName(SERIALIZED_NAME_ATTEMPTS)
  private Integer attempts = null;

  public static final String SERIALIZED_NAME_AUTOSAVEPERIOD = "autosaveperiod";
  @SerializedName(SERIALIZED_NAME_AUTOSAVEPERIOD)
  private Integer autosaveperiod = null;

  public static final String SERIALIZED_NAME_BROWSERSECURITY = "browsersecurity";
  @SerializedName(SERIALIZED_NAME_BROWSERSECURITY)
  private String browsersecurity = "null";

  public static final String SERIALIZED_NAME_CANREDOQUESTIONS = "canredoquestions";
  @SerializedName(SERIALIZED_NAME_CANREDOQUESTIONS)
  private Integer canredoquestions = null;

  public static final String SERIALIZED_NAME_COMPLETIONATTEMPTSEXHAUSTED = "completionattemptsexhausted";
  @SerializedName(SERIALIZED_NAME_COMPLETIONATTEMPTSEXHAUSTED)
  private Integer completionattemptsexhausted = null;

  public static final String SERIALIZED_NAME_COMPLETIONPASS = "completionpass";
  @SerializedName(SERIALIZED_NAME_COMPLETIONPASS)
  private Integer completionpass = null;

  public static final String SERIALIZED_NAME_COURSE = "course";
  @SerializedName(SERIALIZED_NAME_COURSE)
  private Integer course;

  public static final String SERIALIZED_NAME_COURSEMODULE = "coursemodule";
  @SerializedName(SERIALIZED_NAME_COURSEMODULE)
  private Integer coursemodule;

  public static final String SERIALIZED_NAME_DECIMALPOINTS = "decimalpoints";
  @SerializedName(SERIALIZED_NAME_DECIMALPOINTS)
  private Integer decimalpoints = null;

  public static final String SERIALIZED_NAME_DELAY1 = "delay1";
  @SerializedName(SERIALIZED_NAME_DELAY1)
  private Integer delay1 = null;

  public static final String SERIALIZED_NAME_DELAY2 = "delay2";
  @SerializedName(SERIALIZED_NAME_DELAY2)
  private Integer delay2 = null;

  public static final String SERIALIZED_NAME_GRACEPERIOD = "graceperiod";
  @SerializedName(SERIALIZED_NAME_GRACEPERIOD)
  private Integer graceperiod = null;

  public static final String SERIALIZED_NAME_GRADE = "grade";
  @SerializedName(SERIALIZED_NAME_GRADE)
  private BigDecimal grade = new BigDecimal("null");

  public static final String SERIALIZED_NAME_GRADEMETHOD = "grademethod";
  @SerializedName(SERIALIZED_NAME_GRADEMETHOD)
  private Integer grademethod = null;

  public static final String SERIALIZED_NAME_GROUPINGID = "groupingid";
  @SerializedName(SERIALIZED_NAME_GROUPINGID)
  private Integer groupingid;

  public static final String SERIALIZED_NAME_GROUPMODE = "groupmode";
  @SerializedName(SERIALIZED_NAME_GROUPMODE)
  private Integer groupmode;

  public static final String SERIALIZED_NAME_HASFEEDBACK = "hasfeedback";
  @SerializedName(SERIALIZED_NAME_HASFEEDBACK)
  private Integer hasfeedback = null;

  public static final String SERIALIZED_NAME_HASQUESTIONS = "hasquestions";
  @SerializedName(SERIALIZED_NAME_HASQUESTIONS)
  private Integer hasquestions = null;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_INTRO = "intro";
  @SerializedName(SERIALIZED_NAME_INTRO)
  private String intro;

  public static final String SERIALIZED_NAME_INTROFILES = "introfiles";
  @SerializedName(SERIALIZED_NAME_INTROFILES)
  private List<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner> introfiles = new ArrayList<>();

  public static final String SERIALIZED_NAME_INTROFORMAT = "introformat";
  @SerializedName(SERIALIZED_NAME_INTROFORMAT)
  private Integer introformat;

  public static final String SERIALIZED_NAME_LANG = "lang";
  @SerializedName(SERIALIZED_NAME_LANG)
  private String lang;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NAVMETHOD = "navmethod";
  @SerializedName(SERIALIZED_NAME_NAVMETHOD)
  private String navmethod = "null";

  public static final String SERIALIZED_NAME_OVERDUEHANDLING = "overduehandling";
  @SerializedName(SERIALIZED_NAME_OVERDUEHANDLING)
  private String overduehandling = "null";

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password = "null";

  public static final String SERIALIZED_NAME_PREFERREDBEHAVIOUR = "preferredbehaviour";
  @SerializedName(SERIALIZED_NAME_PREFERREDBEHAVIOUR)
  private String preferredbehaviour = "null";

  public static final String SERIALIZED_NAME_QUESTIONDECIMALPOINTS = "questiondecimalpoints";
  @SerializedName(SERIALIZED_NAME_QUESTIONDECIMALPOINTS)
  private Integer questiondecimalpoints = null;

  public static final String SERIALIZED_NAME_QUESTIONSPERPAGE = "questionsperpage";
  @SerializedName(SERIALIZED_NAME_QUESTIONSPERPAGE)
  private Integer questionsperpage = null;

  public static final String SERIALIZED_NAME_REVIEWATTEMPT = "reviewattempt";
  @SerializedName(SERIALIZED_NAME_REVIEWATTEMPT)
  private Integer reviewattempt = null;

  public static final String SERIALIZED_NAME_REVIEWCORRECTNESS = "reviewcorrectness";
  @SerializedName(SERIALIZED_NAME_REVIEWCORRECTNESS)
  private Integer reviewcorrectness = null;

  public static final String SERIALIZED_NAME_REVIEWGENERALFEEDBACK = "reviewgeneralfeedback";
  @SerializedName(SERIALIZED_NAME_REVIEWGENERALFEEDBACK)
  private Integer reviewgeneralfeedback = null;

  public static final String SERIALIZED_NAME_REVIEWMARKS = "reviewmarks";
  @SerializedName(SERIALIZED_NAME_REVIEWMARKS)
  private Integer reviewmarks = null;

  public static final String SERIALIZED_NAME_REVIEWMAXMARKS = "reviewmaxmarks";
  @SerializedName(SERIALIZED_NAME_REVIEWMAXMARKS)
  private Integer reviewmaxmarks = null;

  public static final String SERIALIZED_NAME_REVIEWOVERALLFEEDBACK = "reviewoverallfeedback";
  @SerializedName(SERIALIZED_NAME_REVIEWOVERALLFEEDBACK)
  private Integer reviewoverallfeedback = null;

  public static final String SERIALIZED_NAME_REVIEWRIGHTANSWER = "reviewrightanswer";
  @SerializedName(SERIALIZED_NAME_REVIEWRIGHTANSWER)
  private Integer reviewrightanswer = null;

  public static final String SERIALIZED_NAME_REVIEWSPECIFICFEEDBACK = "reviewspecificfeedback";
  @SerializedName(SERIALIZED_NAME_REVIEWSPECIFICFEEDBACK)
  private Integer reviewspecificfeedback;

  public static final String SERIALIZED_NAME_SECTION = "section";
  @SerializedName(SERIALIZED_NAME_SECTION)
  private Integer section;

  public static final String SERIALIZED_NAME_SHOWBLOCKS = "showblocks";
  @SerializedName(SERIALIZED_NAME_SHOWBLOCKS)
  private Integer showblocks = null;

  public static final String SERIALIZED_NAME_SHOWUSERPICTURE = "showuserpicture";
  @SerializedName(SERIALIZED_NAME_SHOWUSERPICTURE)
  private Integer showuserpicture = null;

  public static final String SERIALIZED_NAME_SHUFFLEANSWERS = "shuffleanswers";
  @SerializedName(SERIALIZED_NAME_SHUFFLEANSWERS)
  private Integer shuffleanswers = null;

  public static final String SERIALIZED_NAME_SUBNET = "subnet";
  @SerializedName(SERIALIZED_NAME_SUBNET)
  private String subnet = "null";

  public static final String SERIALIZED_NAME_SUMGRADES = "sumgrades";
  @SerializedName(SERIALIZED_NAME_SUMGRADES)
  private BigDecimal sumgrades = new BigDecimal("null");

  public static final String SERIALIZED_NAME_TIMECLOSE = "timeclose";
  @SerializedName(SERIALIZED_NAME_TIMECLOSE)
  private Integer timeclose = null;

  public static final String SERIALIZED_NAME_TIMECREATED = "timecreated";
  @SerializedName(SERIALIZED_NAME_TIMECREATED)
  private Integer timecreated = null;

  public static final String SERIALIZED_NAME_TIMELIMIT = "timelimit";
  @SerializedName(SERIALIZED_NAME_TIMELIMIT)
  private Integer timelimit = null;

  public static final String SERIALIZED_NAME_TIMEMODIFIED = "timemodified";
  @SerializedName(SERIALIZED_NAME_TIMEMODIFIED)
  private Integer timemodified;

  public static final String SERIALIZED_NAME_TIMEOPEN = "timeopen";
  @SerializedName(SERIALIZED_NAME_TIMEOPEN)
  private Integer timeopen = null;

  public static final String SERIALIZED_NAME_VISIBLE = "visible";
  @SerializedName(SERIALIZED_NAME_VISIBLE)
  private Boolean visible;

  public ModQuizGetQuizzesByCourses200ResponseQuizzesInner() {
  }

  public ModQuizGetQuizzesByCourses200ResponseQuizzesInner allowofflineattempts(Integer allowofflineattempts) {
    this.allowofflineattempts = allowofflineattempts;
    return this;
  }

   /**
   * Whether to allow the quiz to be attempted                                                                             offline in the mobile app
   * @return allowofflineattempts
  **/
  @javax.annotation.Nullable
  public Integer getAllowofflineattempts() {
    return allowofflineattempts;
  }

  public void setAllowofflineattempts(Integer allowofflineattempts) {
    this.allowofflineattempts = allowofflineattempts;
  }


  public ModQuizGetQuizzesByCourses200ResponseQuizzesInner attemptonlast(Integer attemptonlast) {
    this.attemptonlast = attemptonlast;
    return this;
  }

   /**
   * Whether subsequent attempts start from the answer                                                                     to the previous attempt (1) or start blank (0).
   * @return attemptonlast
  **/
  @javax.annotation.Nullable
  public Integer getAttemptonlast() {
    return attemptonlast;
  }

  public void setAttemptonlast(Integer attemptonlast) {
    this.attemptonlast = attemptonlast;
  }


  public ModQuizGetQuizzesByCourses200ResponseQuizzesInner attempts(Integer attempts) {
    this.attempts = attempts;
    return this;
  }

   /**
   * The maximum number of attempts a student is allowed.
   * @return attempts
  **/
  @javax.annotation.Nullable
  public Integer getAttempts() {
    return attempts;
  }

  public void setAttempts(Integer attempts) {
    this.attempts = attempts;
  }


  public ModQuizGetQuizzesByCourses200ResponseQuizzesInner autosaveperiod(Integer autosaveperiod) {
    this.autosaveperiod = autosaveperiod;
    return this;
  }

   /**
   * Auto-save delay
   * @return autosaveperiod
  **/
  @javax.annotation.Nullable
  public Integer getAutosaveperiod() {
    return autosaveperiod;
  }

  public void setAutosaveperiod(Integer autosaveperiod) {
    this.autosaveperiod = autosaveperiod;
  }


  public ModQuizGetQuizzesByCourses200ResponseQuizzesInner browsersecurity(String browsersecurity) {
    this.browsersecurity = browsersecurity;
    return this;
  }

   /**
   * Restriciton on the browser the student must                                                                     use. E.g. &#39;securewindow&#39;.
   * @return browsersecurity
  **/
  @javax.annotation.Nullable
  public String getBrowsersecurity() {
    return browsersecurity;
  }

  public void setBrowsersecurity(String browsersecurity) {
    this.browsersecurity = browsersecurity;
  }


  public ModQuizGetQuizzesByCourses200ResponseQuizzesInner canredoquestions(Integer canredoquestions) {
    this.canredoquestions = canredoquestions;
    return this;
  }

   /**
   * Allows students to redo any completed question                                                                         within a quiz attempt.
   * @return canredoquestions
  **/
  @javax.annotation.Nullable
  public Integer getCanredoquestions() {
    return canredoquestions;
  }

  public void setCanredoquestions(Integer canredoquestions) {
    this.canredoquestions = canredoquestions;
  }


  public ModQuizGetQuizzesByCourses200ResponseQuizzesInner completionattemptsexhausted(Integer completionattemptsexhausted) {
    this.completionattemptsexhausted = completionattemptsexhausted;
    return this;
  }

   /**
   * Mark quiz complete when the student has                                                                                 exhausted the maximum number of attempts
   * @return completionattemptsexhausted
  **/
  @javax.annotation.Nullable
  public Integer getCompletionattemptsexhausted() {
    return completionattemptsexhausted;
  }

  public void setCompletionattemptsexhausted(Integer completionattemptsexhausted) {
    this.completionattemptsexhausted = completionattemptsexhausted;
  }


  public ModQuizGetQuizzesByCourses200ResponseQuizzesInner completionpass(Integer completionpass) {
    this.completionpass = completionpass;
    return this;
  }

   /**
   * Whether to require passing grade
   * @return completionpass
  **/
  @javax.annotation.Nullable
  public Integer getCompletionpass() {
    return completionpass;
  }

  public void setCompletionpass(Integer completionpass) {
    this.completionpass = completionpass;
  }


  public ModQuizGetQuizzesByCourses200ResponseQuizzesInner course(Integer course) {
    this.course = course;
    return this;
  }

   /**
   * Course id
   * @return course
  **/
  @javax.annotation.Nullable
  public Integer getCourse() {
    return course;
  }

  public void setCourse(Integer course) {
    this.course = course;
  }


  public ModQuizGetQuizzesByCourses200ResponseQuizzesInner coursemodule(Integer coursemodule) {
    this.coursemodule = coursemodule;
    return this;
  }

   /**
   * Course module id
   * @return coursemodule
  **/
  @javax.annotation.Nullable
  public Integer getCoursemodule() {
    return coursemodule;
  }

  public void setCoursemodule(Integer coursemodule) {
    this.coursemodule = coursemodule;
  }


  public ModQuizGetQuizzesByCourses200ResponseQuizzesInner decimalpoints(Integer decimalpoints) {
    this.decimalpoints = decimalpoints;
    return this;
  }

   /**
   * Number of decimal points to use when displaying                                                                     grades.
   * @return decimalpoints
  **/
  @javax.annotation.Nullable
  public Integer getDecimalpoints() {
    return decimalpoints;
  }

  public void setDecimalpoints(Integer decimalpoints) {
    this.decimalpoints = decimalpoints;
  }


  public ModQuizGetQuizzesByCourses200ResponseQuizzesInner delay1(Integer delay1) {
    this.delay1 = delay1;
    return this;
  }

   /**
   * Delay that must be left between the first and second attempt,                                                             in seconds.
   * @return delay1
  **/
  @javax.annotation.Nullable
  public Integer getDelay1() {
    return delay1;
  }

  public void setDelay1(Integer delay1) {
    this.delay1 = delay1;
  }


  public ModQuizGetQuizzesByCourses200ResponseQuizzesInner delay2(Integer delay2) {
    this.delay2 = delay2;
    return this;
  }

   /**
   * Delay that must be left between the second and subsequent                                                             attempt, in seconds.
   * @return delay2
  **/
  @javax.annotation.Nullable
  public Integer getDelay2() {
    return delay2;
  }

  public void setDelay2(Integer delay2) {
    this.delay2 = delay2;
  }


  public ModQuizGetQuizzesByCourses200ResponseQuizzesInner graceperiod(Integer graceperiod) {
    this.graceperiod = graceperiod;
    return this;
  }

   /**
   * The amount of time (in seconds) after the time limit                                                                 runs out during which attempts can still be submitted,                                                                 if overduehandling is set to allow it.
   * @return graceperiod
  **/
  @javax.annotation.Nullable
  public Integer getGraceperiod() {
    return graceperiod;
  }

  public void setGraceperiod(Integer graceperiod) {
    this.graceperiod = graceperiod;
  }


  public ModQuizGetQuizzesByCourses200ResponseQuizzesInner grade(BigDecimal grade) {
    this.grade = grade;
    return this;
  }

   /**
   * The total that the quiz overall grade is scaled to be                                                             out of.
   * @return grade
  **/
  @javax.annotation.Nullable
  public BigDecimal getGrade() {
    return grade;
  }

  public void setGrade(BigDecimal grade) {
    this.grade = grade;
  }


  public ModQuizGetQuizzesByCourses200ResponseQuizzesInner grademethod(Integer grademethod) {
    this.grademethod = grademethod;
    return this;
  }

   /**
   * One of the values QUIZ_GRADEHIGHEST, QUIZ_GRADEAVERAGE,                                                                     QUIZ_ATTEMPTFIRST or QUIZ_ATTEMPTLAST.
   * @return grademethod
  **/
  @javax.annotation.Nullable
  public Integer getGrademethod() {
    return grademethod;
  }

  public void setGrademethod(Integer grademethod) {
    this.grademethod = grademethod;
  }


  public ModQuizGetQuizzesByCourses200ResponseQuizzesInner groupingid(Integer groupingid) {
    this.groupingid = groupingid;
    return this;
  }

   /**
   * Group id
   * @return groupingid
  **/
  @javax.annotation.Nullable
  public Integer getGroupingid() {
    return groupingid;
  }

  public void setGroupingid(Integer groupingid) {
    this.groupingid = groupingid;
  }


  public ModQuizGetQuizzesByCourses200ResponseQuizzesInner groupmode(Integer groupmode) {
    this.groupmode = groupmode;
    return this;
  }

   /**
   * Group mode
   * @return groupmode
  **/
  @javax.annotation.Nullable
  public Integer getGroupmode() {
    return groupmode;
  }

  public void setGroupmode(Integer groupmode) {
    this.groupmode = groupmode;
  }


  public ModQuizGetQuizzesByCourses200ResponseQuizzesInner hasfeedback(Integer hasfeedback) {
    this.hasfeedback = hasfeedback;
    return this;
  }

   /**
   * Whether the quiz has any non-blank feedback text
   * @return hasfeedback
  **/
  @javax.annotation.Nullable
  public Integer getHasfeedback() {
    return hasfeedback;
  }

  public void setHasfeedback(Integer hasfeedback) {
    this.hasfeedback = hasfeedback;
  }


  public ModQuizGetQuizzesByCourses200ResponseQuizzesInner hasquestions(Integer hasquestions) {
    this.hasquestions = hasquestions;
    return this;
  }

   /**
   * Whether the quiz has questions
   * @return hasquestions
  **/
  @javax.annotation.Nullable
  public Integer getHasquestions() {
    return hasquestions;
  }

  public void setHasquestions(Integer hasquestions) {
    this.hasquestions = hasquestions;
  }


  public ModQuizGetQuizzesByCourses200ResponseQuizzesInner id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * Activity instance id
   * @return id
  **/
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public ModQuizGetQuizzesByCourses200ResponseQuizzesInner intro(String intro) {
    this.intro = intro;
    return this;
  }

   /**
   * Activity introduction
   * @return intro
  **/
  @javax.annotation.Nullable
  public String getIntro() {
    return intro;
  }

  public void setIntro(String intro) {
    this.intro = intro;
  }


  public ModQuizGetQuizzesByCourses200ResponseQuizzesInner introfiles(List<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner> introfiles) {
    this.introfiles = introfiles;
    return this;
  }

  public ModQuizGetQuizzesByCourses200ResponseQuizzesInner addIntrofilesItem(CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner introfilesItem) {
    if (this.introfiles == null) {
      this.introfiles = new ArrayList<>();
    }
    this.introfiles.add(introfilesItem);
    return this;
  }

   /**
   * Get introfiles
   * @return introfiles
  **/
  @javax.annotation.Nullable
  public List<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner> getIntrofiles() {
    return introfiles;
  }

  public void setIntrofiles(List<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner> introfiles) {
    this.introfiles = introfiles;
  }


  public ModQuizGetQuizzesByCourses200ResponseQuizzesInner introformat(Integer introformat) {
    this.introformat = introformat;
    return this;
  }

   /**
   * intro format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)
   * @return introformat
  **/
  @javax.annotation.Nullable
  public Integer getIntroformat() {
    return introformat;
  }

  public void setIntroformat(Integer introformat) {
    this.introformat = introformat;
  }


  public ModQuizGetQuizzesByCourses200ResponseQuizzesInner lang(String lang) {
    this.lang = lang;
    return this;
  }

   /**
   * Forced activity language
   * @return lang
  **/
  @javax.annotation.Nullable
  public String getLang() {
    return lang;
  }

  public void setLang(String lang) {
    this.lang = lang;
  }


  public ModQuizGetQuizzesByCourses200ResponseQuizzesInner name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Activity name
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ModQuizGetQuizzesByCourses200ResponseQuizzesInner navmethod(String navmethod) {
    this.navmethod = navmethod;
    return this;
  }

   /**
   * Any constraints on how the user is allowed to navigate                                                                 around the quiz. Currently recognised values are                                                                 &#39;free&#39; and &#39;seq&#39;.
   * @return navmethod
  **/
  @javax.annotation.Nullable
  public String getNavmethod() {
    return navmethod;
  }

  public void setNavmethod(String navmethod) {
    this.navmethod = navmethod;
  }


  public ModQuizGetQuizzesByCourses200ResponseQuizzesInner overduehandling(String overduehandling) {
    this.overduehandling = overduehandling;
    return this;
  }

   /**
   * The method used to handle overdue attempts.                                                                     &#39;autosubmit&#39;, &#39;graceperiod&#39; or &#39;autoabandon&#39;.
   * @return overduehandling
  **/
  @javax.annotation.Nullable
  public String getOverduehandling() {
    return overduehandling;
  }

  public void setOverduehandling(String overduehandling) {
    this.overduehandling = overduehandling;
  }


  public ModQuizGetQuizzesByCourses200ResponseQuizzesInner password(String password) {
    this.password = password;
    return this;
  }

   /**
   * A password that the student must enter before starting or                                                                 continuing a quiz attempt.
   * @return password
  **/
  @javax.annotation.Nullable
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }


  public ModQuizGetQuizzesByCourses200ResponseQuizzesInner preferredbehaviour(String preferredbehaviour) {
    this.preferredbehaviour = preferredbehaviour;
    return this;
  }

   /**
   * The behaviour to ask questions to use.
   * @return preferredbehaviour
  **/
  @javax.annotation.Nullable
  public String getPreferredbehaviour() {
    return preferredbehaviour;
  }

  public void setPreferredbehaviour(String preferredbehaviour) {
    this.preferredbehaviour = preferredbehaviour;
  }


  public ModQuizGetQuizzesByCourses200ResponseQuizzesInner questiondecimalpoints(Integer questiondecimalpoints) {
    this.questiondecimalpoints = questiondecimalpoints;
    return this;
  }

   /**
   * Number of decimal points to use when                                                                             displaying question grades.                                                                             (-1 means use decimalpoints.)
   * @return questiondecimalpoints
  **/
  @javax.annotation.Nullable
  public Integer getQuestiondecimalpoints() {
    return questiondecimalpoints;
  }

  public void setQuestiondecimalpoints(Integer questiondecimalpoints) {
    this.questiondecimalpoints = questiondecimalpoints;
  }


  public ModQuizGetQuizzesByCourses200ResponseQuizzesInner questionsperpage(Integer questionsperpage) {
    this.questionsperpage = questionsperpage;
    return this;
  }

   /**
   * How often to insert a page break when editing                                                                         the quiz, or when shuffling the question order.
   * @return questionsperpage
  **/
  @javax.annotation.Nullable
  public Integer getQuestionsperpage() {
    return questionsperpage;
  }

  public void setQuestionsperpage(Integer questionsperpage) {
    this.questionsperpage = questionsperpage;
  }


  public ModQuizGetQuizzesByCourses200ResponseQuizzesInner reviewattempt(Integer reviewattempt) {
    this.reviewattempt = reviewattempt;
    return this;
  }

   /**
   * Whether users are allowed to review their quiz                                                                     attempts at various times. This is a bit field, decoded by the                                                                     \\mod_quiz\\question\\display_options class. It is formed by ORing                                                                     together the constants defined there.
   * @return reviewattempt
  **/
  @javax.annotation.Nullable
  public Integer getReviewattempt() {
    return reviewattempt;
  }

  public void setReviewattempt(Integer reviewattempt) {
    this.reviewattempt = reviewattempt;
  }


  public ModQuizGetQuizzesByCourses200ResponseQuizzesInner reviewcorrectness(Integer reviewcorrectness) {
    this.reviewcorrectness = reviewcorrectness;
    return this;
  }

   /**
   * Whether users are allowed to review their quiz                                                        attempts at various times.A bit field, like reviewattempt.
   * @return reviewcorrectness
  **/
  @javax.annotation.Nullable
  public Integer getReviewcorrectness() {
    return reviewcorrectness;
  }

  public void setReviewcorrectness(Integer reviewcorrectness) {
    this.reviewcorrectness = reviewcorrectness;
  }


  public ModQuizGetQuizzesByCourses200ResponseQuizzesInner reviewgeneralfeedback(Integer reviewgeneralfeedback) {
    this.reviewgeneralfeedback = reviewgeneralfeedback;
    return this;
  }

   /**
   * Whether users are allowed to review their                                                                             quiz attempts at various times. A bit field, like                                                                             reviewattempt.
   * @return reviewgeneralfeedback
  **/
  @javax.annotation.Nullable
  public Integer getReviewgeneralfeedback() {
    return reviewgeneralfeedback;
  }

  public void setReviewgeneralfeedback(Integer reviewgeneralfeedback) {
    this.reviewgeneralfeedback = reviewgeneralfeedback;
  }


  public ModQuizGetQuizzesByCourses200ResponseQuizzesInner reviewmarks(Integer reviewmarks) {
    this.reviewmarks = reviewmarks;
    return this;
  }

   /**
   * Whether users are allowed to review their quiz attempts                                                                 at various times. A bit field, like reviewattempt.
   * @return reviewmarks
  **/
  @javax.annotation.Nullable
  public Integer getReviewmarks() {
    return reviewmarks;
  }

  public void setReviewmarks(Integer reviewmarks) {
    this.reviewmarks = reviewmarks;
  }


  public ModQuizGetQuizzesByCourses200ResponseQuizzesInner reviewmaxmarks(Integer reviewmaxmarks) {
    this.reviewmaxmarks = reviewmaxmarks;
    return this;
  }

   /**
   * Whether users are allowed to review their quiz                                                   attempts at various times. A bit field, like reviewattempt.
   * @return reviewmaxmarks
  **/
  @javax.annotation.Nullable
  public Integer getReviewmaxmarks() {
    return reviewmaxmarks;
  }

  public void setReviewmaxmarks(Integer reviewmaxmarks) {
    this.reviewmaxmarks = reviewmaxmarks;
  }


  public ModQuizGetQuizzesByCourses200ResponseQuizzesInner reviewoverallfeedback(Integer reviewoverallfeedback) {
    this.reviewoverallfeedback = reviewoverallfeedback;
    return this;
  }

   /**
   * Whether users are allowed to review their quiz                                                                             attempts at various times. A bit field, like                                                                             reviewattempt.
   * @return reviewoverallfeedback
  **/
  @javax.annotation.Nullable
  public Integer getReviewoverallfeedback() {
    return reviewoverallfeedback;
  }

  public void setReviewoverallfeedback(Integer reviewoverallfeedback) {
    this.reviewoverallfeedback = reviewoverallfeedback;
  }


  public ModQuizGetQuizzesByCourses200ResponseQuizzesInner reviewrightanswer(Integer reviewrightanswer) {
    this.reviewrightanswer = reviewrightanswer;
    return this;
  }

   /**
   * Whether users are allowed to review their quiz                                                                         attempts at various times. A bit field, like                                                                         reviewattempt.
   * @return reviewrightanswer
  **/
  @javax.annotation.Nullable
  public Integer getReviewrightanswer() {
    return reviewrightanswer;
  }

  public void setReviewrightanswer(Integer reviewrightanswer) {
    this.reviewrightanswer = reviewrightanswer;
  }


  public ModQuizGetQuizzesByCourses200ResponseQuizzesInner reviewspecificfeedback(Integer reviewspecificfeedback) {
    this.reviewspecificfeedback = reviewspecificfeedback;
    return this;
  }

   /**
   * Whether users are allowed to review their                                                                             quiz attempts at various times. A bit field, like                                                                             reviewattempt.
   * @return reviewspecificfeedback
  **/
  @javax.annotation.Nullable
  public Integer getReviewspecificfeedback() {
    return reviewspecificfeedback;
  }

  public void setReviewspecificfeedback(Integer reviewspecificfeedback) {
    this.reviewspecificfeedback = reviewspecificfeedback;
  }


  public ModQuizGetQuizzesByCourses200ResponseQuizzesInner section(Integer section) {
    this.section = section;
    return this;
  }

   /**
   * Course section id
   * @return section
  **/
  @javax.annotation.Nullable
  public Integer getSection() {
    return section;
  }

  public void setSection(Integer section) {
    this.section = section;
  }


  public ModQuizGetQuizzesByCourses200ResponseQuizzesInner showblocks(Integer showblocks) {
    this.showblocks = showblocks;
    return this;
  }

   /**
   * Whether blocks should be shown on the attempt.php and                                                                 review.php pages.
   * @return showblocks
  **/
  @javax.annotation.Nullable
  public Integer getShowblocks() {
    return showblocks;
  }

  public void setShowblocks(Integer showblocks) {
    this.showblocks = showblocks;
  }


  public ModQuizGetQuizzesByCourses200ResponseQuizzesInner showuserpicture(Integer showuserpicture) {
    this.showuserpicture = showuserpicture;
    return this;
  }

   /**
   * Option to show the user&#39;s picture during the                                                                     attempt and on the review page.
   * @return showuserpicture
  **/
  @javax.annotation.Nullable
  public Integer getShowuserpicture() {
    return showuserpicture;
  }

  public void setShowuserpicture(Integer showuserpicture) {
    this.showuserpicture = showuserpicture;
  }


  public ModQuizGetQuizzesByCourses200ResponseQuizzesInner shuffleanswers(Integer shuffleanswers) {
    this.shuffleanswers = shuffleanswers;
    return this;
  }

   /**
   * Whether the parts of the question should be shuffled,                                                                     in those question types that support it.
   * @return shuffleanswers
  **/
  @javax.annotation.Nullable
  public Integer getShuffleanswers() {
    return shuffleanswers;
  }

  public void setShuffleanswers(Integer shuffleanswers) {
    this.shuffleanswers = shuffleanswers;
  }


  public ModQuizGetQuizzesByCourses200ResponseQuizzesInner subnet(String subnet) {
    this.subnet = subnet;
    return this;
  }

   /**
   * Used to restrict the IP addresses from which this quiz can                                                             be attempted. The format is as requried by the address_in_subnet                                                             function.
   * @return subnet
  **/
  @javax.annotation.Nullable
  public String getSubnet() {
    return subnet;
  }

  public void setSubnet(String subnet) {
    this.subnet = subnet;
  }


  public ModQuizGetQuizzesByCourses200ResponseQuizzesInner sumgrades(BigDecimal sumgrades) {
    this.sumgrades = sumgrades;
    return this;
  }

   /**
   * The total of all the question instance maxmarks.
   * @return sumgrades
  **/
  @javax.annotation.Nullable
  public BigDecimal getSumgrades() {
    return sumgrades;
  }

  public void setSumgrades(BigDecimal sumgrades) {
    this.sumgrades = sumgrades;
  }


  public ModQuizGetQuizzesByCourses200ResponseQuizzesInner timeclose(Integer timeclose) {
    this.timeclose = timeclose;
    return this;
  }

   /**
   * The time when this quiz closes. (0 &#x3D; no restriction.)
   * @return timeclose
  **/
  @javax.annotation.Nullable
  public Integer getTimeclose() {
    return timeclose;
  }

  public void setTimeclose(Integer timeclose) {
    this.timeclose = timeclose;
  }


  public ModQuizGetQuizzesByCourses200ResponseQuizzesInner timecreated(Integer timecreated) {
    this.timecreated = timecreated;
    return this;
  }

   /**
   * The time when the quiz was added to the course.
   * @return timecreated
  **/
  @javax.annotation.Nullable
  public Integer getTimecreated() {
    return timecreated;
  }

  public void setTimecreated(Integer timecreated) {
    this.timecreated = timecreated;
  }


  public ModQuizGetQuizzesByCourses200ResponseQuizzesInner timelimit(Integer timelimit) {
    this.timelimit = timelimit;
    return this;
  }

   /**
   * The time limit for quiz attempts, in seconds.
   * @return timelimit
  **/
  @javax.annotation.Nullable
  public Integer getTimelimit() {
    return timelimit;
  }

  public void setTimelimit(Integer timelimit) {
    this.timelimit = timelimit;
  }


  public ModQuizGetQuizzesByCourses200ResponseQuizzesInner timemodified(Integer timemodified) {
    this.timemodified = timemodified;
    return this;
  }

   /**
   * Last modified time.
   * @return timemodified
  **/
  @javax.annotation.Nullable
  public Integer getTimemodified() {
    return timemodified;
  }

  public void setTimemodified(Integer timemodified) {
    this.timemodified = timemodified;
  }


  public ModQuizGetQuizzesByCourses200ResponseQuizzesInner timeopen(Integer timeopen) {
    this.timeopen = timeopen;
    return this;
  }

   /**
   * The time when this quiz opens. (0 &#x3D; no restriction.)
   * @return timeopen
  **/
  @javax.annotation.Nullable
  public Integer getTimeopen() {
    return timeopen;
  }

  public void setTimeopen(Integer timeopen) {
    this.timeopen = timeopen;
  }


  public ModQuizGetQuizzesByCourses200ResponseQuizzesInner visible(Boolean visible) {
    this.visible = visible;
    return this;
  }

   /**
   * Visible
   * @return visible
  **/
  @javax.annotation.Nullable
  public Boolean getVisible() {
    return visible;
  }

  public void setVisible(Boolean visible) {
    this.visible = visible;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModQuizGetQuizzesByCourses200ResponseQuizzesInner modQuizGetQuizzesByCourses200ResponseQuizzesInner = (ModQuizGetQuizzesByCourses200ResponseQuizzesInner) o;
    return Objects.equals(this.allowofflineattempts, modQuizGetQuizzesByCourses200ResponseQuizzesInner.allowofflineattempts) &&
        Objects.equals(this.attemptonlast, modQuizGetQuizzesByCourses200ResponseQuizzesInner.attemptonlast) &&
        Objects.equals(this.attempts, modQuizGetQuizzesByCourses200ResponseQuizzesInner.attempts) &&
        Objects.equals(this.autosaveperiod, modQuizGetQuizzesByCourses200ResponseQuizzesInner.autosaveperiod) &&
        Objects.equals(this.browsersecurity, modQuizGetQuizzesByCourses200ResponseQuizzesInner.browsersecurity) &&
        Objects.equals(this.canredoquestions, modQuizGetQuizzesByCourses200ResponseQuizzesInner.canredoquestions) &&
        Objects.equals(this.completionattemptsexhausted, modQuizGetQuizzesByCourses200ResponseQuizzesInner.completionattemptsexhausted) &&
        Objects.equals(this.completionpass, modQuizGetQuizzesByCourses200ResponseQuizzesInner.completionpass) &&
        Objects.equals(this.course, modQuizGetQuizzesByCourses200ResponseQuizzesInner.course) &&
        Objects.equals(this.coursemodule, modQuizGetQuizzesByCourses200ResponseQuizzesInner.coursemodule) &&
        Objects.equals(this.decimalpoints, modQuizGetQuizzesByCourses200ResponseQuizzesInner.decimalpoints) &&
        Objects.equals(this.delay1, modQuizGetQuizzesByCourses200ResponseQuizzesInner.delay1) &&
        Objects.equals(this.delay2, modQuizGetQuizzesByCourses200ResponseQuizzesInner.delay2) &&
        Objects.equals(this.graceperiod, modQuizGetQuizzesByCourses200ResponseQuizzesInner.graceperiod) &&
        Objects.equals(this.grade, modQuizGetQuizzesByCourses200ResponseQuizzesInner.grade) &&
        Objects.equals(this.grademethod, modQuizGetQuizzesByCourses200ResponseQuizzesInner.grademethod) &&
        Objects.equals(this.groupingid, modQuizGetQuizzesByCourses200ResponseQuizzesInner.groupingid) &&
        Objects.equals(this.groupmode, modQuizGetQuizzesByCourses200ResponseQuizzesInner.groupmode) &&
        Objects.equals(this.hasfeedback, modQuizGetQuizzesByCourses200ResponseQuizzesInner.hasfeedback) &&
        Objects.equals(this.hasquestions, modQuizGetQuizzesByCourses200ResponseQuizzesInner.hasquestions) &&
        Objects.equals(this.id, modQuizGetQuizzesByCourses200ResponseQuizzesInner.id) &&
        Objects.equals(this.intro, modQuizGetQuizzesByCourses200ResponseQuizzesInner.intro) &&
        Objects.equals(this.introfiles, modQuizGetQuizzesByCourses200ResponseQuizzesInner.introfiles) &&
        Objects.equals(this.introformat, modQuizGetQuizzesByCourses200ResponseQuizzesInner.introformat) &&
        Objects.equals(this.lang, modQuizGetQuizzesByCourses200ResponseQuizzesInner.lang) &&
        Objects.equals(this.name, modQuizGetQuizzesByCourses200ResponseQuizzesInner.name) &&
        Objects.equals(this.navmethod, modQuizGetQuizzesByCourses200ResponseQuizzesInner.navmethod) &&
        Objects.equals(this.overduehandling, modQuizGetQuizzesByCourses200ResponseQuizzesInner.overduehandling) &&
        Objects.equals(this.password, modQuizGetQuizzesByCourses200ResponseQuizzesInner.password) &&
        Objects.equals(this.preferredbehaviour, modQuizGetQuizzesByCourses200ResponseQuizzesInner.preferredbehaviour) &&
        Objects.equals(this.questiondecimalpoints, modQuizGetQuizzesByCourses200ResponseQuizzesInner.questiondecimalpoints) &&
        Objects.equals(this.questionsperpage, modQuizGetQuizzesByCourses200ResponseQuizzesInner.questionsperpage) &&
        Objects.equals(this.reviewattempt, modQuizGetQuizzesByCourses200ResponseQuizzesInner.reviewattempt) &&
        Objects.equals(this.reviewcorrectness, modQuizGetQuizzesByCourses200ResponseQuizzesInner.reviewcorrectness) &&
        Objects.equals(this.reviewgeneralfeedback, modQuizGetQuizzesByCourses200ResponseQuizzesInner.reviewgeneralfeedback) &&
        Objects.equals(this.reviewmarks, modQuizGetQuizzesByCourses200ResponseQuizzesInner.reviewmarks) &&
        Objects.equals(this.reviewmaxmarks, modQuizGetQuizzesByCourses200ResponseQuizzesInner.reviewmaxmarks) &&
        Objects.equals(this.reviewoverallfeedback, modQuizGetQuizzesByCourses200ResponseQuizzesInner.reviewoverallfeedback) &&
        Objects.equals(this.reviewrightanswer, modQuizGetQuizzesByCourses200ResponseQuizzesInner.reviewrightanswer) &&
        Objects.equals(this.reviewspecificfeedback, modQuizGetQuizzesByCourses200ResponseQuizzesInner.reviewspecificfeedback) &&
        Objects.equals(this.section, modQuizGetQuizzesByCourses200ResponseQuizzesInner.section) &&
        Objects.equals(this.showblocks, modQuizGetQuizzesByCourses200ResponseQuizzesInner.showblocks) &&
        Objects.equals(this.showuserpicture, modQuizGetQuizzesByCourses200ResponseQuizzesInner.showuserpicture) &&
        Objects.equals(this.shuffleanswers, modQuizGetQuizzesByCourses200ResponseQuizzesInner.shuffleanswers) &&
        Objects.equals(this.subnet, modQuizGetQuizzesByCourses200ResponseQuizzesInner.subnet) &&
        Objects.equals(this.sumgrades, modQuizGetQuizzesByCourses200ResponseQuizzesInner.sumgrades) &&
        Objects.equals(this.timeclose, modQuizGetQuizzesByCourses200ResponseQuizzesInner.timeclose) &&
        Objects.equals(this.timecreated, modQuizGetQuizzesByCourses200ResponseQuizzesInner.timecreated) &&
        Objects.equals(this.timelimit, modQuizGetQuizzesByCourses200ResponseQuizzesInner.timelimit) &&
        Objects.equals(this.timemodified, modQuizGetQuizzesByCourses200ResponseQuizzesInner.timemodified) &&
        Objects.equals(this.timeopen, modQuizGetQuizzesByCourses200ResponseQuizzesInner.timeopen) &&
        Objects.equals(this.visible, modQuizGetQuizzesByCourses200ResponseQuizzesInner.visible);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowofflineattempts, attemptonlast, attempts, autosaveperiod, browsersecurity, canredoquestions, completionattemptsexhausted, completionpass, course, coursemodule, decimalpoints, delay1, delay2, graceperiod, grade, grademethod, groupingid, groupmode, hasfeedback, hasquestions, id, intro, introfiles, introformat, lang, name, navmethod, overduehandling, password, preferredbehaviour, questiondecimalpoints, questionsperpage, reviewattempt, reviewcorrectness, reviewgeneralfeedback, reviewmarks, reviewmaxmarks, reviewoverallfeedback, reviewrightanswer, reviewspecificfeedback, section, showblocks, showuserpicture, shuffleanswers, subnet, sumgrades, timeclose, timecreated, timelimit, timemodified, timeopen, visible);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModQuizGetQuizzesByCourses200ResponseQuizzesInner {\n");
    sb.append("    allowofflineattempts: ").append(toIndentedString(allowofflineattempts)).append("\n");
    sb.append("    attemptonlast: ").append(toIndentedString(attemptonlast)).append("\n");
    sb.append("    attempts: ").append(toIndentedString(attempts)).append("\n");
    sb.append("    autosaveperiod: ").append(toIndentedString(autosaveperiod)).append("\n");
    sb.append("    browsersecurity: ").append(toIndentedString(browsersecurity)).append("\n");
    sb.append("    canredoquestions: ").append(toIndentedString(canredoquestions)).append("\n");
    sb.append("    completionattemptsexhausted: ").append(toIndentedString(completionattemptsexhausted)).append("\n");
    sb.append("    completionpass: ").append(toIndentedString(completionpass)).append("\n");
    sb.append("    course: ").append(toIndentedString(course)).append("\n");
    sb.append("    coursemodule: ").append(toIndentedString(coursemodule)).append("\n");
    sb.append("    decimalpoints: ").append(toIndentedString(decimalpoints)).append("\n");
    sb.append("    delay1: ").append(toIndentedString(delay1)).append("\n");
    sb.append("    delay2: ").append(toIndentedString(delay2)).append("\n");
    sb.append("    graceperiod: ").append(toIndentedString(graceperiod)).append("\n");
    sb.append("    grade: ").append(toIndentedString(grade)).append("\n");
    sb.append("    grademethod: ").append(toIndentedString(grademethod)).append("\n");
    sb.append("    groupingid: ").append(toIndentedString(groupingid)).append("\n");
    sb.append("    groupmode: ").append(toIndentedString(groupmode)).append("\n");
    sb.append("    hasfeedback: ").append(toIndentedString(hasfeedback)).append("\n");
    sb.append("    hasquestions: ").append(toIndentedString(hasquestions)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    intro: ").append(toIndentedString(intro)).append("\n");
    sb.append("    introfiles: ").append(toIndentedString(introfiles)).append("\n");
    sb.append("    introformat: ").append(toIndentedString(introformat)).append("\n");
    sb.append("    lang: ").append(toIndentedString(lang)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    navmethod: ").append(toIndentedString(navmethod)).append("\n");
    sb.append("    overduehandling: ").append(toIndentedString(overduehandling)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    preferredbehaviour: ").append(toIndentedString(preferredbehaviour)).append("\n");
    sb.append("    questiondecimalpoints: ").append(toIndentedString(questiondecimalpoints)).append("\n");
    sb.append("    questionsperpage: ").append(toIndentedString(questionsperpage)).append("\n");
    sb.append("    reviewattempt: ").append(toIndentedString(reviewattempt)).append("\n");
    sb.append("    reviewcorrectness: ").append(toIndentedString(reviewcorrectness)).append("\n");
    sb.append("    reviewgeneralfeedback: ").append(toIndentedString(reviewgeneralfeedback)).append("\n");
    sb.append("    reviewmarks: ").append(toIndentedString(reviewmarks)).append("\n");
    sb.append("    reviewmaxmarks: ").append(toIndentedString(reviewmaxmarks)).append("\n");
    sb.append("    reviewoverallfeedback: ").append(toIndentedString(reviewoverallfeedback)).append("\n");
    sb.append("    reviewrightanswer: ").append(toIndentedString(reviewrightanswer)).append("\n");
    sb.append("    reviewspecificfeedback: ").append(toIndentedString(reviewspecificfeedback)).append("\n");
    sb.append("    section: ").append(toIndentedString(section)).append("\n");
    sb.append("    showblocks: ").append(toIndentedString(showblocks)).append("\n");
    sb.append("    showuserpicture: ").append(toIndentedString(showuserpicture)).append("\n");
    sb.append("    shuffleanswers: ").append(toIndentedString(shuffleanswers)).append("\n");
    sb.append("    subnet: ").append(toIndentedString(subnet)).append("\n");
    sb.append("    sumgrades: ").append(toIndentedString(sumgrades)).append("\n");
    sb.append("    timeclose: ").append(toIndentedString(timeclose)).append("\n");
    sb.append("    timecreated: ").append(toIndentedString(timecreated)).append("\n");
    sb.append("    timelimit: ").append(toIndentedString(timelimit)).append("\n");
    sb.append("    timemodified: ").append(toIndentedString(timemodified)).append("\n");
    sb.append("    timeopen: ").append(toIndentedString(timeopen)).append("\n");
    sb.append("    visible: ").append(toIndentedString(visible)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowofflineattempts");
    openapiFields.add("attemptonlast");
    openapiFields.add("attempts");
    openapiFields.add("autosaveperiod");
    openapiFields.add("browsersecurity");
    openapiFields.add("canredoquestions");
    openapiFields.add("completionattemptsexhausted");
    openapiFields.add("completionpass");
    openapiFields.add("course");
    openapiFields.add("coursemodule");
    openapiFields.add("decimalpoints");
    openapiFields.add("delay1");
    openapiFields.add("delay2");
    openapiFields.add("graceperiod");
    openapiFields.add("grade");
    openapiFields.add("grademethod");
    openapiFields.add("groupingid");
    openapiFields.add("groupmode");
    openapiFields.add("hasfeedback");
    openapiFields.add("hasquestions");
    openapiFields.add("id");
    openapiFields.add("intro");
    openapiFields.add("introfiles");
    openapiFields.add("introformat");
    openapiFields.add("lang");
    openapiFields.add("name");
    openapiFields.add("navmethod");
    openapiFields.add("overduehandling");
    openapiFields.add("password");
    openapiFields.add("preferredbehaviour");
    openapiFields.add("questiondecimalpoints");
    openapiFields.add("questionsperpage");
    openapiFields.add("reviewattempt");
    openapiFields.add("reviewcorrectness");
    openapiFields.add("reviewgeneralfeedback");
    openapiFields.add("reviewmarks");
    openapiFields.add("reviewmaxmarks");
    openapiFields.add("reviewoverallfeedback");
    openapiFields.add("reviewrightanswer");
    openapiFields.add("reviewspecificfeedback");
    openapiFields.add("section");
    openapiFields.add("showblocks");
    openapiFields.add("showuserpicture");
    openapiFields.add("shuffleanswers");
    openapiFields.add("subnet");
    openapiFields.add("sumgrades");
    openapiFields.add("timeclose");
    openapiFields.add("timecreated");
    openapiFields.add("timelimit");
    openapiFields.add("timemodified");
    openapiFields.add("timeopen");
    openapiFields.add("visible");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ModQuizGetQuizzesByCourses200ResponseQuizzesInner
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ModQuizGetQuizzesByCourses200ResponseQuizzesInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModQuizGetQuizzesByCourses200ResponseQuizzesInner is not found in the empty JSON string", ModQuizGetQuizzesByCourses200ResponseQuizzesInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ModQuizGetQuizzesByCourses200ResponseQuizzesInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModQuizGetQuizzesByCourses200ResponseQuizzesInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("browsersecurity") != null && !jsonObj.get("browsersecurity").isJsonNull()) && !jsonObj.get("browsersecurity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `browsersecurity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("browsersecurity").toString()));
      }
      if ((jsonObj.get("intro") != null && !jsonObj.get("intro").isJsonNull()) && !jsonObj.get("intro").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `intro` to be a primitive type in the JSON string but got `%s`", jsonObj.get("intro").toString()));
      }
      if (jsonObj.get("introfiles") != null && !jsonObj.get("introfiles").isJsonNull()) {
        JsonArray jsonArrayintrofiles = jsonObj.getAsJsonArray("introfiles");
        if (jsonArrayintrofiles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("introfiles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `introfiles` to be an array in the JSON string but got `%s`", jsonObj.get("introfiles").toString()));
          }

          // validate the optional field `introfiles` (array)
          for (int i = 0; i < jsonArrayintrofiles.size(); i++) {
            CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner.validateJsonElement(jsonArrayintrofiles.get(i));
          };
        }
      }
      if ((jsonObj.get("lang") != null && !jsonObj.get("lang").isJsonNull()) && !jsonObj.get("lang").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lang` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lang").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("navmethod") != null && !jsonObj.get("navmethod").isJsonNull()) && !jsonObj.get("navmethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `navmethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("navmethod").toString()));
      }
      if ((jsonObj.get("overduehandling") != null && !jsonObj.get("overduehandling").isJsonNull()) && !jsonObj.get("overduehandling").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `overduehandling` to be a primitive type in the JSON string but got `%s`", jsonObj.get("overduehandling").toString()));
      }
      if ((jsonObj.get("password") != null && !jsonObj.get("password").isJsonNull()) && !jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      if ((jsonObj.get("preferredbehaviour") != null && !jsonObj.get("preferredbehaviour").isJsonNull()) && !jsonObj.get("preferredbehaviour").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `preferredbehaviour` to be a primitive type in the JSON string but got `%s`", jsonObj.get("preferredbehaviour").toString()));
      }
      if ((jsonObj.get("subnet") != null && !jsonObj.get("subnet").isJsonNull()) && !jsonObj.get("subnet").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subnet` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subnet").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModQuizGetQuizzesByCourses200ResponseQuizzesInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModQuizGetQuizzesByCourses200ResponseQuizzesInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModQuizGetQuizzesByCourses200ResponseQuizzesInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModQuizGetQuizzesByCourses200ResponseQuizzesInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ModQuizGetQuizzesByCourses200ResponseQuizzesInner>() {
           @Override
           public void write(JsonWriter out, ModQuizGetQuizzesByCourses200ResponseQuizzesInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModQuizGetQuizzesByCourses200ResponseQuizzesInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ModQuizGetQuizzesByCourses200ResponseQuizzesInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ModQuizGetQuizzesByCourses200ResponseQuizzesInner
  * @throws IOException if the JSON string is invalid with respect to ModQuizGetQuizzesByCourses200ResponseQuizzesInner
  */
  public static ModQuizGetQuizzesByCourses200ResponseQuizzesInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModQuizGetQuizzesByCourses200ResponseQuizzesInner.class);
  }

 /**
  * Convert an instance of ModQuizGetQuizzesByCourses200ResponseQuizzesInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

