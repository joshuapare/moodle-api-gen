/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.joshuapare.JSON;

/**
 * ToolXmldbInvokeMoveActionRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-18T20:58:28.689161-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class ToolXmldbInvokeMoveActionRequest {
  public static final String SERIALIZED_NAME_ACTION = "action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private String action = "null";

  public static final String SERIALIZED_NAME_DIR = "dir";
  @SerializedName(SERIALIZED_NAME_DIR)
  private String dir = "null";

  public static final String SERIALIZED_NAME_FIELD = "field";
  @SerializedName(SERIALIZED_NAME_FIELD)
  private String field = "";

  public static final String SERIALIZED_NAME_INDEX = "index";
  @SerializedName(SERIALIZED_NAME_INDEX)
  private String index = "";

  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  private String key = "";

  public static final String SERIALIZED_NAME_POSITION = "position";
  @SerializedName(SERIALIZED_NAME_POSITION)
  private Integer position = null;

  public static final String SERIALIZED_NAME_TABLE = "table";
  @SerializedName(SERIALIZED_NAME_TABLE)
  private String table = "null";

  public ToolXmldbInvokeMoveActionRequest() {
  }

  public ToolXmldbInvokeMoveActionRequest action(String action) {
    this.action = action;
    return this;
  }

   /**
   * Action
   * @return action
  **/
  @javax.annotation.Nonnull
  public String getAction() {
    return action;
  }

  public void setAction(String action) {
    this.action = action;
  }


  public ToolXmldbInvokeMoveActionRequest dir(String dir) {
    this.dir = dir;
    return this;
  }

   /**
   * Plugin that is being edited
   * @return dir
  **/
  @javax.annotation.Nonnull
  public String getDir() {
    return dir;
  }

  public void setDir(String dir) {
    this.dir = dir;
  }


  public ToolXmldbInvokeMoveActionRequest field(String field) {
    this.field = field;
    return this;
  }

   /**
   * Field name
   * @return field
  **/
  @javax.annotation.Nullable
  public String getField() {
    return field;
  }

  public void setField(String field) {
    this.field = field;
  }


  public ToolXmldbInvokeMoveActionRequest index(String index) {
    this.index = index;
    return this;
  }

   /**
   * Index name
   * @return index
  **/
  @javax.annotation.Nullable
  public String getIndex() {
    return index;
  }

  public void setIndex(String index) {
    this.index = index;
  }


  public ToolXmldbInvokeMoveActionRequest key(String key) {
    this.key = key;
    return this;
  }

   /**
   * Key name
   * @return key
  **/
  @javax.annotation.Nullable
  public String getKey() {
    return key;
  }

  public void setKey(String key) {
    this.key = key;
  }


  public ToolXmldbInvokeMoveActionRequest position(Integer position) {
    this.position = position;
    return this;
  }

   /**
   * How many positions to move by (negative - up, positive - down)
   * @return position
  **/
  @javax.annotation.Nonnull
  public Integer getPosition() {
    return position;
  }

  public void setPosition(Integer position) {
    this.position = position;
  }


  public ToolXmldbInvokeMoveActionRequest table(String table) {
    this.table = table;
    return this;
  }

   /**
   * Table name
   * @return table
  **/
  @javax.annotation.Nonnull
  public String getTable() {
    return table;
  }

  public void setTable(String table) {
    this.table = table;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ToolXmldbInvokeMoveActionRequest toolXmldbInvokeMoveActionRequest = (ToolXmldbInvokeMoveActionRequest) o;
    return Objects.equals(this.action, toolXmldbInvokeMoveActionRequest.action) &&
        Objects.equals(this.dir, toolXmldbInvokeMoveActionRequest.dir) &&
        Objects.equals(this.field, toolXmldbInvokeMoveActionRequest.field) &&
        Objects.equals(this.index, toolXmldbInvokeMoveActionRequest.index) &&
        Objects.equals(this.key, toolXmldbInvokeMoveActionRequest.key) &&
        Objects.equals(this.position, toolXmldbInvokeMoveActionRequest.position) &&
        Objects.equals(this.table, toolXmldbInvokeMoveActionRequest.table);
  }

  @Override
  public int hashCode() {
    return Objects.hash(action, dir, field, index, key, position, table);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ToolXmldbInvokeMoveActionRequest {\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    dir: ").append(toIndentedString(dir)).append("\n");
    sb.append("    field: ").append(toIndentedString(field)).append("\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    table: ").append(toIndentedString(table)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("action");
    openapiFields.add("dir");
    openapiFields.add("field");
    openapiFields.add("index");
    openapiFields.add("key");
    openapiFields.add("position");
    openapiFields.add("table");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("action");
    openapiRequiredFields.add("dir");
    openapiRequiredFields.add("position");
    openapiRequiredFields.add("table");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ToolXmldbInvokeMoveActionRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ToolXmldbInvokeMoveActionRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ToolXmldbInvokeMoveActionRequest is not found in the empty JSON string", ToolXmldbInvokeMoveActionRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ToolXmldbInvokeMoveActionRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ToolXmldbInvokeMoveActionRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ToolXmldbInvokeMoveActionRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("action").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `action` to be a primitive type in the JSON string but got `%s`", jsonObj.get("action").toString()));
      }
      if (!jsonObj.get("dir").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dir` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dir").toString()));
      }
      if ((jsonObj.get("field") != null && !jsonObj.get("field").isJsonNull()) && !jsonObj.get("field").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `field` to be a primitive type in the JSON string but got `%s`", jsonObj.get("field").toString()));
      }
      if ((jsonObj.get("index") != null && !jsonObj.get("index").isJsonNull()) && !jsonObj.get("index").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `index` to be a primitive type in the JSON string but got `%s`", jsonObj.get("index").toString()));
      }
      if ((jsonObj.get("key") != null && !jsonObj.get("key").isJsonNull()) && !jsonObj.get("key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("key").toString()));
      }
      if (!jsonObj.get("table").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `table` to be a primitive type in the JSON string but got `%s`", jsonObj.get("table").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ToolXmldbInvokeMoveActionRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ToolXmldbInvokeMoveActionRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ToolXmldbInvokeMoveActionRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ToolXmldbInvokeMoveActionRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ToolXmldbInvokeMoveActionRequest>() {
           @Override
           public void write(JsonWriter out, ToolXmldbInvokeMoveActionRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ToolXmldbInvokeMoveActionRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ToolXmldbInvokeMoveActionRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ToolXmldbInvokeMoveActionRequest
  * @throws IOException if the JSON string is invalid with respect to ToolXmldbInvokeMoveActionRequest
  */
  public static ToolXmldbInvokeMoveActionRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ToolXmldbInvokeMoveActionRequest.class);
  }

 /**
  * Convert an instance of ToolXmldbInvokeMoveActionRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

