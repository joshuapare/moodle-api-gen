/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.joshuapare.JSON;

/**
 * ToolLpDataForCourseCompetenciesPage200ResponseSettings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-18T14:00:07.069642-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class ToolLpDataForCourseCompetenciesPage200ResponseSettings {
  public static final String SERIALIZED_NAME_COURSEID = "courseid";
  @SerializedName(SERIALIZED_NAME_COURSEID)
  private Integer courseid;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id = 0;

  public static final String SERIALIZED_NAME_PUSHRATINGSTOUSERPLANS = "pushratingstouserplans";
  @SerializedName(SERIALIZED_NAME_PUSHRATINGSTOUSERPLANS)
  private Boolean pushratingstouserplans = {};

  public static final String SERIALIZED_NAME_TIMECREATED = "timecreated";
  @SerializedName(SERIALIZED_NAME_TIMECREATED)
  private Integer timecreated = 0;

  public static final String SERIALIZED_NAME_TIMEMODIFIED = "timemodified";
  @SerializedName(SERIALIZED_NAME_TIMEMODIFIED)
  private Integer timemodified = 0;

  public static final String SERIALIZED_NAME_USERMODIFIED = "usermodified";
  @SerializedName(SERIALIZED_NAME_USERMODIFIED)
  private Integer usermodified = 0;

  public ToolLpDataForCourseCompetenciesPage200ResponseSettings() {
  }

  public ToolLpDataForCourseCompetenciesPage200ResponseSettings courseid(Integer courseid) {
    this.courseid = courseid;
    return this;
  }

   /**
   * courseid
   * @return courseid
  **/
  @javax.annotation.Nonnull
  public Integer getCourseid() {
    return courseid;
  }

  public void setCourseid(Integer courseid) {
    this.courseid = courseid;
  }


  public ToolLpDataForCourseCompetenciesPage200ResponseSettings id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * id
   * @return id
  **/
  @javax.annotation.Nonnull
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public ToolLpDataForCourseCompetenciesPage200ResponseSettings pushratingstouserplans(Boolean pushratingstouserplans) {
    this.pushratingstouserplans = pushratingstouserplans;
    return this;
  }

   /**
   * pushratingstouserplans
   * @return pushratingstouserplans
  **/
  @javax.annotation.Nonnull
  public Boolean getPushratingstouserplans() {
    return pushratingstouserplans;
  }

  public void setPushratingstouserplans(Boolean pushratingstouserplans) {
    this.pushratingstouserplans = pushratingstouserplans;
  }


  public ToolLpDataForCourseCompetenciesPage200ResponseSettings timecreated(Integer timecreated) {
    this.timecreated = timecreated;
    return this;
  }

   /**
   * timecreated
   * @return timecreated
  **/
  @javax.annotation.Nonnull
  public Integer getTimecreated() {
    return timecreated;
  }

  public void setTimecreated(Integer timecreated) {
    this.timecreated = timecreated;
  }


  public ToolLpDataForCourseCompetenciesPage200ResponseSettings timemodified(Integer timemodified) {
    this.timemodified = timemodified;
    return this;
  }

   /**
   * timemodified
   * @return timemodified
  **/
  @javax.annotation.Nonnull
  public Integer getTimemodified() {
    return timemodified;
  }

  public void setTimemodified(Integer timemodified) {
    this.timemodified = timemodified;
  }


  public ToolLpDataForCourseCompetenciesPage200ResponseSettings usermodified(Integer usermodified) {
    this.usermodified = usermodified;
    return this;
  }

   /**
   * usermodified
   * @return usermodified
  **/
  @javax.annotation.Nonnull
  public Integer getUsermodified() {
    return usermodified;
  }

  public void setUsermodified(Integer usermodified) {
    this.usermodified = usermodified;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ToolLpDataForCourseCompetenciesPage200ResponseSettings toolLpDataForCourseCompetenciesPage200ResponseSettings = (ToolLpDataForCourseCompetenciesPage200ResponseSettings) o;
    return Objects.equals(this.courseid, toolLpDataForCourseCompetenciesPage200ResponseSettings.courseid) &&
        Objects.equals(this.id, toolLpDataForCourseCompetenciesPage200ResponseSettings.id) &&
        Objects.equals(this.pushratingstouserplans, toolLpDataForCourseCompetenciesPage200ResponseSettings.pushratingstouserplans) &&
        Objects.equals(this.timecreated, toolLpDataForCourseCompetenciesPage200ResponseSettings.timecreated) &&
        Objects.equals(this.timemodified, toolLpDataForCourseCompetenciesPage200ResponseSettings.timemodified) &&
        Objects.equals(this.usermodified, toolLpDataForCourseCompetenciesPage200ResponseSettings.usermodified);
  }

  @Override
  public int hashCode() {
    return Objects.hash(courseid, id, pushratingstouserplans, timecreated, timemodified, usermodified);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ToolLpDataForCourseCompetenciesPage200ResponseSettings {\n");
    sb.append("    courseid: ").append(toIndentedString(courseid)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    pushratingstouserplans: ").append(toIndentedString(pushratingstouserplans)).append("\n");
    sb.append("    timecreated: ").append(toIndentedString(timecreated)).append("\n");
    sb.append("    timemodified: ").append(toIndentedString(timemodified)).append("\n");
    sb.append("    usermodified: ").append(toIndentedString(usermodified)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("courseid");
    openapiFields.add("id");
    openapiFields.add("pushratingstouserplans");
    openapiFields.add("timecreated");
    openapiFields.add("timemodified");
    openapiFields.add("usermodified");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("courseid");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("pushratingstouserplans");
    openapiRequiredFields.add("timecreated");
    openapiRequiredFields.add("timemodified");
    openapiRequiredFields.add("usermodified");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ToolLpDataForCourseCompetenciesPage200ResponseSettings
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ToolLpDataForCourseCompetenciesPage200ResponseSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ToolLpDataForCourseCompetenciesPage200ResponseSettings is not found in the empty JSON string", ToolLpDataForCourseCompetenciesPage200ResponseSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ToolLpDataForCourseCompetenciesPage200ResponseSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ToolLpDataForCourseCompetenciesPage200ResponseSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ToolLpDataForCourseCompetenciesPage200ResponseSettings.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ToolLpDataForCourseCompetenciesPage200ResponseSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ToolLpDataForCourseCompetenciesPage200ResponseSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ToolLpDataForCourseCompetenciesPage200ResponseSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ToolLpDataForCourseCompetenciesPage200ResponseSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<ToolLpDataForCourseCompetenciesPage200ResponseSettings>() {
           @Override
           public void write(JsonWriter out, ToolLpDataForCourseCompetenciesPage200ResponseSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ToolLpDataForCourseCompetenciesPage200ResponseSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ToolLpDataForCourseCompetenciesPage200ResponseSettings given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ToolLpDataForCourseCompetenciesPage200ResponseSettings
  * @throws IOException if the JSON string is invalid with respect to ToolLpDataForCourseCompetenciesPage200ResponseSettings
  */
  public static ToolLpDataForCourseCompetenciesPage200ResponseSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ToolLpDataForCourseCompetenciesPage200ResponseSettings.class);
  }

 /**
  * Convert an instance of ToolLpDataForCourseCompetenciesPage200ResponseSettings to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

