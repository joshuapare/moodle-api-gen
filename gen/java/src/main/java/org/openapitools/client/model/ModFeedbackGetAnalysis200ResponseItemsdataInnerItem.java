/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ModFeedbackGetAnalysis200ResponseItemsdataInnerItemItemfilesInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.joshuapare.JSON;

/**
 * ModFeedbackGetAnalysis200ResponseItemsdataInnerItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-18T20:58:28.689161-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class ModFeedbackGetAnalysis200ResponseItemsdataInnerItem {
  public static final String SERIALIZED_NAME_DEPENDITEM = "dependitem";
  @SerializedName(SERIALIZED_NAME_DEPENDITEM)
  private Integer dependitem = 0;

  public static final String SERIALIZED_NAME_DEPENDVALUE = "dependvalue";
  @SerializedName(SERIALIZED_NAME_DEPENDVALUE)
  private String dependvalue = "null";

  public static final String SERIALIZED_NAME_FEEDBACK = "feedback";
  @SerializedName(SERIALIZED_NAME_FEEDBACK)
  private Integer feedback = 0;

  public static final String SERIALIZED_NAME_HASVALUE = "hasvalue";
  @SerializedName(SERIALIZED_NAME_HASVALUE)
  private Integer hasvalue = 0;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id = null;

  public static final String SERIALIZED_NAME_ITEMFILES = "itemfiles";
  @SerializedName(SERIALIZED_NAME_ITEMFILES)
  private List<ModFeedbackGetAnalysis200ResponseItemsdataInnerItemItemfilesInner> itemfiles = new ArrayList<>();

  public static final String SERIALIZED_NAME_ITEMNUMBER = "itemnumber";
  @SerializedName(SERIALIZED_NAME_ITEMNUMBER)
  private Integer itemnumber = null;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label = "null";

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name = "null";

  public static final String SERIALIZED_NAME_OPTIONS = "options";
  @SerializedName(SERIALIZED_NAME_OPTIONS)
  private String options = "null";

  public static final String SERIALIZED_NAME_OTHERDATA = "otherdata";
  @SerializedName(SERIALIZED_NAME_OTHERDATA)
  private String otherdata = "null";

  public static final String SERIALIZED_NAME_POSITION = "position";
  @SerializedName(SERIALIZED_NAME_POSITION)
  private Integer position = 0;

  public static final String SERIALIZED_NAME_PRESENTATION = "presentation";
  @SerializedName(SERIALIZED_NAME_PRESENTATION)
  private String presentation = "null";

  public static final String SERIALIZED_NAME_REQUIRED = "required";
  @SerializedName(SERIALIZED_NAME_REQUIRED)
  private Boolean required = 0;

  public static final String SERIALIZED_NAME_TEMPLATE = "template";
  @SerializedName(SERIALIZED_NAME_TEMPLATE)
  private Integer template = 0;

  public static final String SERIALIZED_NAME_TYP = "typ";
  @SerializedName(SERIALIZED_NAME_TYP)
  private String typ = "null";

  public ModFeedbackGetAnalysis200ResponseItemsdataInnerItem() {
  }

  public ModFeedbackGetAnalysis200ResponseItemsdataInnerItem dependitem(Integer dependitem) {
    this.dependitem = dependitem;
    return this;
  }

   /**
   * The item id this item depend on.
   * @return dependitem
  **/
  @javax.annotation.Nonnull
  public Integer getDependitem() {
    return dependitem;
  }

  public void setDependitem(Integer dependitem) {
    this.dependitem = dependitem;
  }


  public ModFeedbackGetAnalysis200ResponseItemsdataInnerItem dependvalue(String dependvalue) {
    this.dependvalue = dependvalue;
    return this;
  }

   /**
   * The depend value.
   * @return dependvalue
  **/
  @javax.annotation.Nonnull
  public String getDependvalue() {
    return dependvalue;
  }

  public void setDependvalue(String dependvalue) {
    this.dependvalue = dependvalue;
  }


  public ModFeedbackGetAnalysis200ResponseItemsdataInnerItem feedback(Integer feedback) {
    this.feedback = feedback;
    return this;
  }

   /**
   * The feedback instance id this records belongs to.
   * @return feedback
  **/
  @javax.annotation.Nonnull
  public Integer getFeedback() {
    return feedback;
  }

  public void setFeedback(Integer feedback) {
    this.feedback = feedback;
  }


  public ModFeedbackGetAnalysis200ResponseItemsdataInnerItem hasvalue(Integer hasvalue) {
    this.hasvalue = hasvalue;
    return this;
  }

   /**
   * Whether it has a value or not.
   * @return hasvalue
  **/
  @javax.annotation.Nonnull
  public Integer getHasvalue() {
    return hasvalue;
  }

  public void setHasvalue(Integer hasvalue) {
    this.hasvalue = hasvalue;
  }


  public ModFeedbackGetAnalysis200ResponseItemsdataInnerItem id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * The record id.
   * @return id
  **/
  @javax.annotation.Nonnull
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public ModFeedbackGetAnalysis200ResponseItemsdataInnerItem itemfiles(List<ModFeedbackGetAnalysis200ResponseItemsdataInnerItemItemfilesInner> itemfiles) {
    this.itemfiles = itemfiles;
    return this;
  }

  public ModFeedbackGetAnalysis200ResponseItemsdataInnerItem addItemfilesItem(ModFeedbackGetAnalysis200ResponseItemsdataInnerItemItemfilesInner itemfilesItem) {
    if (this.itemfiles == null) {
      this.itemfiles = new ArrayList<>();
    }
    this.itemfiles.add(itemfilesItem);
    return this;
  }

   /**
   * Get itemfiles
   * @return itemfiles
  **/
  @javax.annotation.Nonnull
  public List<ModFeedbackGetAnalysis200ResponseItemsdataInnerItemItemfilesInner> getItemfiles() {
    return itemfiles;
  }

  public void setItemfiles(List<ModFeedbackGetAnalysis200ResponseItemsdataInnerItemItemfilesInner> itemfiles) {
    this.itemfiles = itemfiles;
  }


  public ModFeedbackGetAnalysis200ResponseItemsdataInnerItem itemnumber(Integer itemnumber) {
    this.itemnumber = itemnumber;
    return this;
  }

   /**
   * The item position number
   * @return itemnumber
  **/
  @javax.annotation.Nonnull
  public Integer getItemnumber() {
    return itemnumber;
  }

  public void setItemnumber(Integer itemnumber) {
    this.itemnumber = itemnumber;
  }


  public ModFeedbackGetAnalysis200ResponseItemsdataInnerItem label(String label) {
    this.label = label;
    return this;
  }

   /**
   * The item label.
   * @return label
  **/
  @javax.annotation.Nonnull
  public String getLabel() {
    return label;
  }

  public void setLabel(String label) {
    this.label = label;
  }


  public ModFeedbackGetAnalysis200ResponseItemsdataInnerItem name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The item name.
   * @return name
  **/
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ModFeedbackGetAnalysis200ResponseItemsdataInnerItem options(String options) {
    this.options = options;
    return this;
  }

   /**
   * Different additional settings for the item (question).
   * @return options
  **/
  @javax.annotation.Nonnull
  public String getOptions() {
    return options;
  }

  public void setOptions(String options) {
    this.options = options;
  }


  public ModFeedbackGetAnalysis200ResponseItemsdataInnerItem otherdata(String otherdata) {
    this.otherdata = otherdata;
    return this;
  }

   /**
   * Additional data that may be required by external functions
   * @return otherdata
  **/
  @javax.annotation.Nonnull
  public String getOtherdata() {
    return otherdata;
  }

  public void setOtherdata(String otherdata) {
    this.otherdata = otherdata;
  }


  public ModFeedbackGetAnalysis200ResponseItemsdataInnerItem position(Integer position) {
    this.position = position;
    return this;
  }

   /**
   * The position in the list of questions.
   * @return position
  **/
  @javax.annotation.Nonnull
  public Integer getPosition() {
    return position;
  }

  public void setPosition(Integer position) {
    this.position = position;
  }


  public ModFeedbackGetAnalysis200ResponseItemsdataInnerItem presentation(String presentation) {
    this.presentation = presentation;
    return this;
  }

   /**
   * The text describing the item or the available possible answers.
   * @return presentation
  **/
  @javax.annotation.Nonnull
  public String getPresentation() {
    return presentation;
  }

  public void setPresentation(String presentation) {
    this.presentation = presentation;
  }


  public ModFeedbackGetAnalysis200ResponseItemsdataInnerItem required(Boolean required) {
    this.required = required;
    return this;
  }

   /**
   * Whether is a item (question) required or not.
   * @return required
  **/
  @javax.annotation.Nonnull
  public Boolean getRequired() {
    return required;
  }

  public void setRequired(Boolean required) {
    this.required = required;
  }


  public ModFeedbackGetAnalysis200ResponseItemsdataInnerItem template(Integer template) {
    this.template = template;
    return this;
  }

   /**
   * If it belogns to a template, the template id.
   * @return template
  **/
  @javax.annotation.Nonnull
  public Integer getTemplate() {
    return template;
  }

  public void setTemplate(Integer template) {
    this.template = template;
  }


  public ModFeedbackGetAnalysis200ResponseItemsdataInnerItem typ(String typ) {
    this.typ = typ;
    return this;
  }

   /**
   * The type of the item.
   * @return typ
  **/
  @javax.annotation.Nonnull
  public String getTyp() {
    return typ;
  }

  public void setTyp(String typ) {
    this.typ = typ;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModFeedbackGetAnalysis200ResponseItemsdataInnerItem modFeedbackGetAnalysis200ResponseItemsdataInnerItem = (ModFeedbackGetAnalysis200ResponseItemsdataInnerItem) o;
    return Objects.equals(this.dependitem, modFeedbackGetAnalysis200ResponseItemsdataInnerItem.dependitem) &&
        Objects.equals(this.dependvalue, modFeedbackGetAnalysis200ResponseItemsdataInnerItem.dependvalue) &&
        Objects.equals(this.feedback, modFeedbackGetAnalysis200ResponseItemsdataInnerItem.feedback) &&
        Objects.equals(this.hasvalue, modFeedbackGetAnalysis200ResponseItemsdataInnerItem.hasvalue) &&
        Objects.equals(this.id, modFeedbackGetAnalysis200ResponseItemsdataInnerItem.id) &&
        Objects.equals(this.itemfiles, modFeedbackGetAnalysis200ResponseItemsdataInnerItem.itemfiles) &&
        Objects.equals(this.itemnumber, modFeedbackGetAnalysis200ResponseItemsdataInnerItem.itemnumber) &&
        Objects.equals(this.label, modFeedbackGetAnalysis200ResponseItemsdataInnerItem.label) &&
        Objects.equals(this.name, modFeedbackGetAnalysis200ResponseItemsdataInnerItem.name) &&
        Objects.equals(this.options, modFeedbackGetAnalysis200ResponseItemsdataInnerItem.options) &&
        Objects.equals(this.otherdata, modFeedbackGetAnalysis200ResponseItemsdataInnerItem.otherdata) &&
        Objects.equals(this.position, modFeedbackGetAnalysis200ResponseItemsdataInnerItem.position) &&
        Objects.equals(this.presentation, modFeedbackGetAnalysis200ResponseItemsdataInnerItem.presentation) &&
        Objects.equals(this.required, modFeedbackGetAnalysis200ResponseItemsdataInnerItem.required) &&
        Objects.equals(this.template, modFeedbackGetAnalysis200ResponseItemsdataInnerItem.template) &&
        Objects.equals(this.typ, modFeedbackGetAnalysis200ResponseItemsdataInnerItem.typ);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dependitem, dependvalue, feedback, hasvalue, id, itemfiles, itemnumber, label, name, options, otherdata, position, presentation, required, template, typ);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModFeedbackGetAnalysis200ResponseItemsdataInnerItem {\n");
    sb.append("    dependitem: ").append(toIndentedString(dependitem)).append("\n");
    sb.append("    dependvalue: ").append(toIndentedString(dependvalue)).append("\n");
    sb.append("    feedback: ").append(toIndentedString(feedback)).append("\n");
    sb.append("    hasvalue: ").append(toIndentedString(hasvalue)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    itemfiles: ").append(toIndentedString(itemfiles)).append("\n");
    sb.append("    itemnumber: ").append(toIndentedString(itemnumber)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    otherdata: ").append(toIndentedString(otherdata)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    presentation: ").append(toIndentedString(presentation)).append("\n");
    sb.append("    required: ").append(toIndentedString(required)).append("\n");
    sb.append("    template: ").append(toIndentedString(template)).append("\n");
    sb.append("    typ: ").append(toIndentedString(typ)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dependitem");
    openapiFields.add("dependvalue");
    openapiFields.add("feedback");
    openapiFields.add("hasvalue");
    openapiFields.add("id");
    openapiFields.add("itemfiles");
    openapiFields.add("itemnumber");
    openapiFields.add("label");
    openapiFields.add("name");
    openapiFields.add("options");
    openapiFields.add("otherdata");
    openapiFields.add("position");
    openapiFields.add("presentation");
    openapiFields.add("required");
    openapiFields.add("template");
    openapiFields.add("typ");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("dependitem");
    openapiRequiredFields.add("dependvalue");
    openapiRequiredFields.add("feedback");
    openapiRequiredFields.add("hasvalue");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("itemfiles");
    openapiRequiredFields.add("itemnumber");
    openapiRequiredFields.add("label");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("options");
    openapiRequiredFields.add("otherdata");
    openapiRequiredFields.add("position");
    openapiRequiredFields.add("presentation");
    openapiRequiredFields.add("required");
    openapiRequiredFields.add("template");
    openapiRequiredFields.add("typ");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ModFeedbackGetAnalysis200ResponseItemsdataInnerItem
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ModFeedbackGetAnalysis200ResponseItemsdataInnerItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModFeedbackGetAnalysis200ResponseItemsdataInnerItem is not found in the empty JSON string", ModFeedbackGetAnalysis200ResponseItemsdataInnerItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ModFeedbackGetAnalysis200ResponseItemsdataInnerItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModFeedbackGetAnalysis200ResponseItemsdataInnerItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ModFeedbackGetAnalysis200ResponseItemsdataInnerItem.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("dependvalue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dependvalue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dependvalue").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("itemfiles").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemfiles` to be an array in the JSON string but got `%s`", jsonObj.get("itemfiles").toString()));
      }

      JsonArray jsonArrayitemfiles = jsonObj.getAsJsonArray("itemfiles");
      // validate the required field `itemfiles` (array)
      for (int i = 0; i < jsonArrayitemfiles.size(); i++) {
        ModFeedbackGetAnalysis200ResponseItemsdataInnerItemItemfilesInner.validateJsonElement(jsonArrayitemfiles.get(i));
      };
      if (!jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("options").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `options` to be a primitive type in the JSON string but got `%s`", jsonObj.get("options").toString()));
      }
      if (!jsonObj.get("otherdata").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `otherdata` to be a primitive type in the JSON string but got `%s`", jsonObj.get("otherdata").toString()));
      }
      if (!jsonObj.get("presentation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `presentation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("presentation").toString()));
      }
      if (!jsonObj.get("typ").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `typ` to be a primitive type in the JSON string but got `%s`", jsonObj.get("typ").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModFeedbackGetAnalysis200ResponseItemsdataInnerItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModFeedbackGetAnalysis200ResponseItemsdataInnerItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModFeedbackGetAnalysis200ResponseItemsdataInnerItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModFeedbackGetAnalysis200ResponseItemsdataInnerItem.class));

       return (TypeAdapter<T>) new TypeAdapter<ModFeedbackGetAnalysis200ResponseItemsdataInnerItem>() {
           @Override
           public void write(JsonWriter out, ModFeedbackGetAnalysis200ResponseItemsdataInnerItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModFeedbackGetAnalysis200ResponseItemsdataInnerItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ModFeedbackGetAnalysis200ResponseItemsdataInnerItem given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ModFeedbackGetAnalysis200ResponseItemsdataInnerItem
  * @throws IOException if the JSON string is invalid with respect to ModFeedbackGetAnalysis200ResponseItemsdataInnerItem
  */
  public static ModFeedbackGetAnalysis200ResponseItemsdataInnerItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModFeedbackGetAnalysis200ResponseItemsdataInnerItem.class);
  }

 /**
  * Convert an instance of ModFeedbackGetAnalysis200ResponseItemsdataInnerItem to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

