/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GradingformRubricGraderGradingpanelFetch200ResponseGradeCriteriaInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.joshuapare.JSON;

/**
 * GradingformRubricGraderGradingpanelFetch200ResponseGrade
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-18T14:00:07.069642-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class GradingformRubricGraderGradingpanelFetch200ResponseGrade {
  public static final String SERIALIZED_NAME_CANEDIT = "canedit";
  @SerializedName(SERIALIZED_NAME_CANEDIT)
  private Boolean canedit = null;

  public static final String SERIALIZED_NAME_CRITERIA = "criteria";
  @SerializedName(SERIALIZED_NAME_CRITERIA)
  private List<GradingformRubricGraderGradingpanelFetch200ResponseGradeCriteriaInner> criteria = new ArrayList<>();

  public static final String SERIALIZED_NAME_GRADEDBY = "gradedby";
  @SerializedName(SERIALIZED_NAME_GRADEDBY)
  private String gradedby;

  public static final String SERIALIZED_NAME_INSTANCEID = "instanceid";
  @SerializedName(SERIALIZED_NAME_INSTANCEID)
  private Integer instanceid;

  public static final String SERIALIZED_NAME_MAXGRADE = "maxgrade";
  @SerializedName(SERIALIZED_NAME_MAXGRADE)
  private String maxgrade;

  public static final String SERIALIZED_NAME_RUBRICMODE = "rubricmode";
  @SerializedName(SERIALIZED_NAME_RUBRICMODE)
  private String rubricmode = "null";

  public static final String SERIALIZED_NAME_TIMECREATED = "timecreated";
  @SerializedName(SERIALIZED_NAME_TIMECREATED)
  private Integer timecreated;

  public static final String SERIALIZED_NAME_TIMEMODIFIED = "timemodified";
  @SerializedName(SERIALIZED_NAME_TIMEMODIFIED)
  private Integer timemodified;

  public static final String SERIALIZED_NAME_USERGRADE = "usergrade";
  @SerializedName(SERIALIZED_NAME_USERGRADE)
  private String usergrade;

  public GradingformRubricGraderGradingpanelFetch200ResponseGrade() {
  }

  public GradingformRubricGraderGradingpanelFetch200ResponseGrade canedit(Boolean canedit) {
    this.canedit = canedit;
    return this;
  }

   /**
   * Can the user edit this
   * @return canedit
  **/
  @javax.annotation.Nonnull
  public Boolean getCanedit() {
    return canedit;
  }

  public void setCanedit(Boolean canedit) {
    this.canedit = canedit;
  }


  public GradingformRubricGraderGradingpanelFetch200ResponseGrade criteria(List<GradingformRubricGraderGradingpanelFetch200ResponseGradeCriteriaInner> criteria) {
    this.criteria = criteria;
    return this;
  }

  public GradingformRubricGraderGradingpanelFetch200ResponseGrade addCriteriaItem(GradingformRubricGraderGradingpanelFetch200ResponseGradeCriteriaInner criteriaItem) {
    if (this.criteria == null) {
      this.criteria = new ArrayList<>();
    }
    this.criteria.add(criteriaItem);
    return this;
  }

   /**
   * Get criteria
   * @return criteria
  **/
  @javax.annotation.Nonnull
  public List<GradingformRubricGraderGradingpanelFetch200ResponseGradeCriteriaInner> getCriteria() {
    return criteria;
  }

  public void setCriteria(List<GradingformRubricGraderGradingpanelFetch200ResponseGradeCriteriaInner> criteria) {
    this.criteria = criteria;
  }


  public GradingformRubricGraderGradingpanelFetch200ResponseGrade gradedby(String gradedby) {
    this.gradedby = gradedby;
    return this;
  }

   /**
   * The assumed grader of this grading instance
   * @return gradedby
  **/
  @javax.annotation.Nonnull
  public String getGradedby() {
    return gradedby;
  }

  public void setGradedby(String gradedby) {
    this.gradedby = gradedby;
  }


  public GradingformRubricGraderGradingpanelFetch200ResponseGrade instanceid(Integer instanceid) {
    this.instanceid = instanceid;
    return this;
  }

   /**
   * The id of the current grading instance
   * @return instanceid
  **/
  @javax.annotation.Nonnull
  public Integer getInstanceid() {
    return instanceid;
  }

  public void setInstanceid(Integer instanceid) {
    this.instanceid = instanceid;
  }


  public GradingformRubricGraderGradingpanelFetch200ResponseGrade maxgrade(String maxgrade) {
    this.maxgrade = maxgrade;
    return this;
  }

   /**
   * Max possible grade
   * @return maxgrade
  **/
  @javax.annotation.Nonnull
  public String getMaxgrade() {
    return maxgrade;
  }

  public void setMaxgrade(String maxgrade) {
    this.maxgrade = maxgrade;
  }


  public GradingformRubricGraderGradingpanelFetch200ResponseGrade rubricmode(String rubricmode) {
    this.rubricmode = rubricmode;
    return this;
  }

   /**
   * The mode i.e. evaluate editable
   * @return rubricmode
  **/
  @javax.annotation.Nonnull
  public String getRubricmode() {
    return rubricmode;
  }

  public void setRubricmode(String rubricmode) {
    this.rubricmode = rubricmode;
  }


  public GradingformRubricGraderGradingpanelFetch200ResponseGrade timecreated(Integer timecreated) {
    this.timecreated = timecreated;
    return this;
  }

   /**
   * The time that the grade was created
   * @return timecreated
  **/
  @javax.annotation.Nonnull
  public Integer getTimecreated() {
    return timecreated;
  }

  public void setTimecreated(Integer timecreated) {
    this.timecreated = timecreated;
  }


  public GradingformRubricGraderGradingpanelFetch200ResponseGrade timemodified(Integer timemodified) {
    this.timemodified = timemodified;
    return this;
  }

   /**
   * The time that the grade was last updated
   * @return timemodified
  **/
  @javax.annotation.Nonnull
  public Integer getTimemodified() {
    return timemodified;
  }

  public void setTimemodified(Integer timemodified) {
    this.timemodified = timemodified;
  }


  public GradingformRubricGraderGradingpanelFetch200ResponseGrade usergrade(String usergrade) {
    this.usergrade = usergrade;
    return this;
  }

   /**
   * Current user grade
   * @return usergrade
  **/
  @javax.annotation.Nonnull
  public String getUsergrade() {
    return usergrade;
  }

  public void setUsergrade(String usergrade) {
    this.usergrade = usergrade;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GradingformRubricGraderGradingpanelFetch200ResponseGrade gradingformRubricGraderGradingpanelFetch200ResponseGrade = (GradingformRubricGraderGradingpanelFetch200ResponseGrade) o;
    return Objects.equals(this.canedit, gradingformRubricGraderGradingpanelFetch200ResponseGrade.canedit) &&
        Objects.equals(this.criteria, gradingformRubricGraderGradingpanelFetch200ResponseGrade.criteria) &&
        Objects.equals(this.gradedby, gradingformRubricGraderGradingpanelFetch200ResponseGrade.gradedby) &&
        Objects.equals(this.instanceid, gradingformRubricGraderGradingpanelFetch200ResponseGrade.instanceid) &&
        Objects.equals(this.maxgrade, gradingformRubricGraderGradingpanelFetch200ResponseGrade.maxgrade) &&
        Objects.equals(this.rubricmode, gradingformRubricGraderGradingpanelFetch200ResponseGrade.rubricmode) &&
        Objects.equals(this.timecreated, gradingformRubricGraderGradingpanelFetch200ResponseGrade.timecreated) &&
        Objects.equals(this.timemodified, gradingformRubricGraderGradingpanelFetch200ResponseGrade.timemodified) &&
        Objects.equals(this.usergrade, gradingformRubricGraderGradingpanelFetch200ResponseGrade.usergrade);
  }

  @Override
  public int hashCode() {
    return Objects.hash(canedit, criteria, gradedby, instanceid, maxgrade, rubricmode, timecreated, timemodified, usergrade);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GradingformRubricGraderGradingpanelFetch200ResponseGrade {\n");
    sb.append("    canedit: ").append(toIndentedString(canedit)).append("\n");
    sb.append("    criteria: ").append(toIndentedString(criteria)).append("\n");
    sb.append("    gradedby: ").append(toIndentedString(gradedby)).append("\n");
    sb.append("    instanceid: ").append(toIndentedString(instanceid)).append("\n");
    sb.append("    maxgrade: ").append(toIndentedString(maxgrade)).append("\n");
    sb.append("    rubricmode: ").append(toIndentedString(rubricmode)).append("\n");
    sb.append("    timecreated: ").append(toIndentedString(timecreated)).append("\n");
    sb.append("    timemodified: ").append(toIndentedString(timemodified)).append("\n");
    sb.append("    usergrade: ").append(toIndentedString(usergrade)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("canedit");
    openapiFields.add("criteria");
    openapiFields.add("gradedby");
    openapiFields.add("instanceid");
    openapiFields.add("maxgrade");
    openapiFields.add("rubricmode");
    openapiFields.add("timecreated");
    openapiFields.add("timemodified");
    openapiFields.add("usergrade");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("canedit");
    openapiRequiredFields.add("criteria");
    openapiRequiredFields.add("gradedby");
    openapiRequiredFields.add("instanceid");
    openapiRequiredFields.add("maxgrade");
    openapiRequiredFields.add("rubricmode");
    openapiRequiredFields.add("timecreated");
    openapiRequiredFields.add("timemodified");
    openapiRequiredFields.add("usergrade");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to GradingformRubricGraderGradingpanelFetch200ResponseGrade
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GradingformRubricGraderGradingpanelFetch200ResponseGrade.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GradingformRubricGraderGradingpanelFetch200ResponseGrade is not found in the empty JSON string", GradingformRubricGraderGradingpanelFetch200ResponseGrade.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GradingformRubricGraderGradingpanelFetch200ResponseGrade.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GradingformRubricGraderGradingpanelFetch200ResponseGrade` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GradingformRubricGraderGradingpanelFetch200ResponseGrade.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("criteria").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `criteria` to be an array in the JSON string but got `%s`", jsonObj.get("criteria").toString()));
      }

      JsonArray jsonArraycriteria = jsonObj.getAsJsonArray("criteria");
      // validate the required field `criteria` (array)
      for (int i = 0; i < jsonArraycriteria.size(); i++) {
        GradingformRubricGraderGradingpanelFetch200ResponseGradeCriteriaInner.validateJsonElement(jsonArraycriteria.get(i));
      };
      if (!jsonObj.get("gradedby").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gradedby` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gradedby").toString()));
      }
      if (!jsonObj.get("maxgrade").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maxgrade` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maxgrade").toString()));
      }
      if (!jsonObj.get("rubricmode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rubricmode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rubricmode").toString()));
      }
      if (!jsonObj.get("usergrade").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `usergrade` to be a primitive type in the JSON string but got `%s`", jsonObj.get("usergrade").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GradingformRubricGraderGradingpanelFetch200ResponseGrade.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GradingformRubricGraderGradingpanelFetch200ResponseGrade' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GradingformRubricGraderGradingpanelFetch200ResponseGrade> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GradingformRubricGraderGradingpanelFetch200ResponseGrade.class));

       return (TypeAdapter<T>) new TypeAdapter<GradingformRubricGraderGradingpanelFetch200ResponseGrade>() {
           @Override
           public void write(JsonWriter out, GradingformRubricGraderGradingpanelFetch200ResponseGrade value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GradingformRubricGraderGradingpanelFetch200ResponseGrade read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GradingformRubricGraderGradingpanelFetch200ResponseGrade given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GradingformRubricGraderGradingpanelFetch200ResponseGrade
  * @throws IOException if the JSON string is invalid with respect to GradingformRubricGraderGradingpanelFetch200ResponseGrade
  */
  public static GradingformRubricGraderGradingpanelFetch200ResponseGrade fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GradingformRubricGraderGradingpanelFetch200ResponseGrade.class);
  }

 /**
  * Convert an instance of GradingformRubricGraderGradingpanelFetch200ResponseGrade to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

