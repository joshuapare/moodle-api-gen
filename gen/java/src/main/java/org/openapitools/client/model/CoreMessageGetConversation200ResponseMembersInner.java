/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CoreMessageGetConversation200ResponseMembersInnerContactrequestsInner;
import org.openapitools.client.model.CoreMessageGetConversation200ResponseMembersInnerConversationsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.joshuapare.JSON;

/**
 * CoreMessageGetConversation200ResponseMembersInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-18T20:58:28.689161-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class CoreMessageGetConversation200ResponseMembersInner {
  public static final String SERIALIZED_NAME_CANMESSAGE = "canmessage";
  @SerializedName(SERIALIZED_NAME_CANMESSAGE)
  private Boolean canmessage = null;

  public static final String SERIALIZED_NAME_CANMESSAGEEVENIFBLOCKED = "canmessageevenifblocked";
  @SerializedName(SERIALIZED_NAME_CANMESSAGEEVENIFBLOCKED)
  private Boolean canmessageevenifblocked = null;

  public static final String SERIALIZED_NAME_CONTACTREQUESTS = "contactrequests";
  @SerializedName(SERIALIZED_NAME_CONTACTREQUESTS)
  private List<CoreMessageGetConversation200ResponseMembersInnerContactrequestsInner> contactrequests = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONVERSATIONS = "conversations";
  @SerializedName(SERIALIZED_NAME_CONVERSATIONS)
  private List<CoreMessageGetConversation200ResponseMembersInnerConversationsInner> conversations = new ArrayList<>();

  public static final String SERIALIZED_NAME_FULLNAME = "fullname";
  @SerializedName(SERIALIZED_NAME_FULLNAME)
  private String fullname;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_ISBLOCKED = "isblocked";
  @SerializedName(SERIALIZED_NAME_ISBLOCKED)
  private Boolean isblocked;

  public static final String SERIALIZED_NAME_ISCONTACT = "iscontact";
  @SerializedName(SERIALIZED_NAME_ISCONTACT)
  private Boolean iscontact = null;

  public static final String SERIALIZED_NAME_ISDELETED = "isdeleted";
  @SerializedName(SERIALIZED_NAME_ISDELETED)
  private Boolean isdeleted = null;

  public static final String SERIALIZED_NAME_ISONLINE = "isonline";
  @SerializedName(SERIALIZED_NAME_ISONLINE)
  private Boolean isonline;

  public static final String SERIALIZED_NAME_PROFILEIMAGEURL = "profileimageurl";
  @SerializedName(SERIALIZED_NAME_PROFILEIMAGEURL)
  private String profileimageurl;

  public static final String SERIALIZED_NAME_PROFILEIMAGEURLSMALL = "profileimageurlsmall";
  @SerializedName(SERIALIZED_NAME_PROFILEIMAGEURLSMALL)
  private String profileimageurlsmall;

  public static final String SERIALIZED_NAME_PROFILEURL = "profileurl";
  @SerializedName(SERIALIZED_NAME_PROFILEURL)
  private String profileurl = "null";

  public static final String SERIALIZED_NAME_REQUIRESCONTACT = "requirescontact";
  @SerializedName(SERIALIZED_NAME_REQUIRESCONTACT)
  private Boolean requirescontact = null;

  public static final String SERIALIZED_NAME_SHOWONLINESTATUS = "showonlinestatus";
  @SerializedName(SERIALIZED_NAME_SHOWONLINESTATUS)
  private Boolean showonlinestatus;

  public CoreMessageGetConversation200ResponseMembersInner() {
  }

  public CoreMessageGetConversation200ResponseMembersInner canmessage(Boolean canmessage) {
    this.canmessage = canmessage;
    return this;
  }

   /**
   * If the user can be messaged
   * @return canmessage
  **/
  @javax.annotation.Nullable
  public Boolean getCanmessage() {
    return canmessage;
  }

  public void setCanmessage(Boolean canmessage) {
    this.canmessage = canmessage;
  }


  public CoreMessageGetConversation200ResponseMembersInner canmessageevenifblocked(Boolean canmessageevenifblocked) {
    this.canmessageevenifblocked = canmessageevenifblocked;
    return this;
  }

   /**
   * If the user can still message even if they get blocked
   * @return canmessageevenifblocked
  **/
  @javax.annotation.Nullable
  public Boolean getCanmessageevenifblocked() {
    return canmessageevenifblocked;
  }

  public void setCanmessageevenifblocked(Boolean canmessageevenifblocked) {
    this.canmessageevenifblocked = canmessageevenifblocked;
  }


  public CoreMessageGetConversation200ResponseMembersInner contactrequests(List<CoreMessageGetConversation200ResponseMembersInnerContactrequestsInner> contactrequests) {
    this.contactrequests = contactrequests;
    return this;
  }

  public CoreMessageGetConversation200ResponseMembersInner addContactrequestsItem(CoreMessageGetConversation200ResponseMembersInnerContactrequestsInner contactrequestsItem) {
    if (this.contactrequests == null) {
      this.contactrequests = new ArrayList<>();
    }
    this.contactrequests.add(contactrequestsItem);
    return this;
  }

   /**
   * Get contactrequests
   * @return contactrequests
  **/
  @javax.annotation.Nullable
  public List<CoreMessageGetConversation200ResponseMembersInnerContactrequestsInner> getContactrequests() {
    return contactrequests;
  }

  public void setContactrequests(List<CoreMessageGetConversation200ResponseMembersInnerContactrequestsInner> contactrequests) {
    this.contactrequests = contactrequests;
  }


  public CoreMessageGetConversation200ResponseMembersInner conversations(List<CoreMessageGetConversation200ResponseMembersInnerConversationsInner> conversations) {
    this.conversations = conversations;
    return this;
  }

  public CoreMessageGetConversation200ResponseMembersInner addConversationsItem(CoreMessageGetConversation200ResponseMembersInnerConversationsInner conversationsItem) {
    if (this.conversations == null) {
      this.conversations = new ArrayList<>();
    }
    this.conversations.add(conversationsItem);
    return this;
  }

   /**
   * Get conversations
   * @return conversations
  **/
  @javax.annotation.Nullable
  public List<CoreMessageGetConversation200ResponseMembersInnerConversationsInner> getConversations() {
    return conversations;
  }

  public void setConversations(List<CoreMessageGetConversation200ResponseMembersInnerConversationsInner> conversations) {
    this.conversations = conversations;
  }


  public CoreMessageGetConversation200ResponseMembersInner fullname(String fullname) {
    this.fullname = fullname;
    return this;
  }

   /**
   * The user&#39;s name
   * @return fullname
  **/
  @javax.annotation.Nullable
  public String getFullname() {
    return fullname;
  }

  public void setFullname(String fullname) {
    this.fullname = fullname;
  }


  public CoreMessageGetConversation200ResponseMembersInner id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * The user id
   * @return id
  **/
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public CoreMessageGetConversation200ResponseMembersInner isblocked(Boolean isblocked) {
    this.isblocked = isblocked;
    return this;
  }

   /**
   * If the user has been blocked
   * @return isblocked
  **/
  @javax.annotation.Nullable
  public Boolean getIsblocked() {
    return isblocked;
  }

  public void setIsblocked(Boolean isblocked) {
    this.isblocked = isblocked;
  }


  public CoreMessageGetConversation200ResponseMembersInner iscontact(Boolean iscontact) {
    this.iscontact = iscontact;
    return this;
  }

   /**
   * Is the user a contact?
   * @return iscontact
  **/
  @javax.annotation.Nullable
  public Boolean getIscontact() {
    return iscontact;
  }

  public void setIscontact(Boolean iscontact) {
    this.iscontact = iscontact;
  }


  public CoreMessageGetConversation200ResponseMembersInner isdeleted(Boolean isdeleted) {
    this.isdeleted = isdeleted;
    return this;
  }

   /**
   * Is the user deleted?
   * @return isdeleted
  **/
  @javax.annotation.Nullable
  public Boolean getIsdeleted() {
    return isdeleted;
  }

  public void setIsdeleted(Boolean isdeleted) {
    this.isdeleted = isdeleted;
  }


  public CoreMessageGetConversation200ResponseMembersInner isonline(Boolean isonline) {
    this.isonline = isonline;
    return this;
  }

   /**
   * The user&#39;s online status
   * @return isonline
  **/
  @javax.annotation.Nullable
  public Boolean getIsonline() {
    return isonline;
  }

  public void setIsonline(Boolean isonline) {
    this.isonline = isonline;
  }


  public CoreMessageGetConversation200ResponseMembersInner profileimageurl(String profileimageurl) {
    this.profileimageurl = profileimageurl;
    return this;
  }

   /**
   * User picture URL
   * @return profileimageurl
  **/
  @javax.annotation.Nullable
  public String getProfileimageurl() {
    return profileimageurl;
  }

  public void setProfileimageurl(String profileimageurl) {
    this.profileimageurl = profileimageurl;
  }


  public CoreMessageGetConversation200ResponseMembersInner profileimageurlsmall(String profileimageurlsmall) {
    this.profileimageurlsmall = profileimageurlsmall;
    return this;
  }

   /**
   * Small user picture URL
   * @return profileimageurlsmall
  **/
  @javax.annotation.Nullable
  public String getProfileimageurlsmall() {
    return profileimageurlsmall;
  }

  public void setProfileimageurlsmall(String profileimageurlsmall) {
    this.profileimageurlsmall = profileimageurlsmall;
  }


  public CoreMessageGetConversation200ResponseMembersInner profileurl(String profileurl) {
    this.profileurl = profileurl;
    return this;
  }

   /**
   * The link to the user&#39;s profile page
   * @return profileurl
  **/
  @javax.annotation.Nullable
  public String getProfileurl() {
    return profileurl;
  }

  public void setProfileurl(String profileurl) {
    this.profileurl = profileurl;
  }


  public CoreMessageGetConversation200ResponseMembersInner requirescontact(Boolean requirescontact) {
    this.requirescontact = requirescontact;
    return this;
  }

   /**
   * If the user requires to be contacts
   * @return requirescontact
  **/
  @javax.annotation.Nullable
  public Boolean getRequirescontact() {
    return requirescontact;
  }

  public void setRequirescontact(Boolean requirescontact) {
    this.requirescontact = requirescontact;
  }


  public CoreMessageGetConversation200ResponseMembersInner showonlinestatus(Boolean showonlinestatus) {
    this.showonlinestatus = showonlinestatus;
    return this;
  }

   /**
   * Show the user&#39;s online status?
   * @return showonlinestatus
  **/
  @javax.annotation.Nullable
  public Boolean getShowonlinestatus() {
    return showonlinestatus;
  }

  public void setShowonlinestatus(Boolean showonlinestatus) {
    this.showonlinestatus = showonlinestatus;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CoreMessageGetConversation200ResponseMembersInner coreMessageGetConversation200ResponseMembersInner = (CoreMessageGetConversation200ResponseMembersInner) o;
    return Objects.equals(this.canmessage, coreMessageGetConversation200ResponseMembersInner.canmessage) &&
        Objects.equals(this.canmessageevenifblocked, coreMessageGetConversation200ResponseMembersInner.canmessageevenifblocked) &&
        Objects.equals(this.contactrequests, coreMessageGetConversation200ResponseMembersInner.contactrequests) &&
        Objects.equals(this.conversations, coreMessageGetConversation200ResponseMembersInner.conversations) &&
        Objects.equals(this.fullname, coreMessageGetConversation200ResponseMembersInner.fullname) &&
        Objects.equals(this.id, coreMessageGetConversation200ResponseMembersInner.id) &&
        Objects.equals(this.isblocked, coreMessageGetConversation200ResponseMembersInner.isblocked) &&
        Objects.equals(this.iscontact, coreMessageGetConversation200ResponseMembersInner.iscontact) &&
        Objects.equals(this.isdeleted, coreMessageGetConversation200ResponseMembersInner.isdeleted) &&
        Objects.equals(this.isonline, coreMessageGetConversation200ResponseMembersInner.isonline) &&
        Objects.equals(this.profileimageurl, coreMessageGetConversation200ResponseMembersInner.profileimageurl) &&
        Objects.equals(this.profileimageurlsmall, coreMessageGetConversation200ResponseMembersInner.profileimageurlsmall) &&
        Objects.equals(this.profileurl, coreMessageGetConversation200ResponseMembersInner.profileurl) &&
        Objects.equals(this.requirescontact, coreMessageGetConversation200ResponseMembersInner.requirescontact) &&
        Objects.equals(this.showonlinestatus, coreMessageGetConversation200ResponseMembersInner.showonlinestatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(canmessage, canmessageevenifblocked, contactrequests, conversations, fullname, id, isblocked, iscontact, isdeleted, isonline, profileimageurl, profileimageurlsmall, profileurl, requirescontact, showonlinestatus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CoreMessageGetConversation200ResponseMembersInner {\n");
    sb.append("    canmessage: ").append(toIndentedString(canmessage)).append("\n");
    sb.append("    canmessageevenifblocked: ").append(toIndentedString(canmessageevenifblocked)).append("\n");
    sb.append("    contactrequests: ").append(toIndentedString(contactrequests)).append("\n");
    sb.append("    conversations: ").append(toIndentedString(conversations)).append("\n");
    sb.append("    fullname: ").append(toIndentedString(fullname)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isblocked: ").append(toIndentedString(isblocked)).append("\n");
    sb.append("    iscontact: ").append(toIndentedString(iscontact)).append("\n");
    sb.append("    isdeleted: ").append(toIndentedString(isdeleted)).append("\n");
    sb.append("    isonline: ").append(toIndentedString(isonline)).append("\n");
    sb.append("    profileimageurl: ").append(toIndentedString(profileimageurl)).append("\n");
    sb.append("    profileimageurlsmall: ").append(toIndentedString(profileimageurlsmall)).append("\n");
    sb.append("    profileurl: ").append(toIndentedString(profileurl)).append("\n");
    sb.append("    requirescontact: ").append(toIndentedString(requirescontact)).append("\n");
    sb.append("    showonlinestatus: ").append(toIndentedString(showonlinestatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("canmessage");
    openapiFields.add("canmessageevenifblocked");
    openapiFields.add("contactrequests");
    openapiFields.add("conversations");
    openapiFields.add("fullname");
    openapiFields.add("id");
    openapiFields.add("isblocked");
    openapiFields.add("iscontact");
    openapiFields.add("isdeleted");
    openapiFields.add("isonline");
    openapiFields.add("profileimageurl");
    openapiFields.add("profileimageurlsmall");
    openapiFields.add("profileurl");
    openapiFields.add("requirescontact");
    openapiFields.add("showonlinestatus");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CoreMessageGetConversation200ResponseMembersInner
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CoreMessageGetConversation200ResponseMembersInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CoreMessageGetConversation200ResponseMembersInner is not found in the empty JSON string", CoreMessageGetConversation200ResponseMembersInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CoreMessageGetConversation200ResponseMembersInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CoreMessageGetConversation200ResponseMembersInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("contactrequests") != null && !jsonObj.get("contactrequests").isJsonNull()) {
        JsonArray jsonArraycontactrequests = jsonObj.getAsJsonArray("contactrequests");
        if (jsonArraycontactrequests != null) {
          // ensure the json data is an array
          if (!jsonObj.get("contactrequests").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `contactrequests` to be an array in the JSON string but got `%s`", jsonObj.get("contactrequests").toString()));
          }

          // validate the optional field `contactrequests` (array)
          for (int i = 0; i < jsonArraycontactrequests.size(); i++) {
            CoreMessageGetConversation200ResponseMembersInnerContactrequestsInner.validateJsonElement(jsonArraycontactrequests.get(i));
          };
        }
      }
      if (jsonObj.get("conversations") != null && !jsonObj.get("conversations").isJsonNull()) {
        JsonArray jsonArrayconversations = jsonObj.getAsJsonArray("conversations");
        if (jsonArrayconversations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("conversations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `conversations` to be an array in the JSON string but got `%s`", jsonObj.get("conversations").toString()));
          }

          // validate the optional field `conversations` (array)
          for (int i = 0; i < jsonArrayconversations.size(); i++) {
            CoreMessageGetConversation200ResponseMembersInnerConversationsInner.validateJsonElement(jsonArrayconversations.get(i));
          };
        }
      }
      if ((jsonObj.get("fullname") != null && !jsonObj.get("fullname").isJsonNull()) && !jsonObj.get("fullname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fullname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fullname").toString()));
      }
      if ((jsonObj.get("profileimageurl") != null && !jsonObj.get("profileimageurl").isJsonNull()) && !jsonObj.get("profileimageurl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `profileimageurl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("profileimageurl").toString()));
      }
      if ((jsonObj.get("profileimageurlsmall") != null && !jsonObj.get("profileimageurlsmall").isJsonNull()) && !jsonObj.get("profileimageurlsmall").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `profileimageurlsmall` to be a primitive type in the JSON string but got `%s`", jsonObj.get("profileimageurlsmall").toString()));
      }
      if ((jsonObj.get("profileurl") != null && !jsonObj.get("profileurl").isJsonNull()) && !jsonObj.get("profileurl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `profileurl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("profileurl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CoreMessageGetConversation200ResponseMembersInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CoreMessageGetConversation200ResponseMembersInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CoreMessageGetConversation200ResponseMembersInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CoreMessageGetConversation200ResponseMembersInner.class));

       return (TypeAdapter<T>) new TypeAdapter<CoreMessageGetConversation200ResponseMembersInner>() {
           @Override
           public void write(JsonWriter out, CoreMessageGetConversation200ResponseMembersInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CoreMessageGetConversation200ResponseMembersInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CoreMessageGetConversation200ResponseMembersInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CoreMessageGetConversation200ResponseMembersInner
  * @throws IOException if the JSON string is invalid with respect to CoreMessageGetConversation200ResponseMembersInner
  */
  public static CoreMessageGetConversation200ResponseMembersInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CoreMessageGetConversation200ResponseMembersInner.class);
  }

 /**
  * Convert an instance of CoreMessageGetConversation200ResponseMembersInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

