/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CoreReportbuilderColumnsDelete200Response;
import org.openapitools.client.model.CoreReportbuilderConditionsDelete200Response;
import org.openapitools.client.model.CoreReportbuilderFiltersDelete200Response;
import org.openapitools.client.model.CoreReportbuilderReportsGet200ResponseAttributesInner;
import org.openapitools.client.model.CoreReportbuilderReportsGet200ResponseCardview;
import org.openapitools.client.model.CoreReportbuilderReportsGet200ResponseSidebarmenucards;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.joshuapare.JSON;

/**
 * CoreReportbuilderReportsGet200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-18T14:00:07.069642-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class CoreReportbuilderReportsGet200Response {
  public static final String SERIALIZED_NAME_AREA = "area";
  @SerializedName(SERIALIZED_NAME_AREA)
  private String area = "";

  public static final String SERIALIZED_NAME_ATTRIBUTES = "attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private List<CoreReportbuilderReportsGet200ResponseAttributesInner> attributes = new ArrayList<>();

  public static final String SERIALIZED_NAME_CARDVIEW = "cardview";
  @SerializedName(SERIALIZED_NAME_CARDVIEW)
  private CoreReportbuilderReportsGet200ResponseCardview cardview;

  public static final String SERIALIZED_NAME_CLASSES = "classes";
  @SerializedName(SERIALIZED_NAME_CLASSES)
  private String classes = "null";

  public static final String SERIALIZED_NAME_COMPONENT = "component";
  @SerializedName(SERIALIZED_NAME_COMPONENT)
  private String component = "";

  public static final String SERIALIZED_NAME_CONDITIONDATA = "conditiondata";
  @SerializedName(SERIALIZED_NAME_CONDITIONDATA)
  private String conditiondata;

  public static final String SERIALIZED_NAME_CONDITIONS = "conditions";
  @SerializedName(SERIALIZED_NAME_CONDITIONS)
  private CoreReportbuilderConditionsDelete200Response conditions;

  public static final String SERIALIZED_NAME_CONTEXTID = "contextid";
  @SerializedName(SERIALIZED_NAME_CONTEXTID)
  private Integer contextid = {};

  public static final String SERIALIZED_NAME_EDITMODE = "editmode";
  @SerializedName(SERIALIZED_NAME_EDITMODE)
  private Boolean editmode = null;

  public static final String SERIALIZED_NAME_FILTERS = "filters";
  @SerializedName(SERIALIZED_NAME_FILTERS)
  private CoreReportbuilderFiltersDelete200Response filters;

  public static final String SERIALIZED_NAME_FILTERSAPPLIED = "filtersapplied";
  @SerializedName(SERIALIZED_NAME_FILTERSAPPLIED)
  private Integer filtersapplied = null;

  public static final String SERIALIZED_NAME_FILTERSFORM = "filtersform";
  @SerializedName(SERIALIZED_NAME_FILTERSFORM)
  private String filtersform = "null";

  public static final String SERIALIZED_NAME_FILTERSPRESENT = "filterspresent";
  @SerializedName(SERIALIZED_NAME_FILTERSPRESENT)
  private Boolean filterspresent = null;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id = 0;

  public static final String SERIALIZED_NAME_ITEMID = "itemid";
  @SerializedName(SERIALIZED_NAME_ITEMID)
  private Integer itemid = 0;

  public static final String SERIALIZED_NAME_JAVASCRIPT = "javascript";
  @SerializedName(SERIALIZED_NAME_JAVASCRIPT)
  private String javascript;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SETTINGSDATA = "settingsdata";
  @SerializedName(SERIALIZED_NAME_SETTINGSDATA)
  private String settingsdata;

  public static final String SERIALIZED_NAME_SIDEBARMENUCARDS = "sidebarmenucards";
  @SerializedName(SERIALIZED_NAME_SIDEBARMENUCARDS)
  private CoreReportbuilderReportsGet200ResponseSidebarmenucards sidebarmenucards;

  public static final String SERIALIZED_NAME_SORTING = "sorting";
  @SerializedName(SERIALIZED_NAME_SORTING)
  private CoreReportbuilderColumnsDelete200Response sorting;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private String source;

  public static final String SERIALIZED_NAME_TABLE = "table";
  @SerializedName(SERIALIZED_NAME_TABLE)
  private String table = "null";

  public static final String SERIALIZED_NAME_TIMECREATED = "timecreated";
  @SerializedName(SERIALIZED_NAME_TIMECREATED)
  private Integer timecreated = 0;

  public static final String SERIALIZED_NAME_TIMEMODIFIED = "timemodified";
  @SerializedName(SERIALIZED_NAME_TIMEMODIFIED)
  private Integer timemodified = 0;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private Integer type;

  public static final String SERIALIZED_NAME_UNIQUEROWS = "uniquerows";
  @SerializedName(SERIALIZED_NAME_UNIQUEROWS)
  private Boolean uniquerows = false;

  public static final String SERIALIZED_NAME_USERCREATED = "usercreated";
  @SerializedName(SERIALIZED_NAME_USERCREATED)
  private Integer usercreated = {};

  public static final String SERIALIZED_NAME_USERMODIFIED = "usermodified";
  @SerializedName(SERIALIZED_NAME_USERMODIFIED)
  private Integer usermodified = 0;

  public CoreReportbuilderReportsGet200Response() {
  }

  public CoreReportbuilderReportsGet200Response area(String area) {
    this.area = area;
    return this;
  }

   /**
   * area
   * @return area
  **/
  @javax.annotation.Nonnull
  public String getArea() {
    return area;
  }

  public void setArea(String area) {
    this.area = area;
  }


  public CoreReportbuilderReportsGet200Response attributes(List<CoreReportbuilderReportsGet200ResponseAttributesInner> attributes) {
    this.attributes = attributes;
    return this;
  }

  public CoreReportbuilderReportsGet200Response addAttributesItem(CoreReportbuilderReportsGet200ResponseAttributesInner attributesItem) {
    if (this.attributes == null) {
      this.attributes = new ArrayList<>();
    }
    this.attributes.add(attributesItem);
    return this;
  }

   /**
   * Get attributes
   * @return attributes
  **/
  @javax.annotation.Nonnull
  public List<CoreReportbuilderReportsGet200ResponseAttributesInner> getAttributes() {
    return attributes;
  }

  public void setAttributes(List<CoreReportbuilderReportsGet200ResponseAttributesInner> attributes) {
    this.attributes = attributes;
  }


  public CoreReportbuilderReportsGet200Response cardview(CoreReportbuilderReportsGet200ResponseCardview cardview) {
    this.cardview = cardview;
    return this;
  }

   /**
   * Get cardview
   * @return cardview
  **/
  @javax.annotation.Nullable
  public CoreReportbuilderReportsGet200ResponseCardview getCardview() {
    return cardview;
  }

  public void setCardview(CoreReportbuilderReportsGet200ResponseCardview cardview) {
    this.cardview = cardview;
  }


  public CoreReportbuilderReportsGet200Response classes(String classes) {
    this.classes = classes;
    return this;
  }

   /**
   * classes
   * @return classes
  **/
  @javax.annotation.Nonnull
  public String getClasses() {
    return classes;
  }

  public void setClasses(String classes) {
    this.classes = classes;
  }


  public CoreReportbuilderReportsGet200Response component(String component) {
    this.component = component;
    return this;
  }

   /**
   * component
   * @return component
  **/
  @javax.annotation.Nonnull
  public String getComponent() {
    return component;
  }

  public void setComponent(String component) {
    this.component = component;
  }


  public CoreReportbuilderReportsGet200Response conditiondata(String conditiondata) {
    this.conditiondata = conditiondata;
    return this;
  }

   /**
   * conditiondata
   * @return conditiondata
  **/
  @javax.annotation.Nonnull
  public String getConditiondata() {
    return conditiondata;
  }

  public void setConditiondata(String conditiondata) {
    this.conditiondata = conditiondata;
  }


  public CoreReportbuilderReportsGet200Response conditions(CoreReportbuilderConditionsDelete200Response conditions) {
    this.conditions = conditions;
    return this;
  }

   /**
   * Get conditions
   * @return conditions
  **/
  @javax.annotation.Nullable
  public CoreReportbuilderConditionsDelete200Response getConditions() {
    return conditions;
  }

  public void setConditions(CoreReportbuilderConditionsDelete200Response conditions) {
    this.conditions = conditions;
  }


  public CoreReportbuilderReportsGet200Response contextid(Integer contextid) {
    this.contextid = contextid;
    return this;
  }

   /**
   * contextid
   * @return contextid
  **/
  @javax.annotation.Nonnull
  public Integer getContextid() {
    return contextid;
  }

  public void setContextid(Integer contextid) {
    this.contextid = contextid;
  }


  public CoreReportbuilderReportsGet200Response editmode(Boolean editmode) {
    this.editmode = editmode;
    return this;
  }

   /**
   * editmode
   * @return editmode
  **/
  @javax.annotation.Nonnull
  public Boolean getEditmode() {
    return editmode;
  }

  public void setEditmode(Boolean editmode) {
    this.editmode = editmode;
  }


  public CoreReportbuilderReportsGet200Response filters(CoreReportbuilderFiltersDelete200Response filters) {
    this.filters = filters;
    return this;
  }

   /**
   * Get filters
   * @return filters
  **/
  @javax.annotation.Nullable
  public CoreReportbuilderFiltersDelete200Response getFilters() {
    return filters;
  }

  public void setFilters(CoreReportbuilderFiltersDelete200Response filters) {
    this.filters = filters;
  }


  public CoreReportbuilderReportsGet200Response filtersapplied(Integer filtersapplied) {
    this.filtersapplied = filtersapplied;
    return this;
  }

   /**
   * filtersapplied
   * @return filtersapplied
  **/
  @javax.annotation.Nonnull
  public Integer getFiltersapplied() {
    return filtersapplied;
  }

  public void setFiltersapplied(Integer filtersapplied) {
    this.filtersapplied = filtersapplied;
  }


  public CoreReportbuilderReportsGet200Response filtersform(String filtersform) {
    this.filtersform = filtersform;
    return this;
  }

   /**
   * filtersform
   * @return filtersform
  **/
  @javax.annotation.Nonnull
  public String getFiltersform() {
    return filtersform;
  }

  public void setFiltersform(String filtersform) {
    this.filtersform = filtersform;
  }


  public CoreReportbuilderReportsGet200Response filterspresent(Boolean filterspresent) {
    this.filterspresent = filterspresent;
    return this;
  }

   /**
   * filterspresent
   * @return filterspresent
  **/
  @javax.annotation.Nonnull
  public Boolean getFilterspresent() {
    return filterspresent;
  }

  public void setFilterspresent(Boolean filterspresent) {
    this.filterspresent = filterspresent;
  }


  public CoreReportbuilderReportsGet200Response id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * id
   * @return id
  **/
  @javax.annotation.Nonnull
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public CoreReportbuilderReportsGet200Response itemid(Integer itemid) {
    this.itemid = itemid;
    return this;
  }

   /**
   * itemid
   * @return itemid
  **/
  @javax.annotation.Nonnull
  public Integer getItemid() {
    return itemid;
  }

  public void setItemid(Integer itemid) {
    this.itemid = itemid;
  }


  public CoreReportbuilderReportsGet200Response javascript(String javascript) {
    this.javascript = javascript;
    return this;
  }

   /**
   * javascript
   * @return javascript
  **/
  @javax.annotation.Nonnull
  public String getJavascript() {
    return javascript;
  }

  public void setJavascript(String javascript) {
    this.javascript = javascript;
  }


  public CoreReportbuilderReportsGet200Response name(String name) {
    this.name = name;
    return this;
  }

   /**
   * name
   * @return name
  **/
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CoreReportbuilderReportsGet200Response settingsdata(String settingsdata) {
    this.settingsdata = settingsdata;
    return this;
  }

   /**
   * settingsdata
   * @return settingsdata
  **/
  @javax.annotation.Nonnull
  public String getSettingsdata() {
    return settingsdata;
  }

  public void setSettingsdata(String settingsdata) {
    this.settingsdata = settingsdata;
  }


  public CoreReportbuilderReportsGet200Response sidebarmenucards(CoreReportbuilderReportsGet200ResponseSidebarmenucards sidebarmenucards) {
    this.sidebarmenucards = sidebarmenucards;
    return this;
  }

   /**
   * Get sidebarmenucards
   * @return sidebarmenucards
  **/
  @javax.annotation.Nullable
  public CoreReportbuilderReportsGet200ResponseSidebarmenucards getSidebarmenucards() {
    return sidebarmenucards;
  }

  public void setSidebarmenucards(CoreReportbuilderReportsGet200ResponseSidebarmenucards sidebarmenucards) {
    this.sidebarmenucards = sidebarmenucards;
  }


  public CoreReportbuilderReportsGet200Response sorting(CoreReportbuilderColumnsDelete200Response sorting) {
    this.sorting = sorting;
    return this;
  }

   /**
   * Get sorting
   * @return sorting
  **/
  @javax.annotation.Nullable
  public CoreReportbuilderColumnsDelete200Response getSorting() {
    return sorting;
  }

  public void setSorting(CoreReportbuilderColumnsDelete200Response sorting) {
    this.sorting = sorting;
  }


  public CoreReportbuilderReportsGet200Response source(String source) {
    this.source = source;
    return this;
  }

   /**
   * source
   * @return source
  **/
  @javax.annotation.Nonnull
  public String getSource() {
    return source;
  }

  public void setSource(String source) {
    this.source = source;
  }


  public CoreReportbuilderReportsGet200Response table(String table) {
    this.table = table;
    return this;
  }

   /**
   * table
   * @return table
  **/
  @javax.annotation.Nonnull
  public String getTable() {
    return table;
  }

  public void setTable(String table) {
    this.table = table;
  }


  public CoreReportbuilderReportsGet200Response timecreated(Integer timecreated) {
    this.timecreated = timecreated;
    return this;
  }

   /**
   * timecreated
   * @return timecreated
  **/
  @javax.annotation.Nonnull
  public Integer getTimecreated() {
    return timecreated;
  }

  public void setTimecreated(Integer timecreated) {
    this.timecreated = timecreated;
  }


  public CoreReportbuilderReportsGet200Response timemodified(Integer timemodified) {
    this.timemodified = timemodified;
    return this;
  }

   /**
   * timemodified
   * @return timemodified
  **/
  @javax.annotation.Nonnull
  public Integer getTimemodified() {
    return timemodified;
  }

  public void setTimemodified(Integer timemodified) {
    this.timemodified = timemodified;
  }


  public CoreReportbuilderReportsGet200Response type(Integer type) {
    this.type = type;
    return this;
  }

   /**
   * type
   * @return type
  **/
  @javax.annotation.Nonnull
  public Integer getType() {
    return type;
  }

  public void setType(Integer type) {
    this.type = type;
  }


  public CoreReportbuilderReportsGet200Response uniquerows(Boolean uniquerows) {
    this.uniquerows = uniquerows;
    return this;
  }

   /**
   * uniquerows
   * @return uniquerows
  **/
  @javax.annotation.Nonnull
  public Boolean getUniquerows() {
    return uniquerows;
  }

  public void setUniquerows(Boolean uniquerows) {
    this.uniquerows = uniquerows;
  }


  public CoreReportbuilderReportsGet200Response usercreated(Integer usercreated) {
    this.usercreated = usercreated;
    return this;
  }

   /**
   * usercreated
   * @return usercreated
  **/
  @javax.annotation.Nonnull
  public Integer getUsercreated() {
    return usercreated;
  }

  public void setUsercreated(Integer usercreated) {
    this.usercreated = usercreated;
  }


  public CoreReportbuilderReportsGet200Response usermodified(Integer usermodified) {
    this.usermodified = usermodified;
    return this;
  }

   /**
   * usermodified
   * @return usermodified
  **/
  @javax.annotation.Nonnull
  public Integer getUsermodified() {
    return usermodified;
  }

  public void setUsermodified(Integer usermodified) {
    this.usermodified = usermodified;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CoreReportbuilderReportsGet200Response coreReportbuilderReportsGet200Response = (CoreReportbuilderReportsGet200Response) o;
    return Objects.equals(this.area, coreReportbuilderReportsGet200Response.area) &&
        Objects.equals(this.attributes, coreReportbuilderReportsGet200Response.attributes) &&
        Objects.equals(this.cardview, coreReportbuilderReportsGet200Response.cardview) &&
        Objects.equals(this.classes, coreReportbuilderReportsGet200Response.classes) &&
        Objects.equals(this.component, coreReportbuilderReportsGet200Response.component) &&
        Objects.equals(this.conditiondata, coreReportbuilderReportsGet200Response.conditiondata) &&
        Objects.equals(this.conditions, coreReportbuilderReportsGet200Response.conditions) &&
        Objects.equals(this.contextid, coreReportbuilderReportsGet200Response.contextid) &&
        Objects.equals(this.editmode, coreReportbuilderReportsGet200Response.editmode) &&
        Objects.equals(this.filters, coreReportbuilderReportsGet200Response.filters) &&
        Objects.equals(this.filtersapplied, coreReportbuilderReportsGet200Response.filtersapplied) &&
        Objects.equals(this.filtersform, coreReportbuilderReportsGet200Response.filtersform) &&
        Objects.equals(this.filterspresent, coreReportbuilderReportsGet200Response.filterspresent) &&
        Objects.equals(this.id, coreReportbuilderReportsGet200Response.id) &&
        Objects.equals(this.itemid, coreReportbuilderReportsGet200Response.itemid) &&
        Objects.equals(this.javascript, coreReportbuilderReportsGet200Response.javascript) &&
        Objects.equals(this.name, coreReportbuilderReportsGet200Response.name) &&
        Objects.equals(this.settingsdata, coreReportbuilderReportsGet200Response.settingsdata) &&
        Objects.equals(this.sidebarmenucards, coreReportbuilderReportsGet200Response.sidebarmenucards) &&
        Objects.equals(this.sorting, coreReportbuilderReportsGet200Response.sorting) &&
        Objects.equals(this.source, coreReportbuilderReportsGet200Response.source) &&
        Objects.equals(this.table, coreReportbuilderReportsGet200Response.table) &&
        Objects.equals(this.timecreated, coreReportbuilderReportsGet200Response.timecreated) &&
        Objects.equals(this.timemodified, coreReportbuilderReportsGet200Response.timemodified) &&
        Objects.equals(this.type, coreReportbuilderReportsGet200Response.type) &&
        Objects.equals(this.uniquerows, coreReportbuilderReportsGet200Response.uniquerows) &&
        Objects.equals(this.usercreated, coreReportbuilderReportsGet200Response.usercreated) &&
        Objects.equals(this.usermodified, coreReportbuilderReportsGet200Response.usermodified);
  }

  @Override
  public int hashCode() {
    return Objects.hash(area, attributes, cardview, classes, component, conditiondata, conditions, contextid, editmode, filters, filtersapplied, filtersform, filterspresent, id, itemid, javascript, name, settingsdata, sidebarmenucards, sorting, source, table, timecreated, timemodified, type, uniquerows, usercreated, usermodified);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CoreReportbuilderReportsGet200Response {\n");
    sb.append("    area: ").append(toIndentedString(area)).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    cardview: ").append(toIndentedString(cardview)).append("\n");
    sb.append("    classes: ").append(toIndentedString(classes)).append("\n");
    sb.append("    component: ").append(toIndentedString(component)).append("\n");
    sb.append("    conditiondata: ").append(toIndentedString(conditiondata)).append("\n");
    sb.append("    conditions: ").append(toIndentedString(conditions)).append("\n");
    sb.append("    contextid: ").append(toIndentedString(contextid)).append("\n");
    sb.append("    editmode: ").append(toIndentedString(editmode)).append("\n");
    sb.append("    filters: ").append(toIndentedString(filters)).append("\n");
    sb.append("    filtersapplied: ").append(toIndentedString(filtersapplied)).append("\n");
    sb.append("    filtersform: ").append(toIndentedString(filtersform)).append("\n");
    sb.append("    filterspresent: ").append(toIndentedString(filterspresent)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    itemid: ").append(toIndentedString(itemid)).append("\n");
    sb.append("    javascript: ").append(toIndentedString(javascript)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    settingsdata: ").append(toIndentedString(settingsdata)).append("\n");
    sb.append("    sidebarmenucards: ").append(toIndentedString(sidebarmenucards)).append("\n");
    sb.append("    sorting: ").append(toIndentedString(sorting)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    table: ").append(toIndentedString(table)).append("\n");
    sb.append("    timecreated: ").append(toIndentedString(timecreated)).append("\n");
    sb.append("    timemodified: ").append(toIndentedString(timemodified)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    uniquerows: ").append(toIndentedString(uniquerows)).append("\n");
    sb.append("    usercreated: ").append(toIndentedString(usercreated)).append("\n");
    sb.append("    usermodified: ").append(toIndentedString(usermodified)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("area");
    openapiFields.add("attributes");
    openapiFields.add("cardview");
    openapiFields.add("classes");
    openapiFields.add("component");
    openapiFields.add("conditiondata");
    openapiFields.add("conditions");
    openapiFields.add("contextid");
    openapiFields.add("editmode");
    openapiFields.add("filters");
    openapiFields.add("filtersapplied");
    openapiFields.add("filtersform");
    openapiFields.add("filterspresent");
    openapiFields.add("id");
    openapiFields.add("itemid");
    openapiFields.add("javascript");
    openapiFields.add("name");
    openapiFields.add("settingsdata");
    openapiFields.add("sidebarmenucards");
    openapiFields.add("sorting");
    openapiFields.add("source");
    openapiFields.add("table");
    openapiFields.add("timecreated");
    openapiFields.add("timemodified");
    openapiFields.add("type");
    openapiFields.add("uniquerows");
    openapiFields.add("usercreated");
    openapiFields.add("usermodified");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("area");
    openapiRequiredFields.add("attributes");
    openapiRequiredFields.add("classes");
    openapiRequiredFields.add("component");
    openapiRequiredFields.add("conditiondata");
    openapiRequiredFields.add("contextid");
    openapiRequiredFields.add("editmode");
    openapiRequiredFields.add("filtersapplied");
    openapiRequiredFields.add("filtersform");
    openapiRequiredFields.add("filterspresent");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("itemid");
    openapiRequiredFields.add("javascript");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("settingsdata");
    openapiRequiredFields.add("source");
    openapiRequiredFields.add("table");
    openapiRequiredFields.add("timecreated");
    openapiRequiredFields.add("timemodified");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("uniquerows");
    openapiRequiredFields.add("usercreated");
    openapiRequiredFields.add("usermodified");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CoreReportbuilderReportsGet200Response
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CoreReportbuilderReportsGet200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CoreReportbuilderReportsGet200Response is not found in the empty JSON string", CoreReportbuilderReportsGet200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CoreReportbuilderReportsGet200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CoreReportbuilderReportsGet200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CoreReportbuilderReportsGet200Response.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("area").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `area` to be a primitive type in the JSON string but got `%s`", jsonObj.get("area").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("attributes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `attributes` to be an array in the JSON string but got `%s`", jsonObj.get("attributes").toString()));
      }

      JsonArray jsonArrayattributes = jsonObj.getAsJsonArray("attributes");
      // validate the required field `attributes` (array)
      for (int i = 0; i < jsonArrayattributes.size(); i++) {
        CoreReportbuilderReportsGet200ResponseAttributesInner.validateJsonElement(jsonArrayattributes.get(i));
      };
      // validate the optional field `cardview`
      if (jsonObj.get("cardview") != null && !jsonObj.get("cardview").isJsonNull()) {
        CoreReportbuilderReportsGet200ResponseCardview.validateJsonElement(jsonObj.get("cardview"));
      }
      if (!jsonObj.get("classes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `classes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("classes").toString()));
      }
      if (!jsonObj.get("component").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `component` to be a primitive type in the JSON string but got `%s`", jsonObj.get("component").toString()));
      }
      if (!jsonObj.get("conditiondata").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conditiondata` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conditiondata").toString()));
      }
      // validate the optional field `conditions`
      if (jsonObj.get("conditions") != null && !jsonObj.get("conditions").isJsonNull()) {
        CoreReportbuilderConditionsDelete200Response.validateJsonElement(jsonObj.get("conditions"));
      }
      // validate the optional field `filters`
      if (jsonObj.get("filters") != null && !jsonObj.get("filters").isJsonNull()) {
        CoreReportbuilderFiltersDelete200Response.validateJsonElement(jsonObj.get("filters"));
      }
      if (!jsonObj.get("filtersform").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filtersform` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filtersform").toString()));
      }
      if (!jsonObj.get("javascript").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `javascript` to be a primitive type in the JSON string but got `%s`", jsonObj.get("javascript").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("settingsdata").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `settingsdata` to be a primitive type in the JSON string but got `%s`", jsonObj.get("settingsdata").toString()));
      }
      // validate the optional field `sidebarmenucards`
      if (jsonObj.get("sidebarmenucards") != null && !jsonObj.get("sidebarmenucards").isJsonNull()) {
        CoreReportbuilderReportsGet200ResponseSidebarmenucards.validateJsonElement(jsonObj.get("sidebarmenucards"));
      }
      // validate the optional field `sorting`
      if (jsonObj.get("sorting") != null && !jsonObj.get("sorting").isJsonNull()) {
        CoreReportbuilderColumnsDelete200Response.validateJsonElement(jsonObj.get("sorting"));
      }
      if (!jsonObj.get("source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source").toString()));
      }
      if (!jsonObj.get("table").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `table` to be a primitive type in the JSON string but got `%s`", jsonObj.get("table").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CoreReportbuilderReportsGet200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CoreReportbuilderReportsGet200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CoreReportbuilderReportsGet200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CoreReportbuilderReportsGet200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<CoreReportbuilderReportsGet200Response>() {
           @Override
           public void write(JsonWriter out, CoreReportbuilderReportsGet200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CoreReportbuilderReportsGet200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CoreReportbuilderReportsGet200Response given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CoreReportbuilderReportsGet200Response
  * @throws IOException if the JSON string is invalid with respect to CoreReportbuilderReportsGet200Response
  */
  public static CoreReportbuilderReportsGet200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CoreReportbuilderReportsGet200Response.class);
  }

 /**
  * Convert an instance of CoreReportbuilderReportsGet200Response to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

