/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CoreCompetencyReadUserEvidence200ResponseCompetenciesInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.joshuapare.JSON;

/**
 * ToolLpDataForTemplateCompetenciesPage200ResponseStatistics
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-18T14:00:07.069642-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class ToolLpDataForTemplateCompetenciesPage200ResponseStatistics {
  public static final String SERIALIZED_NAME_COMPETENCYCOUNT = "competencycount";
  @SerializedName(SERIALIZED_NAME_COMPETENCYCOUNT)
  private Integer competencycount;

  public static final String SERIALIZED_NAME_COMPLETEDPLANCOUNT = "completedplancount";
  @SerializedName(SERIALIZED_NAME_COMPLETEDPLANCOUNT)
  private Integer completedplancount = null;

  public static final String SERIALIZED_NAME_COMPLETEDPLANPERCENTAGE = "completedplanpercentage";
  @SerializedName(SERIALIZED_NAME_COMPLETEDPLANPERCENTAGE)
  private BigDecimal completedplanpercentage = new BigDecimal("null");

  public static final String SERIALIZED_NAME_COMPLETEDPLANPERCENTAGEFORMATTED = "completedplanpercentageformatted";
  @SerializedName(SERIALIZED_NAME_COMPLETEDPLANPERCENTAGEFORMATTED)
  private String completedplanpercentageformatted = "null";

  public static final String SERIALIZED_NAME_LEASTPROFICIENT = "leastproficient";
  @SerializedName(SERIALIZED_NAME_LEASTPROFICIENT)
  private List<CoreCompetencyReadUserEvidence200ResponseCompetenciesInner> leastproficient = new ArrayList<>();

  public static final String SERIALIZED_NAME_LEASTPROFICIENTCOUNT = "leastproficientcount";
  @SerializedName(SERIALIZED_NAME_LEASTPROFICIENTCOUNT)
  private Integer leastproficientcount;

  public static final String SERIALIZED_NAME_LINKEDCOMPETENCYCOUNT = "linkedcompetencycount";
  @SerializedName(SERIALIZED_NAME_LINKEDCOMPETENCYCOUNT)
  private Integer linkedcompetencycount = null;

  public static final String SERIALIZED_NAME_LINKEDCOMPETENCYPERCENTAGE = "linkedcompetencypercentage";
  @SerializedName(SERIALIZED_NAME_LINKEDCOMPETENCYPERCENTAGE)
  private BigDecimal linkedcompetencypercentage = new BigDecimal("null");

  public static final String SERIALIZED_NAME_LINKEDCOMPETENCYPERCENTAGEFORMATTED = "linkedcompetencypercentageformatted";
  @SerializedName(SERIALIZED_NAME_LINKEDCOMPETENCYPERCENTAGEFORMATTED)
  private String linkedcompetencypercentageformatted = "null";

  public static final String SERIALIZED_NAME_PLANCOUNT = "plancount";
  @SerializedName(SERIALIZED_NAME_PLANCOUNT)
  private Integer plancount = null;

  public static final String SERIALIZED_NAME_PROFICIENTUSERCOMPETENCYPLANCOUNT = "proficientusercompetencyplancount";
  @SerializedName(SERIALIZED_NAME_PROFICIENTUSERCOMPETENCYPLANCOUNT)
  private Integer proficientusercompetencyplancount = null;

  public static final String SERIALIZED_NAME_PROFICIENTUSERCOMPETENCYPLANPERCENTAGE = "proficientusercompetencyplanpercentage";
  @SerializedName(SERIALIZED_NAME_PROFICIENTUSERCOMPETENCYPLANPERCENTAGE)
  private BigDecimal proficientusercompetencyplanpercentage = new BigDecimal("null");

  public static final String SERIALIZED_NAME_PROFICIENTUSERCOMPETENCYPLANPERCENTAGEFORMATTED = "proficientusercompetencyplanpercentageformatted";
  @SerializedName(SERIALIZED_NAME_PROFICIENTUSERCOMPETENCYPLANPERCENTAGEFORMATTED)
  private String proficientusercompetencyplanpercentageformatted = "null";

  public static final String SERIALIZED_NAME_UNLINKEDCOMPETENCYCOUNT = "unlinkedcompetencycount";
  @SerializedName(SERIALIZED_NAME_UNLINKEDCOMPETENCYCOUNT)
  private Integer unlinkedcompetencycount = null;

  public static final String SERIALIZED_NAME_USERCOMPETENCYPLANCOUNT = "usercompetencyplancount";
  @SerializedName(SERIALIZED_NAME_USERCOMPETENCYPLANCOUNT)
  private Integer usercompetencyplancount = null;

  public ToolLpDataForTemplateCompetenciesPage200ResponseStatistics() {
  }

  public ToolLpDataForTemplateCompetenciesPage200ResponseStatistics competencycount(Integer competencycount) {
    this.competencycount = competencycount;
    return this;
  }

   /**
   * competencycount
   * @return competencycount
  **/
  @javax.annotation.Nonnull
  public Integer getCompetencycount() {
    return competencycount;
  }

  public void setCompetencycount(Integer competencycount) {
    this.competencycount = competencycount;
  }


  public ToolLpDataForTemplateCompetenciesPage200ResponseStatistics completedplancount(Integer completedplancount) {
    this.completedplancount = completedplancount;
    return this;
  }

   /**
   * completedplancount
   * @return completedplancount
  **/
  @javax.annotation.Nonnull
  public Integer getCompletedplancount() {
    return completedplancount;
  }

  public void setCompletedplancount(Integer completedplancount) {
    this.completedplancount = completedplancount;
  }


  public ToolLpDataForTemplateCompetenciesPage200ResponseStatistics completedplanpercentage(BigDecimal completedplanpercentage) {
    this.completedplanpercentage = completedplanpercentage;
    return this;
  }

   /**
   * completedplanpercentage
   * @return completedplanpercentage
  **/
  @javax.annotation.Nonnull
  public BigDecimal getCompletedplanpercentage() {
    return completedplanpercentage;
  }

  public void setCompletedplanpercentage(BigDecimal completedplanpercentage) {
    this.completedplanpercentage = completedplanpercentage;
  }


  public ToolLpDataForTemplateCompetenciesPage200ResponseStatistics completedplanpercentageformatted(String completedplanpercentageformatted) {
    this.completedplanpercentageformatted = completedplanpercentageformatted;
    return this;
  }

   /**
   * completedplanpercentageformatted
   * @return completedplanpercentageformatted
  **/
  @javax.annotation.Nonnull
  public String getCompletedplanpercentageformatted() {
    return completedplanpercentageformatted;
  }

  public void setCompletedplanpercentageformatted(String completedplanpercentageformatted) {
    this.completedplanpercentageformatted = completedplanpercentageformatted;
  }


  public ToolLpDataForTemplateCompetenciesPage200ResponseStatistics leastproficient(List<CoreCompetencyReadUserEvidence200ResponseCompetenciesInner> leastproficient) {
    this.leastproficient = leastproficient;
    return this;
  }

  public ToolLpDataForTemplateCompetenciesPage200ResponseStatistics addLeastproficientItem(CoreCompetencyReadUserEvidence200ResponseCompetenciesInner leastproficientItem) {
    if (this.leastproficient == null) {
      this.leastproficient = new ArrayList<>();
    }
    this.leastproficient.add(leastproficientItem);
    return this;
  }

   /**
   * Get leastproficient
   * @return leastproficient
  **/
  @javax.annotation.Nonnull
  public List<CoreCompetencyReadUserEvidence200ResponseCompetenciesInner> getLeastproficient() {
    return leastproficient;
  }

  public void setLeastproficient(List<CoreCompetencyReadUserEvidence200ResponseCompetenciesInner> leastproficient) {
    this.leastproficient = leastproficient;
  }


  public ToolLpDataForTemplateCompetenciesPage200ResponseStatistics leastproficientcount(Integer leastproficientcount) {
    this.leastproficientcount = leastproficientcount;
    return this;
  }

   /**
   * leastproficientcount
   * @return leastproficientcount
  **/
  @javax.annotation.Nonnull
  public Integer getLeastproficientcount() {
    return leastproficientcount;
  }

  public void setLeastproficientcount(Integer leastproficientcount) {
    this.leastproficientcount = leastproficientcount;
  }


  public ToolLpDataForTemplateCompetenciesPage200ResponseStatistics linkedcompetencycount(Integer linkedcompetencycount) {
    this.linkedcompetencycount = linkedcompetencycount;
    return this;
  }

   /**
   * linkedcompetencycount
   * @return linkedcompetencycount
  **/
  @javax.annotation.Nonnull
  public Integer getLinkedcompetencycount() {
    return linkedcompetencycount;
  }

  public void setLinkedcompetencycount(Integer linkedcompetencycount) {
    this.linkedcompetencycount = linkedcompetencycount;
  }


  public ToolLpDataForTemplateCompetenciesPage200ResponseStatistics linkedcompetencypercentage(BigDecimal linkedcompetencypercentage) {
    this.linkedcompetencypercentage = linkedcompetencypercentage;
    return this;
  }

   /**
   * linkedcompetencypercentage
   * @return linkedcompetencypercentage
  **/
  @javax.annotation.Nonnull
  public BigDecimal getLinkedcompetencypercentage() {
    return linkedcompetencypercentage;
  }

  public void setLinkedcompetencypercentage(BigDecimal linkedcompetencypercentage) {
    this.linkedcompetencypercentage = linkedcompetencypercentage;
  }


  public ToolLpDataForTemplateCompetenciesPage200ResponseStatistics linkedcompetencypercentageformatted(String linkedcompetencypercentageformatted) {
    this.linkedcompetencypercentageformatted = linkedcompetencypercentageformatted;
    return this;
  }

   /**
   * linkedcompetencypercentageformatted
   * @return linkedcompetencypercentageformatted
  **/
  @javax.annotation.Nonnull
  public String getLinkedcompetencypercentageformatted() {
    return linkedcompetencypercentageformatted;
  }

  public void setLinkedcompetencypercentageformatted(String linkedcompetencypercentageformatted) {
    this.linkedcompetencypercentageformatted = linkedcompetencypercentageformatted;
  }


  public ToolLpDataForTemplateCompetenciesPage200ResponseStatistics plancount(Integer plancount) {
    this.plancount = plancount;
    return this;
  }

   /**
   * plancount
   * @return plancount
  **/
  @javax.annotation.Nonnull
  public Integer getPlancount() {
    return plancount;
  }

  public void setPlancount(Integer plancount) {
    this.plancount = plancount;
  }


  public ToolLpDataForTemplateCompetenciesPage200ResponseStatistics proficientusercompetencyplancount(Integer proficientusercompetencyplancount) {
    this.proficientusercompetencyplancount = proficientusercompetencyplancount;
    return this;
  }

   /**
   * proficientusercompetencyplancount
   * @return proficientusercompetencyplancount
  **/
  @javax.annotation.Nonnull
  public Integer getProficientusercompetencyplancount() {
    return proficientusercompetencyplancount;
  }

  public void setProficientusercompetencyplancount(Integer proficientusercompetencyplancount) {
    this.proficientusercompetencyplancount = proficientusercompetencyplancount;
  }


  public ToolLpDataForTemplateCompetenciesPage200ResponseStatistics proficientusercompetencyplanpercentage(BigDecimal proficientusercompetencyplanpercentage) {
    this.proficientusercompetencyplanpercentage = proficientusercompetencyplanpercentage;
    return this;
  }

   /**
   * proficientusercompetencyplanpercentage
   * @return proficientusercompetencyplanpercentage
  **/
  @javax.annotation.Nonnull
  public BigDecimal getProficientusercompetencyplanpercentage() {
    return proficientusercompetencyplanpercentage;
  }

  public void setProficientusercompetencyplanpercentage(BigDecimal proficientusercompetencyplanpercentage) {
    this.proficientusercompetencyplanpercentage = proficientusercompetencyplanpercentage;
  }


  public ToolLpDataForTemplateCompetenciesPage200ResponseStatistics proficientusercompetencyplanpercentageformatted(String proficientusercompetencyplanpercentageformatted) {
    this.proficientusercompetencyplanpercentageformatted = proficientusercompetencyplanpercentageformatted;
    return this;
  }

   /**
   * proficientusercompetencyplanpercentageformatted
   * @return proficientusercompetencyplanpercentageformatted
  **/
  @javax.annotation.Nonnull
  public String getProficientusercompetencyplanpercentageformatted() {
    return proficientusercompetencyplanpercentageformatted;
  }

  public void setProficientusercompetencyplanpercentageformatted(String proficientusercompetencyplanpercentageformatted) {
    this.proficientusercompetencyplanpercentageformatted = proficientusercompetencyplanpercentageformatted;
  }


  public ToolLpDataForTemplateCompetenciesPage200ResponseStatistics unlinkedcompetencycount(Integer unlinkedcompetencycount) {
    this.unlinkedcompetencycount = unlinkedcompetencycount;
    return this;
  }

   /**
   * unlinkedcompetencycount
   * @return unlinkedcompetencycount
  **/
  @javax.annotation.Nonnull
  public Integer getUnlinkedcompetencycount() {
    return unlinkedcompetencycount;
  }

  public void setUnlinkedcompetencycount(Integer unlinkedcompetencycount) {
    this.unlinkedcompetencycount = unlinkedcompetencycount;
  }


  public ToolLpDataForTemplateCompetenciesPage200ResponseStatistics usercompetencyplancount(Integer usercompetencyplancount) {
    this.usercompetencyplancount = usercompetencyplancount;
    return this;
  }

   /**
   * usercompetencyplancount
   * @return usercompetencyplancount
  **/
  @javax.annotation.Nonnull
  public Integer getUsercompetencyplancount() {
    return usercompetencyplancount;
  }

  public void setUsercompetencyplancount(Integer usercompetencyplancount) {
    this.usercompetencyplancount = usercompetencyplancount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ToolLpDataForTemplateCompetenciesPage200ResponseStatistics toolLpDataForTemplateCompetenciesPage200ResponseStatistics = (ToolLpDataForTemplateCompetenciesPage200ResponseStatistics) o;
    return Objects.equals(this.competencycount, toolLpDataForTemplateCompetenciesPage200ResponseStatistics.competencycount) &&
        Objects.equals(this.completedplancount, toolLpDataForTemplateCompetenciesPage200ResponseStatistics.completedplancount) &&
        Objects.equals(this.completedplanpercentage, toolLpDataForTemplateCompetenciesPage200ResponseStatistics.completedplanpercentage) &&
        Objects.equals(this.completedplanpercentageformatted, toolLpDataForTemplateCompetenciesPage200ResponseStatistics.completedplanpercentageformatted) &&
        Objects.equals(this.leastproficient, toolLpDataForTemplateCompetenciesPage200ResponseStatistics.leastproficient) &&
        Objects.equals(this.leastproficientcount, toolLpDataForTemplateCompetenciesPage200ResponseStatistics.leastproficientcount) &&
        Objects.equals(this.linkedcompetencycount, toolLpDataForTemplateCompetenciesPage200ResponseStatistics.linkedcompetencycount) &&
        Objects.equals(this.linkedcompetencypercentage, toolLpDataForTemplateCompetenciesPage200ResponseStatistics.linkedcompetencypercentage) &&
        Objects.equals(this.linkedcompetencypercentageformatted, toolLpDataForTemplateCompetenciesPage200ResponseStatistics.linkedcompetencypercentageformatted) &&
        Objects.equals(this.plancount, toolLpDataForTemplateCompetenciesPage200ResponseStatistics.plancount) &&
        Objects.equals(this.proficientusercompetencyplancount, toolLpDataForTemplateCompetenciesPage200ResponseStatistics.proficientusercompetencyplancount) &&
        Objects.equals(this.proficientusercompetencyplanpercentage, toolLpDataForTemplateCompetenciesPage200ResponseStatistics.proficientusercompetencyplanpercentage) &&
        Objects.equals(this.proficientusercompetencyplanpercentageformatted, toolLpDataForTemplateCompetenciesPage200ResponseStatistics.proficientusercompetencyplanpercentageformatted) &&
        Objects.equals(this.unlinkedcompetencycount, toolLpDataForTemplateCompetenciesPage200ResponseStatistics.unlinkedcompetencycount) &&
        Objects.equals(this.usercompetencyplancount, toolLpDataForTemplateCompetenciesPage200ResponseStatistics.usercompetencyplancount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(competencycount, completedplancount, completedplanpercentage, completedplanpercentageformatted, leastproficient, leastproficientcount, linkedcompetencycount, linkedcompetencypercentage, linkedcompetencypercentageformatted, plancount, proficientusercompetencyplancount, proficientusercompetencyplanpercentage, proficientusercompetencyplanpercentageformatted, unlinkedcompetencycount, usercompetencyplancount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ToolLpDataForTemplateCompetenciesPage200ResponseStatistics {\n");
    sb.append("    competencycount: ").append(toIndentedString(competencycount)).append("\n");
    sb.append("    completedplancount: ").append(toIndentedString(completedplancount)).append("\n");
    sb.append("    completedplanpercentage: ").append(toIndentedString(completedplanpercentage)).append("\n");
    sb.append("    completedplanpercentageformatted: ").append(toIndentedString(completedplanpercentageformatted)).append("\n");
    sb.append("    leastproficient: ").append(toIndentedString(leastproficient)).append("\n");
    sb.append("    leastproficientcount: ").append(toIndentedString(leastproficientcount)).append("\n");
    sb.append("    linkedcompetencycount: ").append(toIndentedString(linkedcompetencycount)).append("\n");
    sb.append("    linkedcompetencypercentage: ").append(toIndentedString(linkedcompetencypercentage)).append("\n");
    sb.append("    linkedcompetencypercentageformatted: ").append(toIndentedString(linkedcompetencypercentageformatted)).append("\n");
    sb.append("    plancount: ").append(toIndentedString(plancount)).append("\n");
    sb.append("    proficientusercompetencyplancount: ").append(toIndentedString(proficientusercompetencyplancount)).append("\n");
    sb.append("    proficientusercompetencyplanpercentage: ").append(toIndentedString(proficientusercompetencyplanpercentage)).append("\n");
    sb.append("    proficientusercompetencyplanpercentageformatted: ").append(toIndentedString(proficientusercompetencyplanpercentageformatted)).append("\n");
    sb.append("    unlinkedcompetencycount: ").append(toIndentedString(unlinkedcompetencycount)).append("\n");
    sb.append("    usercompetencyplancount: ").append(toIndentedString(usercompetencyplancount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("competencycount");
    openapiFields.add("completedplancount");
    openapiFields.add("completedplanpercentage");
    openapiFields.add("completedplanpercentageformatted");
    openapiFields.add("leastproficient");
    openapiFields.add("leastproficientcount");
    openapiFields.add("linkedcompetencycount");
    openapiFields.add("linkedcompetencypercentage");
    openapiFields.add("linkedcompetencypercentageformatted");
    openapiFields.add("plancount");
    openapiFields.add("proficientusercompetencyplancount");
    openapiFields.add("proficientusercompetencyplanpercentage");
    openapiFields.add("proficientusercompetencyplanpercentageformatted");
    openapiFields.add("unlinkedcompetencycount");
    openapiFields.add("usercompetencyplancount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("competencycount");
    openapiRequiredFields.add("completedplancount");
    openapiRequiredFields.add("completedplanpercentage");
    openapiRequiredFields.add("completedplanpercentageformatted");
    openapiRequiredFields.add("leastproficient");
    openapiRequiredFields.add("leastproficientcount");
    openapiRequiredFields.add("linkedcompetencycount");
    openapiRequiredFields.add("linkedcompetencypercentage");
    openapiRequiredFields.add("linkedcompetencypercentageformatted");
    openapiRequiredFields.add("plancount");
    openapiRequiredFields.add("proficientusercompetencyplancount");
    openapiRequiredFields.add("proficientusercompetencyplanpercentage");
    openapiRequiredFields.add("proficientusercompetencyplanpercentageformatted");
    openapiRequiredFields.add("unlinkedcompetencycount");
    openapiRequiredFields.add("usercompetencyplancount");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ToolLpDataForTemplateCompetenciesPage200ResponseStatistics
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ToolLpDataForTemplateCompetenciesPage200ResponseStatistics.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ToolLpDataForTemplateCompetenciesPage200ResponseStatistics is not found in the empty JSON string", ToolLpDataForTemplateCompetenciesPage200ResponseStatistics.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ToolLpDataForTemplateCompetenciesPage200ResponseStatistics.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ToolLpDataForTemplateCompetenciesPage200ResponseStatistics` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ToolLpDataForTemplateCompetenciesPage200ResponseStatistics.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("completedplanpercentageformatted").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `completedplanpercentageformatted` to be a primitive type in the JSON string but got `%s`", jsonObj.get("completedplanpercentageformatted").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("leastproficient").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `leastproficient` to be an array in the JSON string but got `%s`", jsonObj.get("leastproficient").toString()));
      }

      JsonArray jsonArrayleastproficient = jsonObj.getAsJsonArray("leastproficient");
      // validate the required field `leastproficient` (array)
      for (int i = 0; i < jsonArrayleastproficient.size(); i++) {
        CoreCompetencyReadUserEvidence200ResponseCompetenciesInner.validateJsonElement(jsonArrayleastproficient.get(i));
      };
      if (!jsonObj.get("linkedcompetencypercentageformatted").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `linkedcompetencypercentageformatted` to be a primitive type in the JSON string but got `%s`", jsonObj.get("linkedcompetencypercentageformatted").toString()));
      }
      if (!jsonObj.get("proficientusercompetencyplanpercentageformatted").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `proficientusercompetencyplanpercentageformatted` to be a primitive type in the JSON string but got `%s`", jsonObj.get("proficientusercompetencyplanpercentageformatted").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ToolLpDataForTemplateCompetenciesPage200ResponseStatistics.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ToolLpDataForTemplateCompetenciesPage200ResponseStatistics' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ToolLpDataForTemplateCompetenciesPage200ResponseStatistics> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ToolLpDataForTemplateCompetenciesPage200ResponseStatistics.class));

       return (TypeAdapter<T>) new TypeAdapter<ToolLpDataForTemplateCompetenciesPage200ResponseStatistics>() {
           @Override
           public void write(JsonWriter out, ToolLpDataForTemplateCompetenciesPage200ResponseStatistics value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ToolLpDataForTemplateCompetenciesPage200ResponseStatistics read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ToolLpDataForTemplateCompetenciesPage200ResponseStatistics given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ToolLpDataForTemplateCompetenciesPage200ResponseStatistics
  * @throws IOException if the JSON string is invalid with respect to ToolLpDataForTemplateCompetenciesPage200ResponseStatistics
  */
  public static ToolLpDataForTemplateCompetenciesPage200ResponseStatistics fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ToolLpDataForTemplateCompetenciesPage200ResponseStatistics.class);
  }

 /**
  * Convert an instance of ToolLpDataForTemplateCompetenciesPage200ResponseStatistics to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

