/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CoreUpdateInplaceEditable200ResponseEditicon;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.joshuapare.JSON;

/**
 * CoreUpdateInplaceEditable200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-18T20:58:28.689161-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class CoreUpdateInplaceEditable200Response {
  public static final String SERIALIZED_NAME_COMPONENT = "component";
  @SerializedName(SERIALIZED_NAME_COMPONENT)
  private String component;

  public static final String SERIALIZED_NAME_DISPLAYVALUE = "displayvalue";
  @SerializedName(SERIALIZED_NAME_DISPLAYVALUE)
  private String displayvalue = "null";

  public static final String SERIALIZED_NAME_EDITHINT = "edithint";
  @SerializedName(SERIALIZED_NAME_EDITHINT)
  private String edithint = "null";

  public static final String SERIALIZED_NAME_EDITICON = "editicon";
  @SerializedName(SERIALIZED_NAME_EDITICON)
  private CoreUpdateInplaceEditable200ResponseEditicon editicon;

  public static final String SERIALIZED_NAME_EDITLABEL = "editlabel";
  @SerializedName(SERIALIZED_NAME_EDITLABEL)
  private String editlabel = "null";

  public static final String SERIALIZED_NAME_ITEMID = "itemid";
  @SerializedName(SERIALIZED_NAME_ITEMID)
  private String itemid;

  public static final String SERIALIZED_NAME_ITEMTYPE = "itemtype";
  @SerializedName(SERIALIZED_NAME_ITEMTYPE)
  private String itemtype;

  public static final String SERIALIZED_NAME_LINKEVERYTHING = "linkeverything";
  @SerializedName(SERIALIZED_NAME_LINKEVERYTHING)
  private Integer linkeverything = null;

  public static final String SERIALIZED_NAME_OPTIONS = "options";
  @SerializedName(SERIALIZED_NAME_OPTIONS)
  private String options = "null";

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type = "null";

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private String value = "null";

  public CoreUpdateInplaceEditable200Response() {
  }

  public CoreUpdateInplaceEditable200Response component(String component) {
    this.component = component;
    return this;
  }

   /**
   * component responsible for the update
   * @return component
  **/
  @javax.annotation.Nullable
  public String getComponent() {
    return component;
  }

  public void setComponent(String component) {
    this.component = component;
  }


  public CoreUpdateInplaceEditable200Response displayvalue(String displayvalue) {
    this.displayvalue = displayvalue;
    return this;
  }

   /**
   * display value (may contain link or other html tags)
   * @return displayvalue
  **/
  @javax.annotation.Nonnull
  public String getDisplayvalue() {
    return displayvalue;
  }

  public void setDisplayvalue(String displayvalue) {
    this.displayvalue = displayvalue;
  }


  public CoreUpdateInplaceEditable200Response edithint(String edithint) {
    this.edithint = edithint;
    return this;
  }

   /**
   * hint for editing element
   * @return edithint
  **/
  @javax.annotation.Nullable
  public String getEdithint() {
    return edithint;
  }

  public void setEdithint(String edithint) {
    this.edithint = edithint;
  }


  public CoreUpdateInplaceEditable200Response editicon(CoreUpdateInplaceEditable200ResponseEditicon editicon) {
    this.editicon = editicon;
    return this;
  }

   /**
   * Get editicon
   * @return editicon
  **/
  @javax.annotation.Nullable
  public CoreUpdateInplaceEditable200ResponseEditicon getEditicon() {
    return editicon;
  }

  public void setEditicon(CoreUpdateInplaceEditable200ResponseEditicon editicon) {
    this.editicon = editicon;
  }


  public CoreUpdateInplaceEditable200Response editlabel(String editlabel) {
    this.editlabel = editlabel;
    return this;
  }

   /**
   * label for editing element
   * @return editlabel
  **/
  @javax.annotation.Nullable
  public String getEditlabel() {
    return editlabel;
  }

  public void setEditlabel(String editlabel) {
    this.editlabel = editlabel;
  }


  public CoreUpdateInplaceEditable200Response itemid(String itemid) {
    this.itemid = itemid;
    return this;
  }

   /**
   * identifier of the updated item
   * @return itemid
  **/
  @javax.annotation.Nullable
  public String getItemid() {
    return itemid;
  }

  public void setItemid(String itemid) {
    this.itemid = itemid;
  }


  public CoreUpdateInplaceEditable200Response itemtype(String itemtype) {
    this.itemtype = itemtype;
    return this;
  }

   /**
   * itemtype
   * @return itemtype
  **/
  @javax.annotation.Nullable
  public String getItemtype() {
    return itemtype;
  }

  public void setItemtype(String itemtype) {
    this.itemtype = itemtype;
  }


  public CoreUpdateInplaceEditable200Response linkeverything(Integer linkeverything) {
    this.linkeverything = linkeverything;
    return this;
  }

   /**
   * Should everything be wrapped in the edit link or link displayed separately
   * @return linkeverything
  **/
  @javax.annotation.Nullable
  public Integer getLinkeverything() {
    return linkeverything;
  }

  public void setLinkeverything(Integer linkeverything) {
    this.linkeverything = linkeverything;
  }


  public CoreUpdateInplaceEditable200Response options(String options) {
    this.options = options;
    return this;
  }

   /**
   * options of the element, format depends on type
   * @return options
  **/
  @javax.annotation.Nullable
  public String getOptions() {
    return options;
  }

  public void setOptions(String options) {
    this.options = options;
  }


  public CoreUpdateInplaceEditable200Response type(String type) {
    this.type = type;
    return this;
  }

   /**
   * type of the element (text, toggle, select)
   * @return type
  **/
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public CoreUpdateInplaceEditable200Response value(String value) {
    this.value = value;
    return this;
  }

   /**
   * value of the item as it is stored
   * @return value
  **/
  @javax.annotation.Nullable
  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CoreUpdateInplaceEditable200Response coreUpdateInplaceEditable200Response = (CoreUpdateInplaceEditable200Response) o;
    return Objects.equals(this.component, coreUpdateInplaceEditable200Response.component) &&
        Objects.equals(this.displayvalue, coreUpdateInplaceEditable200Response.displayvalue) &&
        Objects.equals(this.edithint, coreUpdateInplaceEditable200Response.edithint) &&
        Objects.equals(this.editicon, coreUpdateInplaceEditable200Response.editicon) &&
        Objects.equals(this.editlabel, coreUpdateInplaceEditable200Response.editlabel) &&
        Objects.equals(this.itemid, coreUpdateInplaceEditable200Response.itemid) &&
        Objects.equals(this.itemtype, coreUpdateInplaceEditable200Response.itemtype) &&
        Objects.equals(this.linkeverything, coreUpdateInplaceEditable200Response.linkeverything) &&
        Objects.equals(this.options, coreUpdateInplaceEditable200Response.options) &&
        Objects.equals(this.type, coreUpdateInplaceEditable200Response.type) &&
        Objects.equals(this.value, coreUpdateInplaceEditable200Response.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(component, displayvalue, edithint, editicon, editlabel, itemid, itemtype, linkeverything, options, type, value);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CoreUpdateInplaceEditable200Response {\n");
    sb.append("    component: ").append(toIndentedString(component)).append("\n");
    sb.append("    displayvalue: ").append(toIndentedString(displayvalue)).append("\n");
    sb.append("    edithint: ").append(toIndentedString(edithint)).append("\n");
    sb.append("    editicon: ").append(toIndentedString(editicon)).append("\n");
    sb.append("    editlabel: ").append(toIndentedString(editlabel)).append("\n");
    sb.append("    itemid: ").append(toIndentedString(itemid)).append("\n");
    sb.append("    itemtype: ").append(toIndentedString(itemtype)).append("\n");
    sb.append("    linkeverything: ").append(toIndentedString(linkeverything)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("component");
    openapiFields.add("displayvalue");
    openapiFields.add("edithint");
    openapiFields.add("editicon");
    openapiFields.add("editlabel");
    openapiFields.add("itemid");
    openapiFields.add("itemtype");
    openapiFields.add("linkeverything");
    openapiFields.add("options");
    openapiFields.add("type");
    openapiFields.add("value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("displayvalue");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CoreUpdateInplaceEditable200Response
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CoreUpdateInplaceEditable200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CoreUpdateInplaceEditable200Response is not found in the empty JSON string", CoreUpdateInplaceEditable200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CoreUpdateInplaceEditable200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CoreUpdateInplaceEditable200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CoreUpdateInplaceEditable200Response.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("component") != null && !jsonObj.get("component").isJsonNull()) && !jsonObj.get("component").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `component` to be a primitive type in the JSON string but got `%s`", jsonObj.get("component").toString()));
      }
      if (!jsonObj.get("displayvalue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayvalue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayvalue").toString()));
      }
      if ((jsonObj.get("edithint") != null && !jsonObj.get("edithint").isJsonNull()) && !jsonObj.get("edithint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `edithint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("edithint").toString()));
      }
      // validate the optional field `editicon`
      if (jsonObj.get("editicon") != null && !jsonObj.get("editicon").isJsonNull()) {
        CoreUpdateInplaceEditable200ResponseEditicon.validateJsonElement(jsonObj.get("editicon"));
      }
      if ((jsonObj.get("editlabel") != null && !jsonObj.get("editlabel").isJsonNull()) && !jsonObj.get("editlabel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `editlabel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("editlabel").toString()));
      }
      if ((jsonObj.get("itemid") != null && !jsonObj.get("itemid").isJsonNull()) && !jsonObj.get("itemid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("itemid").toString()));
      }
      if ((jsonObj.get("itemtype") != null && !jsonObj.get("itemtype").isJsonNull()) && !jsonObj.get("itemtype").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemtype` to be a primitive type in the JSON string but got `%s`", jsonObj.get("itemtype").toString()));
      }
      if ((jsonObj.get("options") != null && !jsonObj.get("options").isJsonNull()) && !jsonObj.get("options").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `options` to be a primitive type in the JSON string but got `%s`", jsonObj.get("options").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("value") != null && !jsonObj.get("value").isJsonNull()) && !jsonObj.get("value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("value").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CoreUpdateInplaceEditable200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CoreUpdateInplaceEditable200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CoreUpdateInplaceEditable200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CoreUpdateInplaceEditable200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<CoreUpdateInplaceEditable200Response>() {
           @Override
           public void write(JsonWriter out, CoreUpdateInplaceEditable200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CoreUpdateInplaceEditable200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CoreUpdateInplaceEditable200Response given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CoreUpdateInplaceEditable200Response
  * @throws IOException if the JSON string is invalid with respect to CoreUpdateInplaceEditable200Response
  */
  public static CoreUpdateInplaceEditable200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CoreUpdateInplaceEditable200Response.class);
  }

 /**
  * Convert an instance of CoreUpdateInplaceEditable200Response to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

