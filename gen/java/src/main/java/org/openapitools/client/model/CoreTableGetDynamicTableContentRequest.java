/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CoreTableGetDynamicTableContentRequestFiltersInner;
import org.openapitools.client.model.CoreTableGetDynamicTableContentRequestSortdataInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.joshuapare.JSON;

/**
 * CoreTableGetDynamicTableContentRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-18T14:00:07.069642-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class CoreTableGetDynamicTableContentRequest {
  public static final String SERIALIZED_NAME_COMPONENT = "component";
  @SerializedName(SERIALIZED_NAME_COMPONENT)
  private String component;

  public static final String SERIALIZED_NAME_FILTERS = "filters";
  @SerializedName(SERIALIZED_NAME_FILTERS)
  private List<CoreTableGetDynamicTableContentRequestFiltersInner> filters = new ArrayList<>();

  public static final String SERIALIZED_NAME_FIRSTINITIAL = "firstinitial";
  @SerializedName(SERIALIZED_NAME_FIRSTINITIAL)
  private String firstinitial = "null";

  public static final String SERIALIZED_NAME_HANDLER = "handler";
  @SerializedName(SERIALIZED_NAME_HANDLER)
  private String handler = "null";

  public static final String SERIALIZED_NAME_HIDDENCOLUMNS = "hiddencolumns";
  @SerializedName(SERIALIZED_NAME_HIDDENCOLUMNS)
  private List<Object> hiddencolumns = new ArrayList<>();

  public static final String SERIALIZED_NAME_JOINTYPE = "jointype";
  @SerializedName(SERIALIZED_NAME_JOINTYPE)
  private Integer jointype = null;

  public static final String SERIALIZED_NAME_LASTINITIAL = "lastinitial";
  @SerializedName(SERIALIZED_NAME_LASTINITIAL)
  private String lastinitial = "null";

  public static final String SERIALIZED_NAME_PAGENUMBER = "pagenumber";
  @SerializedName(SERIALIZED_NAME_PAGENUMBER)
  private Integer pagenumber = null;

  public static final String SERIALIZED_NAME_PAGESIZE = "pagesize";
  @SerializedName(SERIALIZED_NAME_PAGESIZE)
  private Integer pagesize = null;

  public static final String SERIALIZED_NAME_RESETPREFERENCES = "resetpreferences";
  @SerializedName(SERIALIZED_NAME_RESETPREFERENCES)
  private Boolean resetpreferences = null;

  public static final String SERIALIZED_NAME_SORTDATA = "sortdata";
  @SerializedName(SERIALIZED_NAME_SORTDATA)
  private List<CoreTableGetDynamicTableContentRequestSortdataInner> sortdata = new ArrayList<>();

  public static final String SERIALIZED_NAME_UNIQUEID = "uniqueid";
  @SerializedName(SERIALIZED_NAME_UNIQUEID)
  private String uniqueid = "null";

  public CoreTableGetDynamicTableContentRequest() {
  }

  public CoreTableGetDynamicTableContentRequest component(String component) {
    this.component = component;
    return this;
  }

   /**
   * Component
   * @return component
  **/
  @javax.annotation.Nonnull
  public String getComponent() {
    return component;
  }

  public void setComponent(String component) {
    this.component = component;
  }


  public CoreTableGetDynamicTableContentRequest filters(List<CoreTableGetDynamicTableContentRequestFiltersInner> filters) {
    this.filters = filters;
    return this;
  }

  public CoreTableGetDynamicTableContentRequest addFiltersItem(CoreTableGetDynamicTableContentRequestFiltersInner filtersItem) {
    if (this.filters == null) {
      this.filters = new ArrayList<>();
    }
    this.filters.add(filtersItem);
    return this;
  }

   /**
   * Get filters
   * @return filters
  **/
  @javax.annotation.Nullable
  public List<CoreTableGetDynamicTableContentRequestFiltersInner> getFilters() {
    return filters;
  }

  public void setFilters(List<CoreTableGetDynamicTableContentRequestFiltersInner> filters) {
    this.filters = filters;
  }


  public CoreTableGetDynamicTableContentRequest firstinitial(String firstinitial) {
    this.firstinitial = firstinitial;
    return this;
  }

   /**
   * The first initial to sort filter on
   * @return firstinitial
  **/
  @javax.annotation.Nonnull
  public String getFirstinitial() {
    return firstinitial;
  }

  public void setFirstinitial(String firstinitial) {
    this.firstinitial = firstinitial;
  }


  public CoreTableGetDynamicTableContentRequest handler(String handler) {
    this.handler = handler;
    return this;
  }

   /**
   * Handler
   * @return handler
  **/
  @javax.annotation.Nonnull
  public String getHandler() {
    return handler;
  }

  public void setHandler(String handler) {
    this.handler = handler;
  }


  public CoreTableGetDynamicTableContentRequest hiddencolumns(List<Object> hiddencolumns) {
    this.hiddencolumns = hiddencolumns;
    return this;
  }

  public CoreTableGetDynamicTableContentRequest addHiddencolumnsItem(Object hiddencolumnsItem) {
    if (this.hiddencolumns == null) {
      this.hiddencolumns = new ArrayList<>();
    }
    this.hiddencolumns.add(hiddencolumnsItem);
    return this;
  }

   /**
   * Get hiddencolumns
   * @return hiddencolumns
  **/
  @javax.annotation.Nonnull
  public List<Object> getHiddencolumns() {
    return hiddencolumns;
  }

  public void setHiddencolumns(List<Object> hiddencolumns) {
    this.hiddencolumns = hiddencolumns;
  }


  public CoreTableGetDynamicTableContentRequest jointype(Integer jointype) {
    this.jointype = jointype;
    return this;
  }

   /**
   * Type of join to join all filters together
   * @return jointype
  **/
  @javax.annotation.Nonnull
  public Integer getJointype() {
    return jointype;
  }

  public void setJointype(Integer jointype) {
    this.jointype = jointype;
  }


  public CoreTableGetDynamicTableContentRequest lastinitial(String lastinitial) {
    this.lastinitial = lastinitial;
    return this;
  }

   /**
   * The last initial to sort filter on
   * @return lastinitial
  **/
  @javax.annotation.Nonnull
  public String getLastinitial() {
    return lastinitial;
  }

  public void setLastinitial(String lastinitial) {
    this.lastinitial = lastinitial;
  }


  public CoreTableGetDynamicTableContentRequest pagenumber(Integer pagenumber) {
    this.pagenumber = pagenumber;
    return this;
  }

   /**
   * The page number
   * @return pagenumber
  **/
  @javax.annotation.Nonnull
  public Integer getPagenumber() {
    return pagenumber;
  }

  public void setPagenumber(Integer pagenumber) {
    this.pagenumber = pagenumber;
  }


  public CoreTableGetDynamicTableContentRequest pagesize(Integer pagesize) {
    this.pagesize = pagesize;
    return this;
  }

   /**
   * The number of records per page
   * @return pagesize
  **/
  @javax.annotation.Nonnull
  public Integer getPagesize() {
    return pagesize;
  }

  public void setPagesize(Integer pagesize) {
    this.pagesize = pagesize;
  }


  public CoreTableGetDynamicTableContentRequest resetpreferences(Boolean resetpreferences) {
    this.resetpreferences = resetpreferences;
    return this;
  }

   /**
   * Whether the table preferences should be reset
   * @return resetpreferences
  **/
  @javax.annotation.Nonnull
  public Boolean getResetpreferences() {
    return resetpreferences;
  }

  public void setResetpreferences(Boolean resetpreferences) {
    this.resetpreferences = resetpreferences;
  }


  public CoreTableGetDynamicTableContentRequest sortdata(List<CoreTableGetDynamicTableContentRequestSortdataInner> sortdata) {
    this.sortdata = sortdata;
    return this;
  }

  public CoreTableGetDynamicTableContentRequest addSortdataItem(CoreTableGetDynamicTableContentRequestSortdataInner sortdataItem) {
    if (this.sortdata == null) {
      this.sortdata = new ArrayList<>();
    }
    this.sortdata.add(sortdataItem);
    return this;
  }

   /**
   * Get sortdata
   * @return sortdata
  **/
  @javax.annotation.Nullable
  public List<CoreTableGetDynamicTableContentRequestSortdataInner> getSortdata() {
    return sortdata;
  }

  public void setSortdata(List<CoreTableGetDynamicTableContentRequestSortdataInner> sortdata) {
    this.sortdata = sortdata;
  }


  public CoreTableGetDynamicTableContentRequest uniqueid(String uniqueid) {
    this.uniqueid = uniqueid;
    return this;
  }

   /**
   * Unique ID for the container
   * @return uniqueid
  **/
  @javax.annotation.Nonnull
  public String getUniqueid() {
    return uniqueid;
  }

  public void setUniqueid(String uniqueid) {
    this.uniqueid = uniqueid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CoreTableGetDynamicTableContentRequest coreTableGetDynamicTableContentRequest = (CoreTableGetDynamicTableContentRequest) o;
    return Objects.equals(this.component, coreTableGetDynamicTableContentRequest.component) &&
        Objects.equals(this.filters, coreTableGetDynamicTableContentRequest.filters) &&
        Objects.equals(this.firstinitial, coreTableGetDynamicTableContentRequest.firstinitial) &&
        Objects.equals(this.handler, coreTableGetDynamicTableContentRequest.handler) &&
        Objects.equals(this.hiddencolumns, coreTableGetDynamicTableContentRequest.hiddencolumns) &&
        Objects.equals(this.jointype, coreTableGetDynamicTableContentRequest.jointype) &&
        Objects.equals(this.lastinitial, coreTableGetDynamicTableContentRequest.lastinitial) &&
        Objects.equals(this.pagenumber, coreTableGetDynamicTableContentRequest.pagenumber) &&
        Objects.equals(this.pagesize, coreTableGetDynamicTableContentRequest.pagesize) &&
        Objects.equals(this.resetpreferences, coreTableGetDynamicTableContentRequest.resetpreferences) &&
        Objects.equals(this.sortdata, coreTableGetDynamicTableContentRequest.sortdata) &&
        Objects.equals(this.uniqueid, coreTableGetDynamicTableContentRequest.uniqueid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(component, filters, firstinitial, handler, hiddencolumns, jointype, lastinitial, pagenumber, pagesize, resetpreferences, sortdata, uniqueid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CoreTableGetDynamicTableContentRequest {\n");
    sb.append("    component: ").append(toIndentedString(component)).append("\n");
    sb.append("    filters: ").append(toIndentedString(filters)).append("\n");
    sb.append("    firstinitial: ").append(toIndentedString(firstinitial)).append("\n");
    sb.append("    handler: ").append(toIndentedString(handler)).append("\n");
    sb.append("    hiddencolumns: ").append(toIndentedString(hiddencolumns)).append("\n");
    sb.append("    jointype: ").append(toIndentedString(jointype)).append("\n");
    sb.append("    lastinitial: ").append(toIndentedString(lastinitial)).append("\n");
    sb.append("    pagenumber: ").append(toIndentedString(pagenumber)).append("\n");
    sb.append("    pagesize: ").append(toIndentedString(pagesize)).append("\n");
    sb.append("    resetpreferences: ").append(toIndentedString(resetpreferences)).append("\n");
    sb.append("    sortdata: ").append(toIndentedString(sortdata)).append("\n");
    sb.append("    uniqueid: ").append(toIndentedString(uniqueid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("component");
    openapiFields.add("filters");
    openapiFields.add("firstinitial");
    openapiFields.add("handler");
    openapiFields.add("hiddencolumns");
    openapiFields.add("jointype");
    openapiFields.add("lastinitial");
    openapiFields.add("pagenumber");
    openapiFields.add("pagesize");
    openapiFields.add("resetpreferences");
    openapiFields.add("sortdata");
    openapiFields.add("uniqueid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("component");
    openapiRequiredFields.add("firstinitial");
    openapiRequiredFields.add("handler");
    openapiRequiredFields.add("hiddencolumns");
    openapiRequiredFields.add("jointype");
    openapiRequiredFields.add("lastinitial");
    openapiRequiredFields.add("pagenumber");
    openapiRequiredFields.add("pagesize");
    openapiRequiredFields.add("resetpreferences");
    openapiRequiredFields.add("uniqueid");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CoreTableGetDynamicTableContentRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CoreTableGetDynamicTableContentRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CoreTableGetDynamicTableContentRequest is not found in the empty JSON string", CoreTableGetDynamicTableContentRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CoreTableGetDynamicTableContentRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CoreTableGetDynamicTableContentRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CoreTableGetDynamicTableContentRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("component").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `component` to be a primitive type in the JSON string but got `%s`", jsonObj.get("component").toString()));
      }
      if (jsonObj.get("filters") != null && !jsonObj.get("filters").isJsonNull()) {
        JsonArray jsonArrayfilters = jsonObj.getAsJsonArray("filters");
        if (jsonArrayfilters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("filters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `filters` to be an array in the JSON string but got `%s`", jsonObj.get("filters").toString()));
          }

          // validate the optional field `filters` (array)
          for (int i = 0; i < jsonArrayfilters.size(); i++) {
            CoreTableGetDynamicTableContentRequestFiltersInner.validateJsonElement(jsonArrayfilters.get(i));
          };
        }
      }
      if (!jsonObj.get("firstinitial").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstinitial` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstinitial").toString()));
      }
      if (!jsonObj.get("handler").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `handler` to be a primitive type in the JSON string but got `%s`", jsonObj.get("handler").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("hiddencolumns") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("hiddencolumns").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `hiddencolumns` to be an array in the JSON string but got `%s`", jsonObj.get("hiddencolumns").toString()));
      }
      if (!jsonObj.get("lastinitial").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastinitial` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastinitial").toString()));
      }
      if (jsonObj.get("sortdata") != null && !jsonObj.get("sortdata").isJsonNull()) {
        JsonArray jsonArraysortdata = jsonObj.getAsJsonArray("sortdata");
        if (jsonArraysortdata != null) {
          // ensure the json data is an array
          if (!jsonObj.get("sortdata").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `sortdata` to be an array in the JSON string but got `%s`", jsonObj.get("sortdata").toString()));
          }

          // validate the optional field `sortdata` (array)
          for (int i = 0; i < jsonArraysortdata.size(); i++) {
            CoreTableGetDynamicTableContentRequestSortdataInner.validateJsonElement(jsonArraysortdata.get(i));
          };
        }
      }
      if (!jsonObj.get("uniqueid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uniqueid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uniqueid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CoreTableGetDynamicTableContentRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CoreTableGetDynamicTableContentRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CoreTableGetDynamicTableContentRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CoreTableGetDynamicTableContentRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CoreTableGetDynamicTableContentRequest>() {
           @Override
           public void write(JsonWriter out, CoreTableGetDynamicTableContentRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CoreTableGetDynamicTableContentRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CoreTableGetDynamicTableContentRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CoreTableGetDynamicTableContentRequest
  * @throws IOException if the JSON string is invalid with respect to CoreTableGetDynamicTableContentRequest
  */
  public static CoreTableGetDynamicTableContentRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CoreTableGetDynamicTableContentRequest.class);
  }

 /**
  * Convert an instance of CoreTableGetDynamicTableContentRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

