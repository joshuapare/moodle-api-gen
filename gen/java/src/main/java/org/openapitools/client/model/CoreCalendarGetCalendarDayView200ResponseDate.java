/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.joshuapare.JSON;

/**
 * CoreCalendarGetCalendarDayView200ResponseDate
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-18T20:58:28.689161-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class CoreCalendarGetCalendarDayView200ResponseDate {
  public static final String SERIALIZED_NAME_HOURS = "hours";
  @SerializedName(SERIALIZED_NAME_HOURS)
  private Integer hours = null;

  public static final String SERIALIZED_NAME_MDAY = "mday";
  @SerializedName(SERIALIZED_NAME_MDAY)
  private Integer mday = null;

  public static final String SERIALIZED_NAME_MINUTES = "minutes";
  @SerializedName(SERIALIZED_NAME_MINUTES)
  private Integer minutes = null;

  public static final String SERIALIZED_NAME_MON = "mon";
  @SerializedName(SERIALIZED_NAME_MON)
  private Integer mon = null;

  public static final String SERIALIZED_NAME_MONTH = "month";
  @SerializedName(SERIALIZED_NAME_MONTH)
  private String month = "null";

  public static final String SERIALIZED_NAME_SECONDS = "seconds";
  @SerializedName(SERIALIZED_NAME_SECONDS)
  private Integer seconds = null;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private Integer timestamp = null;

  public static final String SERIALIZED_NAME_WDAY = "wday";
  @SerializedName(SERIALIZED_NAME_WDAY)
  private Integer wday = null;

  public static final String SERIALIZED_NAME_WEEKDAY = "weekday";
  @SerializedName(SERIALIZED_NAME_WEEKDAY)
  private String weekday = "null";

  public static final String SERIALIZED_NAME_YDAY = "yday";
  @SerializedName(SERIALIZED_NAME_YDAY)
  private Integer yday = null;

  public static final String SERIALIZED_NAME_YEAR = "year";
  @SerializedName(SERIALIZED_NAME_YEAR)
  private Integer year = null;

  public CoreCalendarGetCalendarDayView200ResponseDate() {
  }

  public CoreCalendarGetCalendarDayView200ResponseDate hours(Integer hours) {
    this.hours = hours;
    return this;
  }

   /**
   * hours
   * @return hours
  **/
  @javax.annotation.Nonnull
  public Integer getHours() {
    return hours;
  }

  public void setHours(Integer hours) {
    this.hours = hours;
  }


  public CoreCalendarGetCalendarDayView200ResponseDate mday(Integer mday) {
    this.mday = mday;
    return this;
  }

   /**
   * mday
   * @return mday
  **/
  @javax.annotation.Nonnull
  public Integer getMday() {
    return mday;
  }

  public void setMday(Integer mday) {
    this.mday = mday;
  }


  public CoreCalendarGetCalendarDayView200ResponseDate minutes(Integer minutes) {
    this.minutes = minutes;
    return this;
  }

   /**
   * minutes
   * @return minutes
  **/
  @javax.annotation.Nonnull
  public Integer getMinutes() {
    return minutes;
  }

  public void setMinutes(Integer minutes) {
    this.minutes = minutes;
  }


  public CoreCalendarGetCalendarDayView200ResponseDate mon(Integer mon) {
    this.mon = mon;
    return this;
  }

   /**
   * mon
   * @return mon
  **/
  @javax.annotation.Nonnull
  public Integer getMon() {
    return mon;
  }

  public void setMon(Integer mon) {
    this.mon = mon;
  }


  public CoreCalendarGetCalendarDayView200ResponseDate month(String month) {
    this.month = month;
    return this;
  }

   /**
   * month
   * @return month
  **/
  @javax.annotation.Nonnull
  public String getMonth() {
    return month;
  }

  public void setMonth(String month) {
    this.month = month;
  }


  public CoreCalendarGetCalendarDayView200ResponseDate seconds(Integer seconds) {
    this.seconds = seconds;
    return this;
  }

   /**
   * seconds
   * @return seconds
  **/
  @javax.annotation.Nonnull
  public Integer getSeconds() {
    return seconds;
  }

  public void setSeconds(Integer seconds) {
    this.seconds = seconds;
  }


  public CoreCalendarGetCalendarDayView200ResponseDate timestamp(Integer timestamp) {
    this.timestamp = timestamp;
    return this;
  }

   /**
   * timestamp
   * @return timestamp
  **/
  @javax.annotation.Nonnull
  public Integer getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(Integer timestamp) {
    this.timestamp = timestamp;
  }


  public CoreCalendarGetCalendarDayView200ResponseDate wday(Integer wday) {
    this.wday = wday;
    return this;
  }

   /**
   * wday
   * @return wday
  **/
  @javax.annotation.Nonnull
  public Integer getWday() {
    return wday;
  }

  public void setWday(Integer wday) {
    this.wday = wday;
  }


  public CoreCalendarGetCalendarDayView200ResponseDate weekday(String weekday) {
    this.weekday = weekday;
    return this;
  }

   /**
   * weekday
   * @return weekday
  **/
  @javax.annotation.Nonnull
  public String getWeekday() {
    return weekday;
  }

  public void setWeekday(String weekday) {
    this.weekday = weekday;
  }


  public CoreCalendarGetCalendarDayView200ResponseDate yday(Integer yday) {
    this.yday = yday;
    return this;
  }

   /**
   * yday
   * @return yday
  **/
  @javax.annotation.Nonnull
  public Integer getYday() {
    return yday;
  }

  public void setYday(Integer yday) {
    this.yday = yday;
  }


  public CoreCalendarGetCalendarDayView200ResponseDate year(Integer year) {
    this.year = year;
    return this;
  }

   /**
   * year
   * @return year
  **/
  @javax.annotation.Nonnull
  public Integer getYear() {
    return year;
  }

  public void setYear(Integer year) {
    this.year = year;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CoreCalendarGetCalendarDayView200ResponseDate coreCalendarGetCalendarDayView200ResponseDate = (CoreCalendarGetCalendarDayView200ResponseDate) o;
    return Objects.equals(this.hours, coreCalendarGetCalendarDayView200ResponseDate.hours) &&
        Objects.equals(this.mday, coreCalendarGetCalendarDayView200ResponseDate.mday) &&
        Objects.equals(this.minutes, coreCalendarGetCalendarDayView200ResponseDate.minutes) &&
        Objects.equals(this.mon, coreCalendarGetCalendarDayView200ResponseDate.mon) &&
        Objects.equals(this.month, coreCalendarGetCalendarDayView200ResponseDate.month) &&
        Objects.equals(this.seconds, coreCalendarGetCalendarDayView200ResponseDate.seconds) &&
        Objects.equals(this.timestamp, coreCalendarGetCalendarDayView200ResponseDate.timestamp) &&
        Objects.equals(this.wday, coreCalendarGetCalendarDayView200ResponseDate.wday) &&
        Objects.equals(this.weekday, coreCalendarGetCalendarDayView200ResponseDate.weekday) &&
        Objects.equals(this.yday, coreCalendarGetCalendarDayView200ResponseDate.yday) &&
        Objects.equals(this.year, coreCalendarGetCalendarDayView200ResponseDate.year);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hours, mday, minutes, mon, month, seconds, timestamp, wday, weekday, yday, year);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CoreCalendarGetCalendarDayView200ResponseDate {\n");
    sb.append("    hours: ").append(toIndentedString(hours)).append("\n");
    sb.append("    mday: ").append(toIndentedString(mday)).append("\n");
    sb.append("    minutes: ").append(toIndentedString(minutes)).append("\n");
    sb.append("    mon: ").append(toIndentedString(mon)).append("\n");
    sb.append("    month: ").append(toIndentedString(month)).append("\n");
    sb.append("    seconds: ").append(toIndentedString(seconds)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    wday: ").append(toIndentedString(wday)).append("\n");
    sb.append("    weekday: ").append(toIndentedString(weekday)).append("\n");
    sb.append("    yday: ").append(toIndentedString(yday)).append("\n");
    sb.append("    year: ").append(toIndentedString(year)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("hours");
    openapiFields.add("mday");
    openapiFields.add("minutes");
    openapiFields.add("mon");
    openapiFields.add("month");
    openapiFields.add("seconds");
    openapiFields.add("timestamp");
    openapiFields.add("wday");
    openapiFields.add("weekday");
    openapiFields.add("yday");
    openapiFields.add("year");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("hours");
    openapiRequiredFields.add("mday");
    openapiRequiredFields.add("minutes");
    openapiRequiredFields.add("mon");
    openapiRequiredFields.add("month");
    openapiRequiredFields.add("seconds");
    openapiRequiredFields.add("timestamp");
    openapiRequiredFields.add("wday");
    openapiRequiredFields.add("weekday");
    openapiRequiredFields.add("yday");
    openapiRequiredFields.add("year");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CoreCalendarGetCalendarDayView200ResponseDate
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CoreCalendarGetCalendarDayView200ResponseDate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CoreCalendarGetCalendarDayView200ResponseDate is not found in the empty JSON string", CoreCalendarGetCalendarDayView200ResponseDate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CoreCalendarGetCalendarDayView200ResponseDate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CoreCalendarGetCalendarDayView200ResponseDate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CoreCalendarGetCalendarDayView200ResponseDate.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("month").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `month` to be a primitive type in the JSON string but got `%s`", jsonObj.get("month").toString()));
      }
      if (!jsonObj.get("weekday").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `weekday` to be a primitive type in the JSON string but got `%s`", jsonObj.get("weekday").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CoreCalendarGetCalendarDayView200ResponseDate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CoreCalendarGetCalendarDayView200ResponseDate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CoreCalendarGetCalendarDayView200ResponseDate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CoreCalendarGetCalendarDayView200ResponseDate.class));

       return (TypeAdapter<T>) new TypeAdapter<CoreCalendarGetCalendarDayView200ResponseDate>() {
           @Override
           public void write(JsonWriter out, CoreCalendarGetCalendarDayView200ResponseDate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CoreCalendarGetCalendarDayView200ResponseDate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CoreCalendarGetCalendarDayView200ResponseDate given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CoreCalendarGetCalendarDayView200ResponseDate
  * @throws IOException if the JSON string is invalid with respect to CoreCalendarGetCalendarDayView200ResponseDate
  */
  public static CoreCalendarGetCalendarDayView200ResponseDate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CoreCalendarGetCalendarDayView200ResponseDate.class);
  }

 /**
  * Convert an instance of CoreCalendarGetCalendarDayView200ResponseDate to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

