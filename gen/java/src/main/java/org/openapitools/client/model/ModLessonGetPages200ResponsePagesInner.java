/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ModLessonGetPages200ResponsePagesInnerPage;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.joshuapare.JSON;

/**
 * The lesson pages
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-18T14:00:07.069642-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class ModLessonGetPages200ResponsePagesInner {
  public static final String SERIALIZED_NAME_ANSWERIDS = "answerids";
  @SerializedName(SERIALIZED_NAME_ANSWERIDS)
  private List<Object> answerids = new ArrayList<>();

  public static final String SERIALIZED_NAME_FILESCOUNT = "filescount";
  @SerializedName(SERIALIZED_NAME_FILESCOUNT)
  private Integer filescount = null;

  public static final String SERIALIZED_NAME_FILESSIZETOTAL = "filessizetotal";
  @SerializedName(SERIALIZED_NAME_FILESSIZETOTAL)
  private Integer filessizetotal = null;

  public static final String SERIALIZED_NAME_JUMPS = "jumps";
  @SerializedName(SERIALIZED_NAME_JUMPS)
  private List<Object> jumps = new ArrayList<>();

  public static final String SERIALIZED_NAME_PAGE = "page";
  @SerializedName(SERIALIZED_NAME_PAGE)
  private ModLessonGetPages200ResponsePagesInnerPage page;

  public ModLessonGetPages200ResponsePagesInner() {
  }

  public ModLessonGetPages200ResponsePagesInner answerids(List<Object> answerids) {
    this.answerids = answerids;
    return this;
  }

  public ModLessonGetPages200ResponsePagesInner addAnsweridsItem(Object answeridsItem) {
    if (this.answerids == null) {
      this.answerids = new ArrayList<>();
    }
    this.answerids.add(answeridsItem);
    return this;
  }

   /**
   * Get answerids
   * @return answerids
  **/
  @javax.annotation.Nullable
  public List<Object> getAnswerids() {
    return answerids;
  }

  public void setAnswerids(List<Object> answerids) {
    this.answerids = answerids;
  }


  public ModLessonGetPages200ResponsePagesInner filescount(Integer filescount) {
    this.filescount = filescount;
    return this;
  }

   /**
   * The total number of files attached to the page
   * @return filescount
  **/
  @javax.annotation.Nullable
  public Integer getFilescount() {
    return filescount;
  }

  public void setFilescount(Integer filescount) {
    this.filescount = filescount;
  }


  public ModLessonGetPages200ResponsePagesInner filessizetotal(Integer filessizetotal) {
    this.filessizetotal = filessizetotal;
    return this;
  }

   /**
   * The total size of the files
   * @return filessizetotal
  **/
  @javax.annotation.Nullable
  public Integer getFilessizetotal() {
    return filessizetotal;
  }

  public void setFilessizetotal(Integer filessizetotal) {
    this.filessizetotal = filessizetotal;
  }


  public ModLessonGetPages200ResponsePagesInner jumps(List<Object> jumps) {
    this.jumps = jumps;
    return this;
  }

  public ModLessonGetPages200ResponsePagesInner addJumpsItem(Object jumpsItem) {
    if (this.jumps == null) {
      this.jumps = new ArrayList<>();
    }
    this.jumps.add(jumpsItem);
    return this;
  }

   /**
   * Get jumps
   * @return jumps
  **/
  @javax.annotation.Nullable
  public List<Object> getJumps() {
    return jumps;
  }

  public void setJumps(List<Object> jumps) {
    this.jumps = jumps;
  }


  public ModLessonGetPages200ResponsePagesInner page(ModLessonGetPages200ResponsePagesInnerPage page) {
    this.page = page;
    return this;
  }

   /**
   * Get page
   * @return page
  **/
  @javax.annotation.Nullable
  public ModLessonGetPages200ResponsePagesInnerPage getPage() {
    return page;
  }

  public void setPage(ModLessonGetPages200ResponsePagesInnerPage page) {
    this.page = page;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModLessonGetPages200ResponsePagesInner modLessonGetPages200ResponsePagesInner = (ModLessonGetPages200ResponsePagesInner) o;
    return Objects.equals(this.answerids, modLessonGetPages200ResponsePagesInner.answerids) &&
        Objects.equals(this.filescount, modLessonGetPages200ResponsePagesInner.filescount) &&
        Objects.equals(this.filessizetotal, modLessonGetPages200ResponsePagesInner.filessizetotal) &&
        Objects.equals(this.jumps, modLessonGetPages200ResponsePagesInner.jumps) &&
        Objects.equals(this.page, modLessonGetPages200ResponsePagesInner.page);
  }

  @Override
  public int hashCode() {
    return Objects.hash(answerids, filescount, filessizetotal, jumps, page);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModLessonGetPages200ResponsePagesInner {\n");
    sb.append("    answerids: ").append(toIndentedString(answerids)).append("\n");
    sb.append("    filescount: ").append(toIndentedString(filescount)).append("\n");
    sb.append("    filessizetotal: ").append(toIndentedString(filessizetotal)).append("\n");
    sb.append("    jumps: ").append(toIndentedString(jumps)).append("\n");
    sb.append("    page: ").append(toIndentedString(page)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("answerids");
    openapiFields.add("filescount");
    openapiFields.add("filessizetotal");
    openapiFields.add("jumps");
    openapiFields.add("page");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ModLessonGetPages200ResponsePagesInner
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ModLessonGetPages200ResponsePagesInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModLessonGetPages200ResponsePagesInner is not found in the empty JSON string", ModLessonGetPages200ResponsePagesInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ModLessonGetPages200ResponsePagesInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModLessonGetPages200ResponsePagesInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("answerids") != null && !jsonObj.get("answerids").isJsonNull() && !jsonObj.get("answerids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `answerids` to be an array in the JSON string but got `%s`", jsonObj.get("answerids").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("jumps") != null && !jsonObj.get("jumps").isJsonNull() && !jsonObj.get("jumps").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `jumps` to be an array in the JSON string but got `%s`", jsonObj.get("jumps").toString()));
      }
      // validate the optional field `page`
      if (jsonObj.get("page") != null && !jsonObj.get("page").isJsonNull()) {
        ModLessonGetPages200ResponsePagesInnerPage.validateJsonElement(jsonObj.get("page"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModLessonGetPages200ResponsePagesInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModLessonGetPages200ResponsePagesInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModLessonGetPages200ResponsePagesInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModLessonGetPages200ResponsePagesInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ModLessonGetPages200ResponsePagesInner>() {
           @Override
           public void write(JsonWriter out, ModLessonGetPages200ResponsePagesInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModLessonGetPages200ResponsePagesInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ModLessonGetPages200ResponsePagesInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ModLessonGetPages200ResponsePagesInner
  * @throws IOException if the JSON string is invalid with respect to ModLessonGetPages200ResponsePagesInner
  */
  public static ModLessonGetPages200ResponsePagesInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModLessonGetPages200ResponsePagesInner.class);
  }

 /**
  * Convert an instance of ModLessonGetPages200ResponsePagesInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

