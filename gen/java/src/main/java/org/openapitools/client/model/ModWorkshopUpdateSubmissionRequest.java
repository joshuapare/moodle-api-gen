/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.joshuapare.JSON;

/**
 * ModWorkshopUpdateSubmissionRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-18T20:58:28.689161-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class ModWorkshopUpdateSubmissionRequest {
  public static final String SERIALIZED_NAME_ATTACHMENTSID = "attachmentsid";
  @SerializedName(SERIALIZED_NAME_ATTACHMENTSID)
  private Integer attachmentsid = 0;

  public static final String SERIALIZED_NAME_CONTENT = "content";
  @SerializedName(SERIALIZED_NAME_CONTENT)
  private String content = "";

  public static final String SERIALIZED_NAME_CONTENTFORMAT = "contentformat";
  @SerializedName(SERIALIZED_NAME_CONTENTFORMAT)
  private Integer contentformat = 0;

  public static final String SERIALIZED_NAME_INLINEATTACHMENTSID = "inlineattachmentsid";
  @SerializedName(SERIALIZED_NAME_INLINEATTACHMENTSID)
  private Integer inlineattachmentsid = 0;

  public static final String SERIALIZED_NAME_SUBMISSIONID = "submissionid";
  @SerializedName(SERIALIZED_NAME_SUBMISSIONID)
  private Integer submissionid;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public ModWorkshopUpdateSubmissionRequest() {
  }

  public ModWorkshopUpdateSubmissionRequest attachmentsid(Integer attachmentsid) {
    this.attachmentsid = attachmentsid;
    return this;
  }

   /**
   * The draft file area id for attachments
   * @return attachmentsid
  **/
  @javax.annotation.Nullable
  public Integer getAttachmentsid() {
    return attachmentsid;
  }

  public void setAttachmentsid(Integer attachmentsid) {
    this.attachmentsid = attachmentsid;
  }


  public ModWorkshopUpdateSubmissionRequest content(String content) {
    this.content = content;
    return this;
  }

   /**
   * Submission text content
   * @return content
  **/
  @javax.annotation.Nullable
  public String getContent() {
    return content;
  }

  public void setContent(String content) {
    this.content = content;
  }


  public ModWorkshopUpdateSubmissionRequest contentformat(Integer contentformat) {
    this.contentformat = contentformat;
    return this;
  }

   /**
   * The format used for the content
   * @return contentformat
  **/
  @javax.annotation.Nullable
  public Integer getContentformat() {
    return contentformat;
  }

  public void setContentformat(Integer contentformat) {
    this.contentformat = contentformat;
  }


  public ModWorkshopUpdateSubmissionRequest inlineattachmentsid(Integer inlineattachmentsid) {
    this.inlineattachmentsid = inlineattachmentsid;
    return this;
  }

   /**
   * The draft file area id for inline attachments in the content
   * @return inlineattachmentsid
  **/
  @javax.annotation.Nullable
  public Integer getInlineattachmentsid() {
    return inlineattachmentsid;
  }

  public void setInlineattachmentsid(Integer inlineattachmentsid) {
    this.inlineattachmentsid = inlineattachmentsid;
  }


  public ModWorkshopUpdateSubmissionRequest submissionid(Integer submissionid) {
    this.submissionid = submissionid;
    return this;
  }

   /**
   * Submission id
   * @return submissionid
  **/
  @javax.annotation.Nonnull
  public Integer getSubmissionid() {
    return submissionid;
  }

  public void setSubmissionid(Integer submissionid) {
    this.submissionid = submissionid;
  }


  public ModWorkshopUpdateSubmissionRequest title(String title) {
    this.title = title;
    return this;
  }

   /**
   * Submission title
   * @return title
  **/
  @javax.annotation.Nonnull
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModWorkshopUpdateSubmissionRequest modWorkshopUpdateSubmissionRequest = (ModWorkshopUpdateSubmissionRequest) o;
    return Objects.equals(this.attachmentsid, modWorkshopUpdateSubmissionRequest.attachmentsid) &&
        Objects.equals(this.content, modWorkshopUpdateSubmissionRequest.content) &&
        Objects.equals(this.contentformat, modWorkshopUpdateSubmissionRequest.contentformat) &&
        Objects.equals(this.inlineattachmentsid, modWorkshopUpdateSubmissionRequest.inlineattachmentsid) &&
        Objects.equals(this.submissionid, modWorkshopUpdateSubmissionRequest.submissionid) &&
        Objects.equals(this.title, modWorkshopUpdateSubmissionRequest.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attachmentsid, content, contentformat, inlineattachmentsid, submissionid, title);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModWorkshopUpdateSubmissionRequest {\n");
    sb.append("    attachmentsid: ").append(toIndentedString(attachmentsid)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    contentformat: ").append(toIndentedString(contentformat)).append("\n");
    sb.append("    inlineattachmentsid: ").append(toIndentedString(inlineattachmentsid)).append("\n");
    sb.append("    submissionid: ").append(toIndentedString(submissionid)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attachmentsid");
    openapiFields.add("content");
    openapiFields.add("contentformat");
    openapiFields.add("inlineattachmentsid");
    openapiFields.add("submissionid");
    openapiFields.add("title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("submissionid");
    openapiRequiredFields.add("title");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ModWorkshopUpdateSubmissionRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ModWorkshopUpdateSubmissionRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModWorkshopUpdateSubmissionRequest is not found in the empty JSON string", ModWorkshopUpdateSubmissionRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ModWorkshopUpdateSubmissionRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModWorkshopUpdateSubmissionRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ModWorkshopUpdateSubmissionRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("content") != null && !jsonObj.get("content").isJsonNull()) && !jsonObj.get("content").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `content` to be a primitive type in the JSON string but got `%s`", jsonObj.get("content").toString()));
      }
      if (!jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModWorkshopUpdateSubmissionRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModWorkshopUpdateSubmissionRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModWorkshopUpdateSubmissionRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModWorkshopUpdateSubmissionRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ModWorkshopUpdateSubmissionRequest>() {
           @Override
           public void write(JsonWriter out, ModWorkshopUpdateSubmissionRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModWorkshopUpdateSubmissionRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ModWorkshopUpdateSubmissionRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ModWorkshopUpdateSubmissionRequest
  * @throws IOException if the JSON string is invalid with respect to ModWorkshopUpdateSubmissionRequest
  */
  public static ModWorkshopUpdateSubmissionRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModWorkshopUpdateSubmissionRequest.class);
  }

 /**
  * Convert an instance of ModWorkshopUpdateSubmissionRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

