/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ModForumGetDiscussionPosts200ResponseRatinginfoScalesInnerItemsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.joshuapare.JSON;

/**
 * Scale information
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-18T20:58:28.689161-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class ModForumGetDiscussionPosts200ResponseRatinginfoScalesInner {
  public static final String SERIALIZED_NAME_COURSEID = "courseid";
  @SerializedName(SERIALIZED_NAME_COURSEID)
  private Integer courseid;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_ISNUMERIC = "isnumeric";
  @SerializedName(SERIALIZED_NAME_ISNUMERIC)
  private Boolean isnumeric;

  public static final String SERIALIZED_NAME_ITEMS = "items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private List<ModForumGetDiscussionPosts200ResponseRatinginfoScalesInnerItemsInner> items = new ArrayList<>();

  public static final String SERIALIZED_NAME_MAX = "max";
  @SerializedName(SERIALIZED_NAME_MAX)
  private Integer max;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public ModForumGetDiscussionPosts200ResponseRatinginfoScalesInner() {
  }

  public ModForumGetDiscussionPosts200ResponseRatinginfoScalesInner courseid(Integer courseid) {
    this.courseid = courseid;
    return this;
  }

   /**
   * Course id.
   * @return courseid
  **/
  @javax.annotation.Nullable
  public Integer getCourseid() {
    return courseid;
  }

  public void setCourseid(Integer courseid) {
    this.courseid = courseid;
  }


  public ModForumGetDiscussionPosts200ResponseRatinginfoScalesInner id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * Scale id.
   * @return id
  **/
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public ModForumGetDiscussionPosts200ResponseRatinginfoScalesInner isnumeric(Boolean isnumeric) {
    this.isnumeric = isnumeric;
    return this;
  }

   /**
   * Whether is a numeric scale.
   * @return isnumeric
  **/
  @javax.annotation.Nullable
  public Boolean getIsnumeric() {
    return isnumeric;
  }

  public void setIsnumeric(Boolean isnumeric) {
    this.isnumeric = isnumeric;
  }


  public ModForumGetDiscussionPosts200ResponseRatinginfoScalesInner items(List<ModForumGetDiscussionPosts200ResponseRatinginfoScalesInnerItemsInner> items) {
    this.items = items;
    return this;
  }

  public ModForumGetDiscussionPosts200ResponseRatinginfoScalesInner addItemsItem(ModForumGetDiscussionPosts200ResponseRatinginfoScalesInnerItemsInner itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<>();
    }
    this.items.add(itemsItem);
    return this;
  }

   /**
   * Get items
   * @return items
  **/
  @javax.annotation.Nullable
  public List<ModForumGetDiscussionPosts200ResponseRatinginfoScalesInnerItemsInner> getItems() {
    return items;
  }

  public void setItems(List<ModForumGetDiscussionPosts200ResponseRatinginfoScalesInnerItemsInner> items) {
    this.items = items;
  }


  public ModForumGetDiscussionPosts200ResponseRatinginfoScalesInner max(Integer max) {
    this.max = max;
    return this;
  }

   /**
   * Max value for the scale.
   * @return max
  **/
  @javax.annotation.Nullable
  public Integer getMax() {
    return max;
  }

  public void setMax(Integer max) {
    this.max = max;
  }


  public ModForumGetDiscussionPosts200ResponseRatinginfoScalesInner name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Scale name (when a real scale is used).
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModForumGetDiscussionPosts200ResponseRatinginfoScalesInner modForumGetDiscussionPosts200ResponseRatinginfoScalesInner = (ModForumGetDiscussionPosts200ResponseRatinginfoScalesInner) o;
    return Objects.equals(this.courseid, modForumGetDiscussionPosts200ResponseRatinginfoScalesInner.courseid) &&
        Objects.equals(this.id, modForumGetDiscussionPosts200ResponseRatinginfoScalesInner.id) &&
        Objects.equals(this.isnumeric, modForumGetDiscussionPosts200ResponseRatinginfoScalesInner.isnumeric) &&
        Objects.equals(this.items, modForumGetDiscussionPosts200ResponseRatinginfoScalesInner.items) &&
        Objects.equals(this.max, modForumGetDiscussionPosts200ResponseRatinginfoScalesInner.max) &&
        Objects.equals(this.name, modForumGetDiscussionPosts200ResponseRatinginfoScalesInner.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(courseid, id, isnumeric, items, max, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModForumGetDiscussionPosts200ResponseRatinginfoScalesInner {\n");
    sb.append("    courseid: ").append(toIndentedString(courseid)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isnumeric: ").append(toIndentedString(isnumeric)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    max: ").append(toIndentedString(max)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("courseid");
    openapiFields.add("id");
    openapiFields.add("isnumeric");
    openapiFields.add("items");
    openapiFields.add("max");
    openapiFields.add("name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ModForumGetDiscussionPosts200ResponseRatinginfoScalesInner
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ModForumGetDiscussionPosts200ResponseRatinginfoScalesInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModForumGetDiscussionPosts200ResponseRatinginfoScalesInner is not found in the empty JSON string", ModForumGetDiscussionPosts200ResponseRatinginfoScalesInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ModForumGetDiscussionPosts200ResponseRatinginfoScalesInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModForumGetDiscussionPosts200ResponseRatinginfoScalesInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("items") != null && !jsonObj.get("items").isJsonNull()) {
        JsonArray jsonArrayitems = jsonObj.getAsJsonArray("items");
        if (jsonArrayitems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("items").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `items` to be an array in the JSON string but got `%s`", jsonObj.get("items").toString()));
          }

          // validate the optional field `items` (array)
          for (int i = 0; i < jsonArrayitems.size(); i++) {
            ModForumGetDiscussionPosts200ResponseRatinginfoScalesInnerItemsInner.validateJsonElement(jsonArrayitems.get(i));
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModForumGetDiscussionPosts200ResponseRatinginfoScalesInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModForumGetDiscussionPosts200ResponseRatinginfoScalesInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModForumGetDiscussionPosts200ResponseRatinginfoScalesInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModForumGetDiscussionPosts200ResponseRatinginfoScalesInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ModForumGetDiscussionPosts200ResponseRatinginfoScalesInner>() {
           @Override
           public void write(JsonWriter out, ModForumGetDiscussionPosts200ResponseRatinginfoScalesInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModForumGetDiscussionPosts200ResponseRatinginfoScalesInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ModForumGetDiscussionPosts200ResponseRatinginfoScalesInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ModForumGetDiscussionPosts200ResponseRatinginfoScalesInner
  * @throws IOException if the JSON string is invalid with respect to ModForumGetDiscussionPosts200ResponseRatinginfoScalesInner
  */
  public static ModForumGetDiscussionPosts200ResponseRatinginfoScalesInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModForumGetDiscussionPosts200ResponseRatinginfoScalesInner.class);
  }

 /**
  * Convert an instance of ModForumGetDiscussionPosts200ResponseRatinginfoScalesInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

