/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.joshuapare.JSON;

/**
 * event
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-18T14:00:07.069642-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class CoreCalendarCreateCalendarEventsRequestEventsInner {
  public static final String SERIALIZED_NAME_COURSEID = "courseid";
  @SerializedName(SERIALIZED_NAME_COURSEID)
  private Integer courseid = 0;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description = "null";

  public static final String SERIALIZED_NAME_EVENTTYPE = "eventtype";
  @SerializedName(SERIALIZED_NAME_EVENTTYPE)
  private String eventtype = "user";

  public static final String SERIALIZED_NAME_FORMAT = "format";
  @SerializedName(SERIALIZED_NAME_FORMAT)
  private Integer format = 1;

  public static final String SERIALIZED_NAME_GROUPID = "groupid";
  @SerializedName(SERIALIZED_NAME_GROUPID)
  private Integer groupid = 0;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name = "";

  public static final String SERIALIZED_NAME_REPEATS = "repeats";
  @SerializedName(SERIALIZED_NAME_REPEATS)
  private Integer repeats = 0;

  public static final String SERIALIZED_NAME_SEQUENCE = "sequence";
  @SerializedName(SERIALIZED_NAME_SEQUENCE)
  private Integer sequence = 1;

  public static final String SERIALIZED_NAME_TIMEDURATION = "timeduration";
  @SerializedName(SERIALIZED_NAME_TIMEDURATION)
  private Integer timeduration = 0;

  public static final String SERIALIZED_NAME_TIMESTART = "timestart";
  @SerializedName(SERIALIZED_NAME_TIMESTART)
  private Integer timestart = 1716010508;

  public static final String SERIALIZED_NAME_VISIBLE = "visible";
  @SerializedName(SERIALIZED_NAME_VISIBLE)
  private Integer visible = 1;

  public CoreCalendarCreateCalendarEventsRequestEventsInner() {
  }

  public CoreCalendarCreateCalendarEventsRequestEventsInner courseid(Integer courseid) {
    this.courseid = courseid;
    return this;
  }

   /**
   * course id
   * @return courseid
  **/
  @javax.annotation.Nullable
  public Integer getCourseid() {
    return courseid;
  }

  public void setCourseid(Integer courseid) {
    this.courseid = courseid;
  }


  public CoreCalendarCreateCalendarEventsRequestEventsInner description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Description
   * @return description
  **/
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CoreCalendarCreateCalendarEventsRequestEventsInner eventtype(String eventtype) {
    this.eventtype = eventtype;
    return this;
  }

   /**
   * Event type
   * @return eventtype
  **/
  @javax.annotation.Nullable
  public String getEventtype() {
    return eventtype;
  }

  public void setEventtype(String eventtype) {
    this.eventtype = eventtype;
  }


  public CoreCalendarCreateCalendarEventsRequestEventsInner format(Integer format) {
    this.format = format;
    return this;
  }

   /**
   * description format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)
   * @return format
  **/
  @javax.annotation.Nullable
  public Integer getFormat() {
    return format;
  }

  public void setFormat(Integer format) {
    this.format = format;
  }


  public CoreCalendarCreateCalendarEventsRequestEventsInner groupid(Integer groupid) {
    this.groupid = groupid;
    return this;
  }

   /**
   * group id
   * @return groupid
  **/
  @javax.annotation.Nullable
  public Integer getGroupid() {
    return groupid;
  }

  public void setGroupid(Integer groupid) {
    this.groupid = groupid;
  }


  public CoreCalendarCreateCalendarEventsRequestEventsInner name(String name) {
    this.name = name;
    return this;
  }

   /**
   * event name
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CoreCalendarCreateCalendarEventsRequestEventsInner repeats(Integer repeats) {
    this.repeats = repeats;
    return this;
  }

   /**
   * number of repeats
   * @return repeats
  **/
  @javax.annotation.Nullable
  public Integer getRepeats() {
    return repeats;
  }

  public void setRepeats(Integer repeats) {
    this.repeats = repeats;
  }


  public CoreCalendarCreateCalendarEventsRequestEventsInner sequence(Integer sequence) {
    this.sequence = sequence;
    return this;
  }

   /**
   * sequence
   * @return sequence
  **/
  @javax.annotation.Nullable
  public Integer getSequence() {
    return sequence;
  }

  public void setSequence(Integer sequence) {
    this.sequence = sequence;
  }


  public CoreCalendarCreateCalendarEventsRequestEventsInner timeduration(Integer timeduration) {
    this.timeduration = timeduration;
    return this;
  }

   /**
   * time duration
   * @return timeduration
  **/
  @javax.annotation.Nullable
  public Integer getTimeduration() {
    return timeduration;
  }

  public void setTimeduration(Integer timeduration) {
    this.timeduration = timeduration;
  }


  public CoreCalendarCreateCalendarEventsRequestEventsInner timestart(Integer timestart) {
    this.timestart = timestart;
    return this;
  }

   /**
   * timestart
   * @return timestart
  **/
  @javax.annotation.Nullable
  public Integer getTimestart() {
    return timestart;
  }

  public void setTimestart(Integer timestart) {
    this.timestart = timestart;
  }


  public CoreCalendarCreateCalendarEventsRequestEventsInner visible(Integer visible) {
    this.visible = visible;
    return this;
  }

   /**
   * visible
   * @return visible
  **/
  @javax.annotation.Nullable
  public Integer getVisible() {
    return visible;
  }

  public void setVisible(Integer visible) {
    this.visible = visible;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CoreCalendarCreateCalendarEventsRequestEventsInner coreCalendarCreateCalendarEventsRequestEventsInner = (CoreCalendarCreateCalendarEventsRequestEventsInner) o;
    return Objects.equals(this.courseid, coreCalendarCreateCalendarEventsRequestEventsInner.courseid) &&
        Objects.equals(this.description, coreCalendarCreateCalendarEventsRequestEventsInner.description) &&
        Objects.equals(this.eventtype, coreCalendarCreateCalendarEventsRequestEventsInner.eventtype) &&
        Objects.equals(this.format, coreCalendarCreateCalendarEventsRequestEventsInner.format) &&
        Objects.equals(this.groupid, coreCalendarCreateCalendarEventsRequestEventsInner.groupid) &&
        Objects.equals(this.name, coreCalendarCreateCalendarEventsRequestEventsInner.name) &&
        Objects.equals(this.repeats, coreCalendarCreateCalendarEventsRequestEventsInner.repeats) &&
        Objects.equals(this.sequence, coreCalendarCreateCalendarEventsRequestEventsInner.sequence) &&
        Objects.equals(this.timeduration, coreCalendarCreateCalendarEventsRequestEventsInner.timeduration) &&
        Objects.equals(this.timestart, coreCalendarCreateCalendarEventsRequestEventsInner.timestart) &&
        Objects.equals(this.visible, coreCalendarCreateCalendarEventsRequestEventsInner.visible);
  }

  @Override
  public int hashCode() {
    return Objects.hash(courseid, description, eventtype, format, groupid, name, repeats, sequence, timeduration, timestart, visible);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CoreCalendarCreateCalendarEventsRequestEventsInner {\n");
    sb.append("    courseid: ").append(toIndentedString(courseid)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    eventtype: ").append(toIndentedString(eventtype)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    groupid: ").append(toIndentedString(groupid)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    repeats: ").append(toIndentedString(repeats)).append("\n");
    sb.append("    sequence: ").append(toIndentedString(sequence)).append("\n");
    sb.append("    timeduration: ").append(toIndentedString(timeduration)).append("\n");
    sb.append("    timestart: ").append(toIndentedString(timestart)).append("\n");
    sb.append("    visible: ").append(toIndentedString(visible)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("courseid");
    openapiFields.add("description");
    openapiFields.add("eventtype");
    openapiFields.add("format");
    openapiFields.add("groupid");
    openapiFields.add("name");
    openapiFields.add("repeats");
    openapiFields.add("sequence");
    openapiFields.add("timeduration");
    openapiFields.add("timestart");
    openapiFields.add("visible");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CoreCalendarCreateCalendarEventsRequestEventsInner
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CoreCalendarCreateCalendarEventsRequestEventsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CoreCalendarCreateCalendarEventsRequestEventsInner is not found in the empty JSON string", CoreCalendarCreateCalendarEventsRequestEventsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CoreCalendarCreateCalendarEventsRequestEventsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CoreCalendarCreateCalendarEventsRequestEventsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("eventtype") != null && !jsonObj.get("eventtype").isJsonNull()) && !jsonObj.get("eventtype").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventtype` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventtype").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CoreCalendarCreateCalendarEventsRequestEventsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CoreCalendarCreateCalendarEventsRequestEventsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CoreCalendarCreateCalendarEventsRequestEventsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CoreCalendarCreateCalendarEventsRequestEventsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<CoreCalendarCreateCalendarEventsRequestEventsInner>() {
           @Override
           public void write(JsonWriter out, CoreCalendarCreateCalendarEventsRequestEventsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CoreCalendarCreateCalendarEventsRequestEventsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CoreCalendarCreateCalendarEventsRequestEventsInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CoreCalendarCreateCalendarEventsRequestEventsInner
  * @throws IOException if the JSON string is invalid with respect to CoreCalendarCreateCalendarEventsRequestEventsInner
  */
  public static CoreCalendarCreateCalendarEventsRequestEventsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CoreCalendarCreateCalendarEventsRequestEventsInner.class);
  }

 /**
  * Convert an instance of CoreCalendarCreateCalendarEventsRequestEventsInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

