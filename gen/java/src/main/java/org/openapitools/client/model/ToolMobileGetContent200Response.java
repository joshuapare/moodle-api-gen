/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner;
import org.openapitools.client.model.ToolMobileGetContent200ResponseOtherdataInner;
import org.openapitools.client.model.ToolMobileGetContent200ResponseRestrict;
import org.openapitools.client.model.ToolMobileGetContent200ResponseTemplatesInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.joshuapare.JSON;

/**
 * ToolMobileGetContent200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-18T14:00:07.069642-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class ToolMobileGetContent200Response {
  public static final String SERIALIZED_NAME_DISABLED = "disabled";
  @SerializedName(SERIALIZED_NAME_DISABLED)
  private Boolean disabled = null;

  public static final String SERIALIZED_NAME_FILES = "files";
  @SerializedName(SERIALIZED_NAME_FILES)
  private List<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner> files = new ArrayList<>();

  public static final String SERIALIZED_NAME_JAVASCRIPT = "javascript";
  @SerializedName(SERIALIZED_NAME_JAVASCRIPT)
  private String javascript = "null";

  public static final String SERIALIZED_NAME_OTHERDATA = "otherdata";
  @SerializedName(SERIALIZED_NAME_OTHERDATA)
  private List<ToolMobileGetContent200ResponseOtherdataInner> otherdata = new ArrayList<>();

  public static final String SERIALIZED_NAME_RESTRICT = "restrict";
  @SerializedName(SERIALIZED_NAME_RESTRICT)
  private ToolMobileGetContent200ResponseRestrict restrict;

  public static final String SERIALIZED_NAME_TEMPLATES = "templates";
  @SerializedName(SERIALIZED_NAME_TEMPLATES)
  private List<ToolMobileGetContent200ResponseTemplatesInner> templates = new ArrayList<>();

  public ToolMobileGetContent200Response() {
  }

  public ToolMobileGetContent200Response disabled(Boolean disabled) {
    this.disabled = disabled;
    return this;
  }

   /**
   * Whether we consider this disabled or not.
   * @return disabled
  **/
  @javax.annotation.Nullable
  public Boolean getDisabled() {
    return disabled;
  }

  public void setDisabled(Boolean disabled) {
    this.disabled = disabled;
  }


  public ToolMobileGetContent200Response files(List<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner> files) {
    this.files = files;
    return this;
  }

  public ToolMobileGetContent200Response addFilesItem(CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner filesItem) {
    if (this.files == null) {
      this.files = new ArrayList<>();
    }
    this.files.add(filesItem);
    return this;
  }

   /**
   * Get files
   * @return files
  **/
  @javax.annotation.Nonnull
  public List<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner> getFiles() {
    return files;
  }

  public void setFiles(List<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner> files) {
    this.files = files;
  }


  public ToolMobileGetContent200Response javascript(String javascript) {
    this.javascript = javascript;
    return this;
  }

   /**
   * JavaScript code.
   * @return javascript
  **/
  @javax.annotation.Nonnull
  public String getJavascript() {
    return javascript;
  }

  public void setJavascript(String javascript) {
    this.javascript = javascript;
  }


  public ToolMobileGetContent200Response otherdata(List<ToolMobileGetContent200ResponseOtherdataInner> otherdata) {
    this.otherdata = otherdata;
    return this;
  }

  public ToolMobileGetContent200Response addOtherdataItem(ToolMobileGetContent200ResponseOtherdataInner otherdataItem) {
    if (this.otherdata == null) {
      this.otherdata = new ArrayList<>();
    }
    this.otherdata.add(otherdataItem);
    return this;
  }

   /**
   * Get otherdata
   * @return otherdata
  **/
  @javax.annotation.Nonnull
  public List<ToolMobileGetContent200ResponseOtherdataInner> getOtherdata() {
    return otherdata;
  }

  public void setOtherdata(List<ToolMobileGetContent200ResponseOtherdataInner> otherdata) {
    this.otherdata = otherdata;
  }


  public ToolMobileGetContent200Response restrict(ToolMobileGetContent200ResponseRestrict restrict) {
    this.restrict = restrict;
    return this;
  }

   /**
   * Get restrict
   * @return restrict
  **/
  @javax.annotation.Nonnull
  public ToolMobileGetContent200ResponseRestrict getRestrict() {
    return restrict;
  }

  public void setRestrict(ToolMobileGetContent200ResponseRestrict restrict) {
    this.restrict = restrict;
  }


  public ToolMobileGetContent200Response templates(List<ToolMobileGetContent200ResponseTemplatesInner> templates) {
    this.templates = templates;
    return this;
  }

  public ToolMobileGetContent200Response addTemplatesItem(ToolMobileGetContent200ResponseTemplatesInner templatesItem) {
    if (this.templates == null) {
      this.templates = new ArrayList<>();
    }
    this.templates.add(templatesItem);
    return this;
  }

   /**
   * Get templates
   * @return templates
  **/
  @javax.annotation.Nonnull
  public List<ToolMobileGetContent200ResponseTemplatesInner> getTemplates() {
    return templates;
  }

  public void setTemplates(List<ToolMobileGetContent200ResponseTemplatesInner> templates) {
    this.templates = templates;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ToolMobileGetContent200Response toolMobileGetContent200Response = (ToolMobileGetContent200Response) o;
    return Objects.equals(this.disabled, toolMobileGetContent200Response.disabled) &&
        Objects.equals(this.files, toolMobileGetContent200Response.files) &&
        Objects.equals(this.javascript, toolMobileGetContent200Response.javascript) &&
        Objects.equals(this.otherdata, toolMobileGetContent200Response.otherdata) &&
        Objects.equals(this.restrict, toolMobileGetContent200Response.restrict) &&
        Objects.equals(this.templates, toolMobileGetContent200Response.templates);
  }

  @Override
  public int hashCode() {
    return Objects.hash(disabled, files, javascript, otherdata, restrict, templates);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ToolMobileGetContent200Response {\n");
    sb.append("    disabled: ").append(toIndentedString(disabled)).append("\n");
    sb.append("    files: ").append(toIndentedString(files)).append("\n");
    sb.append("    javascript: ").append(toIndentedString(javascript)).append("\n");
    sb.append("    otherdata: ").append(toIndentedString(otherdata)).append("\n");
    sb.append("    restrict: ").append(toIndentedString(restrict)).append("\n");
    sb.append("    templates: ").append(toIndentedString(templates)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("disabled");
    openapiFields.add("files");
    openapiFields.add("javascript");
    openapiFields.add("otherdata");
    openapiFields.add("restrict");
    openapiFields.add("templates");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("files");
    openapiRequiredFields.add("javascript");
    openapiRequiredFields.add("otherdata");
    openapiRequiredFields.add("restrict");
    openapiRequiredFields.add("templates");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ToolMobileGetContent200Response
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ToolMobileGetContent200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ToolMobileGetContent200Response is not found in the empty JSON string", ToolMobileGetContent200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ToolMobileGetContent200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ToolMobileGetContent200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ToolMobileGetContent200Response.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("files").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `files` to be an array in the JSON string but got `%s`", jsonObj.get("files").toString()));
      }

      JsonArray jsonArrayfiles = jsonObj.getAsJsonArray("files");
      // validate the required field `files` (array)
      for (int i = 0; i < jsonArrayfiles.size(); i++) {
        CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner.validateJsonElement(jsonArrayfiles.get(i));
      };
      if (!jsonObj.get("javascript").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `javascript` to be a primitive type in the JSON string but got `%s`", jsonObj.get("javascript").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("otherdata").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `otherdata` to be an array in the JSON string but got `%s`", jsonObj.get("otherdata").toString()));
      }

      JsonArray jsonArrayotherdata = jsonObj.getAsJsonArray("otherdata");
      // validate the required field `otherdata` (array)
      for (int i = 0; i < jsonArrayotherdata.size(); i++) {
        ToolMobileGetContent200ResponseOtherdataInner.validateJsonElement(jsonArrayotherdata.get(i));
      };
      // validate the required field `restrict`
      ToolMobileGetContent200ResponseRestrict.validateJsonElement(jsonObj.get("restrict"));
      // ensure the json data is an array
      if (!jsonObj.get("templates").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `templates` to be an array in the JSON string but got `%s`", jsonObj.get("templates").toString()));
      }

      JsonArray jsonArraytemplates = jsonObj.getAsJsonArray("templates");
      // validate the required field `templates` (array)
      for (int i = 0; i < jsonArraytemplates.size(); i++) {
        ToolMobileGetContent200ResponseTemplatesInner.validateJsonElement(jsonArraytemplates.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ToolMobileGetContent200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ToolMobileGetContent200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ToolMobileGetContent200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ToolMobileGetContent200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<ToolMobileGetContent200Response>() {
           @Override
           public void write(JsonWriter out, ToolMobileGetContent200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ToolMobileGetContent200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ToolMobileGetContent200Response given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ToolMobileGetContent200Response
  * @throws IOException if the JSON string is invalid with respect to ToolMobileGetContent200Response
  */
  public static ToolMobileGetContent200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ToolMobileGetContent200Response.class);
  }

 /**
  * Convert an instance of ToolMobileGetContent200Response to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

