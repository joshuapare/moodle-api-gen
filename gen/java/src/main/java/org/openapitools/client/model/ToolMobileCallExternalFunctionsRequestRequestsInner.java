/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.joshuapare.JSON;

/**
 * ToolMobileCallExternalFunctionsRequestRequestsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-18T14:00:07.069642-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class ToolMobileCallExternalFunctionsRequestRequestsInner {
  public static final String SERIALIZED_NAME_ARGUMENTS = "arguments";
  @SerializedName(SERIALIZED_NAME_ARGUMENTS)
  private String arguments = "{}";

  public static final String SERIALIZED_NAME_FUNCTION = "function";
  @SerializedName(SERIALIZED_NAME_FUNCTION)
  private String function = "null";

  public static final String SERIALIZED_NAME_SETTINGFILEURL = "settingfileurl";
  @SerializedName(SERIALIZED_NAME_SETTINGFILEURL)
  private Boolean settingfileurl = true;

  public static final String SERIALIZED_NAME_SETTINGFILTER = "settingfilter";
  @SerializedName(SERIALIZED_NAME_SETTINGFILTER)
  private Boolean settingfilter = false;

  public static final String SERIALIZED_NAME_SETTINGLANG = "settinglang";
  @SerializedName(SERIALIZED_NAME_SETTINGLANG)
  private String settinglang = "";

  public static final String SERIALIZED_NAME_SETTINGRAW = "settingraw";
  @SerializedName(SERIALIZED_NAME_SETTINGRAW)
  private Boolean settingraw = false;

  public ToolMobileCallExternalFunctionsRequestRequestsInner() {
  }

  public ToolMobileCallExternalFunctionsRequestRequestsInner arguments(String arguments) {
    this.arguments = arguments;
    return this;
  }

   /**
   * JSON-encoded object with named arguments
   * @return arguments
  **/
  @javax.annotation.Nullable
  public String getArguments() {
    return arguments;
  }

  public void setArguments(String arguments) {
    this.arguments = arguments;
  }


  public ToolMobileCallExternalFunctionsRequestRequestsInner function(String function) {
    this.function = function;
    return this;
  }

   /**
   * Function name
   * @return function
  **/
  @javax.annotation.Nullable
  public String getFunction() {
    return function;
  }

  public void setFunction(String function) {
    this.function = function;
  }


  public ToolMobileCallExternalFunctionsRequestRequestsInner settingfileurl(Boolean settingfileurl) {
    this.settingfileurl = settingfileurl;
    return this;
  }

   /**
   * Rewrite plugin file URLs
   * @return settingfileurl
  **/
  @javax.annotation.Nullable
  public Boolean getSettingfileurl() {
    return settingfileurl;
  }

  public void setSettingfileurl(Boolean settingfileurl) {
    this.settingfileurl = settingfileurl;
  }


  public ToolMobileCallExternalFunctionsRequestRequestsInner settingfilter(Boolean settingfilter) {
    this.settingfilter = settingfilter;
    return this;
  }

   /**
   * Filter text
   * @return settingfilter
  **/
  @javax.annotation.Nullable
  public Boolean getSettingfilter() {
    return settingfilter;
  }

  public void setSettingfilter(Boolean settingfilter) {
    this.settingfilter = settingfilter;
  }


  public ToolMobileCallExternalFunctionsRequestRequestsInner settinglang(String settinglang) {
    this.settinglang = settinglang;
    return this;
  }

   /**
   * Session language
   * @return settinglang
  **/
  @javax.annotation.Nullable
  public String getSettinglang() {
    return settinglang;
  }

  public void setSettinglang(String settinglang) {
    this.settinglang = settinglang;
  }


  public ToolMobileCallExternalFunctionsRequestRequestsInner settingraw(Boolean settingraw) {
    this.settingraw = settingraw;
    return this;
  }

   /**
   * Return raw text
   * @return settingraw
  **/
  @javax.annotation.Nullable
  public Boolean getSettingraw() {
    return settingraw;
  }

  public void setSettingraw(Boolean settingraw) {
    this.settingraw = settingraw;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ToolMobileCallExternalFunctionsRequestRequestsInner toolMobileCallExternalFunctionsRequestRequestsInner = (ToolMobileCallExternalFunctionsRequestRequestsInner) o;
    return Objects.equals(this.arguments, toolMobileCallExternalFunctionsRequestRequestsInner.arguments) &&
        Objects.equals(this.function, toolMobileCallExternalFunctionsRequestRequestsInner.function) &&
        Objects.equals(this.settingfileurl, toolMobileCallExternalFunctionsRequestRequestsInner.settingfileurl) &&
        Objects.equals(this.settingfilter, toolMobileCallExternalFunctionsRequestRequestsInner.settingfilter) &&
        Objects.equals(this.settinglang, toolMobileCallExternalFunctionsRequestRequestsInner.settinglang) &&
        Objects.equals(this.settingraw, toolMobileCallExternalFunctionsRequestRequestsInner.settingraw);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arguments, function, settingfileurl, settingfilter, settinglang, settingraw);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ToolMobileCallExternalFunctionsRequestRequestsInner {\n");
    sb.append("    arguments: ").append(toIndentedString(arguments)).append("\n");
    sb.append("    function: ").append(toIndentedString(function)).append("\n");
    sb.append("    settingfileurl: ").append(toIndentedString(settingfileurl)).append("\n");
    sb.append("    settingfilter: ").append(toIndentedString(settingfilter)).append("\n");
    sb.append("    settinglang: ").append(toIndentedString(settinglang)).append("\n");
    sb.append("    settingraw: ").append(toIndentedString(settingraw)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("arguments");
    openapiFields.add("function");
    openapiFields.add("settingfileurl");
    openapiFields.add("settingfilter");
    openapiFields.add("settinglang");
    openapiFields.add("settingraw");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ToolMobileCallExternalFunctionsRequestRequestsInner
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ToolMobileCallExternalFunctionsRequestRequestsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ToolMobileCallExternalFunctionsRequestRequestsInner is not found in the empty JSON string", ToolMobileCallExternalFunctionsRequestRequestsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ToolMobileCallExternalFunctionsRequestRequestsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ToolMobileCallExternalFunctionsRequestRequestsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("arguments") != null && !jsonObj.get("arguments").isJsonNull()) && !jsonObj.get("arguments").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `arguments` to be a primitive type in the JSON string but got `%s`", jsonObj.get("arguments").toString()));
      }
      if ((jsonObj.get("function") != null && !jsonObj.get("function").isJsonNull()) && !jsonObj.get("function").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `function` to be a primitive type in the JSON string but got `%s`", jsonObj.get("function").toString()));
      }
      if ((jsonObj.get("settinglang") != null && !jsonObj.get("settinglang").isJsonNull()) && !jsonObj.get("settinglang").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `settinglang` to be a primitive type in the JSON string but got `%s`", jsonObj.get("settinglang").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ToolMobileCallExternalFunctionsRequestRequestsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ToolMobileCallExternalFunctionsRequestRequestsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ToolMobileCallExternalFunctionsRequestRequestsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ToolMobileCallExternalFunctionsRequestRequestsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ToolMobileCallExternalFunctionsRequestRequestsInner>() {
           @Override
           public void write(JsonWriter out, ToolMobileCallExternalFunctionsRequestRequestsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ToolMobileCallExternalFunctionsRequestRequestsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ToolMobileCallExternalFunctionsRequestRequestsInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ToolMobileCallExternalFunctionsRequestRequestsInner
  * @throws IOException if the JSON string is invalid with respect to ToolMobileCallExternalFunctionsRequestRequestsInner
  */
  public static ToolMobileCallExternalFunctionsRequestRequestsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ToolMobileCallExternalFunctionsRequestRequestsInner.class);
  }

 /**
  * Convert an instance of ToolMobileCallExternalFunctionsRequestRequestsInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

