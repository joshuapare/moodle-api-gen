/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.joshuapare.JSON;

/**
 * ToolUsertoursFetchAndStartTour200ResponseTourconfigStepsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-18T14:00:07.069642-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class ToolUsertoursFetchAndStartTour200ResponseTourconfigStepsInner {
  public static final String SERIALIZED_NAME_BACKDROP = "backdrop";
  @SerializedName(SERIALIZED_NAME_BACKDROP)
  private Boolean backdrop = null;

  public static final String SERIALIZED_NAME_CONTENT = "content";
  @SerializedName(SERIALIZED_NAME_CONTENT)
  private String content = "null";

  public static final String SERIALIZED_NAME_DELAY = "delay";
  @SerializedName(SERIALIZED_NAME_DELAY)
  private Integer delay = null;

  public static final String SERIALIZED_NAME_ELEMENT = "element";
  @SerializedName(SERIALIZED_NAME_ELEMENT)
  private String element = "null";

  public static final String SERIALIZED_NAME_ORPHAN = "orphan";
  @SerializedName(SERIALIZED_NAME_ORPHAN)
  private Boolean orphan = null;

  public static final String SERIALIZED_NAME_PLACEMENT = "placement";
  @SerializedName(SERIALIZED_NAME_PLACEMENT)
  private String placement = "null";

  public static final String SERIALIZED_NAME_REFLEX = "reflex";
  @SerializedName(SERIALIZED_NAME_REFLEX)
  private Boolean reflex = null;

  public static final String SERIALIZED_NAME_STEPID = "stepid";
  @SerializedName(SERIALIZED_NAME_STEPID)
  private Integer stepid = null;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title = "null";

  public ToolUsertoursFetchAndStartTour200ResponseTourconfigStepsInner() {
  }

  public ToolUsertoursFetchAndStartTour200ResponseTourconfigStepsInner backdrop(Boolean backdrop) {
    this.backdrop = backdrop;
    return this;
  }

   /**
   * Whether a backdrop should be used
   * @return backdrop
  **/
  @javax.annotation.Nullable
  public Boolean getBackdrop() {
    return backdrop;
  }

  public void setBackdrop(Boolean backdrop) {
    this.backdrop = backdrop;
  }


  public ToolUsertoursFetchAndStartTour200ResponseTourconfigStepsInner content(String content) {
    this.content = content;
    return this;
  }

   /**
   * Step Content
   * @return content
  **/
  @javax.annotation.Nullable
  public String getContent() {
    return content;
  }

  public void setContent(String content) {
    this.content = content;
  }


  public ToolUsertoursFetchAndStartTour200ResponseTourconfigStepsInner delay(Integer delay) {
    this.delay = delay;
    return this;
  }

   /**
   * Delay before showing the step (ms)
   * @return delay
  **/
  @javax.annotation.Nullable
  public Integer getDelay() {
    return delay;
  }

  public void setDelay(Integer delay) {
    this.delay = delay;
  }


  public ToolUsertoursFetchAndStartTour200ResponseTourconfigStepsInner element(String element) {
    this.element = element;
    return this;
  }

   /**
   * Step Target
   * @return element
  **/
  @javax.annotation.Nullable
  public String getElement() {
    return element;
  }

  public void setElement(String element) {
    this.element = element;
  }


  public ToolUsertoursFetchAndStartTour200ResponseTourconfigStepsInner orphan(Boolean orphan) {
    this.orphan = orphan;
    return this;
  }

   /**
   * Whether to display the step even if it could not be found
   * @return orphan
  **/
  @javax.annotation.Nullable
  public Boolean getOrphan() {
    return orphan;
  }

  public void setOrphan(Boolean orphan) {
    this.orphan = orphan;
  }


  public ToolUsertoursFetchAndStartTour200ResponseTourconfigStepsInner placement(String placement) {
    this.placement = placement;
    return this;
  }

   /**
   * Step Placement
   * @return placement
  **/
  @javax.annotation.Nullable
  public String getPlacement() {
    return placement;
  }

  public void setPlacement(String placement) {
    this.placement = placement;
  }


  public ToolUsertoursFetchAndStartTour200ResponseTourconfigStepsInner reflex(Boolean reflex) {
    this.reflex = reflex;
    return this;
  }

   /**
   * Whether to move to the next step when the target element is clicked
   * @return reflex
  **/
  @javax.annotation.Nullable
  public Boolean getReflex() {
    return reflex;
  }

  public void setReflex(Boolean reflex) {
    this.reflex = reflex;
  }


  public ToolUsertoursFetchAndStartTour200ResponseTourconfigStepsInner stepid(Integer stepid) {
    this.stepid = stepid;
    return this;
  }

   /**
   * The actual ID of the step
   * @return stepid
  **/
  @javax.annotation.Nullable
  public Integer getStepid() {
    return stepid;
  }

  public void setStepid(Integer stepid) {
    this.stepid = stepid;
  }


  public ToolUsertoursFetchAndStartTour200ResponseTourconfigStepsInner title(String title) {
    this.title = title;
    return this;
  }

   /**
   * Step Title
   * @return title
  **/
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ToolUsertoursFetchAndStartTour200ResponseTourconfigStepsInner toolUsertoursFetchAndStartTour200ResponseTourconfigStepsInner = (ToolUsertoursFetchAndStartTour200ResponseTourconfigStepsInner) o;
    return Objects.equals(this.backdrop, toolUsertoursFetchAndStartTour200ResponseTourconfigStepsInner.backdrop) &&
        Objects.equals(this.content, toolUsertoursFetchAndStartTour200ResponseTourconfigStepsInner.content) &&
        Objects.equals(this.delay, toolUsertoursFetchAndStartTour200ResponseTourconfigStepsInner.delay) &&
        Objects.equals(this.element, toolUsertoursFetchAndStartTour200ResponseTourconfigStepsInner.element) &&
        Objects.equals(this.orphan, toolUsertoursFetchAndStartTour200ResponseTourconfigStepsInner.orphan) &&
        Objects.equals(this.placement, toolUsertoursFetchAndStartTour200ResponseTourconfigStepsInner.placement) &&
        Objects.equals(this.reflex, toolUsertoursFetchAndStartTour200ResponseTourconfigStepsInner.reflex) &&
        Objects.equals(this.stepid, toolUsertoursFetchAndStartTour200ResponseTourconfigStepsInner.stepid) &&
        Objects.equals(this.title, toolUsertoursFetchAndStartTour200ResponseTourconfigStepsInner.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backdrop, content, delay, element, orphan, placement, reflex, stepid, title);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ToolUsertoursFetchAndStartTour200ResponseTourconfigStepsInner {\n");
    sb.append("    backdrop: ").append(toIndentedString(backdrop)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    delay: ").append(toIndentedString(delay)).append("\n");
    sb.append("    element: ").append(toIndentedString(element)).append("\n");
    sb.append("    orphan: ").append(toIndentedString(orphan)).append("\n");
    sb.append("    placement: ").append(toIndentedString(placement)).append("\n");
    sb.append("    reflex: ").append(toIndentedString(reflex)).append("\n");
    sb.append("    stepid: ").append(toIndentedString(stepid)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("backdrop");
    openapiFields.add("content");
    openapiFields.add("delay");
    openapiFields.add("element");
    openapiFields.add("orphan");
    openapiFields.add("placement");
    openapiFields.add("reflex");
    openapiFields.add("stepid");
    openapiFields.add("title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ToolUsertoursFetchAndStartTour200ResponseTourconfigStepsInner
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ToolUsertoursFetchAndStartTour200ResponseTourconfigStepsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ToolUsertoursFetchAndStartTour200ResponseTourconfigStepsInner is not found in the empty JSON string", ToolUsertoursFetchAndStartTour200ResponseTourconfigStepsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ToolUsertoursFetchAndStartTour200ResponseTourconfigStepsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ToolUsertoursFetchAndStartTour200ResponseTourconfigStepsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("content") != null && !jsonObj.get("content").isJsonNull()) && !jsonObj.get("content").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `content` to be a primitive type in the JSON string but got `%s`", jsonObj.get("content").toString()));
      }
      if ((jsonObj.get("element") != null && !jsonObj.get("element").isJsonNull()) && !jsonObj.get("element").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `element` to be a primitive type in the JSON string but got `%s`", jsonObj.get("element").toString()));
      }
      if ((jsonObj.get("placement") != null && !jsonObj.get("placement").isJsonNull()) && !jsonObj.get("placement").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `placement` to be a primitive type in the JSON string but got `%s`", jsonObj.get("placement").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ToolUsertoursFetchAndStartTour200ResponseTourconfigStepsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ToolUsertoursFetchAndStartTour200ResponseTourconfigStepsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ToolUsertoursFetchAndStartTour200ResponseTourconfigStepsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ToolUsertoursFetchAndStartTour200ResponseTourconfigStepsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ToolUsertoursFetchAndStartTour200ResponseTourconfigStepsInner>() {
           @Override
           public void write(JsonWriter out, ToolUsertoursFetchAndStartTour200ResponseTourconfigStepsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ToolUsertoursFetchAndStartTour200ResponseTourconfigStepsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ToolUsertoursFetchAndStartTour200ResponseTourconfigStepsInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ToolUsertoursFetchAndStartTour200ResponseTourconfigStepsInner
  * @throws IOException if the JSON string is invalid with respect to ToolUsertoursFetchAndStartTour200ResponseTourconfigStepsInner
  */
  public static ToolUsertoursFetchAndStartTour200ResponseTourconfigStepsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ToolUsertoursFetchAndStartTour200ResponseTourconfigStepsInner.class);
  }

 /**
  * Convert an instance of ToolUsertoursFetchAndStartTour200ResponseTourconfigStepsInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

