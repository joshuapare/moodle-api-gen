/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse;
import org.openapitools.client.model.ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerCoursemodulesInner;
import org.openapitools.client.model.ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerPlansInner;
import org.openapitools.client.model.ToolLpDataForUserCompetencySummaryInCourse200ResponseUsercompetencysummary;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.joshuapare.JSON;

/**
 * ToolLpDataForUserCompetencySummaryInCourse200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-18T14:00:07.069642-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class ToolLpDataForUserCompetencySummaryInCourse200Response {
  public static final String SERIALIZED_NAME_COURSE = "course";
  @SerializedName(SERIALIZED_NAME_COURSE)
  private CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse course;

  public static final String SERIALIZED_NAME_COURSEMODULES = "coursemodules";
  @SerializedName(SERIALIZED_NAME_COURSEMODULES)
  private List<ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerCoursemodulesInner> coursemodules = new ArrayList<>();

  public static final String SERIALIZED_NAME_PLANS = "plans";
  @SerializedName(SERIALIZED_NAME_PLANS)
  private List<ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerPlansInner> plans = new ArrayList<>();

  public static final String SERIALIZED_NAME_PLUGINBASEURL = "pluginbaseurl";
  @SerializedName(SERIALIZED_NAME_PLUGINBASEURL)
  private String pluginbaseurl;

  public static final String SERIALIZED_NAME_USERCOMPETENCYSUMMARY = "usercompetencysummary";
  @SerializedName(SERIALIZED_NAME_USERCOMPETENCYSUMMARY)
  private ToolLpDataForUserCompetencySummaryInCourse200ResponseUsercompetencysummary usercompetencysummary;

  public ToolLpDataForUserCompetencySummaryInCourse200Response() {
  }

  public ToolLpDataForUserCompetencySummaryInCourse200Response course(CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse course) {
    this.course = course;
    return this;
  }

   /**
   * Get course
   * @return course
  **/
  @javax.annotation.Nonnull
  public CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse getCourse() {
    return course;
  }

  public void setCourse(CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse course) {
    this.course = course;
  }


  public ToolLpDataForUserCompetencySummaryInCourse200Response coursemodules(List<ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerCoursemodulesInner> coursemodules) {
    this.coursemodules = coursemodules;
    return this;
  }

  public ToolLpDataForUserCompetencySummaryInCourse200Response addCoursemodulesItem(ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerCoursemodulesInner coursemodulesItem) {
    if (this.coursemodules == null) {
      this.coursemodules = new ArrayList<>();
    }
    this.coursemodules.add(coursemodulesItem);
    return this;
  }

   /**
   * Get coursemodules
   * @return coursemodules
  **/
  @javax.annotation.Nonnull
  public List<ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerCoursemodulesInner> getCoursemodules() {
    return coursemodules;
  }

  public void setCoursemodules(List<ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerCoursemodulesInner> coursemodules) {
    this.coursemodules = coursemodules;
  }


  public ToolLpDataForUserCompetencySummaryInCourse200Response plans(List<ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerPlansInner> plans) {
    this.plans = plans;
    return this;
  }

  public ToolLpDataForUserCompetencySummaryInCourse200Response addPlansItem(ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerPlansInner plansItem) {
    if (this.plans == null) {
      this.plans = new ArrayList<>();
    }
    this.plans.add(plansItem);
    return this;
  }

   /**
   * Get plans
   * @return plans
  **/
  @javax.annotation.Nonnull
  public List<ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerPlansInner> getPlans() {
    return plans;
  }

  public void setPlans(List<ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerPlansInner> plans) {
    this.plans = plans;
  }


  public ToolLpDataForUserCompetencySummaryInCourse200Response pluginbaseurl(String pluginbaseurl) {
    this.pluginbaseurl = pluginbaseurl;
    return this;
  }

   /**
   * pluginbaseurl
   * @return pluginbaseurl
  **/
  @javax.annotation.Nonnull
  public String getPluginbaseurl() {
    return pluginbaseurl;
  }

  public void setPluginbaseurl(String pluginbaseurl) {
    this.pluginbaseurl = pluginbaseurl;
  }


  public ToolLpDataForUserCompetencySummaryInCourse200Response usercompetencysummary(ToolLpDataForUserCompetencySummaryInCourse200ResponseUsercompetencysummary usercompetencysummary) {
    this.usercompetencysummary = usercompetencysummary;
    return this;
  }

   /**
   * Get usercompetencysummary
   * @return usercompetencysummary
  **/
  @javax.annotation.Nonnull
  public ToolLpDataForUserCompetencySummaryInCourse200ResponseUsercompetencysummary getUsercompetencysummary() {
    return usercompetencysummary;
  }

  public void setUsercompetencysummary(ToolLpDataForUserCompetencySummaryInCourse200ResponseUsercompetencysummary usercompetencysummary) {
    this.usercompetencysummary = usercompetencysummary;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ToolLpDataForUserCompetencySummaryInCourse200Response toolLpDataForUserCompetencySummaryInCourse200Response = (ToolLpDataForUserCompetencySummaryInCourse200Response) o;
    return Objects.equals(this.course, toolLpDataForUserCompetencySummaryInCourse200Response.course) &&
        Objects.equals(this.coursemodules, toolLpDataForUserCompetencySummaryInCourse200Response.coursemodules) &&
        Objects.equals(this.plans, toolLpDataForUserCompetencySummaryInCourse200Response.plans) &&
        Objects.equals(this.pluginbaseurl, toolLpDataForUserCompetencySummaryInCourse200Response.pluginbaseurl) &&
        Objects.equals(this.usercompetencysummary, toolLpDataForUserCompetencySummaryInCourse200Response.usercompetencysummary);
  }

  @Override
  public int hashCode() {
    return Objects.hash(course, coursemodules, plans, pluginbaseurl, usercompetencysummary);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ToolLpDataForUserCompetencySummaryInCourse200Response {\n");
    sb.append("    course: ").append(toIndentedString(course)).append("\n");
    sb.append("    coursemodules: ").append(toIndentedString(coursemodules)).append("\n");
    sb.append("    plans: ").append(toIndentedString(plans)).append("\n");
    sb.append("    pluginbaseurl: ").append(toIndentedString(pluginbaseurl)).append("\n");
    sb.append("    usercompetencysummary: ").append(toIndentedString(usercompetencysummary)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("course");
    openapiFields.add("coursemodules");
    openapiFields.add("plans");
    openapiFields.add("pluginbaseurl");
    openapiFields.add("usercompetencysummary");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("course");
    openapiRequiredFields.add("coursemodules");
    openapiRequiredFields.add("plans");
    openapiRequiredFields.add("pluginbaseurl");
    openapiRequiredFields.add("usercompetencysummary");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ToolLpDataForUserCompetencySummaryInCourse200Response
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ToolLpDataForUserCompetencySummaryInCourse200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ToolLpDataForUserCompetencySummaryInCourse200Response is not found in the empty JSON string", ToolLpDataForUserCompetencySummaryInCourse200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ToolLpDataForUserCompetencySummaryInCourse200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ToolLpDataForUserCompetencySummaryInCourse200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ToolLpDataForUserCompetencySummaryInCourse200Response.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `course`
      CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse.validateJsonElement(jsonObj.get("course"));
      // ensure the json data is an array
      if (!jsonObj.get("coursemodules").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `coursemodules` to be an array in the JSON string but got `%s`", jsonObj.get("coursemodules").toString()));
      }

      JsonArray jsonArraycoursemodules = jsonObj.getAsJsonArray("coursemodules");
      // validate the required field `coursemodules` (array)
      for (int i = 0; i < jsonArraycoursemodules.size(); i++) {
        ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerCoursemodulesInner.validateJsonElement(jsonArraycoursemodules.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("plans").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `plans` to be an array in the JSON string but got `%s`", jsonObj.get("plans").toString()));
      }

      JsonArray jsonArrayplans = jsonObj.getAsJsonArray("plans");
      // validate the required field `plans` (array)
      for (int i = 0; i < jsonArrayplans.size(); i++) {
        ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerPlansInner.validateJsonElement(jsonArrayplans.get(i));
      };
      if (!jsonObj.get("pluginbaseurl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pluginbaseurl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pluginbaseurl").toString()));
      }
      // validate the required field `usercompetencysummary`
      ToolLpDataForUserCompetencySummaryInCourse200ResponseUsercompetencysummary.validateJsonElement(jsonObj.get("usercompetencysummary"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ToolLpDataForUserCompetencySummaryInCourse200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ToolLpDataForUserCompetencySummaryInCourse200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ToolLpDataForUserCompetencySummaryInCourse200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ToolLpDataForUserCompetencySummaryInCourse200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<ToolLpDataForUserCompetencySummaryInCourse200Response>() {
           @Override
           public void write(JsonWriter out, ToolLpDataForUserCompetencySummaryInCourse200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ToolLpDataForUserCompetencySummaryInCourse200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ToolLpDataForUserCompetencySummaryInCourse200Response given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ToolLpDataForUserCompetencySummaryInCourse200Response
  * @throws IOException if the JSON string is invalid with respect to ToolLpDataForUserCompetencySummaryInCourse200Response
  */
  public static ToolLpDataForUserCompetencySummaryInCourse200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ToolLpDataForUserCompetencySummaryInCourse200Response.class);
  }

 /**
  * Convert an instance of ToolLpDataForUserCompetencySummaryInCourse200Response to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

