/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.joshuapare.JSON;

/**
 * ModAssignListParticipantsRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-18T14:00:07.069642-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class ModAssignListParticipantsRequest {
  public static final String SERIALIZED_NAME_ASSIGNID = "assignid";
  @SerializedName(SERIALIZED_NAME_ASSIGNID)
  private Integer assignid;

  public static final String SERIALIZED_NAME_FILTER = "filter";
  @SerializedName(SERIALIZED_NAME_FILTER)
  private String filter = "null";

  public static final String SERIALIZED_NAME_GROUPID = "groupid";
  @SerializedName(SERIALIZED_NAME_GROUPID)
  private Integer groupid;

  public static final String SERIALIZED_NAME_INCLUDEENROLMENTS = "includeenrolments";
  @SerializedName(SERIALIZED_NAME_INCLUDEENROLMENTS)
  private Boolean includeenrolments = true;

  public static final String SERIALIZED_NAME_LIMIT = "limit";
  @SerializedName(SERIALIZED_NAME_LIMIT)
  private Integer limit = 0;

  public static final String SERIALIZED_NAME_ONLYIDS = "onlyids";
  @SerializedName(SERIALIZED_NAME_ONLYIDS)
  private Boolean onlyids = false;

  public static final String SERIALIZED_NAME_SKIP = "skip";
  @SerializedName(SERIALIZED_NAME_SKIP)
  private Integer skip = 0;

  public static final String SERIALIZED_NAME_TABLESORT = "tablesort";
  @SerializedName(SERIALIZED_NAME_TABLESORT)
  private Boolean tablesort = false;

  public ModAssignListParticipantsRequest() {
  }

  public ModAssignListParticipantsRequest assignid(Integer assignid) {
    this.assignid = assignid;
    return this;
  }

   /**
   * assign instance id
   * @return assignid
  **/
  @javax.annotation.Nonnull
  public Integer getAssignid() {
    return assignid;
  }

  public void setAssignid(Integer assignid) {
    this.assignid = assignid;
  }


  public ModAssignListParticipantsRequest filter(String filter) {
    this.filter = filter;
    return this;
  }

   /**
   * search string to filter the results
   * @return filter
  **/
  @javax.annotation.Nonnull
  public String getFilter() {
    return filter;
  }

  public void setFilter(String filter) {
    this.filter = filter;
  }


  public ModAssignListParticipantsRequest groupid(Integer groupid) {
    this.groupid = groupid;
    return this;
  }

   /**
   * group id
   * @return groupid
  **/
  @javax.annotation.Nonnull
  public Integer getGroupid() {
    return groupid;
  }

  public void setGroupid(Integer groupid) {
    this.groupid = groupid;
  }


  public ModAssignListParticipantsRequest includeenrolments(Boolean includeenrolments) {
    this.includeenrolments = includeenrolments;
    return this;
  }

   /**
   * Do return courses where the user is enrolled
   * @return includeenrolments
  **/
  @javax.annotation.Nullable
  public Boolean getIncludeenrolments() {
    return includeenrolments;
  }

  public void setIncludeenrolments(Boolean includeenrolments) {
    this.includeenrolments = includeenrolments;
  }


  public ModAssignListParticipantsRequest limit(Integer limit) {
    this.limit = limit;
    return this;
  }

   /**
   * maximum number of records to return
   * @return limit
  **/
  @javax.annotation.Nullable
  public Integer getLimit() {
    return limit;
  }

  public void setLimit(Integer limit) {
    this.limit = limit;
  }


  public ModAssignListParticipantsRequest onlyids(Boolean onlyids) {
    this.onlyids = onlyids;
    return this;
  }

   /**
   * Do not return all user fields
   * @return onlyids
  **/
  @javax.annotation.Nullable
  public Boolean getOnlyids() {
    return onlyids;
  }

  public void setOnlyids(Boolean onlyids) {
    this.onlyids = onlyids;
  }


  public ModAssignListParticipantsRequest skip(Integer skip) {
    this.skip = skip;
    return this;
  }

   /**
   * number of records to skip
   * @return skip
  **/
  @javax.annotation.Nullable
  public Integer getSkip() {
    return skip;
  }

  public void setSkip(Integer skip) {
    this.skip = skip;
  }


  public ModAssignListParticipantsRequest tablesort(Boolean tablesort) {
    this.tablesort = tablesort;
    return this;
  }

   /**
   * Apply current user table sorting preferences.
   * @return tablesort
  **/
  @javax.annotation.Nullable
  public Boolean getTablesort() {
    return tablesort;
  }

  public void setTablesort(Boolean tablesort) {
    this.tablesort = tablesort;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModAssignListParticipantsRequest modAssignListParticipantsRequest = (ModAssignListParticipantsRequest) o;
    return Objects.equals(this.assignid, modAssignListParticipantsRequest.assignid) &&
        Objects.equals(this.filter, modAssignListParticipantsRequest.filter) &&
        Objects.equals(this.groupid, modAssignListParticipantsRequest.groupid) &&
        Objects.equals(this.includeenrolments, modAssignListParticipantsRequest.includeenrolments) &&
        Objects.equals(this.limit, modAssignListParticipantsRequest.limit) &&
        Objects.equals(this.onlyids, modAssignListParticipantsRequest.onlyids) &&
        Objects.equals(this.skip, modAssignListParticipantsRequest.skip) &&
        Objects.equals(this.tablesort, modAssignListParticipantsRequest.tablesort);
  }

  @Override
  public int hashCode() {
    return Objects.hash(assignid, filter, groupid, includeenrolments, limit, onlyids, skip, tablesort);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModAssignListParticipantsRequest {\n");
    sb.append("    assignid: ").append(toIndentedString(assignid)).append("\n");
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("    groupid: ").append(toIndentedString(groupid)).append("\n");
    sb.append("    includeenrolments: ").append(toIndentedString(includeenrolments)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    onlyids: ").append(toIndentedString(onlyids)).append("\n");
    sb.append("    skip: ").append(toIndentedString(skip)).append("\n");
    sb.append("    tablesort: ").append(toIndentedString(tablesort)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("assignid");
    openapiFields.add("filter");
    openapiFields.add("groupid");
    openapiFields.add("includeenrolments");
    openapiFields.add("limit");
    openapiFields.add("onlyids");
    openapiFields.add("skip");
    openapiFields.add("tablesort");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("assignid");
    openapiRequiredFields.add("filter");
    openapiRequiredFields.add("groupid");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ModAssignListParticipantsRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ModAssignListParticipantsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModAssignListParticipantsRequest is not found in the empty JSON string", ModAssignListParticipantsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ModAssignListParticipantsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModAssignListParticipantsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ModAssignListParticipantsRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("filter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filter").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModAssignListParticipantsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModAssignListParticipantsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModAssignListParticipantsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModAssignListParticipantsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ModAssignListParticipantsRequest>() {
           @Override
           public void write(JsonWriter out, ModAssignListParticipantsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModAssignListParticipantsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ModAssignListParticipantsRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ModAssignListParticipantsRequest
  * @throws IOException if the JSON string is invalid with respect to ModAssignListParticipantsRequest
  */
  public static ModAssignListParticipantsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModAssignListParticipantsRequest.class);
  }

 /**
  * Convert an instance of ModAssignListParticipantsRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

