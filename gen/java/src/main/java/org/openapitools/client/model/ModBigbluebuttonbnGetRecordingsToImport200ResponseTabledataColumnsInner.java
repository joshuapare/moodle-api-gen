/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.joshuapare.JSON;

/**
 * ModBigbluebuttonbnGetRecordingsToImport200ResponseTabledataColumnsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-18T20:58:28.689161-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class ModBigbluebuttonbnGetRecordingsToImport200ResponseTabledataColumnsInner {
  public static final String SERIALIZED_NAME_ALLOW_H_T_M_L = "allowHTML";
  @SerializedName(SERIALIZED_NAME_ALLOW_H_T_M_L)
  private Boolean allowHTML = false;

  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  private String key;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_SORTABLE = "sortable";
  @SerializedName(SERIALIZED_NAME_SORTABLE)
  private Boolean sortable = false;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_WIDTH = "width";
  @SerializedName(SERIALIZED_NAME_WIDTH)
  private String width;

  public ModBigbluebuttonbnGetRecordingsToImport200ResponseTabledataColumnsInner() {
  }

  public ModBigbluebuttonbnGetRecordingsToImport200ResponseTabledataColumnsInner allowHTML(Boolean allowHTML) {
    this.allowHTML = allowHTML;
    return this;
  }

   /**
   * Whether this column contains HTML
   * @return allowHTML
  **/
  @javax.annotation.Nullable
  public Boolean getAllowHTML() {
    return allowHTML;
  }

  public void setAllowHTML(Boolean allowHTML) {
    this.allowHTML = allowHTML;
  }


  public ModBigbluebuttonbnGetRecordingsToImport200ResponseTabledataColumnsInner key(String key) {
    this.key = key;
    return this;
  }

   /**
   * Get key
   * @return key
  **/
  @javax.annotation.Nullable
  public String getKey() {
    return key;
  }

  public void setKey(String key) {
    this.key = key;
  }


  public ModBigbluebuttonbnGetRecordingsToImport200ResponseTabledataColumnsInner label(String label) {
    this.label = label;
    return this;
  }

   /**
   * Get label
   * @return label
  **/
  @javax.annotation.Nullable
  public String getLabel() {
    return label;
  }

  public void setLabel(String label) {
    this.label = label;
  }


  public ModBigbluebuttonbnGetRecordingsToImport200ResponseTabledataColumnsInner sortable(Boolean sortable) {
    this.sortable = sortable;
    return this;
  }

   /**
   * Whether this column is sortable
   * @return sortable
  **/
  @javax.annotation.Nullable
  public Boolean getSortable() {
    return sortable;
  }

  public void setSortable(Boolean sortable) {
    this.sortable = sortable;
  }


  public ModBigbluebuttonbnGetRecordingsToImport200ResponseTabledataColumnsInner type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Column type
   * @return type
  **/
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public ModBigbluebuttonbnGetRecordingsToImport200ResponseTabledataColumnsInner width(String width) {
    this.width = width;
    return this;
  }

   /**
   * Get width
   * @return width
  **/
  @javax.annotation.Nullable
  public String getWidth() {
    return width;
  }

  public void setWidth(String width) {
    this.width = width;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModBigbluebuttonbnGetRecordingsToImport200ResponseTabledataColumnsInner modBigbluebuttonbnGetRecordingsToImport200ResponseTabledataColumnsInner = (ModBigbluebuttonbnGetRecordingsToImport200ResponseTabledataColumnsInner) o;
    return Objects.equals(this.allowHTML, modBigbluebuttonbnGetRecordingsToImport200ResponseTabledataColumnsInner.allowHTML) &&
        Objects.equals(this.key, modBigbluebuttonbnGetRecordingsToImport200ResponseTabledataColumnsInner.key) &&
        Objects.equals(this.label, modBigbluebuttonbnGetRecordingsToImport200ResponseTabledataColumnsInner.label) &&
        Objects.equals(this.sortable, modBigbluebuttonbnGetRecordingsToImport200ResponseTabledataColumnsInner.sortable) &&
        Objects.equals(this.type, modBigbluebuttonbnGetRecordingsToImport200ResponseTabledataColumnsInner.type) &&
        Objects.equals(this.width, modBigbluebuttonbnGetRecordingsToImport200ResponseTabledataColumnsInner.width);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowHTML, key, label, sortable, type, width);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModBigbluebuttonbnGetRecordingsToImport200ResponseTabledataColumnsInner {\n");
    sb.append("    allowHTML: ").append(toIndentedString(allowHTML)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    sortable: ").append(toIndentedString(sortable)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowHTML");
    openapiFields.add("key");
    openapiFields.add("label");
    openapiFields.add("sortable");
    openapiFields.add("type");
    openapiFields.add("width");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ModBigbluebuttonbnGetRecordingsToImport200ResponseTabledataColumnsInner
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ModBigbluebuttonbnGetRecordingsToImport200ResponseTabledataColumnsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModBigbluebuttonbnGetRecordingsToImport200ResponseTabledataColumnsInner is not found in the empty JSON string", ModBigbluebuttonbnGetRecordingsToImport200ResponseTabledataColumnsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ModBigbluebuttonbnGetRecordingsToImport200ResponseTabledataColumnsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModBigbluebuttonbnGetRecordingsToImport200ResponseTabledataColumnsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("key") != null && !jsonObj.get("key").isJsonNull()) && !jsonObj.get("key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("key").toString()));
      }
      if ((jsonObj.get("label") != null && !jsonObj.get("label").isJsonNull()) && !jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("width") != null && !jsonObj.get("width").isJsonNull()) && !jsonObj.get("width").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `width` to be a primitive type in the JSON string but got `%s`", jsonObj.get("width").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModBigbluebuttonbnGetRecordingsToImport200ResponseTabledataColumnsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModBigbluebuttonbnGetRecordingsToImport200ResponseTabledataColumnsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModBigbluebuttonbnGetRecordingsToImport200ResponseTabledataColumnsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModBigbluebuttonbnGetRecordingsToImport200ResponseTabledataColumnsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ModBigbluebuttonbnGetRecordingsToImport200ResponseTabledataColumnsInner>() {
           @Override
           public void write(JsonWriter out, ModBigbluebuttonbnGetRecordingsToImport200ResponseTabledataColumnsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModBigbluebuttonbnGetRecordingsToImport200ResponseTabledataColumnsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ModBigbluebuttonbnGetRecordingsToImport200ResponseTabledataColumnsInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ModBigbluebuttonbnGetRecordingsToImport200ResponseTabledataColumnsInner
  * @throws IOException if the JSON string is invalid with respect to ModBigbluebuttonbnGetRecordingsToImport200ResponseTabledataColumnsInner
  */
  public static ModBigbluebuttonbnGetRecordingsToImport200ResponseTabledataColumnsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModBigbluebuttonbnGetRecordingsToImport200ResponseTabledataColumnsInner.class);
  }

 /**
  * Convert an instance of ModBigbluebuttonbnGetRecordingsToImport200ResponseTabledataColumnsInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

