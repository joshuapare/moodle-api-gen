/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CoreGradesGetGradableUsers200ResponseUsersInnerCustomfieldsInner;
import org.openapitools.client.model.CoreGradesGetGradableUsers200ResponseUsersInnerPreferencesInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.joshuapare.JSON;

/**
 * ModAssignGetParticipant200ResponseUser
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-18T14:00:07.069642-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class ModAssignGetParticipant200ResponseUser {
  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private String address;

  public static final String SERIALIZED_NAME_AUTH = "auth";
  @SerializedName(SERIALIZED_NAME_AUTH)
  private String auth;

  public static final String SERIALIZED_NAME_CALENDARTYPE = "calendartype";
  @SerializedName(SERIALIZED_NAME_CALENDARTYPE)
  private String calendartype;

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_CONFIRMED = "confirmed";
  @SerializedName(SERIALIZED_NAME_CONFIRMED)
  private Boolean confirmed;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_CUSTOMFIELDS = "customfields";
  @SerializedName(SERIALIZED_NAME_CUSTOMFIELDS)
  private List<CoreGradesGetGradableUsers200ResponseUsersInnerCustomfieldsInner> customfields = new ArrayList<>();

  public static final String SERIALIZED_NAME_DEPARTMENT = "department";
  @SerializedName(SERIALIZED_NAME_DEPARTMENT)
  private String department;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DESCRIPTIONFORMAT = "descriptionformat";
  @SerializedName(SERIALIZED_NAME_DESCRIPTIONFORMAT)
  private Integer descriptionformat;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_FIRSTACCESS = "firstaccess";
  @SerializedName(SERIALIZED_NAME_FIRSTACCESS)
  private Integer firstaccess;

  public static final String SERIALIZED_NAME_FIRSTNAME = "firstname";
  @SerializedName(SERIALIZED_NAME_FIRSTNAME)
  private String firstname;

  public static final String SERIALIZED_NAME_FULLNAME = "fullname";
  @SerializedName(SERIALIZED_NAME_FULLNAME)
  private String fullname;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_IDNUMBER = "idnumber";
  @SerializedName(SERIALIZED_NAME_IDNUMBER)
  private String idnumber;

  public static final String SERIALIZED_NAME_INSTITUTION = "institution";
  @SerializedName(SERIALIZED_NAME_INSTITUTION)
  private String institution;

  public static final String SERIALIZED_NAME_INTERESTS = "interests";
  @SerializedName(SERIALIZED_NAME_INTERESTS)
  private String interests;

  public static final String SERIALIZED_NAME_LANG = "lang";
  @SerializedName(SERIALIZED_NAME_LANG)
  private String lang;

  public static final String SERIALIZED_NAME_LASTACCESS = "lastaccess";
  @SerializedName(SERIALIZED_NAME_LASTACCESS)
  private Integer lastaccess;

  public static final String SERIALIZED_NAME_LASTNAME = "lastname";
  @SerializedName(SERIALIZED_NAME_LASTNAME)
  private String lastname;

  public static final String SERIALIZED_NAME_MAILFORMAT = "mailformat";
  @SerializedName(SERIALIZED_NAME_MAILFORMAT)
  private Integer mailformat;

  public static final String SERIALIZED_NAME_PHONE1 = "phone1";
  @SerializedName(SERIALIZED_NAME_PHONE1)
  private String phone1;

  public static final String SERIALIZED_NAME_PHONE2 = "phone2";
  @SerializedName(SERIALIZED_NAME_PHONE2)
  private String phone2;

  public static final String SERIALIZED_NAME_PREFERENCES = "preferences";
  @SerializedName(SERIALIZED_NAME_PREFERENCES)
  private List<CoreGradesGetGradableUsers200ResponseUsersInnerPreferencesInner> preferences = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROFILEIMAGEURL = "profileimageurl";
  @SerializedName(SERIALIZED_NAME_PROFILEIMAGEURL)
  private String profileimageurl;

  public static final String SERIALIZED_NAME_PROFILEIMAGEURLSMALL = "profileimageurlsmall";
  @SerializedName(SERIALIZED_NAME_PROFILEIMAGEURLSMALL)
  private String profileimageurlsmall;

  public static final String SERIALIZED_NAME_SUSPENDED = "suspended";
  @SerializedName(SERIALIZED_NAME_SUSPENDED)
  private Boolean suspended;

  public static final String SERIALIZED_NAME_THEME = "theme";
  @SerializedName(SERIALIZED_NAME_THEME)
  private String theme;

  public static final String SERIALIZED_NAME_TIMEZONE = "timezone";
  @SerializedName(SERIALIZED_NAME_TIMEZONE)
  private String timezone;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public ModAssignGetParticipant200ResponseUser() {
  }

  public ModAssignGetParticipant200ResponseUser address(String address) {
    this.address = address;
    return this;
  }

   /**
   * Postal address
   * @return address
  **/
  @javax.annotation.Nullable
  public String getAddress() {
    return address;
  }

  public void setAddress(String address) {
    this.address = address;
  }


  public ModAssignGetParticipant200ResponseUser auth(String auth) {
    this.auth = auth;
    return this;
  }

   /**
   * Auth plugins include manual, ldap, etc
   * @return auth
  **/
  @javax.annotation.Nullable
  public String getAuth() {
    return auth;
  }

  public void setAuth(String auth) {
    this.auth = auth;
  }


  public ModAssignGetParticipant200ResponseUser calendartype(String calendartype) {
    this.calendartype = calendartype;
    return this;
  }

   /**
   * Calendar type such as \&quot;gregorian\&quot;, must exist on server
   * @return calendartype
  **/
  @javax.annotation.Nullable
  public String getCalendartype() {
    return calendartype;
  }

  public void setCalendartype(String calendartype) {
    this.calendartype = calendartype;
  }


  public ModAssignGetParticipant200ResponseUser city(String city) {
    this.city = city;
    return this;
  }

   /**
   * Home city of the user
   * @return city
  **/
  @javax.annotation.Nullable
  public String getCity() {
    return city;
  }

  public void setCity(String city) {
    this.city = city;
  }


  public ModAssignGetParticipant200ResponseUser confirmed(Boolean confirmed) {
    this.confirmed = confirmed;
    return this;
  }

   /**
   * Active user: 1 if confirmed, 0 otherwise
   * @return confirmed
  **/
  @javax.annotation.Nullable
  public Boolean getConfirmed() {
    return confirmed;
  }

  public void setConfirmed(Boolean confirmed) {
    this.confirmed = confirmed;
  }


  public ModAssignGetParticipant200ResponseUser country(String country) {
    this.country = country;
    return this;
  }

   /**
   * Home country code of the user, such as AU or CZ
   * @return country
  **/
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public ModAssignGetParticipant200ResponseUser customfields(List<CoreGradesGetGradableUsers200ResponseUsersInnerCustomfieldsInner> customfields) {
    this.customfields = customfields;
    return this;
  }

  public ModAssignGetParticipant200ResponseUser addCustomfieldsItem(CoreGradesGetGradableUsers200ResponseUsersInnerCustomfieldsInner customfieldsItem) {
    if (this.customfields == null) {
      this.customfields = new ArrayList<>();
    }
    this.customfields.add(customfieldsItem);
    return this;
  }

   /**
   * Get customfields
   * @return customfields
  **/
  @javax.annotation.Nullable
  public List<CoreGradesGetGradableUsers200ResponseUsersInnerCustomfieldsInner> getCustomfields() {
    return customfields;
  }

  public void setCustomfields(List<CoreGradesGetGradableUsers200ResponseUsersInnerCustomfieldsInner> customfields) {
    this.customfields = customfields;
  }


  public ModAssignGetParticipant200ResponseUser department(String department) {
    this.department = department;
    return this;
  }

   /**
   * department
   * @return department
  **/
  @javax.annotation.Nullable
  public String getDepartment() {
    return department;
  }

  public void setDepartment(String department) {
    this.department = department;
  }


  public ModAssignGetParticipant200ResponseUser description(String description) {
    this.description = description;
    return this;
  }

   /**
   * User profile description
   * @return description
  **/
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ModAssignGetParticipant200ResponseUser descriptionformat(Integer descriptionformat) {
    this.descriptionformat = descriptionformat;
    return this;
  }

   /**
   * int format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)
   * @return descriptionformat
  **/
  @javax.annotation.Nullable
  public Integer getDescriptionformat() {
    return descriptionformat;
  }

  public void setDescriptionformat(Integer descriptionformat) {
    this.descriptionformat = descriptionformat;
  }


  public ModAssignGetParticipant200ResponseUser email(String email) {
    this.email = email;
    return this;
  }

   /**
   * An email address - allow email as root@localhost
   * @return email
  **/
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public ModAssignGetParticipant200ResponseUser firstaccess(Integer firstaccess) {
    this.firstaccess = firstaccess;
    return this;
  }

   /**
   * first access to the site (0 if never)
   * @return firstaccess
  **/
  @javax.annotation.Nullable
  public Integer getFirstaccess() {
    return firstaccess;
  }

  public void setFirstaccess(Integer firstaccess) {
    this.firstaccess = firstaccess;
  }


  public ModAssignGetParticipant200ResponseUser firstname(String firstname) {
    this.firstname = firstname;
    return this;
  }

   /**
   * The first name(s) of the user
   * @return firstname
  **/
  @javax.annotation.Nullable
  public String getFirstname() {
    return firstname;
  }

  public void setFirstname(String firstname) {
    this.firstname = firstname;
  }


  public ModAssignGetParticipant200ResponseUser fullname(String fullname) {
    this.fullname = fullname;
    return this;
  }

   /**
   * The fullname of the user
   * @return fullname
  **/
  @javax.annotation.Nonnull
  public String getFullname() {
    return fullname;
  }

  public void setFullname(String fullname) {
    this.fullname = fullname;
  }


  public ModAssignGetParticipant200ResponseUser id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * ID of the user
   * @return id
  **/
  @javax.annotation.Nonnull
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public ModAssignGetParticipant200ResponseUser idnumber(String idnumber) {
    this.idnumber = idnumber;
    return this;
  }

   /**
   * An arbitrary ID code number perhaps from the institution
   * @return idnumber
  **/
  @javax.annotation.Nullable
  public String getIdnumber() {
    return idnumber;
  }

  public void setIdnumber(String idnumber) {
    this.idnumber = idnumber;
  }


  public ModAssignGetParticipant200ResponseUser institution(String institution) {
    this.institution = institution;
    return this;
  }

   /**
   * institution
   * @return institution
  **/
  @javax.annotation.Nullable
  public String getInstitution() {
    return institution;
  }

  public void setInstitution(String institution) {
    this.institution = institution;
  }


  public ModAssignGetParticipant200ResponseUser interests(String interests) {
    this.interests = interests;
    return this;
  }

   /**
   * user interests (separated by commas)
   * @return interests
  **/
  @javax.annotation.Nullable
  public String getInterests() {
    return interests;
  }

  public void setInterests(String interests) {
    this.interests = interests;
  }


  public ModAssignGetParticipant200ResponseUser lang(String lang) {
    this.lang = lang;
    return this;
  }

   /**
   * Language code such as \&quot;en\&quot;, must exist on server
   * @return lang
  **/
  @javax.annotation.Nullable
  public String getLang() {
    return lang;
  }

  public void setLang(String lang) {
    this.lang = lang;
  }


  public ModAssignGetParticipant200ResponseUser lastaccess(Integer lastaccess) {
    this.lastaccess = lastaccess;
    return this;
  }

   /**
   * last access to the site (0 if never)
   * @return lastaccess
  **/
  @javax.annotation.Nullable
  public Integer getLastaccess() {
    return lastaccess;
  }

  public void setLastaccess(Integer lastaccess) {
    this.lastaccess = lastaccess;
  }


  public ModAssignGetParticipant200ResponseUser lastname(String lastname) {
    this.lastname = lastname;
    return this;
  }

   /**
   * The family name of the user
   * @return lastname
  **/
  @javax.annotation.Nullable
  public String getLastname() {
    return lastname;
  }

  public void setLastname(String lastname) {
    this.lastname = lastname;
  }


  public ModAssignGetParticipant200ResponseUser mailformat(Integer mailformat) {
    this.mailformat = mailformat;
    return this;
  }

   /**
   * Mail format code is 0 for plain text, 1 for HTML etc
   * @return mailformat
  **/
  @javax.annotation.Nullable
  public Integer getMailformat() {
    return mailformat;
  }

  public void setMailformat(Integer mailformat) {
    this.mailformat = mailformat;
  }


  public ModAssignGetParticipant200ResponseUser phone1(String phone1) {
    this.phone1 = phone1;
    return this;
  }

   /**
   * Phone 1
   * @return phone1
  **/
  @javax.annotation.Nullable
  public String getPhone1() {
    return phone1;
  }

  public void setPhone1(String phone1) {
    this.phone1 = phone1;
  }


  public ModAssignGetParticipant200ResponseUser phone2(String phone2) {
    this.phone2 = phone2;
    return this;
  }

   /**
   * Phone 2
   * @return phone2
  **/
  @javax.annotation.Nullable
  public String getPhone2() {
    return phone2;
  }

  public void setPhone2(String phone2) {
    this.phone2 = phone2;
  }


  public ModAssignGetParticipant200ResponseUser preferences(List<CoreGradesGetGradableUsers200ResponseUsersInnerPreferencesInner> preferences) {
    this.preferences = preferences;
    return this;
  }

  public ModAssignGetParticipant200ResponseUser addPreferencesItem(CoreGradesGetGradableUsers200ResponseUsersInnerPreferencesInner preferencesItem) {
    if (this.preferences == null) {
      this.preferences = new ArrayList<>();
    }
    this.preferences.add(preferencesItem);
    return this;
  }

   /**
   * Get preferences
   * @return preferences
  **/
  @javax.annotation.Nullable
  public List<CoreGradesGetGradableUsers200ResponseUsersInnerPreferencesInner> getPreferences() {
    return preferences;
  }

  public void setPreferences(List<CoreGradesGetGradableUsers200ResponseUsersInnerPreferencesInner> preferences) {
    this.preferences = preferences;
  }


  public ModAssignGetParticipant200ResponseUser profileimageurl(String profileimageurl) {
    this.profileimageurl = profileimageurl;
    return this;
  }

   /**
   * User image profile URL - big version
   * @return profileimageurl
  **/
  @javax.annotation.Nonnull
  public String getProfileimageurl() {
    return profileimageurl;
  }

  public void setProfileimageurl(String profileimageurl) {
    this.profileimageurl = profileimageurl;
  }


  public ModAssignGetParticipant200ResponseUser profileimageurlsmall(String profileimageurlsmall) {
    this.profileimageurlsmall = profileimageurlsmall;
    return this;
  }

   /**
   * User image profile URL - small version
   * @return profileimageurlsmall
  **/
  @javax.annotation.Nonnull
  public String getProfileimageurlsmall() {
    return profileimageurlsmall;
  }

  public void setProfileimageurlsmall(String profileimageurlsmall) {
    this.profileimageurlsmall = profileimageurlsmall;
  }


  public ModAssignGetParticipant200ResponseUser suspended(Boolean suspended) {
    this.suspended = suspended;
    return this;
  }

   /**
   * Suspend user account, either false to enable user login or true to disable it
   * @return suspended
  **/
  @javax.annotation.Nullable
  public Boolean getSuspended() {
    return suspended;
  }

  public void setSuspended(Boolean suspended) {
    this.suspended = suspended;
  }


  public ModAssignGetParticipant200ResponseUser theme(String theme) {
    this.theme = theme;
    return this;
  }

   /**
   * Theme name such as \&quot;standard\&quot;, must exist on server
   * @return theme
  **/
  @javax.annotation.Nullable
  public String getTheme() {
    return theme;
  }

  public void setTheme(String theme) {
    this.theme = theme;
  }


  public ModAssignGetParticipant200ResponseUser timezone(String timezone) {
    this.timezone = timezone;
    return this;
  }

   /**
   * Timezone code such as Australia/Perth, or 99 for default
   * @return timezone
  **/
  @javax.annotation.Nullable
  public String getTimezone() {
    return timezone;
  }

  public void setTimezone(String timezone) {
    this.timezone = timezone;
  }


  public ModAssignGetParticipant200ResponseUser username(String username) {
    this.username = username;
    return this;
  }

   /**
   * The username
   * @return username
  **/
  @javax.annotation.Nullable
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModAssignGetParticipant200ResponseUser modAssignGetParticipant200ResponseUser = (ModAssignGetParticipant200ResponseUser) o;
    return Objects.equals(this.address, modAssignGetParticipant200ResponseUser.address) &&
        Objects.equals(this.auth, modAssignGetParticipant200ResponseUser.auth) &&
        Objects.equals(this.calendartype, modAssignGetParticipant200ResponseUser.calendartype) &&
        Objects.equals(this.city, modAssignGetParticipant200ResponseUser.city) &&
        Objects.equals(this.confirmed, modAssignGetParticipant200ResponseUser.confirmed) &&
        Objects.equals(this.country, modAssignGetParticipant200ResponseUser.country) &&
        Objects.equals(this.customfields, modAssignGetParticipant200ResponseUser.customfields) &&
        Objects.equals(this.department, modAssignGetParticipant200ResponseUser.department) &&
        Objects.equals(this.description, modAssignGetParticipant200ResponseUser.description) &&
        Objects.equals(this.descriptionformat, modAssignGetParticipant200ResponseUser.descriptionformat) &&
        Objects.equals(this.email, modAssignGetParticipant200ResponseUser.email) &&
        Objects.equals(this.firstaccess, modAssignGetParticipant200ResponseUser.firstaccess) &&
        Objects.equals(this.firstname, modAssignGetParticipant200ResponseUser.firstname) &&
        Objects.equals(this.fullname, modAssignGetParticipant200ResponseUser.fullname) &&
        Objects.equals(this.id, modAssignGetParticipant200ResponseUser.id) &&
        Objects.equals(this.idnumber, modAssignGetParticipant200ResponseUser.idnumber) &&
        Objects.equals(this.institution, modAssignGetParticipant200ResponseUser.institution) &&
        Objects.equals(this.interests, modAssignGetParticipant200ResponseUser.interests) &&
        Objects.equals(this.lang, modAssignGetParticipant200ResponseUser.lang) &&
        Objects.equals(this.lastaccess, modAssignGetParticipant200ResponseUser.lastaccess) &&
        Objects.equals(this.lastname, modAssignGetParticipant200ResponseUser.lastname) &&
        Objects.equals(this.mailformat, modAssignGetParticipant200ResponseUser.mailformat) &&
        Objects.equals(this.phone1, modAssignGetParticipant200ResponseUser.phone1) &&
        Objects.equals(this.phone2, modAssignGetParticipant200ResponseUser.phone2) &&
        Objects.equals(this.preferences, modAssignGetParticipant200ResponseUser.preferences) &&
        Objects.equals(this.profileimageurl, modAssignGetParticipant200ResponseUser.profileimageurl) &&
        Objects.equals(this.profileimageurlsmall, modAssignGetParticipant200ResponseUser.profileimageurlsmall) &&
        Objects.equals(this.suspended, modAssignGetParticipant200ResponseUser.suspended) &&
        Objects.equals(this.theme, modAssignGetParticipant200ResponseUser.theme) &&
        Objects.equals(this.timezone, modAssignGetParticipant200ResponseUser.timezone) &&
        Objects.equals(this.username, modAssignGetParticipant200ResponseUser.username);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, auth, calendartype, city, confirmed, country, customfields, department, description, descriptionformat, email, firstaccess, firstname, fullname, id, idnumber, institution, interests, lang, lastaccess, lastname, mailformat, phone1, phone2, preferences, profileimageurl, profileimageurlsmall, suspended, theme, timezone, username);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModAssignGetParticipant200ResponseUser {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    auth: ").append(toIndentedString(auth)).append("\n");
    sb.append("    calendartype: ").append(toIndentedString(calendartype)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    confirmed: ").append(toIndentedString(confirmed)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    customfields: ").append(toIndentedString(customfields)).append("\n");
    sb.append("    department: ").append(toIndentedString(department)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    descriptionformat: ").append(toIndentedString(descriptionformat)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    firstaccess: ").append(toIndentedString(firstaccess)).append("\n");
    sb.append("    firstname: ").append(toIndentedString(firstname)).append("\n");
    sb.append("    fullname: ").append(toIndentedString(fullname)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    idnumber: ").append(toIndentedString(idnumber)).append("\n");
    sb.append("    institution: ").append(toIndentedString(institution)).append("\n");
    sb.append("    interests: ").append(toIndentedString(interests)).append("\n");
    sb.append("    lang: ").append(toIndentedString(lang)).append("\n");
    sb.append("    lastaccess: ").append(toIndentedString(lastaccess)).append("\n");
    sb.append("    lastname: ").append(toIndentedString(lastname)).append("\n");
    sb.append("    mailformat: ").append(toIndentedString(mailformat)).append("\n");
    sb.append("    phone1: ").append(toIndentedString(phone1)).append("\n");
    sb.append("    phone2: ").append(toIndentedString(phone2)).append("\n");
    sb.append("    preferences: ").append(toIndentedString(preferences)).append("\n");
    sb.append("    profileimageurl: ").append(toIndentedString(profileimageurl)).append("\n");
    sb.append("    profileimageurlsmall: ").append(toIndentedString(profileimageurlsmall)).append("\n");
    sb.append("    suspended: ").append(toIndentedString(suspended)).append("\n");
    sb.append("    theme: ").append(toIndentedString(theme)).append("\n");
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address");
    openapiFields.add("auth");
    openapiFields.add("calendartype");
    openapiFields.add("city");
    openapiFields.add("confirmed");
    openapiFields.add("country");
    openapiFields.add("customfields");
    openapiFields.add("department");
    openapiFields.add("description");
    openapiFields.add("descriptionformat");
    openapiFields.add("email");
    openapiFields.add("firstaccess");
    openapiFields.add("firstname");
    openapiFields.add("fullname");
    openapiFields.add("id");
    openapiFields.add("idnumber");
    openapiFields.add("institution");
    openapiFields.add("interests");
    openapiFields.add("lang");
    openapiFields.add("lastaccess");
    openapiFields.add("lastname");
    openapiFields.add("mailformat");
    openapiFields.add("phone1");
    openapiFields.add("phone2");
    openapiFields.add("preferences");
    openapiFields.add("profileimageurl");
    openapiFields.add("profileimageurlsmall");
    openapiFields.add("suspended");
    openapiFields.add("theme");
    openapiFields.add("timezone");
    openapiFields.add("username");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("fullname");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("profileimageurl");
    openapiRequiredFields.add("profileimageurlsmall");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ModAssignGetParticipant200ResponseUser
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ModAssignGetParticipant200ResponseUser.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModAssignGetParticipant200ResponseUser is not found in the empty JSON string", ModAssignGetParticipant200ResponseUser.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ModAssignGetParticipant200ResponseUser.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModAssignGetParticipant200ResponseUser` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ModAssignGetParticipant200ResponseUser.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) && !jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      if ((jsonObj.get("auth") != null && !jsonObj.get("auth").isJsonNull()) && !jsonObj.get("auth").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `auth` to be a primitive type in the JSON string but got `%s`", jsonObj.get("auth").toString()));
      }
      if ((jsonObj.get("calendartype") != null && !jsonObj.get("calendartype").isJsonNull()) && !jsonObj.get("calendartype").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `calendartype` to be a primitive type in the JSON string but got `%s`", jsonObj.get("calendartype").toString()));
      }
      if ((jsonObj.get("city") != null && !jsonObj.get("city").isJsonNull()) && !jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if (jsonObj.get("customfields") != null && !jsonObj.get("customfields").isJsonNull()) {
        JsonArray jsonArraycustomfields = jsonObj.getAsJsonArray("customfields");
        if (jsonArraycustomfields != null) {
          // ensure the json data is an array
          if (!jsonObj.get("customfields").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `customfields` to be an array in the JSON string but got `%s`", jsonObj.get("customfields").toString()));
          }

          // validate the optional field `customfields` (array)
          for (int i = 0; i < jsonArraycustomfields.size(); i++) {
            CoreGradesGetGradableUsers200ResponseUsersInnerCustomfieldsInner.validateJsonElement(jsonArraycustomfields.get(i));
          };
        }
      }
      if ((jsonObj.get("department") != null && !jsonObj.get("department").isJsonNull()) && !jsonObj.get("department").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `department` to be a primitive type in the JSON string but got `%s`", jsonObj.get("department").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("firstname") != null && !jsonObj.get("firstname").isJsonNull()) && !jsonObj.get("firstname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstname").toString()));
      }
      if (!jsonObj.get("fullname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fullname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fullname").toString()));
      }
      if ((jsonObj.get("idnumber") != null && !jsonObj.get("idnumber").isJsonNull()) && !jsonObj.get("idnumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `idnumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("idnumber").toString()));
      }
      if ((jsonObj.get("institution") != null && !jsonObj.get("institution").isJsonNull()) && !jsonObj.get("institution").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `institution` to be a primitive type in the JSON string but got `%s`", jsonObj.get("institution").toString()));
      }
      if ((jsonObj.get("interests") != null && !jsonObj.get("interests").isJsonNull()) && !jsonObj.get("interests").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `interests` to be a primitive type in the JSON string but got `%s`", jsonObj.get("interests").toString()));
      }
      if ((jsonObj.get("lang") != null && !jsonObj.get("lang").isJsonNull()) && !jsonObj.get("lang").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lang` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lang").toString()));
      }
      if ((jsonObj.get("lastname") != null && !jsonObj.get("lastname").isJsonNull()) && !jsonObj.get("lastname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastname").toString()));
      }
      if ((jsonObj.get("phone1") != null && !jsonObj.get("phone1").isJsonNull()) && !jsonObj.get("phone1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phone1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phone1").toString()));
      }
      if ((jsonObj.get("phone2") != null && !jsonObj.get("phone2").isJsonNull()) && !jsonObj.get("phone2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phone2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phone2").toString()));
      }
      if (jsonObj.get("preferences") != null && !jsonObj.get("preferences").isJsonNull()) {
        JsonArray jsonArraypreferences = jsonObj.getAsJsonArray("preferences");
        if (jsonArraypreferences != null) {
          // ensure the json data is an array
          if (!jsonObj.get("preferences").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `preferences` to be an array in the JSON string but got `%s`", jsonObj.get("preferences").toString()));
          }

          // validate the optional field `preferences` (array)
          for (int i = 0; i < jsonArraypreferences.size(); i++) {
            CoreGradesGetGradableUsers200ResponseUsersInnerPreferencesInner.validateJsonElement(jsonArraypreferences.get(i));
          };
        }
      }
      if (!jsonObj.get("profileimageurl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `profileimageurl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("profileimageurl").toString()));
      }
      if (!jsonObj.get("profileimageurlsmall").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `profileimageurlsmall` to be a primitive type in the JSON string but got `%s`", jsonObj.get("profileimageurlsmall").toString()));
      }
      if ((jsonObj.get("theme") != null && !jsonObj.get("theme").isJsonNull()) && !jsonObj.get("theme").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `theme` to be a primitive type in the JSON string but got `%s`", jsonObj.get("theme").toString()));
      }
      if ((jsonObj.get("timezone") != null && !jsonObj.get("timezone").isJsonNull()) && !jsonObj.get("timezone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timezone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timezone").toString()));
      }
      if ((jsonObj.get("username") != null && !jsonObj.get("username").isJsonNull()) && !jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModAssignGetParticipant200ResponseUser.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModAssignGetParticipant200ResponseUser' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModAssignGetParticipant200ResponseUser> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModAssignGetParticipant200ResponseUser.class));

       return (TypeAdapter<T>) new TypeAdapter<ModAssignGetParticipant200ResponseUser>() {
           @Override
           public void write(JsonWriter out, ModAssignGetParticipant200ResponseUser value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModAssignGetParticipant200ResponseUser read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ModAssignGetParticipant200ResponseUser given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ModAssignGetParticipant200ResponseUser
  * @throws IOException if the JSON string is invalid with respect to ModAssignGetParticipant200ResponseUser
  */
  public static ModAssignGetParticipant200ResponseUser fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModAssignGetParticipant200ResponseUser.class);
  }

 /**
  * Convert an instance of ModAssignGetParticipant200ResponseUser to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

