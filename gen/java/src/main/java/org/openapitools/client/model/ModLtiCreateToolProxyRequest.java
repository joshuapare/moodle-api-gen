/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.joshuapare.JSON;

/**
 * ModLtiCreateToolProxyRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-18T14:00:07.069642-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class ModLtiCreateToolProxyRequest {
  public static final String SERIALIZED_NAME_CAPABILITYOFFERED = "capabilityoffered";
  @SerializedName(SERIALIZED_NAME_CAPABILITYOFFERED)
  private List<Object> capabilityoffered = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name = "";

  public static final String SERIALIZED_NAME_REGURL = "regurl";
  @SerializedName(SERIALIZED_NAME_REGURL)
  private String regurl = "null";

  public static final String SERIALIZED_NAME_SERVICEOFFERED = "serviceoffered";
  @SerializedName(SERIALIZED_NAME_SERVICEOFFERED)
  private List<Object> serviceoffered = new ArrayList<>();

  public ModLtiCreateToolProxyRequest() {
  }

  public ModLtiCreateToolProxyRequest capabilityoffered(List<Object> capabilityoffered) {
    this.capabilityoffered = capabilityoffered;
    return this;
  }

  public ModLtiCreateToolProxyRequest addCapabilityofferedItem(Object capabilityofferedItem) {
    if (this.capabilityoffered == null) {
      this.capabilityoffered = new ArrayList<>();
    }
    this.capabilityoffered.add(capabilityofferedItem);
    return this;
  }

   /**
   * Get capabilityoffered
   * @return capabilityoffered
  **/
  @javax.annotation.Nullable
  public List<Object> getCapabilityoffered() {
    return capabilityoffered;
  }

  public void setCapabilityoffered(List<Object> capabilityoffered) {
    this.capabilityoffered = capabilityoffered;
  }


  public ModLtiCreateToolProxyRequest name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Tool proxy name
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ModLtiCreateToolProxyRequest regurl(String regurl) {
    this.regurl = regurl;
    return this;
  }

   /**
   * Tool proxy registration URL
   * @return regurl
  **/
  @javax.annotation.Nonnull
  public String getRegurl() {
    return regurl;
  }

  public void setRegurl(String regurl) {
    this.regurl = regurl;
  }


  public ModLtiCreateToolProxyRequest serviceoffered(List<Object> serviceoffered) {
    this.serviceoffered = serviceoffered;
    return this;
  }

  public ModLtiCreateToolProxyRequest addServiceofferedItem(Object serviceofferedItem) {
    if (this.serviceoffered == null) {
      this.serviceoffered = new ArrayList<>();
    }
    this.serviceoffered.add(serviceofferedItem);
    return this;
  }

   /**
   * Get serviceoffered
   * @return serviceoffered
  **/
  @javax.annotation.Nullable
  public List<Object> getServiceoffered() {
    return serviceoffered;
  }

  public void setServiceoffered(List<Object> serviceoffered) {
    this.serviceoffered = serviceoffered;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModLtiCreateToolProxyRequest modLtiCreateToolProxyRequest = (ModLtiCreateToolProxyRequest) o;
    return Objects.equals(this.capabilityoffered, modLtiCreateToolProxyRequest.capabilityoffered) &&
        Objects.equals(this.name, modLtiCreateToolProxyRequest.name) &&
        Objects.equals(this.regurl, modLtiCreateToolProxyRequest.regurl) &&
        Objects.equals(this.serviceoffered, modLtiCreateToolProxyRequest.serviceoffered);
  }

  @Override
  public int hashCode() {
    return Objects.hash(capabilityoffered, name, regurl, serviceoffered);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModLtiCreateToolProxyRequest {\n");
    sb.append("    capabilityoffered: ").append(toIndentedString(capabilityoffered)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    regurl: ").append(toIndentedString(regurl)).append("\n");
    sb.append("    serviceoffered: ").append(toIndentedString(serviceoffered)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("capabilityoffered");
    openapiFields.add("name");
    openapiFields.add("regurl");
    openapiFields.add("serviceoffered");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("regurl");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ModLtiCreateToolProxyRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ModLtiCreateToolProxyRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModLtiCreateToolProxyRequest is not found in the empty JSON string", ModLtiCreateToolProxyRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ModLtiCreateToolProxyRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModLtiCreateToolProxyRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ModLtiCreateToolProxyRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("capabilityoffered") != null && !jsonObj.get("capabilityoffered").isJsonNull() && !jsonObj.get("capabilityoffered").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `capabilityoffered` to be an array in the JSON string but got `%s`", jsonObj.get("capabilityoffered").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("regurl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `regurl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("regurl").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("serviceoffered") != null && !jsonObj.get("serviceoffered").isJsonNull() && !jsonObj.get("serviceoffered").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceoffered` to be an array in the JSON string but got `%s`", jsonObj.get("serviceoffered").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModLtiCreateToolProxyRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModLtiCreateToolProxyRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModLtiCreateToolProxyRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModLtiCreateToolProxyRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ModLtiCreateToolProxyRequest>() {
           @Override
           public void write(JsonWriter out, ModLtiCreateToolProxyRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModLtiCreateToolProxyRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ModLtiCreateToolProxyRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ModLtiCreateToolProxyRequest
  * @throws IOException if the JSON string is invalid with respect to ModLtiCreateToolProxyRequest
  */
  public static ModLtiCreateToolProxyRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModLtiCreateToolProxyRequest.class);
  }

 /**
  * Convert an instance of ModLtiCreateToolProxyRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

