/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CoreMessageGetConversationBetweenUsers200ResponseMembersInner;
import org.openapitools.client.model.CoreMessageGetConversationBetweenUsers200ResponseMessagesInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.joshuapare.JSON;

/**
 * CoreMessageGetConversationBetweenUsers200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-18T20:58:28.689161-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class CoreMessageGetConversationBetweenUsers200Response {
  public static final String SERIALIZED_NAME_CANDELETEMESSAGESFORALLUSERS = "candeletemessagesforallusers";
  @SerializedName(SERIALIZED_NAME_CANDELETEMESSAGESFORALLUSERS)
  private Boolean candeletemessagesforallusers = false;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_IMAGEURL = "imageurl";
  @SerializedName(SERIALIZED_NAME_IMAGEURL)
  private String imageurl;

  public static final String SERIALIZED_NAME_ISFAVOURITE = "isfavourite";
  @SerializedName(SERIALIZED_NAME_ISFAVOURITE)
  private Boolean isfavourite;

  public static final String SERIALIZED_NAME_ISMUTED = "ismuted";
  @SerializedName(SERIALIZED_NAME_ISMUTED)
  private Boolean ismuted;

  public static final String SERIALIZED_NAME_ISREAD = "isread";
  @SerializedName(SERIALIZED_NAME_ISREAD)
  private Boolean isread;

  public static final String SERIALIZED_NAME_MEMBERCOUNT = "membercount";
  @SerializedName(SERIALIZED_NAME_MEMBERCOUNT)
  private Integer membercount;

  public static final String SERIALIZED_NAME_MEMBERS = "members";
  @SerializedName(SERIALIZED_NAME_MEMBERS)
  private List<CoreMessageGetConversationBetweenUsers200ResponseMembersInner> members = new ArrayList<>();

  public static final String SERIALIZED_NAME_MESSAGES = "messages";
  @SerializedName(SERIALIZED_NAME_MESSAGES)
  private List<CoreMessageGetConversationBetweenUsers200ResponseMessagesInner> messages = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SUBNAME = "subname";
  @SerializedName(SERIALIZED_NAME_SUBNAME)
  private String subname;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private Integer type;

  public static final String SERIALIZED_NAME_UNREADCOUNT = "unreadcount";
  @SerializedName(SERIALIZED_NAME_UNREADCOUNT)
  private Integer unreadcount;

  public CoreMessageGetConversationBetweenUsers200Response() {
  }

  public CoreMessageGetConversationBetweenUsers200Response candeletemessagesforallusers(Boolean candeletemessagesforallusers) {
    this.candeletemessagesforallusers = candeletemessagesforallusers;
    return this;
  }

   /**
   * If the user can delete messages in the conversation for all users
   * @return candeletemessagesforallusers
  **/
  @javax.annotation.Nullable
  public Boolean getCandeletemessagesforallusers() {
    return candeletemessagesforallusers;
  }

  public void setCandeletemessagesforallusers(Boolean candeletemessagesforallusers) {
    this.candeletemessagesforallusers = candeletemessagesforallusers;
  }


  public CoreMessageGetConversationBetweenUsers200Response id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * The conversation id
   * @return id
  **/
  @javax.annotation.Nonnull
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public CoreMessageGetConversationBetweenUsers200Response imageurl(String imageurl) {
    this.imageurl = imageurl;
    return this;
  }

   /**
   * A link to the conversation picture, if set
   * @return imageurl
  **/
  @javax.annotation.Nullable
  public String getImageurl() {
    return imageurl;
  }

  public void setImageurl(String imageurl) {
    this.imageurl = imageurl;
  }


  public CoreMessageGetConversationBetweenUsers200Response isfavourite(Boolean isfavourite) {
    this.isfavourite = isfavourite;
    return this;
  }

   /**
   * If the user marked this conversation as a favourite
   * @return isfavourite
  **/
  @javax.annotation.Nonnull
  public Boolean getIsfavourite() {
    return isfavourite;
  }

  public void setIsfavourite(Boolean isfavourite) {
    this.isfavourite = isfavourite;
  }


  public CoreMessageGetConversationBetweenUsers200Response ismuted(Boolean ismuted) {
    this.ismuted = ismuted;
    return this;
  }

   /**
   * If the user muted this conversation
   * @return ismuted
  **/
  @javax.annotation.Nonnull
  public Boolean getIsmuted() {
    return ismuted;
  }

  public void setIsmuted(Boolean ismuted) {
    this.ismuted = ismuted;
  }


  public CoreMessageGetConversationBetweenUsers200Response isread(Boolean isread) {
    this.isread = isread;
    return this;
  }

   /**
   * If the user has read all messages in the conversation
   * @return isread
  **/
  @javax.annotation.Nonnull
  public Boolean getIsread() {
    return isread;
  }

  public void setIsread(Boolean isread) {
    this.isread = isread;
  }


  public CoreMessageGetConversationBetweenUsers200Response membercount(Integer membercount) {
    this.membercount = membercount;
    return this;
  }

   /**
   * Total number of conversation members
   * @return membercount
  **/
  @javax.annotation.Nonnull
  public Integer getMembercount() {
    return membercount;
  }

  public void setMembercount(Integer membercount) {
    this.membercount = membercount;
  }


  public CoreMessageGetConversationBetweenUsers200Response members(List<CoreMessageGetConversationBetweenUsers200ResponseMembersInner> members) {
    this.members = members;
    return this;
  }

  public CoreMessageGetConversationBetweenUsers200Response addMembersItem(CoreMessageGetConversationBetweenUsers200ResponseMembersInner membersItem) {
    if (this.members == null) {
      this.members = new ArrayList<>();
    }
    this.members.add(membersItem);
    return this;
  }

   /**
   * Get members
   * @return members
  **/
  @javax.annotation.Nonnull
  public List<CoreMessageGetConversationBetweenUsers200ResponseMembersInner> getMembers() {
    return members;
  }

  public void setMembers(List<CoreMessageGetConversationBetweenUsers200ResponseMembersInner> members) {
    this.members = members;
  }


  public CoreMessageGetConversationBetweenUsers200Response messages(List<CoreMessageGetConversationBetweenUsers200ResponseMessagesInner> messages) {
    this.messages = messages;
    return this;
  }

  public CoreMessageGetConversationBetweenUsers200Response addMessagesItem(CoreMessageGetConversationBetweenUsers200ResponseMessagesInner messagesItem) {
    if (this.messages == null) {
      this.messages = new ArrayList<>();
    }
    this.messages.add(messagesItem);
    return this;
  }

   /**
   * Get messages
   * @return messages
  **/
  @javax.annotation.Nonnull
  public List<CoreMessageGetConversationBetweenUsers200ResponseMessagesInner> getMessages() {
    return messages;
  }

  public void setMessages(List<CoreMessageGetConversationBetweenUsers200ResponseMessagesInner> messages) {
    this.messages = messages;
  }


  public CoreMessageGetConversationBetweenUsers200Response name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The conversation name, if set
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CoreMessageGetConversationBetweenUsers200Response subname(String subname) {
    this.subname = subname;
    return this;
  }

   /**
   * A subtitle for the conversation name, if set
   * @return subname
  **/
  @javax.annotation.Nullable
  public String getSubname() {
    return subname;
  }

  public void setSubname(String subname) {
    this.subname = subname;
  }


  public CoreMessageGetConversationBetweenUsers200Response type(Integer type) {
    this.type = type;
    return this;
  }

   /**
   * The type of the conversation (1&#x3D;individual,2&#x3D;group,3&#x3D;self)
   * @return type
  **/
  @javax.annotation.Nonnull
  public Integer getType() {
    return type;
  }

  public void setType(Integer type) {
    this.type = type;
  }


  public CoreMessageGetConversationBetweenUsers200Response unreadcount(Integer unreadcount) {
    this.unreadcount = unreadcount;
    return this;
  }

   /**
   * The number of unread messages in this conversation
   * @return unreadcount
  **/
  @javax.annotation.Nullable
  public Integer getUnreadcount() {
    return unreadcount;
  }

  public void setUnreadcount(Integer unreadcount) {
    this.unreadcount = unreadcount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CoreMessageGetConversationBetweenUsers200Response coreMessageGetConversationBetweenUsers200Response = (CoreMessageGetConversationBetweenUsers200Response) o;
    return Objects.equals(this.candeletemessagesforallusers, coreMessageGetConversationBetweenUsers200Response.candeletemessagesforallusers) &&
        Objects.equals(this.id, coreMessageGetConversationBetweenUsers200Response.id) &&
        Objects.equals(this.imageurl, coreMessageGetConversationBetweenUsers200Response.imageurl) &&
        Objects.equals(this.isfavourite, coreMessageGetConversationBetweenUsers200Response.isfavourite) &&
        Objects.equals(this.ismuted, coreMessageGetConversationBetweenUsers200Response.ismuted) &&
        Objects.equals(this.isread, coreMessageGetConversationBetweenUsers200Response.isread) &&
        Objects.equals(this.membercount, coreMessageGetConversationBetweenUsers200Response.membercount) &&
        Objects.equals(this.members, coreMessageGetConversationBetweenUsers200Response.members) &&
        Objects.equals(this.messages, coreMessageGetConversationBetweenUsers200Response.messages) &&
        Objects.equals(this.name, coreMessageGetConversationBetweenUsers200Response.name) &&
        Objects.equals(this.subname, coreMessageGetConversationBetweenUsers200Response.subname) &&
        Objects.equals(this.type, coreMessageGetConversationBetweenUsers200Response.type) &&
        Objects.equals(this.unreadcount, coreMessageGetConversationBetweenUsers200Response.unreadcount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(candeletemessagesforallusers, id, imageurl, isfavourite, ismuted, isread, membercount, members, messages, name, subname, type, unreadcount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CoreMessageGetConversationBetweenUsers200Response {\n");
    sb.append("    candeletemessagesforallusers: ").append(toIndentedString(candeletemessagesforallusers)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    imageurl: ").append(toIndentedString(imageurl)).append("\n");
    sb.append("    isfavourite: ").append(toIndentedString(isfavourite)).append("\n");
    sb.append("    ismuted: ").append(toIndentedString(ismuted)).append("\n");
    sb.append("    isread: ").append(toIndentedString(isread)).append("\n");
    sb.append("    membercount: ").append(toIndentedString(membercount)).append("\n");
    sb.append("    members: ").append(toIndentedString(members)).append("\n");
    sb.append("    messages: ").append(toIndentedString(messages)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    subname: ").append(toIndentedString(subname)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    unreadcount: ").append(toIndentedString(unreadcount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("candeletemessagesforallusers");
    openapiFields.add("id");
    openapiFields.add("imageurl");
    openapiFields.add("isfavourite");
    openapiFields.add("ismuted");
    openapiFields.add("isread");
    openapiFields.add("membercount");
    openapiFields.add("members");
    openapiFields.add("messages");
    openapiFields.add("name");
    openapiFields.add("subname");
    openapiFields.add("type");
    openapiFields.add("unreadcount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("isfavourite");
    openapiRequiredFields.add("ismuted");
    openapiRequiredFields.add("isread");
    openapiRequiredFields.add("membercount");
    openapiRequiredFields.add("members");
    openapiRequiredFields.add("messages");
    openapiRequiredFields.add("type");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CoreMessageGetConversationBetweenUsers200Response
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CoreMessageGetConversationBetweenUsers200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CoreMessageGetConversationBetweenUsers200Response is not found in the empty JSON string", CoreMessageGetConversationBetweenUsers200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CoreMessageGetConversationBetweenUsers200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CoreMessageGetConversationBetweenUsers200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CoreMessageGetConversationBetweenUsers200Response.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("imageurl") != null && !jsonObj.get("imageurl").isJsonNull()) && !jsonObj.get("imageurl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imageurl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imageurl").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("members").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `members` to be an array in the JSON string but got `%s`", jsonObj.get("members").toString()));
      }

      JsonArray jsonArraymembers = jsonObj.getAsJsonArray("members");
      // validate the required field `members` (array)
      for (int i = 0; i < jsonArraymembers.size(); i++) {
        CoreMessageGetConversationBetweenUsers200ResponseMembersInner.validateJsonElement(jsonArraymembers.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("messages").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `messages` to be an array in the JSON string but got `%s`", jsonObj.get("messages").toString()));
      }

      JsonArray jsonArraymessages = jsonObj.getAsJsonArray("messages");
      // validate the required field `messages` (array)
      for (int i = 0; i < jsonArraymessages.size(); i++) {
        CoreMessageGetConversationBetweenUsers200ResponseMessagesInner.validateJsonElement(jsonArraymessages.get(i));
      };
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("subname") != null && !jsonObj.get("subname").isJsonNull()) && !jsonObj.get("subname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subname").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CoreMessageGetConversationBetweenUsers200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CoreMessageGetConversationBetweenUsers200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CoreMessageGetConversationBetweenUsers200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CoreMessageGetConversationBetweenUsers200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<CoreMessageGetConversationBetweenUsers200Response>() {
           @Override
           public void write(JsonWriter out, CoreMessageGetConversationBetweenUsers200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CoreMessageGetConversationBetweenUsers200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CoreMessageGetConversationBetweenUsers200Response given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CoreMessageGetConversationBetweenUsers200Response
  * @throws IOException if the JSON string is invalid with respect to CoreMessageGetConversationBetweenUsers200Response
  */
  public static CoreMessageGetConversationBetweenUsers200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CoreMessageGetConversationBetweenUsers200Response.class);
  }

 /**
  * Convert an instance of CoreMessageGetConversationBetweenUsers200Response to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

