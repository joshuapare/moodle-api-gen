/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.joshuapare.JSON;

/**
 * CoreCalendarGetCalendarMonthlyView200ResponseWeeksInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-18T14:00:07.069642-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class CoreCalendarGetCalendarMonthlyView200ResponseWeeksInner {
  public static final String SERIALIZED_NAME_DAYS = "days";
  @SerializedName(SERIALIZED_NAME_DAYS)
  private List<CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner> days = new ArrayList<>();

  public static final String SERIALIZED_NAME_POSTPADDING = "postpadding";
  @SerializedName(SERIALIZED_NAME_POSTPADDING)
  private List<Object> postpadding = new ArrayList<>();

  public static final String SERIALIZED_NAME_PREPADDING = "prepadding";
  @SerializedName(SERIALIZED_NAME_PREPADDING)
  private List<Object> prepadding = new ArrayList<>();

  public CoreCalendarGetCalendarMonthlyView200ResponseWeeksInner() {
  }

  public CoreCalendarGetCalendarMonthlyView200ResponseWeeksInner days(List<CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner> days) {
    this.days = days;
    return this;
  }

  public CoreCalendarGetCalendarMonthlyView200ResponseWeeksInner addDaysItem(CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner daysItem) {
    if (this.days == null) {
      this.days = new ArrayList<>();
    }
    this.days.add(daysItem);
    return this;
  }

   /**
   * Get days
   * @return days
  **/
  @javax.annotation.Nullable
  public List<CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner> getDays() {
    return days;
  }

  public void setDays(List<CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner> days) {
    this.days = days;
  }


  public CoreCalendarGetCalendarMonthlyView200ResponseWeeksInner postpadding(List<Object> postpadding) {
    this.postpadding = postpadding;
    return this;
  }

  public CoreCalendarGetCalendarMonthlyView200ResponseWeeksInner addPostpaddingItem(Object postpaddingItem) {
    if (this.postpadding == null) {
      this.postpadding = new ArrayList<>();
    }
    this.postpadding.add(postpaddingItem);
    return this;
  }

   /**
   * Get postpadding
   * @return postpadding
  **/
  @javax.annotation.Nullable
  public List<Object> getPostpadding() {
    return postpadding;
  }

  public void setPostpadding(List<Object> postpadding) {
    this.postpadding = postpadding;
  }


  public CoreCalendarGetCalendarMonthlyView200ResponseWeeksInner prepadding(List<Object> prepadding) {
    this.prepadding = prepadding;
    return this;
  }

  public CoreCalendarGetCalendarMonthlyView200ResponseWeeksInner addPrepaddingItem(Object prepaddingItem) {
    if (this.prepadding == null) {
      this.prepadding = new ArrayList<>();
    }
    this.prepadding.add(prepaddingItem);
    return this;
  }

   /**
   * Get prepadding
   * @return prepadding
  **/
  @javax.annotation.Nullable
  public List<Object> getPrepadding() {
    return prepadding;
  }

  public void setPrepadding(List<Object> prepadding) {
    this.prepadding = prepadding;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CoreCalendarGetCalendarMonthlyView200ResponseWeeksInner coreCalendarGetCalendarMonthlyView200ResponseWeeksInner = (CoreCalendarGetCalendarMonthlyView200ResponseWeeksInner) o;
    return Objects.equals(this.days, coreCalendarGetCalendarMonthlyView200ResponseWeeksInner.days) &&
        Objects.equals(this.postpadding, coreCalendarGetCalendarMonthlyView200ResponseWeeksInner.postpadding) &&
        Objects.equals(this.prepadding, coreCalendarGetCalendarMonthlyView200ResponseWeeksInner.prepadding);
  }

  @Override
  public int hashCode() {
    return Objects.hash(days, postpadding, prepadding);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CoreCalendarGetCalendarMonthlyView200ResponseWeeksInner {\n");
    sb.append("    days: ").append(toIndentedString(days)).append("\n");
    sb.append("    postpadding: ").append(toIndentedString(postpadding)).append("\n");
    sb.append("    prepadding: ").append(toIndentedString(prepadding)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("days");
    openapiFields.add("postpadding");
    openapiFields.add("prepadding");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CoreCalendarGetCalendarMonthlyView200ResponseWeeksInner
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CoreCalendarGetCalendarMonthlyView200ResponseWeeksInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CoreCalendarGetCalendarMonthlyView200ResponseWeeksInner is not found in the empty JSON string", CoreCalendarGetCalendarMonthlyView200ResponseWeeksInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CoreCalendarGetCalendarMonthlyView200ResponseWeeksInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CoreCalendarGetCalendarMonthlyView200ResponseWeeksInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("days") != null && !jsonObj.get("days").isJsonNull()) {
        JsonArray jsonArraydays = jsonObj.getAsJsonArray("days");
        if (jsonArraydays != null) {
          // ensure the json data is an array
          if (!jsonObj.get("days").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `days` to be an array in the JSON string but got `%s`", jsonObj.get("days").toString()));
          }

          // validate the optional field `days` (array)
          for (int i = 0; i < jsonArraydays.size(); i++) {
            CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner.validateJsonElement(jsonArraydays.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("postpadding") != null && !jsonObj.get("postpadding").isJsonNull() && !jsonObj.get("postpadding").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `postpadding` to be an array in the JSON string but got `%s`", jsonObj.get("postpadding").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("prepadding") != null && !jsonObj.get("prepadding").isJsonNull() && !jsonObj.get("prepadding").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `prepadding` to be an array in the JSON string but got `%s`", jsonObj.get("prepadding").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CoreCalendarGetCalendarMonthlyView200ResponseWeeksInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CoreCalendarGetCalendarMonthlyView200ResponseWeeksInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CoreCalendarGetCalendarMonthlyView200ResponseWeeksInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CoreCalendarGetCalendarMonthlyView200ResponseWeeksInner.class));

       return (TypeAdapter<T>) new TypeAdapter<CoreCalendarGetCalendarMonthlyView200ResponseWeeksInner>() {
           @Override
           public void write(JsonWriter out, CoreCalendarGetCalendarMonthlyView200ResponseWeeksInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CoreCalendarGetCalendarMonthlyView200ResponseWeeksInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CoreCalendarGetCalendarMonthlyView200ResponseWeeksInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CoreCalendarGetCalendarMonthlyView200ResponseWeeksInner
  * @throws IOException if the JSON string is invalid with respect to CoreCalendarGetCalendarMonthlyView200ResponseWeeksInner
  */
  public static CoreCalendarGetCalendarMonthlyView200ResponseWeeksInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CoreCalendarGetCalendarMonthlyView200ResponseWeeksInner.class);
  }

 /**
  * Convert an instance of CoreCalendarGetCalendarMonthlyView200ResponseWeeksInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

