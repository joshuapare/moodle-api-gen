/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.joshuapare.JSON;

/**
 * ToolMobileGetPluginsSupportingMobile200ResponsePluginsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-18T14:00:07.069642-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class ToolMobileGetPluginsSupportingMobile200ResponsePluginsInner {
  public static final String SERIALIZED_NAME_ADDON = "addon";
  @SerializedName(SERIALIZED_NAME_ADDON)
  private String addon = "null";

  public static final String SERIALIZED_NAME_COMPONENT = "component";
  @SerializedName(SERIALIZED_NAME_COMPONENT)
  private String component = "null";

  public static final String SERIALIZED_NAME_DEPENDENCIES = "dependencies";
  @SerializedName(SERIALIZED_NAME_DEPENDENCIES)
  private List<Object> dependencies = new ArrayList<>();

  public static final String SERIALIZED_NAME_FILEHASH = "filehash";
  @SerializedName(SERIALIZED_NAME_FILEHASH)
  private String filehash = "null";

  public static final String SERIALIZED_NAME_FILESIZE = "filesize";
  @SerializedName(SERIALIZED_NAME_FILESIZE)
  private Integer filesize = null;

  public static final String SERIALIZED_NAME_FILEURL = "fileurl";
  @SerializedName(SERIALIZED_NAME_FILEURL)
  private String fileurl = "null";

  public static final String SERIALIZED_NAME_HANDLERS = "handlers";
  @SerializedName(SERIALIZED_NAME_HANDLERS)
  private String handlers = "null";

  public static final String SERIALIZED_NAME_LANG = "lang";
  @SerializedName(SERIALIZED_NAME_LANG)
  private String lang = "null";

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version = "null";

  public ToolMobileGetPluginsSupportingMobile200ResponsePluginsInner() {
  }

  public ToolMobileGetPluginsSupportingMobile200ResponsePluginsInner addon(String addon) {
    this.addon = addon;
    return this;
  }

   /**
   * The Mobile addon (package) name.
   * @return addon
  **/
  @javax.annotation.Nullable
  public String getAddon() {
    return addon;
  }

  public void setAddon(String addon) {
    this.addon = addon;
  }


  public ToolMobileGetPluginsSupportingMobile200ResponsePluginsInner component(String component) {
    this.component = component;
    return this;
  }

   /**
   * The plugin component name.
   * @return component
  **/
  @javax.annotation.Nullable
  public String getComponent() {
    return component;
  }

  public void setComponent(String component) {
    this.component = component;
  }


  public ToolMobileGetPluginsSupportingMobile200ResponsePluginsInner dependencies(List<Object> dependencies) {
    this.dependencies = dependencies;
    return this;
  }

  public ToolMobileGetPluginsSupportingMobile200ResponsePluginsInner addDependenciesItem(Object dependenciesItem) {
    if (this.dependencies == null) {
      this.dependencies = new ArrayList<>();
    }
    this.dependencies.add(dependenciesItem);
    return this;
  }

   /**
   * Get dependencies
   * @return dependencies
  **/
  @javax.annotation.Nullable
  public List<Object> getDependencies() {
    return dependencies;
  }

  public void setDependencies(List<Object> dependencies) {
    this.dependencies = dependencies;
  }


  public ToolMobileGetPluginsSupportingMobile200ResponsePluginsInner filehash(String filehash) {
    this.filehash = filehash;
    return this;
  }

   /**
   * The addon package hash or empty if it doesn&#39;t exist.
   * @return filehash
  **/
  @javax.annotation.Nullable
  public String getFilehash() {
    return filehash;
  }

  public void setFilehash(String filehash) {
    this.filehash = filehash;
  }


  public ToolMobileGetPluginsSupportingMobile200ResponsePluginsInner filesize(Integer filesize) {
    this.filesize = filesize;
    return this;
  }

   /**
   * The addon package size or empty if it doesn&#39;t exist.
   * @return filesize
  **/
  @javax.annotation.Nullable
  public Integer getFilesize() {
    return filesize;
  }

  public void setFilesize(Integer filesize) {
    this.filesize = filesize;
  }


  public ToolMobileGetPluginsSupportingMobile200ResponsePluginsInner fileurl(String fileurl) {
    this.fileurl = fileurl;
    return this;
  }

   /**
   * The addon package url for download                                                             or empty if it doesn&#39;t exist.
   * @return fileurl
  **/
  @javax.annotation.Nullable
  public String getFileurl() {
    return fileurl;
  }

  public void setFileurl(String fileurl) {
    this.fileurl = fileurl;
  }


  public ToolMobileGetPluginsSupportingMobile200ResponsePluginsInner handlers(String handlers) {
    this.handlers = handlers;
    return this;
  }

   /**
   * Handlers definition (JSON)
   * @return handlers
  **/
  @javax.annotation.Nullable
  public String getHandlers() {
    return handlers;
  }

  public void setHandlers(String handlers) {
    this.handlers = handlers;
  }


  public ToolMobileGetPluginsSupportingMobile200ResponsePluginsInner lang(String lang) {
    this.lang = lang;
    return this;
  }

   /**
   * Language strings used by the handlers (JSON)
   * @return lang
  **/
  @javax.annotation.Nullable
  public String getLang() {
    return lang;
  }

  public void setLang(String lang) {
    this.lang = lang;
  }


  public ToolMobileGetPluginsSupportingMobile200ResponsePluginsInner version(String version) {
    this.version = version;
    return this;
  }

   /**
   * The plugin version number.
   * @return version
  **/
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ToolMobileGetPluginsSupportingMobile200ResponsePluginsInner toolMobileGetPluginsSupportingMobile200ResponsePluginsInner = (ToolMobileGetPluginsSupportingMobile200ResponsePluginsInner) o;
    return Objects.equals(this.addon, toolMobileGetPluginsSupportingMobile200ResponsePluginsInner.addon) &&
        Objects.equals(this.component, toolMobileGetPluginsSupportingMobile200ResponsePluginsInner.component) &&
        Objects.equals(this.dependencies, toolMobileGetPluginsSupportingMobile200ResponsePluginsInner.dependencies) &&
        Objects.equals(this.filehash, toolMobileGetPluginsSupportingMobile200ResponsePluginsInner.filehash) &&
        Objects.equals(this.filesize, toolMobileGetPluginsSupportingMobile200ResponsePluginsInner.filesize) &&
        Objects.equals(this.fileurl, toolMobileGetPluginsSupportingMobile200ResponsePluginsInner.fileurl) &&
        Objects.equals(this.handlers, toolMobileGetPluginsSupportingMobile200ResponsePluginsInner.handlers) &&
        Objects.equals(this.lang, toolMobileGetPluginsSupportingMobile200ResponsePluginsInner.lang) &&
        Objects.equals(this.version, toolMobileGetPluginsSupportingMobile200ResponsePluginsInner.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addon, component, dependencies, filehash, filesize, fileurl, handlers, lang, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ToolMobileGetPluginsSupportingMobile200ResponsePluginsInner {\n");
    sb.append("    addon: ").append(toIndentedString(addon)).append("\n");
    sb.append("    component: ").append(toIndentedString(component)).append("\n");
    sb.append("    dependencies: ").append(toIndentedString(dependencies)).append("\n");
    sb.append("    filehash: ").append(toIndentedString(filehash)).append("\n");
    sb.append("    filesize: ").append(toIndentedString(filesize)).append("\n");
    sb.append("    fileurl: ").append(toIndentedString(fileurl)).append("\n");
    sb.append("    handlers: ").append(toIndentedString(handlers)).append("\n");
    sb.append("    lang: ").append(toIndentedString(lang)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("addon");
    openapiFields.add("component");
    openapiFields.add("dependencies");
    openapiFields.add("filehash");
    openapiFields.add("filesize");
    openapiFields.add("fileurl");
    openapiFields.add("handlers");
    openapiFields.add("lang");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ToolMobileGetPluginsSupportingMobile200ResponsePluginsInner
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ToolMobileGetPluginsSupportingMobile200ResponsePluginsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ToolMobileGetPluginsSupportingMobile200ResponsePluginsInner is not found in the empty JSON string", ToolMobileGetPluginsSupportingMobile200ResponsePluginsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ToolMobileGetPluginsSupportingMobile200ResponsePluginsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ToolMobileGetPluginsSupportingMobile200ResponsePluginsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("addon") != null && !jsonObj.get("addon").isJsonNull()) && !jsonObj.get("addon").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `addon` to be a primitive type in the JSON string but got `%s`", jsonObj.get("addon").toString()));
      }
      if ((jsonObj.get("component") != null && !jsonObj.get("component").isJsonNull()) && !jsonObj.get("component").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `component` to be a primitive type in the JSON string but got `%s`", jsonObj.get("component").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("dependencies") != null && !jsonObj.get("dependencies").isJsonNull() && !jsonObj.get("dependencies").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `dependencies` to be an array in the JSON string but got `%s`", jsonObj.get("dependencies").toString()));
      }
      if ((jsonObj.get("filehash") != null && !jsonObj.get("filehash").isJsonNull()) && !jsonObj.get("filehash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filehash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filehash").toString()));
      }
      if ((jsonObj.get("fileurl") != null && !jsonObj.get("fileurl").isJsonNull()) && !jsonObj.get("fileurl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fileurl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fileurl").toString()));
      }
      if ((jsonObj.get("handlers") != null && !jsonObj.get("handlers").isJsonNull()) && !jsonObj.get("handlers").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `handlers` to be a primitive type in the JSON string but got `%s`", jsonObj.get("handlers").toString()));
      }
      if ((jsonObj.get("lang") != null && !jsonObj.get("lang").isJsonNull()) && !jsonObj.get("lang").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lang` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lang").toString()));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ToolMobileGetPluginsSupportingMobile200ResponsePluginsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ToolMobileGetPluginsSupportingMobile200ResponsePluginsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ToolMobileGetPluginsSupportingMobile200ResponsePluginsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ToolMobileGetPluginsSupportingMobile200ResponsePluginsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ToolMobileGetPluginsSupportingMobile200ResponsePluginsInner>() {
           @Override
           public void write(JsonWriter out, ToolMobileGetPluginsSupportingMobile200ResponsePluginsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ToolMobileGetPluginsSupportingMobile200ResponsePluginsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ToolMobileGetPluginsSupportingMobile200ResponsePluginsInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ToolMobileGetPluginsSupportingMobile200ResponsePluginsInner
  * @throws IOException if the JSON string is invalid with respect to ToolMobileGetPluginsSupportingMobile200ResponsePluginsInner
  */
  public static ToolMobileGetPluginsSupportingMobile200ResponsePluginsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ToolMobileGetPluginsSupportingMobile200ResponsePluginsInner.class);
  }

 /**
  * Convert an instance of ToolMobileGetPluginsSupportingMobile200ResponsePluginsInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

