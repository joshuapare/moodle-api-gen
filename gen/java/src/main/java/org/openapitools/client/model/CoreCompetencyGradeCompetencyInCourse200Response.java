/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CoreCompetencyGradeCompetency200ResponseActionuser;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.joshuapare.JSON;

/**
 * CoreCompetencyGradeCompetencyInCourse200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-18T20:58:28.689161-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class CoreCompetencyGradeCompetencyInCourse200Response {
  public static final String SERIALIZED_NAME_ACTION = "action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private Integer action;

  public static final String SERIALIZED_NAME_ACTIONUSER = "actionuser";
  @SerializedName(SERIALIZED_NAME_ACTIONUSER)
  private CoreCompetencyGradeCompetency200ResponseActionuser actionuser;

  public static final String SERIALIZED_NAME_ACTIONUSERID = "actionuserid";
  @SerializedName(SERIALIZED_NAME_ACTIONUSERID)
  private Integer actionuserid;

  public static final String SERIALIZED_NAME_CANDELETE = "candelete";
  @SerializedName(SERIALIZED_NAME_CANDELETE)
  private Boolean candelete;

  public static final String SERIALIZED_NAME_CONTEXTID = "contextid";
  @SerializedName(SERIALIZED_NAME_CONTEXTID)
  private Integer contextid;

  public static final String SERIALIZED_NAME_DESCA = "desca";
  @SerializedName(SERIALIZED_NAME_DESCA)
  private String desca;

  public static final String SERIALIZED_NAME_DESCCOMPONENT = "desccomponent";
  @SerializedName(SERIALIZED_NAME_DESCCOMPONENT)
  private String desccomponent;

  public static final String SERIALIZED_NAME_DESCIDENTIFIER = "descidentifier";
  @SerializedName(SERIALIZED_NAME_DESCIDENTIFIER)
  private String descidentifier;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_GRADE = "grade";
  @SerializedName(SERIALIZED_NAME_GRADE)
  private Integer grade;

  public static final String SERIALIZED_NAME_GRADENAME = "gradename";
  @SerializedName(SERIALIZED_NAME_GRADENAME)
  private String gradename;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id = 0;

  public static final String SERIALIZED_NAME_NOTE = "note";
  @SerializedName(SERIALIZED_NAME_NOTE)
  private String note;

  public static final String SERIALIZED_NAME_TIMECREATED = "timecreated";
  @SerializedName(SERIALIZED_NAME_TIMECREATED)
  private Integer timecreated = 0;

  public static final String SERIALIZED_NAME_TIMEMODIFIED = "timemodified";
  @SerializedName(SERIALIZED_NAME_TIMEMODIFIED)
  private Integer timemodified = 0;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_USERCOMPETENCYID = "usercompetencyid";
  @SerializedName(SERIALIZED_NAME_USERCOMPETENCYID)
  private Integer usercompetencyid;

  public static final String SERIALIZED_NAME_USERDATE = "userdate";
  @SerializedName(SERIALIZED_NAME_USERDATE)
  private String userdate;

  public static final String SERIALIZED_NAME_USERMODIFIED = "usermodified";
  @SerializedName(SERIALIZED_NAME_USERMODIFIED)
  private Integer usermodified = 0;

  public CoreCompetencyGradeCompetencyInCourse200Response() {
  }

  public CoreCompetencyGradeCompetencyInCourse200Response action(Integer action) {
    this.action = action;
    return this;
  }

   /**
   * action
   * @return action
  **/
  @javax.annotation.Nonnull
  public Integer getAction() {
    return action;
  }

  public void setAction(Integer action) {
    this.action = action;
  }


  public CoreCompetencyGradeCompetencyInCourse200Response actionuser(CoreCompetencyGradeCompetency200ResponseActionuser actionuser) {
    this.actionuser = actionuser;
    return this;
  }

   /**
   * Get actionuser
   * @return actionuser
  **/
  @javax.annotation.Nullable
  public CoreCompetencyGradeCompetency200ResponseActionuser getActionuser() {
    return actionuser;
  }

  public void setActionuser(CoreCompetencyGradeCompetency200ResponseActionuser actionuser) {
    this.actionuser = actionuser;
  }


  public CoreCompetencyGradeCompetencyInCourse200Response actionuserid(Integer actionuserid) {
    this.actionuserid = actionuserid;
    return this;
  }

   /**
   * actionuserid
   * @return actionuserid
  **/
  @javax.annotation.Nonnull
  public Integer getActionuserid() {
    return actionuserid;
  }

  public void setActionuserid(Integer actionuserid) {
    this.actionuserid = actionuserid;
  }


  public CoreCompetencyGradeCompetencyInCourse200Response candelete(Boolean candelete) {
    this.candelete = candelete;
    return this;
  }

   /**
   * candelete
   * @return candelete
  **/
  @javax.annotation.Nonnull
  public Boolean getCandelete() {
    return candelete;
  }

  public void setCandelete(Boolean candelete) {
    this.candelete = candelete;
  }


  public CoreCompetencyGradeCompetencyInCourse200Response contextid(Integer contextid) {
    this.contextid = contextid;
    return this;
  }

   /**
   * contextid
   * @return contextid
  **/
  @javax.annotation.Nonnull
  public Integer getContextid() {
    return contextid;
  }

  public void setContextid(Integer contextid) {
    this.contextid = contextid;
  }


  public CoreCompetencyGradeCompetencyInCourse200Response desca(String desca) {
    this.desca = desca;
    return this;
  }

   /**
   * desca
   * @return desca
  **/
  @javax.annotation.Nonnull
  public String getDesca() {
    return desca;
  }

  public void setDesca(String desca) {
    this.desca = desca;
  }


  public CoreCompetencyGradeCompetencyInCourse200Response desccomponent(String desccomponent) {
    this.desccomponent = desccomponent;
    return this;
  }

   /**
   * desccomponent
   * @return desccomponent
  **/
  @javax.annotation.Nonnull
  public String getDesccomponent() {
    return desccomponent;
  }

  public void setDesccomponent(String desccomponent) {
    this.desccomponent = desccomponent;
  }


  public CoreCompetencyGradeCompetencyInCourse200Response descidentifier(String descidentifier) {
    this.descidentifier = descidentifier;
    return this;
  }

   /**
   * descidentifier
   * @return descidentifier
  **/
  @javax.annotation.Nonnull
  public String getDescidentifier() {
    return descidentifier;
  }

  public void setDescidentifier(String descidentifier) {
    this.descidentifier = descidentifier;
  }


  public CoreCompetencyGradeCompetencyInCourse200Response description(String description) {
    this.description = description;
    return this;
  }

   /**
   * description
   * @return description
  **/
  @javax.annotation.Nonnull
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CoreCompetencyGradeCompetencyInCourse200Response grade(Integer grade) {
    this.grade = grade;
    return this;
  }

   /**
   * grade
   * @return grade
  **/
  @javax.annotation.Nonnull
  public Integer getGrade() {
    return grade;
  }

  public void setGrade(Integer grade) {
    this.grade = grade;
  }


  public CoreCompetencyGradeCompetencyInCourse200Response gradename(String gradename) {
    this.gradename = gradename;
    return this;
  }

   /**
   * gradename
   * @return gradename
  **/
  @javax.annotation.Nonnull
  public String getGradename() {
    return gradename;
  }

  public void setGradename(String gradename) {
    this.gradename = gradename;
  }


  public CoreCompetencyGradeCompetencyInCourse200Response id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * id
   * @return id
  **/
  @javax.annotation.Nonnull
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public CoreCompetencyGradeCompetencyInCourse200Response note(String note) {
    this.note = note;
    return this;
  }

   /**
   * note
   * @return note
  **/
  @javax.annotation.Nonnull
  public String getNote() {
    return note;
  }

  public void setNote(String note) {
    this.note = note;
  }


  public CoreCompetencyGradeCompetencyInCourse200Response timecreated(Integer timecreated) {
    this.timecreated = timecreated;
    return this;
  }

   /**
   * timecreated
   * @return timecreated
  **/
  @javax.annotation.Nonnull
  public Integer getTimecreated() {
    return timecreated;
  }

  public void setTimecreated(Integer timecreated) {
    this.timecreated = timecreated;
  }


  public CoreCompetencyGradeCompetencyInCourse200Response timemodified(Integer timemodified) {
    this.timemodified = timemodified;
    return this;
  }

   /**
   * timemodified
   * @return timemodified
  **/
  @javax.annotation.Nonnull
  public Integer getTimemodified() {
    return timemodified;
  }

  public void setTimemodified(Integer timemodified) {
    this.timemodified = timemodified;
  }


  public CoreCompetencyGradeCompetencyInCourse200Response url(String url) {
    this.url = url;
    return this;
  }

   /**
   * url
   * @return url
  **/
  @javax.annotation.Nonnull
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public CoreCompetencyGradeCompetencyInCourse200Response usercompetencyid(Integer usercompetencyid) {
    this.usercompetencyid = usercompetencyid;
    return this;
  }

   /**
   * usercompetencyid
   * @return usercompetencyid
  **/
  @javax.annotation.Nonnull
  public Integer getUsercompetencyid() {
    return usercompetencyid;
  }

  public void setUsercompetencyid(Integer usercompetencyid) {
    this.usercompetencyid = usercompetencyid;
  }


  public CoreCompetencyGradeCompetencyInCourse200Response userdate(String userdate) {
    this.userdate = userdate;
    return this;
  }

   /**
   * userdate
   * @return userdate
  **/
  @javax.annotation.Nonnull
  public String getUserdate() {
    return userdate;
  }

  public void setUserdate(String userdate) {
    this.userdate = userdate;
  }


  public CoreCompetencyGradeCompetencyInCourse200Response usermodified(Integer usermodified) {
    this.usermodified = usermodified;
    return this;
  }

   /**
   * usermodified
   * @return usermodified
  **/
  @javax.annotation.Nonnull
  public Integer getUsermodified() {
    return usermodified;
  }

  public void setUsermodified(Integer usermodified) {
    this.usermodified = usermodified;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CoreCompetencyGradeCompetencyInCourse200Response coreCompetencyGradeCompetencyInCourse200Response = (CoreCompetencyGradeCompetencyInCourse200Response) o;
    return Objects.equals(this.action, coreCompetencyGradeCompetencyInCourse200Response.action) &&
        Objects.equals(this.actionuser, coreCompetencyGradeCompetencyInCourse200Response.actionuser) &&
        Objects.equals(this.actionuserid, coreCompetencyGradeCompetencyInCourse200Response.actionuserid) &&
        Objects.equals(this.candelete, coreCompetencyGradeCompetencyInCourse200Response.candelete) &&
        Objects.equals(this.contextid, coreCompetencyGradeCompetencyInCourse200Response.contextid) &&
        Objects.equals(this.desca, coreCompetencyGradeCompetencyInCourse200Response.desca) &&
        Objects.equals(this.desccomponent, coreCompetencyGradeCompetencyInCourse200Response.desccomponent) &&
        Objects.equals(this.descidentifier, coreCompetencyGradeCompetencyInCourse200Response.descidentifier) &&
        Objects.equals(this.description, coreCompetencyGradeCompetencyInCourse200Response.description) &&
        Objects.equals(this.grade, coreCompetencyGradeCompetencyInCourse200Response.grade) &&
        Objects.equals(this.gradename, coreCompetencyGradeCompetencyInCourse200Response.gradename) &&
        Objects.equals(this.id, coreCompetencyGradeCompetencyInCourse200Response.id) &&
        Objects.equals(this.note, coreCompetencyGradeCompetencyInCourse200Response.note) &&
        Objects.equals(this.timecreated, coreCompetencyGradeCompetencyInCourse200Response.timecreated) &&
        Objects.equals(this.timemodified, coreCompetencyGradeCompetencyInCourse200Response.timemodified) &&
        Objects.equals(this.url, coreCompetencyGradeCompetencyInCourse200Response.url) &&
        Objects.equals(this.usercompetencyid, coreCompetencyGradeCompetencyInCourse200Response.usercompetencyid) &&
        Objects.equals(this.userdate, coreCompetencyGradeCompetencyInCourse200Response.userdate) &&
        Objects.equals(this.usermodified, coreCompetencyGradeCompetencyInCourse200Response.usermodified);
  }

  @Override
  public int hashCode() {
    return Objects.hash(action, actionuser, actionuserid, candelete, contextid, desca, desccomponent, descidentifier, description, grade, gradename, id, note, timecreated, timemodified, url, usercompetencyid, userdate, usermodified);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CoreCompetencyGradeCompetencyInCourse200Response {\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    actionuser: ").append(toIndentedString(actionuser)).append("\n");
    sb.append("    actionuserid: ").append(toIndentedString(actionuserid)).append("\n");
    sb.append("    candelete: ").append(toIndentedString(candelete)).append("\n");
    sb.append("    contextid: ").append(toIndentedString(contextid)).append("\n");
    sb.append("    desca: ").append(toIndentedString(desca)).append("\n");
    sb.append("    desccomponent: ").append(toIndentedString(desccomponent)).append("\n");
    sb.append("    descidentifier: ").append(toIndentedString(descidentifier)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    grade: ").append(toIndentedString(grade)).append("\n");
    sb.append("    gradename: ").append(toIndentedString(gradename)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    timecreated: ").append(toIndentedString(timecreated)).append("\n");
    sb.append("    timemodified: ").append(toIndentedString(timemodified)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    usercompetencyid: ").append(toIndentedString(usercompetencyid)).append("\n");
    sb.append("    userdate: ").append(toIndentedString(userdate)).append("\n");
    sb.append("    usermodified: ").append(toIndentedString(usermodified)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("action");
    openapiFields.add("actionuser");
    openapiFields.add("actionuserid");
    openapiFields.add("candelete");
    openapiFields.add("contextid");
    openapiFields.add("desca");
    openapiFields.add("desccomponent");
    openapiFields.add("descidentifier");
    openapiFields.add("description");
    openapiFields.add("grade");
    openapiFields.add("gradename");
    openapiFields.add("id");
    openapiFields.add("note");
    openapiFields.add("timecreated");
    openapiFields.add("timemodified");
    openapiFields.add("url");
    openapiFields.add("usercompetencyid");
    openapiFields.add("userdate");
    openapiFields.add("usermodified");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("action");
    openapiRequiredFields.add("actionuserid");
    openapiRequiredFields.add("candelete");
    openapiRequiredFields.add("contextid");
    openapiRequiredFields.add("desca");
    openapiRequiredFields.add("desccomponent");
    openapiRequiredFields.add("descidentifier");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("grade");
    openapiRequiredFields.add("gradename");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("note");
    openapiRequiredFields.add("timecreated");
    openapiRequiredFields.add("timemodified");
    openapiRequiredFields.add("url");
    openapiRequiredFields.add("usercompetencyid");
    openapiRequiredFields.add("userdate");
    openapiRequiredFields.add("usermodified");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CoreCompetencyGradeCompetencyInCourse200Response
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CoreCompetencyGradeCompetencyInCourse200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CoreCompetencyGradeCompetencyInCourse200Response is not found in the empty JSON string", CoreCompetencyGradeCompetencyInCourse200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CoreCompetencyGradeCompetencyInCourse200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CoreCompetencyGradeCompetencyInCourse200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CoreCompetencyGradeCompetencyInCourse200Response.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `actionuser`
      if (jsonObj.get("actionuser") != null && !jsonObj.get("actionuser").isJsonNull()) {
        CoreCompetencyGradeCompetency200ResponseActionuser.validateJsonElement(jsonObj.get("actionuser"));
      }
      if (!jsonObj.get("desca").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `desca` to be a primitive type in the JSON string but got `%s`", jsonObj.get("desca").toString()));
      }
      if (!jsonObj.get("desccomponent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `desccomponent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("desccomponent").toString()));
      }
      if (!jsonObj.get("descidentifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `descidentifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("descidentifier").toString()));
      }
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("gradename").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gradename` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gradename").toString()));
      }
      if (!jsonObj.get("note").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `note` to be a primitive type in the JSON string but got `%s`", jsonObj.get("note").toString()));
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if (!jsonObj.get("userdate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userdate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userdate").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CoreCompetencyGradeCompetencyInCourse200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CoreCompetencyGradeCompetencyInCourse200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CoreCompetencyGradeCompetencyInCourse200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CoreCompetencyGradeCompetencyInCourse200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<CoreCompetencyGradeCompetencyInCourse200Response>() {
           @Override
           public void write(JsonWriter out, CoreCompetencyGradeCompetencyInCourse200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CoreCompetencyGradeCompetencyInCourse200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CoreCompetencyGradeCompetencyInCourse200Response given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CoreCompetencyGradeCompetencyInCourse200Response
  * @throws IOException if the JSON string is invalid with respect to CoreCompetencyGradeCompetencyInCourse200Response
  */
  public static CoreCompetencyGradeCompetencyInCourse200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CoreCompetencyGradeCompetencyInCourse200Response.class);
  }

 /**
  * Convert an instance of CoreCompetencyGradeCompetencyInCourse200Response to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

