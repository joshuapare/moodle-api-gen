/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ModForumPrepareDraftAreaForPostRequestFilestokeepInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.joshuapare.JSON;

/**
 * ModForumPrepareDraftAreaForPostRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-18T20:58:28.689161-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class ModForumPrepareDraftAreaForPostRequest {
  public static final String SERIALIZED_NAME_AREA = "area";
  @SerializedName(SERIALIZED_NAME_AREA)
  private String area = "null";

  public static final String SERIALIZED_NAME_DRAFTITEMID = "draftitemid";
  @SerializedName(SERIALIZED_NAME_DRAFTITEMID)
  private Integer draftitemid = 0;

  public static final String SERIALIZED_NAME_FILESTOKEEP = "filestokeep";
  @SerializedName(SERIALIZED_NAME_FILESTOKEEP)
  private List<ModForumPrepareDraftAreaForPostRequestFilestokeepInner> filestokeep = new ArrayList<>();

  public static final String SERIALIZED_NAME_POSTID = "postid";
  @SerializedName(SERIALIZED_NAME_POSTID)
  private Integer postid = null;

  public ModForumPrepareDraftAreaForPostRequest() {
  }

  public ModForumPrepareDraftAreaForPostRequest area(String area) {
    this.area = area;
    return this;
  }

   /**
   * Area to prepare: attachment or post.
   * @return area
  **/
  @javax.annotation.Nonnull
  public String getArea() {
    return area;
  }

  public void setArea(String area) {
    this.area = area;
  }


  public ModForumPrepareDraftAreaForPostRequest draftitemid(Integer draftitemid) {
    this.draftitemid = draftitemid;
    return this;
  }

   /**
   * The draft item id to use. 0 to generate one.
   * @return draftitemid
  **/
  @javax.annotation.Nullable
  public Integer getDraftitemid() {
    return draftitemid;
  }

  public void setDraftitemid(Integer draftitemid) {
    this.draftitemid = draftitemid;
  }


  public ModForumPrepareDraftAreaForPostRequest filestokeep(List<ModForumPrepareDraftAreaForPostRequestFilestokeepInner> filestokeep) {
    this.filestokeep = filestokeep;
    return this;
  }

  public ModForumPrepareDraftAreaForPostRequest addFilestokeepItem(ModForumPrepareDraftAreaForPostRequestFilestokeepInner filestokeepItem) {
    if (this.filestokeep == null) {
      this.filestokeep = new ArrayList<>();
    }
    this.filestokeep.add(filestokeepItem);
    return this;
  }

   /**
   * Get filestokeep
   * @return filestokeep
  **/
  @javax.annotation.Nullable
  public List<ModForumPrepareDraftAreaForPostRequestFilestokeepInner> getFilestokeep() {
    return filestokeep;
  }

  public void setFilestokeep(List<ModForumPrepareDraftAreaForPostRequestFilestokeepInner> filestokeep) {
    this.filestokeep = filestokeep;
  }


  public ModForumPrepareDraftAreaForPostRequest postid(Integer postid) {
    this.postid = postid;
    return this;
  }

   /**
   * Post to prepare the draft area for.
   * @return postid
  **/
  @javax.annotation.Nonnull
  public Integer getPostid() {
    return postid;
  }

  public void setPostid(Integer postid) {
    this.postid = postid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModForumPrepareDraftAreaForPostRequest modForumPrepareDraftAreaForPostRequest = (ModForumPrepareDraftAreaForPostRequest) o;
    return Objects.equals(this.area, modForumPrepareDraftAreaForPostRequest.area) &&
        Objects.equals(this.draftitemid, modForumPrepareDraftAreaForPostRequest.draftitemid) &&
        Objects.equals(this.filestokeep, modForumPrepareDraftAreaForPostRequest.filestokeep) &&
        Objects.equals(this.postid, modForumPrepareDraftAreaForPostRequest.postid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(area, draftitemid, filestokeep, postid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModForumPrepareDraftAreaForPostRequest {\n");
    sb.append("    area: ").append(toIndentedString(area)).append("\n");
    sb.append("    draftitemid: ").append(toIndentedString(draftitemid)).append("\n");
    sb.append("    filestokeep: ").append(toIndentedString(filestokeep)).append("\n");
    sb.append("    postid: ").append(toIndentedString(postid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("area");
    openapiFields.add("draftitemid");
    openapiFields.add("filestokeep");
    openapiFields.add("postid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("area");
    openapiRequiredFields.add("postid");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ModForumPrepareDraftAreaForPostRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ModForumPrepareDraftAreaForPostRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModForumPrepareDraftAreaForPostRequest is not found in the empty JSON string", ModForumPrepareDraftAreaForPostRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ModForumPrepareDraftAreaForPostRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModForumPrepareDraftAreaForPostRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ModForumPrepareDraftAreaForPostRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("area").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `area` to be a primitive type in the JSON string but got `%s`", jsonObj.get("area").toString()));
      }
      if (jsonObj.get("filestokeep") != null && !jsonObj.get("filestokeep").isJsonNull()) {
        JsonArray jsonArrayfilestokeep = jsonObj.getAsJsonArray("filestokeep");
        if (jsonArrayfilestokeep != null) {
          // ensure the json data is an array
          if (!jsonObj.get("filestokeep").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `filestokeep` to be an array in the JSON string but got `%s`", jsonObj.get("filestokeep").toString()));
          }

          // validate the optional field `filestokeep` (array)
          for (int i = 0; i < jsonArrayfilestokeep.size(); i++) {
            ModForumPrepareDraftAreaForPostRequestFilestokeepInner.validateJsonElement(jsonArrayfilestokeep.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModForumPrepareDraftAreaForPostRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModForumPrepareDraftAreaForPostRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModForumPrepareDraftAreaForPostRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModForumPrepareDraftAreaForPostRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ModForumPrepareDraftAreaForPostRequest>() {
           @Override
           public void write(JsonWriter out, ModForumPrepareDraftAreaForPostRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModForumPrepareDraftAreaForPostRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ModForumPrepareDraftAreaForPostRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ModForumPrepareDraftAreaForPostRequest
  * @throws IOException if the JSON string is invalid with respect to ModForumPrepareDraftAreaForPostRequest
  */
  public static ModForumPrepareDraftAreaForPostRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModForumPrepareDraftAreaForPostRequest.class);
  }

 /**
  * Convert an instance of ModForumPrepareDraftAreaForPostRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

