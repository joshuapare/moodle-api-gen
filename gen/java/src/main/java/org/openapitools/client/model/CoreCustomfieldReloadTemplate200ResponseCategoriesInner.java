/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CoreCustomfieldReloadTemplate200ResponseCategoriesInnerFieldsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.joshuapare.JSON;

/**
 * CoreCustomfieldReloadTemplate200ResponseCategoriesInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-18T20:58:28.689161-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class CoreCustomfieldReloadTemplate200ResponseCategoriesInner {
  public static final String SERIALIZED_NAME_ADDFIELDMENU = "addfieldmenu";
  @SerializedName(SERIALIZED_NAME_ADDFIELDMENU)
  private String addfieldmenu = "null";

  public static final String SERIALIZED_NAME_FIELDS = "fields";
  @SerializedName(SERIALIZED_NAME_FIELDS)
  private List<CoreCustomfieldReloadTemplate200ResponseCategoriesInnerFieldsInner> fields = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_NAMEEDITABLE = "nameeditable";
  @SerializedName(SERIALIZED_NAME_NAMEEDITABLE)
  private String nameeditable = "null";

  public CoreCustomfieldReloadTemplate200ResponseCategoriesInner() {
  }

  public CoreCustomfieldReloadTemplate200ResponseCategoriesInner addfieldmenu(String addfieldmenu) {
    this.addfieldmenu = addfieldmenu;
    return this;
  }

   /**
   * addfieldmenu
   * @return addfieldmenu
  **/
  @javax.annotation.Nullable
  public String getAddfieldmenu() {
    return addfieldmenu;
  }

  public void setAddfieldmenu(String addfieldmenu) {
    this.addfieldmenu = addfieldmenu;
  }


  public CoreCustomfieldReloadTemplate200ResponseCategoriesInner fields(List<CoreCustomfieldReloadTemplate200ResponseCategoriesInnerFieldsInner> fields) {
    this.fields = fields;
    return this;
  }

  public CoreCustomfieldReloadTemplate200ResponseCategoriesInner addFieldsItem(CoreCustomfieldReloadTemplate200ResponseCategoriesInnerFieldsInner fieldsItem) {
    if (this.fields == null) {
      this.fields = new ArrayList<>();
    }
    this.fields.add(fieldsItem);
    return this;
  }

   /**
   * Get fields
   * @return fields
  **/
  @javax.annotation.Nullable
  public List<CoreCustomfieldReloadTemplate200ResponseCategoriesInnerFieldsInner> getFields() {
    return fields;
  }

  public void setFields(List<CoreCustomfieldReloadTemplate200ResponseCategoriesInnerFieldsInner> fields) {
    this.fields = fields;
  }


  public CoreCustomfieldReloadTemplate200ResponseCategoriesInner id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * id
   * @return id
  **/
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public CoreCustomfieldReloadTemplate200ResponseCategoriesInner nameeditable(String nameeditable) {
    this.nameeditable = nameeditable;
    return this;
  }

   /**
   * inplace editable name
   * @return nameeditable
  **/
  @javax.annotation.Nullable
  public String getNameeditable() {
    return nameeditable;
  }

  public void setNameeditable(String nameeditable) {
    this.nameeditable = nameeditable;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CoreCustomfieldReloadTemplate200ResponseCategoriesInner coreCustomfieldReloadTemplate200ResponseCategoriesInner = (CoreCustomfieldReloadTemplate200ResponseCategoriesInner) o;
    return Objects.equals(this.addfieldmenu, coreCustomfieldReloadTemplate200ResponseCategoriesInner.addfieldmenu) &&
        Objects.equals(this.fields, coreCustomfieldReloadTemplate200ResponseCategoriesInner.fields) &&
        Objects.equals(this.id, coreCustomfieldReloadTemplate200ResponseCategoriesInner.id) &&
        Objects.equals(this.nameeditable, coreCustomfieldReloadTemplate200ResponseCategoriesInner.nameeditable);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addfieldmenu, fields, id, nameeditable);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CoreCustomfieldReloadTemplate200ResponseCategoriesInner {\n");
    sb.append("    addfieldmenu: ").append(toIndentedString(addfieldmenu)).append("\n");
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    nameeditable: ").append(toIndentedString(nameeditable)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("addfieldmenu");
    openapiFields.add("fields");
    openapiFields.add("id");
    openapiFields.add("nameeditable");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CoreCustomfieldReloadTemplate200ResponseCategoriesInner
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CoreCustomfieldReloadTemplate200ResponseCategoriesInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CoreCustomfieldReloadTemplate200ResponseCategoriesInner is not found in the empty JSON string", CoreCustomfieldReloadTemplate200ResponseCategoriesInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CoreCustomfieldReloadTemplate200ResponseCategoriesInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CoreCustomfieldReloadTemplate200ResponseCategoriesInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("addfieldmenu") != null && !jsonObj.get("addfieldmenu").isJsonNull()) && !jsonObj.get("addfieldmenu").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `addfieldmenu` to be a primitive type in the JSON string but got `%s`", jsonObj.get("addfieldmenu").toString()));
      }
      if (jsonObj.get("fields") != null && !jsonObj.get("fields").isJsonNull()) {
        JsonArray jsonArrayfields = jsonObj.getAsJsonArray("fields");
        if (jsonArrayfields != null) {
          // ensure the json data is an array
          if (!jsonObj.get("fields").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `fields` to be an array in the JSON string but got `%s`", jsonObj.get("fields").toString()));
          }

          // validate the optional field `fields` (array)
          for (int i = 0; i < jsonArrayfields.size(); i++) {
            CoreCustomfieldReloadTemplate200ResponseCategoriesInnerFieldsInner.validateJsonElement(jsonArrayfields.get(i));
          };
        }
      }
      if ((jsonObj.get("nameeditable") != null && !jsonObj.get("nameeditable").isJsonNull()) && !jsonObj.get("nameeditable").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nameeditable` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nameeditable").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CoreCustomfieldReloadTemplate200ResponseCategoriesInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CoreCustomfieldReloadTemplate200ResponseCategoriesInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CoreCustomfieldReloadTemplate200ResponseCategoriesInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CoreCustomfieldReloadTemplate200ResponseCategoriesInner.class));

       return (TypeAdapter<T>) new TypeAdapter<CoreCustomfieldReloadTemplate200ResponseCategoriesInner>() {
           @Override
           public void write(JsonWriter out, CoreCustomfieldReloadTemplate200ResponseCategoriesInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CoreCustomfieldReloadTemplate200ResponseCategoriesInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CoreCustomfieldReloadTemplate200ResponseCategoriesInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CoreCustomfieldReloadTemplate200ResponseCategoriesInner
  * @throws IOException if the JSON string is invalid with respect to CoreCustomfieldReloadTemplate200ResponseCategoriesInner
  */
  public static CoreCustomfieldReloadTemplate200ResponseCategoriesInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CoreCustomfieldReloadTemplate200ResponseCategoriesInner.class);
  }

 /**
  * Convert an instance of CoreCustomfieldReloadTemplate200ResponseCategoriesInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

