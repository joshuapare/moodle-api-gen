/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner;
import org.openapitools.client.model.ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInnerConfigsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.joshuapare.JSON;

/**
 * assignment information object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-18T14:00:07.069642-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner {
  public static final String SERIALIZED_NAME_ACTIVITY = "activity";
  @SerializedName(SERIALIZED_NAME_ACTIVITY)
  private String activity = "null";

  public static final String SERIALIZED_NAME_ACTIVITYATTACHMENTS = "activityattachments";
  @SerializedName(SERIALIZED_NAME_ACTIVITYATTACHMENTS)
  private List<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner> activityattachments = new ArrayList<>();

  public static final String SERIALIZED_NAME_ACTIVITYFORMAT = "activityformat";
  @SerializedName(SERIALIZED_NAME_ACTIVITYFORMAT)
  private Integer activityformat = null;

  public static final String SERIALIZED_NAME_ALLOWSUBMISSIONSFROMDATE = "allowsubmissionsfromdate";
  @SerializedName(SERIALIZED_NAME_ALLOWSUBMISSIONSFROMDATE)
  private Integer allowsubmissionsfromdate = null;

  public static final String SERIALIZED_NAME_ATTEMPTREOPENMETHOD = "attemptreopenmethod";
  @SerializedName(SERIALIZED_NAME_ATTEMPTREOPENMETHOD)
  private String attemptreopenmethod = "null";

  public static final String SERIALIZED_NAME_BLINDMARKING = "blindmarking";
  @SerializedName(SERIALIZED_NAME_BLINDMARKING)
  private Integer blindmarking = null;

  public static final String SERIALIZED_NAME_CMID = "cmid";
  @SerializedName(SERIALIZED_NAME_CMID)
  private Integer cmid;

  public static final String SERIALIZED_NAME_COMPLETIONSUBMIT = "completionsubmit";
  @SerializedName(SERIALIZED_NAME_COMPLETIONSUBMIT)
  private Integer completionsubmit = null;

  public static final String SERIALIZED_NAME_CONFIGS = "configs";
  @SerializedName(SERIALIZED_NAME_CONFIGS)
  private List<ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInnerConfigsInner> configs = new ArrayList<>();

  public static final String SERIALIZED_NAME_COURSE = "course";
  @SerializedName(SERIALIZED_NAME_COURSE)
  private Integer course;

  public static final String SERIALIZED_NAME_CUTOFFDATE = "cutoffdate";
  @SerializedName(SERIALIZED_NAME_CUTOFFDATE)
  private Integer cutoffdate = null;

  public static final String SERIALIZED_NAME_DUEDATE = "duedate";
  @SerializedName(SERIALIZED_NAME_DUEDATE)
  private Integer duedate = null;

  public static final String SERIALIZED_NAME_GRADE = "grade";
  @SerializedName(SERIALIZED_NAME_GRADE)
  private Integer grade = null;

  public static final String SERIALIZED_NAME_GRADINGDUEDATE = "gradingduedate";
  @SerializedName(SERIALIZED_NAME_GRADINGDUEDATE)
  private Integer gradingduedate = null;

  public static final String SERIALIZED_NAME_HIDEGRADER = "hidegrader";
  @SerializedName(SERIALIZED_NAME_HIDEGRADER)
  private Integer hidegrader = null;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_INTRO = "intro";
  @SerializedName(SERIALIZED_NAME_INTRO)
  private String intro = "null";

  public static final String SERIALIZED_NAME_INTROATTACHMENTS = "introattachments";
  @SerializedName(SERIALIZED_NAME_INTROATTACHMENTS)
  private List<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner> introattachments = new ArrayList<>();

  public static final String SERIALIZED_NAME_INTROFILES = "introfiles";
  @SerializedName(SERIALIZED_NAME_INTROFILES)
  private List<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner> introfiles = new ArrayList<>();

  public static final String SERIALIZED_NAME_INTROFORMAT = "introformat";
  @SerializedName(SERIALIZED_NAME_INTROFORMAT)
  private Integer introformat = null;

  public static final String SERIALIZED_NAME_MARKINGALLOCATION = "markingallocation";
  @SerializedName(SERIALIZED_NAME_MARKINGALLOCATION)
  private Integer markingallocation = null;

  public static final String SERIALIZED_NAME_MARKINGWORKFLOW = "markingworkflow";
  @SerializedName(SERIALIZED_NAME_MARKINGWORKFLOW)
  private Integer markingworkflow = null;

  public static final String SERIALIZED_NAME_MAXATTEMPTS = "maxattempts";
  @SerializedName(SERIALIZED_NAME_MAXATTEMPTS)
  private Integer maxattempts = null;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name = "null";

  public static final String SERIALIZED_NAME_NOSUBMISSIONS = "nosubmissions";
  @SerializedName(SERIALIZED_NAME_NOSUBMISSIONS)
  private Integer nosubmissions = null;

  public static final String SERIALIZED_NAME_PREVENTSUBMISSIONNOTINGROUP = "preventsubmissionnotingroup";
  @SerializedName(SERIALIZED_NAME_PREVENTSUBMISSIONNOTINGROUP)
  private Integer preventsubmissionnotingroup = null;

  public static final String SERIALIZED_NAME_REQUIREALLTEAMMEMBERSSUBMIT = "requireallteammemberssubmit";
  @SerializedName(SERIALIZED_NAME_REQUIREALLTEAMMEMBERSSUBMIT)
  private Integer requireallteammemberssubmit = null;

  public static final String SERIALIZED_NAME_REQUIRESUBMISSIONSTATEMENT = "requiresubmissionstatement";
  @SerializedName(SERIALIZED_NAME_REQUIRESUBMISSIONSTATEMENT)
  private Integer requiresubmissionstatement = null;

  public static final String SERIALIZED_NAME_REVEALIDENTITIES = "revealidentities";
  @SerializedName(SERIALIZED_NAME_REVEALIDENTITIES)
  private Integer revealidentities = null;

  public static final String SERIALIZED_NAME_SENDLATENOTIFICATIONS = "sendlatenotifications";
  @SerializedName(SERIALIZED_NAME_SENDLATENOTIFICATIONS)
  private Integer sendlatenotifications = null;

  public static final String SERIALIZED_NAME_SENDNOTIFICATIONS = "sendnotifications";
  @SerializedName(SERIALIZED_NAME_SENDNOTIFICATIONS)
  private Integer sendnotifications;

  public static final String SERIALIZED_NAME_SENDSTUDENTNOTIFICATIONS = "sendstudentnotifications";
  @SerializedName(SERIALIZED_NAME_SENDSTUDENTNOTIFICATIONS)
  private Integer sendstudentnotifications = null;

  public static final String SERIALIZED_NAME_SUBMISSIONATTACHMENTS = "submissionattachments";
  @SerializedName(SERIALIZED_NAME_SUBMISSIONATTACHMENTS)
  private Integer submissionattachments = null;

  public static final String SERIALIZED_NAME_SUBMISSIONDRAFTS = "submissiondrafts";
  @SerializedName(SERIALIZED_NAME_SUBMISSIONDRAFTS)
  private Integer submissiondrafts = null;

  public static final String SERIALIZED_NAME_SUBMISSIONSTATEMENT = "submissionstatement";
  @SerializedName(SERIALIZED_NAME_SUBMISSIONSTATEMENT)
  private String submissionstatement = "null";

  public static final String SERIALIZED_NAME_SUBMISSIONSTATEMENTFORMAT = "submissionstatementformat";
  @SerializedName(SERIALIZED_NAME_SUBMISSIONSTATEMENTFORMAT)
  private Integer submissionstatementformat = null;

  public static final String SERIALIZED_NAME_TEAMSUBMISSION = "teamsubmission";
  @SerializedName(SERIALIZED_NAME_TEAMSUBMISSION)
  private Integer teamsubmission = null;

  public static final String SERIALIZED_NAME_TEAMSUBMISSIONGROUPINGID = "teamsubmissiongroupingid";
  @SerializedName(SERIALIZED_NAME_TEAMSUBMISSIONGROUPINGID)
  private Integer teamsubmissiongroupingid = null;

  public static final String SERIALIZED_NAME_TIMELIMIT = "timelimit";
  @SerializedName(SERIALIZED_NAME_TIMELIMIT)
  private Integer timelimit = null;

  public static final String SERIALIZED_NAME_TIMEMODIFIED = "timemodified";
  @SerializedName(SERIALIZED_NAME_TIMEMODIFIED)
  private Integer timemodified = null;

  public ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner() {
  }

  public ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner activity(String activity) {
    this.activity = activity;
    return this;
  }

   /**
   * Description of activity
   * @return activity
  **/
  @javax.annotation.Nullable
  public String getActivity() {
    return activity;
  }

  public void setActivity(String activity) {
    this.activity = activity;
  }


  public ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner activityattachments(List<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner> activityattachments) {
    this.activityattachments = activityattachments;
    return this;
  }

  public ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner addActivityattachmentsItem(CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner activityattachmentsItem) {
    if (this.activityattachments == null) {
      this.activityattachments = new ArrayList<>();
    }
    this.activityattachments.add(activityattachmentsItem);
    return this;
  }

   /**
   * Get activityattachments
   * @return activityattachments
  **/
  @javax.annotation.Nullable
  public List<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner> getActivityattachments() {
    return activityattachments;
  }

  public void setActivityattachments(List<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner> activityattachments) {
    this.activityattachments = activityattachments;
  }


  public ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner activityformat(Integer activityformat) {
    this.activityformat = activityformat;
    return this;
  }

   /**
   * activity format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)
   * @return activityformat
  **/
  @javax.annotation.Nullable
  public Integer getActivityformat() {
    return activityformat;
  }

  public void setActivityformat(Integer activityformat) {
    this.activityformat = activityformat;
  }


  public ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner allowsubmissionsfromdate(Integer allowsubmissionsfromdate) {
    this.allowsubmissionsfromdate = allowsubmissionsfromdate;
    return this;
  }

   /**
   * allow submissions from date
   * @return allowsubmissionsfromdate
  **/
  @javax.annotation.Nullable
  public Integer getAllowsubmissionsfromdate() {
    return allowsubmissionsfromdate;
  }

  public void setAllowsubmissionsfromdate(Integer allowsubmissionsfromdate) {
    this.allowsubmissionsfromdate = allowsubmissionsfromdate;
  }


  public ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner attemptreopenmethod(String attemptreopenmethod) {
    this.attemptreopenmethod = attemptreopenmethod;
    return this;
  }

   /**
   * method used to control opening new attempts
   * @return attemptreopenmethod
  **/
  @javax.annotation.Nullable
  public String getAttemptreopenmethod() {
    return attemptreopenmethod;
  }

  public void setAttemptreopenmethod(String attemptreopenmethod) {
    this.attemptreopenmethod = attemptreopenmethod;
  }


  public ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner blindmarking(Integer blindmarking) {
    this.blindmarking = blindmarking;
    return this;
  }

   /**
   * if enabled, hide identities until reveal identities actioned
   * @return blindmarking
  **/
  @javax.annotation.Nullable
  public Integer getBlindmarking() {
    return blindmarking;
  }

  public void setBlindmarking(Integer blindmarking) {
    this.blindmarking = blindmarking;
  }


  public ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner cmid(Integer cmid) {
    this.cmid = cmid;
    return this;
  }

   /**
   * course module id
   * @return cmid
  **/
  @javax.annotation.Nullable
  public Integer getCmid() {
    return cmid;
  }

  public void setCmid(Integer cmid) {
    this.cmid = cmid;
  }


  public ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner completionsubmit(Integer completionsubmit) {
    this.completionsubmit = completionsubmit;
    return this;
  }

   /**
   * if enabled, set activity as complete following submission
   * @return completionsubmit
  **/
  @javax.annotation.Nullable
  public Integer getCompletionsubmit() {
    return completionsubmit;
  }

  public void setCompletionsubmit(Integer completionsubmit) {
    this.completionsubmit = completionsubmit;
  }


  public ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner configs(List<ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInnerConfigsInner> configs) {
    this.configs = configs;
    return this;
  }

  public ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner addConfigsItem(ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInnerConfigsInner configsItem) {
    if (this.configs == null) {
      this.configs = new ArrayList<>();
    }
    this.configs.add(configsItem);
    return this;
  }

   /**
   * Get configs
   * @return configs
  **/
  @javax.annotation.Nullable
  public List<ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInnerConfigsInner> getConfigs() {
    return configs;
  }

  public void setConfigs(List<ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInnerConfigsInner> configs) {
    this.configs = configs;
  }


  public ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner course(Integer course) {
    this.course = course;
    return this;
  }

   /**
   * course id
   * @return course
  **/
  @javax.annotation.Nullable
  public Integer getCourse() {
    return course;
  }

  public void setCourse(Integer course) {
    this.course = course;
  }


  public ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner cutoffdate(Integer cutoffdate) {
    this.cutoffdate = cutoffdate;
    return this;
  }

   /**
   * date after which submission is not accepted without an extension
   * @return cutoffdate
  **/
  @javax.annotation.Nullable
  public Integer getCutoffdate() {
    return cutoffdate;
  }

  public void setCutoffdate(Integer cutoffdate) {
    this.cutoffdate = cutoffdate;
  }


  public ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner duedate(Integer duedate) {
    this.duedate = duedate;
    return this;
  }

   /**
   * assignment due date
   * @return duedate
  **/
  @javax.annotation.Nullable
  public Integer getDuedate() {
    return duedate;
  }

  public void setDuedate(Integer duedate) {
    this.duedate = duedate;
  }


  public ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner grade(Integer grade) {
    this.grade = grade;
    return this;
  }

   /**
   * grade type
   * @return grade
  **/
  @javax.annotation.Nullable
  public Integer getGrade() {
    return grade;
  }

  public void setGrade(Integer grade) {
    this.grade = grade;
  }


  public ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner gradingduedate(Integer gradingduedate) {
    this.gradingduedate = gradingduedate;
    return this;
  }

   /**
   * the expected date for marking the submissions
   * @return gradingduedate
  **/
  @javax.annotation.Nullable
  public Integer getGradingduedate() {
    return gradingduedate;
  }

  public void setGradingduedate(Integer gradingduedate) {
    this.gradingduedate = gradingduedate;
  }


  public ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner hidegrader(Integer hidegrader) {
    this.hidegrader = hidegrader;
    return this;
  }

   /**
   * If enabled, hide grader to student
   * @return hidegrader
  **/
  @javax.annotation.Nullable
  public Integer getHidegrader() {
    return hidegrader;
  }

  public void setHidegrader(Integer hidegrader) {
    this.hidegrader = hidegrader;
  }


  public ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * assignment id
   * @return id
  **/
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner intro(String intro) {
    this.intro = intro;
    return this;
  }

   /**
   * assignment intro, not allways returned because it deppends on the activity configuration
   * @return intro
  **/
  @javax.annotation.Nullable
  public String getIntro() {
    return intro;
  }

  public void setIntro(String intro) {
    this.intro = intro;
  }


  public ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner introattachments(List<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner> introattachments) {
    this.introattachments = introattachments;
    return this;
  }

  public ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner addIntroattachmentsItem(CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner introattachmentsItem) {
    if (this.introattachments == null) {
      this.introattachments = new ArrayList<>();
    }
    this.introattachments.add(introattachmentsItem);
    return this;
  }

   /**
   * Get introattachments
   * @return introattachments
  **/
  @javax.annotation.Nullable
  public List<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner> getIntroattachments() {
    return introattachments;
  }

  public void setIntroattachments(List<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner> introattachments) {
    this.introattachments = introattachments;
  }


  public ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner introfiles(List<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner> introfiles) {
    this.introfiles = introfiles;
    return this;
  }

  public ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner addIntrofilesItem(CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner introfilesItem) {
    if (this.introfiles == null) {
      this.introfiles = new ArrayList<>();
    }
    this.introfiles.add(introfilesItem);
    return this;
  }

   /**
   * Get introfiles
   * @return introfiles
  **/
  @javax.annotation.Nullable
  public List<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner> getIntrofiles() {
    return introfiles;
  }

  public void setIntrofiles(List<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner> introfiles) {
    this.introfiles = introfiles;
  }


  public ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner introformat(Integer introformat) {
    this.introformat = introformat;
    return this;
  }

   /**
   * intro format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)
   * @return introformat
  **/
  @javax.annotation.Nullable
  public Integer getIntroformat() {
    return introformat;
  }

  public void setIntroformat(Integer introformat) {
    this.introformat = introformat;
  }


  public ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner markingallocation(Integer markingallocation) {
    this.markingallocation = markingallocation;
    return this;
  }

   /**
   * enable marking allocation
   * @return markingallocation
  **/
  @javax.annotation.Nullable
  public Integer getMarkingallocation() {
    return markingallocation;
  }

  public void setMarkingallocation(Integer markingallocation) {
    this.markingallocation = markingallocation;
  }


  public ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner markingworkflow(Integer markingworkflow) {
    this.markingworkflow = markingworkflow;
    return this;
  }

   /**
   * enable marking workflow
   * @return markingworkflow
  **/
  @javax.annotation.Nullable
  public Integer getMarkingworkflow() {
    return markingworkflow;
  }

  public void setMarkingworkflow(Integer markingworkflow) {
    this.markingworkflow = markingworkflow;
  }


  public ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner maxattempts(Integer maxattempts) {
    this.maxattempts = maxattempts;
    return this;
  }

   /**
   * maximum number of attempts allowed
   * @return maxattempts
  **/
  @javax.annotation.Nullable
  public Integer getMaxattempts() {
    return maxattempts;
  }

  public void setMaxattempts(Integer maxattempts) {
    this.maxattempts = maxattempts;
  }


  public ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner name(String name) {
    this.name = name;
    return this;
  }

   /**
   * assignment name
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner nosubmissions(Integer nosubmissions) {
    this.nosubmissions = nosubmissions;
    return this;
  }

   /**
   * no submissions
   * @return nosubmissions
  **/
  @javax.annotation.Nullable
  public Integer getNosubmissions() {
    return nosubmissions;
  }

  public void setNosubmissions(Integer nosubmissions) {
    this.nosubmissions = nosubmissions;
  }


  public ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner preventsubmissionnotingroup(Integer preventsubmissionnotingroup) {
    this.preventsubmissionnotingroup = preventsubmissionnotingroup;
    return this;
  }

   /**
   * Prevent submission not in group
   * @return preventsubmissionnotingroup
  **/
  @javax.annotation.Nullable
  public Integer getPreventsubmissionnotingroup() {
    return preventsubmissionnotingroup;
  }

  public void setPreventsubmissionnotingroup(Integer preventsubmissionnotingroup) {
    this.preventsubmissionnotingroup = preventsubmissionnotingroup;
  }


  public ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner requireallteammemberssubmit(Integer requireallteammemberssubmit) {
    this.requireallteammemberssubmit = requireallteammemberssubmit;
    return this;
  }

   /**
   * if enabled, all team members must submit
   * @return requireallteammemberssubmit
  **/
  @javax.annotation.Nullable
  public Integer getRequireallteammemberssubmit() {
    return requireallteammemberssubmit;
  }

  public void setRequireallteammemberssubmit(Integer requireallteammemberssubmit) {
    this.requireallteammemberssubmit = requireallteammemberssubmit;
  }


  public ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner requiresubmissionstatement(Integer requiresubmissionstatement) {
    this.requiresubmissionstatement = requiresubmissionstatement;
    return this;
  }

   /**
   * student must accept submission statement
   * @return requiresubmissionstatement
  **/
  @javax.annotation.Nullable
  public Integer getRequiresubmissionstatement() {
    return requiresubmissionstatement;
  }

  public void setRequiresubmissionstatement(Integer requiresubmissionstatement) {
    this.requiresubmissionstatement = requiresubmissionstatement;
  }


  public ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner revealidentities(Integer revealidentities) {
    this.revealidentities = revealidentities;
    return this;
  }

   /**
   * show identities for a blind marking assignment
   * @return revealidentities
  **/
  @javax.annotation.Nullable
  public Integer getRevealidentities() {
    return revealidentities;
  }

  public void setRevealidentities(Integer revealidentities) {
    this.revealidentities = revealidentities;
  }


  public ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner sendlatenotifications(Integer sendlatenotifications) {
    this.sendlatenotifications = sendlatenotifications;
    return this;
  }

   /**
   * send notifications
   * @return sendlatenotifications
  **/
  @javax.annotation.Nullable
  public Integer getSendlatenotifications() {
    return sendlatenotifications;
  }

  public void setSendlatenotifications(Integer sendlatenotifications) {
    this.sendlatenotifications = sendlatenotifications;
  }


  public ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner sendnotifications(Integer sendnotifications) {
    this.sendnotifications = sendnotifications;
    return this;
  }

   /**
   * send notifications
   * @return sendnotifications
  **/
  @javax.annotation.Nullable
  public Integer getSendnotifications() {
    return sendnotifications;
  }

  public void setSendnotifications(Integer sendnotifications) {
    this.sendnotifications = sendnotifications;
  }


  public ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner sendstudentnotifications(Integer sendstudentnotifications) {
    this.sendstudentnotifications = sendstudentnotifications;
    return this;
  }

   /**
   * send student notifications (default)
   * @return sendstudentnotifications
  **/
  @javax.annotation.Nullable
  public Integer getSendstudentnotifications() {
    return sendstudentnotifications;
  }

  public void setSendstudentnotifications(Integer sendstudentnotifications) {
    this.sendstudentnotifications = sendstudentnotifications;
  }


  public ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner submissionattachments(Integer submissionattachments) {
    this.submissionattachments = submissionattachments;
    return this;
  }

   /**
   * Flag to only show files during submission
   * @return submissionattachments
  **/
  @javax.annotation.Nullable
  public Integer getSubmissionattachments() {
    return submissionattachments;
  }

  public void setSubmissionattachments(Integer submissionattachments) {
    this.submissionattachments = submissionattachments;
  }


  public ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner submissiondrafts(Integer submissiondrafts) {
    this.submissiondrafts = submissiondrafts;
    return this;
  }

   /**
   * submissions drafts
   * @return submissiondrafts
  **/
  @javax.annotation.Nullable
  public Integer getSubmissiondrafts() {
    return submissiondrafts;
  }

  public void setSubmissiondrafts(Integer submissiondrafts) {
    this.submissiondrafts = submissiondrafts;
  }


  public ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner submissionstatement(String submissionstatement) {
    this.submissionstatement = submissionstatement;
    return this;
  }

   /**
   * Submission statement formatted.
   * @return submissionstatement
  **/
  @javax.annotation.Nullable
  public String getSubmissionstatement() {
    return submissionstatement;
  }

  public void setSubmissionstatement(String submissionstatement) {
    this.submissionstatement = submissionstatement;
  }


  public ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner submissionstatementformat(Integer submissionstatementformat) {
    this.submissionstatementformat = submissionstatementformat;
    return this;
  }

   /**
   * submissionstatement format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)
   * @return submissionstatementformat
  **/
  @javax.annotation.Nullable
  public Integer getSubmissionstatementformat() {
    return submissionstatementformat;
  }

  public void setSubmissionstatementformat(Integer submissionstatementformat) {
    this.submissionstatementformat = submissionstatementformat;
  }


  public ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner teamsubmission(Integer teamsubmission) {
    this.teamsubmission = teamsubmission;
    return this;
  }

   /**
   * if enabled, students submit as a team
   * @return teamsubmission
  **/
  @javax.annotation.Nullable
  public Integer getTeamsubmission() {
    return teamsubmission;
  }

  public void setTeamsubmission(Integer teamsubmission) {
    this.teamsubmission = teamsubmission;
  }


  public ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner teamsubmissiongroupingid(Integer teamsubmissiongroupingid) {
    this.teamsubmissiongroupingid = teamsubmissiongroupingid;
    return this;
  }

   /**
   * the grouping id for the team submission groups
   * @return teamsubmissiongroupingid
  **/
  @javax.annotation.Nullable
  public Integer getTeamsubmissiongroupingid() {
    return teamsubmissiongroupingid;
  }

  public void setTeamsubmissiongroupingid(Integer teamsubmissiongroupingid) {
    this.teamsubmissiongroupingid = teamsubmissiongroupingid;
  }


  public ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner timelimit(Integer timelimit) {
    this.timelimit = timelimit;
    return this;
  }

   /**
   * Time limit to complete assigment
   * @return timelimit
  **/
  @javax.annotation.Nullable
  public Integer getTimelimit() {
    return timelimit;
  }

  public void setTimelimit(Integer timelimit) {
    this.timelimit = timelimit;
  }


  public ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner timemodified(Integer timemodified) {
    this.timemodified = timemodified;
    return this;
  }

   /**
   * last time assignment was modified
   * @return timemodified
  **/
  @javax.annotation.Nullable
  public Integer getTimemodified() {
    return timemodified;
  }

  public void setTimemodified(Integer timemodified) {
    this.timemodified = timemodified;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner modAssignGetAssignments200ResponseCoursesInnerAssignmentsInner = (ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner) o;
    return Objects.equals(this.activity, modAssignGetAssignments200ResponseCoursesInnerAssignmentsInner.activity) &&
        Objects.equals(this.activityattachments, modAssignGetAssignments200ResponseCoursesInnerAssignmentsInner.activityattachments) &&
        Objects.equals(this.activityformat, modAssignGetAssignments200ResponseCoursesInnerAssignmentsInner.activityformat) &&
        Objects.equals(this.allowsubmissionsfromdate, modAssignGetAssignments200ResponseCoursesInnerAssignmentsInner.allowsubmissionsfromdate) &&
        Objects.equals(this.attemptreopenmethod, modAssignGetAssignments200ResponseCoursesInnerAssignmentsInner.attemptreopenmethod) &&
        Objects.equals(this.blindmarking, modAssignGetAssignments200ResponseCoursesInnerAssignmentsInner.blindmarking) &&
        Objects.equals(this.cmid, modAssignGetAssignments200ResponseCoursesInnerAssignmentsInner.cmid) &&
        Objects.equals(this.completionsubmit, modAssignGetAssignments200ResponseCoursesInnerAssignmentsInner.completionsubmit) &&
        Objects.equals(this.configs, modAssignGetAssignments200ResponseCoursesInnerAssignmentsInner.configs) &&
        Objects.equals(this.course, modAssignGetAssignments200ResponseCoursesInnerAssignmentsInner.course) &&
        Objects.equals(this.cutoffdate, modAssignGetAssignments200ResponseCoursesInnerAssignmentsInner.cutoffdate) &&
        Objects.equals(this.duedate, modAssignGetAssignments200ResponseCoursesInnerAssignmentsInner.duedate) &&
        Objects.equals(this.grade, modAssignGetAssignments200ResponseCoursesInnerAssignmentsInner.grade) &&
        Objects.equals(this.gradingduedate, modAssignGetAssignments200ResponseCoursesInnerAssignmentsInner.gradingduedate) &&
        Objects.equals(this.hidegrader, modAssignGetAssignments200ResponseCoursesInnerAssignmentsInner.hidegrader) &&
        Objects.equals(this.id, modAssignGetAssignments200ResponseCoursesInnerAssignmentsInner.id) &&
        Objects.equals(this.intro, modAssignGetAssignments200ResponseCoursesInnerAssignmentsInner.intro) &&
        Objects.equals(this.introattachments, modAssignGetAssignments200ResponseCoursesInnerAssignmentsInner.introattachments) &&
        Objects.equals(this.introfiles, modAssignGetAssignments200ResponseCoursesInnerAssignmentsInner.introfiles) &&
        Objects.equals(this.introformat, modAssignGetAssignments200ResponseCoursesInnerAssignmentsInner.introformat) &&
        Objects.equals(this.markingallocation, modAssignGetAssignments200ResponseCoursesInnerAssignmentsInner.markingallocation) &&
        Objects.equals(this.markingworkflow, modAssignGetAssignments200ResponseCoursesInnerAssignmentsInner.markingworkflow) &&
        Objects.equals(this.maxattempts, modAssignGetAssignments200ResponseCoursesInnerAssignmentsInner.maxattempts) &&
        Objects.equals(this.name, modAssignGetAssignments200ResponseCoursesInnerAssignmentsInner.name) &&
        Objects.equals(this.nosubmissions, modAssignGetAssignments200ResponseCoursesInnerAssignmentsInner.nosubmissions) &&
        Objects.equals(this.preventsubmissionnotingroup, modAssignGetAssignments200ResponseCoursesInnerAssignmentsInner.preventsubmissionnotingroup) &&
        Objects.equals(this.requireallteammemberssubmit, modAssignGetAssignments200ResponseCoursesInnerAssignmentsInner.requireallteammemberssubmit) &&
        Objects.equals(this.requiresubmissionstatement, modAssignGetAssignments200ResponseCoursesInnerAssignmentsInner.requiresubmissionstatement) &&
        Objects.equals(this.revealidentities, modAssignGetAssignments200ResponseCoursesInnerAssignmentsInner.revealidentities) &&
        Objects.equals(this.sendlatenotifications, modAssignGetAssignments200ResponseCoursesInnerAssignmentsInner.sendlatenotifications) &&
        Objects.equals(this.sendnotifications, modAssignGetAssignments200ResponseCoursesInnerAssignmentsInner.sendnotifications) &&
        Objects.equals(this.sendstudentnotifications, modAssignGetAssignments200ResponseCoursesInnerAssignmentsInner.sendstudentnotifications) &&
        Objects.equals(this.submissionattachments, modAssignGetAssignments200ResponseCoursesInnerAssignmentsInner.submissionattachments) &&
        Objects.equals(this.submissiondrafts, modAssignGetAssignments200ResponseCoursesInnerAssignmentsInner.submissiondrafts) &&
        Objects.equals(this.submissionstatement, modAssignGetAssignments200ResponseCoursesInnerAssignmentsInner.submissionstatement) &&
        Objects.equals(this.submissionstatementformat, modAssignGetAssignments200ResponseCoursesInnerAssignmentsInner.submissionstatementformat) &&
        Objects.equals(this.teamsubmission, modAssignGetAssignments200ResponseCoursesInnerAssignmentsInner.teamsubmission) &&
        Objects.equals(this.teamsubmissiongroupingid, modAssignGetAssignments200ResponseCoursesInnerAssignmentsInner.teamsubmissiongroupingid) &&
        Objects.equals(this.timelimit, modAssignGetAssignments200ResponseCoursesInnerAssignmentsInner.timelimit) &&
        Objects.equals(this.timemodified, modAssignGetAssignments200ResponseCoursesInnerAssignmentsInner.timemodified);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activity, activityattachments, activityformat, allowsubmissionsfromdate, attemptreopenmethod, blindmarking, cmid, completionsubmit, configs, course, cutoffdate, duedate, grade, gradingduedate, hidegrader, id, intro, introattachments, introfiles, introformat, markingallocation, markingworkflow, maxattempts, name, nosubmissions, preventsubmissionnotingroup, requireallteammemberssubmit, requiresubmissionstatement, revealidentities, sendlatenotifications, sendnotifications, sendstudentnotifications, submissionattachments, submissiondrafts, submissionstatement, submissionstatementformat, teamsubmission, teamsubmissiongroupingid, timelimit, timemodified);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner {\n");
    sb.append("    activity: ").append(toIndentedString(activity)).append("\n");
    sb.append("    activityattachments: ").append(toIndentedString(activityattachments)).append("\n");
    sb.append("    activityformat: ").append(toIndentedString(activityformat)).append("\n");
    sb.append("    allowsubmissionsfromdate: ").append(toIndentedString(allowsubmissionsfromdate)).append("\n");
    sb.append("    attemptreopenmethod: ").append(toIndentedString(attemptreopenmethod)).append("\n");
    sb.append("    blindmarking: ").append(toIndentedString(blindmarking)).append("\n");
    sb.append("    cmid: ").append(toIndentedString(cmid)).append("\n");
    sb.append("    completionsubmit: ").append(toIndentedString(completionsubmit)).append("\n");
    sb.append("    configs: ").append(toIndentedString(configs)).append("\n");
    sb.append("    course: ").append(toIndentedString(course)).append("\n");
    sb.append("    cutoffdate: ").append(toIndentedString(cutoffdate)).append("\n");
    sb.append("    duedate: ").append(toIndentedString(duedate)).append("\n");
    sb.append("    grade: ").append(toIndentedString(grade)).append("\n");
    sb.append("    gradingduedate: ").append(toIndentedString(gradingduedate)).append("\n");
    sb.append("    hidegrader: ").append(toIndentedString(hidegrader)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    intro: ").append(toIndentedString(intro)).append("\n");
    sb.append("    introattachments: ").append(toIndentedString(introattachments)).append("\n");
    sb.append("    introfiles: ").append(toIndentedString(introfiles)).append("\n");
    sb.append("    introformat: ").append(toIndentedString(introformat)).append("\n");
    sb.append("    markingallocation: ").append(toIndentedString(markingallocation)).append("\n");
    sb.append("    markingworkflow: ").append(toIndentedString(markingworkflow)).append("\n");
    sb.append("    maxattempts: ").append(toIndentedString(maxattempts)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nosubmissions: ").append(toIndentedString(nosubmissions)).append("\n");
    sb.append("    preventsubmissionnotingroup: ").append(toIndentedString(preventsubmissionnotingroup)).append("\n");
    sb.append("    requireallteammemberssubmit: ").append(toIndentedString(requireallteammemberssubmit)).append("\n");
    sb.append("    requiresubmissionstatement: ").append(toIndentedString(requiresubmissionstatement)).append("\n");
    sb.append("    revealidentities: ").append(toIndentedString(revealidentities)).append("\n");
    sb.append("    sendlatenotifications: ").append(toIndentedString(sendlatenotifications)).append("\n");
    sb.append("    sendnotifications: ").append(toIndentedString(sendnotifications)).append("\n");
    sb.append("    sendstudentnotifications: ").append(toIndentedString(sendstudentnotifications)).append("\n");
    sb.append("    submissionattachments: ").append(toIndentedString(submissionattachments)).append("\n");
    sb.append("    submissiondrafts: ").append(toIndentedString(submissiondrafts)).append("\n");
    sb.append("    submissionstatement: ").append(toIndentedString(submissionstatement)).append("\n");
    sb.append("    submissionstatementformat: ").append(toIndentedString(submissionstatementformat)).append("\n");
    sb.append("    teamsubmission: ").append(toIndentedString(teamsubmission)).append("\n");
    sb.append("    teamsubmissiongroupingid: ").append(toIndentedString(teamsubmissiongroupingid)).append("\n");
    sb.append("    timelimit: ").append(toIndentedString(timelimit)).append("\n");
    sb.append("    timemodified: ").append(toIndentedString(timemodified)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activity");
    openapiFields.add("activityattachments");
    openapiFields.add("activityformat");
    openapiFields.add("allowsubmissionsfromdate");
    openapiFields.add("attemptreopenmethod");
    openapiFields.add("blindmarking");
    openapiFields.add("cmid");
    openapiFields.add("completionsubmit");
    openapiFields.add("configs");
    openapiFields.add("course");
    openapiFields.add("cutoffdate");
    openapiFields.add("duedate");
    openapiFields.add("grade");
    openapiFields.add("gradingduedate");
    openapiFields.add("hidegrader");
    openapiFields.add("id");
    openapiFields.add("intro");
    openapiFields.add("introattachments");
    openapiFields.add("introfiles");
    openapiFields.add("introformat");
    openapiFields.add("markingallocation");
    openapiFields.add("markingworkflow");
    openapiFields.add("maxattempts");
    openapiFields.add("name");
    openapiFields.add("nosubmissions");
    openapiFields.add("preventsubmissionnotingroup");
    openapiFields.add("requireallteammemberssubmit");
    openapiFields.add("requiresubmissionstatement");
    openapiFields.add("revealidentities");
    openapiFields.add("sendlatenotifications");
    openapiFields.add("sendnotifications");
    openapiFields.add("sendstudentnotifications");
    openapiFields.add("submissionattachments");
    openapiFields.add("submissiondrafts");
    openapiFields.add("submissionstatement");
    openapiFields.add("submissionstatementformat");
    openapiFields.add("teamsubmission");
    openapiFields.add("teamsubmissiongroupingid");
    openapiFields.add("timelimit");
    openapiFields.add("timemodified");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner is not found in the empty JSON string", ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("activity") != null && !jsonObj.get("activity").isJsonNull()) && !jsonObj.get("activity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `activity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("activity").toString()));
      }
      if (jsonObj.get("activityattachments") != null && !jsonObj.get("activityattachments").isJsonNull()) {
        JsonArray jsonArrayactivityattachments = jsonObj.getAsJsonArray("activityattachments");
        if (jsonArrayactivityattachments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("activityattachments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `activityattachments` to be an array in the JSON string but got `%s`", jsonObj.get("activityattachments").toString()));
          }

          // validate the optional field `activityattachments` (array)
          for (int i = 0; i < jsonArrayactivityattachments.size(); i++) {
            CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner.validateJsonElement(jsonArrayactivityattachments.get(i));
          };
        }
      }
      if ((jsonObj.get("attemptreopenmethod") != null && !jsonObj.get("attemptreopenmethod").isJsonNull()) && !jsonObj.get("attemptreopenmethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `attemptreopenmethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("attemptreopenmethod").toString()));
      }
      if (jsonObj.get("configs") != null && !jsonObj.get("configs").isJsonNull()) {
        JsonArray jsonArrayconfigs = jsonObj.getAsJsonArray("configs");
        if (jsonArrayconfigs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("configs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `configs` to be an array in the JSON string but got `%s`", jsonObj.get("configs").toString()));
          }

          // validate the optional field `configs` (array)
          for (int i = 0; i < jsonArrayconfigs.size(); i++) {
            ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInnerConfigsInner.validateJsonElement(jsonArrayconfigs.get(i));
          };
        }
      }
      if ((jsonObj.get("intro") != null && !jsonObj.get("intro").isJsonNull()) && !jsonObj.get("intro").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `intro` to be a primitive type in the JSON string but got `%s`", jsonObj.get("intro").toString()));
      }
      if (jsonObj.get("introattachments") != null && !jsonObj.get("introattachments").isJsonNull()) {
        JsonArray jsonArrayintroattachments = jsonObj.getAsJsonArray("introattachments");
        if (jsonArrayintroattachments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("introattachments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `introattachments` to be an array in the JSON string but got `%s`", jsonObj.get("introattachments").toString()));
          }

          // validate the optional field `introattachments` (array)
          for (int i = 0; i < jsonArrayintroattachments.size(); i++) {
            CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner.validateJsonElement(jsonArrayintroattachments.get(i));
          };
        }
      }
      if (jsonObj.get("introfiles") != null && !jsonObj.get("introfiles").isJsonNull()) {
        JsonArray jsonArrayintrofiles = jsonObj.getAsJsonArray("introfiles");
        if (jsonArrayintrofiles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("introfiles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `introfiles` to be an array in the JSON string but got `%s`", jsonObj.get("introfiles").toString()));
          }

          // validate the optional field `introfiles` (array)
          for (int i = 0; i < jsonArrayintrofiles.size(); i++) {
            CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner.validateJsonElement(jsonArrayintrofiles.get(i));
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("submissionstatement") != null && !jsonObj.get("submissionstatement").isJsonNull()) && !jsonObj.get("submissionstatement").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `submissionstatement` to be a primitive type in the JSON string but got `%s`", jsonObj.get("submissionstatement").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner>() {
           @Override
           public void write(JsonWriter out, ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner
  * @throws IOException if the JSON string is invalid with respect to ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner
  */
  public static ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner.class);
  }

 /**
  * Convert an instance of ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

