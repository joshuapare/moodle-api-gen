/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.joshuapare.moodleclient;

import com.joshuapare.ApiCallback;
import com.joshuapare.ApiClient;
import com.joshuapare.ApiException;
import com.joshuapare.ApiResponse;
import com.joshuapare.Configuration;
import com.joshuapare.Pair;
import com.joshuapare.ProgressRequestBody;
import com.joshuapare.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CoreCalendarDeleteSubscription200Response;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest;
import org.openapitools.client.model.ModFeedbackGetAnalysis200Response;
import org.openapitools.client.model.ModFeedbackGetAnalysisRequest;
import org.openapitools.client.model.ModFeedbackGetCurrentCompletedTmp200Response;
import org.openapitools.client.model.ModFeedbackGetCurrentCompletedTmpRequest;
import org.openapitools.client.model.ModFeedbackGetFeedbackAccessInformation200Response;
import org.openapitools.client.model.ModFeedbackGetFeedbackAccessInformationRequest;
import org.openapitools.client.model.ModFeedbackGetFeedbacksByCourses200Response;
import org.openapitools.client.model.ModFeedbackGetFinishedResponses200Response;
import org.openapitools.client.model.ModFeedbackGetFinishedResponsesRequest;
import org.openapitools.client.model.ModFeedbackGetItems200Response;
import org.openapitools.client.model.ModFeedbackGetLastCompleted200Response;
import org.openapitools.client.model.ModFeedbackGetNonRespondents200Response;
import org.openapitools.client.model.ModFeedbackGetNonRespondentsRequest;
import org.openapitools.client.model.ModFeedbackGetPageItems200Response;
import org.openapitools.client.model.ModFeedbackGetPageItemsRequest;
import org.openapitools.client.model.ModFeedbackGetResponsesAnalysis200Response;
import org.openapitools.client.model.ModFeedbackGetResponsesAnalysisRequest;
import org.openapitools.client.model.ModFeedbackGetUnfinishedResponses200Response;
import org.openapitools.client.model.ModFeedbackLaunchFeedback200Response;
import org.openapitools.client.model.ModFeedbackProcessPage200Response;
import org.openapitools.client.model.ModFeedbackProcessPageRequest;
import org.openapitools.client.model.ModFeedbackViewFeedbackRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ModFeedbackApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ModFeedbackApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ModFeedbackApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for modFeedbackGetAnalysis
     * @param modFeedbackGetAnalysisRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modFeedbackGetAnalysisCall(ModFeedbackGetAnalysisRequest modFeedbackGetAnalysisRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modFeedbackGetAnalysisRequest;

        // create path and map variables
        String localVarPath = "/mod_feedback_get_analysis";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modFeedbackGetAnalysisValidateBeforeCall(ModFeedbackGetAnalysisRequest modFeedbackGetAnalysisRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modFeedbackGetAnalysisRequest' is set
        if (modFeedbackGetAnalysisRequest == null) {
            throw new ApiException("Missing the required parameter 'modFeedbackGetAnalysisRequest' when calling modFeedbackGetAnalysis(Async)");
        }

        return modFeedbackGetAnalysisCall(modFeedbackGetAnalysisRequest, _callback);

    }

    /**
     * Retrieves the feedback analysis.
     * Retrieves the feedback analysis.
     * @param modFeedbackGetAnalysisRequest  (required)
     * @return ModFeedbackGetAnalysis200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModFeedbackGetAnalysis200Response modFeedbackGetAnalysis(ModFeedbackGetAnalysisRequest modFeedbackGetAnalysisRequest) throws ApiException {
        ApiResponse<ModFeedbackGetAnalysis200Response> localVarResp = modFeedbackGetAnalysisWithHttpInfo(modFeedbackGetAnalysisRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieves the feedback analysis.
     * Retrieves the feedback analysis.
     * @param modFeedbackGetAnalysisRequest  (required)
     * @return ApiResponse&lt;ModFeedbackGetAnalysis200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModFeedbackGetAnalysis200Response> modFeedbackGetAnalysisWithHttpInfo(ModFeedbackGetAnalysisRequest modFeedbackGetAnalysisRequest) throws ApiException {
        okhttp3.Call localVarCall = modFeedbackGetAnalysisValidateBeforeCall(modFeedbackGetAnalysisRequest, null);
        Type localVarReturnType = new TypeToken<ModFeedbackGetAnalysis200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves the feedback analysis. (asynchronously)
     * Retrieves the feedback analysis.
     * @param modFeedbackGetAnalysisRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modFeedbackGetAnalysisAsync(ModFeedbackGetAnalysisRequest modFeedbackGetAnalysisRequest, final ApiCallback<ModFeedbackGetAnalysis200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modFeedbackGetAnalysisValidateBeforeCall(modFeedbackGetAnalysisRequest, _callback);
        Type localVarReturnType = new TypeToken<ModFeedbackGetAnalysis200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modFeedbackGetCurrentCompletedTmp
     * @param modFeedbackGetCurrentCompletedTmpRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modFeedbackGetCurrentCompletedTmpCall(ModFeedbackGetCurrentCompletedTmpRequest modFeedbackGetCurrentCompletedTmpRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modFeedbackGetCurrentCompletedTmpRequest;

        // create path and map variables
        String localVarPath = "/mod_feedback_get_current_completed_tmp";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modFeedbackGetCurrentCompletedTmpValidateBeforeCall(ModFeedbackGetCurrentCompletedTmpRequest modFeedbackGetCurrentCompletedTmpRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modFeedbackGetCurrentCompletedTmpRequest' is set
        if (modFeedbackGetCurrentCompletedTmpRequest == null) {
            throw new ApiException("Missing the required parameter 'modFeedbackGetCurrentCompletedTmpRequest' when calling modFeedbackGetCurrentCompletedTmp(Async)");
        }

        return modFeedbackGetCurrentCompletedTmpCall(modFeedbackGetCurrentCompletedTmpRequest, _callback);

    }

    /**
     * Returns the temporary completion record for the current user.
     * Returns the temporary completion record for the current user.
     * @param modFeedbackGetCurrentCompletedTmpRequest  (required)
     * @return ModFeedbackGetCurrentCompletedTmp200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModFeedbackGetCurrentCompletedTmp200Response modFeedbackGetCurrentCompletedTmp(ModFeedbackGetCurrentCompletedTmpRequest modFeedbackGetCurrentCompletedTmpRequest) throws ApiException {
        ApiResponse<ModFeedbackGetCurrentCompletedTmp200Response> localVarResp = modFeedbackGetCurrentCompletedTmpWithHttpInfo(modFeedbackGetCurrentCompletedTmpRequest);
        return localVarResp.getData();
    }

    /**
     * Returns the temporary completion record for the current user.
     * Returns the temporary completion record for the current user.
     * @param modFeedbackGetCurrentCompletedTmpRequest  (required)
     * @return ApiResponse&lt;ModFeedbackGetCurrentCompletedTmp200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModFeedbackGetCurrentCompletedTmp200Response> modFeedbackGetCurrentCompletedTmpWithHttpInfo(ModFeedbackGetCurrentCompletedTmpRequest modFeedbackGetCurrentCompletedTmpRequest) throws ApiException {
        okhttp3.Call localVarCall = modFeedbackGetCurrentCompletedTmpValidateBeforeCall(modFeedbackGetCurrentCompletedTmpRequest, null);
        Type localVarReturnType = new TypeToken<ModFeedbackGetCurrentCompletedTmp200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the temporary completion record for the current user. (asynchronously)
     * Returns the temporary completion record for the current user.
     * @param modFeedbackGetCurrentCompletedTmpRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modFeedbackGetCurrentCompletedTmpAsync(ModFeedbackGetCurrentCompletedTmpRequest modFeedbackGetCurrentCompletedTmpRequest, final ApiCallback<ModFeedbackGetCurrentCompletedTmp200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modFeedbackGetCurrentCompletedTmpValidateBeforeCall(modFeedbackGetCurrentCompletedTmpRequest, _callback);
        Type localVarReturnType = new TypeToken<ModFeedbackGetCurrentCompletedTmp200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modFeedbackGetFeedbackAccessInformation
     * @param modFeedbackGetFeedbackAccessInformationRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modFeedbackGetFeedbackAccessInformationCall(ModFeedbackGetFeedbackAccessInformationRequest modFeedbackGetFeedbackAccessInformationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modFeedbackGetFeedbackAccessInformationRequest;

        // create path and map variables
        String localVarPath = "/mod_feedback_get_feedback_access_information";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modFeedbackGetFeedbackAccessInformationValidateBeforeCall(ModFeedbackGetFeedbackAccessInformationRequest modFeedbackGetFeedbackAccessInformationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modFeedbackGetFeedbackAccessInformationRequest' is set
        if (modFeedbackGetFeedbackAccessInformationRequest == null) {
            throw new ApiException("Missing the required parameter 'modFeedbackGetFeedbackAccessInformationRequest' when calling modFeedbackGetFeedbackAccessInformation(Async)");
        }

        return modFeedbackGetFeedbackAccessInformationCall(modFeedbackGetFeedbackAccessInformationRequest, _callback);

    }

    /**
     * Return access information for a given feedback.
     * Return access information for a given feedback.
     * @param modFeedbackGetFeedbackAccessInformationRequest  (required)
     * @return ModFeedbackGetFeedbackAccessInformation200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModFeedbackGetFeedbackAccessInformation200Response modFeedbackGetFeedbackAccessInformation(ModFeedbackGetFeedbackAccessInformationRequest modFeedbackGetFeedbackAccessInformationRequest) throws ApiException {
        ApiResponse<ModFeedbackGetFeedbackAccessInformation200Response> localVarResp = modFeedbackGetFeedbackAccessInformationWithHttpInfo(modFeedbackGetFeedbackAccessInformationRequest);
        return localVarResp.getData();
    }

    /**
     * Return access information for a given feedback.
     * Return access information for a given feedback.
     * @param modFeedbackGetFeedbackAccessInformationRequest  (required)
     * @return ApiResponse&lt;ModFeedbackGetFeedbackAccessInformation200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModFeedbackGetFeedbackAccessInformation200Response> modFeedbackGetFeedbackAccessInformationWithHttpInfo(ModFeedbackGetFeedbackAccessInformationRequest modFeedbackGetFeedbackAccessInformationRequest) throws ApiException {
        okhttp3.Call localVarCall = modFeedbackGetFeedbackAccessInformationValidateBeforeCall(modFeedbackGetFeedbackAccessInformationRequest, null);
        Type localVarReturnType = new TypeToken<ModFeedbackGetFeedbackAccessInformation200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return access information for a given feedback. (asynchronously)
     * Return access information for a given feedback.
     * @param modFeedbackGetFeedbackAccessInformationRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modFeedbackGetFeedbackAccessInformationAsync(ModFeedbackGetFeedbackAccessInformationRequest modFeedbackGetFeedbackAccessInformationRequest, final ApiCallback<ModFeedbackGetFeedbackAccessInformation200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modFeedbackGetFeedbackAccessInformationValidateBeforeCall(modFeedbackGetFeedbackAccessInformationRequest, _callback);
        Type localVarReturnType = new TypeToken<ModFeedbackGetFeedbackAccessInformation200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modFeedbackGetFeedbacksByCourses
     * @param modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modFeedbackGetFeedbacksByCoursesCall(ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest;

        // create path and map variables
        String localVarPath = "/mod_feedback_get_feedbacks_by_courses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modFeedbackGetFeedbacksByCoursesValidateBeforeCall(ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest' is set
        if (modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest == null) {
            throw new ApiException("Missing the required parameter 'modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest' when calling modFeedbackGetFeedbacksByCourses(Async)");
        }

        return modFeedbackGetFeedbacksByCoursesCall(modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest, _callback);

    }

    /**
     * Returns a list of feedbacks in a provided list of courses, if no list is provided all feedbacks that                             the user can view will be returned.
     * Returns a list of feedbacks in a provided list of courses, if no list is provided all feedbacks that                             the user can view will be returned.
     * @param modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest  (required)
     * @return ModFeedbackGetFeedbacksByCourses200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModFeedbackGetFeedbacksByCourses200Response modFeedbackGetFeedbacksByCourses(ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest) throws ApiException {
        ApiResponse<ModFeedbackGetFeedbacksByCourses200Response> localVarResp = modFeedbackGetFeedbacksByCoursesWithHttpInfo(modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest);
        return localVarResp.getData();
    }

    /**
     * Returns a list of feedbacks in a provided list of courses, if no list is provided all feedbacks that                             the user can view will be returned.
     * Returns a list of feedbacks in a provided list of courses, if no list is provided all feedbacks that                             the user can view will be returned.
     * @param modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest  (required)
     * @return ApiResponse&lt;ModFeedbackGetFeedbacksByCourses200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModFeedbackGetFeedbacksByCourses200Response> modFeedbackGetFeedbacksByCoursesWithHttpInfo(ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest) throws ApiException {
        okhttp3.Call localVarCall = modFeedbackGetFeedbacksByCoursesValidateBeforeCall(modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest, null);
        Type localVarReturnType = new TypeToken<ModFeedbackGetFeedbacksByCourses200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a list of feedbacks in a provided list of courses, if no list is provided all feedbacks that                             the user can view will be returned. (asynchronously)
     * Returns a list of feedbacks in a provided list of courses, if no list is provided all feedbacks that                             the user can view will be returned.
     * @param modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modFeedbackGetFeedbacksByCoursesAsync(ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest, final ApiCallback<ModFeedbackGetFeedbacksByCourses200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modFeedbackGetFeedbacksByCoursesValidateBeforeCall(modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest, _callback);
        Type localVarReturnType = new TypeToken<ModFeedbackGetFeedbacksByCourses200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modFeedbackGetFinishedResponses
     * @param modFeedbackGetFinishedResponsesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modFeedbackGetFinishedResponsesCall(ModFeedbackGetFinishedResponsesRequest modFeedbackGetFinishedResponsesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modFeedbackGetFinishedResponsesRequest;

        // create path and map variables
        String localVarPath = "/mod_feedback_get_finished_responses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modFeedbackGetFinishedResponsesValidateBeforeCall(ModFeedbackGetFinishedResponsesRequest modFeedbackGetFinishedResponsesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modFeedbackGetFinishedResponsesRequest' is set
        if (modFeedbackGetFinishedResponsesRequest == null) {
            throw new ApiException("Missing the required parameter 'modFeedbackGetFinishedResponsesRequest' when calling modFeedbackGetFinishedResponses(Async)");
        }

        return modFeedbackGetFinishedResponsesCall(modFeedbackGetFinishedResponsesRequest, _callback);

    }

    /**
     * Retrieves responses from the last finished attempt.
     * Retrieves responses from the last finished attempt.
     * @param modFeedbackGetFinishedResponsesRequest  (required)
     * @return ModFeedbackGetFinishedResponses200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModFeedbackGetFinishedResponses200Response modFeedbackGetFinishedResponses(ModFeedbackGetFinishedResponsesRequest modFeedbackGetFinishedResponsesRequest) throws ApiException {
        ApiResponse<ModFeedbackGetFinishedResponses200Response> localVarResp = modFeedbackGetFinishedResponsesWithHttpInfo(modFeedbackGetFinishedResponsesRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieves responses from the last finished attempt.
     * Retrieves responses from the last finished attempt.
     * @param modFeedbackGetFinishedResponsesRequest  (required)
     * @return ApiResponse&lt;ModFeedbackGetFinishedResponses200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModFeedbackGetFinishedResponses200Response> modFeedbackGetFinishedResponsesWithHttpInfo(ModFeedbackGetFinishedResponsesRequest modFeedbackGetFinishedResponsesRequest) throws ApiException {
        okhttp3.Call localVarCall = modFeedbackGetFinishedResponsesValidateBeforeCall(modFeedbackGetFinishedResponsesRequest, null);
        Type localVarReturnType = new TypeToken<ModFeedbackGetFinishedResponses200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves responses from the last finished attempt. (asynchronously)
     * Retrieves responses from the last finished attempt.
     * @param modFeedbackGetFinishedResponsesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modFeedbackGetFinishedResponsesAsync(ModFeedbackGetFinishedResponsesRequest modFeedbackGetFinishedResponsesRequest, final ApiCallback<ModFeedbackGetFinishedResponses200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modFeedbackGetFinishedResponsesValidateBeforeCall(modFeedbackGetFinishedResponsesRequest, _callback);
        Type localVarReturnType = new TypeToken<ModFeedbackGetFinishedResponses200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modFeedbackGetItems
     * @param modFeedbackGetCurrentCompletedTmpRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modFeedbackGetItemsCall(ModFeedbackGetCurrentCompletedTmpRequest modFeedbackGetCurrentCompletedTmpRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modFeedbackGetCurrentCompletedTmpRequest;

        // create path and map variables
        String localVarPath = "/mod_feedback_get_items";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modFeedbackGetItemsValidateBeforeCall(ModFeedbackGetCurrentCompletedTmpRequest modFeedbackGetCurrentCompletedTmpRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modFeedbackGetCurrentCompletedTmpRequest' is set
        if (modFeedbackGetCurrentCompletedTmpRequest == null) {
            throw new ApiException("Missing the required parameter 'modFeedbackGetCurrentCompletedTmpRequest' when calling modFeedbackGetItems(Async)");
        }

        return modFeedbackGetItemsCall(modFeedbackGetCurrentCompletedTmpRequest, _callback);

    }

    /**
     * Returns the items (questions) in the given feedback.
     * Returns the items (questions) in the given feedback.
     * @param modFeedbackGetCurrentCompletedTmpRequest  (required)
     * @return ModFeedbackGetItems200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModFeedbackGetItems200Response modFeedbackGetItems(ModFeedbackGetCurrentCompletedTmpRequest modFeedbackGetCurrentCompletedTmpRequest) throws ApiException {
        ApiResponse<ModFeedbackGetItems200Response> localVarResp = modFeedbackGetItemsWithHttpInfo(modFeedbackGetCurrentCompletedTmpRequest);
        return localVarResp.getData();
    }

    /**
     * Returns the items (questions) in the given feedback.
     * Returns the items (questions) in the given feedback.
     * @param modFeedbackGetCurrentCompletedTmpRequest  (required)
     * @return ApiResponse&lt;ModFeedbackGetItems200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModFeedbackGetItems200Response> modFeedbackGetItemsWithHttpInfo(ModFeedbackGetCurrentCompletedTmpRequest modFeedbackGetCurrentCompletedTmpRequest) throws ApiException {
        okhttp3.Call localVarCall = modFeedbackGetItemsValidateBeforeCall(modFeedbackGetCurrentCompletedTmpRequest, null);
        Type localVarReturnType = new TypeToken<ModFeedbackGetItems200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the items (questions) in the given feedback. (asynchronously)
     * Returns the items (questions) in the given feedback.
     * @param modFeedbackGetCurrentCompletedTmpRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modFeedbackGetItemsAsync(ModFeedbackGetCurrentCompletedTmpRequest modFeedbackGetCurrentCompletedTmpRequest, final ApiCallback<ModFeedbackGetItems200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modFeedbackGetItemsValidateBeforeCall(modFeedbackGetCurrentCompletedTmpRequest, _callback);
        Type localVarReturnType = new TypeToken<ModFeedbackGetItems200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modFeedbackGetLastCompleted
     * @param modFeedbackGetCurrentCompletedTmpRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modFeedbackGetLastCompletedCall(ModFeedbackGetCurrentCompletedTmpRequest modFeedbackGetCurrentCompletedTmpRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modFeedbackGetCurrentCompletedTmpRequest;

        // create path and map variables
        String localVarPath = "/mod_feedback_get_last_completed";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modFeedbackGetLastCompletedValidateBeforeCall(ModFeedbackGetCurrentCompletedTmpRequest modFeedbackGetCurrentCompletedTmpRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modFeedbackGetCurrentCompletedTmpRequest' is set
        if (modFeedbackGetCurrentCompletedTmpRequest == null) {
            throw new ApiException("Missing the required parameter 'modFeedbackGetCurrentCompletedTmpRequest' when calling modFeedbackGetLastCompleted(Async)");
        }

        return modFeedbackGetLastCompletedCall(modFeedbackGetCurrentCompletedTmpRequest, _callback);

    }

    /**
     * Retrieves the last completion record for the current user.
     * Retrieves the last completion record for the current user.
     * @param modFeedbackGetCurrentCompletedTmpRequest  (required)
     * @return ModFeedbackGetLastCompleted200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModFeedbackGetLastCompleted200Response modFeedbackGetLastCompleted(ModFeedbackGetCurrentCompletedTmpRequest modFeedbackGetCurrentCompletedTmpRequest) throws ApiException {
        ApiResponse<ModFeedbackGetLastCompleted200Response> localVarResp = modFeedbackGetLastCompletedWithHttpInfo(modFeedbackGetCurrentCompletedTmpRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieves the last completion record for the current user.
     * Retrieves the last completion record for the current user.
     * @param modFeedbackGetCurrentCompletedTmpRequest  (required)
     * @return ApiResponse&lt;ModFeedbackGetLastCompleted200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModFeedbackGetLastCompleted200Response> modFeedbackGetLastCompletedWithHttpInfo(ModFeedbackGetCurrentCompletedTmpRequest modFeedbackGetCurrentCompletedTmpRequest) throws ApiException {
        okhttp3.Call localVarCall = modFeedbackGetLastCompletedValidateBeforeCall(modFeedbackGetCurrentCompletedTmpRequest, null);
        Type localVarReturnType = new TypeToken<ModFeedbackGetLastCompleted200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves the last completion record for the current user. (asynchronously)
     * Retrieves the last completion record for the current user.
     * @param modFeedbackGetCurrentCompletedTmpRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modFeedbackGetLastCompletedAsync(ModFeedbackGetCurrentCompletedTmpRequest modFeedbackGetCurrentCompletedTmpRequest, final ApiCallback<ModFeedbackGetLastCompleted200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modFeedbackGetLastCompletedValidateBeforeCall(modFeedbackGetCurrentCompletedTmpRequest, _callback);
        Type localVarReturnType = new TypeToken<ModFeedbackGetLastCompleted200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modFeedbackGetNonRespondents
     * @param modFeedbackGetNonRespondentsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modFeedbackGetNonRespondentsCall(ModFeedbackGetNonRespondentsRequest modFeedbackGetNonRespondentsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modFeedbackGetNonRespondentsRequest;

        // create path and map variables
        String localVarPath = "/mod_feedback_get_non_respondents";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modFeedbackGetNonRespondentsValidateBeforeCall(ModFeedbackGetNonRespondentsRequest modFeedbackGetNonRespondentsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modFeedbackGetNonRespondentsRequest' is set
        if (modFeedbackGetNonRespondentsRequest == null) {
            throw new ApiException("Missing the required parameter 'modFeedbackGetNonRespondentsRequest' when calling modFeedbackGetNonRespondents(Async)");
        }

        return modFeedbackGetNonRespondentsCall(modFeedbackGetNonRespondentsRequest, _callback);

    }

    /**
     * Retrieves a list of students who didn&#39;t submit the feedback.
     * Retrieves a list of students who didn&#39;t submit the feedback.
     * @param modFeedbackGetNonRespondentsRequest  (required)
     * @return ModFeedbackGetNonRespondents200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModFeedbackGetNonRespondents200Response modFeedbackGetNonRespondents(ModFeedbackGetNonRespondentsRequest modFeedbackGetNonRespondentsRequest) throws ApiException {
        ApiResponse<ModFeedbackGetNonRespondents200Response> localVarResp = modFeedbackGetNonRespondentsWithHttpInfo(modFeedbackGetNonRespondentsRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieves a list of students who didn&#39;t submit the feedback.
     * Retrieves a list of students who didn&#39;t submit the feedback.
     * @param modFeedbackGetNonRespondentsRequest  (required)
     * @return ApiResponse&lt;ModFeedbackGetNonRespondents200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModFeedbackGetNonRespondents200Response> modFeedbackGetNonRespondentsWithHttpInfo(ModFeedbackGetNonRespondentsRequest modFeedbackGetNonRespondentsRequest) throws ApiException {
        okhttp3.Call localVarCall = modFeedbackGetNonRespondentsValidateBeforeCall(modFeedbackGetNonRespondentsRequest, null);
        Type localVarReturnType = new TypeToken<ModFeedbackGetNonRespondents200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a list of students who didn&#39;t submit the feedback. (asynchronously)
     * Retrieves a list of students who didn&#39;t submit the feedback.
     * @param modFeedbackGetNonRespondentsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modFeedbackGetNonRespondentsAsync(ModFeedbackGetNonRespondentsRequest modFeedbackGetNonRespondentsRequest, final ApiCallback<ModFeedbackGetNonRespondents200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modFeedbackGetNonRespondentsValidateBeforeCall(modFeedbackGetNonRespondentsRequest, _callback);
        Type localVarReturnType = new TypeToken<ModFeedbackGetNonRespondents200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modFeedbackGetPageItems
     * @param modFeedbackGetPageItemsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modFeedbackGetPageItemsCall(ModFeedbackGetPageItemsRequest modFeedbackGetPageItemsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modFeedbackGetPageItemsRequest;

        // create path and map variables
        String localVarPath = "/mod_feedback_get_page_items";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modFeedbackGetPageItemsValidateBeforeCall(ModFeedbackGetPageItemsRequest modFeedbackGetPageItemsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modFeedbackGetPageItemsRequest' is set
        if (modFeedbackGetPageItemsRequest == null) {
            throw new ApiException("Missing the required parameter 'modFeedbackGetPageItemsRequest' when calling modFeedbackGetPageItems(Async)");
        }

        return modFeedbackGetPageItemsCall(modFeedbackGetPageItemsRequest, _callback);

    }

    /**
     * Get a single feedback page items.
     * Get a single feedback page items.
     * @param modFeedbackGetPageItemsRequest  (required)
     * @return ModFeedbackGetPageItems200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModFeedbackGetPageItems200Response modFeedbackGetPageItems(ModFeedbackGetPageItemsRequest modFeedbackGetPageItemsRequest) throws ApiException {
        ApiResponse<ModFeedbackGetPageItems200Response> localVarResp = modFeedbackGetPageItemsWithHttpInfo(modFeedbackGetPageItemsRequest);
        return localVarResp.getData();
    }

    /**
     * Get a single feedback page items.
     * Get a single feedback page items.
     * @param modFeedbackGetPageItemsRequest  (required)
     * @return ApiResponse&lt;ModFeedbackGetPageItems200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModFeedbackGetPageItems200Response> modFeedbackGetPageItemsWithHttpInfo(ModFeedbackGetPageItemsRequest modFeedbackGetPageItemsRequest) throws ApiException {
        okhttp3.Call localVarCall = modFeedbackGetPageItemsValidateBeforeCall(modFeedbackGetPageItemsRequest, null);
        Type localVarReturnType = new TypeToken<ModFeedbackGetPageItems200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a single feedback page items. (asynchronously)
     * Get a single feedback page items.
     * @param modFeedbackGetPageItemsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modFeedbackGetPageItemsAsync(ModFeedbackGetPageItemsRequest modFeedbackGetPageItemsRequest, final ApiCallback<ModFeedbackGetPageItems200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modFeedbackGetPageItemsValidateBeforeCall(modFeedbackGetPageItemsRequest, _callback);
        Type localVarReturnType = new TypeToken<ModFeedbackGetPageItems200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modFeedbackGetResponsesAnalysis
     * @param modFeedbackGetResponsesAnalysisRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modFeedbackGetResponsesAnalysisCall(ModFeedbackGetResponsesAnalysisRequest modFeedbackGetResponsesAnalysisRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modFeedbackGetResponsesAnalysisRequest;

        // create path and map variables
        String localVarPath = "/mod_feedback_get_responses_analysis";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modFeedbackGetResponsesAnalysisValidateBeforeCall(ModFeedbackGetResponsesAnalysisRequest modFeedbackGetResponsesAnalysisRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modFeedbackGetResponsesAnalysisRequest' is set
        if (modFeedbackGetResponsesAnalysisRequest == null) {
            throw new ApiException("Missing the required parameter 'modFeedbackGetResponsesAnalysisRequest' when calling modFeedbackGetResponsesAnalysis(Async)");
        }

        return modFeedbackGetResponsesAnalysisCall(modFeedbackGetResponsesAnalysisRequest, _callback);

    }

    /**
     * Return the feedback user responses analysis.
     * Return the feedback user responses analysis.
     * @param modFeedbackGetResponsesAnalysisRequest  (required)
     * @return ModFeedbackGetResponsesAnalysis200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModFeedbackGetResponsesAnalysis200Response modFeedbackGetResponsesAnalysis(ModFeedbackGetResponsesAnalysisRequest modFeedbackGetResponsesAnalysisRequest) throws ApiException {
        ApiResponse<ModFeedbackGetResponsesAnalysis200Response> localVarResp = modFeedbackGetResponsesAnalysisWithHttpInfo(modFeedbackGetResponsesAnalysisRequest);
        return localVarResp.getData();
    }

    /**
     * Return the feedback user responses analysis.
     * Return the feedback user responses analysis.
     * @param modFeedbackGetResponsesAnalysisRequest  (required)
     * @return ApiResponse&lt;ModFeedbackGetResponsesAnalysis200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModFeedbackGetResponsesAnalysis200Response> modFeedbackGetResponsesAnalysisWithHttpInfo(ModFeedbackGetResponsesAnalysisRequest modFeedbackGetResponsesAnalysisRequest) throws ApiException {
        okhttp3.Call localVarCall = modFeedbackGetResponsesAnalysisValidateBeforeCall(modFeedbackGetResponsesAnalysisRequest, null);
        Type localVarReturnType = new TypeToken<ModFeedbackGetResponsesAnalysis200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the feedback user responses analysis. (asynchronously)
     * Return the feedback user responses analysis.
     * @param modFeedbackGetResponsesAnalysisRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modFeedbackGetResponsesAnalysisAsync(ModFeedbackGetResponsesAnalysisRequest modFeedbackGetResponsesAnalysisRequest, final ApiCallback<ModFeedbackGetResponsesAnalysis200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modFeedbackGetResponsesAnalysisValidateBeforeCall(modFeedbackGetResponsesAnalysisRequest, _callback);
        Type localVarReturnType = new TypeToken<ModFeedbackGetResponsesAnalysis200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modFeedbackGetUnfinishedResponses
     * @param modFeedbackGetFinishedResponsesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modFeedbackGetUnfinishedResponsesCall(ModFeedbackGetFinishedResponsesRequest modFeedbackGetFinishedResponsesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modFeedbackGetFinishedResponsesRequest;

        // create path and map variables
        String localVarPath = "/mod_feedback_get_unfinished_responses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modFeedbackGetUnfinishedResponsesValidateBeforeCall(ModFeedbackGetFinishedResponsesRequest modFeedbackGetFinishedResponsesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modFeedbackGetFinishedResponsesRequest' is set
        if (modFeedbackGetFinishedResponsesRequest == null) {
            throw new ApiException("Missing the required parameter 'modFeedbackGetFinishedResponsesRequest' when calling modFeedbackGetUnfinishedResponses(Async)");
        }

        return modFeedbackGetUnfinishedResponsesCall(modFeedbackGetFinishedResponsesRequest, _callback);

    }

    /**
     * Retrieves responses from the current unfinished attempt.
     * Retrieves responses from the current unfinished attempt.
     * @param modFeedbackGetFinishedResponsesRequest  (required)
     * @return ModFeedbackGetUnfinishedResponses200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModFeedbackGetUnfinishedResponses200Response modFeedbackGetUnfinishedResponses(ModFeedbackGetFinishedResponsesRequest modFeedbackGetFinishedResponsesRequest) throws ApiException {
        ApiResponse<ModFeedbackGetUnfinishedResponses200Response> localVarResp = modFeedbackGetUnfinishedResponsesWithHttpInfo(modFeedbackGetFinishedResponsesRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieves responses from the current unfinished attempt.
     * Retrieves responses from the current unfinished attempt.
     * @param modFeedbackGetFinishedResponsesRequest  (required)
     * @return ApiResponse&lt;ModFeedbackGetUnfinishedResponses200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModFeedbackGetUnfinishedResponses200Response> modFeedbackGetUnfinishedResponsesWithHttpInfo(ModFeedbackGetFinishedResponsesRequest modFeedbackGetFinishedResponsesRequest) throws ApiException {
        okhttp3.Call localVarCall = modFeedbackGetUnfinishedResponsesValidateBeforeCall(modFeedbackGetFinishedResponsesRequest, null);
        Type localVarReturnType = new TypeToken<ModFeedbackGetUnfinishedResponses200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves responses from the current unfinished attempt. (asynchronously)
     * Retrieves responses from the current unfinished attempt.
     * @param modFeedbackGetFinishedResponsesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modFeedbackGetUnfinishedResponsesAsync(ModFeedbackGetFinishedResponsesRequest modFeedbackGetFinishedResponsesRequest, final ApiCallback<ModFeedbackGetUnfinishedResponses200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modFeedbackGetUnfinishedResponsesValidateBeforeCall(modFeedbackGetFinishedResponsesRequest, _callback);
        Type localVarReturnType = new TypeToken<ModFeedbackGetUnfinishedResponses200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modFeedbackLaunchFeedback
     * @param modFeedbackGetCurrentCompletedTmpRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modFeedbackLaunchFeedbackCall(ModFeedbackGetCurrentCompletedTmpRequest modFeedbackGetCurrentCompletedTmpRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modFeedbackGetCurrentCompletedTmpRequest;

        // create path and map variables
        String localVarPath = "/mod_feedback_launch_feedback";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modFeedbackLaunchFeedbackValidateBeforeCall(ModFeedbackGetCurrentCompletedTmpRequest modFeedbackGetCurrentCompletedTmpRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modFeedbackGetCurrentCompletedTmpRequest' is set
        if (modFeedbackGetCurrentCompletedTmpRequest == null) {
            throw new ApiException("Missing the required parameter 'modFeedbackGetCurrentCompletedTmpRequest' when calling modFeedbackLaunchFeedback(Async)");
        }

        return modFeedbackLaunchFeedbackCall(modFeedbackGetCurrentCompletedTmpRequest, _callback);

    }

    /**
     * Starts or continues a feedback submission.
     * Starts or continues a feedback submission.
     * @param modFeedbackGetCurrentCompletedTmpRequest  (required)
     * @return ModFeedbackLaunchFeedback200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModFeedbackLaunchFeedback200Response modFeedbackLaunchFeedback(ModFeedbackGetCurrentCompletedTmpRequest modFeedbackGetCurrentCompletedTmpRequest) throws ApiException {
        ApiResponse<ModFeedbackLaunchFeedback200Response> localVarResp = modFeedbackLaunchFeedbackWithHttpInfo(modFeedbackGetCurrentCompletedTmpRequest);
        return localVarResp.getData();
    }

    /**
     * Starts or continues a feedback submission.
     * Starts or continues a feedback submission.
     * @param modFeedbackGetCurrentCompletedTmpRequest  (required)
     * @return ApiResponse&lt;ModFeedbackLaunchFeedback200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModFeedbackLaunchFeedback200Response> modFeedbackLaunchFeedbackWithHttpInfo(ModFeedbackGetCurrentCompletedTmpRequest modFeedbackGetCurrentCompletedTmpRequest) throws ApiException {
        okhttp3.Call localVarCall = modFeedbackLaunchFeedbackValidateBeforeCall(modFeedbackGetCurrentCompletedTmpRequest, null);
        Type localVarReturnType = new TypeToken<ModFeedbackLaunchFeedback200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Starts or continues a feedback submission. (asynchronously)
     * Starts or continues a feedback submission.
     * @param modFeedbackGetCurrentCompletedTmpRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modFeedbackLaunchFeedbackAsync(ModFeedbackGetCurrentCompletedTmpRequest modFeedbackGetCurrentCompletedTmpRequest, final ApiCallback<ModFeedbackLaunchFeedback200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modFeedbackLaunchFeedbackValidateBeforeCall(modFeedbackGetCurrentCompletedTmpRequest, _callback);
        Type localVarReturnType = new TypeToken<ModFeedbackLaunchFeedback200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modFeedbackProcessPage
     * @param modFeedbackProcessPageRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modFeedbackProcessPageCall(ModFeedbackProcessPageRequest modFeedbackProcessPageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modFeedbackProcessPageRequest;

        // create path and map variables
        String localVarPath = "/mod_feedback_process_page";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modFeedbackProcessPageValidateBeforeCall(ModFeedbackProcessPageRequest modFeedbackProcessPageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modFeedbackProcessPageRequest' is set
        if (modFeedbackProcessPageRequest == null) {
            throw new ApiException("Missing the required parameter 'modFeedbackProcessPageRequest' when calling modFeedbackProcessPage(Async)");
        }

        return modFeedbackProcessPageCall(modFeedbackProcessPageRequest, _callback);

    }

    /**
     * Process a jump between pages.
     * Process a jump between pages.
     * @param modFeedbackProcessPageRequest  (required)
     * @return ModFeedbackProcessPage200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModFeedbackProcessPage200Response modFeedbackProcessPage(ModFeedbackProcessPageRequest modFeedbackProcessPageRequest) throws ApiException {
        ApiResponse<ModFeedbackProcessPage200Response> localVarResp = modFeedbackProcessPageWithHttpInfo(modFeedbackProcessPageRequest);
        return localVarResp.getData();
    }

    /**
     * Process a jump between pages.
     * Process a jump between pages.
     * @param modFeedbackProcessPageRequest  (required)
     * @return ApiResponse&lt;ModFeedbackProcessPage200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModFeedbackProcessPage200Response> modFeedbackProcessPageWithHttpInfo(ModFeedbackProcessPageRequest modFeedbackProcessPageRequest) throws ApiException {
        okhttp3.Call localVarCall = modFeedbackProcessPageValidateBeforeCall(modFeedbackProcessPageRequest, null);
        Type localVarReturnType = new TypeToken<ModFeedbackProcessPage200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Process a jump between pages. (asynchronously)
     * Process a jump between pages.
     * @param modFeedbackProcessPageRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modFeedbackProcessPageAsync(ModFeedbackProcessPageRequest modFeedbackProcessPageRequest, final ApiCallback<ModFeedbackProcessPage200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modFeedbackProcessPageValidateBeforeCall(modFeedbackProcessPageRequest, _callback);
        Type localVarReturnType = new TypeToken<ModFeedbackProcessPage200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modFeedbackViewFeedback
     * @param modFeedbackViewFeedbackRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modFeedbackViewFeedbackCall(ModFeedbackViewFeedbackRequest modFeedbackViewFeedbackRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modFeedbackViewFeedbackRequest;

        // create path and map variables
        String localVarPath = "/mod_feedback_view_feedback";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modFeedbackViewFeedbackValidateBeforeCall(ModFeedbackViewFeedbackRequest modFeedbackViewFeedbackRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modFeedbackViewFeedbackRequest' is set
        if (modFeedbackViewFeedbackRequest == null) {
            throw new ApiException("Missing the required parameter 'modFeedbackViewFeedbackRequest' when calling modFeedbackViewFeedback(Async)");
        }

        return modFeedbackViewFeedbackCall(modFeedbackViewFeedbackRequest, _callback);

    }

    /**
     * Trigger the course module viewed event and update the module completion status.
     * Trigger the course module viewed event and update the module completion status.
     * @param modFeedbackViewFeedbackRequest  (required)
     * @return CoreCalendarDeleteSubscription200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreCalendarDeleteSubscription200Response modFeedbackViewFeedback(ModFeedbackViewFeedbackRequest modFeedbackViewFeedbackRequest) throws ApiException {
        ApiResponse<CoreCalendarDeleteSubscription200Response> localVarResp = modFeedbackViewFeedbackWithHttpInfo(modFeedbackViewFeedbackRequest);
        return localVarResp.getData();
    }

    /**
     * Trigger the course module viewed event and update the module completion status.
     * Trigger the course module viewed event and update the module completion status.
     * @param modFeedbackViewFeedbackRequest  (required)
     * @return ApiResponse&lt;CoreCalendarDeleteSubscription200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreCalendarDeleteSubscription200Response> modFeedbackViewFeedbackWithHttpInfo(ModFeedbackViewFeedbackRequest modFeedbackViewFeedbackRequest) throws ApiException {
        okhttp3.Call localVarCall = modFeedbackViewFeedbackValidateBeforeCall(modFeedbackViewFeedbackRequest, null);
        Type localVarReturnType = new TypeToken<CoreCalendarDeleteSubscription200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Trigger the course module viewed event and update the module completion status. (asynchronously)
     * Trigger the course module viewed event and update the module completion status.
     * @param modFeedbackViewFeedbackRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modFeedbackViewFeedbackAsync(ModFeedbackViewFeedbackRequest modFeedbackViewFeedbackRequest, final ApiCallback<CoreCalendarDeleteSubscription200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modFeedbackViewFeedbackValidateBeforeCall(modFeedbackViewFeedbackRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreCalendarDeleteSubscription200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
