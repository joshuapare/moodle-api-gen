/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.joshuapare.moodleclient;

import com.joshuapare.ApiCallback;
import com.joshuapare.ApiClient;
import com.joshuapare.ApiException;
import com.joshuapare.ApiResponse;
import com.joshuapare.Configuration;
import com.joshuapare.Pair;
import com.joshuapare.ProgressRequestBody;
import com.joshuapare.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CoreCalendarDeleteSubscription200Response;
import org.openapitools.client.model.CoreCohortAddCohortMembers200Response;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.ModBigbluebuttonbnCanJoin200Response;
import org.openapitools.client.model.ModBigbluebuttonbnCanJoinRequest;
import org.openapitools.client.model.ModBigbluebuttonbnCompletionValidateRequest;
import org.openapitools.client.model.ModBigbluebuttonbnEndMeetingRequest;
import org.openapitools.client.model.ModBigbluebuttonbnGetBigbluebuttonbnsByCourses200Response;
import org.openapitools.client.model.ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest;
import org.openapitools.client.model.ModBigbluebuttonbnGetJoinUrl200Response;
import org.openapitools.client.model.ModBigbluebuttonbnGetRecordings200Response;
import org.openapitools.client.model.ModBigbluebuttonbnGetRecordingsRequest;
import org.openapitools.client.model.ModBigbluebuttonbnGetRecordingsToImport200Response;
import org.openapitools.client.model.ModBigbluebuttonbnGetRecordingsToImportRequest;
import org.openapitools.client.model.ModBigbluebuttonbnMeetingInfo200Response;
import org.openapitools.client.model.ModBigbluebuttonbnMeetingInfoRequest;
import org.openapitools.client.model.ModBigbluebuttonbnUpdateRecordingRequest;
import org.openapitools.client.model.ModBigbluebuttonbnViewBigbluebuttonbnRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ModBigbluebuttonbnApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ModBigbluebuttonbnApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ModBigbluebuttonbnApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for modBigbluebuttonbnCanJoin
     * @param modBigbluebuttonbnCanJoinRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modBigbluebuttonbnCanJoinCall(ModBigbluebuttonbnCanJoinRequest modBigbluebuttonbnCanJoinRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modBigbluebuttonbnCanJoinRequest;

        // create path and map variables
        String localVarPath = "/mod_bigbluebuttonbn_can_join";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modBigbluebuttonbnCanJoinValidateBeforeCall(ModBigbluebuttonbnCanJoinRequest modBigbluebuttonbnCanJoinRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modBigbluebuttonbnCanJoinRequest' is set
        if (modBigbluebuttonbnCanJoinRequest == null) {
            throw new ApiException("Missing the required parameter 'modBigbluebuttonbnCanJoinRequest' when calling modBigbluebuttonbnCanJoin(Async)");
        }

        return modBigbluebuttonbnCanJoinCall(modBigbluebuttonbnCanJoinRequest, _callback);

    }

    /**
     * Returns information if the current user can join or not.
     * Returns information if the current user can join or not.
     * @param modBigbluebuttonbnCanJoinRequest  (required)
     * @return ModBigbluebuttonbnCanJoin200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModBigbluebuttonbnCanJoin200Response modBigbluebuttonbnCanJoin(ModBigbluebuttonbnCanJoinRequest modBigbluebuttonbnCanJoinRequest) throws ApiException {
        ApiResponse<ModBigbluebuttonbnCanJoin200Response> localVarResp = modBigbluebuttonbnCanJoinWithHttpInfo(modBigbluebuttonbnCanJoinRequest);
        return localVarResp.getData();
    }

    /**
     * Returns information if the current user can join or not.
     * Returns information if the current user can join or not.
     * @param modBigbluebuttonbnCanJoinRequest  (required)
     * @return ApiResponse&lt;ModBigbluebuttonbnCanJoin200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModBigbluebuttonbnCanJoin200Response> modBigbluebuttonbnCanJoinWithHttpInfo(ModBigbluebuttonbnCanJoinRequest modBigbluebuttonbnCanJoinRequest) throws ApiException {
        okhttp3.Call localVarCall = modBigbluebuttonbnCanJoinValidateBeforeCall(modBigbluebuttonbnCanJoinRequest, null);
        Type localVarReturnType = new TypeToken<ModBigbluebuttonbnCanJoin200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns information if the current user can join or not. (asynchronously)
     * Returns information if the current user can join or not.
     * @param modBigbluebuttonbnCanJoinRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modBigbluebuttonbnCanJoinAsync(ModBigbluebuttonbnCanJoinRequest modBigbluebuttonbnCanJoinRequest, final ApiCallback<ModBigbluebuttonbnCanJoin200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modBigbluebuttonbnCanJoinValidateBeforeCall(modBigbluebuttonbnCanJoinRequest, _callback);
        Type localVarReturnType = new TypeToken<ModBigbluebuttonbnCanJoin200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modBigbluebuttonbnCompletionValidate
     * @param modBigbluebuttonbnCompletionValidateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modBigbluebuttonbnCompletionValidateCall(ModBigbluebuttonbnCompletionValidateRequest modBigbluebuttonbnCompletionValidateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modBigbluebuttonbnCompletionValidateRequest;

        // create path and map variables
        String localVarPath = "/mod_bigbluebuttonbn_completion_validate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modBigbluebuttonbnCompletionValidateValidateBeforeCall(ModBigbluebuttonbnCompletionValidateRequest modBigbluebuttonbnCompletionValidateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modBigbluebuttonbnCompletionValidateRequest' is set
        if (modBigbluebuttonbnCompletionValidateRequest == null) {
            throw new ApiException("Missing the required parameter 'modBigbluebuttonbnCompletionValidateRequest' when calling modBigbluebuttonbnCompletionValidate(Async)");
        }

        return modBigbluebuttonbnCompletionValidateCall(modBigbluebuttonbnCompletionValidateRequest, _callback);

    }

    /**
     * Validate completion
     * Validate completion
     * @param modBigbluebuttonbnCompletionValidateRequest  (required)
     * @return CoreCohortAddCohortMembers200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreCohortAddCohortMembers200Response modBigbluebuttonbnCompletionValidate(ModBigbluebuttonbnCompletionValidateRequest modBigbluebuttonbnCompletionValidateRequest) throws ApiException {
        ApiResponse<CoreCohortAddCohortMembers200Response> localVarResp = modBigbluebuttonbnCompletionValidateWithHttpInfo(modBigbluebuttonbnCompletionValidateRequest);
        return localVarResp.getData();
    }

    /**
     * Validate completion
     * Validate completion
     * @param modBigbluebuttonbnCompletionValidateRequest  (required)
     * @return ApiResponse&lt;CoreCohortAddCohortMembers200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreCohortAddCohortMembers200Response> modBigbluebuttonbnCompletionValidateWithHttpInfo(ModBigbluebuttonbnCompletionValidateRequest modBigbluebuttonbnCompletionValidateRequest) throws ApiException {
        okhttp3.Call localVarCall = modBigbluebuttonbnCompletionValidateValidateBeforeCall(modBigbluebuttonbnCompletionValidateRequest, null);
        Type localVarReturnType = new TypeToken<CoreCohortAddCohortMembers200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Validate completion (asynchronously)
     * Validate completion
     * @param modBigbluebuttonbnCompletionValidateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modBigbluebuttonbnCompletionValidateAsync(ModBigbluebuttonbnCompletionValidateRequest modBigbluebuttonbnCompletionValidateRequest, final ApiCallback<CoreCohortAddCohortMembers200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modBigbluebuttonbnCompletionValidateValidateBeforeCall(modBigbluebuttonbnCompletionValidateRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreCohortAddCohortMembers200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modBigbluebuttonbnEndMeeting
     * @param modBigbluebuttonbnEndMeetingRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modBigbluebuttonbnEndMeetingCall(ModBigbluebuttonbnEndMeetingRequest modBigbluebuttonbnEndMeetingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modBigbluebuttonbnEndMeetingRequest;

        // create path and map variables
        String localVarPath = "/mod_bigbluebuttonbn_end_meeting";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modBigbluebuttonbnEndMeetingValidateBeforeCall(ModBigbluebuttonbnEndMeetingRequest modBigbluebuttonbnEndMeetingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modBigbluebuttonbnEndMeetingRequest' is set
        if (modBigbluebuttonbnEndMeetingRequest == null) {
            throw new ApiException("Missing the required parameter 'modBigbluebuttonbnEndMeetingRequest' when calling modBigbluebuttonbnEndMeeting(Async)");
        }

        return modBigbluebuttonbnEndMeetingCall(modBigbluebuttonbnEndMeetingRequest, _callback);

    }

    /**
     * End a meeting
     * End a meeting
     * @param modBigbluebuttonbnEndMeetingRequest  (required)
     * @return CoreCohortAddCohortMembers200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreCohortAddCohortMembers200Response modBigbluebuttonbnEndMeeting(ModBigbluebuttonbnEndMeetingRequest modBigbluebuttonbnEndMeetingRequest) throws ApiException {
        ApiResponse<CoreCohortAddCohortMembers200Response> localVarResp = modBigbluebuttonbnEndMeetingWithHttpInfo(modBigbluebuttonbnEndMeetingRequest);
        return localVarResp.getData();
    }

    /**
     * End a meeting
     * End a meeting
     * @param modBigbluebuttonbnEndMeetingRequest  (required)
     * @return ApiResponse&lt;CoreCohortAddCohortMembers200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreCohortAddCohortMembers200Response> modBigbluebuttonbnEndMeetingWithHttpInfo(ModBigbluebuttonbnEndMeetingRequest modBigbluebuttonbnEndMeetingRequest) throws ApiException {
        okhttp3.Call localVarCall = modBigbluebuttonbnEndMeetingValidateBeforeCall(modBigbluebuttonbnEndMeetingRequest, null);
        Type localVarReturnType = new TypeToken<CoreCohortAddCohortMembers200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * End a meeting (asynchronously)
     * End a meeting
     * @param modBigbluebuttonbnEndMeetingRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modBigbluebuttonbnEndMeetingAsync(ModBigbluebuttonbnEndMeetingRequest modBigbluebuttonbnEndMeetingRequest, final ApiCallback<CoreCohortAddCohortMembers200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modBigbluebuttonbnEndMeetingValidateBeforeCall(modBigbluebuttonbnEndMeetingRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreCohortAddCohortMembers200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modBigbluebuttonbnGetBigbluebuttonbnsByCourses
     * @param modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modBigbluebuttonbnGetBigbluebuttonbnsByCoursesCall(ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest;

        // create path and map variables
        String localVarPath = "/mod_bigbluebuttonbn_get_bigbluebuttonbns_by_courses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modBigbluebuttonbnGetBigbluebuttonbnsByCoursesValidateBeforeCall(ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest' is set
        if (modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest == null) {
            throw new ApiException("Missing the required parameter 'modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest' when calling modBigbluebuttonbnGetBigbluebuttonbnsByCourses(Async)");
        }

        return modBigbluebuttonbnGetBigbluebuttonbnsByCoursesCall(modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest, _callback);

    }

    /**
     * Returns a list of bigbluebuttonbns in a provided list of courses, if no list is provided                             all bigbluebuttonbns that the user can view will be returned.
     * Returns a list of bigbluebuttonbns in a provided list of courses, if no list is provided                             all bigbluebuttonbns that the user can view will be returned.
     * @param modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest  (required)
     * @return ModBigbluebuttonbnGetBigbluebuttonbnsByCourses200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModBigbluebuttonbnGetBigbluebuttonbnsByCourses200Response modBigbluebuttonbnGetBigbluebuttonbnsByCourses(ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest) throws ApiException {
        ApiResponse<ModBigbluebuttonbnGetBigbluebuttonbnsByCourses200Response> localVarResp = modBigbluebuttonbnGetBigbluebuttonbnsByCoursesWithHttpInfo(modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest);
        return localVarResp.getData();
    }

    /**
     * Returns a list of bigbluebuttonbns in a provided list of courses, if no list is provided                             all bigbluebuttonbns that the user can view will be returned.
     * Returns a list of bigbluebuttonbns in a provided list of courses, if no list is provided                             all bigbluebuttonbns that the user can view will be returned.
     * @param modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest  (required)
     * @return ApiResponse&lt;ModBigbluebuttonbnGetBigbluebuttonbnsByCourses200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModBigbluebuttonbnGetBigbluebuttonbnsByCourses200Response> modBigbluebuttonbnGetBigbluebuttonbnsByCoursesWithHttpInfo(ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest) throws ApiException {
        okhttp3.Call localVarCall = modBigbluebuttonbnGetBigbluebuttonbnsByCoursesValidateBeforeCall(modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest, null);
        Type localVarReturnType = new TypeToken<ModBigbluebuttonbnGetBigbluebuttonbnsByCourses200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a list of bigbluebuttonbns in a provided list of courses, if no list is provided                             all bigbluebuttonbns that the user can view will be returned. (asynchronously)
     * Returns a list of bigbluebuttonbns in a provided list of courses, if no list is provided                             all bigbluebuttonbns that the user can view will be returned.
     * @param modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modBigbluebuttonbnGetBigbluebuttonbnsByCoursesAsync(ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest, final ApiCallback<ModBigbluebuttonbnGetBigbluebuttonbnsByCourses200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modBigbluebuttonbnGetBigbluebuttonbnsByCoursesValidateBeforeCall(modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest, _callback);
        Type localVarReturnType = new TypeToken<ModBigbluebuttonbnGetBigbluebuttonbnsByCourses200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modBigbluebuttonbnGetJoinUrl
     * @param modBigbluebuttonbnCanJoinRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modBigbluebuttonbnGetJoinUrlCall(ModBigbluebuttonbnCanJoinRequest modBigbluebuttonbnCanJoinRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modBigbluebuttonbnCanJoinRequest;

        // create path and map variables
        String localVarPath = "/mod_bigbluebuttonbn_get_join_url";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modBigbluebuttonbnGetJoinUrlValidateBeforeCall(ModBigbluebuttonbnCanJoinRequest modBigbluebuttonbnCanJoinRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modBigbluebuttonbnCanJoinRequest' is set
        if (modBigbluebuttonbnCanJoinRequest == null) {
            throw new ApiException("Missing the required parameter 'modBigbluebuttonbnCanJoinRequest' when calling modBigbluebuttonbnGetJoinUrl(Async)");
        }

        return modBigbluebuttonbnGetJoinUrlCall(modBigbluebuttonbnCanJoinRequest, _callback);

    }

    /**
     * Get the join URL for the meeting and create if it does not exist.
     * Get the join URL for the meeting and create if it does not exist.
     * @param modBigbluebuttonbnCanJoinRequest  (required)
     * @return ModBigbluebuttonbnGetJoinUrl200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModBigbluebuttonbnGetJoinUrl200Response modBigbluebuttonbnGetJoinUrl(ModBigbluebuttonbnCanJoinRequest modBigbluebuttonbnCanJoinRequest) throws ApiException {
        ApiResponse<ModBigbluebuttonbnGetJoinUrl200Response> localVarResp = modBigbluebuttonbnGetJoinUrlWithHttpInfo(modBigbluebuttonbnCanJoinRequest);
        return localVarResp.getData();
    }

    /**
     * Get the join URL for the meeting and create if it does not exist.
     * Get the join URL for the meeting and create if it does not exist.
     * @param modBigbluebuttonbnCanJoinRequest  (required)
     * @return ApiResponse&lt;ModBigbluebuttonbnGetJoinUrl200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModBigbluebuttonbnGetJoinUrl200Response> modBigbluebuttonbnGetJoinUrlWithHttpInfo(ModBigbluebuttonbnCanJoinRequest modBigbluebuttonbnCanJoinRequest) throws ApiException {
        okhttp3.Call localVarCall = modBigbluebuttonbnGetJoinUrlValidateBeforeCall(modBigbluebuttonbnCanJoinRequest, null);
        Type localVarReturnType = new TypeToken<ModBigbluebuttonbnGetJoinUrl200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the join URL for the meeting and create if it does not exist. (asynchronously)
     * Get the join URL for the meeting and create if it does not exist.
     * @param modBigbluebuttonbnCanJoinRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modBigbluebuttonbnGetJoinUrlAsync(ModBigbluebuttonbnCanJoinRequest modBigbluebuttonbnCanJoinRequest, final ApiCallback<ModBigbluebuttonbnGetJoinUrl200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modBigbluebuttonbnGetJoinUrlValidateBeforeCall(modBigbluebuttonbnCanJoinRequest, _callback);
        Type localVarReturnType = new TypeToken<ModBigbluebuttonbnGetJoinUrl200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modBigbluebuttonbnGetRecordings
     * @param modBigbluebuttonbnGetRecordingsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modBigbluebuttonbnGetRecordingsCall(ModBigbluebuttonbnGetRecordingsRequest modBigbluebuttonbnGetRecordingsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modBigbluebuttonbnGetRecordingsRequest;

        // create path and map variables
        String localVarPath = "/mod_bigbluebuttonbn_get_recordings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modBigbluebuttonbnGetRecordingsValidateBeforeCall(ModBigbluebuttonbnGetRecordingsRequest modBigbluebuttonbnGetRecordingsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modBigbluebuttonbnGetRecordingsRequest' is set
        if (modBigbluebuttonbnGetRecordingsRequest == null) {
            throw new ApiException("Missing the required parameter 'modBigbluebuttonbnGetRecordingsRequest' when calling modBigbluebuttonbnGetRecordings(Async)");
        }

        return modBigbluebuttonbnGetRecordingsCall(modBigbluebuttonbnGetRecordingsRequest, _callback);

    }

    /**
     * Returns a list of recordings ready to be processed by a datatable.
     * Returns a list of recordings ready to be processed by a datatable.
     * @param modBigbluebuttonbnGetRecordingsRequest  (required)
     * @return ModBigbluebuttonbnGetRecordings200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModBigbluebuttonbnGetRecordings200Response modBigbluebuttonbnGetRecordings(ModBigbluebuttonbnGetRecordingsRequest modBigbluebuttonbnGetRecordingsRequest) throws ApiException {
        ApiResponse<ModBigbluebuttonbnGetRecordings200Response> localVarResp = modBigbluebuttonbnGetRecordingsWithHttpInfo(modBigbluebuttonbnGetRecordingsRequest);
        return localVarResp.getData();
    }

    /**
     * Returns a list of recordings ready to be processed by a datatable.
     * Returns a list of recordings ready to be processed by a datatable.
     * @param modBigbluebuttonbnGetRecordingsRequest  (required)
     * @return ApiResponse&lt;ModBigbluebuttonbnGetRecordings200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModBigbluebuttonbnGetRecordings200Response> modBigbluebuttonbnGetRecordingsWithHttpInfo(ModBigbluebuttonbnGetRecordingsRequest modBigbluebuttonbnGetRecordingsRequest) throws ApiException {
        okhttp3.Call localVarCall = modBigbluebuttonbnGetRecordingsValidateBeforeCall(modBigbluebuttonbnGetRecordingsRequest, null);
        Type localVarReturnType = new TypeToken<ModBigbluebuttonbnGetRecordings200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a list of recordings ready to be processed by a datatable. (asynchronously)
     * Returns a list of recordings ready to be processed by a datatable.
     * @param modBigbluebuttonbnGetRecordingsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modBigbluebuttonbnGetRecordingsAsync(ModBigbluebuttonbnGetRecordingsRequest modBigbluebuttonbnGetRecordingsRequest, final ApiCallback<ModBigbluebuttonbnGetRecordings200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modBigbluebuttonbnGetRecordingsValidateBeforeCall(modBigbluebuttonbnGetRecordingsRequest, _callback);
        Type localVarReturnType = new TypeToken<ModBigbluebuttonbnGetRecordings200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modBigbluebuttonbnGetRecordingsToImport
     * @param modBigbluebuttonbnGetRecordingsToImportRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modBigbluebuttonbnGetRecordingsToImportCall(ModBigbluebuttonbnGetRecordingsToImportRequest modBigbluebuttonbnGetRecordingsToImportRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modBigbluebuttonbnGetRecordingsToImportRequest;

        // create path and map variables
        String localVarPath = "/mod_bigbluebuttonbn_get_recordings_to_import";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modBigbluebuttonbnGetRecordingsToImportValidateBeforeCall(ModBigbluebuttonbnGetRecordingsToImportRequest modBigbluebuttonbnGetRecordingsToImportRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modBigbluebuttonbnGetRecordingsToImportRequest' is set
        if (modBigbluebuttonbnGetRecordingsToImportRequest == null) {
            throw new ApiException("Missing the required parameter 'modBigbluebuttonbnGetRecordingsToImportRequest' when calling modBigbluebuttonbnGetRecordingsToImport(Async)");
        }

        return modBigbluebuttonbnGetRecordingsToImportCall(modBigbluebuttonbnGetRecordingsToImportRequest, _callback);

    }

    /**
     * Returns a list of recordings ready to import to be processed by a datatable.
     * Returns a list of recordings ready to import to be processed by a datatable.
     * @param modBigbluebuttonbnGetRecordingsToImportRequest  (required)
     * @return ModBigbluebuttonbnGetRecordingsToImport200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModBigbluebuttonbnGetRecordingsToImport200Response modBigbluebuttonbnGetRecordingsToImport(ModBigbluebuttonbnGetRecordingsToImportRequest modBigbluebuttonbnGetRecordingsToImportRequest) throws ApiException {
        ApiResponse<ModBigbluebuttonbnGetRecordingsToImport200Response> localVarResp = modBigbluebuttonbnGetRecordingsToImportWithHttpInfo(modBigbluebuttonbnGetRecordingsToImportRequest);
        return localVarResp.getData();
    }

    /**
     * Returns a list of recordings ready to import to be processed by a datatable.
     * Returns a list of recordings ready to import to be processed by a datatable.
     * @param modBigbluebuttonbnGetRecordingsToImportRequest  (required)
     * @return ApiResponse&lt;ModBigbluebuttonbnGetRecordingsToImport200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModBigbluebuttonbnGetRecordingsToImport200Response> modBigbluebuttonbnGetRecordingsToImportWithHttpInfo(ModBigbluebuttonbnGetRecordingsToImportRequest modBigbluebuttonbnGetRecordingsToImportRequest) throws ApiException {
        okhttp3.Call localVarCall = modBigbluebuttonbnGetRecordingsToImportValidateBeforeCall(modBigbluebuttonbnGetRecordingsToImportRequest, null);
        Type localVarReturnType = new TypeToken<ModBigbluebuttonbnGetRecordingsToImport200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a list of recordings ready to import to be processed by a datatable. (asynchronously)
     * Returns a list of recordings ready to import to be processed by a datatable.
     * @param modBigbluebuttonbnGetRecordingsToImportRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modBigbluebuttonbnGetRecordingsToImportAsync(ModBigbluebuttonbnGetRecordingsToImportRequest modBigbluebuttonbnGetRecordingsToImportRequest, final ApiCallback<ModBigbluebuttonbnGetRecordingsToImport200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modBigbluebuttonbnGetRecordingsToImportValidateBeforeCall(modBigbluebuttonbnGetRecordingsToImportRequest, _callback);
        Type localVarReturnType = new TypeToken<ModBigbluebuttonbnGetRecordingsToImport200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modBigbluebuttonbnMeetingInfo
     * @param modBigbluebuttonbnMeetingInfoRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modBigbluebuttonbnMeetingInfoCall(ModBigbluebuttonbnMeetingInfoRequest modBigbluebuttonbnMeetingInfoRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modBigbluebuttonbnMeetingInfoRequest;

        // create path and map variables
        String localVarPath = "/mod_bigbluebuttonbn_meeting_info";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modBigbluebuttonbnMeetingInfoValidateBeforeCall(ModBigbluebuttonbnMeetingInfoRequest modBigbluebuttonbnMeetingInfoRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modBigbluebuttonbnMeetingInfoRequest' is set
        if (modBigbluebuttonbnMeetingInfoRequest == null) {
            throw new ApiException("Missing the required parameter 'modBigbluebuttonbnMeetingInfoRequest' when calling modBigbluebuttonbnMeetingInfo(Async)");
        }

        return modBigbluebuttonbnMeetingInfoCall(modBigbluebuttonbnMeetingInfoRequest, _callback);

    }

    /**
     * Get displayable information on the meeting
     * Get displayable information on the meeting
     * @param modBigbluebuttonbnMeetingInfoRequest  (required)
     * @return ModBigbluebuttonbnMeetingInfo200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModBigbluebuttonbnMeetingInfo200Response modBigbluebuttonbnMeetingInfo(ModBigbluebuttonbnMeetingInfoRequest modBigbluebuttonbnMeetingInfoRequest) throws ApiException {
        ApiResponse<ModBigbluebuttonbnMeetingInfo200Response> localVarResp = modBigbluebuttonbnMeetingInfoWithHttpInfo(modBigbluebuttonbnMeetingInfoRequest);
        return localVarResp.getData();
    }

    /**
     * Get displayable information on the meeting
     * Get displayable information on the meeting
     * @param modBigbluebuttonbnMeetingInfoRequest  (required)
     * @return ApiResponse&lt;ModBigbluebuttonbnMeetingInfo200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModBigbluebuttonbnMeetingInfo200Response> modBigbluebuttonbnMeetingInfoWithHttpInfo(ModBigbluebuttonbnMeetingInfoRequest modBigbluebuttonbnMeetingInfoRequest) throws ApiException {
        okhttp3.Call localVarCall = modBigbluebuttonbnMeetingInfoValidateBeforeCall(modBigbluebuttonbnMeetingInfoRequest, null);
        Type localVarReturnType = new TypeToken<ModBigbluebuttonbnMeetingInfo200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get displayable information on the meeting (asynchronously)
     * Get displayable information on the meeting
     * @param modBigbluebuttonbnMeetingInfoRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modBigbluebuttonbnMeetingInfoAsync(ModBigbluebuttonbnMeetingInfoRequest modBigbluebuttonbnMeetingInfoRequest, final ApiCallback<ModBigbluebuttonbnMeetingInfo200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modBigbluebuttonbnMeetingInfoValidateBeforeCall(modBigbluebuttonbnMeetingInfoRequest, _callback);
        Type localVarReturnType = new TypeToken<ModBigbluebuttonbnMeetingInfo200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modBigbluebuttonbnUpdateRecording
     * @param modBigbluebuttonbnUpdateRecordingRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modBigbluebuttonbnUpdateRecordingCall(ModBigbluebuttonbnUpdateRecordingRequest modBigbluebuttonbnUpdateRecordingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modBigbluebuttonbnUpdateRecordingRequest;

        // create path and map variables
        String localVarPath = "/mod_bigbluebuttonbn_update_recording";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modBigbluebuttonbnUpdateRecordingValidateBeforeCall(ModBigbluebuttonbnUpdateRecordingRequest modBigbluebuttonbnUpdateRecordingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modBigbluebuttonbnUpdateRecordingRequest' is set
        if (modBigbluebuttonbnUpdateRecordingRequest == null) {
            throw new ApiException("Missing the required parameter 'modBigbluebuttonbnUpdateRecordingRequest' when calling modBigbluebuttonbnUpdateRecording(Async)");
        }

        return modBigbluebuttonbnUpdateRecordingCall(modBigbluebuttonbnUpdateRecordingRequest, _callback);

    }

    /**
     * Update a single recording
     * Update a single recording
     * @param modBigbluebuttonbnUpdateRecordingRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object modBigbluebuttonbnUpdateRecording(ModBigbluebuttonbnUpdateRecordingRequest modBigbluebuttonbnUpdateRecordingRequest) throws ApiException {
        ApiResponse<Object> localVarResp = modBigbluebuttonbnUpdateRecordingWithHttpInfo(modBigbluebuttonbnUpdateRecordingRequest);
        return localVarResp.getData();
    }

    /**
     * Update a single recording
     * Update a single recording
     * @param modBigbluebuttonbnUpdateRecordingRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> modBigbluebuttonbnUpdateRecordingWithHttpInfo(ModBigbluebuttonbnUpdateRecordingRequest modBigbluebuttonbnUpdateRecordingRequest) throws ApiException {
        okhttp3.Call localVarCall = modBigbluebuttonbnUpdateRecordingValidateBeforeCall(modBigbluebuttonbnUpdateRecordingRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a single recording (asynchronously)
     * Update a single recording
     * @param modBigbluebuttonbnUpdateRecordingRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modBigbluebuttonbnUpdateRecordingAsync(ModBigbluebuttonbnUpdateRecordingRequest modBigbluebuttonbnUpdateRecordingRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = modBigbluebuttonbnUpdateRecordingValidateBeforeCall(modBigbluebuttonbnUpdateRecordingRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modBigbluebuttonbnViewBigbluebuttonbn
     * @param modBigbluebuttonbnViewBigbluebuttonbnRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modBigbluebuttonbnViewBigbluebuttonbnCall(ModBigbluebuttonbnViewBigbluebuttonbnRequest modBigbluebuttonbnViewBigbluebuttonbnRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modBigbluebuttonbnViewBigbluebuttonbnRequest;

        // create path and map variables
        String localVarPath = "/mod_bigbluebuttonbn_view_bigbluebuttonbn";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modBigbluebuttonbnViewBigbluebuttonbnValidateBeforeCall(ModBigbluebuttonbnViewBigbluebuttonbnRequest modBigbluebuttonbnViewBigbluebuttonbnRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modBigbluebuttonbnViewBigbluebuttonbnRequest' is set
        if (modBigbluebuttonbnViewBigbluebuttonbnRequest == null) {
            throw new ApiException("Missing the required parameter 'modBigbluebuttonbnViewBigbluebuttonbnRequest' when calling modBigbluebuttonbnViewBigbluebuttonbn(Async)");
        }

        return modBigbluebuttonbnViewBigbluebuttonbnCall(modBigbluebuttonbnViewBigbluebuttonbnRequest, _callback);

    }

    /**
     * Trigger the course module viewed event and update the module completion status.
     * Trigger the course module viewed event and update the module completion status.
     * @param modBigbluebuttonbnViewBigbluebuttonbnRequest  (required)
     * @return CoreCalendarDeleteSubscription200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreCalendarDeleteSubscription200Response modBigbluebuttonbnViewBigbluebuttonbn(ModBigbluebuttonbnViewBigbluebuttonbnRequest modBigbluebuttonbnViewBigbluebuttonbnRequest) throws ApiException {
        ApiResponse<CoreCalendarDeleteSubscription200Response> localVarResp = modBigbluebuttonbnViewBigbluebuttonbnWithHttpInfo(modBigbluebuttonbnViewBigbluebuttonbnRequest);
        return localVarResp.getData();
    }

    /**
     * Trigger the course module viewed event and update the module completion status.
     * Trigger the course module viewed event and update the module completion status.
     * @param modBigbluebuttonbnViewBigbluebuttonbnRequest  (required)
     * @return ApiResponse&lt;CoreCalendarDeleteSubscription200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreCalendarDeleteSubscription200Response> modBigbluebuttonbnViewBigbluebuttonbnWithHttpInfo(ModBigbluebuttonbnViewBigbluebuttonbnRequest modBigbluebuttonbnViewBigbluebuttonbnRequest) throws ApiException {
        okhttp3.Call localVarCall = modBigbluebuttonbnViewBigbluebuttonbnValidateBeforeCall(modBigbluebuttonbnViewBigbluebuttonbnRequest, null);
        Type localVarReturnType = new TypeToken<CoreCalendarDeleteSubscription200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Trigger the course module viewed event and update the module completion status. (asynchronously)
     * Trigger the course module viewed event and update the module completion status.
     * @param modBigbluebuttonbnViewBigbluebuttonbnRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modBigbluebuttonbnViewBigbluebuttonbnAsync(ModBigbluebuttonbnViewBigbluebuttonbnRequest modBigbluebuttonbnViewBigbluebuttonbnRequest, final ApiCallback<CoreCalendarDeleteSubscription200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modBigbluebuttonbnViewBigbluebuttonbnValidateBeforeCall(modBigbluebuttonbnViewBigbluebuttonbnRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreCalendarDeleteSubscription200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
