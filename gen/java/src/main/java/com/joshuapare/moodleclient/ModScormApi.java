/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.joshuapare.moodleclient;

import com.joshuapare.ApiCallback;
import com.joshuapare.ApiClient;
import com.joshuapare.ApiException;
import com.joshuapare.ApiResponse;
import com.joshuapare.Configuration;
import com.joshuapare.Pair;
import com.joshuapare.ProgressRequestBody;
import com.joshuapare.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CoreCalendarDeleteSubscription200Response;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.ModChatGetChatsByCoursesRequest;
import org.openapitools.client.model.ModScormGetScormAccessInformation200Response;
import org.openapitools.client.model.ModScormGetScormAccessInformationRequest;
import org.openapitools.client.model.ModScormGetScormAttemptCount200Response;
import org.openapitools.client.model.ModScormGetScormAttemptCountRequest;
import org.openapitools.client.model.ModScormGetScormScoTracks200Response;
import org.openapitools.client.model.ModScormGetScormScoTracksRequest;
import org.openapitools.client.model.ModScormGetScormScoes200Response;
import org.openapitools.client.model.ModScormGetScormScoesRequest;
import org.openapitools.client.model.ModScormGetScormUserData200Response;
import org.openapitools.client.model.ModScormGetScormUserDataRequest;
import org.openapitools.client.model.ModScormGetScormsByCourses200Response;
import org.openapitools.client.model.ModScormInsertScormTracks200Response;
import org.openapitools.client.model.ModScormInsertScormTracksRequest;
import org.openapitools.client.model.ModScormLaunchScoRequest;
import org.openapitools.client.model.ModScormViewScormRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ModScormApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ModScormApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ModScormApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for modScormGetScormAccessInformation
     * @param modScormGetScormAccessInformationRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modScormGetScormAccessInformationCall(ModScormGetScormAccessInformationRequest modScormGetScormAccessInformationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modScormGetScormAccessInformationRequest;

        // create path and map variables
        String localVarPath = "/mod_scorm_get_scorm_access_information";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modScormGetScormAccessInformationValidateBeforeCall(ModScormGetScormAccessInformationRequest modScormGetScormAccessInformationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modScormGetScormAccessInformationRequest' is set
        if (modScormGetScormAccessInformationRequest == null) {
            throw new ApiException("Missing the required parameter 'modScormGetScormAccessInformationRequest' when calling modScormGetScormAccessInformation(Async)");
        }

        return modScormGetScormAccessInformationCall(modScormGetScormAccessInformationRequest, _callback);

    }

    /**
     * Return capabilities information for a given scorm.
     * Return capabilities information for a given scorm.
     * @param modScormGetScormAccessInformationRequest  (required)
     * @return ModScormGetScormAccessInformation200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModScormGetScormAccessInformation200Response modScormGetScormAccessInformation(ModScormGetScormAccessInformationRequest modScormGetScormAccessInformationRequest) throws ApiException {
        ApiResponse<ModScormGetScormAccessInformation200Response> localVarResp = modScormGetScormAccessInformationWithHttpInfo(modScormGetScormAccessInformationRequest);
        return localVarResp.getData();
    }

    /**
     * Return capabilities information for a given scorm.
     * Return capabilities information for a given scorm.
     * @param modScormGetScormAccessInformationRequest  (required)
     * @return ApiResponse&lt;ModScormGetScormAccessInformation200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModScormGetScormAccessInformation200Response> modScormGetScormAccessInformationWithHttpInfo(ModScormGetScormAccessInformationRequest modScormGetScormAccessInformationRequest) throws ApiException {
        okhttp3.Call localVarCall = modScormGetScormAccessInformationValidateBeforeCall(modScormGetScormAccessInformationRequest, null);
        Type localVarReturnType = new TypeToken<ModScormGetScormAccessInformation200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return capabilities information for a given scorm. (asynchronously)
     * Return capabilities information for a given scorm.
     * @param modScormGetScormAccessInformationRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modScormGetScormAccessInformationAsync(ModScormGetScormAccessInformationRequest modScormGetScormAccessInformationRequest, final ApiCallback<ModScormGetScormAccessInformation200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modScormGetScormAccessInformationValidateBeforeCall(modScormGetScormAccessInformationRequest, _callback);
        Type localVarReturnType = new TypeToken<ModScormGetScormAccessInformation200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modScormGetScormAttemptCount
     * @param modScormGetScormAttemptCountRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modScormGetScormAttemptCountCall(ModScormGetScormAttemptCountRequest modScormGetScormAttemptCountRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modScormGetScormAttemptCountRequest;

        // create path and map variables
        String localVarPath = "/mod_scorm_get_scorm_attempt_count";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modScormGetScormAttemptCountValidateBeforeCall(ModScormGetScormAttemptCountRequest modScormGetScormAttemptCountRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modScormGetScormAttemptCountRequest' is set
        if (modScormGetScormAttemptCountRequest == null) {
            throw new ApiException("Missing the required parameter 'modScormGetScormAttemptCountRequest' when calling modScormGetScormAttemptCount(Async)");
        }

        return modScormGetScormAttemptCountCall(modScormGetScormAttemptCountRequest, _callback);

    }

    /**
     * Return the number of attempts done by a user in the given SCORM.
     * Return the number of attempts done by a user in the given SCORM.
     * @param modScormGetScormAttemptCountRequest  (required)
     * @return ModScormGetScormAttemptCount200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModScormGetScormAttemptCount200Response modScormGetScormAttemptCount(ModScormGetScormAttemptCountRequest modScormGetScormAttemptCountRequest) throws ApiException {
        ApiResponse<ModScormGetScormAttemptCount200Response> localVarResp = modScormGetScormAttemptCountWithHttpInfo(modScormGetScormAttemptCountRequest);
        return localVarResp.getData();
    }

    /**
     * Return the number of attempts done by a user in the given SCORM.
     * Return the number of attempts done by a user in the given SCORM.
     * @param modScormGetScormAttemptCountRequest  (required)
     * @return ApiResponse&lt;ModScormGetScormAttemptCount200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModScormGetScormAttemptCount200Response> modScormGetScormAttemptCountWithHttpInfo(ModScormGetScormAttemptCountRequest modScormGetScormAttemptCountRequest) throws ApiException {
        okhttp3.Call localVarCall = modScormGetScormAttemptCountValidateBeforeCall(modScormGetScormAttemptCountRequest, null);
        Type localVarReturnType = new TypeToken<ModScormGetScormAttemptCount200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the number of attempts done by a user in the given SCORM. (asynchronously)
     * Return the number of attempts done by a user in the given SCORM.
     * @param modScormGetScormAttemptCountRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modScormGetScormAttemptCountAsync(ModScormGetScormAttemptCountRequest modScormGetScormAttemptCountRequest, final ApiCallback<ModScormGetScormAttemptCount200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modScormGetScormAttemptCountValidateBeforeCall(modScormGetScormAttemptCountRequest, _callback);
        Type localVarReturnType = new TypeToken<ModScormGetScormAttemptCount200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modScormGetScormScoTracks
     * @param modScormGetScormScoTracksRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modScormGetScormScoTracksCall(ModScormGetScormScoTracksRequest modScormGetScormScoTracksRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modScormGetScormScoTracksRequest;

        // create path and map variables
        String localVarPath = "/mod_scorm_get_scorm_sco_tracks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modScormGetScormScoTracksValidateBeforeCall(ModScormGetScormScoTracksRequest modScormGetScormScoTracksRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modScormGetScormScoTracksRequest' is set
        if (modScormGetScormScoTracksRequest == null) {
            throw new ApiException("Missing the required parameter 'modScormGetScormScoTracksRequest' when calling modScormGetScormScoTracks(Async)");
        }

        return modScormGetScormScoTracksCall(modScormGetScormScoTracksRequest, _callback);

    }

    /**
     * Retrieves SCO tracking data for the given user id and attempt number
     * Retrieves SCO tracking data for the given user id and attempt number
     * @param modScormGetScormScoTracksRequest  (required)
     * @return ModScormGetScormScoTracks200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModScormGetScormScoTracks200Response modScormGetScormScoTracks(ModScormGetScormScoTracksRequest modScormGetScormScoTracksRequest) throws ApiException {
        ApiResponse<ModScormGetScormScoTracks200Response> localVarResp = modScormGetScormScoTracksWithHttpInfo(modScormGetScormScoTracksRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieves SCO tracking data for the given user id and attempt number
     * Retrieves SCO tracking data for the given user id and attempt number
     * @param modScormGetScormScoTracksRequest  (required)
     * @return ApiResponse&lt;ModScormGetScormScoTracks200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModScormGetScormScoTracks200Response> modScormGetScormScoTracksWithHttpInfo(ModScormGetScormScoTracksRequest modScormGetScormScoTracksRequest) throws ApiException {
        okhttp3.Call localVarCall = modScormGetScormScoTracksValidateBeforeCall(modScormGetScormScoTracksRequest, null);
        Type localVarReturnType = new TypeToken<ModScormGetScormScoTracks200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves SCO tracking data for the given user id and attempt number (asynchronously)
     * Retrieves SCO tracking data for the given user id and attempt number
     * @param modScormGetScormScoTracksRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modScormGetScormScoTracksAsync(ModScormGetScormScoTracksRequest modScormGetScormScoTracksRequest, final ApiCallback<ModScormGetScormScoTracks200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modScormGetScormScoTracksValidateBeforeCall(modScormGetScormScoTracksRequest, _callback);
        Type localVarReturnType = new TypeToken<ModScormGetScormScoTracks200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modScormGetScormScoes
     * @param modScormGetScormScoesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modScormGetScormScoesCall(ModScormGetScormScoesRequest modScormGetScormScoesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modScormGetScormScoesRequest;

        // create path and map variables
        String localVarPath = "/mod_scorm_get_scorm_scoes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modScormGetScormScoesValidateBeforeCall(ModScormGetScormScoesRequest modScormGetScormScoesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modScormGetScormScoesRequest' is set
        if (modScormGetScormScoesRequest == null) {
            throw new ApiException("Missing the required parameter 'modScormGetScormScoesRequest' when calling modScormGetScormScoes(Async)");
        }

        return modScormGetScormScoesCall(modScormGetScormScoesRequest, _callback);

    }

    /**
     * Returns a list containing all the scoes data related to the given scorm id
     * Returns a list containing all the scoes data related to the given scorm id
     * @param modScormGetScormScoesRequest  (required)
     * @return ModScormGetScormScoes200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModScormGetScormScoes200Response modScormGetScormScoes(ModScormGetScormScoesRequest modScormGetScormScoesRequest) throws ApiException {
        ApiResponse<ModScormGetScormScoes200Response> localVarResp = modScormGetScormScoesWithHttpInfo(modScormGetScormScoesRequest);
        return localVarResp.getData();
    }

    /**
     * Returns a list containing all the scoes data related to the given scorm id
     * Returns a list containing all the scoes data related to the given scorm id
     * @param modScormGetScormScoesRequest  (required)
     * @return ApiResponse&lt;ModScormGetScormScoes200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModScormGetScormScoes200Response> modScormGetScormScoesWithHttpInfo(ModScormGetScormScoesRequest modScormGetScormScoesRequest) throws ApiException {
        okhttp3.Call localVarCall = modScormGetScormScoesValidateBeforeCall(modScormGetScormScoesRequest, null);
        Type localVarReturnType = new TypeToken<ModScormGetScormScoes200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a list containing all the scoes data related to the given scorm id (asynchronously)
     * Returns a list containing all the scoes data related to the given scorm id
     * @param modScormGetScormScoesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modScormGetScormScoesAsync(ModScormGetScormScoesRequest modScormGetScormScoesRequest, final ApiCallback<ModScormGetScormScoes200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modScormGetScormScoesValidateBeforeCall(modScormGetScormScoesRequest, _callback);
        Type localVarReturnType = new TypeToken<ModScormGetScormScoes200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modScormGetScormUserData
     * @param modScormGetScormUserDataRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modScormGetScormUserDataCall(ModScormGetScormUserDataRequest modScormGetScormUserDataRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modScormGetScormUserDataRequest;

        // create path and map variables
        String localVarPath = "/mod_scorm_get_scorm_user_data";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modScormGetScormUserDataValidateBeforeCall(ModScormGetScormUserDataRequest modScormGetScormUserDataRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modScormGetScormUserDataRequest' is set
        if (modScormGetScormUserDataRequest == null) {
            throw new ApiException("Missing the required parameter 'modScormGetScormUserDataRequest' when calling modScormGetScormUserData(Async)");
        }

        return modScormGetScormUserDataCall(modScormGetScormUserDataRequest, _callback);

    }

    /**
     * Retrieves user tracking and SCO data and default SCORM values
     * Retrieves user tracking and SCO data and default SCORM values
     * @param modScormGetScormUserDataRequest  (required)
     * @return ModScormGetScormUserData200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModScormGetScormUserData200Response modScormGetScormUserData(ModScormGetScormUserDataRequest modScormGetScormUserDataRequest) throws ApiException {
        ApiResponse<ModScormGetScormUserData200Response> localVarResp = modScormGetScormUserDataWithHttpInfo(modScormGetScormUserDataRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieves user tracking and SCO data and default SCORM values
     * Retrieves user tracking and SCO data and default SCORM values
     * @param modScormGetScormUserDataRequest  (required)
     * @return ApiResponse&lt;ModScormGetScormUserData200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModScormGetScormUserData200Response> modScormGetScormUserDataWithHttpInfo(ModScormGetScormUserDataRequest modScormGetScormUserDataRequest) throws ApiException {
        okhttp3.Call localVarCall = modScormGetScormUserDataValidateBeforeCall(modScormGetScormUserDataRequest, null);
        Type localVarReturnType = new TypeToken<ModScormGetScormUserData200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves user tracking and SCO data and default SCORM values (asynchronously)
     * Retrieves user tracking and SCO data and default SCORM values
     * @param modScormGetScormUserDataRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modScormGetScormUserDataAsync(ModScormGetScormUserDataRequest modScormGetScormUserDataRequest, final ApiCallback<ModScormGetScormUserData200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modScormGetScormUserDataValidateBeforeCall(modScormGetScormUserDataRequest, _callback);
        Type localVarReturnType = new TypeToken<ModScormGetScormUserData200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modScormGetScormsByCourses
     * @param modChatGetChatsByCoursesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modScormGetScormsByCoursesCall(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modChatGetChatsByCoursesRequest;

        // create path and map variables
        String localVarPath = "/mod_scorm_get_scorms_by_courses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modScormGetScormsByCoursesValidateBeforeCall(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modChatGetChatsByCoursesRequest' is set
        if (modChatGetChatsByCoursesRequest == null) {
            throw new ApiException("Missing the required parameter 'modChatGetChatsByCoursesRequest' when calling modScormGetScormsByCourses(Async)");
        }

        return modScormGetScormsByCoursesCall(modChatGetChatsByCoursesRequest, _callback);

    }

    /**
     * Returns a list of scorm instances in a provided set of courses, if                             no courses are provided then all the scorm instances the user has access to will be returned.
     * Returns a list of scorm instances in a provided set of courses, if                             no courses are provided then all the scorm instances the user has access to will be returned.
     * @param modChatGetChatsByCoursesRequest  (required)
     * @return ModScormGetScormsByCourses200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModScormGetScormsByCourses200Response modScormGetScormsByCourses(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest) throws ApiException {
        ApiResponse<ModScormGetScormsByCourses200Response> localVarResp = modScormGetScormsByCoursesWithHttpInfo(modChatGetChatsByCoursesRequest);
        return localVarResp.getData();
    }

    /**
     * Returns a list of scorm instances in a provided set of courses, if                             no courses are provided then all the scorm instances the user has access to will be returned.
     * Returns a list of scorm instances in a provided set of courses, if                             no courses are provided then all the scorm instances the user has access to will be returned.
     * @param modChatGetChatsByCoursesRequest  (required)
     * @return ApiResponse&lt;ModScormGetScormsByCourses200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModScormGetScormsByCourses200Response> modScormGetScormsByCoursesWithHttpInfo(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest) throws ApiException {
        okhttp3.Call localVarCall = modScormGetScormsByCoursesValidateBeforeCall(modChatGetChatsByCoursesRequest, null);
        Type localVarReturnType = new TypeToken<ModScormGetScormsByCourses200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a list of scorm instances in a provided set of courses, if                             no courses are provided then all the scorm instances the user has access to will be returned. (asynchronously)
     * Returns a list of scorm instances in a provided set of courses, if                             no courses are provided then all the scorm instances the user has access to will be returned.
     * @param modChatGetChatsByCoursesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modScormGetScormsByCoursesAsync(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest, final ApiCallback<ModScormGetScormsByCourses200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modScormGetScormsByCoursesValidateBeforeCall(modChatGetChatsByCoursesRequest, _callback);
        Type localVarReturnType = new TypeToken<ModScormGetScormsByCourses200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modScormInsertScormTracks
     * @param modScormInsertScormTracksRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modScormInsertScormTracksCall(ModScormInsertScormTracksRequest modScormInsertScormTracksRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modScormInsertScormTracksRequest;

        // create path and map variables
        String localVarPath = "/mod_scorm_insert_scorm_tracks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modScormInsertScormTracksValidateBeforeCall(ModScormInsertScormTracksRequest modScormInsertScormTracksRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modScormInsertScormTracksRequest' is set
        if (modScormInsertScormTracksRequest == null) {
            throw new ApiException("Missing the required parameter 'modScormInsertScormTracksRequest' when calling modScormInsertScormTracks(Async)");
        }

        return modScormInsertScormTracksCall(modScormInsertScormTracksRequest, _callback);

    }

    /**
     * Saves a scorm tracking record.                           It will overwrite any existing tracking data for this attempt.                           Validation should be performed before running the function to ensure the user will not lose any existing                           attempt data.
     * Saves a scorm tracking record.                           It will overwrite any existing tracking data for this attempt.                           Validation should be performed before running the function to ensure the user will not lose any existing                           attempt data.
     * @param modScormInsertScormTracksRequest  (required)
     * @return ModScormInsertScormTracks200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModScormInsertScormTracks200Response modScormInsertScormTracks(ModScormInsertScormTracksRequest modScormInsertScormTracksRequest) throws ApiException {
        ApiResponse<ModScormInsertScormTracks200Response> localVarResp = modScormInsertScormTracksWithHttpInfo(modScormInsertScormTracksRequest);
        return localVarResp.getData();
    }

    /**
     * Saves a scorm tracking record.                           It will overwrite any existing tracking data for this attempt.                           Validation should be performed before running the function to ensure the user will not lose any existing                           attempt data.
     * Saves a scorm tracking record.                           It will overwrite any existing tracking data for this attempt.                           Validation should be performed before running the function to ensure the user will not lose any existing                           attempt data.
     * @param modScormInsertScormTracksRequest  (required)
     * @return ApiResponse&lt;ModScormInsertScormTracks200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModScormInsertScormTracks200Response> modScormInsertScormTracksWithHttpInfo(ModScormInsertScormTracksRequest modScormInsertScormTracksRequest) throws ApiException {
        okhttp3.Call localVarCall = modScormInsertScormTracksValidateBeforeCall(modScormInsertScormTracksRequest, null);
        Type localVarReturnType = new TypeToken<ModScormInsertScormTracks200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Saves a scorm tracking record.                           It will overwrite any existing tracking data for this attempt.                           Validation should be performed before running the function to ensure the user will not lose any existing                           attempt data. (asynchronously)
     * Saves a scorm tracking record.                           It will overwrite any existing tracking data for this attempt.                           Validation should be performed before running the function to ensure the user will not lose any existing                           attempt data.
     * @param modScormInsertScormTracksRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modScormInsertScormTracksAsync(ModScormInsertScormTracksRequest modScormInsertScormTracksRequest, final ApiCallback<ModScormInsertScormTracks200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modScormInsertScormTracksValidateBeforeCall(modScormInsertScormTracksRequest, _callback);
        Type localVarReturnType = new TypeToken<ModScormInsertScormTracks200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modScormLaunchSco
     * @param modScormLaunchScoRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modScormLaunchScoCall(ModScormLaunchScoRequest modScormLaunchScoRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modScormLaunchScoRequest;

        // create path and map variables
        String localVarPath = "/mod_scorm_launch_sco";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modScormLaunchScoValidateBeforeCall(ModScormLaunchScoRequest modScormLaunchScoRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modScormLaunchScoRequest' is set
        if (modScormLaunchScoRequest == null) {
            throw new ApiException("Missing the required parameter 'modScormLaunchScoRequest' when calling modScormLaunchSco(Async)");
        }

        return modScormLaunchScoCall(modScormLaunchScoRequest, _callback);

    }

    /**
     * Trigger the SCO launched event.
     * Trigger the SCO launched event.
     * @param modScormLaunchScoRequest  (required)
     * @return CoreCalendarDeleteSubscription200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreCalendarDeleteSubscription200Response modScormLaunchSco(ModScormLaunchScoRequest modScormLaunchScoRequest) throws ApiException {
        ApiResponse<CoreCalendarDeleteSubscription200Response> localVarResp = modScormLaunchScoWithHttpInfo(modScormLaunchScoRequest);
        return localVarResp.getData();
    }

    /**
     * Trigger the SCO launched event.
     * Trigger the SCO launched event.
     * @param modScormLaunchScoRequest  (required)
     * @return ApiResponse&lt;CoreCalendarDeleteSubscription200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreCalendarDeleteSubscription200Response> modScormLaunchScoWithHttpInfo(ModScormLaunchScoRequest modScormLaunchScoRequest) throws ApiException {
        okhttp3.Call localVarCall = modScormLaunchScoValidateBeforeCall(modScormLaunchScoRequest, null);
        Type localVarReturnType = new TypeToken<CoreCalendarDeleteSubscription200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Trigger the SCO launched event. (asynchronously)
     * Trigger the SCO launched event.
     * @param modScormLaunchScoRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modScormLaunchScoAsync(ModScormLaunchScoRequest modScormLaunchScoRequest, final ApiCallback<CoreCalendarDeleteSubscription200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modScormLaunchScoValidateBeforeCall(modScormLaunchScoRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreCalendarDeleteSubscription200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modScormViewScorm
     * @param modScormViewScormRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modScormViewScormCall(ModScormViewScormRequest modScormViewScormRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modScormViewScormRequest;

        // create path and map variables
        String localVarPath = "/mod_scorm_view_scorm";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modScormViewScormValidateBeforeCall(ModScormViewScormRequest modScormViewScormRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modScormViewScormRequest' is set
        if (modScormViewScormRequest == null) {
            throw new ApiException("Missing the required parameter 'modScormViewScormRequest' when calling modScormViewScorm(Async)");
        }

        return modScormViewScormCall(modScormViewScormRequest, _callback);

    }

    /**
     * Trigger the course module viewed event.
     * Trigger the course module viewed event.
     * @param modScormViewScormRequest  (required)
     * @return CoreCalendarDeleteSubscription200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreCalendarDeleteSubscription200Response modScormViewScorm(ModScormViewScormRequest modScormViewScormRequest) throws ApiException {
        ApiResponse<CoreCalendarDeleteSubscription200Response> localVarResp = modScormViewScormWithHttpInfo(modScormViewScormRequest);
        return localVarResp.getData();
    }

    /**
     * Trigger the course module viewed event.
     * Trigger the course module viewed event.
     * @param modScormViewScormRequest  (required)
     * @return ApiResponse&lt;CoreCalendarDeleteSubscription200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreCalendarDeleteSubscription200Response> modScormViewScormWithHttpInfo(ModScormViewScormRequest modScormViewScormRequest) throws ApiException {
        okhttp3.Call localVarCall = modScormViewScormValidateBeforeCall(modScormViewScormRequest, null);
        Type localVarReturnType = new TypeToken<CoreCalendarDeleteSubscription200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Trigger the course module viewed event. (asynchronously)
     * Trigger the course module viewed event.
     * @param modScormViewScormRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modScormViewScormAsync(ModScormViewScormRequest modScormViewScormRequest, final ApiCallback<CoreCalendarDeleteSubscription200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modScormViewScormValidateBeforeCall(modScormViewScormRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreCalendarDeleteSubscription200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
