/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.joshuapare.moodleclient;

import com.joshuapare.ApiCallback;
import com.joshuapare.ApiClient;
import com.joshuapare.ApiException;
import com.joshuapare.ApiResponse;
import com.joshuapare.Configuration;
import com.joshuapare.Pair;
import com.joshuapare.ProgressRequestBody;
import com.joshuapare.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CoreCalendarDeleteSubscription200Response;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.ModAssignCopyPreviousAttemptRequest;
import org.openapitools.client.model.ModAssignGetAssignments200Response;
import org.openapitools.client.model.ModAssignGetAssignmentsRequest;
import org.openapitools.client.model.ModAssignGetGrades200Response;
import org.openapitools.client.model.ModAssignGetGradesRequest;
import org.openapitools.client.model.ModAssignGetParticipant200Response;
import org.openapitools.client.model.ModAssignGetParticipantRequest;
import org.openapitools.client.model.ModAssignGetSubmissionStatus200Response;
import org.openapitools.client.model.ModAssignGetSubmissionStatusRequest;
import org.openapitools.client.model.ModAssignGetSubmissions200Response;
import org.openapitools.client.model.ModAssignGetSubmissionsRequest;
import org.openapitools.client.model.ModAssignGetUserFlags200Response;
import org.openapitools.client.model.ModAssignGetUserFlagsRequest;
import org.openapitools.client.model.ModAssignGetUserMappings200Response;
import org.openapitools.client.model.ModAssignListParticipantsRequest;
import org.openapitools.client.model.ModAssignLockSubmissionsRequest;
import org.openapitools.client.model.ModAssignRevealIdentitiesRequest;
import org.openapitools.client.model.ModAssignRevertSubmissionsToDraftRequest;
import org.openapitools.client.model.ModAssignSaveGradeRequest;
import org.openapitools.client.model.ModAssignSaveGradesRequest;
import org.openapitools.client.model.ModAssignSaveSubmissionRequest;
import org.openapitools.client.model.ModAssignSaveUserExtensionsRequest;
import org.openapitools.client.model.ModAssignSetUserFlagsRequest;
import org.openapitools.client.model.ModAssignStartSubmission200Response;
import org.openapitools.client.model.ModAssignStartSubmissionRequest;
import org.openapitools.client.model.ModAssignSubmitForGradingRequest;
import org.openapitools.client.model.ModAssignSubmitGradingFormRequest;
import org.openapitools.client.model.ModAssignViewAssignRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ModAssignApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ModAssignApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ModAssignApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for modAssignCopyPreviousAttempt
     * @param modAssignCopyPreviousAttemptRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of warnings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modAssignCopyPreviousAttemptCall(ModAssignCopyPreviousAttemptRequest modAssignCopyPreviousAttemptRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modAssignCopyPreviousAttemptRequest;

        // create path and map variables
        String localVarPath = "/mod_assign_copy_previous_attempt";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modAssignCopyPreviousAttemptValidateBeforeCall(ModAssignCopyPreviousAttemptRequest modAssignCopyPreviousAttemptRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modAssignCopyPreviousAttemptRequest' is set
        if (modAssignCopyPreviousAttemptRequest == null) {
            throw new ApiException("Missing the required parameter 'modAssignCopyPreviousAttemptRequest' when calling modAssignCopyPreviousAttempt(Async)");
        }

        return modAssignCopyPreviousAttemptCall(modAssignCopyPreviousAttemptRequest, _callback);

    }

    /**
     * Copy a students previous attempt to a new attempt.
     * Copy a students previous attempt to a new attempt.
     * @param modAssignCopyPreviousAttemptRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of warnings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object modAssignCopyPreviousAttempt(ModAssignCopyPreviousAttemptRequest modAssignCopyPreviousAttemptRequest) throws ApiException {
        ApiResponse<Object> localVarResp = modAssignCopyPreviousAttemptWithHttpInfo(modAssignCopyPreviousAttemptRequest);
        return localVarResp.getData();
    }

    /**
     * Copy a students previous attempt to a new attempt.
     * Copy a students previous attempt to a new attempt.
     * @param modAssignCopyPreviousAttemptRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of warnings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> modAssignCopyPreviousAttemptWithHttpInfo(ModAssignCopyPreviousAttemptRequest modAssignCopyPreviousAttemptRequest) throws ApiException {
        okhttp3.Call localVarCall = modAssignCopyPreviousAttemptValidateBeforeCall(modAssignCopyPreviousAttemptRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Copy a students previous attempt to a new attempt. (asynchronously)
     * Copy a students previous attempt to a new attempt.
     * @param modAssignCopyPreviousAttemptRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of warnings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modAssignCopyPreviousAttemptAsync(ModAssignCopyPreviousAttemptRequest modAssignCopyPreviousAttemptRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = modAssignCopyPreviousAttemptValidateBeforeCall(modAssignCopyPreviousAttemptRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modAssignGetAssignments
     * @param modAssignGetAssignmentsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modAssignGetAssignmentsCall(ModAssignGetAssignmentsRequest modAssignGetAssignmentsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modAssignGetAssignmentsRequest;

        // create path and map variables
        String localVarPath = "/mod_assign_get_assignments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modAssignGetAssignmentsValidateBeforeCall(ModAssignGetAssignmentsRequest modAssignGetAssignmentsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modAssignGetAssignmentsRequest' is set
        if (modAssignGetAssignmentsRequest == null) {
            throw new ApiException("Missing the required parameter 'modAssignGetAssignmentsRequest' when calling modAssignGetAssignments(Async)");
        }

        return modAssignGetAssignmentsCall(modAssignGetAssignmentsRequest, _callback);

    }

    /**
     * Returns the courses and assignments for the users capability
     * Returns the courses and assignments for the users capability
     * @param modAssignGetAssignmentsRequest  (required)
     * @return ModAssignGetAssignments200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModAssignGetAssignments200Response modAssignGetAssignments(ModAssignGetAssignmentsRequest modAssignGetAssignmentsRequest) throws ApiException {
        ApiResponse<ModAssignGetAssignments200Response> localVarResp = modAssignGetAssignmentsWithHttpInfo(modAssignGetAssignmentsRequest);
        return localVarResp.getData();
    }

    /**
     * Returns the courses and assignments for the users capability
     * Returns the courses and assignments for the users capability
     * @param modAssignGetAssignmentsRequest  (required)
     * @return ApiResponse&lt;ModAssignGetAssignments200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModAssignGetAssignments200Response> modAssignGetAssignmentsWithHttpInfo(ModAssignGetAssignmentsRequest modAssignGetAssignmentsRequest) throws ApiException {
        okhttp3.Call localVarCall = modAssignGetAssignmentsValidateBeforeCall(modAssignGetAssignmentsRequest, null);
        Type localVarReturnType = new TypeToken<ModAssignGetAssignments200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the courses and assignments for the users capability (asynchronously)
     * Returns the courses and assignments for the users capability
     * @param modAssignGetAssignmentsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modAssignGetAssignmentsAsync(ModAssignGetAssignmentsRequest modAssignGetAssignmentsRequest, final ApiCallback<ModAssignGetAssignments200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modAssignGetAssignmentsValidateBeforeCall(modAssignGetAssignmentsRequest, _callback);
        Type localVarReturnType = new TypeToken<ModAssignGetAssignments200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modAssignGetGrades
     * @param modAssignGetGradesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modAssignGetGradesCall(ModAssignGetGradesRequest modAssignGetGradesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modAssignGetGradesRequest;

        // create path and map variables
        String localVarPath = "/mod_assign_get_grades";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modAssignGetGradesValidateBeforeCall(ModAssignGetGradesRequest modAssignGetGradesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modAssignGetGradesRequest' is set
        if (modAssignGetGradesRequest == null) {
            throw new ApiException("Missing the required parameter 'modAssignGetGradesRequest' when calling modAssignGetGrades(Async)");
        }

        return modAssignGetGradesCall(modAssignGetGradesRequest, _callback);

    }

    /**
     * Returns grades from the assignment
     * Returns grades from the assignment
     * @param modAssignGetGradesRequest  (required)
     * @return ModAssignGetGrades200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModAssignGetGrades200Response modAssignGetGrades(ModAssignGetGradesRequest modAssignGetGradesRequest) throws ApiException {
        ApiResponse<ModAssignGetGrades200Response> localVarResp = modAssignGetGradesWithHttpInfo(modAssignGetGradesRequest);
        return localVarResp.getData();
    }

    /**
     * Returns grades from the assignment
     * Returns grades from the assignment
     * @param modAssignGetGradesRequest  (required)
     * @return ApiResponse&lt;ModAssignGetGrades200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModAssignGetGrades200Response> modAssignGetGradesWithHttpInfo(ModAssignGetGradesRequest modAssignGetGradesRequest) throws ApiException {
        okhttp3.Call localVarCall = modAssignGetGradesValidateBeforeCall(modAssignGetGradesRequest, null);
        Type localVarReturnType = new TypeToken<ModAssignGetGrades200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns grades from the assignment (asynchronously)
     * Returns grades from the assignment
     * @param modAssignGetGradesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modAssignGetGradesAsync(ModAssignGetGradesRequest modAssignGetGradesRequest, final ApiCallback<ModAssignGetGrades200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modAssignGetGradesValidateBeforeCall(modAssignGetGradesRequest, _callback);
        Type localVarReturnType = new TypeToken<ModAssignGetGrades200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modAssignGetParticipant
     * @param modAssignGetParticipantRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modAssignGetParticipantCall(ModAssignGetParticipantRequest modAssignGetParticipantRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modAssignGetParticipantRequest;

        // create path and map variables
        String localVarPath = "/mod_assign_get_participant";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modAssignGetParticipantValidateBeforeCall(ModAssignGetParticipantRequest modAssignGetParticipantRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modAssignGetParticipantRequest' is set
        if (modAssignGetParticipantRequest == null) {
            throw new ApiException("Missing the required parameter 'modAssignGetParticipantRequest' when calling modAssignGetParticipant(Async)");
        }

        return modAssignGetParticipantCall(modAssignGetParticipantRequest, _callback);

    }

    /**
     * Get a participant for an assignment, with some summary info about their submissions.
     * Get a participant for an assignment, with some summary info about their submissions.
     * @param modAssignGetParticipantRequest  (required)
     * @return ModAssignGetParticipant200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModAssignGetParticipant200Response modAssignGetParticipant(ModAssignGetParticipantRequest modAssignGetParticipantRequest) throws ApiException {
        ApiResponse<ModAssignGetParticipant200Response> localVarResp = modAssignGetParticipantWithHttpInfo(modAssignGetParticipantRequest);
        return localVarResp.getData();
    }

    /**
     * Get a participant for an assignment, with some summary info about their submissions.
     * Get a participant for an assignment, with some summary info about their submissions.
     * @param modAssignGetParticipantRequest  (required)
     * @return ApiResponse&lt;ModAssignGetParticipant200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModAssignGetParticipant200Response> modAssignGetParticipantWithHttpInfo(ModAssignGetParticipantRequest modAssignGetParticipantRequest) throws ApiException {
        okhttp3.Call localVarCall = modAssignGetParticipantValidateBeforeCall(modAssignGetParticipantRequest, null);
        Type localVarReturnType = new TypeToken<ModAssignGetParticipant200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a participant for an assignment, with some summary info about their submissions. (asynchronously)
     * Get a participant for an assignment, with some summary info about their submissions.
     * @param modAssignGetParticipantRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modAssignGetParticipantAsync(ModAssignGetParticipantRequest modAssignGetParticipantRequest, final ApiCallback<ModAssignGetParticipant200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modAssignGetParticipantValidateBeforeCall(modAssignGetParticipantRequest, _callback);
        Type localVarReturnType = new TypeToken<ModAssignGetParticipant200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modAssignGetSubmissionStatus
     * @param modAssignGetSubmissionStatusRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modAssignGetSubmissionStatusCall(ModAssignGetSubmissionStatusRequest modAssignGetSubmissionStatusRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modAssignGetSubmissionStatusRequest;

        // create path and map variables
        String localVarPath = "/mod_assign_get_submission_status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modAssignGetSubmissionStatusValidateBeforeCall(ModAssignGetSubmissionStatusRequest modAssignGetSubmissionStatusRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modAssignGetSubmissionStatusRequest' is set
        if (modAssignGetSubmissionStatusRequest == null) {
            throw new ApiException("Missing the required parameter 'modAssignGetSubmissionStatusRequest' when calling modAssignGetSubmissionStatus(Async)");
        }

        return modAssignGetSubmissionStatusCall(modAssignGetSubmissionStatusRequest, _callback);

    }

    /**
     * Returns information about an assignment submission status for a given user.
     * Returns information about an assignment submission status for a given user.
     * @param modAssignGetSubmissionStatusRequest  (required)
     * @return ModAssignGetSubmissionStatus200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModAssignGetSubmissionStatus200Response modAssignGetSubmissionStatus(ModAssignGetSubmissionStatusRequest modAssignGetSubmissionStatusRequest) throws ApiException {
        ApiResponse<ModAssignGetSubmissionStatus200Response> localVarResp = modAssignGetSubmissionStatusWithHttpInfo(modAssignGetSubmissionStatusRequest);
        return localVarResp.getData();
    }

    /**
     * Returns information about an assignment submission status for a given user.
     * Returns information about an assignment submission status for a given user.
     * @param modAssignGetSubmissionStatusRequest  (required)
     * @return ApiResponse&lt;ModAssignGetSubmissionStatus200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModAssignGetSubmissionStatus200Response> modAssignGetSubmissionStatusWithHttpInfo(ModAssignGetSubmissionStatusRequest modAssignGetSubmissionStatusRequest) throws ApiException {
        okhttp3.Call localVarCall = modAssignGetSubmissionStatusValidateBeforeCall(modAssignGetSubmissionStatusRequest, null);
        Type localVarReturnType = new TypeToken<ModAssignGetSubmissionStatus200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns information about an assignment submission status for a given user. (asynchronously)
     * Returns information about an assignment submission status for a given user.
     * @param modAssignGetSubmissionStatusRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modAssignGetSubmissionStatusAsync(ModAssignGetSubmissionStatusRequest modAssignGetSubmissionStatusRequest, final ApiCallback<ModAssignGetSubmissionStatus200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modAssignGetSubmissionStatusValidateBeforeCall(modAssignGetSubmissionStatusRequest, _callback);
        Type localVarReturnType = new TypeToken<ModAssignGetSubmissionStatus200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modAssignGetSubmissions
     * @param modAssignGetSubmissionsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modAssignGetSubmissionsCall(ModAssignGetSubmissionsRequest modAssignGetSubmissionsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modAssignGetSubmissionsRequest;

        // create path and map variables
        String localVarPath = "/mod_assign_get_submissions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modAssignGetSubmissionsValidateBeforeCall(ModAssignGetSubmissionsRequest modAssignGetSubmissionsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modAssignGetSubmissionsRequest' is set
        if (modAssignGetSubmissionsRequest == null) {
            throw new ApiException("Missing the required parameter 'modAssignGetSubmissionsRequest' when calling modAssignGetSubmissions(Async)");
        }

        return modAssignGetSubmissionsCall(modAssignGetSubmissionsRequest, _callback);

    }

    /**
     * Returns the submissions for assignments
     * Returns the submissions for assignments
     * @param modAssignGetSubmissionsRequest  (required)
     * @return ModAssignGetSubmissions200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModAssignGetSubmissions200Response modAssignGetSubmissions(ModAssignGetSubmissionsRequest modAssignGetSubmissionsRequest) throws ApiException {
        ApiResponse<ModAssignGetSubmissions200Response> localVarResp = modAssignGetSubmissionsWithHttpInfo(modAssignGetSubmissionsRequest);
        return localVarResp.getData();
    }

    /**
     * Returns the submissions for assignments
     * Returns the submissions for assignments
     * @param modAssignGetSubmissionsRequest  (required)
     * @return ApiResponse&lt;ModAssignGetSubmissions200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModAssignGetSubmissions200Response> modAssignGetSubmissionsWithHttpInfo(ModAssignGetSubmissionsRequest modAssignGetSubmissionsRequest) throws ApiException {
        okhttp3.Call localVarCall = modAssignGetSubmissionsValidateBeforeCall(modAssignGetSubmissionsRequest, null);
        Type localVarReturnType = new TypeToken<ModAssignGetSubmissions200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the submissions for assignments (asynchronously)
     * Returns the submissions for assignments
     * @param modAssignGetSubmissionsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modAssignGetSubmissionsAsync(ModAssignGetSubmissionsRequest modAssignGetSubmissionsRequest, final ApiCallback<ModAssignGetSubmissions200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modAssignGetSubmissionsValidateBeforeCall(modAssignGetSubmissionsRequest, _callback);
        Type localVarReturnType = new TypeToken<ModAssignGetSubmissions200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modAssignGetUserFlags
     * @param modAssignGetUserFlagsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modAssignGetUserFlagsCall(ModAssignGetUserFlagsRequest modAssignGetUserFlagsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modAssignGetUserFlagsRequest;

        // create path and map variables
        String localVarPath = "/mod_assign_get_user_flags";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modAssignGetUserFlagsValidateBeforeCall(ModAssignGetUserFlagsRequest modAssignGetUserFlagsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modAssignGetUserFlagsRequest' is set
        if (modAssignGetUserFlagsRequest == null) {
            throw new ApiException("Missing the required parameter 'modAssignGetUserFlagsRequest' when calling modAssignGetUserFlags(Async)");
        }

        return modAssignGetUserFlagsCall(modAssignGetUserFlagsRequest, _callback);

    }

    /**
     * Returns the user flags for assignments
     * Returns the user flags for assignments
     * @param modAssignGetUserFlagsRequest  (required)
     * @return ModAssignGetUserFlags200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModAssignGetUserFlags200Response modAssignGetUserFlags(ModAssignGetUserFlagsRequest modAssignGetUserFlagsRequest) throws ApiException {
        ApiResponse<ModAssignGetUserFlags200Response> localVarResp = modAssignGetUserFlagsWithHttpInfo(modAssignGetUserFlagsRequest);
        return localVarResp.getData();
    }

    /**
     * Returns the user flags for assignments
     * Returns the user flags for assignments
     * @param modAssignGetUserFlagsRequest  (required)
     * @return ApiResponse&lt;ModAssignGetUserFlags200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModAssignGetUserFlags200Response> modAssignGetUserFlagsWithHttpInfo(ModAssignGetUserFlagsRequest modAssignGetUserFlagsRequest) throws ApiException {
        okhttp3.Call localVarCall = modAssignGetUserFlagsValidateBeforeCall(modAssignGetUserFlagsRequest, null);
        Type localVarReturnType = new TypeToken<ModAssignGetUserFlags200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the user flags for assignments (asynchronously)
     * Returns the user flags for assignments
     * @param modAssignGetUserFlagsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modAssignGetUserFlagsAsync(ModAssignGetUserFlagsRequest modAssignGetUserFlagsRequest, final ApiCallback<ModAssignGetUserFlags200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modAssignGetUserFlagsValidateBeforeCall(modAssignGetUserFlagsRequest, _callback);
        Type localVarReturnType = new TypeToken<ModAssignGetUserFlags200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modAssignGetUserMappings
     * @param modAssignGetUserFlagsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modAssignGetUserMappingsCall(ModAssignGetUserFlagsRequest modAssignGetUserFlagsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modAssignGetUserFlagsRequest;

        // create path and map variables
        String localVarPath = "/mod_assign_get_user_mappings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modAssignGetUserMappingsValidateBeforeCall(ModAssignGetUserFlagsRequest modAssignGetUserFlagsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modAssignGetUserFlagsRequest' is set
        if (modAssignGetUserFlagsRequest == null) {
            throw new ApiException("Missing the required parameter 'modAssignGetUserFlagsRequest' when calling modAssignGetUserMappings(Async)");
        }

        return modAssignGetUserMappingsCall(modAssignGetUserFlagsRequest, _callback);

    }

    /**
     * Returns the blind marking mappings for assignments
     * Returns the blind marking mappings for assignments
     * @param modAssignGetUserFlagsRequest  (required)
     * @return ModAssignGetUserMappings200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModAssignGetUserMappings200Response modAssignGetUserMappings(ModAssignGetUserFlagsRequest modAssignGetUserFlagsRequest) throws ApiException {
        ApiResponse<ModAssignGetUserMappings200Response> localVarResp = modAssignGetUserMappingsWithHttpInfo(modAssignGetUserFlagsRequest);
        return localVarResp.getData();
    }

    /**
     * Returns the blind marking mappings for assignments
     * Returns the blind marking mappings for assignments
     * @param modAssignGetUserFlagsRequest  (required)
     * @return ApiResponse&lt;ModAssignGetUserMappings200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModAssignGetUserMappings200Response> modAssignGetUserMappingsWithHttpInfo(ModAssignGetUserFlagsRequest modAssignGetUserFlagsRequest) throws ApiException {
        okhttp3.Call localVarCall = modAssignGetUserMappingsValidateBeforeCall(modAssignGetUserFlagsRequest, null);
        Type localVarReturnType = new TypeToken<ModAssignGetUserMappings200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the blind marking mappings for assignments (asynchronously)
     * Returns the blind marking mappings for assignments
     * @param modAssignGetUserFlagsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modAssignGetUserMappingsAsync(ModAssignGetUserFlagsRequest modAssignGetUserFlagsRequest, final ApiCallback<ModAssignGetUserMappings200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modAssignGetUserMappingsValidateBeforeCall(modAssignGetUserFlagsRequest, _callback);
        Type localVarReturnType = new TypeToken<ModAssignGetUserMappings200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modAssignListParticipants
     * @param modAssignListParticipantsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modAssignListParticipantsCall(ModAssignListParticipantsRequest modAssignListParticipantsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modAssignListParticipantsRequest;

        // create path and map variables
        String localVarPath = "/mod_assign_list_participants";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modAssignListParticipantsValidateBeforeCall(ModAssignListParticipantsRequest modAssignListParticipantsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modAssignListParticipantsRequest' is set
        if (modAssignListParticipantsRequest == null) {
            throw new ApiException("Missing the required parameter 'modAssignListParticipantsRequest' when calling modAssignListParticipants(Async)");
        }

        return modAssignListParticipantsCall(modAssignListParticipantsRequest, _callback);

    }

    /**
     * List the participants for a single assignment, with some summary info about their submissions.
     * List the participants for a single assignment, with some summary info about their submissions.
     * @param modAssignListParticipantsRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object modAssignListParticipants(ModAssignListParticipantsRequest modAssignListParticipantsRequest) throws ApiException {
        ApiResponse<Object> localVarResp = modAssignListParticipantsWithHttpInfo(modAssignListParticipantsRequest);
        return localVarResp.getData();
    }

    /**
     * List the participants for a single assignment, with some summary info about their submissions.
     * List the participants for a single assignment, with some summary info about their submissions.
     * @param modAssignListParticipantsRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> modAssignListParticipantsWithHttpInfo(ModAssignListParticipantsRequest modAssignListParticipantsRequest) throws ApiException {
        okhttp3.Call localVarCall = modAssignListParticipantsValidateBeforeCall(modAssignListParticipantsRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the participants for a single assignment, with some summary info about their submissions. (asynchronously)
     * List the participants for a single assignment, with some summary info about their submissions.
     * @param modAssignListParticipantsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modAssignListParticipantsAsync(ModAssignListParticipantsRequest modAssignListParticipantsRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = modAssignListParticipantsValidateBeforeCall(modAssignListParticipantsRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modAssignLockSubmissions
     * @param modAssignLockSubmissionsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of warnings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modAssignLockSubmissionsCall(ModAssignLockSubmissionsRequest modAssignLockSubmissionsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modAssignLockSubmissionsRequest;

        // create path and map variables
        String localVarPath = "/mod_assign_lock_submissions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modAssignLockSubmissionsValidateBeforeCall(ModAssignLockSubmissionsRequest modAssignLockSubmissionsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modAssignLockSubmissionsRequest' is set
        if (modAssignLockSubmissionsRequest == null) {
            throw new ApiException("Missing the required parameter 'modAssignLockSubmissionsRequest' when calling modAssignLockSubmissions(Async)");
        }

        return modAssignLockSubmissionsCall(modAssignLockSubmissionsRequest, _callback);

    }

    /**
     * Prevent students from making changes to a list of submissions
     * Prevent students from making changes to a list of submissions
     * @param modAssignLockSubmissionsRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of warnings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object modAssignLockSubmissions(ModAssignLockSubmissionsRequest modAssignLockSubmissionsRequest) throws ApiException {
        ApiResponse<Object> localVarResp = modAssignLockSubmissionsWithHttpInfo(modAssignLockSubmissionsRequest);
        return localVarResp.getData();
    }

    /**
     * Prevent students from making changes to a list of submissions
     * Prevent students from making changes to a list of submissions
     * @param modAssignLockSubmissionsRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of warnings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> modAssignLockSubmissionsWithHttpInfo(ModAssignLockSubmissionsRequest modAssignLockSubmissionsRequest) throws ApiException {
        okhttp3.Call localVarCall = modAssignLockSubmissionsValidateBeforeCall(modAssignLockSubmissionsRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Prevent students from making changes to a list of submissions (asynchronously)
     * Prevent students from making changes to a list of submissions
     * @param modAssignLockSubmissionsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of warnings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modAssignLockSubmissionsAsync(ModAssignLockSubmissionsRequest modAssignLockSubmissionsRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = modAssignLockSubmissionsValidateBeforeCall(modAssignLockSubmissionsRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modAssignRevealIdentities
     * @param modAssignRevealIdentitiesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of warnings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modAssignRevealIdentitiesCall(ModAssignRevealIdentitiesRequest modAssignRevealIdentitiesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modAssignRevealIdentitiesRequest;

        // create path and map variables
        String localVarPath = "/mod_assign_reveal_identities";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modAssignRevealIdentitiesValidateBeforeCall(ModAssignRevealIdentitiesRequest modAssignRevealIdentitiesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modAssignRevealIdentitiesRequest' is set
        if (modAssignRevealIdentitiesRequest == null) {
            throw new ApiException("Missing the required parameter 'modAssignRevealIdentitiesRequest' when calling modAssignRevealIdentities(Async)");
        }

        return modAssignRevealIdentitiesCall(modAssignRevealIdentitiesRequest, _callback);

    }

    /**
     * Reveal the identities for a blind marking assignment
     * Reveal the identities for a blind marking assignment
     * @param modAssignRevealIdentitiesRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of warnings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object modAssignRevealIdentities(ModAssignRevealIdentitiesRequest modAssignRevealIdentitiesRequest) throws ApiException {
        ApiResponse<Object> localVarResp = modAssignRevealIdentitiesWithHttpInfo(modAssignRevealIdentitiesRequest);
        return localVarResp.getData();
    }

    /**
     * Reveal the identities for a blind marking assignment
     * Reveal the identities for a blind marking assignment
     * @param modAssignRevealIdentitiesRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of warnings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> modAssignRevealIdentitiesWithHttpInfo(ModAssignRevealIdentitiesRequest modAssignRevealIdentitiesRequest) throws ApiException {
        okhttp3.Call localVarCall = modAssignRevealIdentitiesValidateBeforeCall(modAssignRevealIdentitiesRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Reveal the identities for a blind marking assignment (asynchronously)
     * Reveal the identities for a blind marking assignment
     * @param modAssignRevealIdentitiesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of warnings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modAssignRevealIdentitiesAsync(ModAssignRevealIdentitiesRequest modAssignRevealIdentitiesRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = modAssignRevealIdentitiesValidateBeforeCall(modAssignRevealIdentitiesRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modAssignRevertSubmissionsToDraft
     * @param modAssignRevertSubmissionsToDraftRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of warnings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modAssignRevertSubmissionsToDraftCall(ModAssignRevertSubmissionsToDraftRequest modAssignRevertSubmissionsToDraftRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modAssignRevertSubmissionsToDraftRequest;

        // create path and map variables
        String localVarPath = "/mod_assign_revert_submissions_to_draft";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modAssignRevertSubmissionsToDraftValidateBeforeCall(ModAssignRevertSubmissionsToDraftRequest modAssignRevertSubmissionsToDraftRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modAssignRevertSubmissionsToDraftRequest' is set
        if (modAssignRevertSubmissionsToDraftRequest == null) {
            throw new ApiException("Missing the required parameter 'modAssignRevertSubmissionsToDraftRequest' when calling modAssignRevertSubmissionsToDraft(Async)");
        }

        return modAssignRevertSubmissionsToDraftCall(modAssignRevertSubmissionsToDraftRequest, _callback);

    }

    /**
     * Reverts the list of submissions to draft status
     * Reverts the list of submissions to draft status
     * @param modAssignRevertSubmissionsToDraftRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of warnings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object modAssignRevertSubmissionsToDraft(ModAssignRevertSubmissionsToDraftRequest modAssignRevertSubmissionsToDraftRequest) throws ApiException {
        ApiResponse<Object> localVarResp = modAssignRevertSubmissionsToDraftWithHttpInfo(modAssignRevertSubmissionsToDraftRequest);
        return localVarResp.getData();
    }

    /**
     * Reverts the list of submissions to draft status
     * Reverts the list of submissions to draft status
     * @param modAssignRevertSubmissionsToDraftRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of warnings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> modAssignRevertSubmissionsToDraftWithHttpInfo(ModAssignRevertSubmissionsToDraftRequest modAssignRevertSubmissionsToDraftRequest) throws ApiException {
        okhttp3.Call localVarCall = modAssignRevertSubmissionsToDraftValidateBeforeCall(modAssignRevertSubmissionsToDraftRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Reverts the list of submissions to draft status (asynchronously)
     * Reverts the list of submissions to draft status
     * @param modAssignRevertSubmissionsToDraftRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of warnings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modAssignRevertSubmissionsToDraftAsync(ModAssignRevertSubmissionsToDraftRequest modAssignRevertSubmissionsToDraftRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = modAssignRevertSubmissionsToDraftValidateBeforeCall(modAssignRevertSubmissionsToDraftRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modAssignSaveGrade
     * @param modAssignSaveGradeRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modAssignSaveGradeCall(ModAssignSaveGradeRequest modAssignSaveGradeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modAssignSaveGradeRequest;

        // create path and map variables
        String localVarPath = "/mod_assign_save_grade";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modAssignSaveGradeValidateBeforeCall(ModAssignSaveGradeRequest modAssignSaveGradeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modAssignSaveGradeRequest' is set
        if (modAssignSaveGradeRequest == null) {
            throw new ApiException("Missing the required parameter 'modAssignSaveGradeRequest' when calling modAssignSaveGrade(Async)");
        }

        return modAssignSaveGradeCall(modAssignSaveGradeRequest, _callback);

    }

    /**
     * Save a grade update for a single student.
     * Save a grade update for a single student.
     * @param modAssignSaveGradeRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object modAssignSaveGrade(ModAssignSaveGradeRequest modAssignSaveGradeRequest) throws ApiException {
        ApiResponse<Object> localVarResp = modAssignSaveGradeWithHttpInfo(modAssignSaveGradeRequest);
        return localVarResp.getData();
    }

    /**
     * Save a grade update for a single student.
     * Save a grade update for a single student.
     * @param modAssignSaveGradeRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> modAssignSaveGradeWithHttpInfo(ModAssignSaveGradeRequest modAssignSaveGradeRequest) throws ApiException {
        okhttp3.Call localVarCall = modAssignSaveGradeValidateBeforeCall(modAssignSaveGradeRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Save a grade update for a single student. (asynchronously)
     * Save a grade update for a single student.
     * @param modAssignSaveGradeRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modAssignSaveGradeAsync(ModAssignSaveGradeRequest modAssignSaveGradeRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = modAssignSaveGradeValidateBeforeCall(modAssignSaveGradeRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modAssignSaveGrades
     * @param modAssignSaveGradesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modAssignSaveGradesCall(ModAssignSaveGradesRequest modAssignSaveGradesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modAssignSaveGradesRequest;

        // create path and map variables
        String localVarPath = "/mod_assign_save_grades";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modAssignSaveGradesValidateBeforeCall(ModAssignSaveGradesRequest modAssignSaveGradesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modAssignSaveGradesRequest' is set
        if (modAssignSaveGradesRequest == null) {
            throw new ApiException("Missing the required parameter 'modAssignSaveGradesRequest' when calling modAssignSaveGrades(Async)");
        }

        return modAssignSaveGradesCall(modAssignSaveGradesRequest, _callback);

    }

    /**
     * Save multiple grade updates for an assignment.
     * Save multiple grade updates for an assignment.
     * @param modAssignSaveGradesRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object modAssignSaveGrades(ModAssignSaveGradesRequest modAssignSaveGradesRequest) throws ApiException {
        ApiResponse<Object> localVarResp = modAssignSaveGradesWithHttpInfo(modAssignSaveGradesRequest);
        return localVarResp.getData();
    }

    /**
     * Save multiple grade updates for an assignment.
     * Save multiple grade updates for an assignment.
     * @param modAssignSaveGradesRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> modAssignSaveGradesWithHttpInfo(ModAssignSaveGradesRequest modAssignSaveGradesRequest) throws ApiException {
        okhttp3.Call localVarCall = modAssignSaveGradesValidateBeforeCall(modAssignSaveGradesRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Save multiple grade updates for an assignment. (asynchronously)
     * Save multiple grade updates for an assignment.
     * @param modAssignSaveGradesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modAssignSaveGradesAsync(ModAssignSaveGradesRequest modAssignSaveGradesRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = modAssignSaveGradesValidateBeforeCall(modAssignSaveGradesRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modAssignSaveSubmission
     * @param modAssignSaveSubmissionRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of warnings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modAssignSaveSubmissionCall(ModAssignSaveSubmissionRequest modAssignSaveSubmissionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modAssignSaveSubmissionRequest;

        // create path and map variables
        String localVarPath = "/mod_assign_save_submission";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modAssignSaveSubmissionValidateBeforeCall(ModAssignSaveSubmissionRequest modAssignSaveSubmissionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modAssignSaveSubmissionRequest' is set
        if (modAssignSaveSubmissionRequest == null) {
            throw new ApiException("Missing the required parameter 'modAssignSaveSubmissionRequest' when calling modAssignSaveSubmission(Async)");
        }

        return modAssignSaveSubmissionCall(modAssignSaveSubmissionRequest, _callback);

    }

    /**
     * Update the current students submission
     * Update the current students submission
     * @param modAssignSaveSubmissionRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of warnings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object modAssignSaveSubmission(ModAssignSaveSubmissionRequest modAssignSaveSubmissionRequest) throws ApiException {
        ApiResponse<Object> localVarResp = modAssignSaveSubmissionWithHttpInfo(modAssignSaveSubmissionRequest);
        return localVarResp.getData();
    }

    /**
     * Update the current students submission
     * Update the current students submission
     * @param modAssignSaveSubmissionRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of warnings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> modAssignSaveSubmissionWithHttpInfo(ModAssignSaveSubmissionRequest modAssignSaveSubmissionRequest) throws ApiException {
        okhttp3.Call localVarCall = modAssignSaveSubmissionValidateBeforeCall(modAssignSaveSubmissionRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the current students submission (asynchronously)
     * Update the current students submission
     * @param modAssignSaveSubmissionRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of warnings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modAssignSaveSubmissionAsync(ModAssignSaveSubmissionRequest modAssignSaveSubmissionRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = modAssignSaveSubmissionValidateBeforeCall(modAssignSaveSubmissionRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modAssignSaveUserExtensions
     * @param modAssignSaveUserExtensionsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of warnings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modAssignSaveUserExtensionsCall(ModAssignSaveUserExtensionsRequest modAssignSaveUserExtensionsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modAssignSaveUserExtensionsRequest;

        // create path and map variables
        String localVarPath = "/mod_assign_save_user_extensions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modAssignSaveUserExtensionsValidateBeforeCall(ModAssignSaveUserExtensionsRequest modAssignSaveUserExtensionsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modAssignSaveUserExtensionsRequest' is set
        if (modAssignSaveUserExtensionsRequest == null) {
            throw new ApiException("Missing the required parameter 'modAssignSaveUserExtensionsRequest' when calling modAssignSaveUserExtensions(Async)");
        }

        return modAssignSaveUserExtensionsCall(modAssignSaveUserExtensionsRequest, _callback);

    }

    /**
     * Save a list of assignment extensions
     * Save a list of assignment extensions
     * @param modAssignSaveUserExtensionsRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of warnings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object modAssignSaveUserExtensions(ModAssignSaveUserExtensionsRequest modAssignSaveUserExtensionsRequest) throws ApiException {
        ApiResponse<Object> localVarResp = modAssignSaveUserExtensionsWithHttpInfo(modAssignSaveUserExtensionsRequest);
        return localVarResp.getData();
    }

    /**
     * Save a list of assignment extensions
     * Save a list of assignment extensions
     * @param modAssignSaveUserExtensionsRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of warnings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> modAssignSaveUserExtensionsWithHttpInfo(ModAssignSaveUserExtensionsRequest modAssignSaveUserExtensionsRequest) throws ApiException {
        okhttp3.Call localVarCall = modAssignSaveUserExtensionsValidateBeforeCall(modAssignSaveUserExtensionsRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Save a list of assignment extensions (asynchronously)
     * Save a list of assignment extensions
     * @param modAssignSaveUserExtensionsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of warnings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modAssignSaveUserExtensionsAsync(ModAssignSaveUserExtensionsRequest modAssignSaveUserExtensionsRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = modAssignSaveUserExtensionsValidateBeforeCall(modAssignSaveUserExtensionsRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modAssignSetUserFlags
     * @param modAssignSetUserFlagsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modAssignSetUserFlagsCall(ModAssignSetUserFlagsRequest modAssignSetUserFlagsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modAssignSetUserFlagsRequest;

        // create path and map variables
        String localVarPath = "/mod_assign_set_user_flags";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modAssignSetUserFlagsValidateBeforeCall(ModAssignSetUserFlagsRequest modAssignSetUserFlagsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modAssignSetUserFlagsRequest' is set
        if (modAssignSetUserFlagsRequest == null) {
            throw new ApiException("Missing the required parameter 'modAssignSetUserFlagsRequest' when calling modAssignSetUserFlags(Async)");
        }

        return modAssignSetUserFlagsCall(modAssignSetUserFlagsRequest, _callback);

    }

    /**
     * Creates or updates user flags
     * Creates or updates user flags
     * @param modAssignSetUserFlagsRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object modAssignSetUserFlags(ModAssignSetUserFlagsRequest modAssignSetUserFlagsRequest) throws ApiException {
        ApiResponse<Object> localVarResp = modAssignSetUserFlagsWithHttpInfo(modAssignSetUserFlagsRequest);
        return localVarResp.getData();
    }

    /**
     * Creates or updates user flags
     * Creates or updates user flags
     * @param modAssignSetUserFlagsRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> modAssignSetUserFlagsWithHttpInfo(ModAssignSetUserFlagsRequest modAssignSetUserFlagsRequest) throws ApiException {
        okhttp3.Call localVarCall = modAssignSetUserFlagsValidateBeforeCall(modAssignSetUserFlagsRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates or updates user flags (asynchronously)
     * Creates or updates user flags
     * @param modAssignSetUserFlagsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modAssignSetUserFlagsAsync(ModAssignSetUserFlagsRequest modAssignSetUserFlagsRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = modAssignSetUserFlagsValidateBeforeCall(modAssignSetUserFlagsRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modAssignStartSubmission
     * @param modAssignStartSubmissionRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modAssignStartSubmissionCall(ModAssignStartSubmissionRequest modAssignStartSubmissionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modAssignStartSubmissionRequest;

        // create path and map variables
        String localVarPath = "/mod_assign_start_submission";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modAssignStartSubmissionValidateBeforeCall(ModAssignStartSubmissionRequest modAssignStartSubmissionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modAssignStartSubmissionRequest' is set
        if (modAssignStartSubmissionRequest == null) {
            throw new ApiException("Missing the required parameter 'modAssignStartSubmissionRequest' when calling modAssignStartSubmission(Async)");
        }

        return modAssignStartSubmissionCall(modAssignStartSubmissionRequest, _callback);

    }

    /**
     * Start a submission for user if assignment has a time limit.
     * Start a submission for user if assignment has a time limit.
     * @param modAssignStartSubmissionRequest  (required)
     * @return ModAssignStartSubmission200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModAssignStartSubmission200Response modAssignStartSubmission(ModAssignStartSubmissionRequest modAssignStartSubmissionRequest) throws ApiException {
        ApiResponse<ModAssignStartSubmission200Response> localVarResp = modAssignStartSubmissionWithHttpInfo(modAssignStartSubmissionRequest);
        return localVarResp.getData();
    }

    /**
     * Start a submission for user if assignment has a time limit.
     * Start a submission for user if assignment has a time limit.
     * @param modAssignStartSubmissionRequest  (required)
     * @return ApiResponse&lt;ModAssignStartSubmission200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModAssignStartSubmission200Response> modAssignStartSubmissionWithHttpInfo(ModAssignStartSubmissionRequest modAssignStartSubmissionRequest) throws ApiException {
        okhttp3.Call localVarCall = modAssignStartSubmissionValidateBeforeCall(modAssignStartSubmissionRequest, null);
        Type localVarReturnType = new TypeToken<ModAssignStartSubmission200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Start a submission for user if assignment has a time limit. (asynchronously)
     * Start a submission for user if assignment has a time limit.
     * @param modAssignStartSubmissionRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modAssignStartSubmissionAsync(ModAssignStartSubmissionRequest modAssignStartSubmissionRequest, final ApiCallback<ModAssignStartSubmission200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modAssignStartSubmissionValidateBeforeCall(modAssignStartSubmissionRequest, _callback);
        Type localVarReturnType = new TypeToken<ModAssignStartSubmission200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modAssignSubmitForGrading
     * @param modAssignSubmitForGradingRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of warnings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modAssignSubmitForGradingCall(ModAssignSubmitForGradingRequest modAssignSubmitForGradingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modAssignSubmitForGradingRequest;

        // create path and map variables
        String localVarPath = "/mod_assign_submit_for_grading";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modAssignSubmitForGradingValidateBeforeCall(ModAssignSubmitForGradingRequest modAssignSubmitForGradingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modAssignSubmitForGradingRequest' is set
        if (modAssignSubmitForGradingRequest == null) {
            throw new ApiException("Missing the required parameter 'modAssignSubmitForGradingRequest' when calling modAssignSubmitForGrading(Async)");
        }

        return modAssignSubmitForGradingCall(modAssignSubmitForGradingRequest, _callback);

    }

    /**
     * Submit the current students assignment for grading
     * Submit the current students assignment for grading
     * @param modAssignSubmitForGradingRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of warnings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object modAssignSubmitForGrading(ModAssignSubmitForGradingRequest modAssignSubmitForGradingRequest) throws ApiException {
        ApiResponse<Object> localVarResp = modAssignSubmitForGradingWithHttpInfo(modAssignSubmitForGradingRequest);
        return localVarResp.getData();
    }

    /**
     * Submit the current students assignment for grading
     * Submit the current students assignment for grading
     * @param modAssignSubmitForGradingRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of warnings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> modAssignSubmitForGradingWithHttpInfo(ModAssignSubmitForGradingRequest modAssignSubmitForGradingRequest) throws ApiException {
        okhttp3.Call localVarCall = modAssignSubmitForGradingValidateBeforeCall(modAssignSubmitForGradingRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Submit the current students assignment for grading (asynchronously)
     * Submit the current students assignment for grading
     * @param modAssignSubmitForGradingRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of warnings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modAssignSubmitForGradingAsync(ModAssignSubmitForGradingRequest modAssignSubmitForGradingRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = modAssignSubmitForGradingValidateBeforeCall(modAssignSubmitForGradingRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modAssignSubmitGradingForm
     * @param modAssignSubmitGradingFormRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of warnings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modAssignSubmitGradingFormCall(ModAssignSubmitGradingFormRequest modAssignSubmitGradingFormRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modAssignSubmitGradingFormRequest;

        // create path and map variables
        String localVarPath = "/mod_assign_submit_grading_form";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modAssignSubmitGradingFormValidateBeforeCall(ModAssignSubmitGradingFormRequest modAssignSubmitGradingFormRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modAssignSubmitGradingFormRequest' is set
        if (modAssignSubmitGradingFormRequest == null) {
            throw new ApiException("Missing the required parameter 'modAssignSubmitGradingFormRequest' when calling modAssignSubmitGradingForm(Async)");
        }

        return modAssignSubmitGradingFormCall(modAssignSubmitGradingFormRequest, _callback);

    }

    /**
     * Submit the grading form data via ajax
     * Submit the grading form data via ajax
     * @param modAssignSubmitGradingFormRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of warnings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object modAssignSubmitGradingForm(ModAssignSubmitGradingFormRequest modAssignSubmitGradingFormRequest) throws ApiException {
        ApiResponse<Object> localVarResp = modAssignSubmitGradingFormWithHttpInfo(modAssignSubmitGradingFormRequest);
        return localVarResp.getData();
    }

    /**
     * Submit the grading form data via ajax
     * Submit the grading form data via ajax
     * @param modAssignSubmitGradingFormRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of warnings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> modAssignSubmitGradingFormWithHttpInfo(ModAssignSubmitGradingFormRequest modAssignSubmitGradingFormRequest) throws ApiException {
        okhttp3.Call localVarCall = modAssignSubmitGradingFormValidateBeforeCall(modAssignSubmitGradingFormRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Submit the grading form data via ajax (asynchronously)
     * Submit the grading form data via ajax
     * @param modAssignSubmitGradingFormRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of warnings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modAssignSubmitGradingFormAsync(ModAssignSubmitGradingFormRequest modAssignSubmitGradingFormRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = modAssignSubmitGradingFormValidateBeforeCall(modAssignSubmitGradingFormRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modAssignUnlockSubmissions
     * @param modAssignRevertSubmissionsToDraftRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of warnings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modAssignUnlockSubmissionsCall(ModAssignRevertSubmissionsToDraftRequest modAssignRevertSubmissionsToDraftRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modAssignRevertSubmissionsToDraftRequest;

        // create path and map variables
        String localVarPath = "/mod_assign_unlock_submissions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modAssignUnlockSubmissionsValidateBeforeCall(ModAssignRevertSubmissionsToDraftRequest modAssignRevertSubmissionsToDraftRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modAssignRevertSubmissionsToDraftRequest' is set
        if (modAssignRevertSubmissionsToDraftRequest == null) {
            throw new ApiException("Missing the required parameter 'modAssignRevertSubmissionsToDraftRequest' when calling modAssignUnlockSubmissions(Async)");
        }

        return modAssignUnlockSubmissionsCall(modAssignRevertSubmissionsToDraftRequest, _callback);

    }

    /**
     * Allow students to make changes to a list of submissions
     * Allow students to make changes to a list of submissions
     * @param modAssignRevertSubmissionsToDraftRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of warnings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object modAssignUnlockSubmissions(ModAssignRevertSubmissionsToDraftRequest modAssignRevertSubmissionsToDraftRequest) throws ApiException {
        ApiResponse<Object> localVarResp = modAssignUnlockSubmissionsWithHttpInfo(modAssignRevertSubmissionsToDraftRequest);
        return localVarResp.getData();
    }

    /**
     * Allow students to make changes to a list of submissions
     * Allow students to make changes to a list of submissions
     * @param modAssignRevertSubmissionsToDraftRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of warnings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> modAssignUnlockSubmissionsWithHttpInfo(ModAssignRevertSubmissionsToDraftRequest modAssignRevertSubmissionsToDraftRequest) throws ApiException {
        okhttp3.Call localVarCall = modAssignUnlockSubmissionsValidateBeforeCall(modAssignRevertSubmissionsToDraftRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Allow students to make changes to a list of submissions (asynchronously)
     * Allow students to make changes to a list of submissions
     * @param modAssignRevertSubmissionsToDraftRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of warnings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modAssignUnlockSubmissionsAsync(ModAssignRevertSubmissionsToDraftRequest modAssignRevertSubmissionsToDraftRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = modAssignUnlockSubmissionsValidateBeforeCall(modAssignRevertSubmissionsToDraftRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modAssignViewAssign
     * @param modAssignViewAssignRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modAssignViewAssignCall(ModAssignViewAssignRequest modAssignViewAssignRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modAssignViewAssignRequest;

        // create path and map variables
        String localVarPath = "/mod_assign_view_assign";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modAssignViewAssignValidateBeforeCall(ModAssignViewAssignRequest modAssignViewAssignRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modAssignViewAssignRequest' is set
        if (modAssignViewAssignRequest == null) {
            throw new ApiException("Missing the required parameter 'modAssignViewAssignRequest' when calling modAssignViewAssign(Async)");
        }

        return modAssignViewAssignCall(modAssignViewAssignRequest, _callback);

    }

    /**
     * Update the module completion status.
     * Update the module completion status.
     * @param modAssignViewAssignRequest  (required)
     * @return CoreCalendarDeleteSubscription200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreCalendarDeleteSubscription200Response modAssignViewAssign(ModAssignViewAssignRequest modAssignViewAssignRequest) throws ApiException {
        ApiResponse<CoreCalendarDeleteSubscription200Response> localVarResp = modAssignViewAssignWithHttpInfo(modAssignViewAssignRequest);
        return localVarResp.getData();
    }

    /**
     * Update the module completion status.
     * Update the module completion status.
     * @param modAssignViewAssignRequest  (required)
     * @return ApiResponse&lt;CoreCalendarDeleteSubscription200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreCalendarDeleteSubscription200Response> modAssignViewAssignWithHttpInfo(ModAssignViewAssignRequest modAssignViewAssignRequest) throws ApiException {
        okhttp3.Call localVarCall = modAssignViewAssignValidateBeforeCall(modAssignViewAssignRequest, null);
        Type localVarReturnType = new TypeToken<CoreCalendarDeleteSubscription200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the module completion status. (asynchronously)
     * Update the module completion status.
     * @param modAssignViewAssignRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modAssignViewAssignAsync(ModAssignViewAssignRequest modAssignViewAssignRequest, final ApiCallback<CoreCalendarDeleteSubscription200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modAssignViewAssignValidateBeforeCall(modAssignViewAssignRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreCalendarDeleteSubscription200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modAssignViewGradingTable
     * @param modAssignViewAssignRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modAssignViewGradingTableCall(ModAssignViewAssignRequest modAssignViewAssignRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modAssignViewAssignRequest;

        // create path and map variables
        String localVarPath = "/mod_assign_view_grading_table";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modAssignViewGradingTableValidateBeforeCall(ModAssignViewAssignRequest modAssignViewAssignRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modAssignViewAssignRequest' is set
        if (modAssignViewAssignRequest == null) {
            throw new ApiException("Missing the required parameter 'modAssignViewAssignRequest' when calling modAssignViewGradingTable(Async)");
        }

        return modAssignViewGradingTableCall(modAssignViewAssignRequest, _callback);

    }

    /**
     * Trigger the grading_table_viewed event.
     * Trigger the grading_table_viewed event.
     * @param modAssignViewAssignRequest  (required)
     * @return CoreCalendarDeleteSubscription200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreCalendarDeleteSubscription200Response modAssignViewGradingTable(ModAssignViewAssignRequest modAssignViewAssignRequest) throws ApiException {
        ApiResponse<CoreCalendarDeleteSubscription200Response> localVarResp = modAssignViewGradingTableWithHttpInfo(modAssignViewAssignRequest);
        return localVarResp.getData();
    }

    /**
     * Trigger the grading_table_viewed event.
     * Trigger the grading_table_viewed event.
     * @param modAssignViewAssignRequest  (required)
     * @return ApiResponse&lt;CoreCalendarDeleteSubscription200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreCalendarDeleteSubscription200Response> modAssignViewGradingTableWithHttpInfo(ModAssignViewAssignRequest modAssignViewAssignRequest) throws ApiException {
        okhttp3.Call localVarCall = modAssignViewGradingTableValidateBeforeCall(modAssignViewAssignRequest, null);
        Type localVarReturnType = new TypeToken<CoreCalendarDeleteSubscription200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Trigger the grading_table_viewed event. (asynchronously)
     * Trigger the grading_table_viewed event.
     * @param modAssignViewAssignRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modAssignViewGradingTableAsync(ModAssignViewAssignRequest modAssignViewAssignRequest, final ApiCallback<CoreCalendarDeleteSubscription200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modAssignViewGradingTableValidateBeforeCall(modAssignViewAssignRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreCalendarDeleteSubscription200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modAssignViewSubmissionStatus
     * @param modAssignViewAssignRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modAssignViewSubmissionStatusCall(ModAssignViewAssignRequest modAssignViewAssignRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modAssignViewAssignRequest;

        // create path and map variables
        String localVarPath = "/mod_assign_view_submission_status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modAssignViewSubmissionStatusValidateBeforeCall(ModAssignViewAssignRequest modAssignViewAssignRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modAssignViewAssignRequest' is set
        if (modAssignViewAssignRequest == null) {
            throw new ApiException("Missing the required parameter 'modAssignViewAssignRequest' when calling modAssignViewSubmissionStatus(Async)");
        }

        return modAssignViewSubmissionStatusCall(modAssignViewAssignRequest, _callback);

    }

    /**
     * Trigger the submission status viewed event.
     * Trigger the submission status viewed event.
     * @param modAssignViewAssignRequest  (required)
     * @return CoreCalendarDeleteSubscription200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreCalendarDeleteSubscription200Response modAssignViewSubmissionStatus(ModAssignViewAssignRequest modAssignViewAssignRequest) throws ApiException {
        ApiResponse<CoreCalendarDeleteSubscription200Response> localVarResp = modAssignViewSubmissionStatusWithHttpInfo(modAssignViewAssignRequest);
        return localVarResp.getData();
    }

    /**
     * Trigger the submission status viewed event.
     * Trigger the submission status viewed event.
     * @param modAssignViewAssignRequest  (required)
     * @return ApiResponse&lt;CoreCalendarDeleteSubscription200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreCalendarDeleteSubscription200Response> modAssignViewSubmissionStatusWithHttpInfo(ModAssignViewAssignRequest modAssignViewAssignRequest) throws ApiException {
        okhttp3.Call localVarCall = modAssignViewSubmissionStatusValidateBeforeCall(modAssignViewAssignRequest, null);
        Type localVarReturnType = new TypeToken<CoreCalendarDeleteSubscription200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Trigger the submission status viewed event. (asynchronously)
     * Trigger the submission status viewed event.
     * @param modAssignViewAssignRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modAssignViewSubmissionStatusAsync(ModAssignViewAssignRequest modAssignViewAssignRequest, final ApiCallback<CoreCalendarDeleteSubscription200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modAssignViewSubmissionStatusValidateBeforeCall(modAssignViewAssignRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreCalendarDeleteSubscription200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
