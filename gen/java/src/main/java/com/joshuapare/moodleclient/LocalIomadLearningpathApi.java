/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.joshuapare.moodleclient;

import com.joshuapare.ApiCallback;
import com.joshuapare.ApiClient;
import com.joshuapare.ApiException;
import com.joshuapare.ApiResponse;
import com.joshuapare.Configuration;
import com.joshuapare.Pair;
import com.joshuapare.ProgressRequestBody;
import com.joshuapare.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.LocalIomadLearningpathActivateRequest;
import org.openapitools.client.model.LocalIomadLearningpathAddcoursesRequest;
import org.openapitools.client.model.LocalIomadLearningpathAddusersRequest;
import org.openapitools.client.model.LocalIomadLearningpathCopypathRequest;
import org.openapitools.client.model.LocalIomadLearningpathGetcoursesRequest;
import org.openapitools.client.model.LocalIomadLearningpathGetprospectivecoursesRequest;
import org.openapitools.client.model.LocalIomadLearningpathGetprospectiveusersRequest;
import org.openapitools.client.model.LocalIomadLearningpathGetusersRequest;
import org.openapitools.client.model.LocalIomadLearningpathOrdercoursesRequest;
import org.openapitools.client.model.LocalIomadLearningpathRemovecoursesRequest;
import org.openapitools.client.model.LocalIomadLearningpathRemoveusersRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LocalIomadLearningpathApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LocalIomadLearningpathApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LocalIomadLearningpathApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for localIomadLearningpathActivate
     * @param localIomadLearningpathActivateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if active state set correctly </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call localIomadLearningpathActivateCall(LocalIomadLearningpathActivateRequest localIomadLearningpathActivateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = localIomadLearningpathActivateRequest;

        // create path and map variables
        String localVarPath = "/local_iomad_learningpath_activate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call localIomadLearningpathActivateValidateBeforeCall(LocalIomadLearningpathActivateRequest localIomadLearningpathActivateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'localIomadLearningpathActivateRequest' is set
        if (localIomadLearningpathActivateRequest == null) {
            throw new ApiException("Missing the required parameter 'localIomadLearningpathActivateRequest' when calling localIomadLearningpathActivate(Async)");
        }

        return localIomadLearningpathActivateCall(localIomadLearningpathActivateRequest, _callback);

    }

    /**
     * Activates / deactivates learning path
     * Activates / deactivates learning path
     * @param localIomadLearningpathActivateRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if active state set correctly </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object localIomadLearningpathActivate(LocalIomadLearningpathActivateRequest localIomadLearningpathActivateRequest) throws ApiException {
        ApiResponse<Object> localVarResp = localIomadLearningpathActivateWithHttpInfo(localIomadLearningpathActivateRequest);
        return localVarResp.getData();
    }

    /**
     * Activates / deactivates learning path
     * Activates / deactivates learning path
     * @param localIomadLearningpathActivateRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if active state set correctly </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> localIomadLearningpathActivateWithHttpInfo(LocalIomadLearningpathActivateRequest localIomadLearningpathActivateRequest) throws ApiException {
        okhttp3.Call localVarCall = localIomadLearningpathActivateValidateBeforeCall(localIomadLearningpathActivateRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Activates / deactivates learning path (asynchronously)
     * Activates / deactivates learning path
     * @param localIomadLearningpathActivateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if active state set correctly </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call localIomadLearningpathActivateAsync(LocalIomadLearningpathActivateRequest localIomadLearningpathActivateRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = localIomadLearningpathActivateValidateBeforeCall(localIomadLearningpathActivateRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for localIomadLearningpathAddcourses
     * @param localIomadLearningpathAddcoursesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if courses added correctly </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call localIomadLearningpathAddcoursesCall(LocalIomadLearningpathAddcoursesRequest localIomadLearningpathAddcoursesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = localIomadLearningpathAddcoursesRequest;

        // create path and map variables
        String localVarPath = "/local_iomad_learningpath_addcourses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call localIomadLearningpathAddcoursesValidateBeforeCall(LocalIomadLearningpathAddcoursesRequest localIomadLearningpathAddcoursesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'localIomadLearningpathAddcoursesRequest' is set
        if (localIomadLearningpathAddcoursesRequest == null) {
            throw new ApiException("Missing the required parameter 'localIomadLearningpathAddcoursesRequest' when calling localIomadLearningpathAddcourses(Async)");
        }

        return localIomadLearningpathAddcoursesCall(localIomadLearningpathAddcoursesRequest, _callback);

    }

    /**
     * Add courses to learning path
     * Add courses to learning path
     * @param localIomadLearningpathAddcoursesRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if courses added correctly </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object localIomadLearningpathAddcourses(LocalIomadLearningpathAddcoursesRequest localIomadLearningpathAddcoursesRequest) throws ApiException {
        ApiResponse<Object> localVarResp = localIomadLearningpathAddcoursesWithHttpInfo(localIomadLearningpathAddcoursesRequest);
        return localVarResp.getData();
    }

    /**
     * Add courses to learning path
     * Add courses to learning path
     * @param localIomadLearningpathAddcoursesRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if courses added correctly </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> localIomadLearningpathAddcoursesWithHttpInfo(LocalIomadLearningpathAddcoursesRequest localIomadLearningpathAddcoursesRequest) throws ApiException {
        okhttp3.Call localVarCall = localIomadLearningpathAddcoursesValidateBeforeCall(localIomadLearningpathAddcoursesRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add courses to learning path (asynchronously)
     * Add courses to learning path
     * @param localIomadLearningpathAddcoursesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if courses added correctly </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call localIomadLearningpathAddcoursesAsync(LocalIomadLearningpathAddcoursesRequest localIomadLearningpathAddcoursesRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = localIomadLearningpathAddcoursesValidateBeforeCall(localIomadLearningpathAddcoursesRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for localIomadLearningpathAddusers
     * @param localIomadLearningpathAddusersRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if users added correctly </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call localIomadLearningpathAddusersCall(LocalIomadLearningpathAddusersRequest localIomadLearningpathAddusersRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = localIomadLearningpathAddusersRequest;

        // create path and map variables
        String localVarPath = "/local_iomad_learningpath_addusers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call localIomadLearningpathAddusersValidateBeforeCall(LocalIomadLearningpathAddusersRequest localIomadLearningpathAddusersRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'localIomadLearningpathAddusersRequest' is set
        if (localIomadLearningpathAddusersRequest == null) {
            throw new ApiException("Missing the required parameter 'localIomadLearningpathAddusersRequest' when calling localIomadLearningpathAddusers(Async)");
        }

        return localIomadLearningpathAddusersCall(localIomadLearningpathAddusersRequest, _callback);

    }

    /**
     * Add users to learning path
     * Add users to learning path
     * @param localIomadLearningpathAddusersRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if users added correctly </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object localIomadLearningpathAddusers(LocalIomadLearningpathAddusersRequest localIomadLearningpathAddusersRequest) throws ApiException {
        ApiResponse<Object> localVarResp = localIomadLearningpathAddusersWithHttpInfo(localIomadLearningpathAddusersRequest);
        return localVarResp.getData();
    }

    /**
     * Add users to learning path
     * Add users to learning path
     * @param localIomadLearningpathAddusersRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if users added correctly </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> localIomadLearningpathAddusersWithHttpInfo(LocalIomadLearningpathAddusersRequest localIomadLearningpathAddusersRequest) throws ApiException {
        okhttp3.Call localVarCall = localIomadLearningpathAddusersValidateBeforeCall(localIomadLearningpathAddusersRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add users to learning path (asynchronously)
     * Add users to learning path
     * @param localIomadLearningpathAddusersRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if users added correctly </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call localIomadLearningpathAddusersAsync(LocalIomadLearningpathAddusersRequest localIomadLearningpathAddusersRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = localIomadLearningpathAddusersValidateBeforeCall(localIomadLearningpathAddusersRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for localIomadLearningpathCopypath
     * @param localIomadLearningpathCopypathRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if path copied correctly </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call localIomadLearningpathCopypathCall(LocalIomadLearningpathCopypathRequest localIomadLearningpathCopypathRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = localIomadLearningpathCopypathRequest;

        // create path and map variables
        String localVarPath = "/local_iomad_learningpath_copypath";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call localIomadLearningpathCopypathValidateBeforeCall(LocalIomadLearningpathCopypathRequest localIomadLearningpathCopypathRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'localIomadLearningpathCopypathRequest' is set
        if (localIomadLearningpathCopypathRequest == null) {
            throw new ApiException("Missing the required parameter 'localIomadLearningpathCopypathRequest' when calling localIomadLearningpathCopypath(Async)");
        }

        return localIomadLearningpathCopypathCall(localIomadLearningpathCopypathRequest, _callback);

    }

    /**
     * Copy a learning path
     * Copy a learning path
     * @param localIomadLearningpathCopypathRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if path copied correctly </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object localIomadLearningpathCopypath(LocalIomadLearningpathCopypathRequest localIomadLearningpathCopypathRequest) throws ApiException {
        ApiResponse<Object> localVarResp = localIomadLearningpathCopypathWithHttpInfo(localIomadLearningpathCopypathRequest);
        return localVarResp.getData();
    }

    /**
     * Copy a learning path
     * Copy a learning path
     * @param localIomadLearningpathCopypathRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if path copied correctly </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> localIomadLearningpathCopypathWithHttpInfo(LocalIomadLearningpathCopypathRequest localIomadLearningpathCopypathRequest) throws ApiException {
        okhttp3.Call localVarCall = localIomadLearningpathCopypathValidateBeforeCall(localIomadLearningpathCopypathRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Copy a learning path (asynchronously)
     * Copy a learning path
     * @param localIomadLearningpathCopypathRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if path copied correctly </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call localIomadLearningpathCopypathAsync(LocalIomadLearningpathCopypathRequest localIomadLearningpathCopypathRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = localIomadLearningpathCopypathValidateBeforeCall(localIomadLearningpathCopypathRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for localIomadLearningpathDeletepath
     * @param localIomadLearningpathCopypathRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if courses added correctly </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call localIomadLearningpathDeletepathCall(LocalIomadLearningpathCopypathRequest localIomadLearningpathCopypathRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = localIomadLearningpathCopypathRequest;

        // create path and map variables
        String localVarPath = "/local_iomad_learningpath_deletepath";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call localIomadLearningpathDeletepathValidateBeforeCall(LocalIomadLearningpathCopypathRequest localIomadLearningpathCopypathRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'localIomadLearningpathCopypathRequest' is set
        if (localIomadLearningpathCopypathRequest == null) {
            throw new ApiException("Missing the required parameter 'localIomadLearningpathCopypathRequest' when calling localIomadLearningpathDeletepath(Async)");
        }

        return localIomadLearningpathDeletepathCall(localIomadLearningpathCopypathRequest, _callback);

    }

    /**
     * Completely delete a learning path
     * Completely delete a learning path
     * @param localIomadLearningpathCopypathRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if courses added correctly </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object localIomadLearningpathDeletepath(LocalIomadLearningpathCopypathRequest localIomadLearningpathCopypathRequest) throws ApiException {
        ApiResponse<Object> localVarResp = localIomadLearningpathDeletepathWithHttpInfo(localIomadLearningpathCopypathRequest);
        return localVarResp.getData();
    }

    /**
     * Completely delete a learning path
     * Completely delete a learning path
     * @param localIomadLearningpathCopypathRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if courses added correctly </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> localIomadLearningpathDeletepathWithHttpInfo(LocalIomadLearningpathCopypathRequest localIomadLearningpathCopypathRequest) throws ApiException {
        okhttp3.Call localVarCall = localIomadLearningpathDeletepathValidateBeforeCall(localIomadLearningpathCopypathRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Completely delete a learning path (asynchronously)
     * Completely delete a learning path
     * @param localIomadLearningpathCopypathRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if courses added correctly </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call localIomadLearningpathDeletepathAsync(LocalIomadLearningpathCopypathRequest localIomadLearningpathCopypathRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = localIomadLearningpathDeletepathValidateBeforeCall(localIomadLearningpathCopypathRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for localIomadLearningpathGetcourses
     * @param localIomadLearningpathGetcoursesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call localIomadLearningpathGetcoursesCall(LocalIomadLearningpathGetcoursesRequest localIomadLearningpathGetcoursesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = localIomadLearningpathGetcoursesRequest;

        // create path and map variables
        String localVarPath = "/local_iomad_learningpath_getcourses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call localIomadLearningpathGetcoursesValidateBeforeCall(LocalIomadLearningpathGetcoursesRequest localIomadLearningpathGetcoursesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'localIomadLearningpathGetcoursesRequest' is set
        if (localIomadLearningpathGetcoursesRequest == null) {
            throw new ApiException("Missing the required parameter 'localIomadLearningpathGetcoursesRequest' when calling localIomadLearningpathGetcourses(Async)");
        }

        return localIomadLearningpathGetcoursesCall(localIomadLearningpathGetcoursesRequest, _callback);

    }

    /**
     * Read list of courses for given learning
     * Read list of courses for given learning
     * @param localIomadLearningpathGetcoursesRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object localIomadLearningpathGetcourses(LocalIomadLearningpathGetcoursesRequest localIomadLearningpathGetcoursesRequest) throws ApiException {
        ApiResponse<Object> localVarResp = localIomadLearningpathGetcoursesWithHttpInfo(localIomadLearningpathGetcoursesRequest);
        return localVarResp.getData();
    }

    /**
     * Read list of courses for given learning
     * Read list of courses for given learning
     * @param localIomadLearningpathGetcoursesRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> localIomadLearningpathGetcoursesWithHttpInfo(LocalIomadLearningpathGetcoursesRequest localIomadLearningpathGetcoursesRequest) throws ApiException {
        okhttp3.Call localVarCall = localIomadLearningpathGetcoursesValidateBeforeCall(localIomadLearningpathGetcoursesRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Read list of courses for given learning (asynchronously)
     * Read list of courses for given learning
     * @param localIomadLearningpathGetcoursesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call localIomadLearningpathGetcoursesAsync(LocalIomadLearningpathGetcoursesRequest localIomadLearningpathGetcoursesRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = localIomadLearningpathGetcoursesValidateBeforeCall(localIomadLearningpathGetcoursesRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for localIomadLearningpathGetprospectivecourses
     * @param localIomadLearningpathGetprospectivecoursesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call localIomadLearningpathGetprospectivecoursesCall(LocalIomadLearningpathGetprospectivecoursesRequest localIomadLearningpathGetprospectivecoursesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = localIomadLearningpathGetprospectivecoursesRequest;

        // create path and map variables
        String localVarPath = "/local_iomad_learningpath_getprospectivecourses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call localIomadLearningpathGetprospectivecoursesValidateBeforeCall(LocalIomadLearningpathGetprospectivecoursesRequest localIomadLearningpathGetprospectivecoursesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'localIomadLearningpathGetprospectivecoursesRequest' is set
        if (localIomadLearningpathGetprospectivecoursesRequest == null) {
            throw new ApiException("Missing the required parameter 'localIomadLearningpathGetprospectivecoursesRequest' when calling localIomadLearningpathGetprospectivecourses(Async)");
        }

        return localIomadLearningpathGetprospectivecoursesCall(localIomadLearningpathGetprospectivecoursesRequest, _callback);

    }

    /**
     * Read set of filtered courses for given company
     * Read set of filtered courses for given company
     * @param localIomadLearningpathGetprospectivecoursesRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object localIomadLearningpathGetprospectivecourses(LocalIomadLearningpathGetprospectivecoursesRequest localIomadLearningpathGetprospectivecoursesRequest) throws ApiException {
        ApiResponse<Object> localVarResp = localIomadLearningpathGetprospectivecoursesWithHttpInfo(localIomadLearningpathGetprospectivecoursesRequest);
        return localVarResp.getData();
    }

    /**
     * Read set of filtered courses for given company
     * Read set of filtered courses for given company
     * @param localIomadLearningpathGetprospectivecoursesRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> localIomadLearningpathGetprospectivecoursesWithHttpInfo(LocalIomadLearningpathGetprospectivecoursesRequest localIomadLearningpathGetprospectivecoursesRequest) throws ApiException {
        okhttp3.Call localVarCall = localIomadLearningpathGetprospectivecoursesValidateBeforeCall(localIomadLearningpathGetprospectivecoursesRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Read set of filtered courses for given company (asynchronously)
     * Read set of filtered courses for given company
     * @param localIomadLearningpathGetprospectivecoursesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call localIomadLearningpathGetprospectivecoursesAsync(LocalIomadLearningpathGetprospectivecoursesRequest localIomadLearningpathGetprospectivecoursesRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = localIomadLearningpathGetprospectivecoursesValidateBeforeCall(localIomadLearningpathGetprospectivecoursesRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for localIomadLearningpathGetprospectiveusers
     * @param localIomadLearningpathGetprospectiveusersRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call localIomadLearningpathGetprospectiveusersCall(LocalIomadLearningpathGetprospectiveusersRequest localIomadLearningpathGetprospectiveusersRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = localIomadLearningpathGetprospectiveusersRequest;

        // create path and map variables
        String localVarPath = "/local_iomad_learningpath_getprospectiveusers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call localIomadLearningpathGetprospectiveusersValidateBeforeCall(LocalIomadLearningpathGetprospectiveusersRequest localIomadLearningpathGetprospectiveusersRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'localIomadLearningpathGetprospectiveusersRequest' is set
        if (localIomadLearningpathGetprospectiveusersRequest == null) {
            throw new ApiException("Missing the required parameter 'localIomadLearningpathGetprospectiveusersRequest' when calling localIomadLearningpathGetprospectiveusers(Async)");
        }

        return localIomadLearningpathGetprospectiveusersCall(localIomadLearningpathGetprospectiveusersRequest, _callback);

    }

    /**
     * Get set of filtered users for given company
     * Get set of filtered users for given company
     * @param localIomadLearningpathGetprospectiveusersRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object localIomadLearningpathGetprospectiveusers(LocalIomadLearningpathGetprospectiveusersRequest localIomadLearningpathGetprospectiveusersRequest) throws ApiException {
        ApiResponse<Object> localVarResp = localIomadLearningpathGetprospectiveusersWithHttpInfo(localIomadLearningpathGetprospectiveusersRequest);
        return localVarResp.getData();
    }

    /**
     * Get set of filtered users for given company
     * Get set of filtered users for given company
     * @param localIomadLearningpathGetprospectiveusersRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> localIomadLearningpathGetprospectiveusersWithHttpInfo(LocalIomadLearningpathGetprospectiveusersRequest localIomadLearningpathGetprospectiveusersRequest) throws ApiException {
        okhttp3.Call localVarCall = localIomadLearningpathGetprospectiveusersValidateBeforeCall(localIomadLearningpathGetprospectiveusersRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get set of filtered users for given company (asynchronously)
     * Get set of filtered users for given company
     * @param localIomadLearningpathGetprospectiveusersRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call localIomadLearningpathGetprospectiveusersAsync(LocalIomadLearningpathGetprospectiveusersRequest localIomadLearningpathGetprospectiveusersRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = localIomadLearningpathGetprospectiveusersValidateBeforeCall(localIomadLearningpathGetprospectiveusersRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for localIomadLearningpathGetusers
     * @param localIomadLearningpathGetusersRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call localIomadLearningpathGetusersCall(LocalIomadLearningpathGetusersRequest localIomadLearningpathGetusersRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = localIomadLearningpathGetusersRequest;

        // create path and map variables
        String localVarPath = "/local_iomad_learningpath_getusers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call localIomadLearningpathGetusersValidateBeforeCall(LocalIomadLearningpathGetusersRequest localIomadLearningpathGetusersRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'localIomadLearningpathGetusersRequest' is set
        if (localIomadLearningpathGetusersRequest == null) {
            throw new ApiException("Missing the required parameter 'localIomadLearningpathGetusersRequest' when calling localIomadLearningpathGetusers(Async)");
        }

        return localIomadLearningpathGetusersCall(localIomadLearningpathGetusersRequest, _callback);

    }

    /**
     * Get users assigned to path
     * Get users assigned to path
     * @param localIomadLearningpathGetusersRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object localIomadLearningpathGetusers(LocalIomadLearningpathGetusersRequest localIomadLearningpathGetusersRequest) throws ApiException {
        ApiResponse<Object> localVarResp = localIomadLearningpathGetusersWithHttpInfo(localIomadLearningpathGetusersRequest);
        return localVarResp.getData();
    }

    /**
     * Get users assigned to path
     * Get users assigned to path
     * @param localIomadLearningpathGetusersRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> localIomadLearningpathGetusersWithHttpInfo(LocalIomadLearningpathGetusersRequest localIomadLearningpathGetusersRequest) throws ApiException {
        okhttp3.Call localVarCall = localIomadLearningpathGetusersValidateBeforeCall(localIomadLearningpathGetusersRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get users assigned to path (asynchronously)
     * Get users assigned to path
     * @param localIomadLearningpathGetusersRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call localIomadLearningpathGetusersAsync(LocalIomadLearningpathGetusersRequest localIomadLearningpathGetusersRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = localIomadLearningpathGetusersValidateBeforeCall(localIomadLearningpathGetusersRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for localIomadLearningpathOrdercourses
     * @param localIomadLearningpathOrdercoursesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if courses ordered correctly </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call localIomadLearningpathOrdercoursesCall(LocalIomadLearningpathOrdercoursesRequest localIomadLearningpathOrdercoursesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = localIomadLearningpathOrdercoursesRequest;

        // create path and map variables
        String localVarPath = "/local_iomad_learningpath_ordercourses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call localIomadLearningpathOrdercoursesValidateBeforeCall(LocalIomadLearningpathOrdercoursesRequest localIomadLearningpathOrdercoursesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'localIomadLearningpathOrdercoursesRequest' is set
        if (localIomadLearningpathOrdercoursesRequest == null) {
            throw new ApiException("Missing the required parameter 'localIomadLearningpathOrdercoursesRequest' when calling localIomadLearningpathOrdercourses(Async)");
        }

        return localIomadLearningpathOrdercoursesCall(localIomadLearningpathOrdercoursesRequest, _callback);

    }

    /**
     * Set sequence of courses in learning path
     * Set sequence of courses in learning path
     * @param localIomadLearningpathOrdercoursesRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if courses ordered correctly </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object localIomadLearningpathOrdercourses(LocalIomadLearningpathOrdercoursesRequest localIomadLearningpathOrdercoursesRequest) throws ApiException {
        ApiResponse<Object> localVarResp = localIomadLearningpathOrdercoursesWithHttpInfo(localIomadLearningpathOrdercoursesRequest);
        return localVarResp.getData();
    }

    /**
     * Set sequence of courses in learning path
     * Set sequence of courses in learning path
     * @param localIomadLearningpathOrdercoursesRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if courses ordered correctly </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> localIomadLearningpathOrdercoursesWithHttpInfo(LocalIomadLearningpathOrdercoursesRequest localIomadLearningpathOrdercoursesRequest) throws ApiException {
        okhttp3.Call localVarCall = localIomadLearningpathOrdercoursesValidateBeforeCall(localIomadLearningpathOrdercoursesRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set sequence of courses in learning path (asynchronously)
     * Set sequence of courses in learning path
     * @param localIomadLearningpathOrdercoursesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if courses ordered correctly </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call localIomadLearningpathOrdercoursesAsync(LocalIomadLearningpathOrdercoursesRequest localIomadLearningpathOrdercoursesRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = localIomadLearningpathOrdercoursesValidateBeforeCall(localIomadLearningpathOrdercoursesRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for localIomadLearningpathRemovecourses
     * @param localIomadLearningpathRemovecoursesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if courses removed correctly </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call localIomadLearningpathRemovecoursesCall(LocalIomadLearningpathRemovecoursesRequest localIomadLearningpathRemovecoursesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = localIomadLearningpathRemovecoursesRequest;

        // create path and map variables
        String localVarPath = "/local_iomad_learningpath_removecourses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call localIomadLearningpathRemovecoursesValidateBeforeCall(LocalIomadLearningpathRemovecoursesRequest localIomadLearningpathRemovecoursesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'localIomadLearningpathRemovecoursesRequest' is set
        if (localIomadLearningpathRemovecoursesRequest == null) {
            throw new ApiException("Missing the required parameter 'localIomadLearningpathRemovecoursesRequest' when calling localIomadLearningpathRemovecourses(Async)");
        }

        return localIomadLearningpathRemovecoursesCall(localIomadLearningpathRemovecoursesRequest, _callback);

    }

    /**
     * Remove courses from learning path
     * Remove courses from learning path
     * @param localIomadLearningpathRemovecoursesRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if courses removed correctly </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object localIomadLearningpathRemovecourses(LocalIomadLearningpathRemovecoursesRequest localIomadLearningpathRemovecoursesRequest) throws ApiException {
        ApiResponse<Object> localVarResp = localIomadLearningpathRemovecoursesWithHttpInfo(localIomadLearningpathRemovecoursesRequest);
        return localVarResp.getData();
    }

    /**
     * Remove courses from learning path
     * Remove courses from learning path
     * @param localIomadLearningpathRemovecoursesRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if courses removed correctly </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> localIomadLearningpathRemovecoursesWithHttpInfo(LocalIomadLearningpathRemovecoursesRequest localIomadLearningpathRemovecoursesRequest) throws ApiException {
        okhttp3.Call localVarCall = localIomadLearningpathRemovecoursesValidateBeforeCall(localIomadLearningpathRemovecoursesRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove courses from learning path (asynchronously)
     * Remove courses from learning path
     * @param localIomadLearningpathRemovecoursesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if courses removed correctly </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call localIomadLearningpathRemovecoursesAsync(LocalIomadLearningpathRemovecoursesRequest localIomadLearningpathRemovecoursesRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = localIomadLearningpathRemovecoursesValidateBeforeCall(localIomadLearningpathRemovecoursesRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for localIomadLearningpathRemoveusers
     * @param localIomadLearningpathRemoveusersRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if users removed correctly </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call localIomadLearningpathRemoveusersCall(LocalIomadLearningpathRemoveusersRequest localIomadLearningpathRemoveusersRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = localIomadLearningpathRemoveusersRequest;

        // create path and map variables
        String localVarPath = "/local_iomad_learningpath_removeusers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call localIomadLearningpathRemoveusersValidateBeforeCall(LocalIomadLearningpathRemoveusersRequest localIomadLearningpathRemoveusersRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'localIomadLearningpathRemoveusersRequest' is set
        if (localIomadLearningpathRemoveusersRequest == null) {
            throw new ApiException("Missing the required parameter 'localIomadLearningpathRemoveusersRequest' when calling localIomadLearningpathRemoveusers(Async)");
        }

        return localIomadLearningpathRemoveusersCall(localIomadLearningpathRemoveusersRequest, _callback);

    }

    /**
     * Remove users from learning path
     * Remove users from learning path
     * @param localIomadLearningpathRemoveusersRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if users removed correctly </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object localIomadLearningpathRemoveusers(LocalIomadLearningpathRemoveusersRequest localIomadLearningpathRemoveusersRequest) throws ApiException {
        ApiResponse<Object> localVarResp = localIomadLearningpathRemoveusersWithHttpInfo(localIomadLearningpathRemoveusersRequest);
        return localVarResp.getData();
    }

    /**
     * Remove users from learning path
     * Remove users from learning path
     * @param localIomadLearningpathRemoveusersRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if users removed correctly </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> localIomadLearningpathRemoveusersWithHttpInfo(LocalIomadLearningpathRemoveusersRequest localIomadLearningpathRemoveusersRequest) throws ApiException {
        okhttp3.Call localVarCall = localIomadLearningpathRemoveusersValidateBeforeCall(localIomadLearningpathRemoveusersRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove users from learning path (asynchronously)
     * Remove users from learning path
     * @param localIomadLearningpathRemoveusersRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if users removed correctly </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call localIomadLearningpathRemoveusersAsync(LocalIomadLearningpathRemoveusersRequest localIomadLearningpathRemoveusersRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = localIomadLearningpathRemoveusersValidateBeforeCall(localIomadLearningpathRemoveusersRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
