/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.joshuapare.moodleclient;

import com.joshuapare.ApiCallback;
import com.joshuapare.ApiClient;
import com.joshuapare.ApiException;
import com.joshuapare.ApiResponse;
import com.joshuapare.Configuration;
import com.joshuapare.Pair;
import com.joshuapare.ProgressRequestBody;
import com.joshuapare.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CoreCalendarDeleteSubscription200Response;
import org.openapitools.client.model.CoreContentbankRenameContent200Response;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.ModChatGetChatsByCoursesRequest;
import org.openapitools.client.model.ModDataAddEntry200Response;
import org.openapitools.client.model.ModDataAddEntryRequest;
import org.openapitools.client.model.ModDataApproveEntryRequest;
import org.openapitools.client.model.ModDataDeleteEntry200Response;
import org.openapitools.client.model.ModDataDeleteEntryRequest;
import org.openapitools.client.model.ModDataDeleteSavedPresetRequest;
import org.openapitools.client.model.ModDataGetDataAccessInformation200Response;
import org.openapitools.client.model.ModDataGetDataAccessInformationRequest;
import org.openapitools.client.model.ModDataGetDatabasesByCourses200Response;
import org.openapitools.client.model.ModDataGetEntries200Response;
import org.openapitools.client.model.ModDataGetEntriesRequest;
import org.openapitools.client.model.ModDataGetEntry200Response;
import org.openapitools.client.model.ModDataGetEntryRequest;
import org.openapitools.client.model.ModDataGetFields200Response;
import org.openapitools.client.model.ModDataGetFieldsRequest;
import org.openapitools.client.model.ModDataGetMappingInformation200Response;
import org.openapitools.client.model.ModDataGetMappingInformationRequest;
import org.openapitools.client.model.ModDataSearchEntries200Response;
import org.openapitools.client.model.ModDataSearchEntriesRequest;
import org.openapitools.client.model.ModDataUpdateEntry200Response;
import org.openapitools.client.model.ModDataUpdateEntryRequest;
import org.openapitools.client.model.ModDataViewDatabaseRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ModDataApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ModDataApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ModDataApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for modDataAddEntry
     * @param modDataAddEntryRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modDataAddEntryCall(ModDataAddEntryRequest modDataAddEntryRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modDataAddEntryRequest;

        // create path and map variables
        String localVarPath = "/mod_data_add_entry";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modDataAddEntryValidateBeforeCall(ModDataAddEntryRequest modDataAddEntryRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modDataAddEntryRequest' is set
        if (modDataAddEntryRequest == null) {
            throw new ApiException("Missing the required parameter 'modDataAddEntryRequest' when calling modDataAddEntry(Async)");
        }

        return modDataAddEntryCall(modDataAddEntryRequest, _callback);

    }

    /**
     * Adds a new entry.
     * Adds a new entry.
     * @param modDataAddEntryRequest  (required)
     * @return ModDataAddEntry200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModDataAddEntry200Response modDataAddEntry(ModDataAddEntryRequest modDataAddEntryRequest) throws ApiException {
        ApiResponse<ModDataAddEntry200Response> localVarResp = modDataAddEntryWithHttpInfo(modDataAddEntryRequest);
        return localVarResp.getData();
    }

    /**
     * Adds a new entry.
     * Adds a new entry.
     * @param modDataAddEntryRequest  (required)
     * @return ApiResponse&lt;ModDataAddEntry200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModDataAddEntry200Response> modDataAddEntryWithHttpInfo(ModDataAddEntryRequest modDataAddEntryRequest) throws ApiException {
        okhttp3.Call localVarCall = modDataAddEntryValidateBeforeCall(modDataAddEntryRequest, null);
        Type localVarReturnType = new TypeToken<ModDataAddEntry200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Adds a new entry. (asynchronously)
     * Adds a new entry.
     * @param modDataAddEntryRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modDataAddEntryAsync(ModDataAddEntryRequest modDataAddEntryRequest, final ApiCallback<ModDataAddEntry200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modDataAddEntryValidateBeforeCall(modDataAddEntryRequest, _callback);
        Type localVarReturnType = new TypeToken<ModDataAddEntry200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modDataApproveEntry
     * @param modDataApproveEntryRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modDataApproveEntryCall(ModDataApproveEntryRequest modDataApproveEntryRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modDataApproveEntryRequest;

        // create path and map variables
        String localVarPath = "/mod_data_approve_entry";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modDataApproveEntryValidateBeforeCall(ModDataApproveEntryRequest modDataApproveEntryRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modDataApproveEntryRequest' is set
        if (modDataApproveEntryRequest == null) {
            throw new ApiException("Missing the required parameter 'modDataApproveEntryRequest' when calling modDataApproveEntry(Async)");
        }

        return modDataApproveEntryCall(modDataApproveEntryRequest, _callback);

    }

    /**
     * Approves or unapproves an entry.
     * Approves or unapproves an entry.
     * @param modDataApproveEntryRequest  (required)
     * @return CoreCalendarDeleteSubscription200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreCalendarDeleteSubscription200Response modDataApproveEntry(ModDataApproveEntryRequest modDataApproveEntryRequest) throws ApiException {
        ApiResponse<CoreCalendarDeleteSubscription200Response> localVarResp = modDataApproveEntryWithHttpInfo(modDataApproveEntryRequest);
        return localVarResp.getData();
    }

    /**
     * Approves or unapproves an entry.
     * Approves or unapproves an entry.
     * @param modDataApproveEntryRequest  (required)
     * @return ApiResponse&lt;CoreCalendarDeleteSubscription200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreCalendarDeleteSubscription200Response> modDataApproveEntryWithHttpInfo(ModDataApproveEntryRequest modDataApproveEntryRequest) throws ApiException {
        okhttp3.Call localVarCall = modDataApproveEntryValidateBeforeCall(modDataApproveEntryRequest, null);
        Type localVarReturnType = new TypeToken<CoreCalendarDeleteSubscription200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Approves or unapproves an entry. (asynchronously)
     * Approves or unapproves an entry.
     * @param modDataApproveEntryRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modDataApproveEntryAsync(ModDataApproveEntryRequest modDataApproveEntryRequest, final ApiCallback<CoreCalendarDeleteSubscription200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modDataApproveEntryValidateBeforeCall(modDataApproveEntryRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreCalendarDeleteSubscription200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modDataDeleteEntry
     * @param modDataDeleteEntryRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modDataDeleteEntryCall(ModDataDeleteEntryRequest modDataDeleteEntryRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modDataDeleteEntryRequest;

        // create path and map variables
        String localVarPath = "/mod_data_delete_entry";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modDataDeleteEntryValidateBeforeCall(ModDataDeleteEntryRequest modDataDeleteEntryRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modDataDeleteEntryRequest' is set
        if (modDataDeleteEntryRequest == null) {
            throw new ApiException("Missing the required parameter 'modDataDeleteEntryRequest' when calling modDataDeleteEntry(Async)");
        }

        return modDataDeleteEntryCall(modDataDeleteEntryRequest, _callback);

    }

    /**
     * Deletes an entry.
     * Deletes an entry.
     * @param modDataDeleteEntryRequest  (required)
     * @return ModDataDeleteEntry200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModDataDeleteEntry200Response modDataDeleteEntry(ModDataDeleteEntryRequest modDataDeleteEntryRequest) throws ApiException {
        ApiResponse<ModDataDeleteEntry200Response> localVarResp = modDataDeleteEntryWithHttpInfo(modDataDeleteEntryRequest);
        return localVarResp.getData();
    }

    /**
     * Deletes an entry.
     * Deletes an entry.
     * @param modDataDeleteEntryRequest  (required)
     * @return ApiResponse&lt;ModDataDeleteEntry200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModDataDeleteEntry200Response> modDataDeleteEntryWithHttpInfo(ModDataDeleteEntryRequest modDataDeleteEntryRequest) throws ApiException {
        okhttp3.Call localVarCall = modDataDeleteEntryValidateBeforeCall(modDataDeleteEntryRequest, null);
        Type localVarReturnType = new TypeToken<ModDataDeleteEntry200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deletes an entry. (asynchronously)
     * Deletes an entry.
     * @param modDataDeleteEntryRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modDataDeleteEntryAsync(ModDataDeleteEntryRequest modDataDeleteEntryRequest, final ApiCallback<ModDataDeleteEntry200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modDataDeleteEntryValidateBeforeCall(modDataDeleteEntryRequest, _callback);
        Type localVarReturnType = new TypeToken<ModDataDeleteEntry200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modDataDeleteSavedPreset
     * @param modDataDeleteSavedPresetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modDataDeleteSavedPresetCall(ModDataDeleteSavedPresetRequest modDataDeleteSavedPresetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modDataDeleteSavedPresetRequest;

        // create path and map variables
        String localVarPath = "/mod_data_delete_saved_preset";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modDataDeleteSavedPresetValidateBeforeCall(ModDataDeleteSavedPresetRequest modDataDeleteSavedPresetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modDataDeleteSavedPresetRequest' is set
        if (modDataDeleteSavedPresetRequest == null) {
            throw new ApiException("Missing the required parameter 'modDataDeleteSavedPresetRequest' when calling modDataDeleteSavedPreset(Async)");
        }

        return modDataDeleteSavedPresetCall(modDataDeleteSavedPresetRequest, _callback);

    }

    /**
     * Delete site user preset.
     * Delete site user preset.
     * @param modDataDeleteSavedPresetRequest  (required)
     * @return CoreContentbankRenameContent200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreContentbankRenameContent200Response modDataDeleteSavedPreset(ModDataDeleteSavedPresetRequest modDataDeleteSavedPresetRequest) throws ApiException {
        ApiResponse<CoreContentbankRenameContent200Response> localVarResp = modDataDeleteSavedPresetWithHttpInfo(modDataDeleteSavedPresetRequest);
        return localVarResp.getData();
    }

    /**
     * Delete site user preset.
     * Delete site user preset.
     * @param modDataDeleteSavedPresetRequest  (required)
     * @return ApiResponse&lt;CoreContentbankRenameContent200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreContentbankRenameContent200Response> modDataDeleteSavedPresetWithHttpInfo(ModDataDeleteSavedPresetRequest modDataDeleteSavedPresetRequest) throws ApiException {
        okhttp3.Call localVarCall = modDataDeleteSavedPresetValidateBeforeCall(modDataDeleteSavedPresetRequest, null);
        Type localVarReturnType = new TypeToken<CoreContentbankRenameContent200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete site user preset. (asynchronously)
     * Delete site user preset.
     * @param modDataDeleteSavedPresetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modDataDeleteSavedPresetAsync(ModDataDeleteSavedPresetRequest modDataDeleteSavedPresetRequest, final ApiCallback<CoreContentbankRenameContent200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modDataDeleteSavedPresetValidateBeforeCall(modDataDeleteSavedPresetRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreContentbankRenameContent200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modDataGetDataAccessInformation
     * @param modDataGetDataAccessInformationRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modDataGetDataAccessInformationCall(ModDataGetDataAccessInformationRequest modDataGetDataAccessInformationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modDataGetDataAccessInformationRequest;

        // create path and map variables
        String localVarPath = "/mod_data_get_data_access_information";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modDataGetDataAccessInformationValidateBeforeCall(ModDataGetDataAccessInformationRequest modDataGetDataAccessInformationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modDataGetDataAccessInformationRequest' is set
        if (modDataGetDataAccessInformationRequest == null) {
            throw new ApiException("Missing the required parameter 'modDataGetDataAccessInformationRequest' when calling modDataGetDataAccessInformation(Async)");
        }

        return modDataGetDataAccessInformationCall(modDataGetDataAccessInformationRequest, _callback);

    }

    /**
     * Return access information for a given database.
     * Return access information for a given database.
     * @param modDataGetDataAccessInformationRequest  (required)
     * @return ModDataGetDataAccessInformation200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModDataGetDataAccessInformation200Response modDataGetDataAccessInformation(ModDataGetDataAccessInformationRequest modDataGetDataAccessInformationRequest) throws ApiException {
        ApiResponse<ModDataGetDataAccessInformation200Response> localVarResp = modDataGetDataAccessInformationWithHttpInfo(modDataGetDataAccessInformationRequest);
        return localVarResp.getData();
    }

    /**
     * Return access information for a given database.
     * Return access information for a given database.
     * @param modDataGetDataAccessInformationRequest  (required)
     * @return ApiResponse&lt;ModDataGetDataAccessInformation200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModDataGetDataAccessInformation200Response> modDataGetDataAccessInformationWithHttpInfo(ModDataGetDataAccessInformationRequest modDataGetDataAccessInformationRequest) throws ApiException {
        okhttp3.Call localVarCall = modDataGetDataAccessInformationValidateBeforeCall(modDataGetDataAccessInformationRequest, null);
        Type localVarReturnType = new TypeToken<ModDataGetDataAccessInformation200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return access information for a given database. (asynchronously)
     * Return access information for a given database.
     * @param modDataGetDataAccessInformationRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modDataGetDataAccessInformationAsync(ModDataGetDataAccessInformationRequest modDataGetDataAccessInformationRequest, final ApiCallback<ModDataGetDataAccessInformation200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modDataGetDataAccessInformationValidateBeforeCall(modDataGetDataAccessInformationRequest, _callback);
        Type localVarReturnType = new TypeToken<ModDataGetDataAccessInformation200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modDataGetDatabasesByCourses
     * @param modChatGetChatsByCoursesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modDataGetDatabasesByCoursesCall(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modChatGetChatsByCoursesRequest;

        // create path and map variables
        String localVarPath = "/mod_data_get_databases_by_courses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modDataGetDatabasesByCoursesValidateBeforeCall(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modChatGetChatsByCoursesRequest' is set
        if (modChatGetChatsByCoursesRequest == null) {
            throw new ApiException("Missing the required parameter 'modChatGetChatsByCoursesRequest' when calling modDataGetDatabasesByCourses(Async)");
        }

        return modDataGetDatabasesByCoursesCall(modChatGetChatsByCoursesRequest, _callback);

    }

    /**
     * Returns a list of database instances in a provided set of courses, if             no courses are provided then all the database instances the user has access to will be returned.
     * Returns a list of database instances in a provided set of courses, if             no courses are provided then all the database instances the user has access to will be returned.
     * @param modChatGetChatsByCoursesRequest  (required)
     * @return ModDataGetDatabasesByCourses200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModDataGetDatabasesByCourses200Response modDataGetDatabasesByCourses(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest) throws ApiException {
        ApiResponse<ModDataGetDatabasesByCourses200Response> localVarResp = modDataGetDatabasesByCoursesWithHttpInfo(modChatGetChatsByCoursesRequest);
        return localVarResp.getData();
    }

    /**
     * Returns a list of database instances in a provided set of courses, if             no courses are provided then all the database instances the user has access to will be returned.
     * Returns a list of database instances in a provided set of courses, if             no courses are provided then all the database instances the user has access to will be returned.
     * @param modChatGetChatsByCoursesRequest  (required)
     * @return ApiResponse&lt;ModDataGetDatabasesByCourses200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModDataGetDatabasesByCourses200Response> modDataGetDatabasesByCoursesWithHttpInfo(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest) throws ApiException {
        okhttp3.Call localVarCall = modDataGetDatabasesByCoursesValidateBeforeCall(modChatGetChatsByCoursesRequest, null);
        Type localVarReturnType = new TypeToken<ModDataGetDatabasesByCourses200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a list of database instances in a provided set of courses, if             no courses are provided then all the database instances the user has access to will be returned. (asynchronously)
     * Returns a list of database instances in a provided set of courses, if             no courses are provided then all the database instances the user has access to will be returned.
     * @param modChatGetChatsByCoursesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modDataGetDatabasesByCoursesAsync(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest, final ApiCallback<ModDataGetDatabasesByCourses200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modDataGetDatabasesByCoursesValidateBeforeCall(modChatGetChatsByCoursesRequest, _callback);
        Type localVarReturnType = new TypeToken<ModDataGetDatabasesByCourses200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modDataGetEntries
     * @param modDataGetEntriesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modDataGetEntriesCall(ModDataGetEntriesRequest modDataGetEntriesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modDataGetEntriesRequest;

        // create path and map variables
        String localVarPath = "/mod_data_get_entries";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modDataGetEntriesValidateBeforeCall(ModDataGetEntriesRequest modDataGetEntriesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modDataGetEntriesRequest' is set
        if (modDataGetEntriesRequest == null) {
            throw new ApiException("Missing the required parameter 'modDataGetEntriesRequest' when calling modDataGetEntries(Async)");
        }

        return modDataGetEntriesCall(modDataGetEntriesRequest, _callback);

    }

    /**
     * Return the complete list of entries of the given database.
     * Return the complete list of entries of the given database.
     * @param modDataGetEntriesRequest  (required)
     * @return ModDataGetEntries200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModDataGetEntries200Response modDataGetEntries(ModDataGetEntriesRequest modDataGetEntriesRequest) throws ApiException {
        ApiResponse<ModDataGetEntries200Response> localVarResp = modDataGetEntriesWithHttpInfo(modDataGetEntriesRequest);
        return localVarResp.getData();
    }

    /**
     * Return the complete list of entries of the given database.
     * Return the complete list of entries of the given database.
     * @param modDataGetEntriesRequest  (required)
     * @return ApiResponse&lt;ModDataGetEntries200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModDataGetEntries200Response> modDataGetEntriesWithHttpInfo(ModDataGetEntriesRequest modDataGetEntriesRequest) throws ApiException {
        okhttp3.Call localVarCall = modDataGetEntriesValidateBeforeCall(modDataGetEntriesRequest, null);
        Type localVarReturnType = new TypeToken<ModDataGetEntries200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the complete list of entries of the given database. (asynchronously)
     * Return the complete list of entries of the given database.
     * @param modDataGetEntriesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modDataGetEntriesAsync(ModDataGetEntriesRequest modDataGetEntriesRequest, final ApiCallback<ModDataGetEntries200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modDataGetEntriesValidateBeforeCall(modDataGetEntriesRequest, _callback);
        Type localVarReturnType = new TypeToken<ModDataGetEntries200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modDataGetEntry
     * @param modDataGetEntryRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modDataGetEntryCall(ModDataGetEntryRequest modDataGetEntryRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modDataGetEntryRequest;

        // create path and map variables
        String localVarPath = "/mod_data_get_entry";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modDataGetEntryValidateBeforeCall(ModDataGetEntryRequest modDataGetEntryRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modDataGetEntryRequest' is set
        if (modDataGetEntryRequest == null) {
            throw new ApiException("Missing the required parameter 'modDataGetEntryRequest' when calling modDataGetEntry(Async)");
        }

        return modDataGetEntryCall(modDataGetEntryRequest, _callback);

    }

    /**
     * Return one entry record from the database, including contents optionally.
     * Return one entry record from the database, including contents optionally.
     * @param modDataGetEntryRequest  (required)
     * @return ModDataGetEntry200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModDataGetEntry200Response modDataGetEntry(ModDataGetEntryRequest modDataGetEntryRequest) throws ApiException {
        ApiResponse<ModDataGetEntry200Response> localVarResp = modDataGetEntryWithHttpInfo(modDataGetEntryRequest);
        return localVarResp.getData();
    }

    /**
     * Return one entry record from the database, including contents optionally.
     * Return one entry record from the database, including contents optionally.
     * @param modDataGetEntryRequest  (required)
     * @return ApiResponse&lt;ModDataGetEntry200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModDataGetEntry200Response> modDataGetEntryWithHttpInfo(ModDataGetEntryRequest modDataGetEntryRequest) throws ApiException {
        okhttp3.Call localVarCall = modDataGetEntryValidateBeforeCall(modDataGetEntryRequest, null);
        Type localVarReturnType = new TypeToken<ModDataGetEntry200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return one entry record from the database, including contents optionally. (asynchronously)
     * Return one entry record from the database, including contents optionally.
     * @param modDataGetEntryRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modDataGetEntryAsync(ModDataGetEntryRequest modDataGetEntryRequest, final ApiCallback<ModDataGetEntry200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modDataGetEntryValidateBeforeCall(modDataGetEntryRequest, _callback);
        Type localVarReturnType = new TypeToken<ModDataGetEntry200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modDataGetFields
     * @param modDataGetFieldsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modDataGetFieldsCall(ModDataGetFieldsRequest modDataGetFieldsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modDataGetFieldsRequest;

        // create path and map variables
        String localVarPath = "/mod_data_get_fields";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modDataGetFieldsValidateBeforeCall(ModDataGetFieldsRequest modDataGetFieldsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modDataGetFieldsRequest' is set
        if (modDataGetFieldsRequest == null) {
            throw new ApiException("Missing the required parameter 'modDataGetFieldsRequest' when calling modDataGetFields(Async)");
        }

        return modDataGetFieldsCall(modDataGetFieldsRequest, _callback);

    }

    /**
     * Return the list of configured fields for the given database.
     * Return the list of configured fields for the given database.
     * @param modDataGetFieldsRequest  (required)
     * @return ModDataGetFields200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModDataGetFields200Response modDataGetFields(ModDataGetFieldsRequest modDataGetFieldsRequest) throws ApiException {
        ApiResponse<ModDataGetFields200Response> localVarResp = modDataGetFieldsWithHttpInfo(modDataGetFieldsRequest);
        return localVarResp.getData();
    }

    /**
     * Return the list of configured fields for the given database.
     * Return the list of configured fields for the given database.
     * @param modDataGetFieldsRequest  (required)
     * @return ApiResponse&lt;ModDataGetFields200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModDataGetFields200Response> modDataGetFieldsWithHttpInfo(ModDataGetFieldsRequest modDataGetFieldsRequest) throws ApiException {
        okhttp3.Call localVarCall = modDataGetFieldsValidateBeforeCall(modDataGetFieldsRequest, null);
        Type localVarReturnType = new TypeToken<ModDataGetFields200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the list of configured fields for the given database. (asynchronously)
     * Return the list of configured fields for the given database.
     * @param modDataGetFieldsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modDataGetFieldsAsync(ModDataGetFieldsRequest modDataGetFieldsRequest, final ApiCallback<ModDataGetFields200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modDataGetFieldsValidateBeforeCall(modDataGetFieldsRequest, _callback);
        Type localVarReturnType = new TypeToken<ModDataGetFields200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modDataGetMappingInformation
     * @param modDataGetMappingInformationRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modDataGetMappingInformationCall(ModDataGetMappingInformationRequest modDataGetMappingInformationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modDataGetMappingInformationRequest;

        // create path and map variables
        String localVarPath = "/mod_data_get_mapping_information";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modDataGetMappingInformationValidateBeforeCall(ModDataGetMappingInformationRequest modDataGetMappingInformationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modDataGetMappingInformationRequest' is set
        if (modDataGetMappingInformationRequest == null) {
            throw new ApiException("Missing the required parameter 'modDataGetMappingInformationRequest' when calling modDataGetMappingInformation(Async)");
        }

        return modDataGetMappingInformationCall(modDataGetMappingInformationRequest, _callback);

    }

    /**
     * Get importing information
     * Get importing information
     * @param modDataGetMappingInformationRequest  (required)
     * @return ModDataGetMappingInformation200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModDataGetMappingInformation200Response modDataGetMappingInformation(ModDataGetMappingInformationRequest modDataGetMappingInformationRequest) throws ApiException {
        ApiResponse<ModDataGetMappingInformation200Response> localVarResp = modDataGetMappingInformationWithHttpInfo(modDataGetMappingInformationRequest);
        return localVarResp.getData();
    }

    /**
     * Get importing information
     * Get importing information
     * @param modDataGetMappingInformationRequest  (required)
     * @return ApiResponse&lt;ModDataGetMappingInformation200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModDataGetMappingInformation200Response> modDataGetMappingInformationWithHttpInfo(ModDataGetMappingInformationRequest modDataGetMappingInformationRequest) throws ApiException {
        okhttp3.Call localVarCall = modDataGetMappingInformationValidateBeforeCall(modDataGetMappingInformationRequest, null);
        Type localVarReturnType = new TypeToken<ModDataGetMappingInformation200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get importing information (asynchronously)
     * Get importing information
     * @param modDataGetMappingInformationRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modDataGetMappingInformationAsync(ModDataGetMappingInformationRequest modDataGetMappingInformationRequest, final ApiCallback<ModDataGetMappingInformation200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modDataGetMappingInformationValidateBeforeCall(modDataGetMappingInformationRequest, _callback);
        Type localVarReturnType = new TypeToken<ModDataGetMappingInformation200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modDataSearchEntries
     * @param modDataSearchEntriesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modDataSearchEntriesCall(ModDataSearchEntriesRequest modDataSearchEntriesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modDataSearchEntriesRequest;

        // create path and map variables
        String localVarPath = "/mod_data_search_entries";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modDataSearchEntriesValidateBeforeCall(ModDataSearchEntriesRequest modDataSearchEntriesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modDataSearchEntriesRequest' is set
        if (modDataSearchEntriesRequest == null) {
            throw new ApiException("Missing the required parameter 'modDataSearchEntriesRequest' when calling modDataSearchEntries(Async)");
        }

        return modDataSearchEntriesCall(modDataSearchEntriesRequest, _callback);

    }

    /**
     * Search for entries in the given database.
     * Search for entries in the given database.
     * @param modDataSearchEntriesRequest  (required)
     * @return ModDataSearchEntries200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModDataSearchEntries200Response modDataSearchEntries(ModDataSearchEntriesRequest modDataSearchEntriesRequest) throws ApiException {
        ApiResponse<ModDataSearchEntries200Response> localVarResp = modDataSearchEntriesWithHttpInfo(modDataSearchEntriesRequest);
        return localVarResp.getData();
    }

    /**
     * Search for entries in the given database.
     * Search for entries in the given database.
     * @param modDataSearchEntriesRequest  (required)
     * @return ApiResponse&lt;ModDataSearchEntries200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModDataSearchEntries200Response> modDataSearchEntriesWithHttpInfo(ModDataSearchEntriesRequest modDataSearchEntriesRequest) throws ApiException {
        okhttp3.Call localVarCall = modDataSearchEntriesValidateBeforeCall(modDataSearchEntriesRequest, null);
        Type localVarReturnType = new TypeToken<ModDataSearchEntries200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search for entries in the given database. (asynchronously)
     * Search for entries in the given database.
     * @param modDataSearchEntriesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modDataSearchEntriesAsync(ModDataSearchEntriesRequest modDataSearchEntriesRequest, final ApiCallback<ModDataSearchEntries200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modDataSearchEntriesValidateBeforeCall(modDataSearchEntriesRequest, _callback);
        Type localVarReturnType = new TypeToken<ModDataSearchEntries200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modDataUpdateEntry
     * @param modDataUpdateEntryRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modDataUpdateEntryCall(ModDataUpdateEntryRequest modDataUpdateEntryRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modDataUpdateEntryRequest;

        // create path and map variables
        String localVarPath = "/mod_data_update_entry";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modDataUpdateEntryValidateBeforeCall(ModDataUpdateEntryRequest modDataUpdateEntryRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modDataUpdateEntryRequest' is set
        if (modDataUpdateEntryRequest == null) {
            throw new ApiException("Missing the required parameter 'modDataUpdateEntryRequest' when calling modDataUpdateEntry(Async)");
        }

        return modDataUpdateEntryCall(modDataUpdateEntryRequest, _callback);

    }

    /**
     * Updates an existing entry.
     * Updates an existing entry.
     * @param modDataUpdateEntryRequest  (required)
     * @return ModDataUpdateEntry200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModDataUpdateEntry200Response modDataUpdateEntry(ModDataUpdateEntryRequest modDataUpdateEntryRequest) throws ApiException {
        ApiResponse<ModDataUpdateEntry200Response> localVarResp = modDataUpdateEntryWithHttpInfo(modDataUpdateEntryRequest);
        return localVarResp.getData();
    }

    /**
     * Updates an existing entry.
     * Updates an existing entry.
     * @param modDataUpdateEntryRequest  (required)
     * @return ApiResponse&lt;ModDataUpdateEntry200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModDataUpdateEntry200Response> modDataUpdateEntryWithHttpInfo(ModDataUpdateEntryRequest modDataUpdateEntryRequest) throws ApiException {
        okhttp3.Call localVarCall = modDataUpdateEntryValidateBeforeCall(modDataUpdateEntryRequest, null);
        Type localVarReturnType = new TypeToken<ModDataUpdateEntry200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates an existing entry. (asynchronously)
     * Updates an existing entry.
     * @param modDataUpdateEntryRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modDataUpdateEntryAsync(ModDataUpdateEntryRequest modDataUpdateEntryRequest, final ApiCallback<ModDataUpdateEntry200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modDataUpdateEntryValidateBeforeCall(modDataUpdateEntryRequest, _callback);
        Type localVarReturnType = new TypeToken<ModDataUpdateEntry200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modDataViewDatabase
     * @param modDataViewDatabaseRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modDataViewDatabaseCall(ModDataViewDatabaseRequest modDataViewDatabaseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modDataViewDatabaseRequest;

        // create path and map variables
        String localVarPath = "/mod_data_view_database";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modDataViewDatabaseValidateBeforeCall(ModDataViewDatabaseRequest modDataViewDatabaseRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modDataViewDatabaseRequest' is set
        if (modDataViewDatabaseRequest == null) {
            throw new ApiException("Missing the required parameter 'modDataViewDatabaseRequest' when calling modDataViewDatabase(Async)");
        }

        return modDataViewDatabaseCall(modDataViewDatabaseRequest, _callback);

    }

    /**
     * Simulate the view.php web interface data: trigger events, completion, etc...
     * Simulate the view.php web interface data: trigger events, completion, etc...
     * @param modDataViewDatabaseRequest  (required)
     * @return CoreCalendarDeleteSubscription200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreCalendarDeleteSubscription200Response modDataViewDatabase(ModDataViewDatabaseRequest modDataViewDatabaseRequest) throws ApiException {
        ApiResponse<CoreCalendarDeleteSubscription200Response> localVarResp = modDataViewDatabaseWithHttpInfo(modDataViewDatabaseRequest);
        return localVarResp.getData();
    }

    /**
     * Simulate the view.php web interface data: trigger events, completion, etc...
     * Simulate the view.php web interface data: trigger events, completion, etc...
     * @param modDataViewDatabaseRequest  (required)
     * @return ApiResponse&lt;CoreCalendarDeleteSubscription200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreCalendarDeleteSubscription200Response> modDataViewDatabaseWithHttpInfo(ModDataViewDatabaseRequest modDataViewDatabaseRequest) throws ApiException {
        okhttp3.Call localVarCall = modDataViewDatabaseValidateBeforeCall(modDataViewDatabaseRequest, null);
        Type localVarReturnType = new TypeToken<CoreCalendarDeleteSubscription200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Simulate the view.php web interface data: trigger events, completion, etc... (asynchronously)
     * Simulate the view.php web interface data: trigger events, completion, etc...
     * @param modDataViewDatabaseRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modDataViewDatabaseAsync(ModDataViewDatabaseRequest modDataViewDatabaseRequest, final ApiCallback<CoreCalendarDeleteSubscription200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modDataViewDatabaseValidateBeforeCall(modDataViewDatabaseRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreCalendarDeleteSubscription200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
