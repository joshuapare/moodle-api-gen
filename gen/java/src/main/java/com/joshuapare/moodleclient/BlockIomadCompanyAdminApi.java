/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.joshuapare.moodleclient;

import com.joshuapare.ApiCallback;
import com.joshuapare.ApiClient;
import com.joshuapare.ApiException;
import com.joshuapare.ApiResponse;
import com.joshuapare.Configuration;
import com.joshuapare.Pair;
import com.joshuapare.ProgressRequestBody;
import com.joshuapare.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BlockIomadCompanyAdminAllocateLicensesRequest;
import org.openapitools.client.model.BlockIomadCompanyAdminAssignCoursesRequest;
import org.openapitools.client.model.BlockIomadCompanyAdminAssignUsers200Response;
import org.openapitools.client.model.BlockIomadCompanyAdminAssignUsersRequest;
import org.openapitools.client.model.BlockIomadCompanyAdminCapabilityDeleteTemplateRequest;
import org.openapitools.client.model.BlockIomadCompanyAdminCheckToken200Response;
import org.openapitools.client.model.BlockIomadCompanyAdminCheckTokenRequest;
import org.openapitools.client.model.BlockIomadCompanyAdminCreateCompaniesRequest;
import org.openapitools.client.model.BlockIomadCompanyAdminCreateLicensesRequest;
import org.openapitools.client.model.BlockIomadCompanyAdminDeleteLicensesRequest;
import org.openapitools.client.model.BlockIomadCompanyAdminEditCompaniesRequest;
import org.openapitools.client.model.BlockIomadCompanyAdminEditLicensesRequest;
import org.openapitools.client.model.BlockIomadCompanyAdminEnrolUsersRequest;
import org.openapitools.client.model.BlockIomadCompanyAdminGetCompanies200Response;
import org.openapitools.client.model.BlockIomadCompanyAdminGetCompaniesRequest;
import org.openapitools.client.model.BlockIomadCompanyAdminGetCompanyCourses200Response;
import org.openapitools.client.model.BlockIomadCompanyAdminGetCompanyCoursesRequest;
import org.openapitools.client.model.BlockIomadCompanyAdminGetCourseInfoRequest;
import org.openapitools.client.model.BlockIomadCompanyAdminGetDepartmentUsers200Response;
import org.openapitools.client.model.BlockIomadCompanyAdminGetDepartmentUsersRequest;
import org.openapitools.client.model.BlockIomadCompanyAdminGetDepartments200Response;
import org.openapitools.client.model.BlockIomadCompanyAdminGetDepartmentsRequest;
import org.openapitools.client.model.BlockIomadCompanyAdminGetLicenseFromId200Response;
import org.openapitools.client.model.BlockIomadCompanyAdminGetLicenseFromIdRequest;
import org.openapitools.client.model.BlockIomadCompanyAdminGetLicenseInfo200Response;
import org.openapitools.client.model.BlockIomadCompanyAdminGetLicenseInfoRequest;
import org.openapitools.client.model.BlockIomadCompanyAdminMoveUsersRequest;
import org.openapitools.client.model.BlockIomadCompanyAdminRestrictCapabilityRequest;
import org.openapitools.client.model.BlockIomadCompanyAdminSyncUsers200Response;
import org.openapitools.client.model.BlockIomadCompanyAdminSyncUsersRequest;
import org.openapitools.client.model.BlockIomadCompanyAdminUnallocateLicensesRequest;
import org.openapitools.client.model.BlockIomadCompanyAdminUnassignCoursesRequest;
import org.openapitools.client.model.BlockIomadCompanyAdminUnassignUsersRequest;
import org.openapitools.client.model.BlockIomadCompanyAdminUpdateCoursesRequest;
import org.openapitools.client.model.ErrorResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BlockIomadCompanyAdminApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BlockIomadCompanyAdminApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BlockIomadCompanyAdminApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for blockIomadCompanyAdminAllocateLicenses
     * @param blockIomadCompanyAdminAllocateLicensesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success or failure </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blockIomadCompanyAdminAllocateLicensesCall(BlockIomadCompanyAdminAllocateLicensesRequest blockIomadCompanyAdminAllocateLicensesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = blockIomadCompanyAdminAllocateLicensesRequest;

        // create path and map variables
        String localVarPath = "/block_iomad_company_admin_allocate_licenses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call blockIomadCompanyAdminAllocateLicensesValidateBeforeCall(BlockIomadCompanyAdminAllocateLicensesRequest blockIomadCompanyAdminAllocateLicensesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'blockIomadCompanyAdminAllocateLicensesRequest' is set
        if (blockIomadCompanyAdminAllocateLicensesRequest == null) {
            throw new ApiException("Missing the required parameter 'blockIomadCompanyAdminAllocateLicensesRequest' when calling blockIomadCompanyAdminAllocateLicenses(Async)");
        }

        return blockIomadCompanyAdminAllocateLicensesCall(blockIomadCompanyAdminAllocateLicensesRequest, _callback);

    }

    /**
     * Allocate course licenses to a user
     * Allocate course licenses to a user
     * @param blockIomadCompanyAdminAllocateLicensesRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success or failure </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object blockIomadCompanyAdminAllocateLicenses(BlockIomadCompanyAdminAllocateLicensesRequest blockIomadCompanyAdminAllocateLicensesRequest) throws ApiException {
        ApiResponse<Object> localVarResp = blockIomadCompanyAdminAllocateLicensesWithHttpInfo(blockIomadCompanyAdminAllocateLicensesRequest);
        return localVarResp.getData();
    }

    /**
     * Allocate course licenses to a user
     * Allocate course licenses to a user
     * @param blockIomadCompanyAdminAllocateLicensesRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success or failure </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> blockIomadCompanyAdminAllocateLicensesWithHttpInfo(BlockIomadCompanyAdminAllocateLicensesRequest blockIomadCompanyAdminAllocateLicensesRequest) throws ApiException {
        okhttp3.Call localVarCall = blockIomadCompanyAdminAllocateLicensesValidateBeforeCall(blockIomadCompanyAdminAllocateLicensesRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Allocate course licenses to a user (asynchronously)
     * Allocate course licenses to a user
     * @param blockIomadCompanyAdminAllocateLicensesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success or failure </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blockIomadCompanyAdminAllocateLicensesAsync(BlockIomadCompanyAdminAllocateLicensesRequest blockIomadCompanyAdminAllocateLicensesRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = blockIomadCompanyAdminAllocateLicensesValidateBeforeCall(blockIomadCompanyAdminAllocateLicensesRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for blockIomadCompanyAdminAssignCourses
     * @param blockIomadCompanyAdminAssignCoursesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success or failure </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blockIomadCompanyAdminAssignCoursesCall(BlockIomadCompanyAdminAssignCoursesRequest blockIomadCompanyAdminAssignCoursesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = blockIomadCompanyAdminAssignCoursesRequest;

        // create path and map variables
        String localVarPath = "/block_iomad_company_admin_assign_courses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call blockIomadCompanyAdminAssignCoursesValidateBeforeCall(BlockIomadCompanyAdminAssignCoursesRequest blockIomadCompanyAdminAssignCoursesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'blockIomadCompanyAdminAssignCoursesRequest' is set
        if (blockIomadCompanyAdminAssignCoursesRequest == null) {
            throw new ApiException("Missing the required parameter 'blockIomadCompanyAdminAssignCoursesRequest' when calling blockIomadCompanyAdminAssignCourses(Async)");
        }

        return blockIomadCompanyAdminAssignCoursesCall(blockIomadCompanyAdminAssignCoursesRequest, _callback);

    }

    /**
     * Assign a course to a company
     * Assign a course to a company
     * @param blockIomadCompanyAdminAssignCoursesRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success or failure </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object blockIomadCompanyAdminAssignCourses(BlockIomadCompanyAdminAssignCoursesRequest blockIomadCompanyAdminAssignCoursesRequest) throws ApiException {
        ApiResponse<Object> localVarResp = blockIomadCompanyAdminAssignCoursesWithHttpInfo(blockIomadCompanyAdminAssignCoursesRequest);
        return localVarResp.getData();
    }

    /**
     * Assign a course to a company
     * Assign a course to a company
     * @param blockIomadCompanyAdminAssignCoursesRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success or failure </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> blockIomadCompanyAdminAssignCoursesWithHttpInfo(BlockIomadCompanyAdminAssignCoursesRequest blockIomadCompanyAdminAssignCoursesRequest) throws ApiException {
        okhttp3.Call localVarCall = blockIomadCompanyAdminAssignCoursesValidateBeforeCall(blockIomadCompanyAdminAssignCoursesRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Assign a course to a company (asynchronously)
     * Assign a course to a company
     * @param blockIomadCompanyAdminAssignCoursesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success or failure </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blockIomadCompanyAdminAssignCoursesAsync(BlockIomadCompanyAdminAssignCoursesRequest blockIomadCompanyAdminAssignCoursesRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = blockIomadCompanyAdminAssignCoursesValidateBeforeCall(blockIomadCompanyAdminAssignCoursesRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for blockIomadCompanyAdminAssignUsers
     * @param blockIomadCompanyAdminAssignUsersRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blockIomadCompanyAdminAssignUsersCall(BlockIomadCompanyAdminAssignUsersRequest blockIomadCompanyAdminAssignUsersRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = blockIomadCompanyAdminAssignUsersRequest;

        // create path and map variables
        String localVarPath = "/block_iomad_company_admin_assign_users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call blockIomadCompanyAdminAssignUsersValidateBeforeCall(BlockIomadCompanyAdminAssignUsersRequest blockIomadCompanyAdminAssignUsersRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'blockIomadCompanyAdminAssignUsersRequest' is set
        if (blockIomadCompanyAdminAssignUsersRequest == null) {
            throw new ApiException("Missing the required parameter 'blockIomadCompanyAdminAssignUsersRequest' when calling blockIomadCompanyAdminAssignUsers(Async)");
        }

        return blockIomadCompanyAdminAssignUsersCall(blockIomadCompanyAdminAssignUsersRequest, _callback);

    }

    /**
     * Assign users to a company
     * Assign users to a company
     * @param blockIomadCompanyAdminAssignUsersRequest  (required)
     * @return BlockIomadCompanyAdminAssignUsers200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public BlockIomadCompanyAdminAssignUsers200Response blockIomadCompanyAdminAssignUsers(BlockIomadCompanyAdminAssignUsersRequest blockIomadCompanyAdminAssignUsersRequest) throws ApiException {
        ApiResponse<BlockIomadCompanyAdminAssignUsers200Response> localVarResp = blockIomadCompanyAdminAssignUsersWithHttpInfo(blockIomadCompanyAdminAssignUsersRequest);
        return localVarResp.getData();
    }

    /**
     * Assign users to a company
     * Assign users to a company
     * @param blockIomadCompanyAdminAssignUsersRequest  (required)
     * @return ApiResponse&lt;BlockIomadCompanyAdminAssignUsers200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BlockIomadCompanyAdminAssignUsers200Response> blockIomadCompanyAdminAssignUsersWithHttpInfo(BlockIomadCompanyAdminAssignUsersRequest blockIomadCompanyAdminAssignUsersRequest) throws ApiException {
        okhttp3.Call localVarCall = blockIomadCompanyAdminAssignUsersValidateBeforeCall(blockIomadCompanyAdminAssignUsersRequest, null);
        Type localVarReturnType = new TypeToken<BlockIomadCompanyAdminAssignUsers200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Assign users to a company (asynchronously)
     * Assign users to a company
     * @param blockIomadCompanyAdminAssignUsersRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blockIomadCompanyAdminAssignUsersAsync(BlockIomadCompanyAdminAssignUsersRequest blockIomadCompanyAdminAssignUsersRequest, final ApiCallback<BlockIomadCompanyAdminAssignUsers200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = blockIomadCompanyAdminAssignUsersValidateBeforeCall(blockIomadCompanyAdminAssignUsersRequest, _callback);
        Type localVarReturnType = new TypeToken<BlockIomadCompanyAdminAssignUsers200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for blockIomadCompanyAdminCapabilityDeleteTemplate
     * @param blockIomadCompanyAdminCapabilityDeleteTemplateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True capability update succeeds </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blockIomadCompanyAdminCapabilityDeleteTemplateCall(BlockIomadCompanyAdminCapabilityDeleteTemplateRequest blockIomadCompanyAdminCapabilityDeleteTemplateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = blockIomadCompanyAdminCapabilityDeleteTemplateRequest;

        // create path and map variables
        String localVarPath = "/block_iomad_company_admin_capability_delete_template";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call blockIomadCompanyAdminCapabilityDeleteTemplateValidateBeforeCall(BlockIomadCompanyAdminCapabilityDeleteTemplateRequest blockIomadCompanyAdminCapabilityDeleteTemplateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'blockIomadCompanyAdminCapabilityDeleteTemplateRequest' is set
        if (blockIomadCompanyAdminCapabilityDeleteTemplateRequest == null) {
            throw new ApiException("Missing the required parameter 'blockIomadCompanyAdminCapabilityDeleteTemplateRequest' when calling blockIomadCompanyAdminCapabilityDeleteTemplate(Async)");
        }

        return blockIomadCompanyAdminCapabilityDeleteTemplateCall(blockIomadCompanyAdminCapabilityDeleteTemplateRequest, _callback);

    }

    /**
     * Delete Iomad capabilities template
     * Delete Iomad capabilities template
     * @param blockIomadCompanyAdminCapabilityDeleteTemplateRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True capability update succeeds </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object blockIomadCompanyAdminCapabilityDeleteTemplate(BlockIomadCompanyAdminCapabilityDeleteTemplateRequest blockIomadCompanyAdminCapabilityDeleteTemplateRequest) throws ApiException {
        ApiResponse<Object> localVarResp = blockIomadCompanyAdminCapabilityDeleteTemplateWithHttpInfo(blockIomadCompanyAdminCapabilityDeleteTemplateRequest);
        return localVarResp.getData();
    }

    /**
     * Delete Iomad capabilities template
     * Delete Iomad capabilities template
     * @param blockIomadCompanyAdminCapabilityDeleteTemplateRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True capability update succeeds </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> blockIomadCompanyAdminCapabilityDeleteTemplateWithHttpInfo(BlockIomadCompanyAdminCapabilityDeleteTemplateRequest blockIomadCompanyAdminCapabilityDeleteTemplateRequest) throws ApiException {
        okhttp3.Call localVarCall = blockIomadCompanyAdminCapabilityDeleteTemplateValidateBeforeCall(blockIomadCompanyAdminCapabilityDeleteTemplateRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Iomad capabilities template (asynchronously)
     * Delete Iomad capabilities template
     * @param blockIomadCompanyAdminCapabilityDeleteTemplateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True capability update succeeds </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blockIomadCompanyAdminCapabilityDeleteTemplateAsync(BlockIomadCompanyAdminCapabilityDeleteTemplateRequest blockIomadCompanyAdminCapabilityDeleteTemplateRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = blockIomadCompanyAdminCapabilityDeleteTemplateValidateBeforeCall(blockIomadCompanyAdminCapabilityDeleteTemplateRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for blockIomadCompanyAdminCheckToken
     * @param blockIomadCompanyAdminCheckTokenRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blockIomadCompanyAdminCheckTokenCall(BlockIomadCompanyAdminCheckTokenRequest blockIomadCompanyAdminCheckTokenRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = blockIomadCompanyAdminCheckTokenRequest;

        // create path and map variables
        String localVarPath = "/block_iomad_company_admin_check_token";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call blockIomadCompanyAdminCheckTokenValidateBeforeCall(BlockIomadCompanyAdminCheckTokenRequest blockIomadCompanyAdminCheckTokenRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'blockIomadCompanyAdminCheckTokenRequest' is set
        if (blockIomadCompanyAdminCheckTokenRequest == null) {
            throw new ApiException("Missing the required parameter 'blockIomadCompanyAdminCheckTokenRequest' when calling blockIomadCompanyAdminCheckToken(Async)");
        }

        return blockIomadCompanyAdminCheckTokenCall(blockIomadCompanyAdminCheckTokenRequest, _callback);

    }

    /**
     * Check SSO token
     * Check SSO token
     * @param blockIomadCompanyAdminCheckTokenRequest  (required)
     * @return BlockIomadCompanyAdminCheckToken200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public BlockIomadCompanyAdminCheckToken200Response blockIomadCompanyAdminCheckToken(BlockIomadCompanyAdminCheckTokenRequest blockIomadCompanyAdminCheckTokenRequest) throws ApiException {
        ApiResponse<BlockIomadCompanyAdminCheckToken200Response> localVarResp = blockIomadCompanyAdminCheckTokenWithHttpInfo(blockIomadCompanyAdminCheckTokenRequest);
        return localVarResp.getData();
    }

    /**
     * Check SSO token
     * Check SSO token
     * @param blockIomadCompanyAdminCheckTokenRequest  (required)
     * @return ApiResponse&lt;BlockIomadCompanyAdminCheckToken200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BlockIomadCompanyAdminCheckToken200Response> blockIomadCompanyAdminCheckTokenWithHttpInfo(BlockIomadCompanyAdminCheckTokenRequest blockIomadCompanyAdminCheckTokenRequest) throws ApiException {
        okhttp3.Call localVarCall = blockIomadCompanyAdminCheckTokenValidateBeforeCall(blockIomadCompanyAdminCheckTokenRequest, null);
        Type localVarReturnType = new TypeToken<BlockIomadCompanyAdminCheckToken200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Check SSO token (asynchronously)
     * Check SSO token
     * @param blockIomadCompanyAdminCheckTokenRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blockIomadCompanyAdminCheckTokenAsync(BlockIomadCompanyAdminCheckTokenRequest blockIomadCompanyAdminCheckTokenRequest, final ApiCallback<BlockIomadCompanyAdminCheckToken200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = blockIomadCompanyAdminCheckTokenValidateBeforeCall(blockIomadCompanyAdminCheckTokenRequest, _callback);
        Type localVarReturnType = new TypeToken<BlockIomadCompanyAdminCheckToken200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for blockIomadCompanyAdminCreateCompanies
     * @param blockIomadCompanyAdminCreateCompaniesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blockIomadCompanyAdminCreateCompaniesCall(BlockIomadCompanyAdminCreateCompaniesRequest blockIomadCompanyAdminCreateCompaniesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = blockIomadCompanyAdminCreateCompaniesRequest;

        // create path and map variables
        String localVarPath = "/block_iomad_company_admin_create_companies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call blockIomadCompanyAdminCreateCompaniesValidateBeforeCall(BlockIomadCompanyAdminCreateCompaniesRequest blockIomadCompanyAdminCreateCompaniesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'blockIomadCompanyAdminCreateCompaniesRequest' is set
        if (blockIomadCompanyAdminCreateCompaniesRequest == null) {
            throw new ApiException("Missing the required parameter 'blockIomadCompanyAdminCreateCompaniesRequest' when calling blockIomadCompanyAdminCreateCompanies(Async)");
        }

        return blockIomadCompanyAdminCreateCompaniesCall(blockIomadCompanyAdminCreateCompaniesRequest, _callback);

    }

    /**
     * Create new Iomad companies
     * Create new Iomad companies
     * @param blockIomadCompanyAdminCreateCompaniesRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object blockIomadCompanyAdminCreateCompanies(BlockIomadCompanyAdminCreateCompaniesRequest blockIomadCompanyAdminCreateCompaniesRequest) throws ApiException {
        ApiResponse<Object> localVarResp = blockIomadCompanyAdminCreateCompaniesWithHttpInfo(blockIomadCompanyAdminCreateCompaniesRequest);
        return localVarResp.getData();
    }

    /**
     * Create new Iomad companies
     * Create new Iomad companies
     * @param blockIomadCompanyAdminCreateCompaniesRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> blockIomadCompanyAdminCreateCompaniesWithHttpInfo(BlockIomadCompanyAdminCreateCompaniesRequest blockIomadCompanyAdminCreateCompaniesRequest) throws ApiException {
        okhttp3.Call localVarCall = blockIomadCompanyAdminCreateCompaniesValidateBeforeCall(blockIomadCompanyAdminCreateCompaniesRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create new Iomad companies (asynchronously)
     * Create new Iomad companies
     * @param blockIomadCompanyAdminCreateCompaniesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blockIomadCompanyAdminCreateCompaniesAsync(BlockIomadCompanyAdminCreateCompaniesRequest blockIomadCompanyAdminCreateCompaniesRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = blockIomadCompanyAdminCreateCompaniesValidateBeforeCall(blockIomadCompanyAdminCreateCompaniesRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for blockIomadCompanyAdminCreateLicenses
     * @param blockIomadCompanyAdminCreateLicensesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blockIomadCompanyAdminCreateLicensesCall(BlockIomadCompanyAdminCreateLicensesRequest blockIomadCompanyAdminCreateLicensesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = blockIomadCompanyAdminCreateLicensesRequest;

        // create path and map variables
        String localVarPath = "/block_iomad_company_admin_create_licenses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call blockIomadCompanyAdminCreateLicensesValidateBeforeCall(BlockIomadCompanyAdminCreateLicensesRequest blockIomadCompanyAdminCreateLicensesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'blockIomadCompanyAdminCreateLicensesRequest' is set
        if (blockIomadCompanyAdminCreateLicensesRequest == null) {
            throw new ApiException("Missing the required parameter 'blockIomadCompanyAdminCreateLicensesRequest' when calling blockIomadCompanyAdminCreateLicenses(Async)");
        }

        return blockIomadCompanyAdminCreateLicensesCall(blockIomadCompanyAdminCreateLicensesRequest, _callback);

    }

    /**
     * Create company licenses
     * Create company licenses
     * @param blockIomadCompanyAdminCreateLicensesRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object blockIomadCompanyAdminCreateLicenses(BlockIomadCompanyAdminCreateLicensesRequest blockIomadCompanyAdminCreateLicensesRequest) throws ApiException {
        ApiResponse<Object> localVarResp = blockIomadCompanyAdminCreateLicensesWithHttpInfo(blockIomadCompanyAdminCreateLicensesRequest);
        return localVarResp.getData();
    }

    /**
     * Create company licenses
     * Create company licenses
     * @param blockIomadCompanyAdminCreateLicensesRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> blockIomadCompanyAdminCreateLicensesWithHttpInfo(BlockIomadCompanyAdminCreateLicensesRequest blockIomadCompanyAdminCreateLicensesRequest) throws ApiException {
        okhttp3.Call localVarCall = blockIomadCompanyAdminCreateLicensesValidateBeforeCall(blockIomadCompanyAdminCreateLicensesRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create company licenses (asynchronously)
     * Create company licenses
     * @param blockIomadCompanyAdminCreateLicensesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blockIomadCompanyAdminCreateLicensesAsync(BlockIomadCompanyAdminCreateLicensesRequest blockIomadCompanyAdminCreateLicensesRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = blockIomadCompanyAdminCreateLicensesValidateBeforeCall(blockIomadCompanyAdminCreateLicensesRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for blockIomadCompanyAdminDeleteLicenses
     * @param blockIomadCompanyAdminDeleteLicensesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success or failure </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blockIomadCompanyAdminDeleteLicensesCall(BlockIomadCompanyAdminDeleteLicensesRequest blockIomadCompanyAdminDeleteLicensesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = blockIomadCompanyAdminDeleteLicensesRequest;

        // create path and map variables
        String localVarPath = "/block_iomad_company_admin_delete_licenses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call blockIomadCompanyAdminDeleteLicensesValidateBeforeCall(BlockIomadCompanyAdminDeleteLicensesRequest blockIomadCompanyAdminDeleteLicensesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'blockIomadCompanyAdminDeleteLicensesRequest' is set
        if (blockIomadCompanyAdminDeleteLicensesRequest == null) {
            throw new ApiException("Missing the required parameter 'blockIomadCompanyAdminDeleteLicensesRequest' when calling blockIomadCompanyAdminDeleteLicenses(Async)");
        }

        return blockIomadCompanyAdminDeleteLicensesCall(blockIomadCompanyAdminDeleteLicensesRequest, _callback);

    }

    /**
     * Delete company licenses
     * Delete company licenses
     * @param blockIomadCompanyAdminDeleteLicensesRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success or failure </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object blockIomadCompanyAdminDeleteLicenses(BlockIomadCompanyAdminDeleteLicensesRequest blockIomadCompanyAdminDeleteLicensesRequest) throws ApiException {
        ApiResponse<Object> localVarResp = blockIomadCompanyAdminDeleteLicensesWithHttpInfo(blockIomadCompanyAdminDeleteLicensesRequest);
        return localVarResp.getData();
    }

    /**
     * Delete company licenses
     * Delete company licenses
     * @param blockIomadCompanyAdminDeleteLicensesRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success or failure </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> blockIomadCompanyAdminDeleteLicensesWithHttpInfo(BlockIomadCompanyAdminDeleteLicensesRequest blockIomadCompanyAdminDeleteLicensesRequest) throws ApiException {
        okhttp3.Call localVarCall = blockIomadCompanyAdminDeleteLicensesValidateBeforeCall(blockIomadCompanyAdminDeleteLicensesRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete company licenses (asynchronously)
     * Delete company licenses
     * @param blockIomadCompanyAdminDeleteLicensesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success or failure </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blockIomadCompanyAdminDeleteLicensesAsync(BlockIomadCompanyAdminDeleteLicensesRequest blockIomadCompanyAdminDeleteLicensesRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = blockIomadCompanyAdminDeleteLicensesValidateBeforeCall(blockIomadCompanyAdminDeleteLicensesRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for blockIomadCompanyAdminEditCompanies
     * @param blockIomadCompanyAdminEditCompaniesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success or failure </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blockIomadCompanyAdminEditCompaniesCall(BlockIomadCompanyAdminEditCompaniesRequest blockIomadCompanyAdminEditCompaniesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = blockIomadCompanyAdminEditCompaniesRequest;

        // create path and map variables
        String localVarPath = "/block_iomad_company_admin_edit_companies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call blockIomadCompanyAdminEditCompaniesValidateBeforeCall(BlockIomadCompanyAdminEditCompaniesRequest blockIomadCompanyAdminEditCompaniesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'blockIomadCompanyAdminEditCompaniesRequest' is set
        if (blockIomadCompanyAdminEditCompaniesRequest == null) {
            throw new ApiException("Missing the required parameter 'blockIomadCompanyAdminEditCompaniesRequest' when calling blockIomadCompanyAdminEditCompanies(Async)");
        }

        return blockIomadCompanyAdminEditCompaniesCall(blockIomadCompanyAdminEditCompaniesRequest, _callback);

    }

    /**
     * Edit Iomad companies
     * Edit Iomad companies
     * @param blockIomadCompanyAdminEditCompaniesRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success or failure </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object blockIomadCompanyAdminEditCompanies(BlockIomadCompanyAdminEditCompaniesRequest blockIomadCompanyAdminEditCompaniesRequest) throws ApiException {
        ApiResponse<Object> localVarResp = blockIomadCompanyAdminEditCompaniesWithHttpInfo(blockIomadCompanyAdminEditCompaniesRequest);
        return localVarResp.getData();
    }

    /**
     * Edit Iomad companies
     * Edit Iomad companies
     * @param blockIomadCompanyAdminEditCompaniesRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success or failure </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> blockIomadCompanyAdminEditCompaniesWithHttpInfo(BlockIomadCompanyAdminEditCompaniesRequest blockIomadCompanyAdminEditCompaniesRequest) throws ApiException {
        okhttp3.Call localVarCall = blockIomadCompanyAdminEditCompaniesValidateBeforeCall(blockIomadCompanyAdminEditCompaniesRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Edit Iomad companies (asynchronously)
     * Edit Iomad companies
     * @param blockIomadCompanyAdminEditCompaniesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success or failure </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blockIomadCompanyAdminEditCompaniesAsync(BlockIomadCompanyAdminEditCompaniesRequest blockIomadCompanyAdminEditCompaniesRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = blockIomadCompanyAdminEditCompaniesValidateBeforeCall(blockIomadCompanyAdminEditCompaniesRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for blockIomadCompanyAdminEditLicenses
     * @param blockIomadCompanyAdminEditLicensesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blockIomadCompanyAdminEditLicensesCall(BlockIomadCompanyAdminEditLicensesRequest blockIomadCompanyAdminEditLicensesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = blockIomadCompanyAdminEditLicensesRequest;

        // create path and map variables
        String localVarPath = "/block_iomad_company_admin_edit_licenses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call blockIomadCompanyAdminEditLicensesValidateBeforeCall(BlockIomadCompanyAdminEditLicensesRequest blockIomadCompanyAdminEditLicensesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'blockIomadCompanyAdminEditLicensesRequest' is set
        if (blockIomadCompanyAdminEditLicensesRequest == null) {
            throw new ApiException("Missing the required parameter 'blockIomadCompanyAdminEditLicensesRequest' when calling blockIomadCompanyAdminEditLicenses(Async)");
        }

        return blockIomadCompanyAdminEditLicensesCall(blockIomadCompanyAdminEditLicensesRequest, _callback);

    }

    /**
     * Edit company license settings
     * Edit company license settings
     * @param blockIomadCompanyAdminEditLicensesRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object blockIomadCompanyAdminEditLicenses(BlockIomadCompanyAdminEditLicensesRequest blockIomadCompanyAdminEditLicensesRequest) throws ApiException {
        ApiResponse<Object> localVarResp = blockIomadCompanyAdminEditLicensesWithHttpInfo(blockIomadCompanyAdminEditLicensesRequest);
        return localVarResp.getData();
    }

    /**
     * Edit company license settings
     * Edit company license settings
     * @param blockIomadCompanyAdminEditLicensesRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> blockIomadCompanyAdminEditLicensesWithHttpInfo(BlockIomadCompanyAdminEditLicensesRequest blockIomadCompanyAdminEditLicensesRequest) throws ApiException {
        okhttp3.Call localVarCall = blockIomadCompanyAdminEditLicensesValidateBeforeCall(blockIomadCompanyAdminEditLicensesRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Edit company license settings (asynchronously)
     * Edit company license settings
     * @param blockIomadCompanyAdminEditLicensesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blockIomadCompanyAdminEditLicensesAsync(BlockIomadCompanyAdminEditLicensesRequest blockIomadCompanyAdminEditLicensesRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = blockIomadCompanyAdminEditLicensesValidateBeforeCall(blockIomadCompanyAdminEditLicensesRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for blockIomadCompanyAdminEnrolUsers
     * @param blockIomadCompanyAdminEnrolUsersRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True user enrolments succeeds </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blockIomadCompanyAdminEnrolUsersCall(BlockIomadCompanyAdminEnrolUsersRequest blockIomadCompanyAdminEnrolUsersRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = blockIomadCompanyAdminEnrolUsersRequest;

        // create path and map variables
        String localVarPath = "/block_iomad_company_admin_enrol_users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call blockIomadCompanyAdminEnrolUsersValidateBeforeCall(BlockIomadCompanyAdminEnrolUsersRequest blockIomadCompanyAdminEnrolUsersRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'blockIomadCompanyAdminEnrolUsersRequest' is set
        if (blockIomadCompanyAdminEnrolUsersRequest == null) {
            throw new ApiException("Missing the required parameter 'blockIomadCompanyAdminEnrolUsersRequest' when calling blockIomadCompanyAdminEnrolUsers(Async)");
        }

        return blockIomadCompanyAdminEnrolUsersCall(blockIomadCompanyAdminEnrolUsersRequest, _callback);

    }

    /**
     * Assign users onto courses
     * Assign users onto courses
     * @param blockIomadCompanyAdminEnrolUsersRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True user enrolments succeeds </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object blockIomadCompanyAdminEnrolUsers(BlockIomadCompanyAdminEnrolUsersRequest blockIomadCompanyAdminEnrolUsersRequest) throws ApiException {
        ApiResponse<Object> localVarResp = blockIomadCompanyAdminEnrolUsersWithHttpInfo(blockIomadCompanyAdminEnrolUsersRequest);
        return localVarResp.getData();
    }

    /**
     * Assign users onto courses
     * Assign users onto courses
     * @param blockIomadCompanyAdminEnrolUsersRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True user enrolments succeeds </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> blockIomadCompanyAdminEnrolUsersWithHttpInfo(BlockIomadCompanyAdminEnrolUsersRequest blockIomadCompanyAdminEnrolUsersRequest) throws ApiException {
        okhttp3.Call localVarCall = blockIomadCompanyAdminEnrolUsersValidateBeforeCall(blockIomadCompanyAdminEnrolUsersRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Assign users onto courses (asynchronously)
     * Assign users onto courses
     * @param blockIomadCompanyAdminEnrolUsersRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True user enrolments succeeds </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blockIomadCompanyAdminEnrolUsersAsync(BlockIomadCompanyAdminEnrolUsersRequest blockIomadCompanyAdminEnrolUsersRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = blockIomadCompanyAdminEnrolUsersValidateBeforeCall(blockIomadCompanyAdminEnrolUsersRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for blockIomadCompanyAdminGetCompanies
     * @param blockIomadCompanyAdminGetCompaniesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blockIomadCompanyAdminGetCompaniesCall(BlockIomadCompanyAdminGetCompaniesRequest blockIomadCompanyAdminGetCompaniesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = blockIomadCompanyAdminGetCompaniesRequest;

        // create path and map variables
        String localVarPath = "/block_iomad_company_admin_get_companies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call blockIomadCompanyAdminGetCompaniesValidateBeforeCall(BlockIomadCompanyAdminGetCompaniesRequest blockIomadCompanyAdminGetCompaniesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'blockIomadCompanyAdminGetCompaniesRequest' is set
        if (blockIomadCompanyAdminGetCompaniesRequest == null) {
            throw new ApiException("Missing the required parameter 'blockIomadCompanyAdminGetCompaniesRequest' when calling blockIomadCompanyAdminGetCompanies(Async)");
        }

        return blockIomadCompanyAdminGetCompaniesCall(blockIomadCompanyAdminGetCompaniesRequest, _callback);

    }

    /**
     * Get all Iomad companies
     * Get all Iomad companies
     * @param blockIomadCompanyAdminGetCompaniesRequest  (required)
     * @return BlockIomadCompanyAdminGetCompanies200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public BlockIomadCompanyAdminGetCompanies200Response blockIomadCompanyAdminGetCompanies(BlockIomadCompanyAdminGetCompaniesRequest blockIomadCompanyAdminGetCompaniesRequest) throws ApiException {
        ApiResponse<BlockIomadCompanyAdminGetCompanies200Response> localVarResp = blockIomadCompanyAdminGetCompaniesWithHttpInfo(blockIomadCompanyAdminGetCompaniesRequest);
        return localVarResp.getData();
    }

    /**
     * Get all Iomad companies
     * Get all Iomad companies
     * @param blockIomadCompanyAdminGetCompaniesRequest  (required)
     * @return ApiResponse&lt;BlockIomadCompanyAdminGetCompanies200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BlockIomadCompanyAdminGetCompanies200Response> blockIomadCompanyAdminGetCompaniesWithHttpInfo(BlockIomadCompanyAdminGetCompaniesRequest blockIomadCompanyAdminGetCompaniesRequest) throws ApiException {
        okhttp3.Call localVarCall = blockIomadCompanyAdminGetCompaniesValidateBeforeCall(blockIomadCompanyAdminGetCompaniesRequest, null);
        Type localVarReturnType = new TypeToken<BlockIomadCompanyAdminGetCompanies200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all Iomad companies (asynchronously)
     * Get all Iomad companies
     * @param blockIomadCompanyAdminGetCompaniesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blockIomadCompanyAdminGetCompaniesAsync(BlockIomadCompanyAdminGetCompaniesRequest blockIomadCompanyAdminGetCompaniesRequest, final ApiCallback<BlockIomadCompanyAdminGetCompanies200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = blockIomadCompanyAdminGetCompaniesValidateBeforeCall(blockIomadCompanyAdminGetCompaniesRequest, _callback);
        Type localVarReturnType = new TypeToken<BlockIomadCompanyAdminGetCompanies200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for blockIomadCompanyAdminGetCompanyCourses
     * @param blockIomadCompanyAdminGetCompanyCoursesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blockIomadCompanyAdminGetCompanyCoursesCall(BlockIomadCompanyAdminGetCompanyCoursesRequest blockIomadCompanyAdminGetCompanyCoursesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = blockIomadCompanyAdminGetCompanyCoursesRequest;

        // create path and map variables
        String localVarPath = "/block_iomad_company_admin_get_company_courses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call blockIomadCompanyAdminGetCompanyCoursesValidateBeforeCall(BlockIomadCompanyAdminGetCompanyCoursesRequest blockIomadCompanyAdminGetCompanyCoursesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'blockIomadCompanyAdminGetCompanyCoursesRequest' is set
        if (blockIomadCompanyAdminGetCompanyCoursesRequest == null) {
            throw new ApiException("Missing the required parameter 'blockIomadCompanyAdminGetCompanyCoursesRequest' when calling blockIomadCompanyAdminGetCompanyCourses(Async)");
        }

        return blockIomadCompanyAdminGetCompanyCoursesCall(blockIomadCompanyAdminGetCompanyCoursesRequest, _callback);

    }

    /**
     * Get Iomad company course allocations
     * Get Iomad company course allocations
     * @param blockIomadCompanyAdminGetCompanyCoursesRequest  (required)
     * @return BlockIomadCompanyAdminGetCompanyCourses200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public BlockIomadCompanyAdminGetCompanyCourses200Response blockIomadCompanyAdminGetCompanyCourses(BlockIomadCompanyAdminGetCompanyCoursesRequest blockIomadCompanyAdminGetCompanyCoursesRequest) throws ApiException {
        ApiResponse<BlockIomadCompanyAdminGetCompanyCourses200Response> localVarResp = blockIomadCompanyAdminGetCompanyCoursesWithHttpInfo(blockIomadCompanyAdminGetCompanyCoursesRequest);
        return localVarResp.getData();
    }

    /**
     * Get Iomad company course allocations
     * Get Iomad company course allocations
     * @param blockIomadCompanyAdminGetCompanyCoursesRequest  (required)
     * @return ApiResponse&lt;BlockIomadCompanyAdminGetCompanyCourses200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BlockIomadCompanyAdminGetCompanyCourses200Response> blockIomadCompanyAdminGetCompanyCoursesWithHttpInfo(BlockIomadCompanyAdminGetCompanyCoursesRequest blockIomadCompanyAdminGetCompanyCoursesRequest) throws ApiException {
        okhttp3.Call localVarCall = blockIomadCompanyAdminGetCompanyCoursesValidateBeforeCall(blockIomadCompanyAdminGetCompanyCoursesRequest, null);
        Type localVarReturnType = new TypeToken<BlockIomadCompanyAdminGetCompanyCourses200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Iomad company course allocations (asynchronously)
     * Get Iomad company course allocations
     * @param blockIomadCompanyAdminGetCompanyCoursesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blockIomadCompanyAdminGetCompanyCoursesAsync(BlockIomadCompanyAdminGetCompanyCoursesRequest blockIomadCompanyAdminGetCompanyCoursesRequest, final ApiCallback<BlockIomadCompanyAdminGetCompanyCourses200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = blockIomadCompanyAdminGetCompanyCoursesValidateBeforeCall(blockIomadCompanyAdminGetCompanyCoursesRequest, _callback);
        Type localVarReturnType = new TypeToken<BlockIomadCompanyAdminGetCompanyCourses200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for blockIomadCompanyAdminGetCourseInfo
     * @param blockIomadCompanyAdminGetCourseInfoRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blockIomadCompanyAdminGetCourseInfoCall(BlockIomadCompanyAdminGetCourseInfoRequest blockIomadCompanyAdminGetCourseInfoRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = blockIomadCompanyAdminGetCourseInfoRequest;

        // create path and map variables
        String localVarPath = "/block_iomad_company_admin_get_course_info";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call blockIomadCompanyAdminGetCourseInfoValidateBeforeCall(BlockIomadCompanyAdminGetCourseInfoRequest blockIomadCompanyAdminGetCourseInfoRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'blockIomadCompanyAdminGetCourseInfoRequest' is set
        if (blockIomadCompanyAdminGetCourseInfoRequest == null) {
            throw new ApiException("Missing the required parameter 'blockIomadCompanyAdminGetCourseInfoRequest' when calling blockIomadCompanyAdminGetCourseInfo(Async)");
        }

        return blockIomadCompanyAdminGetCourseInfoCall(blockIomadCompanyAdminGetCourseInfoRequest, _callback);

    }

    /**
     * Get Iomad course settings
     * Get Iomad course settings
     * @param blockIomadCompanyAdminGetCourseInfoRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object blockIomadCompanyAdminGetCourseInfo(BlockIomadCompanyAdminGetCourseInfoRequest blockIomadCompanyAdminGetCourseInfoRequest) throws ApiException {
        ApiResponse<Object> localVarResp = blockIomadCompanyAdminGetCourseInfoWithHttpInfo(blockIomadCompanyAdminGetCourseInfoRequest);
        return localVarResp.getData();
    }

    /**
     * Get Iomad course settings
     * Get Iomad course settings
     * @param blockIomadCompanyAdminGetCourseInfoRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> blockIomadCompanyAdminGetCourseInfoWithHttpInfo(BlockIomadCompanyAdminGetCourseInfoRequest blockIomadCompanyAdminGetCourseInfoRequest) throws ApiException {
        okhttp3.Call localVarCall = blockIomadCompanyAdminGetCourseInfoValidateBeforeCall(blockIomadCompanyAdminGetCourseInfoRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Iomad course settings (asynchronously)
     * Get Iomad course settings
     * @param blockIomadCompanyAdminGetCourseInfoRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blockIomadCompanyAdminGetCourseInfoAsync(BlockIomadCompanyAdminGetCourseInfoRequest blockIomadCompanyAdminGetCourseInfoRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = blockIomadCompanyAdminGetCourseInfoValidateBeforeCall(blockIomadCompanyAdminGetCourseInfoRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for blockIomadCompanyAdminGetDepartmentUsers
     * @param blockIomadCompanyAdminGetDepartmentUsersRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blockIomadCompanyAdminGetDepartmentUsersCall(BlockIomadCompanyAdminGetDepartmentUsersRequest blockIomadCompanyAdminGetDepartmentUsersRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = blockIomadCompanyAdminGetDepartmentUsersRequest;

        // create path and map variables
        String localVarPath = "/block_iomad_company_admin_get_department_users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call blockIomadCompanyAdminGetDepartmentUsersValidateBeforeCall(BlockIomadCompanyAdminGetDepartmentUsersRequest blockIomadCompanyAdminGetDepartmentUsersRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'blockIomadCompanyAdminGetDepartmentUsersRequest' is set
        if (blockIomadCompanyAdminGetDepartmentUsersRequest == null) {
            throw new ApiException("Missing the required parameter 'blockIomadCompanyAdminGetDepartmentUsersRequest' when calling blockIomadCompanyAdminGetDepartmentUsers(Async)");
        }

        return blockIomadCompanyAdminGetDepartmentUsersCall(blockIomadCompanyAdminGetDepartmentUsersRequest, _callback);

    }

    /**
     * Get users within a department
     * Get users within a department
     * @param blockIomadCompanyAdminGetDepartmentUsersRequest  (required)
     * @return BlockIomadCompanyAdminGetDepartmentUsers200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public BlockIomadCompanyAdminGetDepartmentUsers200Response blockIomadCompanyAdminGetDepartmentUsers(BlockIomadCompanyAdminGetDepartmentUsersRequest blockIomadCompanyAdminGetDepartmentUsersRequest) throws ApiException {
        ApiResponse<BlockIomadCompanyAdminGetDepartmentUsers200Response> localVarResp = blockIomadCompanyAdminGetDepartmentUsersWithHttpInfo(blockIomadCompanyAdminGetDepartmentUsersRequest);
        return localVarResp.getData();
    }

    /**
     * Get users within a department
     * Get users within a department
     * @param blockIomadCompanyAdminGetDepartmentUsersRequest  (required)
     * @return ApiResponse&lt;BlockIomadCompanyAdminGetDepartmentUsers200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BlockIomadCompanyAdminGetDepartmentUsers200Response> blockIomadCompanyAdminGetDepartmentUsersWithHttpInfo(BlockIomadCompanyAdminGetDepartmentUsersRequest blockIomadCompanyAdminGetDepartmentUsersRequest) throws ApiException {
        okhttp3.Call localVarCall = blockIomadCompanyAdminGetDepartmentUsersValidateBeforeCall(blockIomadCompanyAdminGetDepartmentUsersRequest, null);
        Type localVarReturnType = new TypeToken<BlockIomadCompanyAdminGetDepartmentUsers200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get users within a department (asynchronously)
     * Get users within a department
     * @param blockIomadCompanyAdminGetDepartmentUsersRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blockIomadCompanyAdminGetDepartmentUsersAsync(BlockIomadCompanyAdminGetDepartmentUsersRequest blockIomadCompanyAdminGetDepartmentUsersRequest, final ApiCallback<BlockIomadCompanyAdminGetDepartmentUsers200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = blockIomadCompanyAdminGetDepartmentUsersValidateBeforeCall(blockIomadCompanyAdminGetDepartmentUsersRequest, _callback);
        Type localVarReturnType = new TypeToken<BlockIomadCompanyAdminGetDepartmentUsers200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for blockIomadCompanyAdminGetDepartments
     * @param blockIomadCompanyAdminGetDepartmentsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blockIomadCompanyAdminGetDepartmentsCall(BlockIomadCompanyAdminGetDepartmentsRequest blockIomadCompanyAdminGetDepartmentsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = blockIomadCompanyAdminGetDepartmentsRequest;

        // create path and map variables
        String localVarPath = "/block_iomad_company_admin_get_departments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call blockIomadCompanyAdminGetDepartmentsValidateBeforeCall(BlockIomadCompanyAdminGetDepartmentsRequest blockIomadCompanyAdminGetDepartmentsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'blockIomadCompanyAdminGetDepartmentsRequest' is set
        if (blockIomadCompanyAdminGetDepartmentsRequest == null) {
            throw new ApiException("Missing the required parameter 'blockIomadCompanyAdminGetDepartmentsRequest' when calling blockIomadCompanyAdminGetDepartments(Async)");
        }

        return blockIomadCompanyAdminGetDepartmentsCall(blockIomadCompanyAdminGetDepartmentsRequest, _callback);

    }

    /**
     * Get all company departments
     * Get all company departments
     * @param blockIomadCompanyAdminGetDepartmentsRequest  (required)
     * @return BlockIomadCompanyAdminGetDepartments200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public BlockIomadCompanyAdminGetDepartments200Response blockIomadCompanyAdminGetDepartments(BlockIomadCompanyAdminGetDepartmentsRequest blockIomadCompanyAdminGetDepartmentsRequest) throws ApiException {
        ApiResponse<BlockIomadCompanyAdminGetDepartments200Response> localVarResp = blockIomadCompanyAdminGetDepartmentsWithHttpInfo(blockIomadCompanyAdminGetDepartmentsRequest);
        return localVarResp.getData();
    }

    /**
     * Get all company departments
     * Get all company departments
     * @param blockIomadCompanyAdminGetDepartmentsRequest  (required)
     * @return ApiResponse&lt;BlockIomadCompanyAdminGetDepartments200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BlockIomadCompanyAdminGetDepartments200Response> blockIomadCompanyAdminGetDepartmentsWithHttpInfo(BlockIomadCompanyAdminGetDepartmentsRequest blockIomadCompanyAdminGetDepartmentsRequest) throws ApiException {
        okhttp3.Call localVarCall = blockIomadCompanyAdminGetDepartmentsValidateBeforeCall(blockIomadCompanyAdminGetDepartmentsRequest, null);
        Type localVarReturnType = new TypeToken<BlockIomadCompanyAdminGetDepartments200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all company departments (asynchronously)
     * Get all company departments
     * @param blockIomadCompanyAdminGetDepartmentsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blockIomadCompanyAdminGetDepartmentsAsync(BlockIomadCompanyAdminGetDepartmentsRequest blockIomadCompanyAdminGetDepartmentsRequest, final ApiCallback<BlockIomadCompanyAdminGetDepartments200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = blockIomadCompanyAdminGetDepartmentsValidateBeforeCall(blockIomadCompanyAdminGetDepartmentsRequest, _callback);
        Type localVarReturnType = new TypeToken<BlockIomadCompanyAdminGetDepartments200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for blockIomadCompanyAdminGetLicenseFromId
     * @param blockIomadCompanyAdminGetLicenseFromIdRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blockIomadCompanyAdminGetLicenseFromIdCall(BlockIomadCompanyAdminGetLicenseFromIdRequest blockIomadCompanyAdminGetLicenseFromIdRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = blockIomadCompanyAdminGetLicenseFromIdRequest;

        // create path and map variables
        String localVarPath = "/block_iomad_company_admin_get_license_from_id";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call blockIomadCompanyAdminGetLicenseFromIdValidateBeforeCall(BlockIomadCompanyAdminGetLicenseFromIdRequest blockIomadCompanyAdminGetLicenseFromIdRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'blockIomadCompanyAdminGetLicenseFromIdRequest' is set
        if (blockIomadCompanyAdminGetLicenseFromIdRequest == null) {
            throw new ApiException("Missing the required parameter 'blockIomadCompanyAdminGetLicenseFromIdRequest' when calling blockIomadCompanyAdminGetLicenseFromId(Async)");
        }

        return blockIomadCompanyAdminGetLicenseFromIdCall(blockIomadCompanyAdminGetLicenseFromIdRequest, _callback);

    }

    /**
     * Get licence data give the ID
     * Get licence data give the ID
     * @param blockIomadCompanyAdminGetLicenseFromIdRequest  (required)
     * @return BlockIomadCompanyAdminGetLicenseFromId200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public BlockIomadCompanyAdminGetLicenseFromId200Response blockIomadCompanyAdminGetLicenseFromId(BlockIomadCompanyAdminGetLicenseFromIdRequest blockIomadCompanyAdminGetLicenseFromIdRequest) throws ApiException {
        ApiResponse<BlockIomadCompanyAdminGetLicenseFromId200Response> localVarResp = blockIomadCompanyAdminGetLicenseFromIdWithHttpInfo(blockIomadCompanyAdminGetLicenseFromIdRequest);
        return localVarResp.getData();
    }

    /**
     * Get licence data give the ID
     * Get licence data give the ID
     * @param blockIomadCompanyAdminGetLicenseFromIdRequest  (required)
     * @return ApiResponse&lt;BlockIomadCompanyAdminGetLicenseFromId200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BlockIomadCompanyAdminGetLicenseFromId200Response> blockIomadCompanyAdminGetLicenseFromIdWithHttpInfo(BlockIomadCompanyAdminGetLicenseFromIdRequest blockIomadCompanyAdminGetLicenseFromIdRequest) throws ApiException {
        okhttp3.Call localVarCall = blockIomadCompanyAdminGetLicenseFromIdValidateBeforeCall(blockIomadCompanyAdminGetLicenseFromIdRequest, null);
        Type localVarReturnType = new TypeToken<BlockIomadCompanyAdminGetLicenseFromId200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get licence data give the ID (asynchronously)
     * Get licence data give the ID
     * @param blockIomadCompanyAdminGetLicenseFromIdRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blockIomadCompanyAdminGetLicenseFromIdAsync(BlockIomadCompanyAdminGetLicenseFromIdRequest blockIomadCompanyAdminGetLicenseFromIdRequest, final ApiCallback<BlockIomadCompanyAdminGetLicenseFromId200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = blockIomadCompanyAdminGetLicenseFromIdValidateBeforeCall(blockIomadCompanyAdminGetLicenseFromIdRequest, _callback);
        Type localVarReturnType = new TypeToken<BlockIomadCompanyAdminGetLicenseFromId200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for blockIomadCompanyAdminGetLicenseInfo
     * @param blockIomadCompanyAdminGetLicenseInfoRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blockIomadCompanyAdminGetLicenseInfoCall(BlockIomadCompanyAdminGetLicenseInfoRequest blockIomadCompanyAdminGetLicenseInfoRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = blockIomadCompanyAdminGetLicenseInfoRequest;

        // create path and map variables
        String localVarPath = "/block_iomad_company_admin_get_license_info";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call blockIomadCompanyAdminGetLicenseInfoValidateBeforeCall(BlockIomadCompanyAdminGetLicenseInfoRequest blockIomadCompanyAdminGetLicenseInfoRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'blockIomadCompanyAdminGetLicenseInfoRequest' is set
        if (blockIomadCompanyAdminGetLicenseInfoRequest == null) {
            throw new ApiException("Missing the required parameter 'blockIomadCompanyAdminGetLicenseInfoRequest' when calling blockIomadCompanyAdminGetLicenseInfo(Async)");
        }

        return blockIomadCompanyAdminGetLicenseInfoCall(blockIomadCompanyAdminGetLicenseInfoRequest, _callback);

    }

    /**
     * Get company license information
     * Get company license information
     * @param blockIomadCompanyAdminGetLicenseInfoRequest  (required)
     * @return BlockIomadCompanyAdminGetLicenseInfo200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public BlockIomadCompanyAdminGetLicenseInfo200Response blockIomadCompanyAdminGetLicenseInfo(BlockIomadCompanyAdminGetLicenseInfoRequest blockIomadCompanyAdminGetLicenseInfoRequest) throws ApiException {
        ApiResponse<BlockIomadCompanyAdminGetLicenseInfo200Response> localVarResp = blockIomadCompanyAdminGetLicenseInfoWithHttpInfo(blockIomadCompanyAdminGetLicenseInfoRequest);
        return localVarResp.getData();
    }

    /**
     * Get company license information
     * Get company license information
     * @param blockIomadCompanyAdminGetLicenseInfoRequest  (required)
     * @return ApiResponse&lt;BlockIomadCompanyAdminGetLicenseInfo200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BlockIomadCompanyAdminGetLicenseInfo200Response> blockIomadCompanyAdminGetLicenseInfoWithHttpInfo(BlockIomadCompanyAdminGetLicenseInfoRequest blockIomadCompanyAdminGetLicenseInfoRequest) throws ApiException {
        okhttp3.Call localVarCall = blockIomadCompanyAdminGetLicenseInfoValidateBeforeCall(blockIomadCompanyAdminGetLicenseInfoRequest, null);
        Type localVarReturnType = new TypeToken<BlockIomadCompanyAdminGetLicenseInfo200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get company license information (asynchronously)
     * Get company license information
     * @param blockIomadCompanyAdminGetLicenseInfoRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blockIomadCompanyAdminGetLicenseInfoAsync(BlockIomadCompanyAdminGetLicenseInfoRequest blockIomadCompanyAdminGetLicenseInfoRequest, final ApiCallback<BlockIomadCompanyAdminGetLicenseInfo200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = blockIomadCompanyAdminGetLicenseInfoValidateBeforeCall(blockIomadCompanyAdminGetLicenseInfoRequest, _callback);
        Type localVarReturnType = new TypeToken<BlockIomadCompanyAdminGetLicenseInfo200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for blockIomadCompanyAdminMoveUsers
     * @param blockIomadCompanyAdminMoveUsersRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success or failure </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blockIomadCompanyAdminMoveUsersCall(BlockIomadCompanyAdminMoveUsersRequest blockIomadCompanyAdminMoveUsersRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = blockIomadCompanyAdminMoveUsersRequest;

        // create path and map variables
        String localVarPath = "/block_iomad_company_admin_move_users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call blockIomadCompanyAdminMoveUsersValidateBeforeCall(BlockIomadCompanyAdminMoveUsersRequest blockIomadCompanyAdminMoveUsersRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'blockIomadCompanyAdminMoveUsersRequest' is set
        if (blockIomadCompanyAdminMoveUsersRequest == null) {
            throw new ApiException("Missing the required parameter 'blockIomadCompanyAdminMoveUsersRequest' when calling blockIomadCompanyAdminMoveUsers(Async)");
        }

        return blockIomadCompanyAdminMoveUsersCall(blockIomadCompanyAdminMoveUsersRequest, _callback);

    }

    /**
     * Move users between departments
     * Move users between departments
     * @param blockIomadCompanyAdminMoveUsersRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success or failure </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object blockIomadCompanyAdminMoveUsers(BlockIomadCompanyAdminMoveUsersRequest blockIomadCompanyAdminMoveUsersRequest) throws ApiException {
        ApiResponse<Object> localVarResp = blockIomadCompanyAdminMoveUsersWithHttpInfo(blockIomadCompanyAdminMoveUsersRequest);
        return localVarResp.getData();
    }

    /**
     * Move users between departments
     * Move users between departments
     * @param blockIomadCompanyAdminMoveUsersRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success or failure </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> blockIomadCompanyAdminMoveUsersWithHttpInfo(BlockIomadCompanyAdminMoveUsersRequest blockIomadCompanyAdminMoveUsersRequest) throws ApiException {
        okhttp3.Call localVarCall = blockIomadCompanyAdminMoveUsersValidateBeforeCall(blockIomadCompanyAdminMoveUsersRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Move users between departments (asynchronously)
     * Move users between departments
     * @param blockIomadCompanyAdminMoveUsersRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success or failure </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blockIomadCompanyAdminMoveUsersAsync(BlockIomadCompanyAdminMoveUsersRequest blockIomadCompanyAdminMoveUsersRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = blockIomadCompanyAdminMoveUsersValidateBeforeCall(blockIomadCompanyAdminMoveUsersRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for blockIomadCompanyAdminRestrictCapability
     * @param blockIomadCompanyAdminRestrictCapabilityRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True capability update succeeds </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blockIomadCompanyAdminRestrictCapabilityCall(BlockIomadCompanyAdminRestrictCapabilityRequest blockIomadCompanyAdminRestrictCapabilityRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = blockIomadCompanyAdminRestrictCapabilityRequest;

        // create path and map variables
        String localVarPath = "/block_iomad_company_admin_restrict_capability";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call blockIomadCompanyAdminRestrictCapabilityValidateBeforeCall(BlockIomadCompanyAdminRestrictCapabilityRequest blockIomadCompanyAdminRestrictCapabilityRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'blockIomadCompanyAdminRestrictCapabilityRequest' is set
        if (blockIomadCompanyAdminRestrictCapabilityRequest == null) {
            throw new ApiException("Missing the required parameter 'blockIomadCompanyAdminRestrictCapabilityRequest' when calling blockIomadCompanyAdminRestrictCapability(Async)");
        }

        return blockIomadCompanyAdminRestrictCapabilityCall(blockIomadCompanyAdminRestrictCapabilityRequest, _callback);

    }

    /**
     * set/reset Iomad capability
     * set/reset Iomad capability
     * @param blockIomadCompanyAdminRestrictCapabilityRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True capability update succeeds </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object blockIomadCompanyAdminRestrictCapability(BlockIomadCompanyAdminRestrictCapabilityRequest blockIomadCompanyAdminRestrictCapabilityRequest) throws ApiException {
        ApiResponse<Object> localVarResp = blockIomadCompanyAdminRestrictCapabilityWithHttpInfo(blockIomadCompanyAdminRestrictCapabilityRequest);
        return localVarResp.getData();
    }

    /**
     * set/reset Iomad capability
     * set/reset Iomad capability
     * @param blockIomadCompanyAdminRestrictCapabilityRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True capability update succeeds </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> blockIomadCompanyAdminRestrictCapabilityWithHttpInfo(BlockIomadCompanyAdminRestrictCapabilityRequest blockIomadCompanyAdminRestrictCapabilityRequest) throws ApiException {
        okhttp3.Call localVarCall = blockIomadCompanyAdminRestrictCapabilityValidateBeforeCall(blockIomadCompanyAdminRestrictCapabilityRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * set/reset Iomad capability (asynchronously)
     * set/reset Iomad capability
     * @param blockIomadCompanyAdminRestrictCapabilityRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True capability update succeeds </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blockIomadCompanyAdminRestrictCapabilityAsync(BlockIomadCompanyAdminRestrictCapabilityRequest blockIomadCompanyAdminRestrictCapabilityRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = blockIomadCompanyAdminRestrictCapabilityValidateBeforeCall(blockIomadCompanyAdminRestrictCapabilityRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for blockIomadCompanyAdminSyncUsers
     * @param blockIomadCompanyAdminSyncUsersRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blockIomadCompanyAdminSyncUsersCall(BlockIomadCompanyAdminSyncUsersRequest blockIomadCompanyAdminSyncUsersRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = blockIomadCompanyAdminSyncUsersRequest;

        // create path and map variables
        String localVarPath = "/block_iomad_company_admin_sync_users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call blockIomadCompanyAdminSyncUsersValidateBeforeCall(BlockIomadCompanyAdminSyncUsersRequest blockIomadCompanyAdminSyncUsersRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'blockIomadCompanyAdminSyncUsersRequest' is set
        if (blockIomadCompanyAdminSyncUsersRequest == null) {
            throw new ApiException("Missing the required parameter 'blockIomadCompanyAdminSyncUsersRequest' when calling blockIomadCompanyAdminSyncUsers(Async)");
        }

        return blockIomadCompanyAdminSyncUsersCall(blockIomadCompanyAdminSyncUsersRequest, _callback);

    }

    /**
     * Call update users to sync to external system
     * Call update users to sync to external system
     * @param blockIomadCompanyAdminSyncUsersRequest  (required)
     * @return BlockIomadCompanyAdminSyncUsers200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public BlockIomadCompanyAdminSyncUsers200Response blockIomadCompanyAdminSyncUsers(BlockIomadCompanyAdminSyncUsersRequest blockIomadCompanyAdminSyncUsersRequest) throws ApiException {
        ApiResponse<BlockIomadCompanyAdminSyncUsers200Response> localVarResp = blockIomadCompanyAdminSyncUsersWithHttpInfo(blockIomadCompanyAdminSyncUsersRequest);
        return localVarResp.getData();
    }

    /**
     * Call update users to sync to external system
     * Call update users to sync to external system
     * @param blockIomadCompanyAdminSyncUsersRequest  (required)
     * @return ApiResponse&lt;BlockIomadCompanyAdminSyncUsers200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BlockIomadCompanyAdminSyncUsers200Response> blockIomadCompanyAdminSyncUsersWithHttpInfo(BlockIomadCompanyAdminSyncUsersRequest blockIomadCompanyAdminSyncUsersRequest) throws ApiException {
        okhttp3.Call localVarCall = blockIomadCompanyAdminSyncUsersValidateBeforeCall(blockIomadCompanyAdminSyncUsersRequest, null);
        Type localVarReturnType = new TypeToken<BlockIomadCompanyAdminSyncUsers200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Call update users to sync to external system (asynchronously)
     * Call update users to sync to external system
     * @param blockIomadCompanyAdminSyncUsersRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blockIomadCompanyAdminSyncUsersAsync(BlockIomadCompanyAdminSyncUsersRequest blockIomadCompanyAdminSyncUsersRequest, final ApiCallback<BlockIomadCompanyAdminSyncUsers200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = blockIomadCompanyAdminSyncUsersValidateBeforeCall(blockIomadCompanyAdminSyncUsersRequest, _callback);
        Type localVarReturnType = new TypeToken<BlockIomadCompanyAdminSyncUsers200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for blockIomadCompanyAdminUnallocateLicenses
     * @param blockIomadCompanyAdminUnallocateLicensesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success or failure </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blockIomadCompanyAdminUnallocateLicensesCall(BlockIomadCompanyAdminUnallocateLicensesRequest blockIomadCompanyAdminUnallocateLicensesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = blockIomadCompanyAdminUnallocateLicensesRequest;

        // create path and map variables
        String localVarPath = "/block_iomad_company_admin_unallocate_licenses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call blockIomadCompanyAdminUnallocateLicensesValidateBeforeCall(BlockIomadCompanyAdminUnallocateLicensesRequest blockIomadCompanyAdminUnallocateLicensesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'blockIomadCompanyAdminUnallocateLicensesRequest' is set
        if (blockIomadCompanyAdminUnallocateLicensesRequest == null) {
            throw new ApiException("Missing the required parameter 'blockIomadCompanyAdminUnallocateLicensesRequest' when calling blockIomadCompanyAdminUnallocateLicenses(Async)");
        }

        return blockIomadCompanyAdminUnallocateLicensesCall(blockIomadCompanyAdminUnallocateLicensesRequest, _callback);

    }

    /**
     * Remove course licenses from users
     * Remove course licenses from users
     * @param blockIomadCompanyAdminUnallocateLicensesRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success or failure </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object blockIomadCompanyAdminUnallocateLicenses(BlockIomadCompanyAdminUnallocateLicensesRequest blockIomadCompanyAdminUnallocateLicensesRequest) throws ApiException {
        ApiResponse<Object> localVarResp = blockIomadCompanyAdminUnallocateLicensesWithHttpInfo(blockIomadCompanyAdminUnallocateLicensesRequest);
        return localVarResp.getData();
    }

    /**
     * Remove course licenses from users
     * Remove course licenses from users
     * @param blockIomadCompanyAdminUnallocateLicensesRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success or failure </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> blockIomadCompanyAdminUnallocateLicensesWithHttpInfo(BlockIomadCompanyAdminUnallocateLicensesRequest blockIomadCompanyAdminUnallocateLicensesRequest) throws ApiException {
        okhttp3.Call localVarCall = blockIomadCompanyAdminUnallocateLicensesValidateBeforeCall(blockIomadCompanyAdminUnallocateLicensesRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove course licenses from users (asynchronously)
     * Remove course licenses from users
     * @param blockIomadCompanyAdminUnallocateLicensesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success or failure </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blockIomadCompanyAdminUnallocateLicensesAsync(BlockIomadCompanyAdminUnallocateLicensesRequest blockIomadCompanyAdminUnallocateLicensesRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = blockIomadCompanyAdminUnallocateLicensesValidateBeforeCall(blockIomadCompanyAdminUnallocateLicensesRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for blockIomadCompanyAdminUnassignCourses
     * @param blockIomadCompanyAdminUnassignCoursesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success or failure </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blockIomadCompanyAdminUnassignCoursesCall(BlockIomadCompanyAdminUnassignCoursesRequest blockIomadCompanyAdminUnassignCoursesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = blockIomadCompanyAdminUnassignCoursesRequest;

        // create path and map variables
        String localVarPath = "/block_iomad_company_admin_unassign_courses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call blockIomadCompanyAdminUnassignCoursesValidateBeforeCall(BlockIomadCompanyAdminUnassignCoursesRequest blockIomadCompanyAdminUnassignCoursesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'blockIomadCompanyAdminUnassignCoursesRequest' is set
        if (blockIomadCompanyAdminUnassignCoursesRequest == null) {
            throw new ApiException("Missing the required parameter 'blockIomadCompanyAdminUnassignCoursesRequest' when calling blockIomadCompanyAdminUnassignCourses(Async)");
        }

        return blockIomadCompanyAdminUnassignCoursesCall(blockIomadCompanyAdminUnassignCoursesRequest, _callback);

    }

    /**
     * Unassign a course from a company
     * Unassign a course from a company
     * @param blockIomadCompanyAdminUnassignCoursesRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success or failure </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object blockIomadCompanyAdminUnassignCourses(BlockIomadCompanyAdminUnassignCoursesRequest blockIomadCompanyAdminUnassignCoursesRequest) throws ApiException {
        ApiResponse<Object> localVarResp = blockIomadCompanyAdminUnassignCoursesWithHttpInfo(blockIomadCompanyAdminUnassignCoursesRequest);
        return localVarResp.getData();
    }

    /**
     * Unassign a course from a company
     * Unassign a course from a company
     * @param blockIomadCompanyAdminUnassignCoursesRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success or failure </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> blockIomadCompanyAdminUnassignCoursesWithHttpInfo(BlockIomadCompanyAdminUnassignCoursesRequest blockIomadCompanyAdminUnassignCoursesRequest) throws ApiException {
        okhttp3.Call localVarCall = blockIomadCompanyAdminUnassignCoursesValidateBeforeCall(blockIomadCompanyAdminUnassignCoursesRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Unassign a course from a company (asynchronously)
     * Unassign a course from a company
     * @param blockIomadCompanyAdminUnassignCoursesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success or failure </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blockIomadCompanyAdminUnassignCoursesAsync(BlockIomadCompanyAdminUnassignCoursesRequest blockIomadCompanyAdminUnassignCoursesRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = blockIomadCompanyAdminUnassignCoursesValidateBeforeCall(blockIomadCompanyAdminUnassignCoursesRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for blockIomadCompanyAdminUnassignUsers
     * @param blockIomadCompanyAdminUnassignUsersRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success or failure </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blockIomadCompanyAdminUnassignUsersCall(BlockIomadCompanyAdminUnassignUsersRequest blockIomadCompanyAdminUnassignUsersRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = blockIomadCompanyAdminUnassignUsersRequest;

        // create path and map variables
        String localVarPath = "/block_iomad_company_admin_unassign_users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call blockIomadCompanyAdminUnassignUsersValidateBeforeCall(BlockIomadCompanyAdminUnassignUsersRequest blockIomadCompanyAdminUnassignUsersRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'blockIomadCompanyAdminUnassignUsersRequest' is set
        if (blockIomadCompanyAdminUnassignUsersRequest == null) {
            throw new ApiException("Missing the required parameter 'blockIomadCompanyAdminUnassignUsersRequest' when calling blockIomadCompanyAdminUnassignUsers(Async)");
        }

        return blockIomadCompanyAdminUnassignUsersCall(blockIomadCompanyAdminUnassignUsersRequest, _callback);

    }

    /**
     * Unassign users from a company
     * Unassign users from a company
     * @param blockIomadCompanyAdminUnassignUsersRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success or failure </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object blockIomadCompanyAdminUnassignUsers(BlockIomadCompanyAdminUnassignUsersRequest blockIomadCompanyAdminUnassignUsersRequest) throws ApiException {
        ApiResponse<Object> localVarResp = blockIomadCompanyAdminUnassignUsersWithHttpInfo(blockIomadCompanyAdminUnassignUsersRequest);
        return localVarResp.getData();
    }

    /**
     * Unassign users from a company
     * Unassign users from a company
     * @param blockIomadCompanyAdminUnassignUsersRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success or failure </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> blockIomadCompanyAdminUnassignUsersWithHttpInfo(BlockIomadCompanyAdminUnassignUsersRequest blockIomadCompanyAdminUnassignUsersRequest) throws ApiException {
        okhttp3.Call localVarCall = blockIomadCompanyAdminUnassignUsersValidateBeforeCall(blockIomadCompanyAdminUnassignUsersRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Unassign users from a company (asynchronously)
     * Unassign users from a company
     * @param blockIomadCompanyAdminUnassignUsersRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success or failure </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blockIomadCompanyAdminUnassignUsersAsync(BlockIomadCompanyAdminUnassignUsersRequest blockIomadCompanyAdminUnassignUsersRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = blockIomadCompanyAdminUnassignUsersValidateBeforeCall(blockIomadCompanyAdminUnassignUsersRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for blockIomadCompanyAdminUpdateCourses
     * @param blockIomadCompanyAdminUpdateCoursesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success or failure </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blockIomadCompanyAdminUpdateCoursesCall(BlockIomadCompanyAdminUpdateCoursesRequest blockIomadCompanyAdminUpdateCoursesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = blockIomadCompanyAdminUpdateCoursesRequest;

        // create path and map variables
        String localVarPath = "/block_iomad_company_admin_update_courses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call blockIomadCompanyAdminUpdateCoursesValidateBeforeCall(BlockIomadCompanyAdminUpdateCoursesRequest blockIomadCompanyAdminUpdateCoursesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'blockIomadCompanyAdminUpdateCoursesRequest' is set
        if (blockIomadCompanyAdminUpdateCoursesRequest == null) {
            throw new ApiException("Missing the required parameter 'blockIomadCompanyAdminUpdateCoursesRequest' when calling blockIomadCompanyAdminUpdateCourses(Async)");
        }

        return blockIomadCompanyAdminUpdateCoursesCall(blockIomadCompanyAdminUpdateCoursesRequest, _callback);

    }

    /**
     * Update Iomad course settings
     * Update Iomad course settings
     * @param blockIomadCompanyAdminUpdateCoursesRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success or failure </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object blockIomadCompanyAdminUpdateCourses(BlockIomadCompanyAdminUpdateCoursesRequest blockIomadCompanyAdminUpdateCoursesRequest) throws ApiException {
        ApiResponse<Object> localVarResp = blockIomadCompanyAdminUpdateCoursesWithHttpInfo(blockIomadCompanyAdminUpdateCoursesRequest);
        return localVarResp.getData();
    }

    /**
     * Update Iomad course settings
     * Update Iomad course settings
     * @param blockIomadCompanyAdminUpdateCoursesRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success or failure </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> blockIomadCompanyAdminUpdateCoursesWithHttpInfo(BlockIomadCompanyAdminUpdateCoursesRequest blockIomadCompanyAdminUpdateCoursesRequest) throws ApiException {
        okhttp3.Call localVarCall = blockIomadCompanyAdminUpdateCoursesValidateBeforeCall(blockIomadCompanyAdminUpdateCoursesRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Iomad course settings (asynchronously)
     * Update Iomad course settings
     * @param blockIomadCompanyAdminUpdateCoursesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success or failure </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blockIomadCompanyAdminUpdateCoursesAsync(BlockIomadCompanyAdminUpdateCoursesRequest blockIomadCompanyAdminUpdateCoursesRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = blockIomadCompanyAdminUpdateCoursesValidateBeforeCall(blockIomadCompanyAdminUpdateCoursesRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
