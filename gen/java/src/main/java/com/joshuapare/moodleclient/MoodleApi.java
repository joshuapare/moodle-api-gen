/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.joshuapare.moodleclient;

import com.joshuapare.ApiCallback;
import com.joshuapare.ApiClient;
import com.joshuapare.ApiException;
import com.joshuapare.ApiResponse;
import com.joshuapare.Configuration;
import com.joshuapare.Pair;
import com.joshuapare.ProgressRequestBody;
import com.joshuapare.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CoreAdminSetBlockProtectionRequest;
import org.openapitools.client.model.CoreAdminSetPluginOrderRequest;
import org.openapitools.client.model.CoreAdminSetPluginStateRequest;
import org.openapitools.client.model.CoreAuthConfirmUser200Response;
import org.openapitools.client.model.CoreAuthConfirmUserRequest;
import org.openapitools.client.model.CoreAuthIsAgeDigitalConsentVerificationEnabled200Response;
import org.openapitools.client.model.CoreAuthIsMinor200Response;
import org.openapitools.client.model.CoreAuthIsMinorRequest;
import org.openapitools.client.model.CoreAuthRequestPasswordReset200Response;
import org.openapitools.client.model.CoreAuthRequestPasswordResetRequest;
import org.openapitools.client.model.CoreAuthResendConfirmationEmail200Response;
import org.openapitools.client.model.CoreAuthResendConfirmationEmailRequest;
import org.openapitools.client.model.CoreBackupGetAsyncBackupLinksBackup200Response;
import org.openapitools.client.model.CoreBackupGetAsyncBackupLinksBackupRequest;
import org.openapitools.client.model.CoreBackupGetAsyncBackupLinksRestore200Response;
import org.openapitools.client.model.CoreBackupGetAsyncBackupLinksRestoreRequest;
import org.openapitools.client.model.CoreBackupGetAsyncBackupProgressRequest;
import org.openapitools.client.model.CoreBackupGetCopyProgressRequest;
import org.openapitools.client.model.CoreBackupSubmitCopyFormRequest;
import org.openapitools.client.model.CoreBadgesGetUserBadgeByHash200Response;
import org.openapitools.client.model.CoreBadgesGetUserBadgeByHashRequest;
import org.openapitools.client.model.CoreBadgesGetUserBadges200Response;
import org.openapitools.client.model.CoreBadgesGetUserBadgesRequest;
import org.openapitools.client.model.CoreBlockFetchAddableBlocksRequest;
import org.openapitools.client.model.CoreBlockGetCourseBlocks200Response;
import org.openapitools.client.model.CoreBlockGetCourseBlocksRequest;
import org.openapitools.client.model.CoreBlockGetDashboardBlocks200Response;
import org.openapitools.client.model.CoreBlockGetDashboardBlocksRequest;
import org.openapitools.client.model.CoreBlogGetEntries200Response;
import org.openapitools.client.model.CoreBlogGetEntriesRequest;
import org.openapitools.client.model.CoreBlogViewEntries200Response;
import org.openapitools.client.model.CoreBlogViewEntriesRequest;
import org.openapitools.client.model.CoreCalendarCreateCalendarEvents200Response;
import org.openapitools.client.model.CoreCalendarCreateCalendarEventsRequest;
import org.openapitools.client.model.CoreCalendarDeleteCalendarEventsRequest;
import org.openapitools.client.model.CoreCalendarDeleteSubscription200Response;
import org.openapitools.client.model.CoreCalendarDeleteSubscriptionRequest;
import org.openapitools.client.model.CoreCalendarGetActionEventsByCourse200Response;
import org.openapitools.client.model.CoreCalendarGetActionEventsByCourseRequest;
import org.openapitools.client.model.CoreCalendarGetActionEventsByCourses200Response;
import org.openapitools.client.model.CoreCalendarGetActionEventsByCoursesRequest;
import org.openapitools.client.model.CoreCalendarGetActionEventsByTimesort200Response;
import org.openapitools.client.model.CoreCalendarGetActionEventsByTimesortRequest;
import org.openapitools.client.model.CoreCalendarGetAllowedEventTypes200Response;
import org.openapitools.client.model.CoreCalendarGetAllowedEventTypesRequest;
import org.openapitools.client.model.CoreCalendarGetCalendarAccessInformation200Response;
import org.openapitools.client.model.CoreCalendarGetCalendarAccessInformationRequest;
import org.openapitools.client.model.CoreCalendarGetCalendarDayView200Response;
import org.openapitools.client.model.CoreCalendarGetCalendarDayViewRequest;
import org.openapitools.client.model.CoreCalendarGetCalendarEventById200Response;
import org.openapitools.client.model.CoreCalendarGetCalendarEventByIdRequest;
import org.openapitools.client.model.CoreCalendarGetCalendarEvents200Response;
import org.openapitools.client.model.CoreCalendarGetCalendarEventsRequest;
import org.openapitools.client.model.CoreCalendarGetCalendarExportToken200Response;
import org.openapitools.client.model.CoreCalendarGetCalendarMonthlyView200Response;
import org.openapitools.client.model.CoreCalendarGetCalendarMonthlyViewRequest;
import org.openapitools.client.model.CoreCalendarGetCalendarUpcomingView200Response;
import org.openapitools.client.model.CoreCalendarGetCalendarUpcomingViewRequest;
import org.openapitools.client.model.CoreCalendarGetTimestamps200Response;
import org.openapitools.client.model.CoreCalendarGetTimestampsRequest;
import org.openapitools.client.model.CoreCalendarSubmitCreateUpdateForm200Response;
import org.openapitools.client.model.CoreCalendarSubmitCreateUpdateFormRequest;
import org.openapitools.client.model.CoreCalendarUpdateEventStartDay200Response;
import org.openapitools.client.model.CoreCalendarUpdateEventStartDayRequest;
import org.openapitools.client.model.CoreChangeEditmode200Response;
import org.openapitools.client.model.CoreChangeEditmodeRequest;
import org.openapitools.client.model.CoreCohortAddCohortMembers200Response;
import org.openapitools.client.model.CoreCohortAddCohortMembersRequest;
import org.openapitools.client.model.CoreCohortCreateCohortsRequest;
import org.openapitools.client.model.CoreCohortDeleteCohortMembersRequest;
import org.openapitools.client.model.CoreCohortDeleteCohortsRequest;
import org.openapitools.client.model.CoreCohortGetCohortMembersRequest;
import org.openapitools.client.model.CoreCohortGetCohortsRequest;
import org.openapitools.client.model.CoreCohortSearchCohorts200Response;
import org.openapitools.client.model.CoreCohortSearchCohortsRequest;
import org.openapitools.client.model.CoreCohortUpdateCohortsRequest;
import org.openapitools.client.model.CoreCommentAddCommentsRequest;
import org.openapitools.client.model.CoreCommentDeleteCommentsRequest;
import org.openapitools.client.model.CoreCommentGetComments200Response;
import org.openapitools.client.model.CoreCommentGetCommentsRequest;
import org.openapitools.client.model.CoreCompetencyAddCompetencyToCourseRequest;
import org.openapitools.client.model.CoreCompetencyAddCompetencyToPlanRequest;
import org.openapitools.client.model.CoreCompetencyAddCompetencyToTemplateRequest;
import org.openapitools.client.model.CoreCompetencyAddRelatedCompetencyRequest;
import org.openapitools.client.model.CoreCompetencyApprovePlanRequest;
import org.openapitools.client.model.CoreCompetencyCompetencyFrameworkViewedRequest;
import org.openapitools.client.model.CoreCompetencyCompetencyViewedRequest;
import org.openapitools.client.model.CoreCompetencyCompletePlanRequest;
import org.openapitools.client.model.CoreCompetencyCountCompetenciesInCourseRequest;
import org.openapitools.client.model.CoreCompetencyCountCompetenciesInTemplateRequest;
import org.openapitools.client.model.CoreCompetencyCountCompetenciesRequest;
import org.openapitools.client.model.CoreCompetencyCountCompetencyFrameworksRequest;
import org.openapitools.client.model.CoreCompetencyCountCourseModuleCompetenciesRequest;
import org.openapitools.client.model.CoreCompetencyCreateCompetency200Response;
import org.openapitools.client.model.CoreCompetencyCreateCompetencyFramework200Response;
import org.openapitools.client.model.CoreCompetencyCreateCompetencyFrameworkRequest;
import org.openapitools.client.model.CoreCompetencyCreateCompetencyRequest;
import org.openapitools.client.model.CoreCompetencyCreatePlan200Response;
import org.openapitools.client.model.CoreCompetencyCreatePlanRequest;
import org.openapitools.client.model.CoreCompetencyCreateTemplate200Response;
import org.openapitools.client.model.CoreCompetencyCreateTemplateRequest;
import org.openapitools.client.model.CoreCompetencyCreateUserEvidenceCompetency200Response;
import org.openapitools.client.model.CoreCompetencyCreateUserEvidenceCompetencyRequest;
import org.openapitools.client.model.CoreCompetencyDeleteCompetencyFrameworkRequest;
import org.openapitools.client.model.CoreCompetencyDeleteCompetencyRequest;
import org.openapitools.client.model.CoreCompetencyDeleteEvidenceRequest;
import org.openapitools.client.model.CoreCompetencyDeletePlanRequest;
import org.openapitools.client.model.CoreCompetencyDeleteTemplateRequest;
import org.openapitools.client.model.CoreCompetencyDeleteUserEvidenceCompetencyRequest;
import org.openapitools.client.model.CoreCompetencyDeleteUserEvidenceRequest;
import org.openapitools.client.model.CoreCompetencyDuplicateCompetencyFramework200Response;
import org.openapitools.client.model.CoreCompetencyDuplicateCompetencyFrameworkRequest;
import org.openapitools.client.model.CoreCompetencyGetScaleValuesRequest;
import org.openapitools.client.model.CoreCompetencyGradeCompetency200Response;
import org.openapitools.client.model.CoreCompetencyGradeCompetencyInCourse200Response;
import org.openapitools.client.model.CoreCompetencyGradeCompetencyInCourseRequest;
import org.openapitools.client.model.CoreCompetencyGradeCompetencyInPlanRequest;
import org.openapitools.client.model.CoreCompetencyGradeCompetencyRequest;
import org.openapitools.client.model.CoreCompetencyListCompetenciesRequest;
import org.openapitools.client.model.CoreCompetencyListCompetencyFrameworksRequest;
import org.openapitools.client.model.CoreCompetencyListCourseModuleCompetenciesRequest;
import org.openapitools.client.model.CoreCompetencyListPlanCompetenciesRequest;
import org.openapitools.client.model.CoreCompetencyListTemplatesRequest;
import org.openapitools.client.model.CoreCompetencyListUserPlansRequest;
import org.openapitools.client.model.CoreCompetencyPlanCancelReviewRequestRequest;
import org.openapitools.client.model.CoreCompetencyReadCompetencyRequest;
import org.openapitools.client.model.CoreCompetencyReadPlan200Response;
import org.openapitools.client.model.CoreCompetencyReadPlanRequest;
import org.openapitools.client.model.CoreCompetencyReadTemplateRequest;
import org.openapitools.client.model.CoreCompetencyReadUserEvidence200Response;
import org.openapitools.client.model.CoreCompetencyRemoveCompetencyFromCourseRequest;
import org.openapitools.client.model.CoreCompetencyRemoveCompetencyFromPlanRequest;
import org.openapitools.client.model.CoreCompetencyRemoveCompetencyFromTemplateRequest;
import org.openapitools.client.model.CoreCompetencyRemoveRelatedCompetencyRequest;
import org.openapitools.client.model.CoreCompetencyReorderCourseCompetencyRequest;
import org.openapitools.client.model.CoreCompetencyReorderPlanCompetencyRequest;
import org.openapitools.client.model.CoreCompetencyReorderTemplateCompetencyRequest;
import org.openapitools.client.model.CoreCompetencySearchCompetenciesRequest;
import org.openapitools.client.model.CoreCompetencySetCourseCompetencyRuleoutcomeRequest;
import org.openapitools.client.model.CoreCompetencySetParentCompetencyRequest;
import org.openapitools.client.model.CoreCompetencyUnlinkPlanFromTemplateRequest;
import org.openapitools.client.model.CoreCompetencyUpdateCompetencyFrameworkRequest;
import org.openapitools.client.model.CoreCompetencyUpdateCompetencyRequest;
import org.openapitools.client.model.CoreCompetencyUpdateCourseCompetencySettingsRequest;
import org.openapitools.client.model.CoreCompetencyUpdatePlanRequest;
import org.openapitools.client.model.CoreCompetencyUpdateTemplateRequest;
import org.openapitools.client.model.CoreCompetencyUserCompetencyCancelReviewRequestRequest;
import org.openapitools.client.model.CoreCompetencyUserCompetencyPlanViewedRequest;
import org.openapitools.client.model.CoreCompetencyUserCompetencyRequestReviewRequest;
import org.openapitools.client.model.CoreCompetencyUserCompetencyViewedInCourseRequest;
import org.openapitools.client.model.CoreCompetencyUserCompetencyViewedRequest;
import org.openapitools.client.model.CoreCompletionGetActivitiesCompletionStatus200Response;
import org.openapitools.client.model.CoreCompletionGetActivitiesCompletionStatusRequest;
import org.openapitools.client.model.CoreCompletionGetCourseCompletionStatus200Response;
import org.openapitools.client.model.CoreCompletionMarkCourseSelfCompleted200Response;
import org.openapitools.client.model.CoreCompletionMarkCourseSelfCompletedRequest;
import org.openapitools.client.model.CoreCompletionOverrideActivityCompletionStatus200Response;
import org.openapitools.client.model.CoreCompletionOverrideActivityCompletionStatusRequest;
import org.openapitools.client.model.CoreCompletionUpdateActivityCompletionStatusManually200Response;
import org.openapitools.client.model.CoreCompletionUpdateActivityCompletionStatusManuallyRequest;
import org.openapitools.client.model.CoreContentbankCopyContent200Response;
import org.openapitools.client.model.CoreContentbankCopyContentRequest;
import org.openapitools.client.model.CoreContentbankDeleteContent200Response;
import org.openapitools.client.model.CoreContentbankDeleteContentRequest;
import org.openapitools.client.model.CoreContentbankRenameContent200Response;
import org.openapitools.client.model.CoreContentbankRenameContentRequest;
import org.openapitools.client.model.CoreContentbankSetContentVisibilityRequest;
import org.openapitools.client.model.CoreCourseAddContentItemToUserFavourites200Response;
import org.openapitools.client.model.CoreCourseAddContentItemToUserFavouritesRequest;
import org.openapitools.client.model.CoreCourseCheckUpdates200Response;
import org.openapitools.client.model.CoreCourseCheckUpdatesRequest;
import org.openapitools.client.model.CoreCourseCreateCategoriesRequest;
import org.openapitools.client.model.CoreCourseCreateCoursesRequest;
import org.openapitools.client.model.CoreCourseDeleteCategoriesRequest;
import org.openapitools.client.model.CoreCourseDeleteCoursesRequest;
import org.openapitools.client.model.CoreCourseDeleteModulesRequest;
import org.openapitools.client.model.CoreCourseDuplicateCourse200Response;
import org.openapitools.client.model.CoreCourseDuplicateCourseRequest;
import org.openapitools.client.model.CoreCourseEditModuleRequest;
import org.openapitools.client.model.CoreCourseEditSectionRequest;
import org.openapitools.client.model.CoreCourseGetActivityChooserFooter200Response;
import org.openapitools.client.model.CoreCourseGetActivityChooserFooterRequest;
import org.openapitools.client.model.CoreCourseGetCategoriesRequest;
import org.openapitools.client.model.CoreCourseGetContentsRequest;
import org.openapitools.client.model.CoreCourseGetCourseContentItems200Response;
import org.openapitools.client.model.CoreCourseGetCourseContentItemsRequest;
import org.openapitools.client.model.CoreCourseGetCourseModule200Response;
import org.openapitools.client.model.CoreCourseGetCourseModuleByInstance200Response;
import org.openapitools.client.model.CoreCourseGetCourseModuleByInstanceRequest;
import org.openapitools.client.model.CoreCourseGetCoursesByField200Response;
import org.openapitools.client.model.CoreCourseGetCoursesByFieldRequest;
import org.openapitools.client.model.CoreCourseGetCoursesRequest;
import org.openapitools.client.model.CoreCourseGetEnrolledCoursesByTimelineClassification200Response;
import org.openapitools.client.model.CoreCourseGetEnrolledCoursesByTimelineClassificationRequest;
import org.openapitools.client.model.CoreCourseGetEnrolledCoursesWithActionEventsByTimelineClassification200Response;
import org.openapitools.client.model.CoreCourseGetEnrolledCoursesWithActionEventsByTimelineClassificationRequest;
import org.openapitools.client.model.CoreCourseGetEnrolledUsersByCmid200Response;
import org.openapitools.client.model.CoreCourseGetEnrolledUsersByCmidRequest;
import org.openapitools.client.model.CoreCourseGetModuleRequest;
import org.openapitools.client.model.CoreCourseGetRecentCoursesRequest;
import org.openapitools.client.model.CoreCourseGetUpdatesSince200Response;
import org.openapitools.client.model.CoreCourseGetUpdatesSinceRequest;
import org.openapitools.client.model.CoreCourseGetUserAdministrationOptions200Response;
import org.openapitools.client.model.CoreCourseGetUserAdministrationOptionsRequest;
import org.openapitools.client.model.CoreCourseGetUserNavigationOptions200Response;
import org.openapitools.client.model.CoreCourseGetUserNavigationOptionsRequest;
import org.openapitools.client.model.CoreCourseImportCourseRequest;
import org.openapitools.client.model.CoreCourseRemoveContentItemFromUserFavouritesRequest;
import org.openapitools.client.model.CoreCourseSearchCourses200Response;
import org.openapitools.client.model.CoreCourseSearchCoursesRequest;
import org.openapitools.client.model.CoreCourseSetFavouriteCoursesRequest;
import org.openapitools.client.model.CoreCourseToggleActivityRecommendation200Response;
import org.openapitools.client.model.CoreCourseToggleActivityRecommendationRequest;
import org.openapitools.client.model.CoreCourseUpdateCategoriesRequest;
import org.openapitools.client.model.CoreCourseUpdateCoursesRequest;
import org.openapitools.client.model.CoreCourseViewCourseRequest;
import org.openapitools.client.model.CoreCourseformatFileHandlersRequest;
import org.openapitools.client.model.CoreCourseformatUpdateCourseRequest;
import org.openapitools.client.model.CoreCreateUserfeedbackActionRecordRequest;
import org.openapitools.client.model.CoreCustomfieldCreateCategoryRequest;
import org.openapitools.client.model.CoreCustomfieldDeleteCategoryRequest;
import org.openapitools.client.model.CoreCustomfieldDeleteFieldRequest;
import org.openapitools.client.model.CoreCustomfieldMoveCategoryRequest;
import org.openapitools.client.model.CoreCustomfieldMoveFieldRequest;
import org.openapitools.client.model.CoreCustomfieldReloadTemplate200Response;
import org.openapitools.client.model.CoreCustomfieldReloadTemplateRequest;
import org.openapitools.client.model.CoreDynamicTabsGetContent200Response;
import org.openapitools.client.model.CoreDynamicTabsGetContentRequest;
import org.openapitools.client.model.CoreEnrolGetCourseEnrolmentMethodsRequest;
import org.openapitools.client.model.CoreEnrolGetEnrolledUsersRequest;
import org.openapitools.client.model.CoreEnrolGetEnrolledUsersWithCapabilityRequest;
import org.openapitools.client.model.CoreEnrolGetPotentialUsersRequest;
import org.openapitools.client.model.CoreEnrolGetUsersCoursesRequest;
import org.openapitools.client.model.CoreEnrolSearchUsersRequest;
import org.openapitools.client.model.CoreEnrolSubmitUserEnrolmentForm200Response;
import org.openapitools.client.model.CoreEnrolSubmitUserEnrolmentFormRequest;
import org.openapitools.client.model.CoreEnrolUnenrolUserEnrolment200Response;
import org.openapitools.client.model.CoreEnrolUnenrolUserEnrolmentRequest;
import org.openapitools.client.model.CoreFetchNotificationsRequest;
import org.openapitools.client.model.CoreFilesDeleteDraftFiles200Response;
import org.openapitools.client.model.CoreFilesDeleteDraftFilesRequest;
import org.openapitools.client.model.CoreFilesGetFiles200Response;
import org.openapitools.client.model.CoreFilesGetFilesRequest;
import org.openapitools.client.model.CoreFilesGetUnusedDraftItemid200Response;
import org.openapitools.client.model.CoreFilesUpload200Response;
import org.openapitools.client.model.CoreFilesUploadRequest;
import org.openapitools.client.model.CoreFiltersGetAvailableInContext200Response;
import org.openapitools.client.model.CoreFiltersGetAvailableInContextRequest;
import org.openapitools.client.model.CoreFormDynamicForm200Response;
import org.openapitools.client.model.CoreFormDynamicFormRequest;
import org.openapitools.client.model.CoreFormGetFiletypesBrowserData200Response;
import org.openapitools.client.model.CoreFormGetFiletypesBrowserDataRequest;
import org.openapitools.client.model.CoreGetComponentStringsRequest;
import org.openapitools.client.model.CoreGetFragment200Response;
import org.openapitools.client.model.CoreGetFragmentRequest;
import org.openapitools.client.model.CoreGetStringRequest;
import org.openapitools.client.model.CoreGetStringsRequest;
import org.openapitools.client.model.CoreGetUserDates200Response;
import org.openapitools.client.model.CoreGetUserDatesRequest;
import org.openapitools.client.model.CoreGradesCreateGradecategories200Response;
import org.openapitools.client.model.CoreGradesCreateGradecategoriesRequest;
import org.openapitools.client.model.CoreGradesGetEnrolledUsersForSearchWidget200Response;
import org.openapitools.client.model.CoreGradesGetEnrolledUsersForSearchWidgetRequest;
import org.openapitools.client.model.CoreGradesGetEnrolledUsersForSelector200Response;
import org.openapitools.client.model.CoreGradesGetEnrolledUsersForSelectorRequest;
import org.openapitools.client.model.CoreGradesGetFeedback200Response;
import org.openapitools.client.model.CoreGradesGetFeedbackRequest;
import org.openapitools.client.model.CoreGradesGetGradableUsers200Response;
import org.openapitools.client.model.CoreGradesGetGradableUsersRequest;
import org.openapitools.client.model.CoreGradesGetGradeitems200Response;
import org.openapitools.client.model.CoreGradesGetGroupsForSearchWidget200Response;
import org.openapitools.client.model.CoreGradesGetGroupsForSearchWidgetRequest;
import org.openapitools.client.model.CoreGradesGetGroupsForSelector200Response;
import org.openapitools.client.model.CoreGradesGraderGradingpanelPointFetch200Response;
import org.openapitools.client.model.CoreGradesGraderGradingpanelPointFetchRequest;
import org.openapitools.client.model.CoreGradesGraderGradingpanelPointStore200Response;
import org.openapitools.client.model.CoreGradesGraderGradingpanelPointStoreRequest;
import org.openapitools.client.model.CoreGradesGraderGradingpanelScaleFetch200Response;
import org.openapitools.client.model.CoreGradesGraderGradingpanelScaleFetchRequest;
import org.openapitools.client.model.CoreGradesGraderGradingpanelScaleStore200Response;
import org.openapitools.client.model.CoreGradesGraderGradingpanelScaleStoreRequest;
import org.openapitools.client.model.CoreGradesUpdateGradesRequest;
import org.openapitools.client.model.CoreGradingGetDefinitions200Response;
import org.openapitools.client.model.CoreGradingGetDefinitionsRequest;
import org.openapitools.client.model.CoreGradingGetGradingformInstances200Response;
import org.openapitools.client.model.CoreGradingGetGradingformInstancesRequest;
import org.openapitools.client.model.CoreGradingSaveDefinitionsRequest;
import org.openapitools.client.model.CoreGroupAddGroupMembersRequest;
import org.openapitools.client.model.CoreGroupAssignGroupingRequest;
import org.openapitools.client.model.CoreGroupCreateGroupingsRequest;
import org.openapitools.client.model.CoreGroupCreateGroupsRequest;
import org.openapitools.client.model.CoreGroupDeleteGroupMembersRequest;
import org.openapitools.client.model.CoreGroupDeleteGroupingsRequest;
import org.openapitools.client.model.CoreGroupDeleteGroupsRequest;
import org.openapitools.client.model.CoreGroupGetActivityAllowedGroups200Response;
import org.openapitools.client.model.CoreGroupGetActivityAllowedGroupsRequest;
import org.openapitools.client.model.CoreGroupGetActivityGroupmode200Response;
import org.openapitools.client.model.CoreGroupGetActivityGroupmodeRequest;
import org.openapitools.client.model.CoreGroupGetCourseGroupingsRequest;
import org.openapitools.client.model.CoreGroupGetCourseUserGroups200Response;
import org.openapitools.client.model.CoreGroupGetCourseUserGroupsRequest;
import org.openapitools.client.model.CoreGroupGetGroupMembersRequest;
import org.openapitools.client.model.CoreGroupGetGroupingsRequest;
import org.openapitools.client.model.CoreGroupUnassignGroupingRequest;
import org.openapitools.client.model.CoreGroupUpdateGroupingsRequest;
import org.openapitools.client.model.CoreGroupUpdateGroupsRequest;
import org.openapitools.client.model.CoreH5pGetTrustedH5pFile200Response;
import org.openapitools.client.model.CoreH5pGetTrustedH5pFileRequest;
import org.openapitools.client.model.CoreMessageBlockUserRequest;
import org.openapitools.client.model.CoreMessageConfirmContactRequestRequest;
import org.openapitools.client.model.CoreMessageCreateContactRequest200Response;
import org.openapitools.client.model.CoreMessageCreateContactRequestRequest;
import org.openapitools.client.model.CoreMessageDataForMessageareaSearchMessages200Response;
import org.openapitools.client.model.CoreMessageDataForMessageareaSearchMessagesRequest;
import org.openapitools.client.model.CoreMessageDeleteContactsRequest;
import org.openapitools.client.model.CoreMessageDeleteConversationsByIdRequest;
import org.openapitools.client.model.CoreMessageDeleteMessage200Response;
import org.openapitools.client.model.CoreMessageDeleteMessageForAllUsersRequest;
import org.openapitools.client.model.CoreMessageDeleteMessageRequest;
import org.openapitools.client.model.CoreMessageGetBlockedUsers200Response;
import org.openapitools.client.model.CoreMessageGetBlockedUsersRequest;
import org.openapitools.client.model.CoreMessageGetContactRequestsRequest;
import org.openapitools.client.model.CoreMessageGetConversation200Response;
import org.openapitools.client.model.CoreMessageGetConversationBetweenUsers200Response;
import org.openapitools.client.model.CoreMessageGetConversationBetweenUsersRequest;
import org.openapitools.client.model.CoreMessageGetConversationCounts200Response;
import org.openapitools.client.model.CoreMessageGetConversationCountsRequest;
import org.openapitools.client.model.CoreMessageGetConversationMembersRequest;
import org.openapitools.client.model.CoreMessageGetConversationMessages200Response;
import org.openapitools.client.model.CoreMessageGetConversationMessagesRequest;
import org.openapitools.client.model.CoreMessageGetConversationRequest;
import org.openapitools.client.model.CoreMessageGetConversations200Response;
import org.openapitools.client.model.CoreMessageGetConversationsRequest;
import org.openapitools.client.model.CoreMessageGetMemberInfoRequest;
import org.openapitools.client.model.CoreMessageGetMessageProcessor200Response;
import org.openapitools.client.model.CoreMessageGetMessageProcessorRequest;
import org.openapitools.client.model.CoreMessageGetMessages200Response;
import org.openapitools.client.model.CoreMessageGetMessagesRequest;
import org.openapitools.client.model.CoreMessageGetReceivedContactRequestsCountRequest;
import org.openapitools.client.model.CoreMessageGetSelfConversationRequest;
import org.openapitools.client.model.CoreMessageGetUnreadConversationCounts200Response;
import org.openapitools.client.model.CoreMessageGetUnreadConversationsCountRequest;
import org.openapitools.client.model.CoreMessageGetUnreadNotificationCountRequest;
import org.openapitools.client.model.CoreMessageGetUserContactsRequest;
import org.openapitools.client.model.CoreMessageGetUserMessagePreferences200Response;
import org.openapitools.client.model.CoreMessageGetUserNotificationPreferences200Response;
import org.openapitools.client.model.CoreMessageMarkAllConversationMessagesAsReadRequest;
import org.openapitools.client.model.CoreMessageMarkAllNotificationsAsReadRequest;
import org.openapitools.client.model.CoreMessageMarkMessageRead200Response;
import org.openapitools.client.model.CoreMessageMarkMessageReadRequest;
import org.openapitools.client.model.CoreMessageMarkNotificationRead200Response;
import org.openapitools.client.model.CoreMessageMarkNotificationReadRequest;
import org.openapitools.client.model.CoreMessageMessageProcessorConfigFormRequest;
import org.openapitools.client.model.CoreMessageMessageSearchUsers200Response;
import org.openapitools.client.model.CoreMessageMessageSearchUsersRequest;
import org.openapitools.client.model.CoreMessageMuteConversationsRequest;
import org.openapitools.client.model.CoreMessageSearchContactsRequest;
import org.openapitools.client.model.CoreMessageSendInstantMessagesRequest;
import org.openapitools.client.model.CoreMessageSendMessagesToConversationRequest;
import org.openapitools.client.model.CoreMessageSetFavouriteConversationsRequest;
import org.openapitools.client.model.CoreMessageUnblockUserRequest;
import org.openapitools.client.model.CoreMessageUnmuteConversationsRequest;
import org.openapitools.client.model.CoreMoodlenetAuthCheck200Response;
import org.openapitools.client.model.CoreMoodlenetAuthCheckRequest;
import org.openapitools.client.model.CoreMoodlenetGetShareInfoActivity200Response;
import org.openapitools.client.model.CoreMoodlenetGetShareInfoActivityRequest;
import org.openapitools.client.model.CoreMoodlenetGetSharedCourseInfo200Response;
import org.openapitools.client.model.CoreMoodlenetGetSharedCourseInfoRequest;
import org.openapitools.client.model.CoreMoodlenetSendActivity200Response;
import org.openapitools.client.model.CoreMoodlenetSendActivityRequest;
import org.openapitools.client.model.CoreMoodlenetSendCourse200Response;
import org.openapitools.client.model.CoreMoodlenetSendCourseRequest;
import org.openapitools.client.model.CoreMyViewPageRequest;
import org.openapitools.client.model.CoreNotesCreateNotesRequest;
import org.openapitools.client.model.CoreNotesDeleteNotesRequest;
import org.openapitools.client.model.CoreNotesGetCourseNotes200Response;
import org.openapitools.client.model.CoreNotesGetCourseNotesRequest;
import org.openapitools.client.model.CoreNotesGetNotes200Response;
import org.openapitools.client.model.CoreNotesGetNotesRequest;
import org.openapitools.client.model.CoreNotesUpdateNotesRequest;
import org.openapitools.client.model.CoreNotesViewNotesRequest;
import org.openapitools.client.model.CoreOutputLoadFontawesomeIconSystemMapRequest;
import org.openapitools.client.model.CoreOutputLoadTemplateRequest;
import org.openapitools.client.model.CoreOutputLoadTemplateWithDependencies200Response;
import org.openapitools.client.model.CoreOutputLoadTemplateWithDependenciesRequest;
import org.openapitools.client.model.CorePaymentGetAvailableGatewaysRequest;
import org.openapitools.client.model.CoreQuestionGetRandomQuestionSummaries200Response;
import org.openapitools.client.model.CoreQuestionGetRandomQuestionSummariesRequest;
import org.openapitools.client.model.CoreQuestionSubmitTagsForm200Response;
import org.openapitools.client.model.CoreQuestionSubmitTagsFormRequest;
import org.openapitools.client.model.CoreQuestionUpdateFlagRequest;
import org.openapitools.client.model.CoreRatingAddRating200Response;
import org.openapitools.client.model.CoreRatingAddRatingRequest;
import org.openapitools.client.model.CoreRatingGetItemRatings200Response;
import org.openapitools.client.model.CoreRatingGetItemRatingsRequest;
import org.openapitools.client.model.CoreReportbuilderAudiencesDeleteRequest;
import org.openapitools.client.model.CoreReportbuilderCanViewSystemReportRequest;
import org.openapitools.client.model.CoreReportbuilderColumnsAdd200Response;
import org.openapitools.client.model.CoreReportbuilderColumnsAddRequest;
import org.openapitools.client.model.CoreReportbuilderColumnsDelete200Response;
import org.openapitools.client.model.CoreReportbuilderColumnsDeleteRequest;
import org.openapitools.client.model.CoreReportbuilderColumnsReorderRequest;
import org.openapitools.client.model.CoreReportbuilderColumnsSortGetRequest;
import org.openapitools.client.model.CoreReportbuilderColumnsSortReorderRequest;
import org.openapitools.client.model.CoreReportbuilderColumnsSortToggleRequest;
import org.openapitools.client.model.CoreReportbuilderConditionsAdd200Response;
import org.openapitools.client.model.CoreReportbuilderConditionsAddRequest;
import org.openapitools.client.model.CoreReportbuilderConditionsDelete200Response;
import org.openapitools.client.model.CoreReportbuilderConditionsDeleteRequest;
import org.openapitools.client.model.CoreReportbuilderConditionsReorderRequest;
import org.openapitools.client.model.CoreReportbuilderFiltersAdd200Response;
import org.openapitools.client.model.CoreReportbuilderFiltersAddRequest;
import org.openapitools.client.model.CoreReportbuilderFiltersDelete200Response;
import org.openapitools.client.model.CoreReportbuilderFiltersDeleteRequest;
import org.openapitools.client.model.CoreReportbuilderFiltersReorderRequest;
import org.openapitools.client.model.CoreReportbuilderFiltersResetRequest;
import org.openapitools.client.model.CoreReportbuilderListReports200Response;
import org.openapitools.client.model.CoreReportbuilderListReportsRequest;
import org.openapitools.client.model.CoreReportbuilderReportsGet200Response;
import org.openapitools.client.model.CoreReportbuilderReportsGetRequest;
import org.openapitools.client.model.CoreReportbuilderRetrieveReport200Response;
import org.openapitools.client.model.CoreReportbuilderRetrieveReportRequest;
import org.openapitools.client.model.CoreReportbuilderRetrieveSystemReport200Response;
import org.openapitools.client.model.CoreReportbuilderRetrieveSystemReportRequest;
import org.openapitools.client.model.CoreReportbuilderSchedulesDeleteRequest;
import org.openapitools.client.model.CoreReportbuilderSchedulesSendRequest;
import org.openapitools.client.model.CoreReportbuilderSchedulesToggleRequest;
import org.openapitools.client.model.CoreReportbuilderSetFiltersRequest;
import org.openapitools.client.model.CoreReportbuilderViewReport200Response;
import org.openapitools.client.model.CoreRoleAssignRolesRequest;
import org.openapitools.client.model.CoreRoleUnassignRolesRequest;
import org.openapitools.client.model.CoreSearchGetRelevantUsersRequest;
import org.openapitools.client.model.CoreSearchGetResults200Response;
import org.openapitools.client.model.CoreSearchGetResultsRequest;
import org.openapitools.client.model.CoreSearchGetSearchAreasList200Response;
import org.openapitools.client.model.CoreSearchGetSearchAreasListRequest;
import org.openapitools.client.model.CoreSearchGetTopResults200Response;
import org.openapitools.client.model.CoreSearchGetTopResultsRequest;
import org.openapitools.client.model.CoreSearchViewResultsRequest;
import org.openapitools.client.model.CoreSessionTimeRemaining200Response;
import org.openapitools.client.model.CoreTableGetDynamicTableContent200Response;
import org.openapitools.client.model.CoreTableGetDynamicTableContentRequest;
import org.openapitools.client.model.CoreTagGetTagAreas200Response;
import org.openapitools.client.model.CoreTagGetTagCloud200Response;
import org.openapitools.client.model.CoreTagGetTagCloudRequest;
import org.openapitools.client.model.CoreTagGetTagCollections200Response;
import org.openapitools.client.model.CoreTagGetTagindex200Response;
import org.openapitools.client.model.CoreTagGetTagindexPerAreaRequest;
import org.openapitools.client.model.CoreTagGetTagindexRequest;
import org.openapitools.client.model.CoreTagGetTags200Response;
import org.openapitools.client.model.CoreTagGetTagsRequest;
import org.openapitools.client.model.CoreTagUpdateTagsRequest;
import org.openapitools.client.model.CoreUpdateInplaceEditable200Response;
import org.openapitools.client.model.CoreUpdateInplaceEditableRequest;
import org.openapitools.client.model.CoreUserAddUserDeviceRequest;
import org.openapitools.client.model.CoreUserAddUserPrivateFilesRequest;
import org.openapitools.client.model.CoreUserAgreeSitePolicy200Response;
import org.openapitools.client.model.CoreUserCreateUsersRequest;
import org.openapitools.client.model.CoreUserDeleteUsersRequest;
import org.openapitools.client.model.CoreUserGetCourseUserProfilesRequest;
import org.openapitools.client.model.CoreUserGetPrivateFilesInfo200Response;
import org.openapitools.client.model.CoreUserGetPrivateFilesInfoRequest;
import org.openapitools.client.model.CoreUserGetUserPreferences200Response;
import org.openapitools.client.model.CoreUserGetUserPreferencesRequest;
import org.openapitools.client.model.CoreUserGetUsers200Response;
import org.openapitools.client.model.CoreUserGetUsersByFieldRequest;
import org.openapitools.client.model.CoreUserGetUsersRequest;
import org.openapitools.client.model.CoreUserRemoveUserDevice200Response;
import org.openapitools.client.model.CoreUserRemoveUserDeviceRequest;
import org.openapitools.client.model.CoreUserSearchIdentity200Response;
import org.openapitools.client.model.CoreUserSearchIdentityRequest;
import org.openapitools.client.model.CoreUserSetUserPreferences200Response;
import org.openapitools.client.model.CoreUserSetUserPreferencesRequest;
import org.openapitools.client.model.CoreUserUpdatePicture200Response;
import org.openapitools.client.model.CoreUserUpdatePictureRequest;
import org.openapitools.client.model.CoreUserUpdateUserDevicePublicKey200Response;
import org.openapitools.client.model.CoreUserUpdateUserDevicePublicKeyRequest;
import org.openapitools.client.model.CoreUserUpdateUserPreferencesRequest;
import org.openapitools.client.model.CoreUserUpdateUsersRequest;
import org.openapitools.client.model.CoreUserViewUserListRequest;
import org.openapitools.client.model.CoreUserViewUserProfileRequest;
import org.openapitools.client.model.CoreWebserviceGetSiteInfo200Response;
import org.openapitools.client.model.CoreWebserviceGetSiteInfoRequest;
import org.openapitools.client.model.CoreXapiDeleteStateRequest;
import org.openapitools.client.model.CoreXapiDeleteStatesRequest;
import org.openapitools.client.model.CoreXapiGetStateRequest;
import org.openapitools.client.model.CoreXapiGetStatesRequest;
import org.openapitools.client.model.CoreXapiPostStateRequest;
import org.openapitools.client.model.CoreXapiStatementPostRequest;
import org.openapitools.client.model.ErrorResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MoodleApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MoodleApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MoodleApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for coreAdminSetBlockProtection
     * @param coreAdminSetBlockProtectionRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreAdminSetBlockProtectionCall(CoreAdminSetBlockProtectionRequest coreAdminSetBlockProtectionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreAdminSetBlockProtectionRequest;

        // create path and map variables
        String localVarPath = "/core_admin_set_block_protection";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreAdminSetBlockProtectionValidateBeforeCall(CoreAdminSetBlockProtectionRequest coreAdminSetBlockProtectionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreAdminSetBlockProtectionRequest' is set
        if (coreAdminSetBlockProtectionRequest == null) {
            throw new ApiException("Missing the required parameter 'coreAdminSetBlockProtectionRequest' when calling coreAdminSetBlockProtection(Async)");
        }

        return coreAdminSetBlockProtectionCall(coreAdminSetBlockProtectionRequest, _callback);

    }

    /**
     * Set the protection state for a block plugin
     * Set the protection state for a block plugin
     * @param coreAdminSetBlockProtectionRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreAdminSetBlockProtection(CoreAdminSetBlockProtectionRequest coreAdminSetBlockProtectionRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreAdminSetBlockProtectionWithHttpInfo(coreAdminSetBlockProtectionRequest);
        return localVarResp.getData();
    }

    /**
     * Set the protection state for a block plugin
     * Set the protection state for a block plugin
     * @param coreAdminSetBlockProtectionRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreAdminSetBlockProtectionWithHttpInfo(CoreAdminSetBlockProtectionRequest coreAdminSetBlockProtectionRequest) throws ApiException {
        okhttp3.Call localVarCall = coreAdminSetBlockProtectionValidateBeforeCall(coreAdminSetBlockProtectionRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set the protection state for a block plugin (asynchronously)
     * Set the protection state for a block plugin
     * @param coreAdminSetBlockProtectionRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreAdminSetBlockProtectionAsync(CoreAdminSetBlockProtectionRequest coreAdminSetBlockProtectionRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreAdminSetBlockProtectionValidateBeforeCall(coreAdminSetBlockProtectionRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreAdminSetPluginOrder
     * @param coreAdminSetPluginOrderRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreAdminSetPluginOrderCall(CoreAdminSetPluginOrderRequest coreAdminSetPluginOrderRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreAdminSetPluginOrderRequest;

        // create path and map variables
        String localVarPath = "/core_admin_set_plugin_order";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreAdminSetPluginOrderValidateBeforeCall(CoreAdminSetPluginOrderRequest coreAdminSetPluginOrderRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreAdminSetPluginOrderRequest' is set
        if (coreAdminSetPluginOrderRequest == null) {
            throw new ApiException("Missing the required parameter 'coreAdminSetPluginOrderRequest' when calling coreAdminSetPluginOrder(Async)");
        }

        return coreAdminSetPluginOrderCall(coreAdminSetPluginOrderRequest, _callback);

    }

    /**
     * Set the order of a plugin
     * Set the order of a plugin
     * @param coreAdminSetPluginOrderRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreAdminSetPluginOrder(CoreAdminSetPluginOrderRequest coreAdminSetPluginOrderRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreAdminSetPluginOrderWithHttpInfo(coreAdminSetPluginOrderRequest);
        return localVarResp.getData();
    }

    /**
     * Set the order of a plugin
     * Set the order of a plugin
     * @param coreAdminSetPluginOrderRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreAdminSetPluginOrderWithHttpInfo(CoreAdminSetPluginOrderRequest coreAdminSetPluginOrderRequest) throws ApiException {
        okhttp3.Call localVarCall = coreAdminSetPluginOrderValidateBeforeCall(coreAdminSetPluginOrderRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set the order of a plugin (asynchronously)
     * Set the order of a plugin
     * @param coreAdminSetPluginOrderRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreAdminSetPluginOrderAsync(CoreAdminSetPluginOrderRequest coreAdminSetPluginOrderRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreAdminSetPluginOrderValidateBeforeCall(coreAdminSetPluginOrderRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreAdminSetPluginState
     * @param coreAdminSetPluginStateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreAdminSetPluginStateCall(CoreAdminSetPluginStateRequest coreAdminSetPluginStateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreAdminSetPluginStateRequest;

        // create path and map variables
        String localVarPath = "/core_admin_set_plugin_state";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreAdminSetPluginStateValidateBeforeCall(CoreAdminSetPluginStateRequest coreAdminSetPluginStateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreAdminSetPluginStateRequest' is set
        if (coreAdminSetPluginStateRequest == null) {
            throw new ApiException("Missing the required parameter 'coreAdminSetPluginStateRequest' when calling coreAdminSetPluginState(Async)");
        }

        return coreAdminSetPluginStateCall(coreAdminSetPluginStateRequest, _callback);

    }

    /**
     * Set the state of a plugin
     * Set the state of a plugin
     * @param coreAdminSetPluginStateRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreAdminSetPluginState(CoreAdminSetPluginStateRequest coreAdminSetPluginStateRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreAdminSetPluginStateWithHttpInfo(coreAdminSetPluginStateRequest);
        return localVarResp.getData();
    }

    /**
     * Set the state of a plugin
     * Set the state of a plugin
     * @param coreAdminSetPluginStateRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreAdminSetPluginStateWithHttpInfo(CoreAdminSetPluginStateRequest coreAdminSetPluginStateRequest) throws ApiException {
        okhttp3.Call localVarCall = coreAdminSetPluginStateValidateBeforeCall(coreAdminSetPluginStateRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set the state of a plugin (asynchronously)
     * Set the state of a plugin
     * @param coreAdminSetPluginStateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreAdminSetPluginStateAsync(CoreAdminSetPluginStateRequest coreAdminSetPluginStateRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreAdminSetPluginStateValidateBeforeCall(coreAdminSetPluginStateRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreAuthConfirmUser
     * @param coreAuthConfirmUserRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreAuthConfirmUserCall(CoreAuthConfirmUserRequest coreAuthConfirmUserRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreAuthConfirmUserRequest;

        // create path and map variables
        String localVarPath = "/core_auth_confirm_user";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreAuthConfirmUserValidateBeforeCall(CoreAuthConfirmUserRequest coreAuthConfirmUserRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreAuthConfirmUserRequest' is set
        if (coreAuthConfirmUserRequest == null) {
            throw new ApiException("Missing the required parameter 'coreAuthConfirmUserRequest' when calling coreAuthConfirmUser(Async)");
        }

        return coreAuthConfirmUserCall(coreAuthConfirmUserRequest, _callback);

    }

    /**
     * Confirm a user account.
     * Confirm a user account.
     * @param coreAuthConfirmUserRequest  (required)
     * @return CoreAuthConfirmUser200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreAuthConfirmUser200Response coreAuthConfirmUser(CoreAuthConfirmUserRequest coreAuthConfirmUserRequest) throws ApiException {
        ApiResponse<CoreAuthConfirmUser200Response> localVarResp = coreAuthConfirmUserWithHttpInfo(coreAuthConfirmUserRequest);
        return localVarResp.getData();
    }

    /**
     * Confirm a user account.
     * Confirm a user account.
     * @param coreAuthConfirmUserRequest  (required)
     * @return ApiResponse&lt;CoreAuthConfirmUser200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreAuthConfirmUser200Response> coreAuthConfirmUserWithHttpInfo(CoreAuthConfirmUserRequest coreAuthConfirmUserRequest) throws ApiException {
        okhttp3.Call localVarCall = coreAuthConfirmUserValidateBeforeCall(coreAuthConfirmUserRequest, null);
        Type localVarReturnType = new TypeToken<CoreAuthConfirmUser200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Confirm a user account. (asynchronously)
     * Confirm a user account.
     * @param coreAuthConfirmUserRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreAuthConfirmUserAsync(CoreAuthConfirmUserRequest coreAuthConfirmUserRequest, final ApiCallback<CoreAuthConfirmUser200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreAuthConfirmUserValidateBeforeCall(coreAuthConfirmUserRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreAuthConfirmUser200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreAuthIsAgeDigitalConsentVerificationEnabled
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreAuthIsAgeDigitalConsentVerificationEnabledCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/core_auth_is_age_digital_consent_verification_enabled";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreAuthIsAgeDigitalConsentVerificationEnabledValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return coreAuthIsAgeDigitalConsentVerificationEnabledCall(_callback);

    }

    /**
     * Checks if age digital consent verification is enabled.
     * Checks if age digital consent verification is enabled.
     * @return CoreAuthIsAgeDigitalConsentVerificationEnabled200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreAuthIsAgeDigitalConsentVerificationEnabled200Response coreAuthIsAgeDigitalConsentVerificationEnabled() throws ApiException {
        ApiResponse<CoreAuthIsAgeDigitalConsentVerificationEnabled200Response> localVarResp = coreAuthIsAgeDigitalConsentVerificationEnabledWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Checks if age digital consent verification is enabled.
     * Checks if age digital consent verification is enabled.
     * @return ApiResponse&lt;CoreAuthIsAgeDigitalConsentVerificationEnabled200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreAuthIsAgeDigitalConsentVerificationEnabled200Response> coreAuthIsAgeDigitalConsentVerificationEnabledWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = coreAuthIsAgeDigitalConsentVerificationEnabledValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<CoreAuthIsAgeDigitalConsentVerificationEnabled200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Checks if age digital consent verification is enabled. (asynchronously)
     * Checks if age digital consent verification is enabled.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreAuthIsAgeDigitalConsentVerificationEnabledAsync(final ApiCallback<CoreAuthIsAgeDigitalConsentVerificationEnabled200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreAuthIsAgeDigitalConsentVerificationEnabledValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<CoreAuthIsAgeDigitalConsentVerificationEnabled200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreAuthIsMinor
     * @param coreAuthIsMinorRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreAuthIsMinorCall(CoreAuthIsMinorRequest coreAuthIsMinorRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreAuthIsMinorRequest;

        // create path and map variables
        String localVarPath = "/core_auth_is_minor";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreAuthIsMinorValidateBeforeCall(CoreAuthIsMinorRequest coreAuthIsMinorRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreAuthIsMinorRequest' is set
        if (coreAuthIsMinorRequest == null) {
            throw new ApiException("Missing the required parameter 'coreAuthIsMinorRequest' when calling coreAuthIsMinor(Async)");
        }

        return coreAuthIsMinorCall(coreAuthIsMinorRequest, _callback);

    }

    /**
     * Requests a check if a user is a digital minor.
     * Requests a check if a user is a digital minor.
     * @param coreAuthIsMinorRequest  (required)
     * @return CoreAuthIsMinor200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreAuthIsMinor200Response coreAuthIsMinor(CoreAuthIsMinorRequest coreAuthIsMinorRequest) throws ApiException {
        ApiResponse<CoreAuthIsMinor200Response> localVarResp = coreAuthIsMinorWithHttpInfo(coreAuthIsMinorRequest);
        return localVarResp.getData();
    }

    /**
     * Requests a check if a user is a digital minor.
     * Requests a check if a user is a digital minor.
     * @param coreAuthIsMinorRequest  (required)
     * @return ApiResponse&lt;CoreAuthIsMinor200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreAuthIsMinor200Response> coreAuthIsMinorWithHttpInfo(CoreAuthIsMinorRequest coreAuthIsMinorRequest) throws ApiException {
        okhttp3.Call localVarCall = coreAuthIsMinorValidateBeforeCall(coreAuthIsMinorRequest, null);
        Type localVarReturnType = new TypeToken<CoreAuthIsMinor200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Requests a check if a user is a digital minor. (asynchronously)
     * Requests a check if a user is a digital minor.
     * @param coreAuthIsMinorRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreAuthIsMinorAsync(CoreAuthIsMinorRequest coreAuthIsMinorRequest, final ApiCallback<CoreAuthIsMinor200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreAuthIsMinorValidateBeforeCall(coreAuthIsMinorRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreAuthIsMinor200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreAuthRequestPasswordReset
     * @param coreAuthRequestPasswordResetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreAuthRequestPasswordResetCall(CoreAuthRequestPasswordResetRequest coreAuthRequestPasswordResetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreAuthRequestPasswordResetRequest;

        // create path and map variables
        String localVarPath = "/core_auth_request_password_reset";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreAuthRequestPasswordResetValidateBeforeCall(CoreAuthRequestPasswordResetRequest coreAuthRequestPasswordResetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreAuthRequestPasswordResetRequest' is set
        if (coreAuthRequestPasswordResetRequest == null) {
            throw new ApiException("Missing the required parameter 'coreAuthRequestPasswordResetRequest' when calling coreAuthRequestPasswordReset(Async)");
        }

        return coreAuthRequestPasswordResetCall(coreAuthRequestPasswordResetRequest, _callback);

    }

    /**
     * Requests a password reset.
     * Requests a password reset.
     * @param coreAuthRequestPasswordResetRequest  (required)
     * @return CoreAuthRequestPasswordReset200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreAuthRequestPasswordReset200Response coreAuthRequestPasswordReset(CoreAuthRequestPasswordResetRequest coreAuthRequestPasswordResetRequest) throws ApiException {
        ApiResponse<CoreAuthRequestPasswordReset200Response> localVarResp = coreAuthRequestPasswordResetWithHttpInfo(coreAuthRequestPasswordResetRequest);
        return localVarResp.getData();
    }

    /**
     * Requests a password reset.
     * Requests a password reset.
     * @param coreAuthRequestPasswordResetRequest  (required)
     * @return ApiResponse&lt;CoreAuthRequestPasswordReset200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreAuthRequestPasswordReset200Response> coreAuthRequestPasswordResetWithHttpInfo(CoreAuthRequestPasswordResetRequest coreAuthRequestPasswordResetRequest) throws ApiException {
        okhttp3.Call localVarCall = coreAuthRequestPasswordResetValidateBeforeCall(coreAuthRequestPasswordResetRequest, null);
        Type localVarReturnType = new TypeToken<CoreAuthRequestPasswordReset200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Requests a password reset. (asynchronously)
     * Requests a password reset.
     * @param coreAuthRequestPasswordResetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreAuthRequestPasswordResetAsync(CoreAuthRequestPasswordResetRequest coreAuthRequestPasswordResetRequest, final ApiCallback<CoreAuthRequestPasswordReset200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreAuthRequestPasswordResetValidateBeforeCall(coreAuthRequestPasswordResetRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreAuthRequestPasswordReset200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreAuthResendConfirmationEmail
     * @param coreAuthResendConfirmationEmailRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreAuthResendConfirmationEmailCall(CoreAuthResendConfirmationEmailRequest coreAuthResendConfirmationEmailRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreAuthResendConfirmationEmailRequest;

        // create path and map variables
        String localVarPath = "/core_auth_resend_confirmation_email";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreAuthResendConfirmationEmailValidateBeforeCall(CoreAuthResendConfirmationEmailRequest coreAuthResendConfirmationEmailRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreAuthResendConfirmationEmailRequest' is set
        if (coreAuthResendConfirmationEmailRequest == null) {
            throw new ApiException("Missing the required parameter 'coreAuthResendConfirmationEmailRequest' when calling coreAuthResendConfirmationEmail(Async)");
        }

        return coreAuthResendConfirmationEmailCall(coreAuthResendConfirmationEmailRequest, _callback);

    }

    /**
     * Resend confirmation email.
     * Resend confirmation email.
     * @param coreAuthResendConfirmationEmailRequest  (required)
     * @return CoreAuthResendConfirmationEmail200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreAuthResendConfirmationEmail200Response coreAuthResendConfirmationEmail(CoreAuthResendConfirmationEmailRequest coreAuthResendConfirmationEmailRequest) throws ApiException {
        ApiResponse<CoreAuthResendConfirmationEmail200Response> localVarResp = coreAuthResendConfirmationEmailWithHttpInfo(coreAuthResendConfirmationEmailRequest);
        return localVarResp.getData();
    }

    /**
     * Resend confirmation email.
     * Resend confirmation email.
     * @param coreAuthResendConfirmationEmailRequest  (required)
     * @return ApiResponse&lt;CoreAuthResendConfirmationEmail200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreAuthResendConfirmationEmail200Response> coreAuthResendConfirmationEmailWithHttpInfo(CoreAuthResendConfirmationEmailRequest coreAuthResendConfirmationEmailRequest) throws ApiException {
        okhttp3.Call localVarCall = coreAuthResendConfirmationEmailValidateBeforeCall(coreAuthResendConfirmationEmailRequest, null);
        Type localVarReturnType = new TypeToken<CoreAuthResendConfirmationEmail200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Resend confirmation email. (asynchronously)
     * Resend confirmation email.
     * @param coreAuthResendConfirmationEmailRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreAuthResendConfirmationEmailAsync(CoreAuthResendConfirmationEmailRequest coreAuthResendConfirmationEmailRequest, final ApiCallback<CoreAuthResendConfirmationEmail200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreAuthResendConfirmationEmailValidateBeforeCall(coreAuthResendConfirmationEmailRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreAuthResendConfirmationEmail200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreBackupGetAsyncBackupLinksBackup
     * @param coreBackupGetAsyncBackupLinksBackupRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Table row data. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreBackupGetAsyncBackupLinksBackupCall(CoreBackupGetAsyncBackupLinksBackupRequest coreBackupGetAsyncBackupLinksBackupRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreBackupGetAsyncBackupLinksBackupRequest;

        // create path and map variables
        String localVarPath = "/core_backup_get_async_backup_links_backup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreBackupGetAsyncBackupLinksBackupValidateBeforeCall(CoreBackupGetAsyncBackupLinksBackupRequest coreBackupGetAsyncBackupLinksBackupRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreBackupGetAsyncBackupLinksBackupRequest' is set
        if (coreBackupGetAsyncBackupLinksBackupRequest == null) {
            throw new ApiException("Missing the required parameter 'coreBackupGetAsyncBackupLinksBackupRequest' when calling coreBackupGetAsyncBackupLinksBackup(Async)");
        }

        return coreBackupGetAsyncBackupLinksBackupCall(coreBackupGetAsyncBackupLinksBackupRequest, _callback);

    }

    /**
     * Gets the data to use when updating the status table row in the UI for when an async backup completes.
     * Gets the data to use when updating the status table row in the UI for when an async backup completes.
     * @param coreBackupGetAsyncBackupLinksBackupRequest  (required)
     * @return CoreBackupGetAsyncBackupLinksBackup200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Table row data. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreBackupGetAsyncBackupLinksBackup200Response coreBackupGetAsyncBackupLinksBackup(CoreBackupGetAsyncBackupLinksBackupRequest coreBackupGetAsyncBackupLinksBackupRequest) throws ApiException {
        ApiResponse<CoreBackupGetAsyncBackupLinksBackup200Response> localVarResp = coreBackupGetAsyncBackupLinksBackupWithHttpInfo(coreBackupGetAsyncBackupLinksBackupRequest);
        return localVarResp.getData();
    }

    /**
     * Gets the data to use when updating the status table row in the UI for when an async backup completes.
     * Gets the data to use when updating the status table row in the UI for when an async backup completes.
     * @param coreBackupGetAsyncBackupLinksBackupRequest  (required)
     * @return ApiResponse&lt;CoreBackupGetAsyncBackupLinksBackup200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Table row data. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreBackupGetAsyncBackupLinksBackup200Response> coreBackupGetAsyncBackupLinksBackupWithHttpInfo(CoreBackupGetAsyncBackupLinksBackupRequest coreBackupGetAsyncBackupLinksBackupRequest) throws ApiException {
        okhttp3.Call localVarCall = coreBackupGetAsyncBackupLinksBackupValidateBeforeCall(coreBackupGetAsyncBackupLinksBackupRequest, null);
        Type localVarReturnType = new TypeToken<CoreBackupGetAsyncBackupLinksBackup200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the data to use when updating the status table row in the UI for when an async backup completes. (asynchronously)
     * Gets the data to use when updating the status table row in the UI for when an async backup completes.
     * @param coreBackupGetAsyncBackupLinksBackupRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Table row data. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreBackupGetAsyncBackupLinksBackupAsync(CoreBackupGetAsyncBackupLinksBackupRequest coreBackupGetAsyncBackupLinksBackupRequest, final ApiCallback<CoreBackupGetAsyncBackupLinksBackup200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreBackupGetAsyncBackupLinksBackupValidateBeforeCall(coreBackupGetAsyncBackupLinksBackupRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreBackupGetAsyncBackupLinksBackup200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreBackupGetAsyncBackupLinksRestore
     * @param coreBackupGetAsyncBackupLinksRestoreRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Table row data. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreBackupGetAsyncBackupLinksRestoreCall(CoreBackupGetAsyncBackupLinksRestoreRequest coreBackupGetAsyncBackupLinksRestoreRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreBackupGetAsyncBackupLinksRestoreRequest;

        // create path and map variables
        String localVarPath = "/core_backup_get_async_backup_links_restore";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreBackupGetAsyncBackupLinksRestoreValidateBeforeCall(CoreBackupGetAsyncBackupLinksRestoreRequest coreBackupGetAsyncBackupLinksRestoreRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreBackupGetAsyncBackupLinksRestoreRequest' is set
        if (coreBackupGetAsyncBackupLinksRestoreRequest == null) {
            throw new ApiException("Missing the required parameter 'coreBackupGetAsyncBackupLinksRestoreRequest' when calling coreBackupGetAsyncBackupLinksRestore(Async)");
        }

        return coreBackupGetAsyncBackupLinksRestoreCall(coreBackupGetAsyncBackupLinksRestoreRequest, _callback);

    }

    /**
     * Gets the data to use when updating the status table row in the UI for when an async restore completes.
     * Gets the data to use when updating the status table row in the UI for when an async restore completes.
     * @param coreBackupGetAsyncBackupLinksRestoreRequest  (required)
     * @return CoreBackupGetAsyncBackupLinksRestore200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Table row data. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreBackupGetAsyncBackupLinksRestore200Response coreBackupGetAsyncBackupLinksRestore(CoreBackupGetAsyncBackupLinksRestoreRequest coreBackupGetAsyncBackupLinksRestoreRequest) throws ApiException {
        ApiResponse<CoreBackupGetAsyncBackupLinksRestore200Response> localVarResp = coreBackupGetAsyncBackupLinksRestoreWithHttpInfo(coreBackupGetAsyncBackupLinksRestoreRequest);
        return localVarResp.getData();
    }

    /**
     * Gets the data to use when updating the status table row in the UI for when an async restore completes.
     * Gets the data to use when updating the status table row in the UI for when an async restore completes.
     * @param coreBackupGetAsyncBackupLinksRestoreRequest  (required)
     * @return ApiResponse&lt;CoreBackupGetAsyncBackupLinksRestore200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Table row data. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreBackupGetAsyncBackupLinksRestore200Response> coreBackupGetAsyncBackupLinksRestoreWithHttpInfo(CoreBackupGetAsyncBackupLinksRestoreRequest coreBackupGetAsyncBackupLinksRestoreRequest) throws ApiException {
        okhttp3.Call localVarCall = coreBackupGetAsyncBackupLinksRestoreValidateBeforeCall(coreBackupGetAsyncBackupLinksRestoreRequest, null);
        Type localVarReturnType = new TypeToken<CoreBackupGetAsyncBackupLinksRestore200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the data to use when updating the status table row in the UI for when an async restore completes. (asynchronously)
     * Gets the data to use when updating the status table row in the UI for when an async restore completes.
     * @param coreBackupGetAsyncBackupLinksRestoreRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Table row data. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreBackupGetAsyncBackupLinksRestoreAsync(CoreBackupGetAsyncBackupLinksRestoreRequest coreBackupGetAsyncBackupLinksRestoreRequest, final ApiCallback<CoreBackupGetAsyncBackupLinksRestore200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreBackupGetAsyncBackupLinksRestoreValidateBeforeCall(coreBackupGetAsyncBackupLinksRestoreRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreBackupGetAsyncBackupLinksRestore200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreBackupGetAsyncBackupProgress
     * @param coreBackupGetAsyncBackupProgressRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Backup data </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreBackupGetAsyncBackupProgressCall(CoreBackupGetAsyncBackupProgressRequest coreBackupGetAsyncBackupProgressRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreBackupGetAsyncBackupProgressRequest;

        // create path and map variables
        String localVarPath = "/core_backup_get_async_backup_progress";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreBackupGetAsyncBackupProgressValidateBeforeCall(CoreBackupGetAsyncBackupProgressRequest coreBackupGetAsyncBackupProgressRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreBackupGetAsyncBackupProgressRequest' is set
        if (coreBackupGetAsyncBackupProgressRequest == null) {
            throw new ApiException("Missing the required parameter 'coreBackupGetAsyncBackupProgressRequest' when calling coreBackupGetAsyncBackupProgress(Async)");
        }

        return coreBackupGetAsyncBackupProgressCall(coreBackupGetAsyncBackupProgressRequest, _callback);

    }

    /**
     * Get the progress of an Asyncronhous backup.
     * Get the progress of an Asyncronhous backup.
     * @param coreBackupGetAsyncBackupProgressRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Backup data </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreBackupGetAsyncBackupProgress(CoreBackupGetAsyncBackupProgressRequest coreBackupGetAsyncBackupProgressRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreBackupGetAsyncBackupProgressWithHttpInfo(coreBackupGetAsyncBackupProgressRequest);
        return localVarResp.getData();
    }

    /**
     * Get the progress of an Asyncronhous backup.
     * Get the progress of an Asyncronhous backup.
     * @param coreBackupGetAsyncBackupProgressRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Backup data </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreBackupGetAsyncBackupProgressWithHttpInfo(CoreBackupGetAsyncBackupProgressRequest coreBackupGetAsyncBackupProgressRequest) throws ApiException {
        okhttp3.Call localVarCall = coreBackupGetAsyncBackupProgressValidateBeforeCall(coreBackupGetAsyncBackupProgressRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the progress of an Asyncronhous backup. (asynchronously)
     * Get the progress of an Asyncronhous backup.
     * @param coreBackupGetAsyncBackupProgressRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Backup data </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreBackupGetAsyncBackupProgressAsync(CoreBackupGetAsyncBackupProgressRequest coreBackupGetAsyncBackupProgressRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreBackupGetAsyncBackupProgressValidateBeforeCall(coreBackupGetAsyncBackupProgressRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreBackupGetCopyProgress
     * @param coreBackupGetCopyProgressRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Copy data </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreBackupGetCopyProgressCall(CoreBackupGetCopyProgressRequest coreBackupGetCopyProgressRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreBackupGetCopyProgressRequest;

        // create path and map variables
        String localVarPath = "/core_backup_get_copy_progress";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreBackupGetCopyProgressValidateBeforeCall(CoreBackupGetCopyProgressRequest coreBackupGetCopyProgressRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreBackupGetCopyProgressRequest' is set
        if (coreBackupGetCopyProgressRequest == null) {
            throw new ApiException("Missing the required parameter 'coreBackupGetCopyProgressRequest' when calling coreBackupGetCopyProgress(Async)");
        }

        return coreBackupGetCopyProgressCall(coreBackupGetCopyProgressRequest, _callback);

    }

    /**
     * Gets the progress of course copy operations.
     * Gets the progress of course copy operations.
     * @param coreBackupGetCopyProgressRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Copy data </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreBackupGetCopyProgress(CoreBackupGetCopyProgressRequest coreBackupGetCopyProgressRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreBackupGetCopyProgressWithHttpInfo(coreBackupGetCopyProgressRequest);
        return localVarResp.getData();
    }

    /**
     * Gets the progress of course copy operations.
     * Gets the progress of course copy operations.
     * @param coreBackupGetCopyProgressRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Copy data </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreBackupGetCopyProgressWithHttpInfo(CoreBackupGetCopyProgressRequest coreBackupGetCopyProgressRequest) throws ApiException {
        okhttp3.Call localVarCall = coreBackupGetCopyProgressValidateBeforeCall(coreBackupGetCopyProgressRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the progress of course copy operations. (asynchronously)
     * Gets the progress of course copy operations.
     * @param coreBackupGetCopyProgressRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Copy data </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreBackupGetCopyProgressAsync(CoreBackupGetCopyProgressRequest coreBackupGetCopyProgressRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreBackupGetCopyProgressValidateBeforeCall(coreBackupGetCopyProgressRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreBackupSubmitCopyForm
     * @param coreBackupSubmitCopyFormRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreBackupSubmitCopyFormCall(CoreBackupSubmitCopyFormRequest coreBackupSubmitCopyFormRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreBackupSubmitCopyFormRequest;

        // create path and map variables
        String localVarPath = "/core_backup_submit_copy_form";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreBackupSubmitCopyFormValidateBeforeCall(CoreBackupSubmitCopyFormRequest coreBackupSubmitCopyFormRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreBackupSubmitCopyFormRequest' is set
        if (coreBackupSubmitCopyFormRequest == null) {
            throw new ApiException("Missing the required parameter 'coreBackupSubmitCopyFormRequest' when calling coreBackupSubmitCopyForm(Async)");
        }

        return coreBackupSubmitCopyFormCall(coreBackupSubmitCopyFormRequest, _callback);

    }

    /**
     * Handles ajax submission of course copy form.
     * Handles ajax submission of course copy form.
     * @param coreBackupSubmitCopyFormRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreBackupSubmitCopyForm(CoreBackupSubmitCopyFormRequest coreBackupSubmitCopyFormRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreBackupSubmitCopyFormWithHttpInfo(coreBackupSubmitCopyFormRequest);
        return localVarResp.getData();
    }

    /**
     * Handles ajax submission of course copy form.
     * Handles ajax submission of course copy form.
     * @param coreBackupSubmitCopyFormRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreBackupSubmitCopyFormWithHttpInfo(CoreBackupSubmitCopyFormRequest coreBackupSubmitCopyFormRequest) throws ApiException {
        okhttp3.Call localVarCall = coreBackupSubmitCopyFormValidateBeforeCall(coreBackupSubmitCopyFormRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Handles ajax submission of course copy form. (asynchronously)
     * Handles ajax submission of course copy form.
     * @param coreBackupSubmitCopyFormRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreBackupSubmitCopyFormAsync(CoreBackupSubmitCopyFormRequest coreBackupSubmitCopyFormRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreBackupSubmitCopyFormValidateBeforeCall(coreBackupSubmitCopyFormRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreBadgesGetUserBadgeByHash
     * @param coreBadgesGetUserBadgeByHashRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreBadgesGetUserBadgeByHashCall(CoreBadgesGetUserBadgeByHashRequest coreBadgesGetUserBadgeByHashRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreBadgesGetUserBadgeByHashRequest;

        // create path and map variables
        String localVarPath = "/core_badges_get_user_badge_by_hash";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreBadgesGetUserBadgeByHashValidateBeforeCall(CoreBadgesGetUserBadgeByHashRequest coreBadgesGetUserBadgeByHashRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreBadgesGetUserBadgeByHashRequest' is set
        if (coreBadgesGetUserBadgeByHashRequest == null) {
            throw new ApiException("Missing the required parameter 'coreBadgesGetUserBadgeByHashRequest' when calling coreBadgesGetUserBadgeByHash(Async)");
        }

        return coreBadgesGetUserBadgeByHashCall(coreBadgesGetUserBadgeByHashRequest, _callback);

    }

    /**
     * Returns the badge awarded to a user by hash.
     * Returns the badge awarded to a user by hash.
     * @param coreBadgesGetUserBadgeByHashRequest  (required)
     * @return CoreBadgesGetUserBadgeByHash200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreBadgesGetUserBadgeByHash200Response coreBadgesGetUserBadgeByHash(CoreBadgesGetUserBadgeByHashRequest coreBadgesGetUserBadgeByHashRequest) throws ApiException {
        ApiResponse<CoreBadgesGetUserBadgeByHash200Response> localVarResp = coreBadgesGetUserBadgeByHashWithHttpInfo(coreBadgesGetUserBadgeByHashRequest);
        return localVarResp.getData();
    }

    /**
     * Returns the badge awarded to a user by hash.
     * Returns the badge awarded to a user by hash.
     * @param coreBadgesGetUserBadgeByHashRequest  (required)
     * @return ApiResponse&lt;CoreBadgesGetUserBadgeByHash200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreBadgesGetUserBadgeByHash200Response> coreBadgesGetUserBadgeByHashWithHttpInfo(CoreBadgesGetUserBadgeByHashRequest coreBadgesGetUserBadgeByHashRequest) throws ApiException {
        okhttp3.Call localVarCall = coreBadgesGetUserBadgeByHashValidateBeforeCall(coreBadgesGetUserBadgeByHashRequest, null);
        Type localVarReturnType = new TypeToken<CoreBadgesGetUserBadgeByHash200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the badge awarded to a user by hash. (asynchronously)
     * Returns the badge awarded to a user by hash.
     * @param coreBadgesGetUserBadgeByHashRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreBadgesGetUserBadgeByHashAsync(CoreBadgesGetUserBadgeByHashRequest coreBadgesGetUserBadgeByHashRequest, final ApiCallback<CoreBadgesGetUserBadgeByHash200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreBadgesGetUserBadgeByHashValidateBeforeCall(coreBadgesGetUserBadgeByHashRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreBadgesGetUserBadgeByHash200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreBadgesGetUserBadges
     * @param coreBadgesGetUserBadgesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreBadgesGetUserBadgesCall(CoreBadgesGetUserBadgesRequest coreBadgesGetUserBadgesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreBadgesGetUserBadgesRequest;

        // create path and map variables
        String localVarPath = "/core_badges_get_user_badges";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreBadgesGetUserBadgesValidateBeforeCall(CoreBadgesGetUserBadgesRequest coreBadgesGetUserBadgesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreBadgesGetUserBadgesRequest' is set
        if (coreBadgesGetUserBadgesRequest == null) {
            throw new ApiException("Missing the required parameter 'coreBadgesGetUserBadgesRequest' when calling coreBadgesGetUserBadges(Async)");
        }

        return coreBadgesGetUserBadgesCall(coreBadgesGetUserBadgesRequest, _callback);

    }

    /**
     * Returns the list of badges awarded to a user.
     * Returns the list of badges awarded to a user.
     * @param coreBadgesGetUserBadgesRequest  (required)
     * @return CoreBadgesGetUserBadges200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreBadgesGetUserBadges200Response coreBadgesGetUserBadges(CoreBadgesGetUserBadgesRequest coreBadgesGetUserBadgesRequest) throws ApiException {
        ApiResponse<CoreBadgesGetUserBadges200Response> localVarResp = coreBadgesGetUserBadgesWithHttpInfo(coreBadgesGetUserBadgesRequest);
        return localVarResp.getData();
    }

    /**
     * Returns the list of badges awarded to a user.
     * Returns the list of badges awarded to a user.
     * @param coreBadgesGetUserBadgesRequest  (required)
     * @return ApiResponse&lt;CoreBadgesGetUserBadges200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreBadgesGetUserBadges200Response> coreBadgesGetUserBadgesWithHttpInfo(CoreBadgesGetUserBadgesRequest coreBadgesGetUserBadgesRequest) throws ApiException {
        okhttp3.Call localVarCall = coreBadgesGetUserBadgesValidateBeforeCall(coreBadgesGetUserBadgesRequest, null);
        Type localVarReturnType = new TypeToken<CoreBadgesGetUserBadges200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the list of badges awarded to a user. (asynchronously)
     * Returns the list of badges awarded to a user.
     * @param coreBadgesGetUserBadgesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreBadgesGetUserBadgesAsync(CoreBadgesGetUserBadgesRequest coreBadgesGetUserBadgesRequest, final ApiCallback<CoreBadgesGetUserBadges200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreBadgesGetUserBadgesValidateBeforeCall(coreBadgesGetUserBadgesRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreBadgesGetUserBadges200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreBlockFetchAddableBlocks
     * @param coreBlockFetchAddableBlocksRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of addable blocks in a given page. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreBlockFetchAddableBlocksCall(CoreBlockFetchAddableBlocksRequest coreBlockFetchAddableBlocksRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreBlockFetchAddableBlocksRequest;

        // create path and map variables
        String localVarPath = "/core_block_fetch_addable_blocks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreBlockFetchAddableBlocksValidateBeforeCall(CoreBlockFetchAddableBlocksRequest coreBlockFetchAddableBlocksRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreBlockFetchAddableBlocksRequest' is set
        if (coreBlockFetchAddableBlocksRequest == null) {
            throw new ApiException("Missing the required parameter 'coreBlockFetchAddableBlocksRequest' when calling coreBlockFetchAddableBlocks(Async)");
        }

        return coreBlockFetchAddableBlocksCall(coreBlockFetchAddableBlocksRequest, _callback);

    }

    /**
     * Returns all addable blocks in a given page.
     * Returns all addable blocks in a given page.
     * @param coreBlockFetchAddableBlocksRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of addable blocks in a given page. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreBlockFetchAddableBlocks(CoreBlockFetchAddableBlocksRequest coreBlockFetchAddableBlocksRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreBlockFetchAddableBlocksWithHttpInfo(coreBlockFetchAddableBlocksRequest);
        return localVarResp.getData();
    }

    /**
     * Returns all addable blocks in a given page.
     * Returns all addable blocks in a given page.
     * @param coreBlockFetchAddableBlocksRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of addable blocks in a given page. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreBlockFetchAddableBlocksWithHttpInfo(CoreBlockFetchAddableBlocksRequest coreBlockFetchAddableBlocksRequest) throws ApiException {
        okhttp3.Call localVarCall = coreBlockFetchAddableBlocksValidateBeforeCall(coreBlockFetchAddableBlocksRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns all addable blocks in a given page. (asynchronously)
     * Returns all addable blocks in a given page.
     * @param coreBlockFetchAddableBlocksRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of addable blocks in a given page. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreBlockFetchAddableBlocksAsync(CoreBlockFetchAddableBlocksRequest coreBlockFetchAddableBlocksRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreBlockFetchAddableBlocksValidateBeforeCall(coreBlockFetchAddableBlocksRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreBlockGetCourseBlocks
     * @param coreBlockGetCourseBlocksRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreBlockGetCourseBlocksCall(CoreBlockGetCourseBlocksRequest coreBlockGetCourseBlocksRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreBlockGetCourseBlocksRequest;

        // create path and map variables
        String localVarPath = "/core_block_get_course_blocks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreBlockGetCourseBlocksValidateBeforeCall(CoreBlockGetCourseBlocksRequest coreBlockGetCourseBlocksRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreBlockGetCourseBlocksRequest' is set
        if (coreBlockGetCourseBlocksRequest == null) {
            throw new ApiException("Missing the required parameter 'coreBlockGetCourseBlocksRequest' when calling coreBlockGetCourseBlocks(Async)");
        }

        return coreBlockGetCourseBlocksCall(coreBlockGetCourseBlocksRequest, _callback);

    }

    /**
     * Returns blocks information for a course.
     * Returns blocks information for a course.
     * @param coreBlockGetCourseBlocksRequest  (required)
     * @return CoreBlockGetCourseBlocks200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreBlockGetCourseBlocks200Response coreBlockGetCourseBlocks(CoreBlockGetCourseBlocksRequest coreBlockGetCourseBlocksRequest) throws ApiException {
        ApiResponse<CoreBlockGetCourseBlocks200Response> localVarResp = coreBlockGetCourseBlocksWithHttpInfo(coreBlockGetCourseBlocksRequest);
        return localVarResp.getData();
    }

    /**
     * Returns blocks information for a course.
     * Returns blocks information for a course.
     * @param coreBlockGetCourseBlocksRequest  (required)
     * @return ApiResponse&lt;CoreBlockGetCourseBlocks200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreBlockGetCourseBlocks200Response> coreBlockGetCourseBlocksWithHttpInfo(CoreBlockGetCourseBlocksRequest coreBlockGetCourseBlocksRequest) throws ApiException {
        okhttp3.Call localVarCall = coreBlockGetCourseBlocksValidateBeforeCall(coreBlockGetCourseBlocksRequest, null);
        Type localVarReturnType = new TypeToken<CoreBlockGetCourseBlocks200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns blocks information for a course. (asynchronously)
     * Returns blocks information for a course.
     * @param coreBlockGetCourseBlocksRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreBlockGetCourseBlocksAsync(CoreBlockGetCourseBlocksRequest coreBlockGetCourseBlocksRequest, final ApiCallback<CoreBlockGetCourseBlocks200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreBlockGetCourseBlocksValidateBeforeCall(coreBlockGetCourseBlocksRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreBlockGetCourseBlocks200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreBlockGetDashboardBlocks
     * @param coreBlockGetDashboardBlocksRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreBlockGetDashboardBlocksCall(CoreBlockGetDashboardBlocksRequest coreBlockGetDashboardBlocksRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreBlockGetDashboardBlocksRequest;

        // create path and map variables
        String localVarPath = "/core_block_get_dashboard_blocks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreBlockGetDashboardBlocksValidateBeforeCall(CoreBlockGetDashboardBlocksRequest coreBlockGetDashboardBlocksRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreBlockGetDashboardBlocksRequest' is set
        if (coreBlockGetDashboardBlocksRequest == null) {
            throw new ApiException("Missing the required parameter 'coreBlockGetDashboardBlocksRequest' when calling coreBlockGetDashboardBlocks(Async)");
        }

        return coreBlockGetDashboardBlocksCall(coreBlockGetDashboardBlocksRequest, _callback);

    }

    /**
     * Returns blocks information for the given user dashboard.
     * Returns blocks information for the given user dashboard.
     * @param coreBlockGetDashboardBlocksRequest  (required)
     * @return CoreBlockGetDashboardBlocks200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreBlockGetDashboardBlocks200Response coreBlockGetDashboardBlocks(CoreBlockGetDashboardBlocksRequest coreBlockGetDashboardBlocksRequest) throws ApiException {
        ApiResponse<CoreBlockGetDashboardBlocks200Response> localVarResp = coreBlockGetDashboardBlocksWithHttpInfo(coreBlockGetDashboardBlocksRequest);
        return localVarResp.getData();
    }

    /**
     * Returns blocks information for the given user dashboard.
     * Returns blocks information for the given user dashboard.
     * @param coreBlockGetDashboardBlocksRequest  (required)
     * @return ApiResponse&lt;CoreBlockGetDashboardBlocks200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreBlockGetDashboardBlocks200Response> coreBlockGetDashboardBlocksWithHttpInfo(CoreBlockGetDashboardBlocksRequest coreBlockGetDashboardBlocksRequest) throws ApiException {
        okhttp3.Call localVarCall = coreBlockGetDashboardBlocksValidateBeforeCall(coreBlockGetDashboardBlocksRequest, null);
        Type localVarReturnType = new TypeToken<CoreBlockGetDashboardBlocks200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns blocks information for the given user dashboard. (asynchronously)
     * Returns blocks information for the given user dashboard.
     * @param coreBlockGetDashboardBlocksRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreBlockGetDashboardBlocksAsync(CoreBlockGetDashboardBlocksRequest coreBlockGetDashboardBlocksRequest, final ApiCallback<CoreBlockGetDashboardBlocks200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreBlockGetDashboardBlocksValidateBeforeCall(coreBlockGetDashboardBlocksRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreBlockGetDashboardBlocks200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreBlogGetEntries
     * @param coreBlogGetEntriesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreBlogGetEntriesCall(CoreBlogGetEntriesRequest coreBlogGetEntriesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreBlogGetEntriesRequest;

        // create path and map variables
        String localVarPath = "/core_blog_get_entries";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreBlogGetEntriesValidateBeforeCall(CoreBlogGetEntriesRequest coreBlogGetEntriesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreBlogGetEntriesRequest' is set
        if (coreBlogGetEntriesRequest == null) {
            throw new ApiException("Missing the required parameter 'coreBlogGetEntriesRequest' when calling coreBlogGetEntries(Async)");
        }

        return coreBlogGetEntriesCall(coreBlogGetEntriesRequest, _callback);

    }

    /**
     * Returns blog entries.
     * Returns blog entries.
     * @param coreBlogGetEntriesRequest  (required)
     * @return CoreBlogGetEntries200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreBlogGetEntries200Response coreBlogGetEntries(CoreBlogGetEntriesRequest coreBlogGetEntriesRequest) throws ApiException {
        ApiResponse<CoreBlogGetEntries200Response> localVarResp = coreBlogGetEntriesWithHttpInfo(coreBlogGetEntriesRequest);
        return localVarResp.getData();
    }

    /**
     * Returns blog entries.
     * Returns blog entries.
     * @param coreBlogGetEntriesRequest  (required)
     * @return ApiResponse&lt;CoreBlogGetEntries200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreBlogGetEntries200Response> coreBlogGetEntriesWithHttpInfo(CoreBlogGetEntriesRequest coreBlogGetEntriesRequest) throws ApiException {
        okhttp3.Call localVarCall = coreBlogGetEntriesValidateBeforeCall(coreBlogGetEntriesRequest, null);
        Type localVarReturnType = new TypeToken<CoreBlogGetEntries200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns blog entries. (asynchronously)
     * Returns blog entries.
     * @param coreBlogGetEntriesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreBlogGetEntriesAsync(CoreBlogGetEntriesRequest coreBlogGetEntriesRequest, final ApiCallback<CoreBlogGetEntries200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreBlogGetEntriesValidateBeforeCall(coreBlogGetEntriesRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreBlogGetEntries200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreBlogViewEntries
     * @param coreBlogViewEntriesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreBlogViewEntriesCall(CoreBlogViewEntriesRequest coreBlogViewEntriesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreBlogViewEntriesRequest;

        // create path and map variables
        String localVarPath = "/core_blog_view_entries";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreBlogViewEntriesValidateBeforeCall(CoreBlogViewEntriesRequest coreBlogViewEntriesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreBlogViewEntriesRequest' is set
        if (coreBlogViewEntriesRequest == null) {
            throw new ApiException("Missing the required parameter 'coreBlogViewEntriesRequest' when calling coreBlogViewEntries(Async)");
        }

        return coreBlogViewEntriesCall(coreBlogViewEntriesRequest, _callback);

    }

    /**
     * Trigger the blog_entries_viewed event.
     * Trigger the blog_entries_viewed event.
     * @param coreBlogViewEntriesRequest  (required)
     * @return CoreBlogViewEntries200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreBlogViewEntries200Response coreBlogViewEntries(CoreBlogViewEntriesRequest coreBlogViewEntriesRequest) throws ApiException {
        ApiResponse<CoreBlogViewEntries200Response> localVarResp = coreBlogViewEntriesWithHttpInfo(coreBlogViewEntriesRequest);
        return localVarResp.getData();
    }

    /**
     * Trigger the blog_entries_viewed event.
     * Trigger the blog_entries_viewed event.
     * @param coreBlogViewEntriesRequest  (required)
     * @return ApiResponse&lt;CoreBlogViewEntries200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreBlogViewEntries200Response> coreBlogViewEntriesWithHttpInfo(CoreBlogViewEntriesRequest coreBlogViewEntriesRequest) throws ApiException {
        okhttp3.Call localVarCall = coreBlogViewEntriesValidateBeforeCall(coreBlogViewEntriesRequest, null);
        Type localVarReturnType = new TypeToken<CoreBlogViewEntries200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Trigger the blog_entries_viewed event. (asynchronously)
     * Trigger the blog_entries_viewed event.
     * @param coreBlogViewEntriesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreBlogViewEntriesAsync(CoreBlogViewEntriesRequest coreBlogViewEntriesRequest, final ApiCallback<CoreBlogViewEntries200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreBlogViewEntriesValidateBeforeCall(coreBlogViewEntriesRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreBlogViewEntries200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCalendarCreateCalendarEvents
     * @param coreCalendarCreateCalendarEventsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCalendarCreateCalendarEventsCall(CoreCalendarCreateCalendarEventsRequest coreCalendarCreateCalendarEventsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCalendarCreateCalendarEventsRequest;

        // create path and map variables
        String localVarPath = "/core_calendar_create_calendar_events";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCalendarCreateCalendarEventsValidateBeforeCall(CoreCalendarCreateCalendarEventsRequest coreCalendarCreateCalendarEventsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCalendarCreateCalendarEventsRequest' is set
        if (coreCalendarCreateCalendarEventsRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCalendarCreateCalendarEventsRequest' when calling coreCalendarCreateCalendarEvents(Async)");
        }

        return coreCalendarCreateCalendarEventsCall(coreCalendarCreateCalendarEventsRequest, _callback);

    }

    /**
     * Create calendar events
     * Create calendar events
     * @param coreCalendarCreateCalendarEventsRequest  (required)
     * @return CoreCalendarCreateCalendarEvents200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreCalendarCreateCalendarEvents200Response coreCalendarCreateCalendarEvents(CoreCalendarCreateCalendarEventsRequest coreCalendarCreateCalendarEventsRequest) throws ApiException {
        ApiResponse<CoreCalendarCreateCalendarEvents200Response> localVarResp = coreCalendarCreateCalendarEventsWithHttpInfo(coreCalendarCreateCalendarEventsRequest);
        return localVarResp.getData();
    }

    /**
     * Create calendar events
     * Create calendar events
     * @param coreCalendarCreateCalendarEventsRequest  (required)
     * @return ApiResponse&lt;CoreCalendarCreateCalendarEvents200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreCalendarCreateCalendarEvents200Response> coreCalendarCreateCalendarEventsWithHttpInfo(CoreCalendarCreateCalendarEventsRequest coreCalendarCreateCalendarEventsRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCalendarCreateCalendarEventsValidateBeforeCall(coreCalendarCreateCalendarEventsRequest, null);
        Type localVarReturnType = new TypeToken<CoreCalendarCreateCalendarEvents200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create calendar events (asynchronously)
     * Create calendar events
     * @param coreCalendarCreateCalendarEventsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCalendarCreateCalendarEventsAsync(CoreCalendarCreateCalendarEventsRequest coreCalendarCreateCalendarEventsRequest, final ApiCallback<CoreCalendarCreateCalendarEvents200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCalendarCreateCalendarEventsValidateBeforeCall(coreCalendarCreateCalendarEventsRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreCalendarCreateCalendarEvents200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCalendarDeleteCalendarEvents
     * @param coreCalendarDeleteCalendarEventsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCalendarDeleteCalendarEventsCall(CoreCalendarDeleteCalendarEventsRequest coreCalendarDeleteCalendarEventsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCalendarDeleteCalendarEventsRequest;

        // create path and map variables
        String localVarPath = "/core_calendar_delete_calendar_events";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCalendarDeleteCalendarEventsValidateBeforeCall(CoreCalendarDeleteCalendarEventsRequest coreCalendarDeleteCalendarEventsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCalendarDeleteCalendarEventsRequest' is set
        if (coreCalendarDeleteCalendarEventsRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCalendarDeleteCalendarEventsRequest' when calling coreCalendarDeleteCalendarEvents(Async)");
        }

        return coreCalendarDeleteCalendarEventsCall(coreCalendarDeleteCalendarEventsRequest, _callback);

    }

    /**
     * Delete calendar events
     * Delete calendar events
     * @param coreCalendarDeleteCalendarEventsRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreCalendarDeleteCalendarEvents(CoreCalendarDeleteCalendarEventsRequest coreCalendarDeleteCalendarEventsRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreCalendarDeleteCalendarEventsWithHttpInfo(coreCalendarDeleteCalendarEventsRequest);
        return localVarResp.getData();
    }

    /**
     * Delete calendar events
     * Delete calendar events
     * @param coreCalendarDeleteCalendarEventsRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreCalendarDeleteCalendarEventsWithHttpInfo(CoreCalendarDeleteCalendarEventsRequest coreCalendarDeleteCalendarEventsRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCalendarDeleteCalendarEventsValidateBeforeCall(coreCalendarDeleteCalendarEventsRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete calendar events (asynchronously)
     * Delete calendar events
     * @param coreCalendarDeleteCalendarEventsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCalendarDeleteCalendarEventsAsync(CoreCalendarDeleteCalendarEventsRequest coreCalendarDeleteCalendarEventsRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCalendarDeleteCalendarEventsValidateBeforeCall(coreCalendarDeleteCalendarEventsRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCalendarDeleteSubscription
     * @param coreCalendarDeleteSubscriptionRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCalendarDeleteSubscriptionCall(CoreCalendarDeleteSubscriptionRequest coreCalendarDeleteSubscriptionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCalendarDeleteSubscriptionRequest;

        // create path and map variables
        String localVarPath = "/core_calendar_delete_subscription";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCalendarDeleteSubscriptionValidateBeforeCall(CoreCalendarDeleteSubscriptionRequest coreCalendarDeleteSubscriptionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCalendarDeleteSubscriptionRequest' is set
        if (coreCalendarDeleteSubscriptionRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCalendarDeleteSubscriptionRequest' when calling coreCalendarDeleteSubscription(Async)");
        }

        return coreCalendarDeleteSubscriptionCall(coreCalendarDeleteSubscriptionRequest, _callback);

    }

    /**
     * Delete the calendar subscription
     * Delete the calendar subscription
     * @param coreCalendarDeleteSubscriptionRequest  (required)
     * @return CoreCalendarDeleteSubscription200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreCalendarDeleteSubscription200Response coreCalendarDeleteSubscription(CoreCalendarDeleteSubscriptionRequest coreCalendarDeleteSubscriptionRequest) throws ApiException {
        ApiResponse<CoreCalendarDeleteSubscription200Response> localVarResp = coreCalendarDeleteSubscriptionWithHttpInfo(coreCalendarDeleteSubscriptionRequest);
        return localVarResp.getData();
    }

    /**
     * Delete the calendar subscription
     * Delete the calendar subscription
     * @param coreCalendarDeleteSubscriptionRequest  (required)
     * @return ApiResponse&lt;CoreCalendarDeleteSubscription200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreCalendarDeleteSubscription200Response> coreCalendarDeleteSubscriptionWithHttpInfo(CoreCalendarDeleteSubscriptionRequest coreCalendarDeleteSubscriptionRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCalendarDeleteSubscriptionValidateBeforeCall(coreCalendarDeleteSubscriptionRequest, null);
        Type localVarReturnType = new TypeToken<CoreCalendarDeleteSubscription200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete the calendar subscription (asynchronously)
     * Delete the calendar subscription
     * @param coreCalendarDeleteSubscriptionRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCalendarDeleteSubscriptionAsync(CoreCalendarDeleteSubscriptionRequest coreCalendarDeleteSubscriptionRequest, final ApiCallback<CoreCalendarDeleteSubscription200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCalendarDeleteSubscriptionValidateBeforeCall(coreCalendarDeleteSubscriptionRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreCalendarDeleteSubscription200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCalendarGetActionEventsByCourse
     * @param coreCalendarGetActionEventsByCourseRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCalendarGetActionEventsByCourseCall(CoreCalendarGetActionEventsByCourseRequest coreCalendarGetActionEventsByCourseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCalendarGetActionEventsByCourseRequest;

        // create path and map variables
        String localVarPath = "/core_calendar_get_action_events_by_course";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCalendarGetActionEventsByCourseValidateBeforeCall(CoreCalendarGetActionEventsByCourseRequest coreCalendarGetActionEventsByCourseRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCalendarGetActionEventsByCourseRequest' is set
        if (coreCalendarGetActionEventsByCourseRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCalendarGetActionEventsByCourseRequest' when calling coreCalendarGetActionEventsByCourse(Async)");
        }

        return coreCalendarGetActionEventsByCourseCall(coreCalendarGetActionEventsByCourseRequest, _callback);

    }

    /**
     * Get calendar action events by course
     * Get calendar action events by course
     * @param coreCalendarGetActionEventsByCourseRequest  (required)
     * @return CoreCalendarGetActionEventsByCourse200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreCalendarGetActionEventsByCourse200Response coreCalendarGetActionEventsByCourse(CoreCalendarGetActionEventsByCourseRequest coreCalendarGetActionEventsByCourseRequest) throws ApiException {
        ApiResponse<CoreCalendarGetActionEventsByCourse200Response> localVarResp = coreCalendarGetActionEventsByCourseWithHttpInfo(coreCalendarGetActionEventsByCourseRequest);
        return localVarResp.getData();
    }

    /**
     * Get calendar action events by course
     * Get calendar action events by course
     * @param coreCalendarGetActionEventsByCourseRequest  (required)
     * @return ApiResponse&lt;CoreCalendarGetActionEventsByCourse200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreCalendarGetActionEventsByCourse200Response> coreCalendarGetActionEventsByCourseWithHttpInfo(CoreCalendarGetActionEventsByCourseRequest coreCalendarGetActionEventsByCourseRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCalendarGetActionEventsByCourseValidateBeforeCall(coreCalendarGetActionEventsByCourseRequest, null);
        Type localVarReturnType = new TypeToken<CoreCalendarGetActionEventsByCourse200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get calendar action events by course (asynchronously)
     * Get calendar action events by course
     * @param coreCalendarGetActionEventsByCourseRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCalendarGetActionEventsByCourseAsync(CoreCalendarGetActionEventsByCourseRequest coreCalendarGetActionEventsByCourseRequest, final ApiCallback<CoreCalendarGetActionEventsByCourse200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCalendarGetActionEventsByCourseValidateBeforeCall(coreCalendarGetActionEventsByCourseRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreCalendarGetActionEventsByCourse200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCalendarGetActionEventsByCourses
     * @param coreCalendarGetActionEventsByCoursesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCalendarGetActionEventsByCoursesCall(CoreCalendarGetActionEventsByCoursesRequest coreCalendarGetActionEventsByCoursesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCalendarGetActionEventsByCoursesRequest;

        // create path and map variables
        String localVarPath = "/core_calendar_get_action_events_by_courses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCalendarGetActionEventsByCoursesValidateBeforeCall(CoreCalendarGetActionEventsByCoursesRequest coreCalendarGetActionEventsByCoursesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCalendarGetActionEventsByCoursesRequest' is set
        if (coreCalendarGetActionEventsByCoursesRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCalendarGetActionEventsByCoursesRequest' when calling coreCalendarGetActionEventsByCourses(Async)");
        }

        return coreCalendarGetActionEventsByCoursesCall(coreCalendarGetActionEventsByCoursesRequest, _callback);

    }

    /**
     * Get calendar action events by courses
     * Get calendar action events by courses
     * @param coreCalendarGetActionEventsByCoursesRequest  (required)
     * @return CoreCalendarGetActionEventsByCourses200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreCalendarGetActionEventsByCourses200Response coreCalendarGetActionEventsByCourses(CoreCalendarGetActionEventsByCoursesRequest coreCalendarGetActionEventsByCoursesRequest) throws ApiException {
        ApiResponse<CoreCalendarGetActionEventsByCourses200Response> localVarResp = coreCalendarGetActionEventsByCoursesWithHttpInfo(coreCalendarGetActionEventsByCoursesRequest);
        return localVarResp.getData();
    }

    /**
     * Get calendar action events by courses
     * Get calendar action events by courses
     * @param coreCalendarGetActionEventsByCoursesRequest  (required)
     * @return ApiResponse&lt;CoreCalendarGetActionEventsByCourses200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreCalendarGetActionEventsByCourses200Response> coreCalendarGetActionEventsByCoursesWithHttpInfo(CoreCalendarGetActionEventsByCoursesRequest coreCalendarGetActionEventsByCoursesRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCalendarGetActionEventsByCoursesValidateBeforeCall(coreCalendarGetActionEventsByCoursesRequest, null);
        Type localVarReturnType = new TypeToken<CoreCalendarGetActionEventsByCourses200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get calendar action events by courses (asynchronously)
     * Get calendar action events by courses
     * @param coreCalendarGetActionEventsByCoursesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCalendarGetActionEventsByCoursesAsync(CoreCalendarGetActionEventsByCoursesRequest coreCalendarGetActionEventsByCoursesRequest, final ApiCallback<CoreCalendarGetActionEventsByCourses200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCalendarGetActionEventsByCoursesValidateBeforeCall(coreCalendarGetActionEventsByCoursesRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreCalendarGetActionEventsByCourses200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCalendarGetActionEventsByTimesort
     * @param coreCalendarGetActionEventsByTimesortRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCalendarGetActionEventsByTimesortCall(CoreCalendarGetActionEventsByTimesortRequest coreCalendarGetActionEventsByTimesortRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCalendarGetActionEventsByTimesortRequest;

        // create path and map variables
        String localVarPath = "/core_calendar_get_action_events_by_timesort";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCalendarGetActionEventsByTimesortValidateBeforeCall(CoreCalendarGetActionEventsByTimesortRequest coreCalendarGetActionEventsByTimesortRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCalendarGetActionEventsByTimesortRequest' is set
        if (coreCalendarGetActionEventsByTimesortRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCalendarGetActionEventsByTimesortRequest' when calling coreCalendarGetActionEventsByTimesort(Async)");
        }

        return coreCalendarGetActionEventsByTimesortCall(coreCalendarGetActionEventsByTimesortRequest, _callback);

    }

    /**
     * Get calendar action events by tiemsort
     * Get calendar action events by tiemsort
     * @param coreCalendarGetActionEventsByTimesortRequest  (required)
     * @return CoreCalendarGetActionEventsByTimesort200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreCalendarGetActionEventsByTimesort200Response coreCalendarGetActionEventsByTimesort(CoreCalendarGetActionEventsByTimesortRequest coreCalendarGetActionEventsByTimesortRequest) throws ApiException {
        ApiResponse<CoreCalendarGetActionEventsByTimesort200Response> localVarResp = coreCalendarGetActionEventsByTimesortWithHttpInfo(coreCalendarGetActionEventsByTimesortRequest);
        return localVarResp.getData();
    }

    /**
     * Get calendar action events by tiemsort
     * Get calendar action events by tiemsort
     * @param coreCalendarGetActionEventsByTimesortRequest  (required)
     * @return ApiResponse&lt;CoreCalendarGetActionEventsByTimesort200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreCalendarGetActionEventsByTimesort200Response> coreCalendarGetActionEventsByTimesortWithHttpInfo(CoreCalendarGetActionEventsByTimesortRequest coreCalendarGetActionEventsByTimesortRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCalendarGetActionEventsByTimesortValidateBeforeCall(coreCalendarGetActionEventsByTimesortRequest, null);
        Type localVarReturnType = new TypeToken<CoreCalendarGetActionEventsByTimesort200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get calendar action events by tiemsort (asynchronously)
     * Get calendar action events by tiemsort
     * @param coreCalendarGetActionEventsByTimesortRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCalendarGetActionEventsByTimesortAsync(CoreCalendarGetActionEventsByTimesortRequest coreCalendarGetActionEventsByTimesortRequest, final ApiCallback<CoreCalendarGetActionEventsByTimesort200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCalendarGetActionEventsByTimesortValidateBeforeCall(coreCalendarGetActionEventsByTimesortRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreCalendarGetActionEventsByTimesort200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCalendarGetAllowedEventTypes
     * @param coreCalendarGetAllowedEventTypesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCalendarGetAllowedEventTypesCall(CoreCalendarGetAllowedEventTypesRequest coreCalendarGetAllowedEventTypesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCalendarGetAllowedEventTypesRequest;

        // create path and map variables
        String localVarPath = "/core_calendar_get_allowed_event_types";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCalendarGetAllowedEventTypesValidateBeforeCall(CoreCalendarGetAllowedEventTypesRequest coreCalendarGetAllowedEventTypesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCalendarGetAllowedEventTypesRequest' is set
        if (coreCalendarGetAllowedEventTypesRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCalendarGetAllowedEventTypesRequest' when calling coreCalendarGetAllowedEventTypes(Async)");
        }

        return coreCalendarGetAllowedEventTypesCall(coreCalendarGetAllowedEventTypesRequest, _callback);

    }

    /**
     * Get the type of events a user can create in the given course.
     * Get the type of events a user can create in the given course.
     * @param coreCalendarGetAllowedEventTypesRequest  (required)
     * @return CoreCalendarGetAllowedEventTypes200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreCalendarGetAllowedEventTypes200Response coreCalendarGetAllowedEventTypes(CoreCalendarGetAllowedEventTypesRequest coreCalendarGetAllowedEventTypesRequest) throws ApiException {
        ApiResponse<CoreCalendarGetAllowedEventTypes200Response> localVarResp = coreCalendarGetAllowedEventTypesWithHttpInfo(coreCalendarGetAllowedEventTypesRequest);
        return localVarResp.getData();
    }

    /**
     * Get the type of events a user can create in the given course.
     * Get the type of events a user can create in the given course.
     * @param coreCalendarGetAllowedEventTypesRequest  (required)
     * @return ApiResponse&lt;CoreCalendarGetAllowedEventTypes200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreCalendarGetAllowedEventTypes200Response> coreCalendarGetAllowedEventTypesWithHttpInfo(CoreCalendarGetAllowedEventTypesRequest coreCalendarGetAllowedEventTypesRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCalendarGetAllowedEventTypesValidateBeforeCall(coreCalendarGetAllowedEventTypesRequest, null);
        Type localVarReturnType = new TypeToken<CoreCalendarGetAllowedEventTypes200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the type of events a user can create in the given course. (asynchronously)
     * Get the type of events a user can create in the given course.
     * @param coreCalendarGetAllowedEventTypesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCalendarGetAllowedEventTypesAsync(CoreCalendarGetAllowedEventTypesRequest coreCalendarGetAllowedEventTypesRequest, final ApiCallback<CoreCalendarGetAllowedEventTypes200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCalendarGetAllowedEventTypesValidateBeforeCall(coreCalendarGetAllowedEventTypesRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreCalendarGetAllowedEventTypes200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCalendarGetCalendarAccessInformation
     * @param coreCalendarGetCalendarAccessInformationRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCalendarGetCalendarAccessInformationCall(CoreCalendarGetCalendarAccessInformationRequest coreCalendarGetCalendarAccessInformationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCalendarGetCalendarAccessInformationRequest;

        // create path and map variables
        String localVarPath = "/core_calendar_get_calendar_access_information";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCalendarGetCalendarAccessInformationValidateBeforeCall(CoreCalendarGetCalendarAccessInformationRequest coreCalendarGetCalendarAccessInformationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCalendarGetCalendarAccessInformationRequest' is set
        if (coreCalendarGetCalendarAccessInformationRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCalendarGetCalendarAccessInformationRequest' when calling coreCalendarGetCalendarAccessInformation(Async)");
        }

        return coreCalendarGetCalendarAccessInformationCall(coreCalendarGetCalendarAccessInformationRequest, _callback);

    }

    /**
     * Convenience function to retrieve some permissions/access information for the given course calendar.
     * Convenience function to retrieve some permissions/access information for the given course calendar.
     * @param coreCalendarGetCalendarAccessInformationRequest  (required)
     * @return CoreCalendarGetCalendarAccessInformation200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreCalendarGetCalendarAccessInformation200Response coreCalendarGetCalendarAccessInformation(CoreCalendarGetCalendarAccessInformationRequest coreCalendarGetCalendarAccessInformationRequest) throws ApiException {
        ApiResponse<CoreCalendarGetCalendarAccessInformation200Response> localVarResp = coreCalendarGetCalendarAccessInformationWithHttpInfo(coreCalendarGetCalendarAccessInformationRequest);
        return localVarResp.getData();
    }

    /**
     * Convenience function to retrieve some permissions/access information for the given course calendar.
     * Convenience function to retrieve some permissions/access information for the given course calendar.
     * @param coreCalendarGetCalendarAccessInformationRequest  (required)
     * @return ApiResponse&lt;CoreCalendarGetCalendarAccessInformation200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreCalendarGetCalendarAccessInformation200Response> coreCalendarGetCalendarAccessInformationWithHttpInfo(CoreCalendarGetCalendarAccessInformationRequest coreCalendarGetCalendarAccessInformationRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCalendarGetCalendarAccessInformationValidateBeforeCall(coreCalendarGetCalendarAccessInformationRequest, null);
        Type localVarReturnType = new TypeToken<CoreCalendarGetCalendarAccessInformation200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Convenience function to retrieve some permissions/access information for the given course calendar. (asynchronously)
     * Convenience function to retrieve some permissions/access information for the given course calendar.
     * @param coreCalendarGetCalendarAccessInformationRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCalendarGetCalendarAccessInformationAsync(CoreCalendarGetCalendarAccessInformationRequest coreCalendarGetCalendarAccessInformationRequest, final ApiCallback<CoreCalendarGetCalendarAccessInformation200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCalendarGetCalendarAccessInformationValidateBeforeCall(coreCalendarGetCalendarAccessInformationRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreCalendarGetCalendarAccessInformation200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCalendarGetCalendarDayView
     * @param coreCalendarGetCalendarDayViewRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCalendarGetCalendarDayViewCall(CoreCalendarGetCalendarDayViewRequest coreCalendarGetCalendarDayViewRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCalendarGetCalendarDayViewRequest;

        // create path and map variables
        String localVarPath = "/core_calendar_get_calendar_day_view";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCalendarGetCalendarDayViewValidateBeforeCall(CoreCalendarGetCalendarDayViewRequest coreCalendarGetCalendarDayViewRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCalendarGetCalendarDayViewRequest' is set
        if (coreCalendarGetCalendarDayViewRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCalendarGetCalendarDayViewRequest' when calling coreCalendarGetCalendarDayView(Async)");
        }

        return coreCalendarGetCalendarDayViewCall(coreCalendarGetCalendarDayViewRequest, _callback);

    }

    /**
     * Fetch the day view data for a calendar
     * Fetch the day view data for a calendar
     * @param coreCalendarGetCalendarDayViewRequest  (required)
     * @return CoreCalendarGetCalendarDayView200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreCalendarGetCalendarDayView200Response coreCalendarGetCalendarDayView(CoreCalendarGetCalendarDayViewRequest coreCalendarGetCalendarDayViewRequest) throws ApiException {
        ApiResponse<CoreCalendarGetCalendarDayView200Response> localVarResp = coreCalendarGetCalendarDayViewWithHttpInfo(coreCalendarGetCalendarDayViewRequest);
        return localVarResp.getData();
    }

    /**
     * Fetch the day view data for a calendar
     * Fetch the day view data for a calendar
     * @param coreCalendarGetCalendarDayViewRequest  (required)
     * @return ApiResponse&lt;CoreCalendarGetCalendarDayView200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreCalendarGetCalendarDayView200Response> coreCalendarGetCalendarDayViewWithHttpInfo(CoreCalendarGetCalendarDayViewRequest coreCalendarGetCalendarDayViewRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCalendarGetCalendarDayViewValidateBeforeCall(coreCalendarGetCalendarDayViewRequest, null);
        Type localVarReturnType = new TypeToken<CoreCalendarGetCalendarDayView200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch the day view data for a calendar (asynchronously)
     * Fetch the day view data for a calendar
     * @param coreCalendarGetCalendarDayViewRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCalendarGetCalendarDayViewAsync(CoreCalendarGetCalendarDayViewRequest coreCalendarGetCalendarDayViewRequest, final ApiCallback<CoreCalendarGetCalendarDayView200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCalendarGetCalendarDayViewValidateBeforeCall(coreCalendarGetCalendarDayViewRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreCalendarGetCalendarDayView200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCalendarGetCalendarEventById
     * @param coreCalendarGetCalendarEventByIdRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCalendarGetCalendarEventByIdCall(CoreCalendarGetCalendarEventByIdRequest coreCalendarGetCalendarEventByIdRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCalendarGetCalendarEventByIdRequest;

        // create path and map variables
        String localVarPath = "/core_calendar_get_calendar_event_by_id";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCalendarGetCalendarEventByIdValidateBeforeCall(CoreCalendarGetCalendarEventByIdRequest coreCalendarGetCalendarEventByIdRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCalendarGetCalendarEventByIdRequest' is set
        if (coreCalendarGetCalendarEventByIdRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCalendarGetCalendarEventByIdRequest' when calling coreCalendarGetCalendarEventById(Async)");
        }

        return coreCalendarGetCalendarEventByIdCall(coreCalendarGetCalendarEventByIdRequest, _callback);

    }

    /**
     * Get calendar event by id
     * Get calendar event by id
     * @param coreCalendarGetCalendarEventByIdRequest  (required)
     * @return CoreCalendarGetCalendarEventById200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreCalendarGetCalendarEventById200Response coreCalendarGetCalendarEventById(CoreCalendarGetCalendarEventByIdRequest coreCalendarGetCalendarEventByIdRequest) throws ApiException {
        ApiResponse<CoreCalendarGetCalendarEventById200Response> localVarResp = coreCalendarGetCalendarEventByIdWithHttpInfo(coreCalendarGetCalendarEventByIdRequest);
        return localVarResp.getData();
    }

    /**
     * Get calendar event by id
     * Get calendar event by id
     * @param coreCalendarGetCalendarEventByIdRequest  (required)
     * @return ApiResponse&lt;CoreCalendarGetCalendarEventById200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreCalendarGetCalendarEventById200Response> coreCalendarGetCalendarEventByIdWithHttpInfo(CoreCalendarGetCalendarEventByIdRequest coreCalendarGetCalendarEventByIdRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCalendarGetCalendarEventByIdValidateBeforeCall(coreCalendarGetCalendarEventByIdRequest, null);
        Type localVarReturnType = new TypeToken<CoreCalendarGetCalendarEventById200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get calendar event by id (asynchronously)
     * Get calendar event by id
     * @param coreCalendarGetCalendarEventByIdRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCalendarGetCalendarEventByIdAsync(CoreCalendarGetCalendarEventByIdRequest coreCalendarGetCalendarEventByIdRequest, final ApiCallback<CoreCalendarGetCalendarEventById200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCalendarGetCalendarEventByIdValidateBeforeCall(coreCalendarGetCalendarEventByIdRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreCalendarGetCalendarEventById200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCalendarGetCalendarEvents
     * @param coreCalendarGetCalendarEventsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCalendarGetCalendarEventsCall(CoreCalendarGetCalendarEventsRequest coreCalendarGetCalendarEventsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCalendarGetCalendarEventsRequest;

        // create path and map variables
        String localVarPath = "/core_calendar_get_calendar_events";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCalendarGetCalendarEventsValidateBeforeCall(CoreCalendarGetCalendarEventsRequest coreCalendarGetCalendarEventsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCalendarGetCalendarEventsRequest' is set
        if (coreCalendarGetCalendarEventsRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCalendarGetCalendarEventsRequest' when calling coreCalendarGetCalendarEvents(Async)");
        }

        return coreCalendarGetCalendarEventsCall(coreCalendarGetCalendarEventsRequest, _callback);

    }

    /**
     * Get calendar events
     * Get calendar events
     * @param coreCalendarGetCalendarEventsRequest  (required)
     * @return CoreCalendarGetCalendarEvents200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreCalendarGetCalendarEvents200Response coreCalendarGetCalendarEvents(CoreCalendarGetCalendarEventsRequest coreCalendarGetCalendarEventsRequest) throws ApiException {
        ApiResponse<CoreCalendarGetCalendarEvents200Response> localVarResp = coreCalendarGetCalendarEventsWithHttpInfo(coreCalendarGetCalendarEventsRequest);
        return localVarResp.getData();
    }

    /**
     * Get calendar events
     * Get calendar events
     * @param coreCalendarGetCalendarEventsRequest  (required)
     * @return ApiResponse&lt;CoreCalendarGetCalendarEvents200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreCalendarGetCalendarEvents200Response> coreCalendarGetCalendarEventsWithHttpInfo(CoreCalendarGetCalendarEventsRequest coreCalendarGetCalendarEventsRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCalendarGetCalendarEventsValidateBeforeCall(coreCalendarGetCalendarEventsRequest, null);
        Type localVarReturnType = new TypeToken<CoreCalendarGetCalendarEvents200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get calendar events (asynchronously)
     * Get calendar events
     * @param coreCalendarGetCalendarEventsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCalendarGetCalendarEventsAsync(CoreCalendarGetCalendarEventsRequest coreCalendarGetCalendarEventsRequest, final ApiCallback<CoreCalendarGetCalendarEvents200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCalendarGetCalendarEventsValidateBeforeCall(coreCalendarGetCalendarEventsRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreCalendarGetCalendarEvents200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCalendarGetCalendarExportToken
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCalendarGetCalendarExportTokenCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/core_calendar_get_calendar_export_token";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCalendarGetCalendarExportTokenValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return coreCalendarGetCalendarExportTokenCall(_callback);

    }

    /**
     * Return the auth token required for exporting a calendar.
     * Return the auth token required for exporting a calendar.
     * @return CoreCalendarGetCalendarExportToken200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreCalendarGetCalendarExportToken200Response coreCalendarGetCalendarExportToken() throws ApiException {
        ApiResponse<CoreCalendarGetCalendarExportToken200Response> localVarResp = coreCalendarGetCalendarExportTokenWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Return the auth token required for exporting a calendar.
     * Return the auth token required for exporting a calendar.
     * @return ApiResponse&lt;CoreCalendarGetCalendarExportToken200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreCalendarGetCalendarExportToken200Response> coreCalendarGetCalendarExportTokenWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = coreCalendarGetCalendarExportTokenValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<CoreCalendarGetCalendarExportToken200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the auth token required for exporting a calendar. (asynchronously)
     * Return the auth token required for exporting a calendar.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCalendarGetCalendarExportTokenAsync(final ApiCallback<CoreCalendarGetCalendarExportToken200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCalendarGetCalendarExportTokenValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<CoreCalendarGetCalendarExportToken200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCalendarGetCalendarMonthlyView
     * @param coreCalendarGetCalendarMonthlyViewRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCalendarGetCalendarMonthlyViewCall(CoreCalendarGetCalendarMonthlyViewRequest coreCalendarGetCalendarMonthlyViewRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCalendarGetCalendarMonthlyViewRequest;

        // create path and map variables
        String localVarPath = "/core_calendar_get_calendar_monthly_view";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCalendarGetCalendarMonthlyViewValidateBeforeCall(CoreCalendarGetCalendarMonthlyViewRequest coreCalendarGetCalendarMonthlyViewRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCalendarGetCalendarMonthlyViewRequest' is set
        if (coreCalendarGetCalendarMonthlyViewRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCalendarGetCalendarMonthlyViewRequest' when calling coreCalendarGetCalendarMonthlyView(Async)");
        }

        return coreCalendarGetCalendarMonthlyViewCall(coreCalendarGetCalendarMonthlyViewRequest, _callback);

    }

    /**
     * Fetch the monthly view data for a calendar
     * Fetch the monthly view data for a calendar
     * @param coreCalendarGetCalendarMonthlyViewRequest  (required)
     * @return CoreCalendarGetCalendarMonthlyView200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreCalendarGetCalendarMonthlyView200Response coreCalendarGetCalendarMonthlyView(CoreCalendarGetCalendarMonthlyViewRequest coreCalendarGetCalendarMonthlyViewRequest) throws ApiException {
        ApiResponse<CoreCalendarGetCalendarMonthlyView200Response> localVarResp = coreCalendarGetCalendarMonthlyViewWithHttpInfo(coreCalendarGetCalendarMonthlyViewRequest);
        return localVarResp.getData();
    }

    /**
     * Fetch the monthly view data for a calendar
     * Fetch the monthly view data for a calendar
     * @param coreCalendarGetCalendarMonthlyViewRequest  (required)
     * @return ApiResponse&lt;CoreCalendarGetCalendarMonthlyView200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreCalendarGetCalendarMonthlyView200Response> coreCalendarGetCalendarMonthlyViewWithHttpInfo(CoreCalendarGetCalendarMonthlyViewRequest coreCalendarGetCalendarMonthlyViewRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCalendarGetCalendarMonthlyViewValidateBeforeCall(coreCalendarGetCalendarMonthlyViewRequest, null);
        Type localVarReturnType = new TypeToken<CoreCalendarGetCalendarMonthlyView200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch the monthly view data for a calendar (asynchronously)
     * Fetch the monthly view data for a calendar
     * @param coreCalendarGetCalendarMonthlyViewRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCalendarGetCalendarMonthlyViewAsync(CoreCalendarGetCalendarMonthlyViewRequest coreCalendarGetCalendarMonthlyViewRequest, final ApiCallback<CoreCalendarGetCalendarMonthlyView200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCalendarGetCalendarMonthlyViewValidateBeforeCall(coreCalendarGetCalendarMonthlyViewRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreCalendarGetCalendarMonthlyView200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCalendarGetCalendarUpcomingView
     * @param coreCalendarGetCalendarUpcomingViewRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCalendarGetCalendarUpcomingViewCall(CoreCalendarGetCalendarUpcomingViewRequest coreCalendarGetCalendarUpcomingViewRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCalendarGetCalendarUpcomingViewRequest;

        // create path and map variables
        String localVarPath = "/core_calendar_get_calendar_upcoming_view";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCalendarGetCalendarUpcomingViewValidateBeforeCall(CoreCalendarGetCalendarUpcomingViewRequest coreCalendarGetCalendarUpcomingViewRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCalendarGetCalendarUpcomingViewRequest' is set
        if (coreCalendarGetCalendarUpcomingViewRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCalendarGetCalendarUpcomingViewRequest' when calling coreCalendarGetCalendarUpcomingView(Async)");
        }

        return coreCalendarGetCalendarUpcomingViewCall(coreCalendarGetCalendarUpcomingViewRequest, _callback);

    }

    /**
     * Fetch the upcoming view data for a calendar
     * Fetch the upcoming view data for a calendar
     * @param coreCalendarGetCalendarUpcomingViewRequest  (required)
     * @return CoreCalendarGetCalendarUpcomingView200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreCalendarGetCalendarUpcomingView200Response coreCalendarGetCalendarUpcomingView(CoreCalendarGetCalendarUpcomingViewRequest coreCalendarGetCalendarUpcomingViewRequest) throws ApiException {
        ApiResponse<CoreCalendarGetCalendarUpcomingView200Response> localVarResp = coreCalendarGetCalendarUpcomingViewWithHttpInfo(coreCalendarGetCalendarUpcomingViewRequest);
        return localVarResp.getData();
    }

    /**
     * Fetch the upcoming view data for a calendar
     * Fetch the upcoming view data for a calendar
     * @param coreCalendarGetCalendarUpcomingViewRequest  (required)
     * @return ApiResponse&lt;CoreCalendarGetCalendarUpcomingView200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreCalendarGetCalendarUpcomingView200Response> coreCalendarGetCalendarUpcomingViewWithHttpInfo(CoreCalendarGetCalendarUpcomingViewRequest coreCalendarGetCalendarUpcomingViewRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCalendarGetCalendarUpcomingViewValidateBeforeCall(coreCalendarGetCalendarUpcomingViewRequest, null);
        Type localVarReturnType = new TypeToken<CoreCalendarGetCalendarUpcomingView200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch the upcoming view data for a calendar (asynchronously)
     * Fetch the upcoming view data for a calendar
     * @param coreCalendarGetCalendarUpcomingViewRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCalendarGetCalendarUpcomingViewAsync(CoreCalendarGetCalendarUpcomingViewRequest coreCalendarGetCalendarUpcomingViewRequest, final ApiCallback<CoreCalendarGetCalendarUpcomingView200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCalendarGetCalendarUpcomingViewValidateBeforeCall(coreCalendarGetCalendarUpcomingViewRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreCalendarGetCalendarUpcomingView200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCalendarGetTimestamps
     * @param coreCalendarGetTimestampsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCalendarGetTimestampsCall(CoreCalendarGetTimestampsRequest coreCalendarGetTimestampsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCalendarGetTimestampsRequest;

        // create path and map variables
        String localVarPath = "/core_calendar_get_timestamps";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCalendarGetTimestampsValidateBeforeCall(CoreCalendarGetTimestampsRequest coreCalendarGetTimestampsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCalendarGetTimestampsRequest' is set
        if (coreCalendarGetTimestampsRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCalendarGetTimestampsRequest' when calling coreCalendarGetTimestamps(Async)");
        }

        return coreCalendarGetTimestampsCall(coreCalendarGetTimestampsRequest, _callback);

    }

    /**
     * Fetch unix timestamps for given date times.
     * Fetch unix timestamps for given date times.
     * @param coreCalendarGetTimestampsRequest  (required)
     * @return CoreCalendarGetTimestamps200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreCalendarGetTimestamps200Response coreCalendarGetTimestamps(CoreCalendarGetTimestampsRequest coreCalendarGetTimestampsRequest) throws ApiException {
        ApiResponse<CoreCalendarGetTimestamps200Response> localVarResp = coreCalendarGetTimestampsWithHttpInfo(coreCalendarGetTimestampsRequest);
        return localVarResp.getData();
    }

    /**
     * Fetch unix timestamps for given date times.
     * Fetch unix timestamps for given date times.
     * @param coreCalendarGetTimestampsRequest  (required)
     * @return ApiResponse&lt;CoreCalendarGetTimestamps200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreCalendarGetTimestamps200Response> coreCalendarGetTimestampsWithHttpInfo(CoreCalendarGetTimestampsRequest coreCalendarGetTimestampsRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCalendarGetTimestampsValidateBeforeCall(coreCalendarGetTimestampsRequest, null);
        Type localVarReturnType = new TypeToken<CoreCalendarGetTimestamps200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch unix timestamps for given date times. (asynchronously)
     * Fetch unix timestamps for given date times.
     * @param coreCalendarGetTimestampsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCalendarGetTimestampsAsync(CoreCalendarGetTimestampsRequest coreCalendarGetTimestampsRequest, final ApiCallback<CoreCalendarGetTimestamps200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCalendarGetTimestampsValidateBeforeCall(coreCalendarGetTimestampsRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreCalendarGetTimestamps200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCalendarSubmitCreateUpdateForm
     * @param coreCalendarSubmitCreateUpdateFormRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCalendarSubmitCreateUpdateFormCall(CoreCalendarSubmitCreateUpdateFormRequest coreCalendarSubmitCreateUpdateFormRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCalendarSubmitCreateUpdateFormRequest;

        // create path and map variables
        String localVarPath = "/core_calendar_submit_create_update_form";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCalendarSubmitCreateUpdateFormValidateBeforeCall(CoreCalendarSubmitCreateUpdateFormRequest coreCalendarSubmitCreateUpdateFormRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCalendarSubmitCreateUpdateFormRequest' is set
        if (coreCalendarSubmitCreateUpdateFormRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCalendarSubmitCreateUpdateFormRequest' when calling coreCalendarSubmitCreateUpdateForm(Async)");
        }

        return coreCalendarSubmitCreateUpdateFormCall(coreCalendarSubmitCreateUpdateFormRequest, _callback);

    }

    /**
     * Submit form data for event form
     * Submit form data for event form
     * @param coreCalendarSubmitCreateUpdateFormRequest  (required)
     * @return CoreCalendarSubmitCreateUpdateForm200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreCalendarSubmitCreateUpdateForm200Response coreCalendarSubmitCreateUpdateForm(CoreCalendarSubmitCreateUpdateFormRequest coreCalendarSubmitCreateUpdateFormRequest) throws ApiException {
        ApiResponse<CoreCalendarSubmitCreateUpdateForm200Response> localVarResp = coreCalendarSubmitCreateUpdateFormWithHttpInfo(coreCalendarSubmitCreateUpdateFormRequest);
        return localVarResp.getData();
    }

    /**
     * Submit form data for event form
     * Submit form data for event form
     * @param coreCalendarSubmitCreateUpdateFormRequest  (required)
     * @return ApiResponse&lt;CoreCalendarSubmitCreateUpdateForm200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreCalendarSubmitCreateUpdateForm200Response> coreCalendarSubmitCreateUpdateFormWithHttpInfo(CoreCalendarSubmitCreateUpdateFormRequest coreCalendarSubmitCreateUpdateFormRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCalendarSubmitCreateUpdateFormValidateBeforeCall(coreCalendarSubmitCreateUpdateFormRequest, null);
        Type localVarReturnType = new TypeToken<CoreCalendarSubmitCreateUpdateForm200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Submit form data for event form (asynchronously)
     * Submit form data for event form
     * @param coreCalendarSubmitCreateUpdateFormRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCalendarSubmitCreateUpdateFormAsync(CoreCalendarSubmitCreateUpdateFormRequest coreCalendarSubmitCreateUpdateFormRequest, final ApiCallback<CoreCalendarSubmitCreateUpdateForm200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCalendarSubmitCreateUpdateFormValidateBeforeCall(coreCalendarSubmitCreateUpdateFormRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreCalendarSubmitCreateUpdateForm200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCalendarUpdateEventStartDay
     * @param coreCalendarUpdateEventStartDayRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCalendarUpdateEventStartDayCall(CoreCalendarUpdateEventStartDayRequest coreCalendarUpdateEventStartDayRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCalendarUpdateEventStartDayRequest;

        // create path and map variables
        String localVarPath = "/core_calendar_update_event_start_day";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCalendarUpdateEventStartDayValidateBeforeCall(CoreCalendarUpdateEventStartDayRequest coreCalendarUpdateEventStartDayRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCalendarUpdateEventStartDayRequest' is set
        if (coreCalendarUpdateEventStartDayRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCalendarUpdateEventStartDayRequest' when calling coreCalendarUpdateEventStartDay(Async)");
        }

        return coreCalendarUpdateEventStartDayCall(coreCalendarUpdateEventStartDayRequest, _callback);

    }

    /**
     * Update the start day (but not time) for an event.
     * Update the start day (but not time) for an event.
     * @param coreCalendarUpdateEventStartDayRequest  (required)
     * @return CoreCalendarUpdateEventStartDay200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreCalendarUpdateEventStartDay200Response coreCalendarUpdateEventStartDay(CoreCalendarUpdateEventStartDayRequest coreCalendarUpdateEventStartDayRequest) throws ApiException {
        ApiResponse<CoreCalendarUpdateEventStartDay200Response> localVarResp = coreCalendarUpdateEventStartDayWithHttpInfo(coreCalendarUpdateEventStartDayRequest);
        return localVarResp.getData();
    }

    /**
     * Update the start day (but not time) for an event.
     * Update the start day (but not time) for an event.
     * @param coreCalendarUpdateEventStartDayRequest  (required)
     * @return ApiResponse&lt;CoreCalendarUpdateEventStartDay200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreCalendarUpdateEventStartDay200Response> coreCalendarUpdateEventStartDayWithHttpInfo(CoreCalendarUpdateEventStartDayRequest coreCalendarUpdateEventStartDayRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCalendarUpdateEventStartDayValidateBeforeCall(coreCalendarUpdateEventStartDayRequest, null);
        Type localVarReturnType = new TypeToken<CoreCalendarUpdateEventStartDay200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the start day (but not time) for an event. (asynchronously)
     * Update the start day (but not time) for an event.
     * @param coreCalendarUpdateEventStartDayRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCalendarUpdateEventStartDayAsync(CoreCalendarUpdateEventStartDayRequest coreCalendarUpdateEventStartDayRequest, final ApiCallback<CoreCalendarUpdateEventStartDay200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCalendarUpdateEventStartDayValidateBeforeCall(coreCalendarUpdateEventStartDayRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreCalendarUpdateEventStartDay200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreChangeEditmode
     * @param coreChangeEditmodeRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editmode </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreChangeEditmodeCall(CoreChangeEditmodeRequest coreChangeEditmodeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreChangeEditmodeRequest;

        // create path and map variables
        String localVarPath = "/core_change_editmode";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreChangeEditmodeValidateBeforeCall(CoreChangeEditmodeRequest coreChangeEditmodeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreChangeEditmodeRequest' is set
        if (coreChangeEditmodeRequest == null) {
            throw new ApiException("Missing the required parameter 'coreChangeEditmodeRequest' when calling coreChangeEditmode(Async)");
        }

        return coreChangeEditmodeCall(coreChangeEditmodeRequest, _callback);

    }

    /**
     * Change the editing mode
     * Change the editing mode
     * @param coreChangeEditmodeRequest  (required)
     * @return CoreChangeEditmode200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editmode </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreChangeEditmode200Response coreChangeEditmode(CoreChangeEditmodeRequest coreChangeEditmodeRequest) throws ApiException {
        ApiResponse<CoreChangeEditmode200Response> localVarResp = coreChangeEditmodeWithHttpInfo(coreChangeEditmodeRequest);
        return localVarResp.getData();
    }

    /**
     * Change the editing mode
     * Change the editing mode
     * @param coreChangeEditmodeRequest  (required)
     * @return ApiResponse&lt;CoreChangeEditmode200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editmode </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreChangeEditmode200Response> coreChangeEditmodeWithHttpInfo(CoreChangeEditmodeRequest coreChangeEditmodeRequest) throws ApiException {
        okhttp3.Call localVarCall = coreChangeEditmodeValidateBeforeCall(coreChangeEditmodeRequest, null);
        Type localVarReturnType = new TypeToken<CoreChangeEditmode200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change the editing mode (asynchronously)
     * Change the editing mode
     * @param coreChangeEditmodeRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editmode </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreChangeEditmodeAsync(CoreChangeEditmodeRequest coreChangeEditmodeRequest, final ApiCallback<CoreChangeEditmode200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreChangeEditmodeValidateBeforeCall(coreChangeEditmodeRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreChangeEditmode200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCohortAddCohortMembers
     * @param coreCohortAddCohortMembersRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCohortAddCohortMembersCall(CoreCohortAddCohortMembersRequest coreCohortAddCohortMembersRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCohortAddCohortMembersRequest;

        // create path and map variables
        String localVarPath = "/core_cohort_add_cohort_members";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCohortAddCohortMembersValidateBeforeCall(CoreCohortAddCohortMembersRequest coreCohortAddCohortMembersRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCohortAddCohortMembersRequest' is set
        if (coreCohortAddCohortMembersRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCohortAddCohortMembersRequest' when calling coreCohortAddCohortMembers(Async)");
        }

        return coreCohortAddCohortMembersCall(coreCohortAddCohortMembersRequest, _callback);

    }

    /**
     * Adds cohort members.
     * Adds cohort members.
     * @param coreCohortAddCohortMembersRequest  (required)
     * @return CoreCohortAddCohortMembers200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreCohortAddCohortMembers200Response coreCohortAddCohortMembers(CoreCohortAddCohortMembersRequest coreCohortAddCohortMembersRequest) throws ApiException {
        ApiResponse<CoreCohortAddCohortMembers200Response> localVarResp = coreCohortAddCohortMembersWithHttpInfo(coreCohortAddCohortMembersRequest);
        return localVarResp.getData();
    }

    /**
     * Adds cohort members.
     * Adds cohort members.
     * @param coreCohortAddCohortMembersRequest  (required)
     * @return ApiResponse&lt;CoreCohortAddCohortMembers200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreCohortAddCohortMembers200Response> coreCohortAddCohortMembersWithHttpInfo(CoreCohortAddCohortMembersRequest coreCohortAddCohortMembersRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCohortAddCohortMembersValidateBeforeCall(coreCohortAddCohortMembersRequest, null);
        Type localVarReturnType = new TypeToken<CoreCohortAddCohortMembers200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Adds cohort members. (asynchronously)
     * Adds cohort members.
     * @param coreCohortAddCohortMembersRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCohortAddCohortMembersAsync(CoreCohortAddCohortMembersRequest coreCohortAddCohortMembersRequest, final ApiCallback<CoreCohortAddCohortMembers200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCohortAddCohortMembersValidateBeforeCall(coreCohortAddCohortMembersRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreCohortAddCohortMembers200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCohortCreateCohorts
     * @param coreCohortCreateCohortsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCohortCreateCohortsCall(CoreCohortCreateCohortsRequest coreCohortCreateCohortsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCohortCreateCohortsRequest;

        // create path and map variables
        String localVarPath = "/core_cohort_create_cohorts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCohortCreateCohortsValidateBeforeCall(CoreCohortCreateCohortsRequest coreCohortCreateCohortsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCohortCreateCohortsRequest' is set
        if (coreCohortCreateCohortsRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCohortCreateCohortsRequest' when calling coreCohortCreateCohorts(Async)");
        }

        return coreCohortCreateCohortsCall(coreCohortCreateCohortsRequest, _callback);

    }

    /**
     * Creates new cohorts.
     * Creates new cohorts.
     * @param coreCohortCreateCohortsRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreCohortCreateCohorts(CoreCohortCreateCohortsRequest coreCohortCreateCohortsRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreCohortCreateCohortsWithHttpInfo(coreCohortCreateCohortsRequest);
        return localVarResp.getData();
    }

    /**
     * Creates new cohorts.
     * Creates new cohorts.
     * @param coreCohortCreateCohortsRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreCohortCreateCohortsWithHttpInfo(CoreCohortCreateCohortsRequest coreCohortCreateCohortsRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCohortCreateCohortsValidateBeforeCall(coreCohortCreateCohortsRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates new cohorts. (asynchronously)
     * Creates new cohorts.
     * @param coreCohortCreateCohortsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCohortCreateCohortsAsync(CoreCohortCreateCohortsRequest coreCohortCreateCohortsRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCohortCreateCohortsValidateBeforeCall(coreCohortCreateCohortsRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCohortDeleteCohortMembers
     * @param coreCohortDeleteCohortMembersRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCohortDeleteCohortMembersCall(CoreCohortDeleteCohortMembersRequest coreCohortDeleteCohortMembersRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCohortDeleteCohortMembersRequest;

        // create path and map variables
        String localVarPath = "/core_cohort_delete_cohort_members";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCohortDeleteCohortMembersValidateBeforeCall(CoreCohortDeleteCohortMembersRequest coreCohortDeleteCohortMembersRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCohortDeleteCohortMembersRequest' is set
        if (coreCohortDeleteCohortMembersRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCohortDeleteCohortMembersRequest' when calling coreCohortDeleteCohortMembers(Async)");
        }

        return coreCohortDeleteCohortMembersCall(coreCohortDeleteCohortMembersRequest, _callback);

    }

    /**
     * Deletes cohort members.
     * Deletes cohort members.
     * @param coreCohortDeleteCohortMembersRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreCohortDeleteCohortMembers(CoreCohortDeleteCohortMembersRequest coreCohortDeleteCohortMembersRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreCohortDeleteCohortMembersWithHttpInfo(coreCohortDeleteCohortMembersRequest);
        return localVarResp.getData();
    }

    /**
     * Deletes cohort members.
     * Deletes cohort members.
     * @param coreCohortDeleteCohortMembersRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreCohortDeleteCohortMembersWithHttpInfo(CoreCohortDeleteCohortMembersRequest coreCohortDeleteCohortMembersRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCohortDeleteCohortMembersValidateBeforeCall(coreCohortDeleteCohortMembersRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deletes cohort members. (asynchronously)
     * Deletes cohort members.
     * @param coreCohortDeleteCohortMembersRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCohortDeleteCohortMembersAsync(CoreCohortDeleteCohortMembersRequest coreCohortDeleteCohortMembersRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCohortDeleteCohortMembersValidateBeforeCall(coreCohortDeleteCohortMembersRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCohortDeleteCohorts
     * @param coreCohortDeleteCohortsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCohortDeleteCohortsCall(CoreCohortDeleteCohortsRequest coreCohortDeleteCohortsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCohortDeleteCohortsRequest;

        // create path and map variables
        String localVarPath = "/core_cohort_delete_cohorts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCohortDeleteCohortsValidateBeforeCall(CoreCohortDeleteCohortsRequest coreCohortDeleteCohortsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCohortDeleteCohortsRequest' is set
        if (coreCohortDeleteCohortsRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCohortDeleteCohortsRequest' when calling coreCohortDeleteCohorts(Async)");
        }

        return coreCohortDeleteCohortsCall(coreCohortDeleteCohortsRequest, _callback);

    }

    /**
     * Deletes all specified cohorts.
     * Deletes all specified cohorts.
     * @param coreCohortDeleteCohortsRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreCohortDeleteCohorts(CoreCohortDeleteCohortsRequest coreCohortDeleteCohortsRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreCohortDeleteCohortsWithHttpInfo(coreCohortDeleteCohortsRequest);
        return localVarResp.getData();
    }

    /**
     * Deletes all specified cohorts.
     * Deletes all specified cohorts.
     * @param coreCohortDeleteCohortsRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreCohortDeleteCohortsWithHttpInfo(CoreCohortDeleteCohortsRequest coreCohortDeleteCohortsRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCohortDeleteCohortsValidateBeforeCall(coreCohortDeleteCohortsRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deletes all specified cohorts. (asynchronously)
     * Deletes all specified cohorts.
     * @param coreCohortDeleteCohortsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCohortDeleteCohortsAsync(CoreCohortDeleteCohortsRequest coreCohortDeleteCohortsRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCohortDeleteCohortsValidateBeforeCall(coreCohortDeleteCohortsRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCohortGetCohortMembers
     * @param coreCohortGetCohortMembersRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCohortGetCohortMembersCall(CoreCohortGetCohortMembersRequest coreCohortGetCohortMembersRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCohortGetCohortMembersRequest;

        // create path and map variables
        String localVarPath = "/core_cohort_get_cohort_members";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCohortGetCohortMembersValidateBeforeCall(CoreCohortGetCohortMembersRequest coreCohortGetCohortMembersRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCohortGetCohortMembersRequest' is set
        if (coreCohortGetCohortMembersRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCohortGetCohortMembersRequest' when calling coreCohortGetCohortMembers(Async)");
        }

        return coreCohortGetCohortMembersCall(coreCohortGetCohortMembersRequest, _callback);

    }

    /**
     * Returns cohort members.
     * Returns cohort members.
     * @param coreCohortGetCohortMembersRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreCohortGetCohortMembers(CoreCohortGetCohortMembersRequest coreCohortGetCohortMembersRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreCohortGetCohortMembersWithHttpInfo(coreCohortGetCohortMembersRequest);
        return localVarResp.getData();
    }

    /**
     * Returns cohort members.
     * Returns cohort members.
     * @param coreCohortGetCohortMembersRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreCohortGetCohortMembersWithHttpInfo(CoreCohortGetCohortMembersRequest coreCohortGetCohortMembersRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCohortGetCohortMembersValidateBeforeCall(coreCohortGetCohortMembersRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns cohort members. (asynchronously)
     * Returns cohort members.
     * @param coreCohortGetCohortMembersRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCohortGetCohortMembersAsync(CoreCohortGetCohortMembersRequest coreCohortGetCohortMembersRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCohortGetCohortMembersValidateBeforeCall(coreCohortGetCohortMembersRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCohortGetCohorts
     * @param coreCohortGetCohortsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCohortGetCohortsCall(CoreCohortGetCohortsRequest coreCohortGetCohortsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCohortGetCohortsRequest;

        // create path and map variables
        String localVarPath = "/core_cohort_get_cohorts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCohortGetCohortsValidateBeforeCall(CoreCohortGetCohortsRequest coreCohortGetCohortsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCohortGetCohortsRequest' is set
        if (coreCohortGetCohortsRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCohortGetCohortsRequest' when calling coreCohortGetCohorts(Async)");
        }

        return coreCohortGetCohortsCall(coreCohortGetCohortsRequest, _callback);

    }

    /**
     * Returns cohort details.
     * Returns cohort details.
     * @param coreCohortGetCohortsRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreCohortGetCohorts(CoreCohortGetCohortsRequest coreCohortGetCohortsRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreCohortGetCohortsWithHttpInfo(coreCohortGetCohortsRequest);
        return localVarResp.getData();
    }

    /**
     * Returns cohort details.
     * Returns cohort details.
     * @param coreCohortGetCohortsRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreCohortGetCohortsWithHttpInfo(CoreCohortGetCohortsRequest coreCohortGetCohortsRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCohortGetCohortsValidateBeforeCall(coreCohortGetCohortsRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns cohort details. (asynchronously)
     * Returns cohort details.
     * @param coreCohortGetCohortsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCohortGetCohortsAsync(CoreCohortGetCohortsRequest coreCohortGetCohortsRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCohortGetCohortsValidateBeforeCall(coreCohortGetCohortsRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCohortSearchCohorts
     * @param coreCohortSearchCohortsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCohortSearchCohortsCall(CoreCohortSearchCohortsRequest coreCohortSearchCohortsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCohortSearchCohortsRequest;

        // create path and map variables
        String localVarPath = "/core_cohort_search_cohorts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCohortSearchCohortsValidateBeforeCall(CoreCohortSearchCohortsRequest coreCohortSearchCohortsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCohortSearchCohortsRequest' is set
        if (coreCohortSearchCohortsRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCohortSearchCohortsRequest' when calling coreCohortSearchCohorts(Async)");
        }

        return coreCohortSearchCohortsCall(coreCohortSearchCohortsRequest, _callback);

    }

    /**
     * Search for cohorts.
     * Search for cohorts.
     * @param coreCohortSearchCohortsRequest  (required)
     * @return CoreCohortSearchCohorts200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreCohortSearchCohorts200Response coreCohortSearchCohorts(CoreCohortSearchCohortsRequest coreCohortSearchCohortsRequest) throws ApiException {
        ApiResponse<CoreCohortSearchCohorts200Response> localVarResp = coreCohortSearchCohortsWithHttpInfo(coreCohortSearchCohortsRequest);
        return localVarResp.getData();
    }

    /**
     * Search for cohorts.
     * Search for cohorts.
     * @param coreCohortSearchCohortsRequest  (required)
     * @return ApiResponse&lt;CoreCohortSearchCohorts200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreCohortSearchCohorts200Response> coreCohortSearchCohortsWithHttpInfo(CoreCohortSearchCohortsRequest coreCohortSearchCohortsRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCohortSearchCohortsValidateBeforeCall(coreCohortSearchCohortsRequest, null);
        Type localVarReturnType = new TypeToken<CoreCohortSearchCohorts200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search for cohorts. (asynchronously)
     * Search for cohorts.
     * @param coreCohortSearchCohortsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCohortSearchCohortsAsync(CoreCohortSearchCohortsRequest coreCohortSearchCohortsRequest, final ApiCallback<CoreCohortSearchCohorts200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCohortSearchCohortsValidateBeforeCall(coreCohortSearchCohortsRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreCohortSearchCohorts200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCohortUpdateCohorts
     * @param coreCohortUpdateCohortsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCohortUpdateCohortsCall(CoreCohortUpdateCohortsRequest coreCohortUpdateCohortsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCohortUpdateCohortsRequest;

        // create path and map variables
        String localVarPath = "/core_cohort_update_cohorts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCohortUpdateCohortsValidateBeforeCall(CoreCohortUpdateCohortsRequest coreCohortUpdateCohortsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCohortUpdateCohortsRequest' is set
        if (coreCohortUpdateCohortsRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCohortUpdateCohortsRequest' when calling coreCohortUpdateCohorts(Async)");
        }

        return coreCohortUpdateCohortsCall(coreCohortUpdateCohortsRequest, _callback);

    }

    /**
     * Updates existing cohorts.
     * Updates existing cohorts.
     * @param coreCohortUpdateCohortsRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreCohortUpdateCohorts(CoreCohortUpdateCohortsRequest coreCohortUpdateCohortsRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreCohortUpdateCohortsWithHttpInfo(coreCohortUpdateCohortsRequest);
        return localVarResp.getData();
    }

    /**
     * Updates existing cohorts.
     * Updates existing cohorts.
     * @param coreCohortUpdateCohortsRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreCohortUpdateCohortsWithHttpInfo(CoreCohortUpdateCohortsRequest coreCohortUpdateCohortsRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCohortUpdateCohortsValidateBeforeCall(coreCohortUpdateCohortsRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates existing cohorts. (asynchronously)
     * Updates existing cohorts.
     * @param coreCohortUpdateCohortsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCohortUpdateCohortsAsync(CoreCohortUpdateCohortsRequest coreCohortUpdateCohortsRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCohortUpdateCohortsValidateBeforeCall(coreCohortUpdateCohortsRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCommentAddComments
     * @param coreCommentAddCommentsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCommentAddCommentsCall(CoreCommentAddCommentsRequest coreCommentAddCommentsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCommentAddCommentsRequest;

        // create path and map variables
        String localVarPath = "/core_comment_add_comments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCommentAddCommentsValidateBeforeCall(CoreCommentAddCommentsRequest coreCommentAddCommentsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCommentAddCommentsRequest' is set
        if (coreCommentAddCommentsRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCommentAddCommentsRequest' when calling coreCommentAddComments(Async)");
        }

        return coreCommentAddCommentsCall(coreCommentAddCommentsRequest, _callback);

    }

    /**
     * Adds a comment or comments.
     * Adds a comment or comments.
     * @param coreCommentAddCommentsRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreCommentAddComments(CoreCommentAddCommentsRequest coreCommentAddCommentsRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreCommentAddCommentsWithHttpInfo(coreCommentAddCommentsRequest);
        return localVarResp.getData();
    }

    /**
     * Adds a comment or comments.
     * Adds a comment or comments.
     * @param coreCommentAddCommentsRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreCommentAddCommentsWithHttpInfo(CoreCommentAddCommentsRequest coreCommentAddCommentsRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCommentAddCommentsValidateBeforeCall(coreCommentAddCommentsRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Adds a comment or comments. (asynchronously)
     * Adds a comment or comments.
     * @param coreCommentAddCommentsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCommentAddCommentsAsync(CoreCommentAddCommentsRequest coreCommentAddCommentsRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCommentAddCommentsValidateBeforeCall(coreCommentAddCommentsRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCommentDeleteComments
     * @param coreCommentDeleteCommentsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of warnings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCommentDeleteCommentsCall(CoreCommentDeleteCommentsRequest coreCommentDeleteCommentsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCommentDeleteCommentsRequest;

        // create path and map variables
        String localVarPath = "/core_comment_delete_comments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCommentDeleteCommentsValidateBeforeCall(CoreCommentDeleteCommentsRequest coreCommentDeleteCommentsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCommentDeleteCommentsRequest' is set
        if (coreCommentDeleteCommentsRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCommentDeleteCommentsRequest' when calling coreCommentDeleteComments(Async)");
        }

        return coreCommentDeleteCommentsCall(coreCommentDeleteCommentsRequest, _callback);

    }

    /**
     * Deletes a comment or comments.
     * Deletes a comment or comments.
     * @param coreCommentDeleteCommentsRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of warnings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreCommentDeleteComments(CoreCommentDeleteCommentsRequest coreCommentDeleteCommentsRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreCommentDeleteCommentsWithHttpInfo(coreCommentDeleteCommentsRequest);
        return localVarResp.getData();
    }

    /**
     * Deletes a comment or comments.
     * Deletes a comment or comments.
     * @param coreCommentDeleteCommentsRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of warnings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreCommentDeleteCommentsWithHttpInfo(CoreCommentDeleteCommentsRequest coreCommentDeleteCommentsRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCommentDeleteCommentsValidateBeforeCall(coreCommentDeleteCommentsRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deletes a comment or comments. (asynchronously)
     * Deletes a comment or comments.
     * @param coreCommentDeleteCommentsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of warnings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCommentDeleteCommentsAsync(CoreCommentDeleteCommentsRequest coreCommentDeleteCommentsRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCommentDeleteCommentsValidateBeforeCall(coreCommentDeleteCommentsRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCommentGetComments
     * @param coreCommentGetCommentsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCommentGetCommentsCall(CoreCommentGetCommentsRequest coreCommentGetCommentsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCommentGetCommentsRequest;

        // create path and map variables
        String localVarPath = "/core_comment_get_comments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCommentGetCommentsValidateBeforeCall(CoreCommentGetCommentsRequest coreCommentGetCommentsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCommentGetCommentsRequest' is set
        if (coreCommentGetCommentsRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCommentGetCommentsRequest' when calling coreCommentGetComments(Async)");
        }

        return coreCommentGetCommentsCall(coreCommentGetCommentsRequest, _callback);

    }

    /**
     * Returns comments.
     * Returns comments.
     * @param coreCommentGetCommentsRequest  (required)
     * @return CoreCommentGetComments200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreCommentGetComments200Response coreCommentGetComments(CoreCommentGetCommentsRequest coreCommentGetCommentsRequest) throws ApiException {
        ApiResponse<CoreCommentGetComments200Response> localVarResp = coreCommentGetCommentsWithHttpInfo(coreCommentGetCommentsRequest);
        return localVarResp.getData();
    }

    /**
     * Returns comments.
     * Returns comments.
     * @param coreCommentGetCommentsRequest  (required)
     * @return ApiResponse&lt;CoreCommentGetComments200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreCommentGetComments200Response> coreCommentGetCommentsWithHttpInfo(CoreCommentGetCommentsRequest coreCommentGetCommentsRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCommentGetCommentsValidateBeforeCall(coreCommentGetCommentsRequest, null);
        Type localVarReturnType = new TypeToken<CoreCommentGetComments200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns comments. (asynchronously)
     * Returns comments.
     * @param coreCommentGetCommentsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCommentGetCommentsAsync(CoreCommentGetCommentsRequest coreCommentGetCommentsRequest, final ApiCallback<CoreCommentGetComments200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCommentGetCommentsValidateBeforeCall(coreCommentGetCommentsRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreCommentGetComments200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCompetencyAddCompetencyToCourse
     * @param coreCompetencyAddCompetencyToCourseRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyAddCompetencyToCourseCall(CoreCompetencyAddCompetencyToCourseRequest coreCompetencyAddCompetencyToCourseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCompetencyAddCompetencyToCourseRequest;

        // create path and map variables
        String localVarPath = "/core_competency_add_competency_to_course";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCompetencyAddCompetencyToCourseValidateBeforeCall(CoreCompetencyAddCompetencyToCourseRequest coreCompetencyAddCompetencyToCourseRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCompetencyAddCompetencyToCourseRequest' is set
        if (coreCompetencyAddCompetencyToCourseRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCompetencyAddCompetencyToCourseRequest' when calling coreCompetencyAddCompetencyToCourse(Async)");
        }

        return coreCompetencyAddCompetencyToCourseCall(coreCompetencyAddCompetencyToCourseRequest, _callback);

    }

    /**
     * Add the competency to a course
     * Add the competency to a course
     * @param coreCompetencyAddCompetencyToCourseRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreCompetencyAddCompetencyToCourse(CoreCompetencyAddCompetencyToCourseRequest coreCompetencyAddCompetencyToCourseRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreCompetencyAddCompetencyToCourseWithHttpInfo(coreCompetencyAddCompetencyToCourseRequest);
        return localVarResp.getData();
    }

    /**
     * Add the competency to a course
     * Add the competency to a course
     * @param coreCompetencyAddCompetencyToCourseRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreCompetencyAddCompetencyToCourseWithHttpInfo(CoreCompetencyAddCompetencyToCourseRequest coreCompetencyAddCompetencyToCourseRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCompetencyAddCompetencyToCourseValidateBeforeCall(coreCompetencyAddCompetencyToCourseRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add the competency to a course (asynchronously)
     * Add the competency to a course
     * @param coreCompetencyAddCompetencyToCourseRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyAddCompetencyToCourseAsync(CoreCompetencyAddCompetencyToCourseRequest coreCompetencyAddCompetencyToCourseRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCompetencyAddCompetencyToCourseValidateBeforeCall(coreCompetencyAddCompetencyToCourseRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCompetencyAddCompetencyToPlan
     * @param coreCompetencyAddCompetencyToPlanRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyAddCompetencyToPlanCall(CoreCompetencyAddCompetencyToPlanRequest coreCompetencyAddCompetencyToPlanRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCompetencyAddCompetencyToPlanRequest;

        // create path and map variables
        String localVarPath = "/core_competency_add_competency_to_plan";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCompetencyAddCompetencyToPlanValidateBeforeCall(CoreCompetencyAddCompetencyToPlanRequest coreCompetencyAddCompetencyToPlanRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCompetencyAddCompetencyToPlanRequest' is set
        if (coreCompetencyAddCompetencyToPlanRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCompetencyAddCompetencyToPlanRequest' when calling coreCompetencyAddCompetencyToPlan(Async)");
        }

        return coreCompetencyAddCompetencyToPlanCall(coreCompetencyAddCompetencyToPlanRequest, _callback);

    }

    /**
     * Add the competency to a learning plan
     * Add the competency to a learning plan
     * @param coreCompetencyAddCompetencyToPlanRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreCompetencyAddCompetencyToPlan(CoreCompetencyAddCompetencyToPlanRequest coreCompetencyAddCompetencyToPlanRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreCompetencyAddCompetencyToPlanWithHttpInfo(coreCompetencyAddCompetencyToPlanRequest);
        return localVarResp.getData();
    }

    /**
     * Add the competency to a learning plan
     * Add the competency to a learning plan
     * @param coreCompetencyAddCompetencyToPlanRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreCompetencyAddCompetencyToPlanWithHttpInfo(CoreCompetencyAddCompetencyToPlanRequest coreCompetencyAddCompetencyToPlanRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCompetencyAddCompetencyToPlanValidateBeforeCall(coreCompetencyAddCompetencyToPlanRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add the competency to a learning plan (asynchronously)
     * Add the competency to a learning plan
     * @param coreCompetencyAddCompetencyToPlanRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyAddCompetencyToPlanAsync(CoreCompetencyAddCompetencyToPlanRequest coreCompetencyAddCompetencyToPlanRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCompetencyAddCompetencyToPlanValidateBeforeCall(coreCompetencyAddCompetencyToPlanRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCompetencyAddCompetencyToTemplate
     * @param coreCompetencyAddCompetencyToTemplateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyAddCompetencyToTemplateCall(CoreCompetencyAddCompetencyToTemplateRequest coreCompetencyAddCompetencyToTemplateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCompetencyAddCompetencyToTemplateRequest;

        // create path and map variables
        String localVarPath = "/core_competency_add_competency_to_template";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCompetencyAddCompetencyToTemplateValidateBeforeCall(CoreCompetencyAddCompetencyToTemplateRequest coreCompetencyAddCompetencyToTemplateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCompetencyAddCompetencyToTemplateRequest' is set
        if (coreCompetencyAddCompetencyToTemplateRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCompetencyAddCompetencyToTemplateRequest' when calling coreCompetencyAddCompetencyToTemplate(Async)");
        }

        return coreCompetencyAddCompetencyToTemplateCall(coreCompetencyAddCompetencyToTemplateRequest, _callback);

    }

    /**
     * Add the competency to a template
     * Add the competency to a template
     * @param coreCompetencyAddCompetencyToTemplateRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreCompetencyAddCompetencyToTemplate(CoreCompetencyAddCompetencyToTemplateRequest coreCompetencyAddCompetencyToTemplateRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreCompetencyAddCompetencyToTemplateWithHttpInfo(coreCompetencyAddCompetencyToTemplateRequest);
        return localVarResp.getData();
    }

    /**
     * Add the competency to a template
     * Add the competency to a template
     * @param coreCompetencyAddCompetencyToTemplateRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreCompetencyAddCompetencyToTemplateWithHttpInfo(CoreCompetencyAddCompetencyToTemplateRequest coreCompetencyAddCompetencyToTemplateRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCompetencyAddCompetencyToTemplateValidateBeforeCall(coreCompetencyAddCompetencyToTemplateRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add the competency to a template (asynchronously)
     * Add the competency to a template
     * @param coreCompetencyAddCompetencyToTemplateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyAddCompetencyToTemplateAsync(CoreCompetencyAddCompetencyToTemplateRequest coreCompetencyAddCompetencyToTemplateRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCompetencyAddCompetencyToTemplateValidateBeforeCall(coreCompetencyAddCompetencyToTemplateRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCompetencyAddRelatedCompetency
     * @param coreCompetencyAddRelatedCompetencyRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyAddRelatedCompetencyCall(CoreCompetencyAddRelatedCompetencyRequest coreCompetencyAddRelatedCompetencyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCompetencyAddRelatedCompetencyRequest;

        // create path and map variables
        String localVarPath = "/core_competency_add_related_competency";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCompetencyAddRelatedCompetencyValidateBeforeCall(CoreCompetencyAddRelatedCompetencyRequest coreCompetencyAddRelatedCompetencyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCompetencyAddRelatedCompetencyRequest' is set
        if (coreCompetencyAddRelatedCompetencyRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCompetencyAddRelatedCompetencyRequest' when calling coreCompetencyAddRelatedCompetency(Async)");
        }

        return coreCompetencyAddRelatedCompetencyCall(coreCompetencyAddRelatedCompetencyRequest, _callback);

    }

    /**
     * Adds a related competency
     * Adds a related competency
     * @param coreCompetencyAddRelatedCompetencyRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreCompetencyAddRelatedCompetency(CoreCompetencyAddRelatedCompetencyRequest coreCompetencyAddRelatedCompetencyRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreCompetencyAddRelatedCompetencyWithHttpInfo(coreCompetencyAddRelatedCompetencyRequest);
        return localVarResp.getData();
    }

    /**
     * Adds a related competency
     * Adds a related competency
     * @param coreCompetencyAddRelatedCompetencyRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreCompetencyAddRelatedCompetencyWithHttpInfo(CoreCompetencyAddRelatedCompetencyRequest coreCompetencyAddRelatedCompetencyRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCompetencyAddRelatedCompetencyValidateBeforeCall(coreCompetencyAddRelatedCompetencyRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Adds a related competency (asynchronously)
     * Adds a related competency
     * @param coreCompetencyAddRelatedCompetencyRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyAddRelatedCompetencyAsync(CoreCompetencyAddRelatedCompetencyRequest coreCompetencyAddRelatedCompetencyRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCompetencyAddRelatedCompetencyValidateBeforeCall(coreCompetencyAddRelatedCompetencyRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCompetencyApprovePlan
     * @param coreCompetencyApprovePlanRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyApprovePlanCall(CoreCompetencyApprovePlanRequest coreCompetencyApprovePlanRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCompetencyApprovePlanRequest;

        // create path and map variables
        String localVarPath = "/core_competency_approve_plan";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCompetencyApprovePlanValidateBeforeCall(CoreCompetencyApprovePlanRequest coreCompetencyApprovePlanRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCompetencyApprovePlanRequest' is set
        if (coreCompetencyApprovePlanRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCompetencyApprovePlanRequest' when calling coreCompetencyApprovePlan(Async)");
        }

        return coreCompetencyApprovePlanCall(coreCompetencyApprovePlanRequest, _callback);

    }

    /**
     * Approve a plan.
     * Approve a plan.
     * @param coreCompetencyApprovePlanRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreCompetencyApprovePlan(CoreCompetencyApprovePlanRequest coreCompetencyApprovePlanRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreCompetencyApprovePlanWithHttpInfo(coreCompetencyApprovePlanRequest);
        return localVarResp.getData();
    }

    /**
     * Approve a plan.
     * Approve a plan.
     * @param coreCompetencyApprovePlanRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreCompetencyApprovePlanWithHttpInfo(CoreCompetencyApprovePlanRequest coreCompetencyApprovePlanRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCompetencyApprovePlanValidateBeforeCall(coreCompetencyApprovePlanRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Approve a plan. (asynchronously)
     * Approve a plan.
     * @param coreCompetencyApprovePlanRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyApprovePlanAsync(CoreCompetencyApprovePlanRequest coreCompetencyApprovePlanRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCompetencyApprovePlanValidateBeforeCall(coreCompetencyApprovePlanRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCompetencyCompetencyFrameworkViewed
     * @param coreCompetencyCompetencyFrameworkViewedRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if the event competency framework was logged </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyCompetencyFrameworkViewedCall(CoreCompetencyCompetencyFrameworkViewedRequest coreCompetencyCompetencyFrameworkViewedRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCompetencyCompetencyFrameworkViewedRequest;

        // create path and map variables
        String localVarPath = "/core_competency_competency_framework_viewed";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCompetencyCompetencyFrameworkViewedValidateBeforeCall(CoreCompetencyCompetencyFrameworkViewedRequest coreCompetencyCompetencyFrameworkViewedRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCompetencyCompetencyFrameworkViewedRequest' is set
        if (coreCompetencyCompetencyFrameworkViewedRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCompetencyCompetencyFrameworkViewedRequest' when calling coreCompetencyCompetencyFrameworkViewed(Async)");
        }

        return coreCompetencyCompetencyFrameworkViewedCall(coreCompetencyCompetencyFrameworkViewedRequest, _callback);

    }

    /**
     * Log event competency framework viewed
     * Log event competency framework viewed
     * @param coreCompetencyCompetencyFrameworkViewedRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if the event competency framework was logged </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreCompetencyCompetencyFrameworkViewed(CoreCompetencyCompetencyFrameworkViewedRequest coreCompetencyCompetencyFrameworkViewedRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreCompetencyCompetencyFrameworkViewedWithHttpInfo(coreCompetencyCompetencyFrameworkViewedRequest);
        return localVarResp.getData();
    }

    /**
     * Log event competency framework viewed
     * Log event competency framework viewed
     * @param coreCompetencyCompetencyFrameworkViewedRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if the event competency framework was logged </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreCompetencyCompetencyFrameworkViewedWithHttpInfo(CoreCompetencyCompetencyFrameworkViewedRequest coreCompetencyCompetencyFrameworkViewedRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCompetencyCompetencyFrameworkViewedValidateBeforeCall(coreCompetencyCompetencyFrameworkViewedRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Log event competency framework viewed (asynchronously)
     * Log event competency framework viewed
     * @param coreCompetencyCompetencyFrameworkViewedRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if the event competency framework was logged </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyCompetencyFrameworkViewedAsync(CoreCompetencyCompetencyFrameworkViewedRequest coreCompetencyCompetencyFrameworkViewedRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCompetencyCompetencyFrameworkViewedValidateBeforeCall(coreCompetencyCompetencyFrameworkViewedRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCompetencyCompetencyViewed
     * @param coreCompetencyCompetencyViewedRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if the event competency viewed was logged </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyCompetencyViewedCall(CoreCompetencyCompetencyViewedRequest coreCompetencyCompetencyViewedRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCompetencyCompetencyViewedRequest;

        // create path and map variables
        String localVarPath = "/core_competency_competency_viewed";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCompetencyCompetencyViewedValidateBeforeCall(CoreCompetencyCompetencyViewedRequest coreCompetencyCompetencyViewedRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCompetencyCompetencyViewedRequest' is set
        if (coreCompetencyCompetencyViewedRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCompetencyCompetencyViewedRequest' when calling coreCompetencyCompetencyViewed(Async)");
        }

        return coreCompetencyCompetencyViewedCall(coreCompetencyCompetencyViewedRequest, _callback);

    }

    /**
     * Log event competency viewed
     * Log event competency viewed
     * @param coreCompetencyCompetencyViewedRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if the event competency viewed was logged </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreCompetencyCompetencyViewed(CoreCompetencyCompetencyViewedRequest coreCompetencyCompetencyViewedRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreCompetencyCompetencyViewedWithHttpInfo(coreCompetencyCompetencyViewedRequest);
        return localVarResp.getData();
    }

    /**
     * Log event competency viewed
     * Log event competency viewed
     * @param coreCompetencyCompetencyViewedRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if the event competency viewed was logged </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreCompetencyCompetencyViewedWithHttpInfo(CoreCompetencyCompetencyViewedRequest coreCompetencyCompetencyViewedRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCompetencyCompetencyViewedValidateBeforeCall(coreCompetencyCompetencyViewedRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Log event competency viewed (asynchronously)
     * Log event competency viewed
     * @param coreCompetencyCompetencyViewedRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if the event competency viewed was logged </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyCompetencyViewedAsync(CoreCompetencyCompetencyViewedRequest coreCompetencyCompetencyViewedRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCompetencyCompetencyViewedValidateBeforeCall(coreCompetencyCompetencyViewedRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCompetencyCompletePlan
     * @param coreCompetencyCompletePlanRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if completing learning plan was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyCompletePlanCall(CoreCompetencyCompletePlanRequest coreCompetencyCompletePlanRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCompetencyCompletePlanRequest;

        // create path and map variables
        String localVarPath = "/core_competency_complete_plan";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCompetencyCompletePlanValidateBeforeCall(CoreCompetencyCompletePlanRequest coreCompetencyCompletePlanRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCompetencyCompletePlanRequest' is set
        if (coreCompetencyCompletePlanRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCompetencyCompletePlanRequest' when calling coreCompetencyCompletePlan(Async)");
        }

        return coreCompetencyCompletePlanCall(coreCompetencyCompletePlanRequest, _callback);

    }

    /**
     * Complete learning plan.
     * Complete learning plan.
     * @param coreCompetencyCompletePlanRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if completing learning plan was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreCompetencyCompletePlan(CoreCompetencyCompletePlanRequest coreCompetencyCompletePlanRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreCompetencyCompletePlanWithHttpInfo(coreCompetencyCompletePlanRequest);
        return localVarResp.getData();
    }

    /**
     * Complete learning plan.
     * Complete learning plan.
     * @param coreCompetencyCompletePlanRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if completing learning plan was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreCompetencyCompletePlanWithHttpInfo(CoreCompetencyCompletePlanRequest coreCompetencyCompletePlanRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCompetencyCompletePlanValidateBeforeCall(coreCompetencyCompletePlanRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Complete learning plan. (asynchronously)
     * Complete learning plan.
     * @param coreCompetencyCompletePlanRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if completing learning plan was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyCompletePlanAsync(CoreCompetencyCompletePlanRequest coreCompetencyCompletePlanRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCompetencyCompletePlanValidateBeforeCall(coreCompetencyCompletePlanRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCompetencyCountCompetencies
     * @param coreCompetencyCountCompetenciesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The number of competencies found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyCountCompetenciesCall(CoreCompetencyCountCompetenciesRequest coreCompetencyCountCompetenciesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCompetencyCountCompetenciesRequest;

        // create path and map variables
        String localVarPath = "/core_competency_count_competencies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCompetencyCountCompetenciesValidateBeforeCall(CoreCompetencyCountCompetenciesRequest coreCompetencyCountCompetenciesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCompetencyCountCompetenciesRequest' is set
        if (coreCompetencyCountCompetenciesRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCompetencyCountCompetenciesRequest' when calling coreCompetencyCountCompetencies(Async)");
        }

        return coreCompetencyCountCompetenciesCall(coreCompetencyCountCompetenciesRequest, _callback);

    }

    /**
     * Count a list of a competencies.
     * Count a list of a competencies.
     * @param coreCompetencyCountCompetenciesRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The number of competencies found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreCompetencyCountCompetencies(CoreCompetencyCountCompetenciesRequest coreCompetencyCountCompetenciesRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreCompetencyCountCompetenciesWithHttpInfo(coreCompetencyCountCompetenciesRequest);
        return localVarResp.getData();
    }

    /**
     * Count a list of a competencies.
     * Count a list of a competencies.
     * @param coreCompetencyCountCompetenciesRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The number of competencies found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreCompetencyCountCompetenciesWithHttpInfo(CoreCompetencyCountCompetenciesRequest coreCompetencyCountCompetenciesRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCompetencyCountCompetenciesValidateBeforeCall(coreCompetencyCountCompetenciesRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Count a list of a competencies. (asynchronously)
     * Count a list of a competencies.
     * @param coreCompetencyCountCompetenciesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The number of competencies found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyCountCompetenciesAsync(CoreCompetencyCountCompetenciesRequest coreCompetencyCountCompetenciesRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCompetencyCountCompetenciesValidateBeforeCall(coreCompetencyCountCompetenciesRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCompetencyCountCompetenciesInCourse
     * @param coreCompetencyCountCompetenciesInCourseRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The number of competencies in this course. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyCountCompetenciesInCourseCall(CoreCompetencyCountCompetenciesInCourseRequest coreCompetencyCountCompetenciesInCourseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCompetencyCountCompetenciesInCourseRequest;

        // create path and map variables
        String localVarPath = "/core_competency_count_competencies_in_course";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCompetencyCountCompetenciesInCourseValidateBeforeCall(CoreCompetencyCountCompetenciesInCourseRequest coreCompetencyCountCompetenciesInCourseRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCompetencyCountCompetenciesInCourseRequest' is set
        if (coreCompetencyCountCompetenciesInCourseRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCompetencyCountCompetenciesInCourseRequest' when calling coreCompetencyCountCompetenciesInCourse(Async)");
        }

        return coreCompetencyCountCompetenciesInCourseCall(coreCompetencyCountCompetenciesInCourseRequest, _callback);

    }

    /**
     * List the competencies in a course
     * List the competencies in a course
     * @param coreCompetencyCountCompetenciesInCourseRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The number of competencies in this course. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreCompetencyCountCompetenciesInCourse(CoreCompetencyCountCompetenciesInCourseRequest coreCompetencyCountCompetenciesInCourseRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreCompetencyCountCompetenciesInCourseWithHttpInfo(coreCompetencyCountCompetenciesInCourseRequest);
        return localVarResp.getData();
    }

    /**
     * List the competencies in a course
     * List the competencies in a course
     * @param coreCompetencyCountCompetenciesInCourseRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The number of competencies in this course. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreCompetencyCountCompetenciesInCourseWithHttpInfo(CoreCompetencyCountCompetenciesInCourseRequest coreCompetencyCountCompetenciesInCourseRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCompetencyCountCompetenciesInCourseValidateBeforeCall(coreCompetencyCountCompetenciesInCourseRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the competencies in a course (asynchronously)
     * List the competencies in a course
     * @param coreCompetencyCountCompetenciesInCourseRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The number of competencies in this course. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyCountCompetenciesInCourseAsync(CoreCompetencyCountCompetenciesInCourseRequest coreCompetencyCountCompetenciesInCourseRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCompetencyCountCompetenciesInCourseValidateBeforeCall(coreCompetencyCountCompetenciesInCourseRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCompetencyCountCompetenciesInTemplate
     * @param coreCompetencyCountCompetenciesInTemplateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The number of competencies in this learning plan template. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyCountCompetenciesInTemplateCall(CoreCompetencyCountCompetenciesInTemplateRequest coreCompetencyCountCompetenciesInTemplateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCompetencyCountCompetenciesInTemplateRequest;

        // create path and map variables
        String localVarPath = "/core_competency_count_competencies_in_template";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCompetencyCountCompetenciesInTemplateValidateBeforeCall(CoreCompetencyCountCompetenciesInTemplateRequest coreCompetencyCountCompetenciesInTemplateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCompetencyCountCompetenciesInTemplateRequest' is set
        if (coreCompetencyCountCompetenciesInTemplateRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCompetencyCountCompetenciesInTemplateRequest' when calling coreCompetencyCountCompetenciesInTemplate(Async)");
        }

        return coreCompetencyCountCompetenciesInTemplateCall(coreCompetencyCountCompetenciesInTemplateRequest, _callback);

    }

    /**
     * Count a list of a competencies for a given template.
     * Count a list of a competencies for a given template.
     * @param coreCompetencyCountCompetenciesInTemplateRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The number of competencies in this learning plan template. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreCompetencyCountCompetenciesInTemplate(CoreCompetencyCountCompetenciesInTemplateRequest coreCompetencyCountCompetenciesInTemplateRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreCompetencyCountCompetenciesInTemplateWithHttpInfo(coreCompetencyCountCompetenciesInTemplateRequest);
        return localVarResp.getData();
    }

    /**
     * Count a list of a competencies for a given template.
     * Count a list of a competencies for a given template.
     * @param coreCompetencyCountCompetenciesInTemplateRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The number of competencies in this learning plan template. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreCompetencyCountCompetenciesInTemplateWithHttpInfo(CoreCompetencyCountCompetenciesInTemplateRequest coreCompetencyCountCompetenciesInTemplateRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCompetencyCountCompetenciesInTemplateValidateBeforeCall(coreCompetencyCountCompetenciesInTemplateRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Count a list of a competencies for a given template. (asynchronously)
     * Count a list of a competencies for a given template.
     * @param coreCompetencyCountCompetenciesInTemplateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The number of competencies in this learning plan template. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyCountCompetenciesInTemplateAsync(CoreCompetencyCountCompetenciesInTemplateRequest coreCompetencyCountCompetenciesInTemplateRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCompetencyCountCompetenciesInTemplateValidateBeforeCall(coreCompetencyCountCompetenciesInTemplateRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCompetencyCountCompetencyFrameworks
     * @param coreCompetencyCountCompetencyFrameworksRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The number of competency frameworks found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyCountCompetencyFrameworksCall(CoreCompetencyCountCompetencyFrameworksRequest coreCompetencyCountCompetencyFrameworksRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCompetencyCountCompetencyFrameworksRequest;

        // create path and map variables
        String localVarPath = "/core_competency_count_competency_frameworks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCompetencyCountCompetencyFrameworksValidateBeforeCall(CoreCompetencyCountCompetencyFrameworksRequest coreCompetencyCountCompetencyFrameworksRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCompetencyCountCompetencyFrameworksRequest' is set
        if (coreCompetencyCountCompetencyFrameworksRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCompetencyCountCompetencyFrameworksRequest' when calling coreCompetencyCountCompetencyFrameworks(Async)");
        }

        return coreCompetencyCountCompetencyFrameworksCall(coreCompetencyCountCompetencyFrameworksRequest, _callback);

    }

    /**
     * Count a list of a competency frameworks.
     * Count a list of a competency frameworks.
     * @param coreCompetencyCountCompetencyFrameworksRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The number of competency frameworks found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreCompetencyCountCompetencyFrameworks(CoreCompetencyCountCompetencyFrameworksRequest coreCompetencyCountCompetencyFrameworksRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreCompetencyCountCompetencyFrameworksWithHttpInfo(coreCompetencyCountCompetencyFrameworksRequest);
        return localVarResp.getData();
    }

    /**
     * Count a list of a competency frameworks.
     * Count a list of a competency frameworks.
     * @param coreCompetencyCountCompetencyFrameworksRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The number of competency frameworks found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreCompetencyCountCompetencyFrameworksWithHttpInfo(CoreCompetencyCountCompetencyFrameworksRequest coreCompetencyCountCompetencyFrameworksRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCompetencyCountCompetencyFrameworksValidateBeforeCall(coreCompetencyCountCompetencyFrameworksRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Count a list of a competency frameworks. (asynchronously)
     * Count a list of a competency frameworks.
     * @param coreCompetencyCountCompetencyFrameworksRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The number of competency frameworks found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyCountCompetencyFrameworksAsync(CoreCompetencyCountCompetencyFrameworksRequest coreCompetencyCountCompetencyFrameworksRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCompetencyCountCompetencyFrameworksValidateBeforeCall(coreCompetencyCountCompetencyFrameworksRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCompetencyCountCourseModuleCompetencies
     * @param coreCompetencyCountCourseModuleCompetenciesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The number of competencies found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyCountCourseModuleCompetenciesCall(CoreCompetencyCountCourseModuleCompetenciesRequest coreCompetencyCountCourseModuleCompetenciesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCompetencyCountCourseModuleCompetenciesRequest;

        // create path and map variables
        String localVarPath = "/core_competency_count_course_module_competencies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCompetencyCountCourseModuleCompetenciesValidateBeforeCall(CoreCompetencyCountCourseModuleCompetenciesRequest coreCompetencyCountCourseModuleCompetenciesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCompetencyCountCourseModuleCompetenciesRequest' is set
        if (coreCompetencyCountCourseModuleCompetenciesRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCompetencyCountCourseModuleCompetenciesRequest' when calling coreCompetencyCountCourseModuleCompetencies(Async)");
        }

        return coreCompetencyCountCourseModuleCompetenciesCall(coreCompetencyCountCourseModuleCompetenciesRequest, _callback);

    }

    /**
     * Count the competencies in a course module
     * Count the competencies in a course module
     * @param coreCompetencyCountCourseModuleCompetenciesRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The number of competencies found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreCompetencyCountCourseModuleCompetencies(CoreCompetencyCountCourseModuleCompetenciesRequest coreCompetencyCountCourseModuleCompetenciesRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreCompetencyCountCourseModuleCompetenciesWithHttpInfo(coreCompetencyCountCourseModuleCompetenciesRequest);
        return localVarResp.getData();
    }

    /**
     * Count the competencies in a course module
     * Count the competencies in a course module
     * @param coreCompetencyCountCourseModuleCompetenciesRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The number of competencies found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreCompetencyCountCourseModuleCompetenciesWithHttpInfo(CoreCompetencyCountCourseModuleCompetenciesRequest coreCompetencyCountCourseModuleCompetenciesRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCompetencyCountCourseModuleCompetenciesValidateBeforeCall(coreCompetencyCountCourseModuleCompetenciesRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Count the competencies in a course module (asynchronously)
     * Count the competencies in a course module
     * @param coreCompetencyCountCourseModuleCompetenciesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The number of competencies found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyCountCourseModuleCompetenciesAsync(CoreCompetencyCountCourseModuleCompetenciesRequest coreCompetencyCountCourseModuleCompetenciesRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCompetencyCountCourseModuleCompetenciesValidateBeforeCall(coreCompetencyCountCourseModuleCompetenciesRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCompetencyCountCoursesUsingCompetency
     * @param coreCompetencyCompetencyViewedRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The number of courses using this competency </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyCountCoursesUsingCompetencyCall(CoreCompetencyCompetencyViewedRequest coreCompetencyCompetencyViewedRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCompetencyCompetencyViewedRequest;

        // create path and map variables
        String localVarPath = "/core_competency_count_courses_using_competency";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCompetencyCountCoursesUsingCompetencyValidateBeforeCall(CoreCompetencyCompetencyViewedRequest coreCompetencyCompetencyViewedRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCompetencyCompetencyViewedRequest' is set
        if (coreCompetencyCompetencyViewedRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCompetencyCompetencyViewedRequest' when calling coreCompetencyCountCoursesUsingCompetency(Async)");
        }

        return coreCompetencyCountCoursesUsingCompetencyCall(coreCompetencyCompetencyViewedRequest, _callback);

    }

    /**
     * List the courses using a competency
     * List the courses using a competency
     * @param coreCompetencyCompetencyViewedRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The number of courses using this competency </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreCompetencyCountCoursesUsingCompetency(CoreCompetencyCompetencyViewedRequest coreCompetencyCompetencyViewedRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreCompetencyCountCoursesUsingCompetencyWithHttpInfo(coreCompetencyCompetencyViewedRequest);
        return localVarResp.getData();
    }

    /**
     * List the courses using a competency
     * List the courses using a competency
     * @param coreCompetencyCompetencyViewedRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The number of courses using this competency </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreCompetencyCountCoursesUsingCompetencyWithHttpInfo(CoreCompetencyCompetencyViewedRequest coreCompetencyCompetencyViewedRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCompetencyCountCoursesUsingCompetencyValidateBeforeCall(coreCompetencyCompetencyViewedRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the courses using a competency (asynchronously)
     * List the courses using a competency
     * @param coreCompetencyCompetencyViewedRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The number of courses using this competency </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyCountCoursesUsingCompetencyAsync(CoreCompetencyCompetencyViewedRequest coreCompetencyCompetencyViewedRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCompetencyCountCoursesUsingCompetencyValidateBeforeCall(coreCompetencyCompetencyViewedRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCompetencyCountTemplates
     * @param coreCompetencyCountCompetencyFrameworksRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The number of learning plan templates found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyCountTemplatesCall(CoreCompetencyCountCompetencyFrameworksRequest coreCompetencyCountCompetencyFrameworksRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCompetencyCountCompetencyFrameworksRequest;

        // create path and map variables
        String localVarPath = "/core_competency_count_templates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCompetencyCountTemplatesValidateBeforeCall(CoreCompetencyCountCompetencyFrameworksRequest coreCompetencyCountCompetencyFrameworksRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCompetencyCountCompetencyFrameworksRequest' is set
        if (coreCompetencyCountCompetencyFrameworksRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCompetencyCountCompetencyFrameworksRequest' when calling coreCompetencyCountTemplates(Async)");
        }

        return coreCompetencyCountTemplatesCall(coreCompetencyCountCompetencyFrameworksRequest, _callback);

    }

    /**
     * Count a list of a learning plan templates.
     * Count a list of a learning plan templates.
     * @param coreCompetencyCountCompetencyFrameworksRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The number of learning plan templates found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreCompetencyCountTemplates(CoreCompetencyCountCompetencyFrameworksRequest coreCompetencyCountCompetencyFrameworksRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreCompetencyCountTemplatesWithHttpInfo(coreCompetencyCountCompetencyFrameworksRequest);
        return localVarResp.getData();
    }

    /**
     * Count a list of a learning plan templates.
     * Count a list of a learning plan templates.
     * @param coreCompetencyCountCompetencyFrameworksRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The number of learning plan templates found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreCompetencyCountTemplatesWithHttpInfo(CoreCompetencyCountCompetencyFrameworksRequest coreCompetencyCountCompetencyFrameworksRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCompetencyCountTemplatesValidateBeforeCall(coreCompetencyCountCompetencyFrameworksRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Count a list of a learning plan templates. (asynchronously)
     * Count a list of a learning plan templates.
     * @param coreCompetencyCountCompetencyFrameworksRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The number of learning plan templates found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyCountTemplatesAsync(CoreCompetencyCountCompetencyFrameworksRequest coreCompetencyCountCompetencyFrameworksRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCompetencyCountTemplatesValidateBeforeCall(coreCompetencyCountCompetencyFrameworksRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCompetencyCountTemplatesUsingCompetency
     * @param coreCompetencyCompetencyViewedRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The number of learning plan templates using this competency </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyCountTemplatesUsingCompetencyCall(CoreCompetencyCompetencyViewedRequest coreCompetencyCompetencyViewedRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCompetencyCompetencyViewedRequest;

        // create path and map variables
        String localVarPath = "/core_competency_count_templates_using_competency";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCompetencyCountTemplatesUsingCompetencyValidateBeforeCall(CoreCompetencyCompetencyViewedRequest coreCompetencyCompetencyViewedRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCompetencyCompetencyViewedRequest' is set
        if (coreCompetencyCompetencyViewedRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCompetencyCompetencyViewedRequest' when calling coreCompetencyCountTemplatesUsingCompetency(Async)");
        }

        return coreCompetencyCountTemplatesUsingCompetencyCall(coreCompetencyCompetencyViewedRequest, _callback);

    }

    /**
     * Count a list of a learning plan templates for a given competency.
     * Count a list of a learning plan templates for a given competency.
     * @param coreCompetencyCompetencyViewedRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The number of learning plan templates using this competency </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreCompetencyCountTemplatesUsingCompetency(CoreCompetencyCompetencyViewedRequest coreCompetencyCompetencyViewedRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreCompetencyCountTemplatesUsingCompetencyWithHttpInfo(coreCompetencyCompetencyViewedRequest);
        return localVarResp.getData();
    }

    /**
     * Count a list of a learning plan templates for a given competency.
     * Count a list of a learning plan templates for a given competency.
     * @param coreCompetencyCompetencyViewedRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The number of learning plan templates using this competency </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreCompetencyCountTemplatesUsingCompetencyWithHttpInfo(CoreCompetencyCompetencyViewedRequest coreCompetencyCompetencyViewedRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCompetencyCountTemplatesUsingCompetencyValidateBeforeCall(coreCompetencyCompetencyViewedRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Count a list of a learning plan templates for a given competency. (asynchronously)
     * Count a list of a learning plan templates for a given competency.
     * @param coreCompetencyCompetencyViewedRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The number of learning plan templates using this competency </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyCountTemplatesUsingCompetencyAsync(CoreCompetencyCompetencyViewedRequest coreCompetencyCompetencyViewedRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCompetencyCountTemplatesUsingCompetencyValidateBeforeCall(coreCompetencyCompetencyViewedRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCompetencyCreateCompetency
     * @param coreCompetencyCreateCompetencyRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyCreateCompetencyCall(CoreCompetencyCreateCompetencyRequest coreCompetencyCreateCompetencyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCompetencyCreateCompetencyRequest;

        // create path and map variables
        String localVarPath = "/core_competency_create_competency";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCompetencyCreateCompetencyValidateBeforeCall(CoreCompetencyCreateCompetencyRequest coreCompetencyCreateCompetencyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCompetencyCreateCompetencyRequest' is set
        if (coreCompetencyCreateCompetencyRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCompetencyCreateCompetencyRequest' when calling coreCompetencyCreateCompetency(Async)");
        }

        return coreCompetencyCreateCompetencyCall(coreCompetencyCreateCompetencyRequest, _callback);

    }

    /**
     * Creates new competencies.
     * Creates new competencies.
     * @param coreCompetencyCreateCompetencyRequest  (required)
     * @return CoreCompetencyCreateCompetency200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreCompetencyCreateCompetency200Response coreCompetencyCreateCompetency(CoreCompetencyCreateCompetencyRequest coreCompetencyCreateCompetencyRequest) throws ApiException {
        ApiResponse<CoreCompetencyCreateCompetency200Response> localVarResp = coreCompetencyCreateCompetencyWithHttpInfo(coreCompetencyCreateCompetencyRequest);
        return localVarResp.getData();
    }

    /**
     * Creates new competencies.
     * Creates new competencies.
     * @param coreCompetencyCreateCompetencyRequest  (required)
     * @return ApiResponse&lt;CoreCompetencyCreateCompetency200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreCompetencyCreateCompetency200Response> coreCompetencyCreateCompetencyWithHttpInfo(CoreCompetencyCreateCompetencyRequest coreCompetencyCreateCompetencyRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCompetencyCreateCompetencyValidateBeforeCall(coreCompetencyCreateCompetencyRequest, null);
        Type localVarReturnType = new TypeToken<CoreCompetencyCreateCompetency200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates new competencies. (asynchronously)
     * Creates new competencies.
     * @param coreCompetencyCreateCompetencyRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyCreateCompetencyAsync(CoreCompetencyCreateCompetencyRequest coreCompetencyCreateCompetencyRequest, final ApiCallback<CoreCompetencyCreateCompetency200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCompetencyCreateCompetencyValidateBeforeCall(coreCompetencyCreateCompetencyRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreCompetencyCreateCompetency200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCompetencyCreateCompetencyFramework
     * @param coreCompetencyCreateCompetencyFrameworkRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyCreateCompetencyFrameworkCall(CoreCompetencyCreateCompetencyFrameworkRequest coreCompetencyCreateCompetencyFrameworkRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCompetencyCreateCompetencyFrameworkRequest;

        // create path and map variables
        String localVarPath = "/core_competency_create_competency_framework";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCompetencyCreateCompetencyFrameworkValidateBeforeCall(CoreCompetencyCreateCompetencyFrameworkRequest coreCompetencyCreateCompetencyFrameworkRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCompetencyCreateCompetencyFrameworkRequest' is set
        if (coreCompetencyCreateCompetencyFrameworkRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCompetencyCreateCompetencyFrameworkRequest' when calling coreCompetencyCreateCompetencyFramework(Async)");
        }

        return coreCompetencyCreateCompetencyFrameworkCall(coreCompetencyCreateCompetencyFrameworkRequest, _callback);

    }

    /**
     * Creates new competency frameworks.
     * Creates new competency frameworks.
     * @param coreCompetencyCreateCompetencyFrameworkRequest  (required)
     * @return CoreCompetencyCreateCompetencyFramework200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreCompetencyCreateCompetencyFramework200Response coreCompetencyCreateCompetencyFramework(CoreCompetencyCreateCompetencyFrameworkRequest coreCompetencyCreateCompetencyFrameworkRequest) throws ApiException {
        ApiResponse<CoreCompetencyCreateCompetencyFramework200Response> localVarResp = coreCompetencyCreateCompetencyFrameworkWithHttpInfo(coreCompetencyCreateCompetencyFrameworkRequest);
        return localVarResp.getData();
    }

    /**
     * Creates new competency frameworks.
     * Creates new competency frameworks.
     * @param coreCompetencyCreateCompetencyFrameworkRequest  (required)
     * @return ApiResponse&lt;CoreCompetencyCreateCompetencyFramework200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreCompetencyCreateCompetencyFramework200Response> coreCompetencyCreateCompetencyFrameworkWithHttpInfo(CoreCompetencyCreateCompetencyFrameworkRequest coreCompetencyCreateCompetencyFrameworkRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCompetencyCreateCompetencyFrameworkValidateBeforeCall(coreCompetencyCreateCompetencyFrameworkRequest, null);
        Type localVarReturnType = new TypeToken<CoreCompetencyCreateCompetencyFramework200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates new competency frameworks. (asynchronously)
     * Creates new competency frameworks.
     * @param coreCompetencyCreateCompetencyFrameworkRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyCreateCompetencyFrameworkAsync(CoreCompetencyCreateCompetencyFrameworkRequest coreCompetencyCreateCompetencyFrameworkRequest, final ApiCallback<CoreCompetencyCreateCompetencyFramework200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCompetencyCreateCompetencyFrameworkValidateBeforeCall(coreCompetencyCreateCompetencyFrameworkRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreCompetencyCreateCompetencyFramework200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCompetencyCreatePlan
     * @param coreCompetencyCreatePlanRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyCreatePlanCall(CoreCompetencyCreatePlanRequest coreCompetencyCreatePlanRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCompetencyCreatePlanRequest;

        // create path and map variables
        String localVarPath = "/core_competency_create_plan";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCompetencyCreatePlanValidateBeforeCall(CoreCompetencyCreatePlanRequest coreCompetencyCreatePlanRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCompetencyCreatePlanRequest' is set
        if (coreCompetencyCreatePlanRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCompetencyCreatePlanRequest' when calling coreCompetencyCreatePlan(Async)");
        }

        return coreCompetencyCreatePlanCall(coreCompetencyCreatePlanRequest, _callback);

    }

    /**
     * Creates a learning plan.
     * Creates a learning plan.
     * @param coreCompetencyCreatePlanRequest  (required)
     * @return CoreCompetencyCreatePlan200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreCompetencyCreatePlan200Response coreCompetencyCreatePlan(CoreCompetencyCreatePlanRequest coreCompetencyCreatePlanRequest) throws ApiException {
        ApiResponse<CoreCompetencyCreatePlan200Response> localVarResp = coreCompetencyCreatePlanWithHttpInfo(coreCompetencyCreatePlanRequest);
        return localVarResp.getData();
    }

    /**
     * Creates a learning plan.
     * Creates a learning plan.
     * @param coreCompetencyCreatePlanRequest  (required)
     * @return ApiResponse&lt;CoreCompetencyCreatePlan200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreCompetencyCreatePlan200Response> coreCompetencyCreatePlanWithHttpInfo(CoreCompetencyCreatePlanRequest coreCompetencyCreatePlanRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCompetencyCreatePlanValidateBeforeCall(coreCompetencyCreatePlanRequest, null);
        Type localVarReturnType = new TypeToken<CoreCompetencyCreatePlan200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a learning plan. (asynchronously)
     * Creates a learning plan.
     * @param coreCompetencyCreatePlanRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyCreatePlanAsync(CoreCompetencyCreatePlanRequest coreCompetencyCreatePlanRequest, final ApiCallback<CoreCompetencyCreatePlan200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCompetencyCreatePlanValidateBeforeCall(coreCompetencyCreatePlanRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreCompetencyCreatePlan200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCompetencyCreateTemplate
     * @param coreCompetencyCreateTemplateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyCreateTemplateCall(CoreCompetencyCreateTemplateRequest coreCompetencyCreateTemplateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCompetencyCreateTemplateRequest;

        // create path and map variables
        String localVarPath = "/core_competency_create_template";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCompetencyCreateTemplateValidateBeforeCall(CoreCompetencyCreateTemplateRequest coreCompetencyCreateTemplateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCompetencyCreateTemplateRequest' is set
        if (coreCompetencyCreateTemplateRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCompetencyCreateTemplateRequest' when calling coreCompetencyCreateTemplate(Async)");
        }

        return coreCompetencyCreateTemplateCall(coreCompetencyCreateTemplateRequest, _callback);

    }

    /**
     * Creates new learning plan templates.
     * Creates new learning plan templates.
     * @param coreCompetencyCreateTemplateRequest  (required)
     * @return CoreCompetencyCreateTemplate200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreCompetencyCreateTemplate200Response coreCompetencyCreateTemplate(CoreCompetencyCreateTemplateRequest coreCompetencyCreateTemplateRequest) throws ApiException {
        ApiResponse<CoreCompetencyCreateTemplate200Response> localVarResp = coreCompetencyCreateTemplateWithHttpInfo(coreCompetencyCreateTemplateRequest);
        return localVarResp.getData();
    }

    /**
     * Creates new learning plan templates.
     * Creates new learning plan templates.
     * @param coreCompetencyCreateTemplateRequest  (required)
     * @return ApiResponse&lt;CoreCompetencyCreateTemplate200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreCompetencyCreateTemplate200Response> coreCompetencyCreateTemplateWithHttpInfo(CoreCompetencyCreateTemplateRequest coreCompetencyCreateTemplateRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCompetencyCreateTemplateValidateBeforeCall(coreCompetencyCreateTemplateRequest, null);
        Type localVarReturnType = new TypeToken<CoreCompetencyCreateTemplate200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates new learning plan templates. (asynchronously)
     * Creates new learning plan templates.
     * @param coreCompetencyCreateTemplateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyCreateTemplateAsync(CoreCompetencyCreateTemplateRequest coreCompetencyCreateTemplateRequest, final ApiCallback<CoreCompetencyCreateTemplate200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCompetencyCreateTemplateValidateBeforeCall(coreCompetencyCreateTemplateRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreCompetencyCreateTemplate200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCompetencyCreateUserEvidenceCompetency
     * @param coreCompetencyCreateUserEvidenceCompetencyRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyCreateUserEvidenceCompetencyCall(CoreCompetencyCreateUserEvidenceCompetencyRequest coreCompetencyCreateUserEvidenceCompetencyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCompetencyCreateUserEvidenceCompetencyRequest;

        // create path and map variables
        String localVarPath = "/core_competency_create_user_evidence_competency";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCompetencyCreateUserEvidenceCompetencyValidateBeforeCall(CoreCompetencyCreateUserEvidenceCompetencyRequest coreCompetencyCreateUserEvidenceCompetencyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCompetencyCreateUserEvidenceCompetencyRequest' is set
        if (coreCompetencyCreateUserEvidenceCompetencyRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCompetencyCreateUserEvidenceCompetencyRequest' when calling coreCompetencyCreateUserEvidenceCompetency(Async)");
        }

        return coreCompetencyCreateUserEvidenceCompetencyCall(coreCompetencyCreateUserEvidenceCompetencyRequest, _callback);

    }

    /**
     * Create an evidence of prior learning relationship with a competency.
     * Create an evidence of prior learning relationship with a competency.
     * @param coreCompetencyCreateUserEvidenceCompetencyRequest  (required)
     * @return CoreCompetencyCreateUserEvidenceCompetency200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreCompetencyCreateUserEvidenceCompetency200Response coreCompetencyCreateUserEvidenceCompetency(CoreCompetencyCreateUserEvidenceCompetencyRequest coreCompetencyCreateUserEvidenceCompetencyRequest) throws ApiException {
        ApiResponse<CoreCompetencyCreateUserEvidenceCompetency200Response> localVarResp = coreCompetencyCreateUserEvidenceCompetencyWithHttpInfo(coreCompetencyCreateUserEvidenceCompetencyRequest);
        return localVarResp.getData();
    }

    /**
     * Create an evidence of prior learning relationship with a competency.
     * Create an evidence of prior learning relationship with a competency.
     * @param coreCompetencyCreateUserEvidenceCompetencyRequest  (required)
     * @return ApiResponse&lt;CoreCompetencyCreateUserEvidenceCompetency200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreCompetencyCreateUserEvidenceCompetency200Response> coreCompetencyCreateUserEvidenceCompetencyWithHttpInfo(CoreCompetencyCreateUserEvidenceCompetencyRequest coreCompetencyCreateUserEvidenceCompetencyRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCompetencyCreateUserEvidenceCompetencyValidateBeforeCall(coreCompetencyCreateUserEvidenceCompetencyRequest, null);
        Type localVarReturnType = new TypeToken<CoreCompetencyCreateUserEvidenceCompetency200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create an evidence of prior learning relationship with a competency. (asynchronously)
     * Create an evidence of prior learning relationship with a competency.
     * @param coreCompetencyCreateUserEvidenceCompetencyRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyCreateUserEvidenceCompetencyAsync(CoreCompetencyCreateUserEvidenceCompetencyRequest coreCompetencyCreateUserEvidenceCompetencyRequest, final ApiCallback<CoreCompetencyCreateUserEvidenceCompetency200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCompetencyCreateUserEvidenceCompetencyValidateBeforeCall(coreCompetencyCreateUserEvidenceCompetencyRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreCompetencyCreateUserEvidenceCompetency200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCompetencyDeleteCompetency
     * @param coreCompetencyDeleteCompetencyRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if the delete was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyDeleteCompetencyCall(CoreCompetencyDeleteCompetencyRequest coreCompetencyDeleteCompetencyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCompetencyDeleteCompetencyRequest;

        // create path and map variables
        String localVarPath = "/core_competency_delete_competency";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCompetencyDeleteCompetencyValidateBeforeCall(CoreCompetencyDeleteCompetencyRequest coreCompetencyDeleteCompetencyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCompetencyDeleteCompetencyRequest' is set
        if (coreCompetencyDeleteCompetencyRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCompetencyDeleteCompetencyRequest' when calling coreCompetencyDeleteCompetency(Async)");
        }

        return coreCompetencyDeleteCompetencyCall(coreCompetencyDeleteCompetencyRequest, _callback);

    }

    /**
     * Delete a competency.
     * Delete a competency.
     * @param coreCompetencyDeleteCompetencyRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if the delete was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreCompetencyDeleteCompetency(CoreCompetencyDeleteCompetencyRequest coreCompetencyDeleteCompetencyRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreCompetencyDeleteCompetencyWithHttpInfo(coreCompetencyDeleteCompetencyRequest);
        return localVarResp.getData();
    }

    /**
     * Delete a competency.
     * Delete a competency.
     * @param coreCompetencyDeleteCompetencyRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if the delete was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreCompetencyDeleteCompetencyWithHttpInfo(CoreCompetencyDeleteCompetencyRequest coreCompetencyDeleteCompetencyRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCompetencyDeleteCompetencyValidateBeforeCall(coreCompetencyDeleteCompetencyRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a competency. (asynchronously)
     * Delete a competency.
     * @param coreCompetencyDeleteCompetencyRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if the delete was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyDeleteCompetencyAsync(CoreCompetencyDeleteCompetencyRequest coreCompetencyDeleteCompetencyRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCompetencyDeleteCompetencyValidateBeforeCall(coreCompetencyDeleteCompetencyRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCompetencyDeleteCompetencyFramework
     * @param coreCompetencyDeleteCompetencyFrameworkRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if the delete was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyDeleteCompetencyFrameworkCall(CoreCompetencyDeleteCompetencyFrameworkRequest coreCompetencyDeleteCompetencyFrameworkRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCompetencyDeleteCompetencyFrameworkRequest;

        // create path and map variables
        String localVarPath = "/core_competency_delete_competency_framework";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCompetencyDeleteCompetencyFrameworkValidateBeforeCall(CoreCompetencyDeleteCompetencyFrameworkRequest coreCompetencyDeleteCompetencyFrameworkRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCompetencyDeleteCompetencyFrameworkRequest' is set
        if (coreCompetencyDeleteCompetencyFrameworkRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCompetencyDeleteCompetencyFrameworkRequest' when calling coreCompetencyDeleteCompetencyFramework(Async)");
        }

        return coreCompetencyDeleteCompetencyFrameworkCall(coreCompetencyDeleteCompetencyFrameworkRequest, _callback);

    }

    /**
     * Delete a competency framework.
     * Delete a competency framework.
     * @param coreCompetencyDeleteCompetencyFrameworkRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if the delete was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreCompetencyDeleteCompetencyFramework(CoreCompetencyDeleteCompetencyFrameworkRequest coreCompetencyDeleteCompetencyFrameworkRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreCompetencyDeleteCompetencyFrameworkWithHttpInfo(coreCompetencyDeleteCompetencyFrameworkRequest);
        return localVarResp.getData();
    }

    /**
     * Delete a competency framework.
     * Delete a competency framework.
     * @param coreCompetencyDeleteCompetencyFrameworkRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if the delete was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreCompetencyDeleteCompetencyFrameworkWithHttpInfo(CoreCompetencyDeleteCompetencyFrameworkRequest coreCompetencyDeleteCompetencyFrameworkRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCompetencyDeleteCompetencyFrameworkValidateBeforeCall(coreCompetencyDeleteCompetencyFrameworkRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a competency framework. (asynchronously)
     * Delete a competency framework.
     * @param coreCompetencyDeleteCompetencyFrameworkRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if the delete was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyDeleteCompetencyFrameworkAsync(CoreCompetencyDeleteCompetencyFrameworkRequest coreCompetencyDeleteCompetencyFrameworkRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCompetencyDeleteCompetencyFrameworkValidateBeforeCall(coreCompetencyDeleteCompetencyFrameworkRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCompetencyDeleteEvidence
     * @param coreCompetencyDeleteEvidenceRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyDeleteEvidenceCall(CoreCompetencyDeleteEvidenceRequest coreCompetencyDeleteEvidenceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCompetencyDeleteEvidenceRequest;

        // create path and map variables
        String localVarPath = "/core_competency_delete_evidence";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCompetencyDeleteEvidenceValidateBeforeCall(CoreCompetencyDeleteEvidenceRequest coreCompetencyDeleteEvidenceRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCompetencyDeleteEvidenceRequest' is set
        if (coreCompetencyDeleteEvidenceRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCompetencyDeleteEvidenceRequest' when calling coreCompetencyDeleteEvidence(Async)");
        }

        return coreCompetencyDeleteEvidenceCall(coreCompetencyDeleteEvidenceRequest, _callback);

    }

    /**
     * Delete an evidence
     * Delete an evidence
     * @param coreCompetencyDeleteEvidenceRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreCompetencyDeleteEvidence(CoreCompetencyDeleteEvidenceRequest coreCompetencyDeleteEvidenceRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreCompetencyDeleteEvidenceWithHttpInfo(coreCompetencyDeleteEvidenceRequest);
        return localVarResp.getData();
    }

    /**
     * Delete an evidence
     * Delete an evidence
     * @param coreCompetencyDeleteEvidenceRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreCompetencyDeleteEvidenceWithHttpInfo(CoreCompetencyDeleteEvidenceRequest coreCompetencyDeleteEvidenceRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCompetencyDeleteEvidenceValidateBeforeCall(coreCompetencyDeleteEvidenceRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete an evidence (asynchronously)
     * Delete an evidence
     * @param coreCompetencyDeleteEvidenceRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyDeleteEvidenceAsync(CoreCompetencyDeleteEvidenceRequest coreCompetencyDeleteEvidenceRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCompetencyDeleteEvidenceValidateBeforeCall(coreCompetencyDeleteEvidenceRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCompetencyDeletePlan
     * @param coreCompetencyDeletePlanRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if the delete was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyDeletePlanCall(CoreCompetencyDeletePlanRequest coreCompetencyDeletePlanRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCompetencyDeletePlanRequest;

        // create path and map variables
        String localVarPath = "/core_competency_delete_plan";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCompetencyDeletePlanValidateBeforeCall(CoreCompetencyDeletePlanRequest coreCompetencyDeletePlanRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCompetencyDeletePlanRequest' is set
        if (coreCompetencyDeletePlanRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCompetencyDeletePlanRequest' when calling coreCompetencyDeletePlan(Async)");
        }

        return coreCompetencyDeletePlanCall(coreCompetencyDeletePlanRequest, _callback);

    }

    /**
     * Delete a learning plan.
     * Delete a learning plan.
     * @param coreCompetencyDeletePlanRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if the delete was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreCompetencyDeletePlan(CoreCompetencyDeletePlanRequest coreCompetencyDeletePlanRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreCompetencyDeletePlanWithHttpInfo(coreCompetencyDeletePlanRequest);
        return localVarResp.getData();
    }

    /**
     * Delete a learning plan.
     * Delete a learning plan.
     * @param coreCompetencyDeletePlanRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if the delete was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreCompetencyDeletePlanWithHttpInfo(CoreCompetencyDeletePlanRequest coreCompetencyDeletePlanRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCompetencyDeletePlanValidateBeforeCall(coreCompetencyDeletePlanRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a learning plan. (asynchronously)
     * Delete a learning plan.
     * @param coreCompetencyDeletePlanRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if the delete was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyDeletePlanAsync(CoreCompetencyDeletePlanRequest coreCompetencyDeletePlanRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCompetencyDeletePlanValidateBeforeCall(coreCompetencyDeletePlanRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCompetencyDeleteTemplate
     * @param coreCompetencyDeleteTemplateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if the delete was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyDeleteTemplateCall(CoreCompetencyDeleteTemplateRequest coreCompetencyDeleteTemplateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCompetencyDeleteTemplateRequest;

        // create path and map variables
        String localVarPath = "/core_competency_delete_template";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCompetencyDeleteTemplateValidateBeforeCall(CoreCompetencyDeleteTemplateRequest coreCompetencyDeleteTemplateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCompetencyDeleteTemplateRequest' is set
        if (coreCompetencyDeleteTemplateRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCompetencyDeleteTemplateRequest' when calling coreCompetencyDeleteTemplate(Async)");
        }

        return coreCompetencyDeleteTemplateCall(coreCompetencyDeleteTemplateRequest, _callback);

    }

    /**
     * Delete a learning plan template.
     * Delete a learning plan template.
     * @param coreCompetencyDeleteTemplateRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if the delete was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreCompetencyDeleteTemplate(CoreCompetencyDeleteTemplateRequest coreCompetencyDeleteTemplateRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreCompetencyDeleteTemplateWithHttpInfo(coreCompetencyDeleteTemplateRequest);
        return localVarResp.getData();
    }

    /**
     * Delete a learning plan template.
     * Delete a learning plan template.
     * @param coreCompetencyDeleteTemplateRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if the delete was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreCompetencyDeleteTemplateWithHttpInfo(CoreCompetencyDeleteTemplateRequest coreCompetencyDeleteTemplateRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCompetencyDeleteTemplateValidateBeforeCall(coreCompetencyDeleteTemplateRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a learning plan template. (asynchronously)
     * Delete a learning plan template.
     * @param coreCompetencyDeleteTemplateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if the delete was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyDeleteTemplateAsync(CoreCompetencyDeleteTemplateRequest coreCompetencyDeleteTemplateRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCompetencyDeleteTemplateValidateBeforeCall(coreCompetencyDeleteTemplateRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCompetencyDeleteUserEvidence
     * @param coreCompetencyDeleteUserEvidenceRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if the delete was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyDeleteUserEvidenceCall(CoreCompetencyDeleteUserEvidenceRequest coreCompetencyDeleteUserEvidenceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCompetencyDeleteUserEvidenceRequest;

        // create path and map variables
        String localVarPath = "/core_competency_delete_user_evidence";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCompetencyDeleteUserEvidenceValidateBeforeCall(CoreCompetencyDeleteUserEvidenceRequest coreCompetencyDeleteUserEvidenceRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCompetencyDeleteUserEvidenceRequest' is set
        if (coreCompetencyDeleteUserEvidenceRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCompetencyDeleteUserEvidenceRequest' when calling coreCompetencyDeleteUserEvidence(Async)");
        }

        return coreCompetencyDeleteUserEvidenceCall(coreCompetencyDeleteUserEvidenceRequest, _callback);

    }

    /**
     * Delete an evidence of prior learning.
     * Delete an evidence of prior learning.
     * @param coreCompetencyDeleteUserEvidenceRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if the delete was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreCompetencyDeleteUserEvidence(CoreCompetencyDeleteUserEvidenceRequest coreCompetencyDeleteUserEvidenceRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreCompetencyDeleteUserEvidenceWithHttpInfo(coreCompetencyDeleteUserEvidenceRequest);
        return localVarResp.getData();
    }

    /**
     * Delete an evidence of prior learning.
     * Delete an evidence of prior learning.
     * @param coreCompetencyDeleteUserEvidenceRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if the delete was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreCompetencyDeleteUserEvidenceWithHttpInfo(CoreCompetencyDeleteUserEvidenceRequest coreCompetencyDeleteUserEvidenceRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCompetencyDeleteUserEvidenceValidateBeforeCall(coreCompetencyDeleteUserEvidenceRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete an evidence of prior learning. (asynchronously)
     * Delete an evidence of prior learning.
     * @param coreCompetencyDeleteUserEvidenceRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if the delete was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyDeleteUserEvidenceAsync(CoreCompetencyDeleteUserEvidenceRequest coreCompetencyDeleteUserEvidenceRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCompetencyDeleteUserEvidenceValidateBeforeCall(coreCompetencyDeleteUserEvidenceRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCompetencyDeleteUserEvidenceCompetency
     * @param coreCompetencyDeleteUserEvidenceCompetencyRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if the delete was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyDeleteUserEvidenceCompetencyCall(CoreCompetencyDeleteUserEvidenceCompetencyRequest coreCompetencyDeleteUserEvidenceCompetencyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCompetencyDeleteUserEvidenceCompetencyRequest;

        // create path and map variables
        String localVarPath = "/core_competency_delete_user_evidence_competency";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCompetencyDeleteUserEvidenceCompetencyValidateBeforeCall(CoreCompetencyDeleteUserEvidenceCompetencyRequest coreCompetencyDeleteUserEvidenceCompetencyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCompetencyDeleteUserEvidenceCompetencyRequest' is set
        if (coreCompetencyDeleteUserEvidenceCompetencyRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCompetencyDeleteUserEvidenceCompetencyRequest' when calling coreCompetencyDeleteUserEvidenceCompetency(Async)");
        }

        return coreCompetencyDeleteUserEvidenceCompetencyCall(coreCompetencyDeleteUserEvidenceCompetencyRequest, _callback);

    }

    /**
     * Delete an evidence of prior learning relationship with a competency.
     * Delete an evidence of prior learning relationship with a competency.
     * @param coreCompetencyDeleteUserEvidenceCompetencyRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if the delete was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreCompetencyDeleteUserEvidenceCompetency(CoreCompetencyDeleteUserEvidenceCompetencyRequest coreCompetencyDeleteUserEvidenceCompetencyRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreCompetencyDeleteUserEvidenceCompetencyWithHttpInfo(coreCompetencyDeleteUserEvidenceCompetencyRequest);
        return localVarResp.getData();
    }

    /**
     * Delete an evidence of prior learning relationship with a competency.
     * Delete an evidence of prior learning relationship with a competency.
     * @param coreCompetencyDeleteUserEvidenceCompetencyRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if the delete was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreCompetencyDeleteUserEvidenceCompetencyWithHttpInfo(CoreCompetencyDeleteUserEvidenceCompetencyRequest coreCompetencyDeleteUserEvidenceCompetencyRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCompetencyDeleteUserEvidenceCompetencyValidateBeforeCall(coreCompetencyDeleteUserEvidenceCompetencyRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete an evidence of prior learning relationship with a competency. (asynchronously)
     * Delete an evidence of prior learning relationship with a competency.
     * @param coreCompetencyDeleteUserEvidenceCompetencyRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if the delete was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyDeleteUserEvidenceCompetencyAsync(CoreCompetencyDeleteUserEvidenceCompetencyRequest coreCompetencyDeleteUserEvidenceCompetencyRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCompetencyDeleteUserEvidenceCompetencyValidateBeforeCall(coreCompetencyDeleteUserEvidenceCompetencyRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCompetencyDuplicateCompetencyFramework
     * @param coreCompetencyDuplicateCompetencyFrameworkRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyDuplicateCompetencyFrameworkCall(CoreCompetencyDuplicateCompetencyFrameworkRequest coreCompetencyDuplicateCompetencyFrameworkRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCompetencyDuplicateCompetencyFrameworkRequest;

        // create path and map variables
        String localVarPath = "/core_competency_duplicate_competency_framework";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCompetencyDuplicateCompetencyFrameworkValidateBeforeCall(CoreCompetencyDuplicateCompetencyFrameworkRequest coreCompetencyDuplicateCompetencyFrameworkRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCompetencyDuplicateCompetencyFrameworkRequest' is set
        if (coreCompetencyDuplicateCompetencyFrameworkRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCompetencyDuplicateCompetencyFrameworkRequest' when calling coreCompetencyDuplicateCompetencyFramework(Async)");
        }

        return coreCompetencyDuplicateCompetencyFrameworkCall(coreCompetencyDuplicateCompetencyFrameworkRequest, _callback);

    }

    /**
     * Duplicate a competency framework.
     * Duplicate a competency framework.
     * @param coreCompetencyDuplicateCompetencyFrameworkRequest  (required)
     * @return CoreCompetencyDuplicateCompetencyFramework200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreCompetencyDuplicateCompetencyFramework200Response coreCompetencyDuplicateCompetencyFramework(CoreCompetencyDuplicateCompetencyFrameworkRequest coreCompetencyDuplicateCompetencyFrameworkRequest) throws ApiException {
        ApiResponse<CoreCompetencyDuplicateCompetencyFramework200Response> localVarResp = coreCompetencyDuplicateCompetencyFrameworkWithHttpInfo(coreCompetencyDuplicateCompetencyFrameworkRequest);
        return localVarResp.getData();
    }

    /**
     * Duplicate a competency framework.
     * Duplicate a competency framework.
     * @param coreCompetencyDuplicateCompetencyFrameworkRequest  (required)
     * @return ApiResponse&lt;CoreCompetencyDuplicateCompetencyFramework200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreCompetencyDuplicateCompetencyFramework200Response> coreCompetencyDuplicateCompetencyFrameworkWithHttpInfo(CoreCompetencyDuplicateCompetencyFrameworkRequest coreCompetencyDuplicateCompetencyFrameworkRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCompetencyDuplicateCompetencyFrameworkValidateBeforeCall(coreCompetencyDuplicateCompetencyFrameworkRequest, null);
        Type localVarReturnType = new TypeToken<CoreCompetencyDuplicateCompetencyFramework200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Duplicate a competency framework. (asynchronously)
     * Duplicate a competency framework.
     * @param coreCompetencyDuplicateCompetencyFrameworkRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyDuplicateCompetencyFrameworkAsync(CoreCompetencyDuplicateCompetencyFrameworkRequest coreCompetencyDuplicateCompetencyFrameworkRequest, final ApiCallback<CoreCompetencyDuplicateCompetencyFramework200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCompetencyDuplicateCompetencyFrameworkValidateBeforeCall(coreCompetencyDuplicateCompetencyFrameworkRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreCompetencyDuplicateCompetencyFramework200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCompetencyDuplicateTemplate
     * @param coreCompetencyCountCompetenciesInTemplateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyDuplicateTemplateCall(CoreCompetencyCountCompetenciesInTemplateRequest coreCompetencyCountCompetenciesInTemplateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCompetencyCountCompetenciesInTemplateRequest;

        // create path and map variables
        String localVarPath = "/core_competency_duplicate_template";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCompetencyDuplicateTemplateValidateBeforeCall(CoreCompetencyCountCompetenciesInTemplateRequest coreCompetencyCountCompetenciesInTemplateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCompetencyCountCompetenciesInTemplateRequest' is set
        if (coreCompetencyCountCompetenciesInTemplateRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCompetencyCountCompetenciesInTemplateRequest' when calling coreCompetencyDuplicateTemplate(Async)");
        }

        return coreCompetencyDuplicateTemplateCall(coreCompetencyCountCompetenciesInTemplateRequest, _callback);

    }

    /**
     * Duplicate learning plan template.
     * Duplicate learning plan template.
     * @param coreCompetencyCountCompetenciesInTemplateRequest  (required)
     * @return CoreCompetencyCreateTemplate200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreCompetencyCreateTemplate200Response coreCompetencyDuplicateTemplate(CoreCompetencyCountCompetenciesInTemplateRequest coreCompetencyCountCompetenciesInTemplateRequest) throws ApiException {
        ApiResponse<CoreCompetencyCreateTemplate200Response> localVarResp = coreCompetencyDuplicateTemplateWithHttpInfo(coreCompetencyCountCompetenciesInTemplateRequest);
        return localVarResp.getData();
    }

    /**
     * Duplicate learning plan template.
     * Duplicate learning plan template.
     * @param coreCompetencyCountCompetenciesInTemplateRequest  (required)
     * @return ApiResponse&lt;CoreCompetencyCreateTemplate200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreCompetencyCreateTemplate200Response> coreCompetencyDuplicateTemplateWithHttpInfo(CoreCompetencyCountCompetenciesInTemplateRequest coreCompetencyCountCompetenciesInTemplateRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCompetencyDuplicateTemplateValidateBeforeCall(coreCompetencyCountCompetenciesInTemplateRequest, null);
        Type localVarReturnType = new TypeToken<CoreCompetencyCreateTemplate200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Duplicate learning plan template. (asynchronously)
     * Duplicate learning plan template.
     * @param coreCompetencyCountCompetenciesInTemplateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyDuplicateTemplateAsync(CoreCompetencyCountCompetenciesInTemplateRequest coreCompetencyCountCompetenciesInTemplateRequest, final ApiCallback<CoreCompetencyCreateTemplate200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCompetencyDuplicateTemplateValidateBeforeCall(coreCompetencyCountCompetenciesInTemplateRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreCompetencyCreateTemplate200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCompetencyGetScaleValues
     * @param coreCompetencyGetScaleValuesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyGetScaleValuesCall(CoreCompetencyGetScaleValuesRequest coreCompetencyGetScaleValuesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCompetencyGetScaleValuesRequest;

        // create path and map variables
        String localVarPath = "/core_competency_get_scale_values";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCompetencyGetScaleValuesValidateBeforeCall(CoreCompetencyGetScaleValuesRequest coreCompetencyGetScaleValuesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCompetencyGetScaleValuesRequest' is set
        if (coreCompetencyGetScaleValuesRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCompetencyGetScaleValuesRequest' when calling coreCompetencyGetScaleValues(Async)");
        }

        return coreCompetencyGetScaleValuesCall(coreCompetencyGetScaleValuesRequest, _callback);

    }

    /**
     * Fetch the values for a specific scale
     * Fetch the values for a specific scale
     * @param coreCompetencyGetScaleValuesRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreCompetencyGetScaleValues(CoreCompetencyGetScaleValuesRequest coreCompetencyGetScaleValuesRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreCompetencyGetScaleValuesWithHttpInfo(coreCompetencyGetScaleValuesRequest);
        return localVarResp.getData();
    }

    /**
     * Fetch the values for a specific scale
     * Fetch the values for a specific scale
     * @param coreCompetencyGetScaleValuesRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreCompetencyGetScaleValuesWithHttpInfo(CoreCompetencyGetScaleValuesRequest coreCompetencyGetScaleValuesRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCompetencyGetScaleValuesValidateBeforeCall(coreCompetencyGetScaleValuesRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch the values for a specific scale (asynchronously)
     * Fetch the values for a specific scale
     * @param coreCompetencyGetScaleValuesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyGetScaleValuesAsync(CoreCompetencyGetScaleValuesRequest coreCompetencyGetScaleValuesRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCompetencyGetScaleValuesValidateBeforeCall(coreCompetencyGetScaleValuesRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCompetencyGradeCompetency
     * @param coreCompetencyGradeCompetencyRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyGradeCompetencyCall(CoreCompetencyGradeCompetencyRequest coreCompetencyGradeCompetencyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCompetencyGradeCompetencyRequest;

        // create path and map variables
        String localVarPath = "/core_competency_grade_competency";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCompetencyGradeCompetencyValidateBeforeCall(CoreCompetencyGradeCompetencyRequest coreCompetencyGradeCompetencyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCompetencyGradeCompetencyRequest' is set
        if (coreCompetencyGradeCompetencyRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCompetencyGradeCompetencyRequest' when calling coreCompetencyGradeCompetency(Async)");
        }

        return coreCompetencyGradeCompetencyCall(coreCompetencyGradeCompetencyRequest, _callback);

    }

    /**
     * Grade a competency.
     * Grade a competency.
     * @param coreCompetencyGradeCompetencyRequest  (required)
     * @return CoreCompetencyGradeCompetency200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreCompetencyGradeCompetency200Response coreCompetencyGradeCompetency(CoreCompetencyGradeCompetencyRequest coreCompetencyGradeCompetencyRequest) throws ApiException {
        ApiResponse<CoreCompetencyGradeCompetency200Response> localVarResp = coreCompetencyGradeCompetencyWithHttpInfo(coreCompetencyGradeCompetencyRequest);
        return localVarResp.getData();
    }

    /**
     * Grade a competency.
     * Grade a competency.
     * @param coreCompetencyGradeCompetencyRequest  (required)
     * @return ApiResponse&lt;CoreCompetencyGradeCompetency200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreCompetencyGradeCompetency200Response> coreCompetencyGradeCompetencyWithHttpInfo(CoreCompetencyGradeCompetencyRequest coreCompetencyGradeCompetencyRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCompetencyGradeCompetencyValidateBeforeCall(coreCompetencyGradeCompetencyRequest, null);
        Type localVarReturnType = new TypeToken<CoreCompetencyGradeCompetency200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Grade a competency. (asynchronously)
     * Grade a competency.
     * @param coreCompetencyGradeCompetencyRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyGradeCompetencyAsync(CoreCompetencyGradeCompetencyRequest coreCompetencyGradeCompetencyRequest, final ApiCallback<CoreCompetencyGradeCompetency200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCompetencyGradeCompetencyValidateBeforeCall(coreCompetencyGradeCompetencyRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreCompetencyGradeCompetency200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCompetencyGradeCompetencyInCourse
     * @param coreCompetencyGradeCompetencyInCourseRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyGradeCompetencyInCourseCall(CoreCompetencyGradeCompetencyInCourseRequest coreCompetencyGradeCompetencyInCourseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCompetencyGradeCompetencyInCourseRequest;

        // create path and map variables
        String localVarPath = "/core_competency_grade_competency_in_course";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCompetencyGradeCompetencyInCourseValidateBeforeCall(CoreCompetencyGradeCompetencyInCourseRequest coreCompetencyGradeCompetencyInCourseRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCompetencyGradeCompetencyInCourseRequest' is set
        if (coreCompetencyGradeCompetencyInCourseRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCompetencyGradeCompetencyInCourseRequest' when calling coreCompetencyGradeCompetencyInCourse(Async)");
        }

        return coreCompetencyGradeCompetencyInCourseCall(coreCompetencyGradeCompetencyInCourseRequest, _callback);

    }

    /**
     * Grade a competency from the course page.
     * Grade a competency from the course page.
     * @param coreCompetencyGradeCompetencyInCourseRequest  (required)
     * @return CoreCompetencyGradeCompetencyInCourse200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreCompetencyGradeCompetencyInCourse200Response coreCompetencyGradeCompetencyInCourse(CoreCompetencyGradeCompetencyInCourseRequest coreCompetencyGradeCompetencyInCourseRequest) throws ApiException {
        ApiResponse<CoreCompetencyGradeCompetencyInCourse200Response> localVarResp = coreCompetencyGradeCompetencyInCourseWithHttpInfo(coreCompetencyGradeCompetencyInCourseRequest);
        return localVarResp.getData();
    }

    /**
     * Grade a competency from the course page.
     * Grade a competency from the course page.
     * @param coreCompetencyGradeCompetencyInCourseRequest  (required)
     * @return ApiResponse&lt;CoreCompetencyGradeCompetencyInCourse200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreCompetencyGradeCompetencyInCourse200Response> coreCompetencyGradeCompetencyInCourseWithHttpInfo(CoreCompetencyGradeCompetencyInCourseRequest coreCompetencyGradeCompetencyInCourseRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCompetencyGradeCompetencyInCourseValidateBeforeCall(coreCompetencyGradeCompetencyInCourseRequest, null);
        Type localVarReturnType = new TypeToken<CoreCompetencyGradeCompetencyInCourse200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Grade a competency from the course page. (asynchronously)
     * Grade a competency from the course page.
     * @param coreCompetencyGradeCompetencyInCourseRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyGradeCompetencyInCourseAsync(CoreCompetencyGradeCompetencyInCourseRequest coreCompetencyGradeCompetencyInCourseRequest, final ApiCallback<CoreCompetencyGradeCompetencyInCourse200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCompetencyGradeCompetencyInCourseValidateBeforeCall(coreCompetencyGradeCompetencyInCourseRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreCompetencyGradeCompetencyInCourse200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCompetencyGradeCompetencyInPlan
     * @param coreCompetencyGradeCompetencyInPlanRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyGradeCompetencyInPlanCall(CoreCompetencyGradeCompetencyInPlanRequest coreCompetencyGradeCompetencyInPlanRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCompetencyGradeCompetencyInPlanRequest;

        // create path and map variables
        String localVarPath = "/core_competency_grade_competency_in_plan";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCompetencyGradeCompetencyInPlanValidateBeforeCall(CoreCompetencyGradeCompetencyInPlanRequest coreCompetencyGradeCompetencyInPlanRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCompetencyGradeCompetencyInPlanRequest' is set
        if (coreCompetencyGradeCompetencyInPlanRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCompetencyGradeCompetencyInPlanRequest' when calling coreCompetencyGradeCompetencyInPlan(Async)");
        }

        return coreCompetencyGradeCompetencyInPlanCall(coreCompetencyGradeCompetencyInPlanRequest, _callback);

    }

    /**
     * Grade a competency from the user plan page.
     * Grade a competency from the user plan page.
     * @param coreCompetencyGradeCompetencyInPlanRequest  (required)
     * @return CoreCompetencyGradeCompetencyInCourse200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreCompetencyGradeCompetencyInCourse200Response coreCompetencyGradeCompetencyInPlan(CoreCompetencyGradeCompetencyInPlanRequest coreCompetencyGradeCompetencyInPlanRequest) throws ApiException {
        ApiResponse<CoreCompetencyGradeCompetencyInCourse200Response> localVarResp = coreCompetencyGradeCompetencyInPlanWithHttpInfo(coreCompetencyGradeCompetencyInPlanRequest);
        return localVarResp.getData();
    }

    /**
     * Grade a competency from the user plan page.
     * Grade a competency from the user plan page.
     * @param coreCompetencyGradeCompetencyInPlanRequest  (required)
     * @return ApiResponse&lt;CoreCompetencyGradeCompetencyInCourse200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreCompetencyGradeCompetencyInCourse200Response> coreCompetencyGradeCompetencyInPlanWithHttpInfo(CoreCompetencyGradeCompetencyInPlanRequest coreCompetencyGradeCompetencyInPlanRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCompetencyGradeCompetencyInPlanValidateBeforeCall(coreCompetencyGradeCompetencyInPlanRequest, null);
        Type localVarReturnType = new TypeToken<CoreCompetencyGradeCompetencyInCourse200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Grade a competency from the user plan page. (asynchronously)
     * Grade a competency from the user plan page.
     * @param coreCompetencyGradeCompetencyInPlanRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyGradeCompetencyInPlanAsync(CoreCompetencyGradeCompetencyInPlanRequest coreCompetencyGradeCompetencyInPlanRequest, final ApiCallback<CoreCompetencyGradeCompetencyInCourse200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCompetencyGradeCompetencyInPlanValidateBeforeCall(coreCompetencyGradeCompetencyInPlanRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreCompetencyGradeCompetencyInCourse200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCompetencyListCompetencies
     * @param coreCompetencyListCompetenciesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyListCompetenciesCall(CoreCompetencyListCompetenciesRequest coreCompetencyListCompetenciesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCompetencyListCompetenciesRequest;

        // create path and map variables
        String localVarPath = "/core_competency_list_competencies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCompetencyListCompetenciesValidateBeforeCall(CoreCompetencyListCompetenciesRequest coreCompetencyListCompetenciesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCompetencyListCompetenciesRequest' is set
        if (coreCompetencyListCompetenciesRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCompetencyListCompetenciesRequest' when calling coreCompetencyListCompetencies(Async)");
        }

        return coreCompetencyListCompetenciesCall(coreCompetencyListCompetenciesRequest, _callback);

    }

    /**
     * Load a list of a competencies.
     * Load a list of a competencies.
     * @param coreCompetencyListCompetenciesRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreCompetencyListCompetencies(CoreCompetencyListCompetenciesRequest coreCompetencyListCompetenciesRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreCompetencyListCompetenciesWithHttpInfo(coreCompetencyListCompetenciesRequest);
        return localVarResp.getData();
    }

    /**
     * Load a list of a competencies.
     * Load a list of a competencies.
     * @param coreCompetencyListCompetenciesRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreCompetencyListCompetenciesWithHttpInfo(CoreCompetencyListCompetenciesRequest coreCompetencyListCompetenciesRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCompetencyListCompetenciesValidateBeforeCall(coreCompetencyListCompetenciesRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Load a list of a competencies. (asynchronously)
     * Load a list of a competencies.
     * @param coreCompetencyListCompetenciesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyListCompetenciesAsync(CoreCompetencyListCompetenciesRequest coreCompetencyListCompetenciesRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCompetencyListCompetenciesValidateBeforeCall(coreCompetencyListCompetenciesRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCompetencyListCompetenciesInTemplate
     * @param coreCompetencyCountCompetenciesInTemplateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyListCompetenciesInTemplateCall(CoreCompetencyCountCompetenciesInTemplateRequest coreCompetencyCountCompetenciesInTemplateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCompetencyCountCompetenciesInTemplateRequest;

        // create path and map variables
        String localVarPath = "/core_competency_list_competencies_in_template";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCompetencyListCompetenciesInTemplateValidateBeforeCall(CoreCompetencyCountCompetenciesInTemplateRequest coreCompetencyCountCompetenciesInTemplateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCompetencyCountCompetenciesInTemplateRequest' is set
        if (coreCompetencyCountCompetenciesInTemplateRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCompetencyCountCompetenciesInTemplateRequest' when calling coreCompetencyListCompetenciesInTemplate(Async)");
        }

        return coreCompetencyListCompetenciesInTemplateCall(coreCompetencyCountCompetenciesInTemplateRequest, _callback);

    }

    /**
     * Load a list of a competencies for a given template.
     * Load a list of a competencies for a given template.
     * @param coreCompetencyCountCompetenciesInTemplateRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreCompetencyListCompetenciesInTemplate(CoreCompetencyCountCompetenciesInTemplateRequest coreCompetencyCountCompetenciesInTemplateRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreCompetencyListCompetenciesInTemplateWithHttpInfo(coreCompetencyCountCompetenciesInTemplateRequest);
        return localVarResp.getData();
    }

    /**
     * Load a list of a competencies for a given template.
     * Load a list of a competencies for a given template.
     * @param coreCompetencyCountCompetenciesInTemplateRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreCompetencyListCompetenciesInTemplateWithHttpInfo(CoreCompetencyCountCompetenciesInTemplateRequest coreCompetencyCountCompetenciesInTemplateRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCompetencyListCompetenciesInTemplateValidateBeforeCall(coreCompetencyCountCompetenciesInTemplateRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Load a list of a competencies for a given template. (asynchronously)
     * Load a list of a competencies for a given template.
     * @param coreCompetencyCountCompetenciesInTemplateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyListCompetenciesInTemplateAsync(CoreCompetencyCountCompetenciesInTemplateRequest coreCompetencyCountCompetenciesInTemplateRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCompetencyListCompetenciesInTemplateValidateBeforeCall(coreCompetencyCountCompetenciesInTemplateRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCompetencyListCompetencyFrameworks
     * @param coreCompetencyListCompetencyFrameworksRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyListCompetencyFrameworksCall(CoreCompetencyListCompetencyFrameworksRequest coreCompetencyListCompetencyFrameworksRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCompetencyListCompetencyFrameworksRequest;

        // create path and map variables
        String localVarPath = "/core_competency_list_competency_frameworks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCompetencyListCompetencyFrameworksValidateBeforeCall(CoreCompetencyListCompetencyFrameworksRequest coreCompetencyListCompetencyFrameworksRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCompetencyListCompetencyFrameworksRequest' is set
        if (coreCompetencyListCompetencyFrameworksRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCompetencyListCompetencyFrameworksRequest' when calling coreCompetencyListCompetencyFrameworks(Async)");
        }

        return coreCompetencyListCompetencyFrameworksCall(coreCompetencyListCompetencyFrameworksRequest, _callback);

    }

    /**
     * Load a list of a competency frameworks.
     * Load a list of a competency frameworks.
     * @param coreCompetencyListCompetencyFrameworksRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreCompetencyListCompetencyFrameworks(CoreCompetencyListCompetencyFrameworksRequest coreCompetencyListCompetencyFrameworksRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreCompetencyListCompetencyFrameworksWithHttpInfo(coreCompetencyListCompetencyFrameworksRequest);
        return localVarResp.getData();
    }

    /**
     * Load a list of a competency frameworks.
     * Load a list of a competency frameworks.
     * @param coreCompetencyListCompetencyFrameworksRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreCompetencyListCompetencyFrameworksWithHttpInfo(CoreCompetencyListCompetencyFrameworksRequest coreCompetencyListCompetencyFrameworksRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCompetencyListCompetencyFrameworksValidateBeforeCall(coreCompetencyListCompetencyFrameworksRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Load a list of a competency frameworks. (asynchronously)
     * Load a list of a competency frameworks.
     * @param coreCompetencyListCompetencyFrameworksRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyListCompetencyFrameworksAsync(CoreCompetencyListCompetencyFrameworksRequest coreCompetencyListCompetencyFrameworksRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCompetencyListCompetencyFrameworksValidateBeforeCall(coreCompetencyListCompetencyFrameworksRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCompetencyListCourseCompetencies
     * @param coreCompetencyCountCompetenciesInCourseRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyListCourseCompetenciesCall(CoreCompetencyCountCompetenciesInCourseRequest coreCompetencyCountCompetenciesInCourseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCompetencyCountCompetenciesInCourseRequest;

        // create path and map variables
        String localVarPath = "/core_competency_list_course_competencies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCompetencyListCourseCompetenciesValidateBeforeCall(CoreCompetencyCountCompetenciesInCourseRequest coreCompetencyCountCompetenciesInCourseRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCompetencyCountCompetenciesInCourseRequest' is set
        if (coreCompetencyCountCompetenciesInCourseRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCompetencyCountCompetenciesInCourseRequest' when calling coreCompetencyListCourseCompetencies(Async)");
        }

        return coreCompetencyListCourseCompetenciesCall(coreCompetencyCountCompetenciesInCourseRequest, _callback);

    }

    /**
     * List the competencies in a course
     * List the competencies in a course
     * @param coreCompetencyCountCompetenciesInCourseRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreCompetencyListCourseCompetencies(CoreCompetencyCountCompetenciesInCourseRequest coreCompetencyCountCompetenciesInCourseRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreCompetencyListCourseCompetenciesWithHttpInfo(coreCompetencyCountCompetenciesInCourseRequest);
        return localVarResp.getData();
    }

    /**
     * List the competencies in a course
     * List the competencies in a course
     * @param coreCompetencyCountCompetenciesInCourseRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreCompetencyListCourseCompetenciesWithHttpInfo(CoreCompetencyCountCompetenciesInCourseRequest coreCompetencyCountCompetenciesInCourseRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCompetencyListCourseCompetenciesValidateBeforeCall(coreCompetencyCountCompetenciesInCourseRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the competencies in a course (asynchronously)
     * List the competencies in a course
     * @param coreCompetencyCountCompetenciesInCourseRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyListCourseCompetenciesAsync(CoreCompetencyCountCompetenciesInCourseRequest coreCompetencyCountCompetenciesInCourseRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCompetencyListCourseCompetenciesValidateBeforeCall(coreCompetencyCountCompetenciesInCourseRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCompetencyListCourseModuleCompetencies
     * @param coreCompetencyListCourseModuleCompetenciesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyListCourseModuleCompetenciesCall(CoreCompetencyListCourseModuleCompetenciesRequest coreCompetencyListCourseModuleCompetenciesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCompetencyListCourseModuleCompetenciesRequest;

        // create path and map variables
        String localVarPath = "/core_competency_list_course_module_competencies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCompetencyListCourseModuleCompetenciesValidateBeforeCall(CoreCompetencyListCourseModuleCompetenciesRequest coreCompetencyListCourseModuleCompetenciesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCompetencyListCourseModuleCompetenciesRequest' is set
        if (coreCompetencyListCourseModuleCompetenciesRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCompetencyListCourseModuleCompetenciesRequest' when calling coreCompetencyListCourseModuleCompetencies(Async)");
        }

        return coreCompetencyListCourseModuleCompetenciesCall(coreCompetencyListCourseModuleCompetenciesRequest, _callback);

    }

    /**
     * List the competencies in a course module
     * List the competencies in a course module
     * @param coreCompetencyListCourseModuleCompetenciesRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreCompetencyListCourseModuleCompetencies(CoreCompetencyListCourseModuleCompetenciesRequest coreCompetencyListCourseModuleCompetenciesRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreCompetencyListCourseModuleCompetenciesWithHttpInfo(coreCompetencyListCourseModuleCompetenciesRequest);
        return localVarResp.getData();
    }

    /**
     * List the competencies in a course module
     * List the competencies in a course module
     * @param coreCompetencyListCourseModuleCompetenciesRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreCompetencyListCourseModuleCompetenciesWithHttpInfo(CoreCompetencyListCourseModuleCompetenciesRequest coreCompetencyListCourseModuleCompetenciesRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCompetencyListCourseModuleCompetenciesValidateBeforeCall(coreCompetencyListCourseModuleCompetenciesRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the competencies in a course module (asynchronously)
     * List the competencies in a course module
     * @param coreCompetencyListCourseModuleCompetenciesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyListCourseModuleCompetenciesAsync(CoreCompetencyListCourseModuleCompetenciesRequest coreCompetencyListCourseModuleCompetenciesRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCompetencyListCourseModuleCompetenciesValidateBeforeCall(coreCompetencyListCourseModuleCompetenciesRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCompetencyListPlanCompetencies
     * @param coreCompetencyListPlanCompetenciesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyListPlanCompetenciesCall(CoreCompetencyListPlanCompetenciesRequest coreCompetencyListPlanCompetenciesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCompetencyListPlanCompetenciesRequest;

        // create path and map variables
        String localVarPath = "/core_competency_list_plan_competencies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCompetencyListPlanCompetenciesValidateBeforeCall(CoreCompetencyListPlanCompetenciesRequest coreCompetencyListPlanCompetenciesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCompetencyListPlanCompetenciesRequest' is set
        if (coreCompetencyListPlanCompetenciesRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCompetencyListPlanCompetenciesRequest' when calling coreCompetencyListPlanCompetencies(Async)");
        }

        return coreCompetencyListPlanCompetenciesCall(coreCompetencyListPlanCompetenciesRequest, _callback);

    }

    /**
     * List the competencies in a plan
     * List the competencies in a plan
     * @param coreCompetencyListPlanCompetenciesRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreCompetencyListPlanCompetencies(CoreCompetencyListPlanCompetenciesRequest coreCompetencyListPlanCompetenciesRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreCompetencyListPlanCompetenciesWithHttpInfo(coreCompetencyListPlanCompetenciesRequest);
        return localVarResp.getData();
    }

    /**
     * List the competencies in a plan
     * List the competencies in a plan
     * @param coreCompetencyListPlanCompetenciesRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreCompetencyListPlanCompetenciesWithHttpInfo(CoreCompetencyListPlanCompetenciesRequest coreCompetencyListPlanCompetenciesRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCompetencyListPlanCompetenciesValidateBeforeCall(coreCompetencyListPlanCompetenciesRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the competencies in a plan (asynchronously)
     * List the competencies in a plan
     * @param coreCompetencyListPlanCompetenciesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyListPlanCompetenciesAsync(CoreCompetencyListPlanCompetenciesRequest coreCompetencyListPlanCompetenciesRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCompetencyListPlanCompetenciesValidateBeforeCall(coreCompetencyListPlanCompetenciesRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCompetencyListTemplates
     * @param coreCompetencyListTemplatesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyListTemplatesCall(CoreCompetencyListTemplatesRequest coreCompetencyListTemplatesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCompetencyListTemplatesRequest;

        // create path and map variables
        String localVarPath = "/core_competency_list_templates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCompetencyListTemplatesValidateBeforeCall(CoreCompetencyListTemplatesRequest coreCompetencyListTemplatesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCompetencyListTemplatesRequest' is set
        if (coreCompetencyListTemplatesRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCompetencyListTemplatesRequest' when calling coreCompetencyListTemplates(Async)");
        }

        return coreCompetencyListTemplatesCall(coreCompetencyListTemplatesRequest, _callback);

    }

    /**
     * Load a list of a learning plan templates.
     * Load a list of a learning plan templates.
     * @param coreCompetencyListTemplatesRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreCompetencyListTemplates(CoreCompetencyListTemplatesRequest coreCompetencyListTemplatesRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreCompetencyListTemplatesWithHttpInfo(coreCompetencyListTemplatesRequest);
        return localVarResp.getData();
    }

    /**
     * Load a list of a learning plan templates.
     * Load a list of a learning plan templates.
     * @param coreCompetencyListTemplatesRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreCompetencyListTemplatesWithHttpInfo(CoreCompetencyListTemplatesRequest coreCompetencyListTemplatesRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCompetencyListTemplatesValidateBeforeCall(coreCompetencyListTemplatesRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Load a list of a learning plan templates. (asynchronously)
     * Load a list of a learning plan templates.
     * @param coreCompetencyListTemplatesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyListTemplatesAsync(CoreCompetencyListTemplatesRequest coreCompetencyListTemplatesRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCompetencyListTemplatesValidateBeforeCall(coreCompetencyListTemplatesRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCompetencyListTemplatesUsingCompetency
     * @param coreCompetencyCompetencyViewedRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyListTemplatesUsingCompetencyCall(CoreCompetencyCompetencyViewedRequest coreCompetencyCompetencyViewedRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCompetencyCompetencyViewedRequest;

        // create path and map variables
        String localVarPath = "/core_competency_list_templates_using_competency";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCompetencyListTemplatesUsingCompetencyValidateBeforeCall(CoreCompetencyCompetencyViewedRequest coreCompetencyCompetencyViewedRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCompetencyCompetencyViewedRequest' is set
        if (coreCompetencyCompetencyViewedRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCompetencyCompetencyViewedRequest' when calling coreCompetencyListTemplatesUsingCompetency(Async)");
        }

        return coreCompetencyListTemplatesUsingCompetencyCall(coreCompetencyCompetencyViewedRequest, _callback);

    }

    /**
     * Load a list of a learning plan templates for a given competency.
     * Load a list of a learning plan templates for a given competency.
     * @param coreCompetencyCompetencyViewedRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreCompetencyListTemplatesUsingCompetency(CoreCompetencyCompetencyViewedRequest coreCompetencyCompetencyViewedRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreCompetencyListTemplatesUsingCompetencyWithHttpInfo(coreCompetencyCompetencyViewedRequest);
        return localVarResp.getData();
    }

    /**
     * Load a list of a learning plan templates for a given competency.
     * Load a list of a learning plan templates for a given competency.
     * @param coreCompetencyCompetencyViewedRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreCompetencyListTemplatesUsingCompetencyWithHttpInfo(CoreCompetencyCompetencyViewedRequest coreCompetencyCompetencyViewedRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCompetencyListTemplatesUsingCompetencyValidateBeforeCall(coreCompetencyCompetencyViewedRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Load a list of a learning plan templates for a given competency. (asynchronously)
     * Load a list of a learning plan templates for a given competency.
     * @param coreCompetencyCompetencyViewedRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyListTemplatesUsingCompetencyAsync(CoreCompetencyCompetencyViewedRequest coreCompetencyCompetencyViewedRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCompetencyListTemplatesUsingCompetencyValidateBeforeCall(coreCompetencyCompetencyViewedRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCompetencyListUserPlans
     * @param coreCompetencyListUserPlansRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyListUserPlansCall(CoreCompetencyListUserPlansRequest coreCompetencyListUserPlansRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCompetencyListUserPlansRequest;

        // create path and map variables
        String localVarPath = "/core_competency_list_user_plans";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCompetencyListUserPlansValidateBeforeCall(CoreCompetencyListUserPlansRequest coreCompetencyListUserPlansRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCompetencyListUserPlansRequest' is set
        if (coreCompetencyListUserPlansRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCompetencyListUserPlansRequest' when calling coreCompetencyListUserPlans(Async)");
        }

        return coreCompetencyListUserPlansCall(coreCompetencyListUserPlansRequest, _callback);

    }

    /**
     * List a user&#39;s learning plans.
     * List a user&#39;s learning plans.
     * @param coreCompetencyListUserPlansRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreCompetencyListUserPlans(CoreCompetencyListUserPlansRequest coreCompetencyListUserPlansRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreCompetencyListUserPlansWithHttpInfo(coreCompetencyListUserPlansRequest);
        return localVarResp.getData();
    }

    /**
     * List a user&#39;s learning plans.
     * List a user&#39;s learning plans.
     * @param coreCompetencyListUserPlansRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreCompetencyListUserPlansWithHttpInfo(CoreCompetencyListUserPlansRequest coreCompetencyListUserPlansRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCompetencyListUserPlansValidateBeforeCall(coreCompetencyListUserPlansRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List a user&#39;s learning plans. (asynchronously)
     * List a user&#39;s learning plans.
     * @param coreCompetencyListUserPlansRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyListUserPlansAsync(CoreCompetencyListUserPlansRequest coreCompetencyListUserPlansRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCompetencyListUserPlansValidateBeforeCall(coreCompetencyListUserPlansRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCompetencyMoveDownCompetency
     * @param coreCompetencyCompetencyViewedRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if the update was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyMoveDownCompetencyCall(CoreCompetencyCompetencyViewedRequest coreCompetencyCompetencyViewedRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCompetencyCompetencyViewedRequest;

        // create path and map variables
        String localVarPath = "/core_competency_move_down_competency";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCompetencyMoveDownCompetencyValidateBeforeCall(CoreCompetencyCompetencyViewedRequest coreCompetencyCompetencyViewedRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCompetencyCompetencyViewedRequest' is set
        if (coreCompetencyCompetencyViewedRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCompetencyCompetencyViewedRequest' when calling coreCompetencyMoveDownCompetency(Async)");
        }

        return coreCompetencyMoveDownCompetencyCall(coreCompetencyCompetencyViewedRequest, _callback);

    }

    /**
     * Re-order a competency.
     * Re-order a competency.
     * @param coreCompetencyCompetencyViewedRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if the update was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreCompetencyMoveDownCompetency(CoreCompetencyCompetencyViewedRequest coreCompetencyCompetencyViewedRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreCompetencyMoveDownCompetencyWithHttpInfo(coreCompetencyCompetencyViewedRequest);
        return localVarResp.getData();
    }

    /**
     * Re-order a competency.
     * Re-order a competency.
     * @param coreCompetencyCompetencyViewedRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if the update was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreCompetencyMoveDownCompetencyWithHttpInfo(CoreCompetencyCompetencyViewedRequest coreCompetencyCompetencyViewedRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCompetencyMoveDownCompetencyValidateBeforeCall(coreCompetencyCompetencyViewedRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Re-order a competency. (asynchronously)
     * Re-order a competency.
     * @param coreCompetencyCompetencyViewedRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if the update was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyMoveDownCompetencyAsync(CoreCompetencyCompetencyViewedRequest coreCompetencyCompetencyViewedRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCompetencyMoveDownCompetencyValidateBeforeCall(coreCompetencyCompetencyViewedRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCompetencyMoveUpCompetency
     * @param coreCompetencyCompetencyViewedRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if the update was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyMoveUpCompetencyCall(CoreCompetencyCompetencyViewedRequest coreCompetencyCompetencyViewedRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCompetencyCompetencyViewedRequest;

        // create path and map variables
        String localVarPath = "/core_competency_move_up_competency";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCompetencyMoveUpCompetencyValidateBeforeCall(CoreCompetencyCompetencyViewedRequest coreCompetencyCompetencyViewedRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCompetencyCompetencyViewedRequest' is set
        if (coreCompetencyCompetencyViewedRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCompetencyCompetencyViewedRequest' when calling coreCompetencyMoveUpCompetency(Async)");
        }

        return coreCompetencyMoveUpCompetencyCall(coreCompetencyCompetencyViewedRequest, _callback);

    }

    /**
     * Re-order a competency.
     * Re-order a competency.
     * @param coreCompetencyCompetencyViewedRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if the update was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreCompetencyMoveUpCompetency(CoreCompetencyCompetencyViewedRequest coreCompetencyCompetencyViewedRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreCompetencyMoveUpCompetencyWithHttpInfo(coreCompetencyCompetencyViewedRequest);
        return localVarResp.getData();
    }

    /**
     * Re-order a competency.
     * Re-order a competency.
     * @param coreCompetencyCompetencyViewedRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if the update was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreCompetencyMoveUpCompetencyWithHttpInfo(CoreCompetencyCompetencyViewedRequest coreCompetencyCompetencyViewedRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCompetencyMoveUpCompetencyValidateBeforeCall(coreCompetencyCompetencyViewedRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Re-order a competency. (asynchronously)
     * Re-order a competency.
     * @param coreCompetencyCompetencyViewedRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if the update was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyMoveUpCompetencyAsync(CoreCompetencyCompetencyViewedRequest coreCompetencyCompetencyViewedRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCompetencyMoveUpCompetencyValidateBeforeCall(coreCompetencyCompetencyViewedRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCompetencyPlanCancelReviewRequest
     * @param coreCompetencyPlanCancelReviewRequestRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyPlanCancelReviewRequestCall(CoreCompetencyPlanCancelReviewRequestRequest coreCompetencyPlanCancelReviewRequestRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCompetencyPlanCancelReviewRequestRequest;

        // create path and map variables
        String localVarPath = "/core_competency_plan_cancel_review_request";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCompetencyPlanCancelReviewRequestValidateBeforeCall(CoreCompetencyPlanCancelReviewRequestRequest coreCompetencyPlanCancelReviewRequestRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCompetencyPlanCancelReviewRequestRequest' is set
        if (coreCompetencyPlanCancelReviewRequestRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCompetencyPlanCancelReviewRequestRequest' when calling coreCompetencyPlanCancelReviewRequest(Async)");
        }

        return coreCompetencyPlanCancelReviewRequestCall(coreCompetencyPlanCancelReviewRequestRequest, _callback);

    }

    /**
     * Cancel the review of a plan.
     * Cancel the review of a plan.
     * @param coreCompetencyPlanCancelReviewRequestRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreCompetencyPlanCancelReviewRequest(CoreCompetencyPlanCancelReviewRequestRequest coreCompetencyPlanCancelReviewRequestRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreCompetencyPlanCancelReviewRequestWithHttpInfo(coreCompetencyPlanCancelReviewRequestRequest);
        return localVarResp.getData();
    }

    /**
     * Cancel the review of a plan.
     * Cancel the review of a plan.
     * @param coreCompetencyPlanCancelReviewRequestRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreCompetencyPlanCancelReviewRequestWithHttpInfo(CoreCompetencyPlanCancelReviewRequestRequest coreCompetencyPlanCancelReviewRequestRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCompetencyPlanCancelReviewRequestValidateBeforeCall(coreCompetencyPlanCancelReviewRequestRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Cancel the review of a plan. (asynchronously)
     * Cancel the review of a plan.
     * @param coreCompetencyPlanCancelReviewRequestRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyPlanCancelReviewRequestAsync(CoreCompetencyPlanCancelReviewRequestRequest coreCompetencyPlanCancelReviewRequestRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCompetencyPlanCancelReviewRequestValidateBeforeCall(coreCompetencyPlanCancelReviewRequestRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCompetencyPlanRequestReview
     * @param coreCompetencyPlanCancelReviewRequestRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyPlanRequestReviewCall(CoreCompetencyPlanCancelReviewRequestRequest coreCompetencyPlanCancelReviewRequestRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCompetencyPlanCancelReviewRequestRequest;

        // create path and map variables
        String localVarPath = "/core_competency_plan_request_review";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCompetencyPlanRequestReviewValidateBeforeCall(CoreCompetencyPlanCancelReviewRequestRequest coreCompetencyPlanCancelReviewRequestRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCompetencyPlanCancelReviewRequestRequest' is set
        if (coreCompetencyPlanCancelReviewRequestRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCompetencyPlanCancelReviewRequestRequest' when calling coreCompetencyPlanRequestReview(Async)");
        }

        return coreCompetencyPlanRequestReviewCall(coreCompetencyPlanCancelReviewRequestRequest, _callback);

    }

    /**
     * Request for a plan to be reviewed.
     * Request for a plan to be reviewed.
     * @param coreCompetencyPlanCancelReviewRequestRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreCompetencyPlanRequestReview(CoreCompetencyPlanCancelReviewRequestRequest coreCompetencyPlanCancelReviewRequestRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreCompetencyPlanRequestReviewWithHttpInfo(coreCompetencyPlanCancelReviewRequestRequest);
        return localVarResp.getData();
    }

    /**
     * Request for a plan to be reviewed.
     * Request for a plan to be reviewed.
     * @param coreCompetencyPlanCancelReviewRequestRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreCompetencyPlanRequestReviewWithHttpInfo(CoreCompetencyPlanCancelReviewRequestRequest coreCompetencyPlanCancelReviewRequestRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCompetencyPlanRequestReviewValidateBeforeCall(coreCompetencyPlanCancelReviewRequestRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Request for a plan to be reviewed. (asynchronously)
     * Request for a plan to be reviewed.
     * @param coreCompetencyPlanCancelReviewRequestRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyPlanRequestReviewAsync(CoreCompetencyPlanCancelReviewRequestRequest coreCompetencyPlanCancelReviewRequestRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCompetencyPlanRequestReviewValidateBeforeCall(coreCompetencyPlanCancelReviewRequestRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCompetencyPlanStartReview
     * @param coreCompetencyPlanCancelReviewRequestRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyPlanStartReviewCall(CoreCompetencyPlanCancelReviewRequestRequest coreCompetencyPlanCancelReviewRequestRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCompetencyPlanCancelReviewRequestRequest;

        // create path and map variables
        String localVarPath = "/core_competency_plan_start_review";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCompetencyPlanStartReviewValidateBeforeCall(CoreCompetencyPlanCancelReviewRequestRequest coreCompetencyPlanCancelReviewRequestRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCompetencyPlanCancelReviewRequestRequest' is set
        if (coreCompetencyPlanCancelReviewRequestRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCompetencyPlanCancelReviewRequestRequest' when calling coreCompetencyPlanStartReview(Async)");
        }

        return coreCompetencyPlanStartReviewCall(coreCompetencyPlanCancelReviewRequestRequest, _callback);

    }

    /**
     * Start the review of a plan.
     * Start the review of a plan.
     * @param coreCompetencyPlanCancelReviewRequestRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreCompetencyPlanStartReview(CoreCompetencyPlanCancelReviewRequestRequest coreCompetencyPlanCancelReviewRequestRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreCompetencyPlanStartReviewWithHttpInfo(coreCompetencyPlanCancelReviewRequestRequest);
        return localVarResp.getData();
    }

    /**
     * Start the review of a plan.
     * Start the review of a plan.
     * @param coreCompetencyPlanCancelReviewRequestRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreCompetencyPlanStartReviewWithHttpInfo(CoreCompetencyPlanCancelReviewRequestRequest coreCompetencyPlanCancelReviewRequestRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCompetencyPlanStartReviewValidateBeforeCall(coreCompetencyPlanCancelReviewRequestRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Start the review of a plan. (asynchronously)
     * Start the review of a plan.
     * @param coreCompetencyPlanCancelReviewRequestRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyPlanStartReviewAsync(CoreCompetencyPlanCancelReviewRequestRequest coreCompetencyPlanCancelReviewRequestRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCompetencyPlanStartReviewValidateBeforeCall(coreCompetencyPlanCancelReviewRequestRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCompetencyPlanStopReview
     * @param coreCompetencyPlanCancelReviewRequestRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyPlanStopReviewCall(CoreCompetencyPlanCancelReviewRequestRequest coreCompetencyPlanCancelReviewRequestRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCompetencyPlanCancelReviewRequestRequest;

        // create path and map variables
        String localVarPath = "/core_competency_plan_stop_review";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCompetencyPlanStopReviewValidateBeforeCall(CoreCompetencyPlanCancelReviewRequestRequest coreCompetencyPlanCancelReviewRequestRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCompetencyPlanCancelReviewRequestRequest' is set
        if (coreCompetencyPlanCancelReviewRequestRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCompetencyPlanCancelReviewRequestRequest' when calling coreCompetencyPlanStopReview(Async)");
        }

        return coreCompetencyPlanStopReviewCall(coreCompetencyPlanCancelReviewRequestRequest, _callback);

    }

    /**
     * Stop the review of a plan.
     * Stop the review of a plan.
     * @param coreCompetencyPlanCancelReviewRequestRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreCompetencyPlanStopReview(CoreCompetencyPlanCancelReviewRequestRequest coreCompetencyPlanCancelReviewRequestRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreCompetencyPlanStopReviewWithHttpInfo(coreCompetencyPlanCancelReviewRequestRequest);
        return localVarResp.getData();
    }

    /**
     * Stop the review of a plan.
     * Stop the review of a plan.
     * @param coreCompetencyPlanCancelReviewRequestRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreCompetencyPlanStopReviewWithHttpInfo(CoreCompetencyPlanCancelReviewRequestRequest coreCompetencyPlanCancelReviewRequestRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCompetencyPlanStopReviewValidateBeforeCall(coreCompetencyPlanCancelReviewRequestRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Stop the review of a plan. (asynchronously)
     * Stop the review of a plan.
     * @param coreCompetencyPlanCancelReviewRequestRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyPlanStopReviewAsync(CoreCompetencyPlanCancelReviewRequestRequest coreCompetencyPlanCancelReviewRequestRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCompetencyPlanStopReviewValidateBeforeCall(coreCompetencyPlanCancelReviewRequestRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCompetencyReadCompetency
     * @param coreCompetencyReadCompetencyRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyReadCompetencyCall(CoreCompetencyReadCompetencyRequest coreCompetencyReadCompetencyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCompetencyReadCompetencyRequest;

        // create path and map variables
        String localVarPath = "/core_competency_read_competency";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCompetencyReadCompetencyValidateBeforeCall(CoreCompetencyReadCompetencyRequest coreCompetencyReadCompetencyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCompetencyReadCompetencyRequest' is set
        if (coreCompetencyReadCompetencyRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCompetencyReadCompetencyRequest' when calling coreCompetencyReadCompetency(Async)");
        }

        return coreCompetencyReadCompetencyCall(coreCompetencyReadCompetencyRequest, _callback);

    }

    /**
     * Load a summary of a competency.
     * Load a summary of a competency.
     * @param coreCompetencyReadCompetencyRequest  (required)
     * @return CoreCompetencyCreateCompetency200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreCompetencyCreateCompetency200Response coreCompetencyReadCompetency(CoreCompetencyReadCompetencyRequest coreCompetencyReadCompetencyRequest) throws ApiException {
        ApiResponse<CoreCompetencyCreateCompetency200Response> localVarResp = coreCompetencyReadCompetencyWithHttpInfo(coreCompetencyReadCompetencyRequest);
        return localVarResp.getData();
    }

    /**
     * Load a summary of a competency.
     * Load a summary of a competency.
     * @param coreCompetencyReadCompetencyRequest  (required)
     * @return ApiResponse&lt;CoreCompetencyCreateCompetency200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreCompetencyCreateCompetency200Response> coreCompetencyReadCompetencyWithHttpInfo(CoreCompetencyReadCompetencyRequest coreCompetencyReadCompetencyRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCompetencyReadCompetencyValidateBeforeCall(coreCompetencyReadCompetencyRequest, null);
        Type localVarReturnType = new TypeToken<CoreCompetencyCreateCompetency200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Load a summary of a competency. (asynchronously)
     * Load a summary of a competency.
     * @param coreCompetencyReadCompetencyRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyReadCompetencyAsync(CoreCompetencyReadCompetencyRequest coreCompetencyReadCompetencyRequest, final ApiCallback<CoreCompetencyCreateCompetency200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCompetencyReadCompetencyValidateBeforeCall(coreCompetencyReadCompetencyRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreCompetencyCreateCompetency200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCompetencyReadCompetencyFramework
     * @param coreCompetencyDuplicateCompetencyFrameworkRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyReadCompetencyFrameworkCall(CoreCompetencyDuplicateCompetencyFrameworkRequest coreCompetencyDuplicateCompetencyFrameworkRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCompetencyDuplicateCompetencyFrameworkRequest;

        // create path and map variables
        String localVarPath = "/core_competency_read_competency_framework";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCompetencyReadCompetencyFrameworkValidateBeforeCall(CoreCompetencyDuplicateCompetencyFrameworkRequest coreCompetencyDuplicateCompetencyFrameworkRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCompetencyDuplicateCompetencyFrameworkRequest' is set
        if (coreCompetencyDuplicateCompetencyFrameworkRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCompetencyDuplicateCompetencyFrameworkRequest' when calling coreCompetencyReadCompetencyFramework(Async)");
        }

        return coreCompetencyReadCompetencyFrameworkCall(coreCompetencyDuplicateCompetencyFrameworkRequest, _callback);

    }

    /**
     * Load a summary of a competency framework.
     * Load a summary of a competency framework.
     * @param coreCompetencyDuplicateCompetencyFrameworkRequest  (required)
     * @return CoreCompetencyDuplicateCompetencyFramework200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreCompetencyDuplicateCompetencyFramework200Response coreCompetencyReadCompetencyFramework(CoreCompetencyDuplicateCompetencyFrameworkRequest coreCompetencyDuplicateCompetencyFrameworkRequest) throws ApiException {
        ApiResponse<CoreCompetencyDuplicateCompetencyFramework200Response> localVarResp = coreCompetencyReadCompetencyFrameworkWithHttpInfo(coreCompetencyDuplicateCompetencyFrameworkRequest);
        return localVarResp.getData();
    }

    /**
     * Load a summary of a competency framework.
     * Load a summary of a competency framework.
     * @param coreCompetencyDuplicateCompetencyFrameworkRequest  (required)
     * @return ApiResponse&lt;CoreCompetencyDuplicateCompetencyFramework200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreCompetencyDuplicateCompetencyFramework200Response> coreCompetencyReadCompetencyFrameworkWithHttpInfo(CoreCompetencyDuplicateCompetencyFrameworkRequest coreCompetencyDuplicateCompetencyFrameworkRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCompetencyReadCompetencyFrameworkValidateBeforeCall(coreCompetencyDuplicateCompetencyFrameworkRequest, null);
        Type localVarReturnType = new TypeToken<CoreCompetencyDuplicateCompetencyFramework200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Load a summary of a competency framework. (asynchronously)
     * Load a summary of a competency framework.
     * @param coreCompetencyDuplicateCompetencyFrameworkRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyReadCompetencyFrameworkAsync(CoreCompetencyDuplicateCompetencyFrameworkRequest coreCompetencyDuplicateCompetencyFrameworkRequest, final ApiCallback<CoreCompetencyDuplicateCompetencyFramework200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCompetencyReadCompetencyFrameworkValidateBeforeCall(coreCompetencyDuplicateCompetencyFrameworkRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreCompetencyDuplicateCompetencyFramework200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCompetencyReadPlan
     * @param coreCompetencyReadPlanRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyReadPlanCall(CoreCompetencyReadPlanRequest coreCompetencyReadPlanRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCompetencyReadPlanRequest;

        // create path and map variables
        String localVarPath = "/core_competency_read_plan";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCompetencyReadPlanValidateBeforeCall(CoreCompetencyReadPlanRequest coreCompetencyReadPlanRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCompetencyReadPlanRequest' is set
        if (coreCompetencyReadPlanRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCompetencyReadPlanRequest' when calling coreCompetencyReadPlan(Async)");
        }

        return coreCompetencyReadPlanCall(coreCompetencyReadPlanRequest, _callback);

    }

    /**
     * Load a learning plan.
     * Load a learning plan.
     * @param coreCompetencyReadPlanRequest  (required)
     * @return CoreCompetencyReadPlan200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreCompetencyReadPlan200Response coreCompetencyReadPlan(CoreCompetencyReadPlanRequest coreCompetencyReadPlanRequest) throws ApiException {
        ApiResponse<CoreCompetencyReadPlan200Response> localVarResp = coreCompetencyReadPlanWithHttpInfo(coreCompetencyReadPlanRequest);
        return localVarResp.getData();
    }

    /**
     * Load a learning plan.
     * Load a learning plan.
     * @param coreCompetencyReadPlanRequest  (required)
     * @return ApiResponse&lt;CoreCompetencyReadPlan200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreCompetencyReadPlan200Response> coreCompetencyReadPlanWithHttpInfo(CoreCompetencyReadPlanRequest coreCompetencyReadPlanRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCompetencyReadPlanValidateBeforeCall(coreCompetencyReadPlanRequest, null);
        Type localVarReturnType = new TypeToken<CoreCompetencyReadPlan200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Load a learning plan. (asynchronously)
     * Load a learning plan.
     * @param coreCompetencyReadPlanRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyReadPlanAsync(CoreCompetencyReadPlanRequest coreCompetencyReadPlanRequest, final ApiCallback<CoreCompetencyReadPlan200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCompetencyReadPlanValidateBeforeCall(coreCompetencyReadPlanRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreCompetencyReadPlan200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCompetencyReadTemplate
     * @param coreCompetencyReadTemplateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyReadTemplateCall(CoreCompetencyReadTemplateRequest coreCompetencyReadTemplateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCompetencyReadTemplateRequest;

        // create path and map variables
        String localVarPath = "/core_competency_read_template";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCompetencyReadTemplateValidateBeforeCall(CoreCompetencyReadTemplateRequest coreCompetencyReadTemplateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCompetencyReadTemplateRequest' is set
        if (coreCompetencyReadTemplateRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCompetencyReadTemplateRequest' when calling coreCompetencyReadTemplate(Async)");
        }

        return coreCompetencyReadTemplateCall(coreCompetencyReadTemplateRequest, _callback);

    }

    /**
     * Load a summary of a learning plan template.
     * Load a summary of a learning plan template.
     * @param coreCompetencyReadTemplateRequest  (required)
     * @return CoreCompetencyCreateTemplate200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreCompetencyCreateTemplate200Response coreCompetencyReadTemplate(CoreCompetencyReadTemplateRequest coreCompetencyReadTemplateRequest) throws ApiException {
        ApiResponse<CoreCompetencyCreateTemplate200Response> localVarResp = coreCompetencyReadTemplateWithHttpInfo(coreCompetencyReadTemplateRequest);
        return localVarResp.getData();
    }

    /**
     * Load a summary of a learning plan template.
     * Load a summary of a learning plan template.
     * @param coreCompetencyReadTemplateRequest  (required)
     * @return ApiResponse&lt;CoreCompetencyCreateTemplate200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreCompetencyCreateTemplate200Response> coreCompetencyReadTemplateWithHttpInfo(CoreCompetencyReadTemplateRequest coreCompetencyReadTemplateRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCompetencyReadTemplateValidateBeforeCall(coreCompetencyReadTemplateRequest, null);
        Type localVarReturnType = new TypeToken<CoreCompetencyCreateTemplate200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Load a summary of a learning plan template. (asynchronously)
     * Load a summary of a learning plan template.
     * @param coreCompetencyReadTemplateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyReadTemplateAsync(CoreCompetencyReadTemplateRequest coreCompetencyReadTemplateRequest, final ApiCallback<CoreCompetencyCreateTemplate200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCompetencyReadTemplateValidateBeforeCall(coreCompetencyReadTemplateRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreCompetencyCreateTemplate200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCompetencyReadUserEvidence
     * @param coreCompetencyDeleteUserEvidenceRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyReadUserEvidenceCall(CoreCompetencyDeleteUserEvidenceRequest coreCompetencyDeleteUserEvidenceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCompetencyDeleteUserEvidenceRequest;

        // create path and map variables
        String localVarPath = "/core_competency_read_user_evidence";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCompetencyReadUserEvidenceValidateBeforeCall(CoreCompetencyDeleteUserEvidenceRequest coreCompetencyDeleteUserEvidenceRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCompetencyDeleteUserEvidenceRequest' is set
        if (coreCompetencyDeleteUserEvidenceRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCompetencyDeleteUserEvidenceRequest' when calling coreCompetencyReadUserEvidence(Async)");
        }

        return coreCompetencyReadUserEvidenceCall(coreCompetencyDeleteUserEvidenceRequest, _callback);

    }

    /**
     * Read an evidence of prior learning.
     * Read an evidence of prior learning.
     * @param coreCompetencyDeleteUserEvidenceRequest  (required)
     * @return CoreCompetencyReadUserEvidence200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreCompetencyReadUserEvidence200Response coreCompetencyReadUserEvidence(CoreCompetencyDeleteUserEvidenceRequest coreCompetencyDeleteUserEvidenceRequest) throws ApiException {
        ApiResponse<CoreCompetencyReadUserEvidence200Response> localVarResp = coreCompetencyReadUserEvidenceWithHttpInfo(coreCompetencyDeleteUserEvidenceRequest);
        return localVarResp.getData();
    }

    /**
     * Read an evidence of prior learning.
     * Read an evidence of prior learning.
     * @param coreCompetencyDeleteUserEvidenceRequest  (required)
     * @return ApiResponse&lt;CoreCompetencyReadUserEvidence200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreCompetencyReadUserEvidence200Response> coreCompetencyReadUserEvidenceWithHttpInfo(CoreCompetencyDeleteUserEvidenceRequest coreCompetencyDeleteUserEvidenceRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCompetencyReadUserEvidenceValidateBeforeCall(coreCompetencyDeleteUserEvidenceRequest, null);
        Type localVarReturnType = new TypeToken<CoreCompetencyReadUserEvidence200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Read an evidence of prior learning. (asynchronously)
     * Read an evidence of prior learning.
     * @param coreCompetencyDeleteUserEvidenceRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyReadUserEvidenceAsync(CoreCompetencyDeleteUserEvidenceRequest coreCompetencyDeleteUserEvidenceRequest, final ApiCallback<CoreCompetencyReadUserEvidence200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCompetencyReadUserEvidenceValidateBeforeCall(coreCompetencyDeleteUserEvidenceRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreCompetencyReadUserEvidence200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCompetencyRemoveCompetencyFromCourse
     * @param coreCompetencyRemoveCompetencyFromCourseRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyRemoveCompetencyFromCourseCall(CoreCompetencyRemoveCompetencyFromCourseRequest coreCompetencyRemoveCompetencyFromCourseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCompetencyRemoveCompetencyFromCourseRequest;

        // create path and map variables
        String localVarPath = "/core_competency_remove_competency_from_course";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCompetencyRemoveCompetencyFromCourseValidateBeforeCall(CoreCompetencyRemoveCompetencyFromCourseRequest coreCompetencyRemoveCompetencyFromCourseRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCompetencyRemoveCompetencyFromCourseRequest' is set
        if (coreCompetencyRemoveCompetencyFromCourseRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCompetencyRemoveCompetencyFromCourseRequest' when calling coreCompetencyRemoveCompetencyFromCourse(Async)");
        }

        return coreCompetencyRemoveCompetencyFromCourseCall(coreCompetencyRemoveCompetencyFromCourseRequest, _callback);

    }

    /**
     * Remove a competency from a course
     * Remove a competency from a course
     * @param coreCompetencyRemoveCompetencyFromCourseRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreCompetencyRemoveCompetencyFromCourse(CoreCompetencyRemoveCompetencyFromCourseRequest coreCompetencyRemoveCompetencyFromCourseRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreCompetencyRemoveCompetencyFromCourseWithHttpInfo(coreCompetencyRemoveCompetencyFromCourseRequest);
        return localVarResp.getData();
    }

    /**
     * Remove a competency from a course
     * Remove a competency from a course
     * @param coreCompetencyRemoveCompetencyFromCourseRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreCompetencyRemoveCompetencyFromCourseWithHttpInfo(CoreCompetencyRemoveCompetencyFromCourseRequest coreCompetencyRemoveCompetencyFromCourseRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCompetencyRemoveCompetencyFromCourseValidateBeforeCall(coreCompetencyRemoveCompetencyFromCourseRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove a competency from a course (asynchronously)
     * Remove a competency from a course
     * @param coreCompetencyRemoveCompetencyFromCourseRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyRemoveCompetencyFromCourseAsync(CoreCompetencyRemoveCompetencyFromCourseRequest coreCompetencyRemoveCompetencyFromCourseRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCompetencyRemoveCompetencyFromCourseValidateBeforeCall(coreCompetencyRemoveCompetencyFromCourseRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCompetencyRemoveCompetencyFromPlan
     * @param coreCompetencyRemoveCompetencyFromPlanRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyRemoveCompetencyFromPlanCall(CoreCompetencyRemoveCompetencyFromPlanRequest coreCompetencyRemoveCompetencyFromPlanRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCompetencyRemoveCompetencyFromPlanRequest;

        // create path and map variables
        String localVarPath = "/core_competency_remove_competency_from_plan";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCompetencyRemoveCompetencyFromPlanValidateBeforeCall(CoreCompetencyRemoveCompetencyFromPlanRequest coreCompetencyRemoveCompetencyFromPlanRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCompetencyRemoveCompetencyFromPlanRequest' is set
        if (coreCompetencyRemoveCompetencyFromPlanRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCompetencyRemoveCompetencyFromPlanRequest' when calling coreCompetencyRemoveCompetencyFromPlan(Async)");
        }

        return coreCompetencyRemoveCompetencyFromPlanCall(coreCompetencyRemoveCompetencyFromPlanRequest, _callback);

    }

    /**
     * Remove the competency from a learning plan
     * Remove the competency from a learning plan
     * @param coreCompetencyRemoveCompetencyFromPlanRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreCompetencyRemoveCompetencyFromPlan(CoreCompetencyRemoveCompetencyFromPlanRequest coreCompetencyRemoveCompetencyFromPlanRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreCompetencyRemoveCompetencyFromPlanWithHttpInfo(coreCompetencyRemoveCompetencyFromPlanRequest);
        return localVarResp.getData();
    }

    /**
     * Remove the competency from a learning plan
     * Remove the competency from a learning plan
     * @param coreCompetencyRemoveCompetencyFromPlanRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreCompetencyRemoveCompetencyFromPlanWithHttpInfo(CoreCompetencyRemoveCompetencyFromPlanRequest coreCompetencyRemoveCompetencyFromPlanRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCompetencyRemoveCompetencyFromPlanValidateBeforeCall(coreCompetencyRemoveCompetencyFromPlanRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove the competency from a learning plan (asynchronously)
     * Remove the competency from a learning plan
     * @param coreCompetencyRemoveCompetencyFromPlanRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyRemoveCompetencyFromPlanAsync(CoreCompetencyRemoveCompetencyFromPlanRequest coreCompetencyRemoveCompetencyFromPlanRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCompetencyRemoveCompetencyFromPlanValidateBeforeCall(coreCompetencyRemoveCompetencyFromPlanRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCompetencyRemoveCompetencyFromTemplate
     * @param coreCompetencyRemoveCompetencyFromTemplateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyRemoveCompetencyFromTemplateCall(CoreCompetencyRemoveCompetencyFromTemplateRequest coreCompetencyRemoveCompetencyFromTemplateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCompetencyRemoveCompetencyFromTemplateRequest;

        // create path and map variables
        String localVarPath = "/core_competency_remove_competency_from_template";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCompetencyRemoveCompetencyFromTemplateValidateBeforeCall(CoreCompetencyRemoveCompetencyFromTemplateRequest coreCompetencyRemoveCompetencyFromTemplateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCompetencyRemoveCompetencyFromTemplateRequest' is set
        if (coreCompetencyRemoveCompetencyFromTemplateRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCompetencyRemoveCompetencyFromTemplateRequest' when calling coreCompetencyRemoveCompetencyFromTemplate(Async)");
        }

        return coreCompetencyRemoveCompetencyFromTemplateCall(coreCompetencyRemoveCompetencyFromTemplateRequest, _callback);

    }

    /**
     * Remove a competency from a template
     * Remove a competency from a template
     * @param coreCompetencyRemoveCompetencyFromTemplateRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreCompetencyRemoveCompetencyFromTemplate(CoreCompetencyRemoveCompetencyFromTemplateRequest coreCompetencyRemoveCompetencyFromTemplateRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreCompetencyRemoveCompetencyFromTemplateWithHttpInfo(coreCompetencyRemoveCompetencyFromTemplateRequest);
        return localVarResp.getData();
    }

    /**
     * Remove a competency from a template
     * Remove a competency from a template
     * @param coreCompetencyRemoveCompetencyFromTemplateRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreCompetencyRemoveCompetencyFromTemplateWithHttpInfo(CoreCompetencyRemoveCompetencyFromTemplateRequest coreCompetencyRemoveCompetencyFromTemplateRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCompetencyRemoveCompetencyFromTemplateValidateBeforeCall(coreCompetencyRemoveCompetencyFromTemplateRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove a competency from a template (asynchronously)
     * Remove a competency from a template
     * @param coreCompetencyRemoveCompetencyFromTemplateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyRemoveCompetencyFromTemplateAsync(CoreCompetencyRemoveCompetencyFromTemplateRequest coreCompetencyRemoveCompetencyFromTemplateRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCompetencyRemoveCompetencyFromTemplateValidateBeforeCall(coreCompetencyRemoveCompetencyFromTemplateRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCompetencyRemoveRelatedCompetency
     * @param coreCompetencyRemoveRelatedCompetencyRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyRemoveRelatedCompetencyCall(CoreCompetencyRemoveRelatedCompetencyRequest coreCompetencyRemoveRelatedCompetencyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCompetencyRemoveRelatedCompetencyRequest;

        // create path and map variables
        String localVarPath = "/core_competency_remove_related_competency";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCompetencyRemoveRelatedCompetencyValidateBeforeCall(CoreCompetencyRemoveRelatedCompetencyRequest coreCompetencyRemoveRelatedCompetencyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCompetencyRemoveRelatedCompetencyRequest' is set
        if (coreCompetencyRemoveRelatedCompetencyRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCompetencyRemoveRelatedCompetencyRequest' when calling coreCompetencyRemoveRelatedCompetency(Async)");
        }

        return coreCompetencyRemoveRelatedCompetencyCall(coreCompetencyRemoveRelatedCompetencyRequest, _callback);

    }

    /**
     * Remove a related competency
     * Remove a related competency
     * @param coreCompetencyRemoveRelatedCompetencyRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreCompetencyRemoveRelatedCompetency(CoreCompetencyRemoveRelatedCompetencyRequest coreCompetencyRemoveRelatedCompetencyRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreCompetencyRemoveRelatedCompetencyWithHttpInfo(coreCompetencyRemoveRelatedCompetencyRequest);
        return localVarResp.getData();
    }

    /**
     * Remove a related competency
     * Remove a related competency
     * @param coreCompetencyRemoveRelatedCompetencyRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreCompetencyRemoveRelatedCompetencyWithHttpInfo(CoreCompetencyRemoveRelatedCompetencyRequest coreCompetencyRemoveRelatedCompetencyRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCompetencyRemoveRelatedCompetencyValidateBeforeCall(coreCompetencyRemoveRelatedCompetencyRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove a related competency (asynchronously)
     * Remove a related competency
     * @param coreCompetencyRemoveRelatedCompetencyRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyRemoveRelatedCompetencyAsync(CoreCompetencyRemoveRelatedCompetencyRequest coreCompetencyRemoveRelatedCompetencyRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCompetencyRemoveRelatedCompetencyValidateBeforeCall(coreCompetencyRemoveRelatedCompetencyRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCompetencyReopenPlan
     * @param coreCompetencyCompletePlanRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if reopening learning plan was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyReopenPlanCall(CoreCompetencyCompletePlanRequest coreCompetencyCompletePlanRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCompetencyCompletePlanRequest;

        // create path and map variables
        String localVarPath = "/core_competency_reopen_plan";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCompetencyReopenPlanValidateBeforeCall(CoreCompetencyCompletePlanRequest coreCompetencyCompletePlanRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCompetencyCompletePlanRequest' is set
        if (coreCompetencyCompletePlanRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCompetencyCompletePlanRequest' when calling coreCompetencyReopenPlan(Async)");
        }

        return coreCompetencyReopenPlanCall(coreCompetencyCompletePlanRequest, _callback);

    }

    /**
     * Reopen learning plan.
     * Reopen learning plan.
     * @param coreCompetencyCompletePlanRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if reopening learning plan was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreCompetencyReopenPlan(CoreCompetencyCompletePlanRequest coreCompetencyCompletePlanRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreCompetencyReopenPlanWithHttpInfo(coreCompetencyCompletePlanRequest);
        return localVarResp.getData();
    }

    /**
     * Reopen learning plan.
     * Reopen learning plan.
     * @param coreCompetencyCompletePlanRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if reopening learning plan was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreCompetencyReopenPlanWithHttpInfo(CoreCompetencyCompletePlanRequest coreCompetencyCompletePlanRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCompetencyReopenPlanValidateBeforeCall(coreCompetencyCompletePlanRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Reopen learning plan. (asynchronously)
     * Reopen learning plan.
     * @param coreCompetencyCompletePlanRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if reopening learning plan was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyReopenPlanAsync(CoreCompetencyCompletePlanRequest coreCompetencyCompletePlanRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCompetencyReopenPlanValidateBeforeCall(coreCompetencyCompletePlanRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCompetencyReorderCourseCompetency
     * @param coreCompetencyReorderCourseCompetencyRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyReorderCourseCompetencyCall(CoreCompetencyReorderCourseCompetencyRequest coreCompetencyReorderCourseCompetencyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCompetencyReorderCourseCompetencyRequest;

        // create path and map variables
        String localVarPath = "/core_competency_reorder_course_competency";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCompetencyReorderCourseCompetencyValidateBeforeCall(CoreCompetencyReorderCourseCompetencyRequest coreCompetencyReorderCourseCompetencyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCompetencyReorderCourseCompetencyRequest' is set
        if (coreCompetencyReorderCourseCompetencyRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCompetencyReorderCourseCompetencyRequest' when calling coreCompetencyReorderCourseCompetency(Async)");
        }

        return coreCompetencyReorderCourseCompetencyCall(coreCompetencyReorderCourseCompetencyRequest, _callback);

    }

    /**
     * Move a course competency to a new relative sort order.
     * Move a course competency to a new relative sort order.
     * @param coreCompetencyReorderCourseCompetencyRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreCompetencyReorderCourseCompetency(CoreCompetencyReorderCourseCompetencyRequest coreCompetencyReorderCourseCompetencyRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreCompetencyReorderCourseCompetencyWithHttpInfo(coreCompetencyReorderCourseCompetencyRequest);
        return localVarResp.getData();
    }

    /**
     * Move a course competency to a new relative sort order.
     * Move a course competency to a new relative sort order.
     * @param coreCompetencyReorderCourseCompetencyRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreCompetencyReorderCourseCompetencyWithHttpInfo(CoreCompetencyReorderCourseCompetencyRequest coreCompetencyReorderCourseCompetencyRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCompetencyReorderCourseCompetencyValidateBeforeCall(coreCompetencyReorderCourseCompetencyRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Move a course competency to a new relative sort order. (asynchronously)
     * Move a course competency to a new relative sort order.
     * @param coreCompetencyReorderCourseCompetencyRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyReorderCourseCompetencyAsync(CoreCompetencyReorderCourseCompetencyRequest coreCompetencyReorderCourseCompetencyRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCompetencyReorderCourseCompetencyValidateBeforeCall(coreCompetencyReorderCourseCompetencyRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCompetencyReorderPlanCompetency
     * @param coreCompetencyReorderPlanCompetencyRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyReorderPlanCompetencyCall(CoreCompetencyReorderPlanCompetencyRequest coreCompetencyReorderPlanCompetencyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCompetencyReorderPlanCompetencyRequest;

        // create path and map variables
        String localVarPath = "/core_competency_reorder_plan_competency";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCompetencyReorderPlanCompetencyValidateBeforeCall(CoreCompetencyReorderPlanCompetencyRequest coreCompetencyReorderPlanCompetencyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCompetencyReorderPlanCompetencyRequest' is set
        if (coreCompetencyReorderPlanCompetencyRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCompetencyReorderPlanCompetencyRequest' when calling coreCompetencyReorderPlanCompetency(Async)");
        }

        return coreCompetencyReorderPlanCompetencyCall(coreCompetencyReorderPlanCompetencyRequest, _callback);

    }

    /**
     * Move a plan competency to a new relative sort order.
     * Move a plan competency to a new relative sort order.
     * @param coreCompetencyReorderPlanCompetencyRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreCompetencyReorderPlanCompetency(CoreCompetencyReorderPlanCompetencyRequest coreCompetencyReorderPlanCompetencyRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreCompetencyReorderPlanCompetencyWithHttpInfo(coreCompetencyReorderPlanCompetencyRequest);
        return localVarResp.getData();
    }

    /**
     * Move a plan competency to a new relative sort order.
     * Move a plan competency to a new relative sort order.
     * @param coreCompetencyReorderPlanCompetencyRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreCompetencyReorderPlanCompetencyWithHttpInfo(CoreCompetencyReorderPlanCompetencyRequest coreCompetencyReorderPlanCompetencyRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCompetencyReorderPlanCompetencyValidateBeforeCall(coreCompetencyReorderPlanCompetencyRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Move a plan competency to a new relative sort order. (asynchronously)
     * Move a plan competency to a new relative sort order.
     * @param coreCompetencyReorderPlanCompetencyRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyReorderPlanCompetencyAsync(CoreCompetencyReorderPlanCompetencyRequest coreCompetencyReorderPlanCompetencyRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCompetencyReorderPlanCompetencyValidateBeforeCall(coreCompetencyReorderPlanCompetencyRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCompetencyReorderTemplateCompetency
     * @param coreCompetencyReorderTemplateCompetencyRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyReorderTemplateCompetencyCall(CoreCompetencyReorderTemplateCompetencyRequest coreCompetencyReorderTemplateCompetencyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCompetencyReorderTemplateCompetencyRequest;

        // create path and map variables
        String localVarPath = "/core_competency_reorder_template_competency";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCompetencyReorderTemplateCompetencyValidateBeforeCall(CoreCompetencyReorderTemplateCompetencyRequest coreCompetencyReorderTemplateCompetencyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCompetencyReorderTemplateCompetencyRequest' is set
        if (coreCompetencyReorderTemplateCompetencyRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCompetencyReorderTemplateCompetencyRequest' when calling coreCompetencyReorderTemplateCompetency(Async)");
        }

        return coreCompetencyReorderTemplateCompetencyCall(coreCompetencyReorderTemplateCompetencyRequest, _callback);

    }

    /**
     * Move a template competency to a new relative sort order.
     * Move a template competency to a new relative sort order.
     * @param coreCompetencyReorderTemplateCompetencyRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreCompetencyReorderTemplateCompetency(CoreCompetencyReorderTemplateCompetencyRequest coreCompetencyReorderTemplateCompetencyRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreCompetencyReorderTemplateCompetencyWithHttpInfo(coreCompetencyReorderTemplateCompetencyRequest);
        return localVarResp.getData();
    }

    /**
     * Move a template competency to a new relative sort order.
     * Move a template competency to a new relative sort order.
     * @param coreCompetencyReorderTemplateCompetencyRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreCompetencyReorderTemplateCompetencyWithHttpInfo(CoreCompetencyReorderTemplateCompetencyRequest coreCompetencyReorderTemplateCompetencyRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCompetencyReorderTemplateCompetencyValidateBeforeCall(coreCompetencyReorderTemplateCompetencyRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Move a template competency to a new relative sort order. (asynchronously)
     * Move a template competency to a new relative sort order.
     * @param coreCompetencyReorderTemplateCompetencyRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyReorderTemplateCompetencyAsync(CoreCompetencyReorderTemplateCompetencyRequest coreCompetencyReorderTemplateCompetencyRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCompetencyReorderTemplateCompetencyValidateBeforeCall(coreCompetencyReorderTemplateCompetencyRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCompetencyRequestReviewOfUserEvidenceLinkedCompetencies
     * @param coreCompetencyDeleteUserEvidenceRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if all competencies were send to review </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyRequestReviewOfUserEvidenceLinkedCompetenciesCall(CoreCompetencyDeleteUserEvidenceRequest coreCompetencyDeleteUserEvidenceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCompetencyDeleteUserEvidenceRequest;

        // create path and map variables
        String localVarPath = "/core_competency_request_review_of_user_evidence_linked_competencies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCompetencyRequestReviewOfUserEvidenceLinkedCompetenciesValidateBeforeCall(CoreCompetencyDeleteUserEvidenceRequest coreCompetencyDeleteUserEvidenceRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCompetencyDeleteUserEvidenceRequest' is set
        if (coreCompetencyDeleteUserEvidenceRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCompetencyDeleteUserEvidenceRequest' when calling coreCompetencyRequestReviewOfUserEvidenceLinkedCompetencies(Async)");
        }

        return coreCompetencyRequestReviewOfUserEvidenceLinkedCompetenciesCall(coreCompetencyDeleteUserEvidenceRequest, _callback);

    }

    /**
     * Send user evidence competencies in review
     * Send user evidence competencies in review
     * @param coreCompetencyDeleteUserEvidenceRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if all competencies were send to review </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreCompetencyRequestReviewOfUserEvidenceLinkedCompetencies(CoreCompetencyDeleteUserEvidenceRequest coreCompetencyDeleteUserEvidenceRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreCompetencyRequestReviewOfUserEvidenceLinkedCompetenciesWithHttpInfo(coreCompetencyDeleteUserEvidenceRequest);
        return localVarResp.getData();
    }

    /**
     * Send user evidence competencies in review
     * Send user evidence competencies in review
     * @param coreCompetencyDeleteUserEvidenceRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if all competencies were send to review </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreCompetencyRequestReviewOfUserEvidenceLinkedCompetenciesWithHttpInfo(CoreCompetencyDeleteUserEvidenceRequest coreCompetencyDeleteUserEvidenceRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCompetencyRequestReviewOfUserEvidenceLinkedCompetenciesValidateBeforeCall(coreCompetencyDeleteUserEvidenceRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Send user evidence competencies in review (asynchronously)
     * Send user evidence competencies in review
     * @param coreCompetencyDeleteUserEvidenceRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if all competencies were send to review </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyRequestReviewOfUserEvidenceLinkedCompetenciesAsync(CoreCompetencyDeleteUserEvidenceRequest coreCompetencyDeleteUserEvidenceRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCompetencyRequestReviewOfUserEvidenceLinkedCompetenciesValidateBeforeCall(coreCompetencyDeleteUserEvidenceRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCompetencySearchCompetencies
     * @param coreCompetencySearchCompetenciesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencySearchCompetenciesCall(CoreCompetencySearchCompetenciesRequest coreCompetencySearchCompetenciesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCompetencySearchCompetenciesRequest;

        // create path and map variables
        String localVarPath = "/core_competency_search_competencies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCompetencySearchCompetenciesValidateBeforeCall(CoreCompetencySearchCompetenciesRequest coreCompetencySearchCompetenciesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCompetencySearchCompetenciesRequest' is set
        if (coreCompetencySearchCompetenciesRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCompetencySearchCompetenciesRequest' when calling coreCompetencySearchCompetencies(Async)");
        }

        return coreCompetencySearchCompetenciesCall(coreCompetencySearchCompetenciesRequest, _callback);

    }

    /**
     * Search a list of a competencies.
     * Search a list of a competencies.
     * @param coreCompetencySearchCompetenciesRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreCompetencySearchCompetencies(CoreCompetencySearchCompetenciesRequest coreCompetencySearchCompetenciesRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreCompetencySearchCompetenciesWithHttpInfo(coreCompetencySearchCompetenciesRequest);
        return localVarResp.getData();
    }

    /**
     * Search a list of a competencies.
     * Search a list of a competencies.
     * @param coreCompetencySearchCompetenciesRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreCompetencySearchCompetenciesWithHttpInfo(CoreCompetencySearchCompetenciesRequest coreCompetencySearchCompetenciesRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCompetencySearchCompetenciesValidateBeforeCall(coreCompetencySearchCompetenciesRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search a list of a competencies. (asynchronously)
     * Search a list of a competencies.
     * @param coreCompetencySearchCompetenciesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencySearchCompetenciesAsync(CoreCompetencySearchCompetenciesRequest coreCompetencySearchCompetenciesRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCompetencySearchCompetenciesValidateBeforeCall(coreCompetencySearchCompetenciesRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCompetencySetCourseCompetencyRuleoutcome
     * @param coreCompetencySetCourseCompetencyRuleoutcomeRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if the update was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencySetCourseCompetencyRuleoutcomeCall(CoreCompetencySetCourseCompetencyRuleoutcomeRequest coreCompetencySetCourseCompetencyRuleoutcomeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCompetencySetCourseCompetencyRuleoutcomeRequest;

        // create path and map variables
        String localVarPath = "/core_competency_set_course_competency_ruleoutcome";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCompetencySetCourseCompetencyRuleoutcomeValidateBeforeCall(CoreCompetencySetCourseCompetencyRuleoutcomeRequest coreCompetencySetCourseCompetencyRuleoutcomeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCompetencySetCourseCompetencyRuleoutcomeRequest' is set
        if (coreCompetencySetCourseCompetencyRuleoutcomeRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCompetencySetCourseCompetencyRuleoutcomeRequest' when calling coreCompetencySetCourseCompetencyRuleoutcome(Async)");
        }

        return coreCompetencySetCourseCompetencyRuleoutcomeCall(coreCompetencySetCourseCompetencyRuleoutcomeRequest, _callback);

    }

    /**
     * Modify the ruleoutcome value for course competency
     * Modify the ruleoutcome value for course competency
     * @param coreCompetencySetCourseCompetencyRuleoutcomeRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if the update was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreCompetencySetCourseCompetencyRuleoutcome(CoreCompetencySetCourseCompetencyRuleoutcomeRequest coreCompetencySetCourseCompetencyRuleoutcomeRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreCompetencySetCourseCompetencyRuleoutcomeWithHttpInfo(coreCompetencySetCourseCompetencyRuleoutcomeRequest);
        return localVarResp.getData();
    }

    /**
     * Modify the ruleoutcome value for course competency
     * Modify the ruleoutcome value for course competency
     * @param coreCompetencySetCourseCompetencyRuleoutcomeRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if the update was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreCompetencySetCourseCompetencyRuleoutcomeWithHttpInfo(CoreCompetencySetCourseCompetencyRuleoutcomeRequest coreCompetencySetCourseCompetencyRuleoutcomeRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCompetencySetCourseCompetencyRuleoutcomeValidateBeforeCall(coreCompetencySetCourseCompetencyRuleoutcomeRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Modify the ruleoutcome value for course competency (asynchronously)
     * Modify the ruleoutcome value for course competency
     * @param coreCompetencySetCourseCompetencyRuleoutcomeRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if the update was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencySetCourseCompetencyRuleoutcomeAsync(CoreCompetencySetCourseCompetencyRuleoutcomeRequest coreCompetencySetCourseCompetencyRuleoutcomeRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCompetencySetCourseCompetencyRuleoutcomeValidateBeforeCall(coreCompetencySetCourseCompetencyRuleoutcomeRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCompetencySetParentCompetency
     * @param coreCompetencySetParentCompetencyRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if the update was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencySetParentCompetencyCall(CoreCompetencySetParentCompetencyRequest coreCompetencySetParentCompetencyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCompetencySetParentCompetencyRequest;

        // create path and map variables
        String localVarPath = "/core_competency_set_parent_competency";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCompetencySetParentCompetencyValidateBeforeCall(CoreCompetencySetParentCompetencyRequest coreCompetencySetParentCompetencyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCompetencySetParentCompetencyRequest' is set
        if (coreCompetencySetParentCompetencyRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCompetencySetParentCompetencyRequest' when calling coreCompetencySetParentCompetency(Async)");
        }

        return coreCompetencySetParentCompetencyCall(coreCompetencySetParentCompetencyRequest, _callback);

    }

    /**
     * Set a new parent for a competency.
     * Set a new parent for a competency.
     * @param coreCompetencySetParentCompetencyRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if the update was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreCompetencySetParentCompetency(CoreCompetencySetParentCompetencyRequest coreCompetencySetParentCompetencyRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreCompetencySetParentCompetencyWithHttpInfo(coreCompetencySetParentCompetencyRequest);
        return localVarResp.getData();
    }

    /**
     * Set a new parent for a competency.
     * Set a new parent for a competency.
     * @param coreCompetencySetParentCompetencyRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if the update was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreCompetencySetParentCompetencyWithHttpInfo(CoreCompetencySetParentCompetencyRequest coreCompetencySetParentCompetencyRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCompetencySetParentCompetencyValidateBeforeCall(coreCompetencySetParentCompetencyRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set a new parent for a competency. (asynchronously)
     * Set a new parent for a competency.
     * @param coreCompetencySetParentCompetencyRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if the update was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencySetParentCompetencyAsync(CoreCompetencySetParentCompetencyRequest coreCompetencySetParentCompetencyRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCompetencySetParentCompetencyValidateBeforeCall(coreCompetencySetParentCompetencyRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCompetencyTemplateHasRelatedData
     * @param coreCompetencyCountCompetenciesInTemplateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if the template has related data </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyTemplateHasRelatedDataCall(CoreCompetencyCountCompetenciesInTemplateRequest coreCompetencyCountCompetenciesInTemplateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCompetencyCountCompetenciesInTemplateRequest;

        // create path and map variables
        String localVarPath = "/core_competency_template_has_related_data";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCompetencyTemplateHasRelatedDataValidateBeforeCall(CoreCompetencyCountCompetenciesInTemplateRequest coreCompetencyCountCompetenciesInTemplateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCompetencyCountCompetenciesInTemplateRequest' is set
        if (coreCompetencyCountCompetenciesInTemplateRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCompetencyCountCompetenciesInTemplateRequest' when calling coreCompetencyTemplateHasRelatedData(Async)");
        }

        return coreCompetencyTemplateHasRelatedDataCall(coreCompetencyCountCompetenciesInTemplateRequest, _callback);

    }

    /**
     * Check if a template has related data
     * Check if a template has related data
     * @param coreCompetencyCountCompetenciesInTemplateRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if the template has related data </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreCompetencyTemplateHasRelatedData(CoreCompetencyCountCompetenciesInTemplateRequest coreCompetencyCountCompetenciesInTemplateRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreCompetencyTemplateHasRelatedDataWithHttpInfo(coreCompetencyCountCompetenciesInTemplateRequest);
        return localVarResp.getData();
    }

    /**
     * Check if a template has related data
     * Check if a template has related data
     * @param coreCompetencyCountCompetenciesInTemplateRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if the template has related data </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreCompetencyTemplateHasRelatedDataWithHttpInfo(CoreCompetencyCountCompetenciesInTemplateRequest coreCompetencyCountCompetenciesInTemplateRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCompetencyTemplateHasRelatedDataValidateBeforeCall(coreCompetencyCountCompetenciesInTemplateRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Check if a template has related data (asynchronously)
     * Check if a template has related data
     * @param coreCompetencyCountCompetenciesInTemplateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if the template has related data </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyTemplateHasRelatedDataAsync(CoreCompetencyCountCompetenciesInTemplateRequest coreCompetencyCountCompetenciesInTemplateRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCompetencyTemplateHasRelatedDataValidateBeforeCall(coreCompetencyCountCompetenciesInTemplateRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCompetencyTemplateViewed
     * @param coreCompetencyReadTemplateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if the log of the view was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyTemplateViewedCall(CoreCompetencyReadTemplateRequest coreCompetencyReadTemplateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCompetencyReadTemplateRequest;

        // create path and map variables
        String localVarPath = "/core_competency_template_viewed";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCompetencyTemplateViewedValidateBeforeCall(CoreCompetencyReadTemplateRequest coreCompetencyReadTemplateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCompetencyReadTemplateRequest' is set
        if (coreCompetencyReadTemplateRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCompetencyReadTemplateRequest' when calling coreCompetencyTemplateViewed(Async)");
        }

        return coreCompetencyTemplateViewedCall(coreCompetencyReadTemplateRequest, _callback);

    }

    /**
     * Log event template viewed
     * Log event template viewed
     * @param coreCompetencyReadTemplateRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if the log of the view was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreCompetencyTemplateViewed(CoreCompetencyReadTemplateRequest coreCompetencyReadTemplateRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreCompetencyTemplateViewedWithHttpInfo(coreCompetencyReadTemplateRequest);
        return localVarResp.getData();
    }

    /**
     * Log event template viewed
     * Log event template viewed
     * @param coreCompetencyReadTemplateRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if the log of the view was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreCompetencyTemplateViewedWithHttpInfo(CoreCompetencyReadTemplateRequest coreCompetencyReadTemplateRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCompetencyTemplateViewedValidateBeforeCall(coreCompetencyReadTemplateRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Log event template viewed (asynchronously)
     * Log event template viewed
     * @param coreCompetencyReadTemplateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if the log of the view was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyTemplateViewedAsync(CoreCompetencyReadTemplateRequest coreCompetencyReadTemplateRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCompetencyTemplateViewedValidateBeforeCall(coreCompetencyReadTemplateRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCompetencyUnapprovePlan
     * @param coreCompetencyPlanCancelReviewRequestRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyUnapprovePlanCall(CoreCompetencyPlanCancelReviewRequestRequest coreCompetencyPlanCancelReviewRequestRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCompetencyPlanCancelReviewRequestRequest;

        // create path and map variables
        String localVarPath = "/core_competency_unapprove_plan";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCompetencyUnapprovePlanValidateBeforeCall(CoreCompetencyPlanCancelReviewRequestRequest coreCompetencyPlanCancelReviewRequestRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCompetencyPlanCancelReviewRequestRequest' is set
        if (coreCompetencyPlanCancelReviewRequestRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCompetencyPlanCancelReviewRequestRequest' when calling coreCompetencyUnapprovePlan(Async)");
        }

        return coreCompetencyUnapprovePlanCall(coreCompetencyPlanCancelReviewRequestRequest, _callback);

    }

    /**
     * Unapprove a plan.
     * Unapprove a plan.
     * @param coreCompetencyPlanCancelReviewRequestRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreCompetencyUnapprovePlan(CoreCompetencyPlanCancelReviewRequestRequest coreCompetencyPlanCancelReviewRequestRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreCompetencyUnapprovePlanWithHttpInfo(coreCompetencyPlanCancelReviewRequestRequest);
        return localVarResp.getData();
    }

    /**
     * Unapprove a plan.
     * Unapprove a plan.
     * @param coreCompetencyPlanCancelReviewRequestRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreCompetencyUnapprovePlanWithHttpInfo(CoreCompetencyPlanCancelReviewRequestRequest coreCompetencyPlanCancelReviewRequestRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCompetencyUnapprovePlanValidateBeforeCall(coreCompetencyPlanCancelReviewRequestRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Unapprove a plan. (asynchronously)
     * Unapprove a plan.
     * @param coreCompetencyPlanCancelReviewRequestRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyUnapprovePlanAsync(CoreCompetencyPlanCancelReviewRequestRequest coreCompetencyPlanCancelReviewRequestRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCompetencyUnapprovePlanValidateBeforeCall(coreCompetencyPlanCancelReviewRequestRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCompetencyUnlinkPlanFromTemplate
     * @param coreCompetencyUnlinkPlanFromTemplateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if the unlink was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyUnlinkPlanFromTemplateCall(CoreCompetencyUnlinkPlanFromTemplateRequest coreCompetencyUnlinkPlanFromTemplateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCompetencyUnlinkPlanFromTemplateRequest;

        // create path and map variables
        String localVarPath = "/core_competency_unlink_plan_from_template";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCompetencyUnlinkPlanFromTemplateValidateBeforeCall(CoreCompetencyUnlinkPlanFromTemplateRequest coreCompetencyUnlinkPlanFromTemplateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCompetencyUnlinkPlanFromTemplateRequest' is set
        if (coreCompetencyUnlinkPlanFromTemplateRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCompetencyUnlinkPlanFromTemplateRequest' when calling coreCompetencyUnlinkPlanFromTemplate(Async)");
        }

        return coreCompetencyUnlinkPlanFromTemplateCall(coreCompetencyUnlinkPlanFromTemplateRequest, _callback);

    }

    /**
     * Unlink a plan form it template.
     * Unlink a plan form it template.
     * @param coreCompetencyUnlinkPlanFromTemplateRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if the unlink was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreCompetencyUnlinkPlanFromTemplate(CoreCompetencyUnlinkPlanFromTemplateRequest coreCompetencyUnlinkPlanFromTemplateRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreCompetencyUnlinkPlanFromTemplateWithHttpInfo(coreCompetencyUnlinkPlanFromTemplateRequest);
        return localVarResp.getData();
    }

    /**
     * Unlink a plan form it template.
     * Unlink a plan form it template.
     * @param coreCompetencyUnlinkPlanFromTemplateRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if the unlink was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreCompetencyUnlinkPlanFromTemplateWithHttpInfo(CoreCompetencyUnlinkPlanFromTemplateRequest coreCompetencyUnlinkPlanFromTemplateRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCompetencyUnlinkPlanFromTemplateValidateBeforeCall(coreCompetencyUnlinkPlanFromTemplateRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Unlink a plan form it template. (asynchronously)
     * Unlink a plan form it template.
     * @param coreCompetencyUnlinkPlanFromTemplateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if the unlink was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyUnlinkPlanFromTemplateAsync(CoreCompetencyUnlinkPlanFromTemplateRequest coreCompetencyUnlinkPlanFromTemplateRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCompetencyUnlinkPlanFromTemplateValidateBeforeCall(coreCompetencyUnlinkPlanFromTemplateRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCompetencyUpdateCompetency
     * @param coreCompetencyUpdateCompetencyRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if the update was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyUpdateCompetencyCall(CoreCompetencyUpdateCompetencyRequest coreCompetencyUpdateCompetencyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCompetencyUpdateCompetencyRequest;

        // create path and map variables
        String localVarPath = "/core_competency_update_competency";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCompetencyUpdateCompetencyValidateBeforeCall(CoreCompetencyUpdateCompetencyRequest coreCompetencyUpdateCompetencyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCompetencyUpdateCompetencyRequest' is set
        if (coreCompetencyUpdateCompetencyRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCompetencyUpdateCompetencyRequest' when calling coreCompetencyUpdateCompetency(Async)");
        }

        return coreCompetencyUpdateCompetencyCall(coreCompetencyUpdateCompetencyRequest, _callback);

    }

    /**
     * Update a competency.
     * Update a competency.
     * @param coreCompetencyUpdateCompetencyRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if the update was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreCompetencyUpdateCompetency(CoreCompetencyUpdateCompetencyRequest coreCompetencyUpdateCompetencyRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreCompetencyUpdateCompetencyWithHttpInfo(coreCompetencyUpdateCompetencyRequest);
        return localVarResp.getData();
    }

    /**
     * Update a competency.
     * Update a competency.
     * @param coreCompetencyUpdateCompetencyRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if the update was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreCompetencyUpdateCompetencyWithHttpInfo(CoreCompetencyUpdateCompetencyRequest coreCompetencyUpdateCompetencyRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCompetencyUpdateCompetencyValidateBeforeCall(coreCompetencyUpdateCompetencyRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a competency. (asynchronously)
     * Update a competency.
     * @param coreCompetencyUpdateCompetencyRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if the update was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyUpdateCompetencyAsync(CoreCompetencyUpdateCompetencyRequest coreCompetencyUpdateCompetencyRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCompetencyUpdateCompetencyValidateBeforeCall(coreCompetencyUpdateCompetencyRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCompetencyUpdateCompetencyFramework
     * @param coreCompetencyUpdateCompetencyFrameworkRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if the update was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyUpdateCompetencyFrameworkCall(CoreCompetencyUpdateCompetencyFrameworkRequest coreCompetencyUpdateCompetencyFrameworkRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCompetencyUpdateCompetencyFrameworkRequest;

        // create path and map variables
        String localVarPath = "/core_competency_update_competency_framework";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCompetencyUpdateCompetencyFrameworkValidateBeforeCall(CoreCompetencyUpdateCompetencyFrameworkRequest coreCompetencyUpdateCompetencyFrameworkRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCompetencyUpdateCompetencyFrameworkRequest' is set
        if (coreCompetencyUpdateCompetencyFrameworkRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCompetencyUpdateCompetencyFrameworkRequest' when calling coreCompetencyUpdateCompetencyFramework(Async)");
        }

        return coreCompetencyUpdateCompetencyFrameworkCall(coreCompetencyUpdateCompetencyFrameworkRequest, _callback);

    }

    /**
     * Update a competency framework.
     * Update a competency framework.
     * @param coreCompetencyUpdateCompetencyFrameworkRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if the update was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreCompetencyUpdateCompetencyFramework(CoreCompetencyUpdateCompetencyFrameworkRequest coreCompetencyUpdateCompetencyFrameworkRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreCompetencyUpdateCompetencyFrameworkWithHttpInfo(coreCompetencyUpdateCompetencyFrameworkRequest);
        return localVarResp.getData();
    }

    /**
     * Update a competency framework.
     * Update a competency framework.
     * @param coreCompetencyUpdateCompetencyFrameworkRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if the update was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreCompetencyUpdateCompetencyFrameworkWithHttpInfo(CoreCompetencyUpdateCompetencyFrameworkRequest coreCompetencyUpdateCompetencyFrameworkRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCompetencyUpdateCompetencyFrameworkValidateBeforeCall(coreCompetencyUpdateCompetencyFrameworkRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a competency framework. (asynchronously)
     * Update a competency framework.
     * @param coreCompetencyUpdateCompetencyFrameworkRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if the update was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyUpdateCompetencyFrameworkAsync(CoreCompetencyUpdateCompetencyFrameworkRequest coreCompetencyUpdateCompetencyFrameworkRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCompetencyUpdateCompetencyFrameworkValidateBeforeCall(coreCompetencyUpdateCompetencyFrameworkRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCompetencyUpdateCourseCompetencySettings
     * @param coreCompetencyUpdateCourseCompetencySettingsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if the update was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyUpdateCourseCompetencySettingsCall(CoreCompetencyUpdateCourseCompetencySettingsRequest coreCompetencyUpdateCourseCompetencySettingsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCompetencyUpdateCourseCompetencySettingsRequest;

        // create path and map variables
        String localVarPath = "/core_competency_update_course_competency_settings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCompetencyUpdateCourseCompetencySettingsValidateBeforeCall(CoreCompetencyUpdateCourseCompetencySettingsRequest coreCompetencyUpdateCourseCompetencySettingsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCompetencyUpdateCourseCompetencySettingsRequest' is set
        if (coreCompetencyUpdateCourseCompetencySettingsRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCompetencyUpdateCourseCompetencySettingsRequest' when calling coreCompetencyUpdateCourseCompetencySettings(Async)");
        }

        return coreCompetencyUpdateCourseCompetencySettingsCall(coreCompetencyUpdateCourseCompetencySettingsRequest, _callback);

    }

    /**
     * Update the course competency settings
     * Update the course competency settings
     * @param coreCompetencyUpdateCourseCompetencySettingsRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if the update was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreCompetencyUpdateCourseCompetencySettings(CoreCompetencyUpdateCourseCompetencySettingsRequest coreCompetencyUpdateCourseCompetencySettingsRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreCompetencyUpdateCourseCompetencySettingsWithHttpInfo(coreCompetencyUpdateCourseCompetencySettingsRequest);
        return localVarResp.getData();
    }

    /**
     * Update the course competency settings
     * Update the course competency settings
     * @param coreCompetencyUpdateCourseCompetencySettingsRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if the update was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreCompetencyUpdateCourseCompetencySettingsWithHttpInfo(CoreCompetencyUpdateCourseCompetencySettingsRequest coreCompetencyUpdateCourseCompetencySettingsRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCompetencyUpdateCourseCompetencySettingsValidateBeforeCall(coreCompetencyUpdateCourseCompetencySettingsRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the course competency settings (asynchronously)
     * Update the course competency settings
     * @param coreCompetencyUpdateCourseCompetencySettingsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if the update was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyUpdateCourseCompetencySettingsAsync(CoreCompetencyUpdateCourseCompetencySettingsRequest coreCompetencyUpdateCourseCompetencySettingsRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCompetencyUpdateCourseCompetencySettingsValidateBeforeCall(coreCompetencyUpdateCourseCompetencySettingsRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCompetencyUpdatePlan
     * @param coreCompetencyUpdatePlanRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyUpdatePlanCall(CoreCompetencyUpdatePlanRequest coreCompetencyUpdatePlanRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCompetencyUpdatePlanRequest;

        // create path and map variables
        String localVarPath = "/core_competency_update_plan";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCompetencyUpdatePlanValidateBeforeCall(CoreCompetencyUpdatePlanRequest coreCompetencyUpdatePlanRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCompetencyUpdatePlanRequest' is set
        if (coreCompetencyUpdatePlanRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCompetencyUpdatePlanRequest' when calling coreCompetencyUpdatePlan(Async)");
        }

        return coreCompetencyUpdatePlanCall(coreCompetencyUpdatePlanRequest, _callback);

    }

    /**
     * Updates a learning plan.
     * Updates a learning plan.
     * @param coreCompetencyUpdatePlanRequest  (required)
     * @return CoreCompetencyReadPlan200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreCompetencyReadPlan200Response coreCompetencyUpdatePlan(CoreCompetencyUpdatePlanRequest coreCompetencyUpdatePlanRequest) throws ApiException {
        ApiResponse<CoreCompetencyReadPlan200Response> localVarResp = coreCompetencyUpdatePlanWithHttpInfo(coreCompetencyUpdatePlanRequest);
        return localVarResp.getData();
    }

    /**
     * Updates a learning plan.
     * Updates a learning plan.
     * @param coreCompetencyUpdatePlanRequest  (required)
     * @return ApiResponse&lt;CoreCompetencyReadPlan200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreCompetencyReadPlan200Response> coreCompetencyUpdatePlanWithHttpInfo(CoreCompetencyUpdatePlanRequest coreCompetencyUpdatePlanRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCompetencyUpdatePlanValidateBeforeCall(coreCompetencyUpdatePlanRequest, null);
        Type localVarReturnType = new TypeToken<CoreCompetencyReadPlan200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a learning plan. (asynchronously)
     * Updates a learning plan.
     * @param coreCompetencyUpdatePlanRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyUpdatePlanAsync(CoreCompetencyUpdatePlanRequest coreCompetencyUpdatePlanRequest, final ApiCallback<CoreCompetencyReadPlan200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCompetencyUpdatePlanValidateBeforeCall(coreCompetencyUpdatePlanRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreCompetencyReadPlan200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCompetencyUpdateTemplate
     * @param coreCompetencyUpdateTemplateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if the update was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyUpdateTemplateCall(CoreCompetencyUpdateTemplateRequest coreCompetencyUpdateTemplateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCompetencyUpdateTemplateRequest;

        // create path and map variables
        String localVarPath = "/core_competency_update_template";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCompetencyUpdateTemplateValidateBeforeCall(CoreCompetencyUpdateTemplateRequest coreCompetencyUpdateTemplateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCompetencyUpdateTemplateRequest' is set
        if (coreCompetencyUpdateTemplateRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCompetencyUpdateTemplateRequest' when calling coreCompetencyUpdateTemplate(Async)");
        }

        return coreCompetencyUpdateTemplateCall(coreCompetencyUpdateTemplateRequest, _callback);

    }

    /**
     * Update a learning plan template.
     * Update a learning plan template.
     * @param coreCompetencyUpdateTemplateRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if the update was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreCompetencyUpdateTemplate(CoreCompetencyUpdateTemplateRequest coreCompetencyUpdateTemplateRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreCompetencyUpdateTemplateWithHttpInfo(coreCompetencyUpdateTemplateRequest);
        return localVarResp.getData();
    }

    /**
     * Update a learning plan template.
     * Update a learning plan template.
     * @param coreCompetencyUpdateTemplateRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if the update was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreCompetencyUpdateTemplateWithHttpInfo(CoreCompetencyUpdateTemplateRequest coreCompetencyUpdateTemplateRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCompetencyUpdateTemplateValidateBeforeCall(coreCompetencyUpdateTemplateRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a learning plan template. (asynchronously)
     * Update a learning plan template.
     * @param coreCompetencyUpdateTemplateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if the update was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyUpdateTemplateAsync(CoreCompetencyUpdateTemplateRequest coreCompetencyUpdateTemplateRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCompetencyUpdateTemplateValidateBeforeCall(coreCompetencyUpdateTemplateRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCompetencyUserCompetencyCancelReviewRequest
     * @param coreCompetencyUserCompetencyCancelReviewRequestRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyUserCompetencyCancelReviewRequestCall(CoreCompetencyUserCompetencyCancelReviewRequestRequest coreCompetencyUserCompetencyCancelReviewRequestRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCompetencyUserCompetencyCancelReviewRequestRequest;

        // create path and map variables
        String localVarPath = "/core_competency_user_competency_cancel_review_request";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCompetencyUserCompetencyCancelReviewRequestValidateBeforeCall(CoreCompetencyUserCompetencyCancelReviewRequestRequest coreCompetencyUserCompetencyCancelReviewRequestRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCompetencyUserCompetencyCancelReviewRequestRequest' is set
        if (coreCompetencyUserCompetencyCancelReviewRequestRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCompetencyUserCompetencyCancelReviewRequestRequest' when calling coreCompetencyUserCompetencyCancelReviewRequest(Async)");
        }

        return coreCompetencyUserCompetencyCancelReviewRequestCall(coreCompetencyUserCompetencyCancelReviewRequestRequest, _callback);

    }

    /**
     * Cancel a review request.
     * Cancel a review request.
     * @param coreCompetencyUserCompetencyCancelReviewRequestRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreCompetencyUserCompetencyCancelReviewRequest(CoreCompetencyUserCompetencyCancelReviewRequestRequest coreCompetencyUserCompetencyCancelReviewRequestRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreCompetencyUserCompetencyCancelReviewRequestWithHttpInfo(coreCompetencyUserCompetencyCancelReviewRequestRequest);
        return localVarResp.getData();
    }

    /**
     * Cancel a review request.
     * Cancel a review request.
     * @param coreCompetencyUserCompetencyCancelReviewRequestRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreCompetencyUserCompetencyCancelReviewRequestWithHttpInfo(CoreCompetencyUserCompetencyCancelReviewRequestRequest coreCompetencyUserCompetencyCancelReviewRequestRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCompetencyUserCompetencyCancelReviewRequestValidateBeforeCall(coreCompetencyUserCompetencyCancelReviewRequestRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Cancel a review request. (asynchronously)
     * Cancel a review request.
     * @param coreCompetencyUserCompetencyCancelReviewRequestRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyUserCompetencyCancelReviewRequestAsync(CoreCompetencyUserCompetencyCancelReviewRequestRequest coreCompetencyUserCompetencyCancelReviewRequestRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCompetencyUserCompetencyCancelReviewRequestValidateBeforeCall(coreCompetencyUserCompetencyCancelReviewRequestRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCompetencyUserCompetencyPlanViewed
     * @param coreCompetencyUserCompetencyPlanViewedRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if the event user competency plan viewed was logged </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyUserCompetencyPlanViewedCall(CoreCompetencyUserCompetencyPlanViewedRequest coreCompetencyUserCompetencyPlanViewedRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCompetencyUserCompetencyPlanViewedRequest;

        // create path and map variables
        String localVarPath = "/core_competency_user_competency_plan_viewed";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCompetencyUserCompetencyPlanViewedValidateBeforeCall(CoreCompetencyUserCompetencyPlanViewedRequest coreCompetencyUserCompetencyPlanViewedRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCompetencyUserCompetencyPlanViewedRequest' is set
        if (coreCompetencyUserCompetencyPlanViewedRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCompetencyUserCompetencyPlanViewedRequest' when calling coreCompetencyUserCompetencyPlanViewed(Async)");
        }

        return coreCompetencyUserCompetencyPlanViewedCall(coreCompetencyUserCompetencyPlanViewedRequest, _callback);

    }

    /**
     * Log the user competency plan viewed event.
     * Log the user competency plan viewed event.
     * @param coreCompetencyUserCompetencyPlanViewedRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if the event user competency plan viewed was logged </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreCompetencyUserCompetencyPlanViewed(CoreCompetencyUserCompetencyPlanViewedRequest coreCompetencyUserCompetencyPlanViewedRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreCompetencyUserCompetencyPlanViewedWithHttpInfo(coreCompetencyUserCompetencyPlanViewedRequest);
        return localVarResp.getData();
    }

    /**
     * Log the user competency plan viewed event.
     * Log the user competency plan viewed event.
     * @param coreCompetencyUserCompetencyPlanViewedRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if the event user competency plan viewed was logged </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreCompetencyUserCompetencyPlanViewedWithHttpInfo(CoreCompetencyUserCompetencyPlanViewedRequest coreCompetencyUserCompetencyPlanViewedRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCompetencyUserCompetencyPlanViewedValidateBeforeCall(coreCompetencyUserCompetencyPlanViewedRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Log the user competency plan viewed event. (asynchronously)
     * Log the user competency plan viewed event.
     * @param coreCompetencyUserCompetencyPlanViewedRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if the event user competency plan viewed was logged </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyUserCompetencyPlanViewedAsync(CoreCompetencyUserCompetencyPlanViewedRequest coreCompetencyUserCompetencyPlanViewedRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCompetencyUserCompetencyPlanViewedValidateBeforeCall(coreCompetencyUserCompetencyPlanViewedRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCompetencyUserCompetencyRequestReview
     * @param coreCompetencyUserCompetencyRequestReviewRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyUserCompetencyRequestReviewCall(CoreCompetencyUserCompetencyRequestReviewRequest coreCompetencyUserCompetencyRequestReviewRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCompetencyUserCompetencyRequestReviewRequest;

        // create path and map variables
        String localVarPath = "/core_competency_user_competency_request_review";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCompetencyUserCompetencyRequestReviewValidateBeforeCall(CoreCompetencyUserCompetencyRequestReviewRequest coreCompetencyUserCompetencyRequestReviewRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCompetencyUserCompetencyRequestReviewRequest' is set
        if (coreCompetencyUserCompetencyRequestReviewRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCompetencyUserCompetencyRequestReviewRequest' when calling coreCompetencyUserCompetencyRequestReview(Async)");
        }

        return coreCompetencyUserCompetencyRequestReviewCall(coreCompetencyUserCompetencyRequestReviewRequest, _callback);

    }

    /**
     * Request a review.
     * Request a review.
     * @param coreCompetencyUserCompetencyRequestReviewRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreCompetencyUserCompetencyRequestReview(CoreCompetencyUserCompetencyRequestReviewRequest coreCompetencyUserCompetencyRequestReviewRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreCompetencyUserCompetencyRequestReviewWithHttpInfo(coreCompetencyUserCompetencyRequestReviewRequest);
        return localVarResp.getData();
    }

    /**
     * Request a review.
     * Request a review.
     * @param coreCompetencyUserCompetencyRequestReviewRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreCompetencyUserCompetencyRequestReviewWithHttpInfo(CoreCompetencyUserCompetencyRequestReviewRequest coreCompetencyUserCompetencyRequestReviewRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCompetencyUserCompetencyRequestReviewValidateBeforeCall(coreCompetencyUserCompetencyRequestReviewRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Request a review. (asynchronously)
     * Request a review.
     * @param coreCompetencyUserCompetencyRequestReviewRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyUserCompetencyRequestReviewAsync(CoreCompetencyUserCompetencyRequestReviewRequest coreCompetencyUserCompetencyRequestReviewRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCompetencyUserCompetencyRequestReviewValidateBeforeCall(coreCompetencyUserCompetencyRequestReviewRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCompetencyUserCompetencyStartReview
     * @param coreCompetencyUserCompetencyRequestReviewRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyUserCompetencyStartReviewCall(CoreCompetencyUserCompetencyRequestReviewRequest coreCompetencyUserCompetencyRequestReviewRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCompetencyUserCompetencyRequestReviewRequest;

        // create path and map variables
        String localVarPath = "/core_competency_user_competency_start_review";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCompetencyUserCompetencyStartReviewValidateBeforeCall(CoreCompetencyUserCompetencyRequestReviewRequest coreCompetencyUserCompetencyRequestReviewRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCompetencyUserCompetencyRequestReviewRequest' is set
        if (coreCompetencyUserCompetencyRequestReviewRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCompetencyUserCompetencyRequestReviewRequest' when calling coreCompetencyUserCompetencyStartReview(Async)");
        }

        return coreCompetencyUserCompetencyStartReviewCall(coreCompetencyUserCompetencyRequestReviewRequest, _callback);

    }

    /**
     * Start a review.
     * Start a review.
     * @param coreCompetencyUserCompetencyRequestReviewRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreCompetencyUserCompetencyStartReview(CoreCompetencyUserCompetencyRequestReviewRequest coreCompetencyUserCompetencyRequestReviewRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreCompetencyUserCompetencyStartReviewWithHttpInfo(coreCompetencyUserCompetencyRequestReviewRequest);
        return localVarResp.getData();
    }

    /**
     * Start a review.
     * Start a review.
     * @param coreCompetencyUserCompetencyRequestReviewRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreCompetencyUserCompetencyStartReviewWithHttpInfo(CoreCompetencyUserCompetencyRequestReviewRequest coreCompetencyUserCompetencyRequestReviewRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCompetencyUserCompetencyStartReviewValidateBeforeCall(coreCompetencyUserCompetencyRequestReviewRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Start a review. (asynchronously)
     * Start a review.
     * @param coreCompetencyUserCompetencyRequestReviewRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyUserCompetencyStartReviewAsync(CoreCompetencyUserCompetencyRequestReviewRequest coreCompetencyUserCompetencyRequestReviewRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCompetencyUserCompetencyStartReviewValidateBeforeCall(coreCompetencyUserCompetencyRequestReviewRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCompetencyUserCompetencyStopReview
     * @param coreCompetencyUserCompetencyRequestReviewRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyUserCompetencyStopReviewCall(CoreCompetencyUserCompetencyRequestReviewRequest coreCompetencyUserCompetencyRequestReviewRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCompetencyUserCompetencyRequestReviewRequest;

        // create path and map variables
        String localVarPath = "/core_competency_user_competency_stop_review";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCompetencyUserCompetencyStopReviewValidateBeforeCall(CoreCompetencyUserCompetencyRequestReviewRequest coreCompetencyUserCompetencyRequestReviewRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCompetencyUserCompetencyRequestReviewRequest' is set
        if (coreCompetencyUserCompetencyRequestReviewRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCompetencyUserCompetencyRequestReviewRequest' when calling coreCompetencyUserCompetencyStopReview(Async)");
        }

        return coreCompetencyUserCompetencyStopReviewCall(coreCompetencyUserCompetencyRequestReviewRequest, _callback);

    }

    /**
     * Stop a review.
     * Stop a review.
     * @param coreCompetencyUserCompetencyRequestReviewRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreCompetencyUserCompetencyStopReview(CoreCompetencyUserCompetencyRequestReviewRequest coreCompetencyUserCompetencyRequestReviewRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreCompetencyUserCompetencyStopReviewWithHttpInfo(coreCompetencyUserCompetencyRequestReviewRequest);
        return localVarResp.getData();
    }

    /**
     * Stop a review.
     * Stop a review.
     * @param coreCompetencyUserCompetencyRequestReviewRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreCompetencyUserCompetencyStopReviewWithHttpInfo(CoreCompetencyUserCompetencyRequestReviewRequest coreCompetencyUserCompetencyRequestReviewRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCompetencyUserCompetencyStopReviewValidateBeforeCall(coreCompetencyUserCompetencyRequestReviewRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Stop a review. (asynchronously)
     * Stop a review.
     * @param coreCompetencyUserCompetencyRequestReviewRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyUserCompetencyStopReviewAsync(CoreCompetencyUserCompetencyRequestReviewRequest coreCompetencyUserCompetencyRequestReviewRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCompetencyUserCompetencyStopReviewValidateBeforeCall(coreCompetencyUserCompetencyRequestReviewRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCompetencyUserCompetencyViewed
     * @param coreCompetencyUserCompetencyViewedRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if the event user competency viewed was logged </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyUserCompetencyViewedCall(CoreCompetencyUserCompetencyViewedRequest coreCompetencyUserCompetencyViewedRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCompetencyUserCompetencyViewedRequest;

        // create path and map variables
        String localVarPath = "/core_competency_user_competency_viewed";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCompetencyUserCompetencyViewedValidateBeforeCall(CoreCompetencyUserCompetencyViewedRequest coreCompetencyUserCompetencyViewedRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCompetencyUserCompetencyViewedRequest' is set
        if (coreCompetencyUserCompetencyViewedRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCompetencyUserCompetencyViewedRequest' when calling coreCompetencyUserCompetencyViewed(Async)");
        }

        return coreCompetencyUserCompetencyViewedCall(coreCompetencyUserCompetencyViewedRequest, _callback);

    }

    /**
     * Log the user competency viewed event.
     * Log the user competency viewed event.
     * @param coreCompetencyUserCompetencyViewedRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if the event user competency viewed was logged </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreCompetencyUserCompetencyViewed(CoreCompetencyUserCompetencyViewedRequest coreCompetencyUserCompetencyViewedRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreCompetencyUserCompetencyViewedWithHttpInfo(coreCompetencyUserCompetencyViewedRequest);
        return localVarResp.getData();
    }

    /**
     * Log the user competency viewed event.
     * Log the user competency viewed event.
     * @param coreCompetencyUserCompetencyViewedRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if the event user competency viewed was logged </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreCompetencyUserCompetencyViewedWithHttpInfo(CoreCompetencyUserCompetencyViewedRequest coreCompetencyUserCompetencyViewedRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCompetencyUserCompetencyViewedValidateBeforeCall(coreCompetencyUserCompetencyViewedRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Log the user competency viewed event. (asynchronously)
     * Log the user competency viewed event.
     * @param coreCompetencyUserCompetencyViewedRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if the event user competency viewed was logged </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyUserCompetencyViewedAsync(CoreCompetencyUserCompetencyViewedRequest coreCompetencyUserCompetencyViewedRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCompetencyUserCompetencyViewedValidateBeforeCall(coreCompetencyUserCompetencyViewedRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCompetencyUserCompetencyViewedInCourse
     * @param coreCompetencyUserCompetencyViewedInCourseRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if the event user competency viewed in course was logged </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyUserCompetencyViewedInCourseCall(CoreCompetencyUserCompetencyViewedInCourseRequest coreCompetencyUserCompetencyViewedInCourseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCompetencyUserCompetencyViewedInCourseRequest;

        // create path and map variables
        String localVarPath = "/core_competency_user_competency_viewed_in_course";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCompetencyUserCompetencyViewedInCourseValidateBeforeCall(CoreCompetencyUserCompetencyViewedInCourseRequest coreCompetencyUserCompetencyViewedInCourseRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCompetencyUserCompetencyViewedInCourseRequest' is set
        if (coreCompetencyUserCompetencyViewedInCourseRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCompetencyUserCompetencyViewedInCourseRequest' when calling coreCompetencyUserCompetencyViewedInCourse(Async)");
        }

        return coreCompetencyUserCompetencyViewedInCourseCall(coreCompetencyUserCompetencyViewedInCourseRequest, _callback);

    }

    /**
     * Log the user competency viewed in course event
     * Log the user competency viewed in course event
     * @param coreCompetencyUserCompetencyViewedInCourseRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if the event user competency viewed in course was logged </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreCompetencyUserCompetencyViewedInCourse(CoreCompetencyUserCompetencyViewedInCourseRequest coreCompetencyUserCompetencyViewedInCourseRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreCompetencyUserCompetencyViewedInCourseWithHttpInfo(coreCompetencyUserCompetencyViewedInCourseRequest);
        return localVarResp.getData();
    }

    /**
     * Log the user competency viewed in course event
     * Log the user competency viewed in course event
     * @param coreCompetencyUserCompetencyViewedInCourseRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if the event user competency viewed in course was logged </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreCompetencyUserCompetencyViewedInCourseWithHttpInfo(CoreCompetencyUserCompetencyViewedInCourseRequest coreCompetencyUserCompetencyViewedInCourseRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCompetencyUserCompetencyViewedInCourseValidateBeforeCall(coreCompetencyUserCompetencyViewedInCourseRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Log the user competency viewed in course event (asynchronously)
     * Log the user competency viewed in course event
     * @param coreCompetencyUserCompetencyViewedInCourseRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if the event user competency viewed in course was logged </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyUserCompetencyViewedInCourseAsync(CoreCompetencyUserCompetencyViewedInCourseRequest coreCompetencyUserCompetencyViewedInCourseRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCompetencyUserCompetencyViewedInCourseValidateBeforeCall(coreCompetencyUserCompetencyViewedInCourseRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCompetencyUserCompetencyViewedInPlan
     * @param coreCompetencyUserCompetencyPlanViewedRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if the event user competency viewed in plan was logged </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyUserCompetencyViewedInPlanCall(CoreCompetencyUserCompetencyPlanViewedRequest coreCompetencyUserCompetencyPlanViewedRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCompetencyUserCompetencyPlanViewedRequest;

        // create path and map variables
        String localVarPath = "/core_competency_user_competency_viewed_in_plan";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCompetencyUserCompetencyViewedInPlanValidateBeforeCall(CoreCompetencyUserCompetencyPlanViewedRequest coreCompetencyUserCompetencyPlanViewedRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCompetencyUserCompetencyPlanViewedRequest' is set
        if (coreCompetencyUserCompetencyPlanViewedRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCompetencyUserCompetencyPlanViewedRequest' when calling coreCompetencyUserCompetencyViewedInPlan(Async)");
        }

        return coreCompetencyUserCompetencyViewedInPlanCall(coreCompetencyUserCompetencyPlanViewedRequest, _callback);

    }

    /**
     * Log the user competency viewed in plan event.
     * Log the user competency viewed in plan event.
     * @param coreCompetencyUserCompetencyPlanViewedRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if the event user competency viewed in plan was logged </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreCompetencyUserCompetencyViewedInPlan(CoreCompetencyUserCompetencyPlanViewedRequest coreCompetencyUserCompetencyPlanViewedRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreCompetencyUserCompetencyViewedInPlanWithHttpInfo(coreCompetencyUserCompetencyPlanViewedRequest);
        return localVarResp.getData();
    }

    /**
     * Log the user competency viewed in plan event.
     * Log the user competency viewed in plan event.
     * @param coreCompetencyUserCompetencyPlanViewedRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if the event user competency viewed in plan was logged </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreCompetencyUserCompetencyViewedInPlanWithHttpInfo(CoreCompetencyUserCompetencyPlanViewedRequest coreCompetencyUserCompetencyPlanViewedRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCompetencyUserCompetencyViewedInPlanValidateBeforeCall(coreCompetencyUserCompetencyPlanViewedRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Log the user competency viewed in plan event. (asynchronously)
     * Log the user competency viewed in plan event.
     * @param coreCompetencyUserCompetencyPlanViewedRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if the event user competency viewed in plan was logged </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompetencyUserCompetencyViewedInPlanAsync(CoreCompetencyUserCompetencyPlanViewedRequest coreCompetencyUserCompetencyPlanViewedRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCompetencyUserCompetencyViewedInPlanValidateBeforeCall(coreCompetencyUserCompetencyPlanViewedRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCompletionGetActivitiesCompletionStatus
     * @param coreCompletionGetActivitiesCompletionStatusRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompletionGetActivitiesCompletionStatusCall(CoreCompletionGetActivitiesCompletionStatusRequest coreCompletionGetActivitiesCompletionStatusRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCompletionGetActivitiesCompletionStatusRequest;

        // create path and map variables
        String localVarPath = "/core_completion_get_activities_completion_status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCompletionGetActivitiesCompletionStatusValidateBeforeCall(CoreCompletionGetActivitiesCompletionStatusRequest coreCompletionGetActivitiesCompletionStatusRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCompletionGetActivitiesCompletionStatusRequest' is set
        if (coreCompletionGetActivitiesCompletionStatusRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCompletionGetActivitiesCompletionStatusRequest' when calling coreCompletionGetActivitiesCompletionStatus(Async)");
        }

        return coreCompletionGetActivitiesCompletionStatusCall(coreCompletionGetActivitiesCompletionStatusRequest, _callback);

    }

    /**
     * Return the activities completion status for a user in a course.
     * Return the activities completion status for a user in a course.
     * @param coreCompletionGetActivitiesCompletionStatusRequest  (required)
     * @return CoreCompletionGetActivitiesCompletionStatus200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreCompletionGetActivitiesCompletionStatus200Response coreCompletionGetActivitiesCompletionStatus(CoreCompletionGetActivitiesCompletionStatusRequest coreCompletionGetActivitiesCompletionStatusRequest) throws ApiException {
        ApiResponse<CoreCompletionGetActivitiesCompletionStatus200Response> localVarResp = coreCompletionGetActivitiesCompletionStatusWithHttpInfo(coreCompletionGetActivitiesCompletionStatusRequest);
        return localVarResp.getData();
    }

    /**
     * Return the activities completion status for a user in a course.
     * Return the activities completion status for a user in a course.
     * @param coreCompletionGetActivitiesCompletionStatusRequest  (required)
     * @return ApiResponse&lt;CoreCompletionGetActivitiesCompletionStatus200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreCompletionGetActivitiesCompletionStatus200Response> coreCompletionGetActivitiesCompletionStatusWithHttpInfo(CoreCompletionGetActivitiesCompletionStatusRequest coreCompletionGetActivitiesCompletionStatusRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCompletionGetActivitiesCompletionStatusValidateBeforeCall(coreCompletionGetActivitiesCompletionStatusRequest, null);
        Type localVarReturnType = new TypeToken<CoreCompletionGetActivitiesCompletionStatus200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the activities completion status for a user in a course. (asynchronously)
     * Return the activities completion status for a user in a course.
     * @param coreCompletionGetActivitiesCompletionStatusRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompletionGetActivitiesCompletionStatusAsync(CoreCompletionGetActivitiesCompletionStatusRequest coreCompletionGetActivitiesCompletionStatusRequest, final ApiCallback<CoreCompletionGetActivitiesCompletionStatus200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCompletionGetActivitiesCompletionStatusValidateBeforeCall(coreCompletionGetActivitiesCompletionStatusRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreCompletionGetActivitiesCompletionStatus200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCompletionGetCourseCompletionStatus
     * @param coreCompletionGetActivitiesCompletionStatusRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Course completion status </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompletionGetCourseCompletionStatusCall(CoreCompletionGetActivitiesCompletionStatusRequest coreCompletionGetActivitiesCompletionStatusRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCompletionGetActivitiesCompletionStatusRequest;

        // create path and map variables
        String localVarPath = "/core_completion_get_course_completion_status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCompletionGetCourseCompletionStatusValidateBeforeCall(CoreCompletionGetActivitiesCompletionStatusRequest coreCompletionGetActivitiesCompletionStatusRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCompletionGetActivitiesCompletionStatusRequest' is set
        if (coreCompletionGetActivitiesCompletionStatusRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCompletionGetActivitiesCompletionStatusRequest' when calling coreCompletionGetCourseCompletionStatus(Async)");
        }

        return coreCompletionGetCourseCompletionStatusCall(coreCompletionGetActivitiesCompletionStatusRequest, _callback);

    }

    /**
     * Returns course completion status.
     * Returns course completion status.
     * @param coreCompletionGetActivitiesCompletionStatusRequest  (required)
     * @return CoreCompletionGetCourseCompletionStatus200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Course completion status </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreCompletionGetCourseCompletionStatus200Response coreCompletionGetCourseCompletionStatus(CoreCompletionGetActivitiesCompletionStatusRequest coreCompletionGetActivitiesCompletionStatusRequest) throws ApiException {
        ApiResponse<CoreCompletionGetCourseCompletionStatus200Response> localVarResp = coreCompletionGetCourseCompletionStatusWithHttpInfo(coreCompletionGetActivitiesCompletionStatusRequest);
        return localVarResp.getData();
    }

    /**
     * Returns course completion status.
     * Returns course completion status.
     * @param coreCompletionGetActivitiesCompletionStatusRequest  (required)
     * @return ApiResponse&lt;CoreCompletionGetCourseCompletionStatus200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Course completion status </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreCompletionGetCourseCompletionStatus200Response> coreCompletionGetCourseCompletionStatusWithHttpInfo(CoreCompletionGetActivitiesCompletionStatusRequest coreCompletionGetActivitiesCompletionStatusRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCompletionGetCourseCompletionStatusValidateBeforeCall(coreCompletionGetActivitiesCompletionStatusRequest, null);
        Type localVarReturnType = new TypeToken<CoreCompletionGetCourseCompletionStatus200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns course completion status. (asynchronously)
     * Returns course completion status.
     * @param coreCompletionGetActivitiesCompletionStatusRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Course completion status </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompletionGetCourseCompletionStatusAsync(CoreCompletionGetActivitiesCompletionStatusRequest coreCompletionGetActivitiesCompletionStatusRequest, final ApiCallback<CoreCompletionGetCourseCompletionStatus200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCompletionGetCourseCompletionStatusValidateBeforeCall(coreCompletionGetActivitiesCompletionStatusRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreCompletionGetCourseCompletionStatus200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCompletionMarkCourseSelfCompleted
     * @param coreCompletionMarkCourseSelfCompletedRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompletionMarkCourseSelfCompletedCall(CoreCompletionMarkCourseSelfCompletedRequest coreCompletionMarkCourseSelfCompletedRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCompletionMarkCourseSelfCompletedRequest;

        // create path and map variables
        String localVarPath = "/core_completion_mark_course_self_completed";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCompletionMarkCourseSelfCompletedValidateBeforeCall(CoreCompletionMarkCourseSelfCompletedRequest coreCompletionMarkCourseSelfCompletedRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCompletionMarkCourseSelfCompletedRequest' is set
        if (coreCompletionMarkCourseSelfCompletedRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCompletionMarkCourseSelfCompletedRequest' when calling coreCompletionMarkCourseSelfCompleted(Async)");
        }

        return coreCompletionMarkCourseSelfCompletedCall(coreCompletionMarkCourseSelfCompletedRequest, _callback);

    }

    /**
     * Update the course completion status for the current user (if course self-completion is enabled).
     * Update the course completion status for the current user (if course self-completion is enabled).
     * @param coreCompletionMarkCourseSelfCompletedRequest  (required)
     * @return CoreCompletionMarkCourseSelfCompleted200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreCompletionMarkCourseSelfCompleted200Response coreCompletionMarkCourseSelfCompleted(CoreCompletionMarkCourseSelfCompletedRequest coreCompletionMarkCourseSelfCompletedRequest) throws ApiException {
        ApiResponse<CoreCompletionMarkCourseSelfCompleted200Response> localVarResp = coreCompletionMarkCourseSelfCompletedWithHttpInfo(coreCompletionMarkCourseSelfCompletedRequest);
        return localVarResp.getData();
    }

    /**
     * Update the course completion status for the current user (if course self-completion is enabled).
     * Update the course completion status for the current user (if course self-completion is enabled).
     * @param coreCompletionMarkCourseSelfCompletedRequest  (required)
     * @return ApiResponse&lt;CoreCompletionMarkCourseSelfCompleted200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreCompletionMarkCourseSelfCompleted200Response> coreCompletionMarkCourseSelfCompletedWithHttpInfo(CoreCompletionMarkCourseSelfCompletedRequest coreCompletionMarkCourseSelfCompletedRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCompletionMarkCourseSelfCompletedValidateBeforeCall(coreCompletionMarkCourseSelfCompletedRequest, null);
        Type localVarReturnType = new TypeToken<CoreCompletionMarkCourseSelfCompleted200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the course completion status for the current user (if course self-completion is enabled). (asynchronously)
     * Update the course completion status for the current user (if course self-completion is enabled).
     * @param coreCompletionMarkCourseSelfCompletedRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompletionMarkCourseSelfCompletedAsync(CoreCompletionMarkCourseSelfCompletedRequest coreCompletionMarkCourseSelfCompletedRequest, final ApiCallback<CoreCompletionMarkCourseSelfCompleted200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCompletionMarkCourseSelfCompletedValidateBeforeCall(coreCompletionMarkCourseSelfCompletedRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreCompletionMarkCourseSelfCompleted200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCompletionOverrideActivityCompletionStatus
     * @param coreCompletionOverrideActivityCompletionStatusRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompletionOverrideActivityCompletionStatusCall(CoreCompletionOverrideActivityCompletionStatusRequest coreCompletionOverrideActivityCompletionStatusRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCompletionOverrideActivityCompletionStatusRequest;

        // create path and map variables
        String localVarPath = "/core_completion_override_activity_completion_status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCompletionOverrideActivityCompletionStatusValidateBeforeCall(CoreCompletionOverrideActivityCompletionStatusRequest coreCompletionOverrideActivityCompletionStatusRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCompletionOverrideActivityCompletionStatusRequest' is set
        if (coreCompletionOverrideActivityCompletionStatusRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCompletionOverrideActivityCompletionStatusRequest' when calling coreCompletionOverrideActivityCompletionStatus(Async)");
        }

        return coreCompletionOverrideActivityCompletionStatusCall(coreCompletionOverrideActivityCompletionStatusRequest, _callback);

    }

    /**
     * Update completion status for a user in an activity by overriding it.
     * Update completion status for a user in an activity by overriding it.
     * @param coreCompletionOverrideActivityCompletionStatusRequest  (required)
     * @return CoreCompletionOverrideActivityCompletionStatus200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreCompletionOverrideActivityCompletionStatus200Response coreCompletionOverrideActivityCompletionStatus(CoreCompletionOverrideActivityCompletionStatusRequest coreCompletionOverrideActivityCompletionStatusRequest) throws ApiException {
        ApiResponse<CoreCompletionOverrideActivityCompletionStatus200Response> localVarResp = coreCompletionOverrideActivityCompletionStatusWithHttpInfo(coreCompletionOverrideActivityCompletionStatusRequest);
        return localVarResp.getData();
    }

    /**
     * Update completion status for a user in an activity by overriding it.
     * Update completion status for a user in an activity by overriding it.
     * @param coreCompletionOverrideActivityCompletionStatusRequest  (required)
     * @return ApiResponse&lt;CoreCompletionOverrideActivityCompletionStatus200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreCompletionOverrideActivityCompletionStatus200Response> coreCompletionOverrideActivityCompletionStatusWithHttpInfo(CoreCompletionOverrideActivityCompletionStatusRequest coreCompletionOverrideActivityCompletionStatusRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCompletionOverrideActivityCompletionStatusValidateBeforeCall(coreCompletionOverrideActivityCompletionStatusRequest, null);
        Type localVarReturnType = new TypeToken<CoreCompletionOverrideActivityCompletionStatus200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update completion status for a user in an activity by overriding it. (asynchronously)
     * Update completion status for a user in an activity by overriding it.
     * @param coreCompletionOverrideActivityCompletionStatusRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompletionOverrideActivityCompletionStatusAsync(CoreCompletionOverrideActivityCompletionStatusRequest coreCompletionOverrideActivityCompletionStatusRequest, final ApiCallback<CoreCompletionOverrideActivityCompletionStatus200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCompletionOverrideActivityCompletionStatusValidateBeforeCall(coreCompletionOverrideActivityCompletionStatusRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreCompletionOverrideActivityCompletionStatus200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCompletionUpdateActivityCompletionStatusManually
     * @param coreCompletionUpdateActivityCompletionStatusManuallyRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompletionUpdateActivityCompletionStatusManuallyCall(CoreCompletionUpdateActivityCompletionStatusManuallyRequest coreCompletionUpdateActivityCompletionStatusManuallyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCompletionUpdateActivityCompletionStatusManuallyRequest;

        // create path and map variables
        String localVarPath = "/core_completion_update_activity_completion_status_manually";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCompletionUpdateActivityCompletionStatusManuallyValidateBeforeCall(CoreCompletionUpdateActivityCompletionStatusManuallyRequest coreCompletionUpdateActivityCompletionStatusManuallyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCompletionUpdateActivityCompletionStatusManuallyRequest' is set
        if (coreCompletionUpdateActivityCompletionStatusManuallyRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCompletionUpdateActivityCompletionStatusManuallyRequest' when calling coreCompletionUpdateActivityCompletionStatusManually(Async)");
        }

        return coreCompletionUpdateActivityCompletionStatusManuallyCall(coreCompletionUpdateActivityCompletionStatusManuallyRequest, _callback);

    }

    /**
     * Update completion status for the current user in an activity, only for activities with manual tracking.
     * Update completion status for the current user in an activity, only for activities with manual tracking.
     * @param coreCompletionUpdateActivityCompletionStatusManuallyRequest  (required)
     * @return CoreCompletionUpdateActivityCompletionStatusManually200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreCompletionUpdateActivityCompletionStatusManually200Response coreCompletionUpdateActivityCompletionStatusManually(CoreCompletionUpdateActivityCompletionStatusManuallyRequest coreCompletionUpdateActivityCompletionStatusManuallyRequest) throws ApiException {
        ApiResponse<CoreCompletionUpdateActivityCompletionStatusManually200Response> localVarResp = coreCompletionUpdateActivityCompletionStatusManuallyWithHttpInfo(coreCompletionUpdateActivityCompletionStatusManuallyRequest);
        return localVarResp.getData();
    }

    /**
     * Update completion status for the current user in an activity, only for activities with manual tracking.
     * Update completion status for the current user in an activity, only for activities with manual tracking.
     * @param coreCompletionUpdateActivityCompletionStatusManuallyRequest  (required)
     * @return ApiResponse&lt;CoreCompletionUpdateActivityCompletionStatusManually200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreCompletionUpdateActivityCompletionStatusManually200Response> coreCompletionUpdateActivityCompletionStatusManuallyWithHttpInfo(CoreCompletionUpdateActivityCompletionStatusManuallyRequest coreCompletionUpdateActivityCompletionStatusManuallyRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCompletionUpdateActivityCompletionStatusManuallyValidateBeforeCall(coreCompletionUpdateActivityCompletionStatusManuallyRequest, null);
        Type localVarReturnType = new TypeToken<CoreCompletionUpdateActivityCompletionStatusManually200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update completion status for the current user in an activity, only for activities with manual tracking. (asynchronously)
     * Update completion status for the current user in an activity, only for activities with manual tracking.
     * @param coreCompletionUpdateActivityCompletionStatusManuallyRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCompletionUpdateActivityCompletionStatusManuallyAsync(CoreCompletionUpdateActivityCompletionStatusManuallyRequest coreCompletionUpdateActivityCompletionStatusManuallyRequest, final ApiCallback<CoreCompletionUpdateActivityCompletionStatusManually200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCompletionUpdateActivityCompletionStatusManuallyValidateBeforeCall(coreCompletionUpdateActivityCompletionStatusManuallyRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreCompletionUpdateActivityCompletionStatusManually200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreContentbankCopyContent
     * @param coreContentbankCopyContentRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreContentbankCopyContentCall(CoreContentbankCopyContentRequest coreContentbankCopyContentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreContentbankCopyContentRequest;

        // create path and map variables
        String localVarPath = "/core_contentbank_copy_content";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreContentbankCopyContentValidateBeforeCall(CoreContentbankCopyContentRequest coreContentbankCopyContentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreContentbankCopyContentRequest' is set
        if (coreContentbankCopyContentRequest == null) {
            throw new ApiException("Missing the required parameter 'coreContentbankCopyContentRequest' when calling coreContentbankCopyContent(Async)");
        }

        return coreContentbankCopyContentCall(coreContentbankCopyContentRequest, _callback);

    }

    /**
     * Copy a content in the content bank.
     * Copy a content in the content bank.
     * @param coreContentbankCopyContentRequest  (required)
     * @return CoreContentbankCopyContent200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreContentbankCopyContent200Response coreContentbankCopyContent(CoreContentbankCopyContentRequest coreContentbankCopyContentRequest) throws ApiException {
        ApiResponse<CoreContentbankCopyContent200Response> localVarResp = coreContentbankCopyContentWithHttpInfo(coreContentbankCopyContentRequest);
        return localVarResp.getData();
    }

    /**
     * Copy a content in the content bank.
     * Copy a content in the content bank.
     * @param coreContentbankCopyContentRequest  (required)
     * @return ApiResponse&lt;CoreContentbankCopyContent200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreContentbankCopyContent200Response> coreContentbankCopyContentWithHttpInfo(CoreContentbankCopyContentRequest coreContentbankCopyContentRequest) throws ApiException {
        okhttp3.Call localVarCall = coreContentbankCopyContentValidateBeforeCall(coreContentbankCopyContentRequest, null);
        Type localVarReturnType = new TypeToken<CoreContentbankCopyContent200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Copy a content in the content bank. (asynchronously)
     * Copy a content in the content bank.
     * @param coreContentbankCopyContentRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreContentbankCopyContentAsync(CoreContentbankCopyContentRequest coreContentbankCopyContentRequest, final ApiCallback<CoreContentbankCopyContent200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreContentbankCopyContentValidateBeforeCall(coreContentbankCopyContentRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreContentbankCopyContent200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreContentbankDeleteContent
     * @param coreContentbankDeleteContentRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreContentbankDeleteContentCall(CoreContentbankDeleteContentRequest coreContentbankDeleteContentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreContentbankDeleteContentRequest;

        // create path and map variables
        String localVarPath = "/core_contentbank_delete_content";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreContentbankDeleteContentValidateBeforeCall(CoreContentbankDeleteContentRequest coreContentbankDeleteContentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreContentbankDeleteContentRequest' is set
        if (coreContentbankDeleteContentRequest == null) {
            throw new ApiException("Missing the required parameter 'coreContentbankDeleteContentRequest' when calling coreContentbankDeleteContent(Async)");
        }

        return coreContentbankDeleteContentCall(coreContentbankDeleteContentRequest, _callback);

    }

    /**
     * Delete a content from the content bank.
     * Delete a content from the content bank.
     * @param coreContentbankDeleteContentRequest  (required)
     * @return CoreContentbankDeleteContent200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreContentbankDeleteContent200Response coreContentbankDeleteContent(CoreContentbankDeleteContentRequest coreContentbankDeleteContentRequest) throws ApiException {
        ApiResponse<CoreContentbankDeleteContent200Response> localVarResp = coreContentbankDeleteContentWithHttpInfo(coreContentbankDeleteContentRequest);
        return localVarResp.getData();
    }

    /**
     * Delete a content from the content bank.
     * Delete a content from the content bank.
     * @param coreContentbankDeleteContentRequest  (required)
     * @return ApiResponse&lt;CoreContentbankDeleteContent200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreContentbankDeleteContent200Response> coreContentbankDeleteContentWithHttpInfo(CoreContentbankDeleteContentRequest coreContentbankDeleteContentRequest) throws ApiException {
        okhttp3.Call localVarCall = coreContentbankDeleteContentValidateBeforeCall(coreContentbankDeleteContentRequest, null);
        Type localVarReturnType = new TypeToken<CoreContentbankDeleteContent200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a content from the content bank. (asynchronously)
     * Delete a content from the content bank.
     * @param coreContentbankDeleteContentRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreContentbankDeleteContentAsync(CoreContentbankDeleteContentRequest coreContentbankDeleteContentRequest, final ApiCallback<CoreContentbankDeleteContent200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreContentbankDeleteContentValidateBeforeCall(coreContentbankDeleteContentRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreContentbankDeleteContent200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreContentbankRenameContent
     * @param coreContentbankRenameContentRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreContentbankRenameContentCall(CoreContentbankRenameContentRequest coreContentbankRenameContentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreContentbankRenameContentRequest;

        // create path and map variables
        String localVarPath = "/core_contentbank_rename_content";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreContentbankRenameContentValidateBeforeCall(CoreContentbankRenameContentRequest coreContentbankRenameContentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreContentbankRenameContentRequest' is set
        if (coreContentbankRenameContentRequest == null) {
            throw new ApiException("Missing the required parameter 'coreContentbankRenameContentRequest' when calling coreContentbankRenameContent(Async)");
        }

        return coreContentbankRenameContentCall(coreContentbankRenameContentRequest, _callback);

    }

    /**
     * Rename a content in the content bank.
     * Rename a content in the content bank.
     * @param coreContentbankRenameContentRequest  (required)
     * @return CoreContentbankRenameContent200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreContentbankRenameContent200Response coreContentbankRenameContent(CoreContentbankRenameContentRequest coreContentbankRenameContentRequest) throws ApiException {
        ApiResponse<CoreContentbankRenameContent200Response> localVarResp = coreContentbankRenameContentWithHttpInfo(coreContentbankRenameContentRequest);
        return localVarResp.getData();
    }

    /**
     * Rename a content in the content bank.
     * Rename a content in the content bank.
     * @param coreContentbankRenameContentRequest  (required)
     * @return ApiResponse&lt;CoreContentbankRenameContent200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreContentbankRenameContent200Response> coreContentbankRenameContentWithHttpInfo(CoreContentbankRenameContentRequest coreContentbankRenameContentRequest) throws ApiException {
        okhttp3.Call localVarCall = coreContentbankRenameContentValidateBeforeCall(coreContentbankRenameContentRequest, null);
        Type localVarReturnType = new TypeToken<CoreContentbankRenameContent200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Rename a content in the content bank. (asynchronously)
     * Rename a content in the content bank.
     * @param coreContentbankRenameContentRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreContentbankRenameContentAsync(CoreContentbankRenameContentRequest coreContentbankRenameContentRequest, final ApiCallback<CoreContentbankRenameContent200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreContentbankRenameContentValidateBeforeCall(coreContentbankRenameContentRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreContentbankRenameContent200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreContentbankSetContentVisibility
     * @param coreContentbankSetContentVisibilityRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreContentbankSetContentVisibilityCall(CoreContentbankSetContentVisibilityRequest coreContentbankSetContentVisibilityRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreContentbankSetContentVisibilityRequest;

        // create path and map variables
        String localVarPath = "/core_contentbank_set_content_visibility";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreContentbankSetContentVisibilityValidateBeforeCall(CoreContentbankSetContentVisibilityRequest coreContentbankSetContentVisibilityRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreContentbankSetContentVisibilityRequest' is set
        if (coreContentbankSetContentVisibilityRequest == null) {
            throw new ApiException("Missing the required parameter 'coreContentbankSetContentVisibilityRequest' when calling coreContentbankSetContentVisibility(Async)");
        }

        return coreContentbankSetContentVisibilityCall(coreContentbankSetContentVisibilityRequest, _callback);

    }

    /**
     * Set the visibility of a content in the content bank.
     * Set the visibility of a content in the content bank.
     * @param coreContentbankSetContentVisibilityRequest  (required)
     * @return CoreContentbankRenameContent200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreContentbankRenameContent200Response coreContentbankSetContentVisibility(CoreContentbankSetContentVisibilityRequest coreContentbankSetContentVisibilityRequest) throws ApiException {
        ApiResponse<CoreContentbankRenameContent200Response> localVarResp = coreContentbankSetContentVisibilityWithHttpInfo(coreContentbankSetContentVisibilityRequest);
        return localVarResp.getData();
    }

    /**
     * Set the visibility of a content in the content bank.
     * Set the visibility of a content in the content bank.
     * @param coreContentbankSetContentVisibilityRequest  (required)
     * @return ApiResponse&lt;CoreContentbankRenameContent200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreContentbankRenameContent200Response> coreContentbankSetContentVisibilityWithHttpInfo(CoreContentbankSetContentVisibilityRequest coreContentbankSetContentVisibilityRequest) throws ApiException {
        okhttp3.Call localVarCall = coreContentbankSetContentVisibilityValidateBeforeCall(coreContentbankSetContentVisibilityRequest, null);
        Type localVarReturnType = new TypeToken<CoreContentbankRenameContent200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set the visibility of a content in the content bank. (asynchronously)
     * Set the visibility of a content in the content bank.
     * @param coreContentbankSetContentVisibilityRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreContentbankSetContentVisibilityAsync(CoreContentbankSetContentVisibilityRequest coreContentbankSetContentVisibilityRequest, final ApiCallback<CoreContentbankRenameContent200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreContentbankSetContentVisibilityValidateBeforeCall(coreContentbankSetContentVisibilityRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreContentbankRenameContent200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCourseAddContentItemToUserFavourites
     * @param coreCourseAddContentItemToUserFavouritesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCourseAddContentItemToUserFavouritesCall(CoreCourseAddContentItemToUserFavouritesRequest coreCourseAddContentItemToUserFavouritesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCourseAddContentItemToUserFavouritesRequest;

        // create path and map variables
        String localVarPath = "/core_course_add_content_item_to_user_favourites";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCourseAddContentItemToUserFavouritesValidateBeforeCall(CoreCourseAddContentItemToUserFavouritesRequest coreCourseAddContentItemToUserFavouritesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCourseAddContentItemToUserFavouritesRequest' is set
        if (coreCourseAddContentItemToUserFavouritesRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCourseAddContentItemToUserFavouritesRequest' when calling coreCourseAddContentItemToUserFavourites(Async)");
        }

        return coreCourseAddContentItemToUserFavouritesCall(coreCourseAddContentItemToUserFavouritesRequest, _callback);

    }

    /**
     * Adds a content item (activity, resource or their subtypes) to the favourites for the user.
     * Adds a content item (activity, resource or their subtypes) to the favourites for the user.
     * @param coreCourseAddContentItemToUserFavouritesRequest  (required)
     * @return CoreCourseAddContentItemToUserFavourites200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreCourseAddContentItemToUserFavourites200Response coreCourseAddContentItemToUserFavourites(CoreCourseAddContentItemToUserFavouritesRequest coreCourseAddContentItemToUserFavouritesRequest) throws ApiException {
        ApiResponse<CoreCourseAddContentItemToUserFavourites200Response> localVarResp = coreCourseAddContentItemToUserFavouritesWithHttpInfo(coreCourseAddContentItemToUserFavouritesRequest);
        return localVarResp.getData();
    }

    /**
     * Adds a content item (activity, resource or their subtypes) to the favourites for the user.
     * Adds a content item (activity, resource or their subtypes) to the favourites for the user.
     * @param coreCourseAddContentItemToUserFavouritesRequest  (required)
     * @return ApiResponse&lt;CoreCourseAddContentItemToUserFavourites200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreCourseAddContentItemToUserFavourites200Response> coreCourseAddContentItemToUserFavouritesWithHttpInfo(CoreCourseAddContentItemToUserFavouritesRequest coreCourseAddContentItemToUserFavouritesRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCourseAddContentItemToUserFavouritesValidateBeforeCall(coreCourseAddContentItemToUserFavouritesRequest, null);
        Type localVarReturnType = new TypeToken<CoreCourseAddContentItemToUserFavourites200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Adds a content item (activity, resource or their subtypes) to the favourites for the user. (asynchronously)
     * Adds a content item (activity, resource or their subtypes) to the favourites for the user.
     * @param coreCourseAddContentItemToUserFavouritesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCourseAddContentItemToUserFavouritesAsync(CoreCourseAddContentItemToUserFavouritesRequest coreCourseAddContentItemToUserFavouritesRequest, final ApiCallback<CoreCourseAddContentItemToUserFavourites200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCourseAddContentItemToUserFavouritesValidateBeforeCall(coreCourseAddContentItemToUserFavouritesRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreCourseAddContentItemToUserFavourites200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCourseCheckUpdates
     * @param coreCourseCheckUpdatesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCourseCheckUpdatesCall(CoreCourseCheckUpdatesRequest coreCourseCheckUpdatesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCourseCheckUpdatesRequest;

        // create path and map variables
        String localVarPath = "/core_course_check_updates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCourseCheckUpdatesValidateBeforeCall(CoreCourseCheckUpdatesRequest coreCourseCheckUpdatesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCourseCheckUpdatesRequest' is set
        if (coreCourseCheckUpdatesRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCourseCheckUpdatesRequest' when calling coreCourseCheckUpdates(Async)");
        }

        return coreCourseCheckUpdatesCall(coreCourseCheckUpdatesRequest, _callback);

    }

    /**
     * Check if there is updates affecting the user for the given course and contexts.
     * Check if there is updates affecting the user for the given course and contexts.
     * @param coreCourseCheckUpdatesRequest  (required)
     * @return CoreCourseCheckUpdates200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreCourseCheckUpdates200Response coreCourseCheckUpdates(CoreCourseCheckUpdatesRequest coreCourseCheckUpdatesRequest) throws ApiException {
        ApiResponse<CoreCourseCheckUpdates200Response> localVarResp = coreCourseCheckUpdatesWithHttpInfo(coreCourseCheckUpdatesRequest);
        return localVarResp.getData();
    }

    /**
     * Check if there is updates affecting the user for the given course and contexts.
     * Check if there is updates affecting the user for the given course and contexts.
     * @param coreCourseCheckUpdatesRequest  (required)
     * @return ApiResponse&lt;CoreCourseCheckUpdates200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreCourseCheckUpdates200Response> coreCourseCheckUpdatesWithHttpInfo(CoreCourseCheckUpdatesRequest coreCourseCheckUpdatesRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCourseCheckUpdatesValidateBeforeCall(coreCourseCheckUpdatesRequest, null);
        Type localVarReturnType = new TypeToken<CoreCourseCheckUpdates200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Check if there is updates affecting the user for the given course and contexts. (asynchronously)
     * Check if there is updates affecting the user for the given course and contexts.
     * @param coreCourseCheckUpdatesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCourseCheckUpdatesAsync(CoreCourseCheckUpdatesRequest coreCourseCheckUpdatesRequest, final ApiCallback<CoreCourseCheckUpdates200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCourseCheckUpdatesValidateBeforeCall(coreCourseCheckUpdatesRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreCourseCheckUpdates200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCourseCreateCategories
     * @param coreCourseCreateCategoriesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCourseCreateCategoriesCall(CoreCourseCreateCategoriesRequest coreCourseCreateCategoriesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCourseCreateCategoriesRequest;

        // create path and map variables
        String localVarPath = "/core_course_create_categories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCourseCreateCategoriesValidateBeforeCall(CoreCourseCreateCategoriesRequest coreCourseCreateCategoriesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCourseCreateCategoriesRequest' is set
        if (coreCourseCreateCategoriesRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCourseCreateCategoriesRequest' when calling coreCourseCreateCategories(Async)");
        }

        return coreCourseCreateCategoriesCall(coreCourseCreateCategoriesRequest, _callback);

    }

    /**
     * Create course categories
     * Create course categories
     * @param coreCourseCreateCategoriesRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreCourseCreateCategories(CoreCourseCreateCategoriesRequest coreCourseCreateCategoriesRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreCourseCreateCategoriesWithHttpInfo(coreCourseCreateCategoriesRequest);
        return localVarResp.getData();
    }

    /**
     * Create course categories
     * Create course categories
     * @param coreCourseCreateCategoriesRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreCourseCreateCategoriesWithHttpInfo(CoreCourseCreateCategoriesRequest coreCourseCreateCategoriesRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCourseCreateCategoriesValidateBeforeCall(coreCourseCreateCategoriesRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create course categories (asynchronously)
     * Create course categories
     * @param coreCourseCreateCategoriesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCourseCreateCategoriesAsync(CoreCourseCreateCategoriesRequest coreCourseCreateCategoriesRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCourseCreateCategoriesValidateBeforeCall(coreCourseCreateCategoriesRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCourseCreateCourses
     * @param coreCourseCreateCoursesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCourseCreateCoursesCall(CoreCourseCreateCoursesRequest coreCourseCreateCoursesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCourseCreateCoursesRequest;

        // create path and map variables
        String localVarPath = "/core_course_create_courses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCourseCreateCoursesValidateBeforeCall(CoreCourseCreateCoursesRequest coreCourseCreateCoursesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCourseCreateCoursesRequest' is set
        if (coreCourseCreateCoursesRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCourseCreateCoursesRequest' when calling coreCourseCreateCourses(Async)");
        }

        return coreCourseCreateCoursesCall(coreCourseCreateCoursesRequest, _callback);

    }

    /**
     * Create new courses
     * Create new courses
     * @param coreCourseCreateCoursesRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreCourseCreateCourses(CoreCourseCreateCoursesRequest coreCourseCreateCoursesRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreCourseCreateCoursesWithHttpInfo(coreCourseCreateCoursesRequest);
        return localVarResp.getData();
    }

    /**
     * Create new courses
     * Create new courses
     * @param coreCourseCreateCoursesRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreCourseCreateCoursesWithHttpInfo(CoreCourseCreateCoursesRequest coreCourseCreateCoursesRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCourseCreateCoursesValidateBeforeCall(coreCourseCreateCoursesRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create new courses (asynchronously)
     * Create new courses
     * @param coreCourseCreateCoursesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCourseCreateCoursesAsync(CoreCourseCreateCoursesRequest coreCourseCreateCoursesRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCourseCreateCoursesValidateBeforeCall(coreCourseCreateCoursesRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCourseDeleteCategories
     * @param coreCourseDeleteCategoriesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCourseDeleteCategoriesCall(CoreCourseDeleteCategoriesRequest coreCourseDeleteCategoriesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCourseDeleteCategoriesRequest;

        // create path and map variables
        String localVarPath = "/core_course_delete_categories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCourseDeleteCategoriesValidateBeforeCall(CoreCourseDeleteCategoriesRequest coreCourseDeleteCategoriesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCourseDeleteCategoriesRequest' is set
        if (coreCourseDeleteCategoriesRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCourseDeleteCategoriesRequest' when calling coreCourseDeleteCategories(Async)");
        }

        return coreCourseDeleteCategoriesCall(coreCourseDeleteCategoriesRequest, _callback);

    }

    /**
     * Delete course categories
     * Delete course categories
     * @param coreCourseDeleteCategoriesRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreCourseDeleteCategories(CoreCourseDeleteCategoriesRequest coreCourseDeleteCategoriesRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreCourseDeleteCategoriesWithHttpInfo(coreCourseDeleteCategoriesRequest);
        return localVarResp.getData();
    }

    /**
     * Delete course categories
     * Delete course categories
     * @param coreCourseDeleteCategoriesRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreCourseDeleteCategoriesWithHttpInfo(CoreCourseDeleteCategoriesRequest coreCourseDeleteCategoriesRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCourseDeleteCategoriesValidateBeforeCall(coreCourseDeleteCategoriesRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete course categories (asynchronously)
     * Delete course categories
     * @param coreCourseDeleteCategoriesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCourseDeleteCategoriesAsync(CoreCourseDeleteCategoriesRequest coreCourseDeleteCategoriesRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCourseDeleteCategoriesValidateBeforeCall(coreCourseDeleteCategoriesRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCourseDeleteCourses
     * @param coreCourseDeleteCoursesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCourseDeleteCoursesCall(CoreCourseDeleteCoursesRequest coreCourseDeleteCoursesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCourseDeleteCoursesRequest;

        // create path and map variables
        String localVarPath = "/core_course_delete_courses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCourseDeleteCoursesValidateBeforeCall(CoreCourseDeleteCoursesRequest coreCourseDeleteCoursesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCourseDeleteCoursesRequest' is set
        if (coreCourseDeleteCoursesRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCourseDeleteCoursesRequest' when calling coreCourseDeleteCourses(Async)");
        }

        return coreCourseDeleteCoursesCall(coreCourseDeleteCoursesRequest, _callback);

    }

    /**
     * Deletes all specified courses
     * Deletes all specified courses
     * @param coreCourseDeleteCoursesRequest  (required)
     * @return CoreCohortAddCohortMembers200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreCohortAddCohortMembers200Response coreCourseDeleteCourses(CoreCourseDeleteCoursesRequest coreCourseDeleteCoursesRequest) throws ApiException {
        ApiResponse<CoreCohortAddCohortMembers200Response> localVarResp = coreCourseDeleteCoursesWithHttpInfo(coreCourseDeleteCoursesRequest);
        return localVarResp.getData();
    }

    /**
     * Deletes all specified courses
     * Deletes all specified courses
     * @param coreCourseDeleteCoursesRequest  (required)
     * @return ApiResponse&lt;CoreCohortAddCohortMembers200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreCohortAddCohortMembers200Response> coreCourseDeleteCoursesWithHttpInfo(CoreCourseDeleteCoursesRequest coreCourseDeleteCoursesRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCourseDeleteCoursesValidateBeforeCall(coreCourseDeleteCoursesRequest, null);
        Type localVarReturnType = new TypeToken<CoreCohortAddCohortMembers200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deletes all specified courses (asynchronously)
     * Deletes all specified courses
     * @param coreCourseDeleteCoursesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCourseDeleteCoursesAsync(CoreCourseDeleteCoursesRequest coreCourseDeleteCoursesRequest, final ApiCallback<CoreCohortAddCohortMembers200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCourseDeleteCoursesValidateBeforeCall(coreCourseDeleteCoursesRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreCohortAddCohortMembers200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCourseDeleteModules
     * @param coreCourseDeleteModulesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCourseDeleteModulesCall(CoreCourseDeleteModulesRequest coreCourseDeleteModulesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCourseDeleteModulesRequest;

        // create path and map variables
        String localVarPath = "/core_course_delete_modules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCourseDeleteModulesValidateBeforeCall(CoreCourseDeleteModulesRequest coreCourseDeleteModulesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCourseDeleteModulesRequest' is set
        if (coreCourseDeleteModulesRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCourseDeleteModulesRequest' when calling coreCourseDeleteModules(Async)");
        }

        return coreCourseDeleteModulesCall(coreCourseDeleteModulesRequest, _callback);

    }

    /**
     * Deletes all specified module instances
     * Deletes all specified module instances
     * @param coreCourseDeleteModulesRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreCourseDeleteModules(CoreCourseDeleteModulesRequest coreCourseDeleteModulesRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreCourseDeleteModulesWithHttpInfo(coreCourseDeleteModulesRequest);
        return localVarResp.getData();
    }

    /**
     * Deletes all specified module instances
     * Deletes all specified module instances
     * @param coreCourseDeleteModulesRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreCourseDeleteModulesWithHttpInfo(CoreCourseDeleteModulesRequest coreCourseDeleteModulesRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCourseDeleteModulesValidateBeforeCall(coreCourseDeleteModulesRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deletes all specified module instances (asynchronously)
     * Deletes all specified module instances
     * @param coreCourseDeleteModulesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCourseDeleteModulesAsync(CoreCourseDeleteModulesRequest coreCourseDeleteModulesRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCourseDeleteModulesValidateBeforeCall(coreCourseDeleteModulesRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCourseDuplicateCourse
     * @param coreCourseDuplicateCourseRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCourseDuplicateCourseCall(CoreCourseDuplicateCourseRequest coreCourseDuplicateCourseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCourseDuplicateCourseRequest;

        // create path and map variables
        String localVarPath = "/core_course_duplicate_course";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCourseDuplicateCourseValidateBeforeCall(CoreCourseDuplicateCourseRequest coreCourseDuplicateCourseRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCourseDuplicateCourseRequest' is set
        if (coreCourseDuplicateCourseRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCourseDuplicateCourseRequest' when calling coreCourseDuplicateCourse(Async)");
        }

        return coreCourseDuplicateCourseCall(coreCourseDuplicateCourseRequest, _callback);

    }

    /**
     * Duplicate an existing course (creating a new one).
     * Duplicate an existing course (creating a new one).
     * @param coreCourseDuplicateCourseRequest  (required)
     * @return CoreCourseDuplicateCourse200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreCourseDuplicateCourse200Response coreCourseDuplicateCourse(CoreCourseDuplicateCourseRequest coreCourseDuplicateCourseRequest) throws ApiException {
        ApiResponse<CoreCourseDuplicateCourse200Response> localVarResp = coreCourseDuplicateCourseWithHttpInfo(coreCourseDuplicateCourseRequest);
        return localVarResp.getData();
    }

    /**
     * Duplicate an existing course (creating a new one).
     * Duplicate an existing course (creating a new one).
     * @param coreCourseDuplicateCourseRequest  (required)
     * @return ApiResponse&lt;CoreCourseDuplicateCourse200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreCourseDuplicateCourse200Response> coreCourseDuplicateCourseWithHttpInfo(CoreCourseDuplicateCourseRequest coreCourseDuplicateCourseRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCourseDuplicateCourseValidateBeforeCall(coreCourseDuplicateCourseRequest, null);
        Type localVarReturnType = new TypeToken<CoreCourseDuplicateCourse200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Duplicate an existing course (creating a new one). (asynchronously)
     * Duplicate an existing course (creating a new one).
     * @param coreCourseDuplicateCourseRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCourseDuplicateCourseAsync(CoreCourseDuplicateCourseRequest coreCourseDuplicateCourseRequest, final ApiCallback<CoreCourseDuplicateCourse200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCourseDuplicateCourseValidateBeforeCall(coreCourseDuplicateCourseRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreCourseDuplicateCourse200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCourseEditModule
     * @param coreCourseEditModuleRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> html to replace the current module with </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCourseEditModuleCall(CoreCourseEditModuleRequest coreCourseEditModuleRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCourseEditModuleRequest;

        // create path and map variables
        String localVarPath = "/core_course_edit_module";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCourseEditModuleValidateBeforeCall(CoreCourseEditModuleRequest coreCourseEditModuleRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCourseEditModuleRequest' is set
        if (coreCourseEditModuleRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCourseEditModuleRequest' when calling coreCourseEditModule(Async)");
        }

        return coreCourseEditModuleCall(coreCourseEditModuleRequest, _callback);

    }

    /**
     * Performs an action on course module (change visibility, duplicate, delete, etc.)
     * Performs an action on course module (change visibility, duplicate, delete, etc.)
     * @param coreCourseEditModuleRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> html to replace the current module with </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreCourseEditModule(CoreCourseEditModuleRequest coreCourseEditModuleRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreCourseEditModuleWithHttpInfo(coreCourseEditModuleRequest);
        return localVarResp.getData();
    }

    /**
     * Performs an action on course module (change visibility, duplicate, delete, etc.)
     * Performs an action on course module (change visibility, duplicate, delete, etc.)
     * @param coreCourseEditModuleRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> html to replace the current module with </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreCourseEditModuleWithHttpInfo(CoreCourseEditModuleRequest coreCourseEditModuleRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCourseEditModuleValidateBeforeCall(coreCourseEditModuleRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Performs an action on course module (change visibility, duplicate, delete, etc.) (asynchronously)
     * Performs an action on course module (change visibility, duplicate, delete, etc.)
     * @param coreCourseEditModuleRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> html to replace the current module with </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCourseEditModuleAsync(CoreCourseEditModuleRequest coreCourseEditModuleRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCourseEditModuleValidateBeforeCall(coreCourseEditModuleRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCourseEditSection
     * @param coreCourseEditSectionRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Additional data for javascript (JSON-encoded string) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCourseEditSectionCall(CoreCourseEditSectionRequest coreCourseEditSectionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCourseEditSectionRequest;

        // create path and map variables
        String localVarPath = "/core_course_edit_section";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCourseEditSectionValidateBeforeCall(CoreCourseEditSectionRequest coreCourseEditSectionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCourseEditSectionRequest' is set
        if (coreCourseEditSectionRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCourseEditSectionRequest' when calling coreCourseEditSection(Async)");
        }

        return coreCourseEditSectionCall(coreCourseEditSectionRequest, _callback);

    }

    /**
     * Performs an action on course section (change visibility, set marker, delete)
     * Performs an action on course section (change visibility, set marker, delete)
     * @param coreCourseEditSectionRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Additional data for javascript (JSON-encoded string) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreCourseEditSection(CoreCourseEditSectionRequest coreCourseEditSectionRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreCourseEditSectionWithHttpInfo(coreCourseEditSectionRequest);
        return localVarResp.getData();
    }

    /**
     * Performs an action on course section (change visibility, set marker, delete)
     * Performs an action on course section (change visibility, set marker, delete)
     * @param coreCourseEditSectionRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Additional data for javascript (JSON-encoded string) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreCourseEditSectionWithHttpInfo(CoreCourseEditSectionRequest coreCourseEditSectionRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCourseEditSectionValidateBeforeCall(coreCourseEditSectionRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Performs an action on course section (change visibility, set marker, delete) (asynchronously)
     * Performs an action on course section (change visibility, set marker, delete)
     * @param coreCourseEditSectionRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Additional data for javascript (JSON-encoded string) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCourseEditSectionAsync(CoreCourseEditSectionRequest coreCourseEditSectionRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCourseEditSectionValidateBeforeCall(coreCourseEditSectionRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCourseGetActivityChooserFooter
     * @param coreCourseGetActivityChooserFooterRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCourseGetActivityChooserFooterCall(CoreCourseGetActivityChooserFooterRequest coreCourseGetActivityChooserFooterRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCourseGetActivityChooserFooterRequest;

        // create path and map variables
        String localVarPath = "/core_course_get_activity_chooser_footer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCourseGetActivityChooserFooterValidateBeforeCall(CoreCourseGetActivityChooserFooterRequest coreCourseGetActivityChooserFooterRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCourseGetActivityChooserFooterRequest' is set
        if (coreCourseGetActivityChooserFooterRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCourseGetActivityChooserFooterRequest' when calling coreCourseGetActivityChooserFooter(Async)");
        }

        return coreCourseGetActivityChooserFooterCall(coreCourseGetActivityChooserFooterRequest, _callback);

    }

    /**
     * Fetch the data for the activity chooser footer.
     * Fetch the data for the activity chooser footer.
     * @param coreCourseGetActivityChooserFooterRequest  (required)
     * @return CoreCourseGetActivityChooserFooter200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreCourseGetActivityChooserFooter200Response coreCourseGetActivityChooserFooter(CoreCourseGetActivityChooserFooterRequest coreCourseGetActivityChooserFooterRequest) throws ApiException {
        ApiResponse<CoreCourseGetActivityChooserFooter200Response> localVarResp = coreCourseGetActivityChooserFooterWithHttpInfo(coreCourseGetActivityChooserFooterRequest);
        return localVarResp.getData();
    }

    /**
     * Fetch the data for the activity chooser footer.
     * Fetch the data for the activity chooser footer.
     * @param coreCourseGetActivityChooserFooterRequest  (required)
     * @return ApiResponse&lt;CoreCourseGetActivityChooserFooter200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreCourseGetActivityChooserFooter200Response> coreCourseGetActivityChooserFooterWithHttpInfo(CoreCourseGetActivityChooserFooterRequest coreCourseGetActivityChooserFooterRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCourseGetActivityChooserFooterValidateBeforeCall(coreCourseGetActivityChooserFooterRequest, null);
        Type localVarReturnType = new TypeToken<CoreCourseGetActivityChooserFooter200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch the data for the activity chooser footer. (asynchronously)
     * Fetch the data for the activity chooser footer.
     * @param coreCourseGetActivityChooserFooterRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCourseGetActivityChooserFooterAsync(CoreCourseGetActivityChooserFooterRequest coreCourseGetActivityChooserFooterRequest, final ApiCallback<CoreCourseGetActivityChooserFooter200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCourseGetActivityChooserFooterValidateBeforeCall(coreCourseGetActivityChooserFooterRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreCourseGetActivityChooserFooter200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCourseGetCategories
     * @param coreCourseGetCategoriesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCourseGetCategoriesCall(CoreCourseGetCategoriesRequest coreCourseGetCategoriesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCourseGetCategoriesRequest;

        // create path and map variables
        String localVarPath = "/core_course_get_categories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCourseGetCategoriesValidateBeforeCall(CoreCourseGetCategoriesRequest coreCourseGetCategoriesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCourseGetCategoriesRequest' is set
        if (coreCourseGetCategoriesRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCourseGetCategoriesRequest' when calling coreCourseGetCategories(Async)");
        }

        return coreCourseGetCategoriesCall(coreCourseGetCategoriesRequest, _callback);

    }

    /**
     * Return category details
     * Return category details
     * @param coreCourseGetCategoriesRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreCourseGetCategories(CoreCourseGetCategoriesRequest coreCourseGetCategoriesRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreCourseGetCategoriesWithHttpInfo(coreCourseGetCategoriesRequest);
        return localVarResp.getData();
    }

    /**
     * Return category details
     * Return category details
     * @param coreCourseGetCategoriesRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreCourseGetCategoriesWithHttpInfo(CoreCourseGetCategoriesRequest coreCourseGetCategoriesRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCourseGetCategoriesValidateBeforeCall(coreCourseGetCategoriesRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return category details (asynchronously)
     * Return category details
     * @param coreCourseGetCategoriesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCourseGetCategoriesAsync(CoreCourseGetCategoriesRequest coreCourseGetCategoriesRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCourseGetCategoriesValidateBeforeCall(coreCourseGetCategoriesRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCourseGetContents
     * @param coreCourseGetContentsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCourseGetContentsCall(CoreCourseGetContentsRequest coreCourseGetContentsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCourseGetContentsRequest;

        // create path and map variables
        String localVarPath = "/core_course_get_contents";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCourseGetContentsValidateBeforeCall(CoreCourseGetContentsRequest coreCourseGetContentsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCourseGetContentsRequest' is set
        if (coreCourseGetContentsRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCourseGetContentsRequest' when calling coreCourseGetContents(Async)");
        }

        return coreCourseGetContentsCall(coreCourseGetContentsRequest, _callback);

    }

    /**
     * Get course contents
     * Get course contents
     * @param coreCourseGetContentsRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreCourseGetContents(CoreCourseGetContentsRequest coreCourseGetContentsRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreCourseGetContentsWithHttpInfo(coreCourseGetContentsRequest);
        return localVarResp.getData();
    }

    /**
     * Get course contents
     * Get course contents
     * @param coreCourseGetContentsRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreCourseGetContentsWithHttpInfo(CoreCourseGetContentsRequest coreCourseGetContentsRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCourseGetContentsValidateBeforeCall(coreCourseGetContentsRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get course contents (asynchronously)
     * Get course contents
     * @param coreCourseGetContentsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCourseGetContentsAsync(CoreCourseGetContentsRequest coreCourseGetContentsRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCourseGetContentsValidateBeforeCall(coreCourseGetContentsRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCourseGetCourseContentItems
     * @param coreCourseGetCourseContentItemsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCourseGetCourseContentItemsCall(CoreCourseGetCourseContentItemsRequest coreCourseGetCourseContentItemsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCourseGetCourseContentItemsRequest;

        // create path and map variables
        String localVarPath = "/core_course_get_course_content_items";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCourseGetCourseContentItemsValidateBeforeCall(CoreCourseGetCourseContentItemsRequest coreCourseGetCourseContentItemsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCourseGetCourseContentItemsRequest' is set
        if (coreCourseGetCourseContentItemsRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCourseGetCourseContentItemsRequest' when calling coreCourseGetCourseContentItems(Async)");
        }

        return coreCourseGetCourseContentItemsCall(coreCourseGetCourseContentItemsRequest, _callback);

    }

    /**
     * Fetch all the content items (activities, resources and their subtypes) for the activity picker
     * Fetch all the content items (activities, resources and their subtypes) for the activity picker
     * @param coreCourseGetCourseContentItemsRequest  (required)
     * @return CoreCourseGetCourseContentItems200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreCourseGetCourseContentItems200Response coreCourseGetCourseContentItems(CoreCourseGetCourseContentItemsRequest coreCourseGetCourseContentItemsRequest) throws ApiException {
        ApiResponse<CoreCourseGetCourseContentItems200Response> localVarResp = coreCourseGetCourseContentItemsWithHttpInfo(coreCourseGetCourseContentItemsRequest);
        return localVarResp.getData();
    }

    /**
     * Fetch all the content items (activities, resources and their subtypes) for the activity picker
     * Fetch all the content items (activities, resources and their subtypes) for the activity picker
     * @param coreCourseGetCourseContentItemsRequest  (required)
     * @return ApiResponse&lt;CoreCourseGetCourseContentItems200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreCourseGetCourseContentItems200Response> coreCourseGetCourseContentItemsWithHttpInfo(CoreCourseGetCourseContentItemsRequest coreCourseGetCourseContentItemsRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCourseGetCourseContentItemsValidateBeforeCall(coreCourseGetCourseContentItemsRequest, null);
        Type localVarReturnType = new TypeToken<CoreCourseGetCourseContentItems200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch all the content items (activities, resources and their subtypes) for the activity picker (asynchronously)
     * Fetch all the content items (activities, resources and their subtypes) for the activity picker
     * @param coreCourseGetCourseContentItemsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCourseGetCourseContentItemsAsync(CoreCourseGetCourseContentItemsRequest coreCourseGetCourseContentItemsRequest, final ApiCallback<CoreCourseGetCourseContentItems200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCourseGetCourseContentItemsValidateBeforeCall(coreCourseGetCourseContentItemsRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreCourseGetCourseContentItems200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCourseGetCourseModule
     * @param coreCompetencyListCourseModuleCompetenciesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCourseGetCourseModuleCall(CoreCompetencyListCourseModuleCompetenciesRequest coreCompetencyListCourseModuleCompetenciesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCompetencyListCourseModuleCompetenciesRequest;

        // create path and map variables
        String localVarPath = "/core_course_get_course_module";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCourseGetCourseModuleValidateBeforeCall(CoreCompetencyListCourseModuleCompetenciesRequest coreCompetencyListCourseModuleCompetenciesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCompetencyListCourseModuleCompetenciesRequest' is set
        if (coreCompetencyListCourseModuleCompetenciesRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCompetencyListCourseModuleCompetenciesRequest' when calling coreCourseGetCourseModule(Async)");
        }

        return coreCourseGetCourseModuleCall(coreCompetencyListCourseModuleCompetenciesRequest, _callback);

    }

    /**
     * Return information about a course module
     * Return information about a course module
     * @param coreCompetencyListCourseModuleCompetenciesRequest  (required)
     * @return CoreCourseGetCourseModule200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreCourseGetCourseModule200Response coreCourseGetCourseModule(CoreCompetencyListCourseModuleCompetenciesRequest coreCompetencyListCourseModuleCompetenciesRequest) throws ApiException {
        ApiResponse<CoreCourseGetCourseModule200Response> localVarResp = coreCourseGetCourseModuleWithHttpInfo(coreCompetencyListCourseModuleCompetenciesRequest);
        return localVarResp.getData();
    }

    /**
     * Return information about a course module
     * Return information about a course module
     * @param coreCompetencyListCourseModuleCompetenciesRequest  (required)
     * @return ApiResponse&lt;CoreCourseGetCourseModule200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreCourseGetCourseModule200Response> coreCourseGetCourseModuleWithHttpInfo(CoreCompetencyListCourseModuleCompetenciesRequest coreCompetencyListCourseModuleCompetenciesRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCourseGetCourseModuleValidateBeforeCall(coreCompetencyListCourseModuleCompetenciesRequest, null);
        Type localVarReturnType = new TypeToken<CoreCourseGetCourseModule200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return information about a course module (asynchronously)
     * Return information about a course module
     * @param coreCompetencyListCourseModuleCompetenciesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCourseGetCourseModuleAsync(CoreCompetencyListCourseModuleCompetenciesRequest coreCompetencyListCourseModuleCompetenciesRequest, final ApiCallback<CoreCourseGetCourseModule200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCourseGetCourseModuleValidateBeforeCall(coreCompetencyListCourseModuleCompetenciesRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreCourseGetCourseModule200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCourseGetCourseModuleByInstance
     * @param coreCourseGetCourseModuleByInstanceRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCourseGetCourseModuleByInstanceCall(CoreCourseGetCourseModuleByInstanceRequest coreCourseGetCourseModuleByInstanceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCourseGetCourseModuleByInstanceRequest;

        // create path and map variables
        String localVarPath = "/core_course_get_course_module_by_instance";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCourseGetCourseModuleByInstanceValidateBeforeCall(CoreCourseGetCourseModuleByInstanceRequest coreCourseGetCourseModuleByInstanceRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCourseGetCourseModuleByInstanceRequest' is set
        if (coreCourseGetCourseModuleByInstanceRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCourseGetCourseModuleByInstanceRequest' when calling coreCourseGetCourseModuleByInstance(Async)");
        }

        return coreCourseGetCourseModuleByInstanceCall(coreCourseGetCourseModuleByInstanceRequest, _callback);

    }

    /**
     * Return information about a given module name and instance id
     * Return information about a given module name and instance id
     * @param coreCourseGetCourseModuleByInstanceRequest  (required)
     * @return CoreCourseGetCourseModuleByInstance200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreCourseGetCourseModuleByInstance200Response coreCourseGetCourseModuleByInstance(CoreCourseGetCourseModuleByInstanceRequest coreCourseGetCourseModuleByInstanceRequest) throws ApiException {
        ApiResponse<CoreCourseGetCourseModuleByInstance200Response> localVarResp = coreCourseGetCourseModuleByInstanceWithHttpInfo(coreCourseGetCourseModuleByInstanceRequest);
        return localVarResp.getData();
    }

    /**
     * Return information about a given module name and instance id
     * Return information about a given module name and instance id
     * @param coreCourseGetCourseModuleByInstanceRequest  (required)
     * @return ApiResponse&lt;CoreCourseGetCourseModuleByInstance200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreCourseGetCourseModuleByInstance200Response> coreCourseGetCourseModuleByInstanceWithHttpInfo(CoreCourseGetCourseModuleByInstanceRequest coreCourseGetCourseModuleByInstanceRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCourseGetCourseModuleByInstanceValidateBeforeCall(coreCourseGetCourseModuleByInstanceRequest, null);
        Type localVarReturnType = new TypeToken<CoreCourseGetCourseModuleByInstance200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return information about a given module name and instance id (asynchronously)
     * Return information about a given module name and instance id
     * @param coreCourseGetCourseModuleByInstanceRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCourseGetCourseModuleByInstanceAsync(CoreCourseGetCourseModuleByInstanceRequest coreCourseGetCourseModuleByInstanceRequest, final ApiCallback<CoreCourseGetCourseModuleByInstance200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCourseGetCourseModuleByInstanceValidateBeforeCall(coreCourseGetCourseModuleByInstanceRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreCourseGetCourseModuleByInstance200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCourseGetCourses
     * @param coreCourseGetCoursesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCourseGetCoursesCall(CoreCourseGetCoursesRequest coreCourseGetCoursesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCourseGetCoursesRequest;

        // create path and map variables
        String localVarPath = "/core_course_get_courses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCourseGetCoursesValidateBeforeCall(CoreCourseGetCoursesRequest coreCourseGetCoursesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCourseGetCoursesRequest' is set
        if (coreCourseGetCoursesRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCourseGetCoursesRequest' when calling coreCourseGetCourses(Async)");
        }

        return coreCourseGetCoursesCall(coreCourseGetCoursesRequest, _callback);

    }

    /**
     * Return course details
     * Return course details
     * @param coreCourseGetCoursesRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreCourseGetCourses(CoreCourseGetCoursesRequest coreCourseGetCoursesRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreCourseGetCoursesWithHttpInfo(coreCourseGetCoursesRequest);
        return localVarResp.getData();
    }

    /**
     * Return course details
     * Return course details
     * @param coreCourseGetCoursesRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreCourseGetCoursesWithHttpInfo(CoreCourseGetCoursesRequest coreCourseGetCoursesRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCourseGetCoursesValidateBeforeCall(coreCourseGetCoursesRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return course details (asynchronously)
     * Return course details
     * @param coreCourseGetCoursesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCourseGetCoursesAsync(CoreCourseGetCoursesRequest coreCourseGetCoursesRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCourseGetCoursesValidateBeforeCall(coreCourseGetCoursesRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCourseGetCoursesByField
     * @param coreCourseGetCoursesByFieldRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCourseGetCoursesByFieldCall(CoreCourseGetCoursesByFieldRequest coreCourseGetCoursesByFieldRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCourseGetCoursesByFieldRequest;

        // create path and map variables
        String localVarPath = "/core_course_get_courses_by_field";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCourseGetCoursesByFieldValidateBeforeCall(CoreCourseGetCoursesByFieldRequest coreCourseGetCoursesByFieldRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCourseGetCoursesByFieldRequest' is set
        if (coreCourseGetCoursesByFieldRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCourseGetCoursesByFieldRequest' when calling coreCourseGetCoursesByField(Async)");
        }

        return coreCourseGetCoursesByFieldCall(coreCourseGetCoursesByFieldRequest, _callback);

    }

    /**
     * Get courses matching a specific field (id/s, shortname, idnumber, category)
     * Get courses matching a specific field (id/s, shortname, idnumber, category)
     * @param coreCourseGetCoursesByFieldRequest  (required)
     * @return CoreCourseGetCoursesByField200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreCourseGetCoursesByField200Response coreCourseGetCoursesByField(CoreCourseGetCoursesByFieldRequest coreCourseGetCoursesByFieldRequest) throws ApiException {
        ApiResponse<CoreCourseGetCoursesByField200Response> localVarResp = coreCourseGetCoursesByFieldWithHttpInfo(coreCourseGetCoursesByFieldRequest);
        return localVarResp.getData();
    }

    /**
     * Get courses matching a specific field (id/s, shortname, idnumber, category)
     * Get courses matching a specific field (id/s, shortname, idnumber, category)
     * @param coreCourseGetCoursesByFieldRequest  (required)
     * @return ApiResponse&lt;CoreCourseGetCoursesByField200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreCourseGetCoursesByField200Response> coreCourseGetCoursesByFieldWithHttpInfo(CoreCourseGetCoursesByFieldRequest coreCourseGetCoursesByFieldRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCourseGetCoursesByFieldValidateBeforeCall(coreCourseGetCoursesByFieldRequest, null);
        Type localVarReturnType = new TypeToken<CoreCourseGetCoursesByField200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get courses matching a specific field (id/s, shortname, idnumber, category) (asynchronously)
     * Get courses matching a specific field (id/s, shortname, idnumber, category)
     * @param coreCourseGetCoursesByFieldRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCourseGetCoursesByFieldAsync(CoreCourseGetCoursesByFieldRequest coreCourseGetCoursesByFieldRequest, final ApiCallback<CoreCourseGetCoursesByField200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCourseGetCoursesByFieldValidateBeforeCall(coreCourseGetCoursesByFieldRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreCourseGetCoursesByField200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCourseGetEnrolledCoursesByTimelineClassification
     * @param coreCourseGetEnrolledCoursesByTimelineClassificationRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCourseGetEnrolledCoursesByTimelineClassificationCall(CoreCourseGetEnrolledCoursesByTimelineClassificationRequest coreCourseGetEnrolledCoursesByTimelineClassificationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCourseGetEnrolledCoursesByTimelineClassificationRequest;

        // create path and map variables
        String localVarPath = "/core_course_get_enrolled_courses_by_timeline_classification";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCourseGetEnrolledCoursesByTimelineClassificationValidateBeforeCall(CoreCourseGetEnrolledCoursesByTimelineClassificationRequest coreCourseGetEnrolledCoursesByTimelineClassificationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCourseGetEnrolledCoursesByTimelineClassificationRequest' is set
        if (coreCourseGetEnrolledCoursesByTimelineClassificationRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCourseGetEnrolledCoursesByTimelineClassificationRequest' when calling coreCourseGetEnrolledCoursesByTimelineClassification(Async)");
        }

        return coreCourseGetEnrolledCoursesByTimelineClassificationCall(coreCourseGetEnrolledCoursesByTimelineClassificationRequest, _callback);

    }

    /**
     * List of enrolled courses for the given timeline classification (past, inprogress, or future).
     * List of enrolled courses for the given timeline classification (past, inprogress, or future).
     * @param coreCourseGetEnrolledCoursesByTimelineClassificationRequest  (required)
     * @return CoreCourseGetEnrolledCoursesByTimelineClassification200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreCourseGetEnrolledCoursesByTimelineClassification200Response coreCourseGetEnrolledCoursesByTimelineClassification(CoreCourseGetEnrolledCoursesByTimelineClassificationRequest coreCourseGetEnrolledCoursesByTimelineClassificationRequest) throws ApiException {
        ApiResponse<CoreCourseGetEnrolledCoursesByTimelineClassification200Response> localVarResp = coreCourseGetEnrolledCoursesByTimelineClassificationWithHttpInfo(coreCourseGetEnrolledCoursesByTimelineClassificationRequest);
        return localVarResp.getData();
    }

    /**
     * List of enrolled courses for the given timeline classification (past, inprogress, or future).
     * List of enrolled courses for the given timeline classification (past, inprogress, or future).
     * @param coreCourseGetEnrolledCoursesByTimelineClassificationRequest  (required)
     * @return ApiResponse&lt;CoreCourseGetEnrolledCoursesByTimelineClassification200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreCourseGetEnrolledCoursesByTimelineClassification200Response> coreCourseGetEnrolledCoursesByTimelineClassificationWithHttpInfo(CoreCourseGetEnrolledCoursesByTimelineClassificationRequest coreCourseGetEnrolledCoursesByTimelineClassificationRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCourseGetEnrolledCoursesByTimelineClassificationValidateBeforeCall(coreCourseGetEnrolledCoursesByTimelineClassificationRequest, null);
        Type localVarReturnType = new TypeToken<CoreCourseGetEnrolledCoursesByTimelineClassification200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List of enrolled courses for the given timeline classification (past, inprogress, or future). (asynchronously)
     * List of enrolled courses for the given timeline classification (past, inprogress, or future).
     * @param coreCourseGetEnrolledCoursesByTimelineClassificationRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCourseGetEnrolledCoursesByTimelineClassificationAsync(CoreCourseGetEnrolledCoursesByTimelineClassificationRequest coreCourseGetEnrolledCoursesByTimelineClassificationRequest, final ApiCallback<CoreCourseGetEnrolledCoursesByTimelineClassification200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCourseGetEnrolledCoursesByTimelineClassificationValidateBeforeCall(coreCourseGetEnrolledCoursesByTimelineClassificationRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreCourseGetEnrolledCoursesByTimelineClassification200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCourseGetEnrolledCoursesWithActionEventsByTimelineClassification
     * @param coreCourseGetEnrolledCoursesWithActionEventsByTimelineClassificationRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCourseGetEnrolledCoursesWithActionEventsByTimelineClassificationCall(CoreCourseGetEnrolledCoursesWithActionEventsByTimelineClassificationRequest coreCourseGetEnrolledCoursesWithActionEventsByTimelineClassificationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCourseGetEnrolledCoursesWithActionEventsByTimelineClassificationRequest;

        // create path and map variables
        String localVarPath = "/core_course_get_enrolled_courses_with_action_events_by_timeline_classification";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCourseGetEnrolledCoursesWithActionEventsByTimelineClassificationValidateBeforeCall(CoreCourseGetEnrolledCoursesWithActionEventsByTimelineClassificationRequest coreCourseGetEnrolledCoursesWithActionEventsByTimelineClassificationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCourseGetEnrolledCoursesWithActionEventsByTimelineClassificationRequest' is set
        if (coreCourseGetEnrolledCoursesWithActionEventsByTimelineClassificationRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCourseGetEnrolledCoursesWithActionEventsByTimelineClassificationRequest' when calling coreCourseGetEnrolledCoursesWithActionEventsByTimelineClassification(Async)");
        }

        return coreCourseGetEnrolledCoursesWithActionEventsByTimelineClassificationCall(coreCourseGetEnrolledCoursesWithActionEventsByTimelineClassificationRequest, _callback);

    }

    /**
     * List of enrolled courses with action events in a given timeframe, for the given timeline classification.
     * List of enrolled courses with action events in a given timeframe, for the given timeline classification.
     * @param coreCourseGetEnrolledCoursesWithActionEventsByTimelineClassificationRequest  (required)
     * @return CoreCourseGetEnrolledCoursesWithActionEventsByTimelineClassification200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreCourseGetEnrolledCoursesWithActionEventsByTimelineClassification200Response coreCourseGetEnrolledCoursesWithActionEventsByTimelineClassification(CoreCourseGetEnrolledCoursesWithActionEventsByTimelineClassificationRequest coreCourseGetEnrolledCoursesWithActionEventsByTimelineClassificationRequest) throws ApiException {
        ApiResponse<CoreCourseGetEnrolledCoursesWithActionEventsByTimelineClassification200Response> localVarResp = coreCourseGetEnrolledCoursesWithActionEventsByTimelineClassificationWithHttpInfo(coreCourseGetEnrolledCoursesWithActionEventsByTimelineClassificationRequest);
        return localVarResp.getData();
    }

    /**
     * List of enrolled courses with action events in a given timeframe, for the given timeline classification.
     * List of enrolled courses with action events in a given timeframe, for the given timeline classification.
     * @param coreCourseGetEnrolledCoursesWithActionEventsByTimelineClassificationRequest  (required)
     * @return ApiResponse&lt;CoreCourseGetEnrolledCoursesWithActionEventsByTimelineClassification200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreCourseGetEnrolledCoursesWithActionEventsByTimelineClassification200Response> coreCourseGetEnrolledCoursesWithActionEventsByTimelineClassificationWithHttpInfo(CoreCourseGetEnrolledCoursesWithActionEventsByTimelineClassificationRequest coreCourseGetEnrolledCoursesWithActionEventsByTimelineClassificationRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCourseGetEnrolledCoursesWithActionEventsByTimelineClassificationValidateBeforeCall(coreCourseGetEnrolledCoursesWithActionEventsByTimelineClassificationRequest, null);
        Type localVarReturnType = new TypeToken<CoreCourseGetEnrolledCoursesWithActionEventsByTimelineClassification200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List of enrolled courses with action events in a given timeframe, for the given timeline classification. (asynchronously)
     * List of enrolled courses with action events in a given timeframe, for the given timeline classification.
     * @param coreCourseGetEnrolledCoursesWithActionEventsByTimelineClassificationRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCourseGetEnrolledCoursesWithActionEventsByTimelineClassificationAsync(CoreCourseGetEnrolledCoursesWithActionEventsByTimelineClassificationRequest coreCourseGetEnrolledCoursesWithActionEventsByTimelineClassificationRequest, final ApiCallback<CoreCourseGetEnrolledCoursesWithActionEventsByTimelineClassification200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCourseGetEnrolledCoursesWithActionEventsByTimelineClassificationValidateBeforeCall(coreCourseGetEnrolledCoursesWithActionEventsByTimelineClassificationRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreCourseGetEnrolledCoursesWithActionEventsByTimelineClassification200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCourseGetEnrolledUsersByCmid
     * @param coreCourseGetEnrolledUsersByCmidRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCourseGetEnrolledUsersByCmidCall(CoreCourseGetEnrolledUsersByCmidRequest coreCourseGetEnrolledUsersByCmidRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCourseGetEnrolledUsersByCmidRequest;

        // create path and map variables
        String localVarPath = "/core_course_get_enrolled_users_by_cmid";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCourseGetEnrolledUsersByCmidValidateBeforeCall(CoreCourseGetEnrolledUsersByCmidRequest coreCourseGetEnrolledUsersByCmidRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCourseGetEnrolledUsersByCmidRequest' is set
        if (coreCourseGetEnrolledUsersByCmidRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCourseGetEnrolledUsersByCmidRequest' when calling coreCourseGetEnrolledUsersByCmid(Async)");
        }

        return coreCourseGetEnrolledUsersByCmidCall(coreCourseGetEnrolledUsersByCmidRequest, _callback);

    }

    /**
     * List users by course module id, filter by group and active enrolment status.
     * List users by course module id, filter by group and active enrolment status.
     * @param coreCourseGetEnrolledUsersByCmidRequest  (required)
     * @return CoreCourseGetEnrolledUsersByCmid200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreCourseGetEnrolledUsersByCmid200Response coreCourseGetEnrolledUsersByCmid(CoreCourseGetEnrolledUsersByCmidRequest coreCourseGetEnrolledUsersByCmidRequest) throws ApiException {
        ApiResponse<CoreCourseGetEnrolledUsersByCmid200Response> localVarResp = coreCourseGetEnrolledUsersByCmidWithHttpInfo(coreCourseGetEnrolledUsersByCmidRequest);
        return localVarResp.getData();
    }

    /**
     * List users by course module id, filter by group and active enrolment status.
     * List users by course module id, filter by group and active enrolment status.
     * @param coreCourseGetEnrolledUsersByCmidRequest  (required)
     * @return ApiResponse&lt;CoreCourseGetEnrolledUsersByCmid200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreCourseGetEnrolledUsersByCmid200Response> coreCourseGetEnrolledUsersByCmidWithHttpInfo(CoreCourseGetEnrolledUsersByCmidRequest coreCourseGetEnrolledUsersByCmidRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCourseGetEnrolledUsersByCmidValidateBeforeCall(coreCourseGetEnrolledUsersByCmidRequest, null);
        Type localVarReturnType = new TypeToken<CoreCourseGetEnrolledUsersByCmid200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List users by course module id, filter by group and active enrolment status. (asynchronously)
     * List users by course module id, filter by group and active enrolment status.
     * @param coreCourseGetEnrolledUsersByCmidRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCourseGetEnrolledUsersByCmidAsync(CoreCourseGetEnrolledUsersByCmidRequest coreCourseGetEnrolledUsersByCmidRequest, final ApiCallback<CoreCourseGetEnrolledUsersByCmid200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCourseGetEnrolledUsersByCmidValidateBeforeCall(coreCourseGetEnrolledUsersByCmidRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreCourseGetEnrolledUsersByCmid200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCourseGetModule
     * @param coreCourseGetModuleRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> html to replace the current module with </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCourseGetModuleCall(CoreCourseGetModuleRequest coreCourseGetModuleRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCourseGetModuleRequest;

        // create path and map variables
        String localVarPath = "/core_course_get_module";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCourseGetModuleValidateBeforeCall(CoreCourseGetModuleRequest coreCourseGetModuleRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCourseGetModuleRequest' is set
        if (coreCourseGetModuleRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCourseGetModuleRequest' when calling coreCourseGetModule(Async)");
        }

        return coreCourseGetModuleCall(coreCourseGetModuleRequest, _callback);

    }

    /**
     * Returns html with one activity module on course page
     * Returns html with one activity module on course page
     * @param coreCourseGetModuleRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> html to replace the current module with </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreCourseGetModule(CoreCourseGetModuleRequest coreCourseGetModuleRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreCourseGetModuleWithHttpInfo(coreCourseGetModuleRequest);
        return localVarResp.getData();
    }

    /**
     * Returns html with one activity module on course page
     * Returns html with one activity module on course page
     * @param coreCourseGetModuleRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> html to replace the current module with </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreCourseGetModuleWithHttpInfo(CoreCourseGetModuleRequest coreCourseGetModuleRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCourseGetModuleValidateBeforeCall(coreCourseGetModuleRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns html with one activity module on course page (asynchronously)
     * Returns html with one activity module on course page
     * @param coreCourseGetModuleRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> html to replace the current module with </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCourseGetModuleAsync(CoreCourseGetModuleRequest coreCourseGetModuleRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCourseGetModuleValidateBeforeCall(coreCourseGetModuleRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCourseGetRecentCourses
     * @param coreCourseGetRecentCoursesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Courses </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCourseGetRecentCoursesCall(CoreCourseGetRecentCoursesRequest coreCourseGetRecentCoursesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCourseGetRecentCoursesRequest;

        // create path and map variables
        String localVarPath = "/core_course_get_recent_courses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCourseGetRecentCoursesValidateBeforeCall(CoreCourseGetRecentCoursesRequest coreCourseGetRecentCoursesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCourseGetRecentCoursesRequest' is set
        if (coreCourseGetRecentCoursesRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCourseGetRecentCoursesRequest' when calling coreCourseGetRecentCourses(Async)");
        }

        return coreCourseGetRecentCoursesCall(coreCourseGetRecentCoursesRequest, _callback);

    }

    /**
     * List of courses a user has accessed most recently.
     * List of courses a user has accessed most recently.
     * @param coreCourseGetRecentCoursesRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Courses </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreCourseGetRecentCourses(CoreCourseGetRecentCoursesRequest coreCourseGetRecentCoursesRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreCourseGetRecentCoursesWithHttpInfo(coreCourseGetRecentCoursesRequest);
        return localVarResp.getData();
    }

    /**
     * List of courses a user has accessed most recently.
     * List of courses a user has accessed most recently.
     * @param coreCourseGetRecentCoursesRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Courses </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreCourseGetRecentCoursesWithHttpInfo(CoreCourseGetRecentCoursesRequest coreCourseGetRecentCoursesRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCourseGetRecentCoursesValidateBeforeCall(coreCourseGetRecentCoursesRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List of courses a user has accessed most recently. (asynchronously)
     * List of courses a user has accessed most recently.
     * @param coreCourseGetRecentCoursesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Courses </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCourseGetRecentCoursesAsync(CoreCourseGetRecentCoursesRequest coreCourseGetRecentCoursesRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCourseGetRecentCoursesValidateBeforeCall(coreCourseGetRecentCoursesRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCourseGetUpdatesSince
     * @param coreCourseGetUpdatesSinceRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCourseGetUpdatesSinceCall(CoreCourseGetUpdatesSinceRequest coreCourseGetUpdatesSinceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCourseGetUpdatesSinceRequest;

        // create path and map variables
        String localVarPath = "/core_course_get_updates_since";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCourseGetUpdatesSinceValidateBeforeCall(CoreCourseGetUpdatesSinceRequest coreCourseGetUpdatesSinceRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCourseGetUpdatesSinceRequest' is set
        if (coreCourseGetUpdatesSinceRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCourseGetUpdatesSinceRequest' when calling coreCourseGetUpdatesSince(Async)");
        }

        return coreCourseGetUpdatesSinceCall(coreCourseGetUpdatesSinceRequest, _callback);

    }

    /**
     * Check if there are updates affecting the user for the given course since the given time stamp.
     * Check if there are updates affecting the user for the given course since the given time stamp.
     * @param coreCourseGetUpdatesSinceRequest  (required)
     * @return CoreCourseGetUpdatesSince200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreCourseGetUpdatesSince200Response coreCourseGetUpdatesSince(CoreCourseGetUpdatesSinceRequest coreCourseGetUpdatesSinceRequest) throws ApiException {
        ApiResponse<CoreCourseGetUpdatesSince200Response> localVarResp = coreCourseGetUpdatesSinceWithHttpInfo(coreCourseGetUpdatesSinceRequest);
        return localVarResp.getData();
    }

    /**
     * Check if there are updates affecting the user for the given course since the given time stamp.
     * Check if there are updates affecting the user for the given course since the given time stamp.
     * @param coreCourseGetUpdatesSinceRequest  (required)
     * @return ApiResponse&lt;CoreCourseGetUpdatesSince200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreCourseGetUpdatesSince200Response> coreCourseGetUpdatesSinceWithHttpInfo(CoreCourseGetUpdatesSinceRequest coreCourseGetUpdatesSinceRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCourseGetUpdatesSinceValidateBeforeCall(coreCourseGetUpdatesSinceRequest, null);
        Type localVarReturnType = new TypeToken<CoreCourseGetUpdatesSince200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Check if there are updates affecting the user for the given course since the given time stamp. (asynchronously)
     * Check if there are updates affecting the user for the given course since the given time stamp.
     * @param coreCourseGetUpdatesSinceRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCourseGetUpdatesSinceAsync(CoreCourseGetUpdatesSinceRequest coreCourseGetUpdatesSinceRequest, final ApiCallback<CoreCourseGetUpdatesSince200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCourseGetUpdatesSinceValidateBeforeCall(coreCourseGetUpdatesSinceRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreCourseGetUpdatesSince200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCourseGetUserAdministrationOptions
     * @param coreCourseGetUserAdministrationOptionsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCourseGetUserAdministrationOptionsCall(CoreCourseGetUserAdministrationOptionsRequest coreCourseGetUserAdministrationOptionsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCourseGetUserAdministrationOptionsRequest;

        // create path and map variables
        String localVarPath = "/core_course_get_user_administration_options";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCourseGetUserAdministrationOptionsValidateBeforeCall(CoreCourseGetUserAdministrationOptionsRequest coreCourseGetUserAdministrationOptionsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCourseGetUserAdministrationOptionsRequest' is set
        if (coreCourseGetUserAdministrationOptionsRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCourseGetUserAdministrationOptionsRequest' when calling coreCourseGetUserAdministrationOptions(Async)");
        }

        return coreCourseGetUserAdministrationOptionsCall(coreCourseGetUserAdministrationOptionsRequest, _callback);

    }

    /**
     * Return a list of administration options in a set of courses that are avaialable or not for the current                             user.
     * Return a list of administration options in a set of courses that are avaialable or not for the current                             user.
     * @param coreCourseGetUserAdministrationOptionsRequest  (required)
     * @return CoreCourseGetUserAdministrationOptions200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreCourseGetUserAdministrationOptions200Response coreCourseGetUserAdministrationOptions(CoreCourseGetUserAdministrationOptionsRequest coreCourseGetUserAdministrationOptionsRequest) throws ApiException {
        ApiResponse<CoreCourseGetUserAdministrationOptions200Response> localVarResp = coreCourseGetUserAdministrationOptionsWithHttpInfo(coreCourseGetUserAdministrationOptionsRequest);
        return localVarResp.getData();
    }

    /**
     * Return a list of administration options in a set of courses that are avaialable or not for the current                             user.
     * Return a list of administration options in a set of courses that are avaialable or not for the current                             user.
     * @param coreCourseGetUserAdministrationOptionsRequest  (required)
     * @return ApiResponse&lt;CoreCourseGetUserAdministrationOptions200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreCourseGetUserAdministrationOptions200Response> coreCourseGetUserAdministrationOptionsWithHttpInfo(CoreCourseGetUserAdministrationOptionsRequest coreCourseGetUserAdministrationOptionsRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCourseGetUserAdministrationOptionsValidateBeforeCall(coreCourseGetUserAdministrationOptionsRequest, null);
        Type localVarReturnType = new TypeToken<CoreCourseGetUserAdministrationOptions200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a list of administration options in a set of courses that are avaialable or not for the current                             user. (asynchronously)
     * Return a list of administration options in a set of courses that are avaialable or not for the current                             user.
     * @param coreCourseGetUserAdministrationOptionsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCourseGetUserAdministrationOptionsAsync(CoreCourseGetUserAdministrationOptionsRequest coreCourseGetUserAdministrationOptionsRequest, final ApiCallback<CoreCourseGetUserAdministrationOptions200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCourseGetUserAdministrationOptionsValidateBeforeCall(coreCourseGetUserAdministrationOptionsRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreCourseGetUserAdministrationOptions200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCourseGetUserNavigationOptions
     * @param coreCourseGetUserNavigationOptionsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCourseGetUserNavigationOptionsCall(CoreCourseGetUserNavigationOptionsRequest coreCourseGetUserNavigationOptionsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCourseGetUserNavigationOptionsRequest;

        // create path and map variables
        String localVarPath = "/core_course_get_user_navigation_options";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCourseGetUserNavigationOptionsValidateBeforeCall(CoreCourseGetUserNavigationOptionsRequest coreCourseGetUserNavigationOptionsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCourseGetUserNavigationOptionsRequest' is set
        if (coreCourseGetUserNavigationOptionsRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCourseGetUserNavigationOptionsRequest' when calling coreCourseGetUserNavigationOptions(Async)");
        }

        return coreCourseGetUserNavigationOptionsCall(coreCourseGetUserNavigationOptionsRequest, _callback);

    }

    /**
     * Return a list of navigation options in a set of courses that are avaialable or not for the current user.
     * Return a list of navigation options in a set of courses that are avaialable or not for the current user.
     * @param coreCourseGetUserNavigationOptionsRequest  (required)
     * @return CoreCourseGetUserNavigationOptions200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreCourseGetUserNavigationOptions200Response coreCourseGetUserNavigationOptions(CoreCourseGetUserNavigationOptionsRequest coreCourseGetUserNavigationOptionsRequest) throws ApiException {
        ApiResponse<CoreCourseGetUserNavigationOptions200Response> localVarResp = coreCourseGetUserNavigationOptionsWithHttpInfo(coreCourseGetUserNavigationOptionsRequest);
        return localVarResp.getData();
    }

    /**
     * Return a list of navigation options in a set of courses that are avaialable or not for the current user.
     * Return a list of navigation options in a set of courses that are avaialable or not for the current user.
     * @param coreCourseGetUserNavigationOptionsRequest  (required)
     * @return ApiResponse&lt;CoreCourseGetUserNavigationOptions200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreCourseGetUserNavigationOptions200Response> coreCourseGetUserNavigationOptionsWithHttpInfo(CoreCourseGetUserNavigationOptionsRequest coreCourseGetUserNavigationOptionsRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCourseGetUserNavigationOptionsValidateBeforeCall(coreCourseGetUserNavigationOptionsRequest, null);
        Type localVarReturnType = new TypeToken<CoreCourseGetUserNavigationOptions200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a list of navigation options in a set of courses that are avaialable or not for the current user. (asynchronously)
     * Return a list of navigation options in a set of courses that are avaialable or not for the current user.
     * @param coreCourseGetUserNavigationOptionsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCourseGetUserNavigationOptionsAsync(CoreCourseGetUserNavigationOptionsRequest coreCourseGetUserNavigationOptionsRequest, final ApiCallback<CoreCourseGetUserNavigationOptions200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCourseGetUserNavigationOptionsValidateBeforeCall(coreCourseGetUserNavigationOptionsRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreCourseGetUserNavigationOptions200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCourseImportCourse
     * @param coreCourseImportCourseRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCourseImportCourseCall(CoreCourseImportCourseRequest coreCourseImportCourseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCourseImportCourseRequest;

        // create path and map variables
        String localVarPath = "/core_course_import_course";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCourseImportCourseValidateBeforeCall(CoreCourseImportCourseRequest coreCourseImportCourseRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCourseImportCourseRequest' is set
        if (coreCourseImportCourseRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCourseImportCourseRequest' when calling coreCourseImportCourse(Async)");
        }

        return coreCourseImportCourseCall(coreCourseImportCourseRequest, _callback);

    }

    /**
     * Import course data from a course into another course. Does not include any user data.
     * Import course data from a course into another course. Does not include any user data.
     * @param coreCourseImportCourseRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreCourseImportCourse(CoreCourseImportCourseRequest coreCourseImportCourseRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreCourseImportCourseWithHttpInfo(coreCourseImportCourseRequest);
        return localVarResp.getData();
    }

    /**
     * Import course data from a course into another course. Does not include any user data.
     * Import course data from a course into another course. Does not include any user data.
     * @param coreCourseImportCourseRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreCourseImportCourseWithHttpInfo(CoreCourseImportCourseRequest coreCourseImportCourseRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCourseImportCourseValidateBeforeCall(coreCourseImportCourseRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Import course data from a course into another course. Does not include any user data. (asynchronously)
     * Import course data from a course into another course. Does not include any user data.
     * @param coreCourseImportCourseRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCourseImportCourseAsync(CoreCourseImportCourseRequest coreCourseImportCourseRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCourseImportCourseValidateBeforeCall(coreCourseImportCourseRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCourseRemoveContentItemFromUserFavourites
     * @param coreCourseRemoveContentItemFromUserFavouritesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCourseRemoveContentItemFromUserFavouritesCall(CoreCourseRemoveContentItemFromUserFavouritesRequest coreCourseRemoveContentItemFromUserFavouritesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCourseRemoveContentItemFromUserFavouritesRequest;

        // create path and map variables
        String localVarPath = "/core_course_remove_content_item_from_user_favourites";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCourseRemoveContentItemFromUserFavouritesValidateBeforeCall(CoreCourseRemoveContentItemFromUserFavouritesRequest coreCourseRemoveContentItemFromUserFavouritesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCourseRemoveContentItemFromUserFavouritesRequest' is set
        if (coreCourseRemoveContentItemFromUserFavouritesRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCourseRemoveContentItemFromUserFavouritesRequest' when calling coreCourseRemoveContentItemFromUserFavourites(Async)");
        }

        return coreCourseRemoveContentItemFromUserFavouritesCall(coreCourseRemoveContentItemFromUserFavouritesRequest, _callback);

    }

    /**
     * Removes a content item (activity, resource or their subtypes) from the favourites for the user.
     * Removes a content item (activity, resource or their subtypes) from the favourites for the user.
     * @param coreCourseRemoveContentItemFromUserFavouritesRequest  (required)
     * @return CoreCourseAddContentItemToUserFavourites200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreCourseAddContentItemToUserFavourites200Response coreCourseRemoveContentItemFromUserFavourites(CoreCourseRemoveContentItemFromUserFavouritesRequest coreCourseRemoveContentItemFromUserFavouritesRequest) throws ApiException {
        ApiResponse<CoreCourseAddContentItemToUserFavourites200Response> localVarResp = coreCourseRemoveContentItemFromUserFavouritesWithHttpInfo(coreCourseRemoveContentItemFromUserFavouritesRequest);
        return localVarResp.getData();
    }

    /**
     * Removes a content item (activity, resource or their subtypes) from the favourites for the user.
     * Removes a content item (activity, resource or their subtypes) from the favourites for the user.
     * @param coreCourseRemoveContentItemFromUserFavouritesRequest  (required)
     * @return ApiResponse&lt;CoreCourseAddContentItemToUserFavourites200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreCourseAddContentItemToUserFavourites200Response> coreCourseRemoveContentItemFromUserFavouritesWithHttpInfo(CoreCourseRemoveContentItemFromUserFavouritesRequest coreCourseRemoveContentItemFromUserFavouritesRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCourseRemoveContentItemFromUserFavouritesValidateBeforeCall(coreCourseRemoveContentItemFromUserFavouritesRequest, null);
        Type localVarReturnType = new TypeToken<CoreCourseAddContentItemToUserFavourites200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Removes a content item (activity, resource or their subtypes) from the favourites for the user. (asynchronously)
     * Removes a content item (activity, resource or their subtypes) from the favourites for the user.
     * @param coreCourseRemoveContentItemFromUserFavouritesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCourseRemoveContentItemFromUserFavouritesAsync(CoreCourseRemoveContentItemFromUserFavouritesRequest coreCourseRemoveContentItemFromUserFavouritesRequest, final ApiCallback<CoreCourseAddContentItemToUserFavourites200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCourseRemoveContentItemFromUserFavouritesValidateBeforeCall(coreCourseRemoveContentItemFromUserFavouritesRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreCourseAddContentItemToUserFavourites200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCourseSearchCourses
     * @param coreCourseSearchCoursesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCourseSearchCoursesCall(CoreCourseSearchCoursesRequest coreCourseSearchCoursesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCourseSearchCoursesRequest;

        // create path and map variables
        String localVarPath = "/core_course_search_courses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCourseSearchCoursesValidateBeforeCall(CoreCourseSearchCoursesRequest coreCourseSearchCoursesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCourseSearchCoursesRequest' is set
        if (coreCourseSearchCoursesRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCourseSearchCoursesRequest' when calling coreCourseSearchCourses(Async)");
        }

        return coreCourseSearchCoursesCall(coreCourseSearchCoursesRequest, _callback);

    }

    /**
     * Search courses by (name, module, block, tag)
     * Search courses by (name, module, block, tag)
     * @param coreCourseSearchCoursesRequest  (required)
     * @return CoreCourseSearchCourses200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreCourseSearchCourses200Response coreCourseSearchCourses(CoreCourseSearchCoursesRequest coreCourseSearchCoursesRequest) throws ApiException {
        ApiResponse<CoreCourseSearchCourses200Response> localVarResp = coreCourseSearchCoursesWithHttpInfo(coreCourseSearchCoursesRequest);
        return localVarResp.getData();
    }

    /**
     * Search courses by (name, module, block, tag)
     * Search courses by (name, module, block, tag)
     * @param coreCourseSearchCoursesRequest  (required)
     * @return ApiResponse&lt;CoreCourseSearchCourses200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreCourseSearchCourses200Response> coreCourseSearchCoursesWithHttpInfo(CoreCourseSearchCoursesRequest coreCourseSearchCoursesRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCourseSearchCoursesValidateBeforeCall(coreCourseSearchCoursesRequest, null);
        Type localVarReturnType = new TypeToken<CoreCourseSearchCourses200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search courses by (name, module, block, tag) (asynchronously)
     * Search courses by (name, module, block, tag)
     * @param coreCourseSearchCoursesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCourseSearchCoursesAsync(CoreCourseSearchCoursesRequest coreCourseSearchCoursesRequest, final ApiCallback<CoreCourseSearchCourses200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCourseSearchCoursesValidateBeforeCall(coreCourseSearchCoursesRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreCourseSearchCourses200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCourseSetFavouriteCourses
     * @param coreCourseSetFavouriteCoursesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCourseSetFavouriteCoursesCall(CoreCourseSetFavouriteCoursesRequest coreCourseSetFavouriteCoursesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCourseSetFavouriteCoursesRequest;

        // create path and map variables
        String localVarPath = "/core_course_set_favourite_courses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCourseSetFavouriteCoursesValidateBeforeCall(CoreCourseSetFavouriteCoursesRequest coreCourseSetFavouriteCoursesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCourseSetFavouriteCoursesRequest' is set
        if (coreCourseSetFavouriteCoursesRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCourseSetFavouriteCoursesRequest' when calling coreCourseSetFavouriteCourses(Async)");
        }

        return coreCourseSetFavouriteCoursesCall(coreCourseSetFavouriteCoursesRequest, _callback);

    }

    /**
     * Add a list of courses to the list of favourite courses.
     * Add a list of courses to the list of favourite courses.
     * @param coreCourseSetFavouriteCoursesRequest  (required)
     * @return CoreCohortAddCohortMembers200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreCohortAddCohortMembers200Response coreCourseSetFavouriteCourses(CoreCourseSetFavouriteCoursesRequest coreCourseSetFavouriteCoursesRequest) throws ApiException {
        ApiResponse<CoreCohortAddCohortMembers200Response> localVarResp = coreCourseSetFavouriteCoursesWithHttpInfo(coreCourseSetFavouriteCoursesRequest);
        return localVarResp.getData();
    }

    /**
     * Add a list of courses to the list of favourite courses.
     * Add a list of courses to the list of favourite courses.
     * @param coreCourseSetFavouriteCoursesRequest  (required)
     * @return ApiResponse&lt;CoreCohortAddCohortMembers200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreCohortAddCohortMembers200Response> coreCourseSetFavouriteCoursesWithHttpInfo(CoreCourseSetFavouriteCoursesRequest coreCourseSetFavouriteCoursesRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCourseSetFavouriteCoursesValidateBeforeCall(coreCourseSetFavouriteCoursesRequest, null);
        Type localVarReturnType = new TypeToken<CoreCohortAddCohortMembers200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a list of courses to the list of favourite courses. (asynchronously)
     * Add a list of courses to the list of favourite courses.
     * @param coreCourseSetFavouriteCoursesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCourseSetFavouriteCoursesAsync(CoreCourseSetFavouriteCoursesRequest coreCourseSetFavouriteCoursesRequest, final ApiCallback<CoreCohortAddCohortMembers200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCourseSetFavouriteCoursesValidateBeforeCall(coreCourseSetFavouriteCoursesRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreCohortAddCohortMembers200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCourseToggleActivityRecommendation
     * @param coreCourseToggleActivityRecommendationRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCourseToggleActivityRecommendationCall(CoreCourseToggleActivityRecommendationRequest coreCourseToggleActivityRecommendationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCourseToggleActivityRecommendationRequest;

        // create path and map variables
        String localVarPath = "/core_course_toggle_activity_recommendation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCourseToggleActivityRecommendationValidateBeforeCall(CoreCourseToggleActivityRecommendationRequest coreCourseToggleActivityRecommendationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCourseToggleActivityRecommendationRequest' is set
        if (coreCourseToggleActivityRecommendationRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCourseToggleActivityRecommendationRequest' when calling coreCourseToggleActivityRecommendation(Async)");
        }

        return coreCourseToggleActivityRecommendationCall(coreCourseToggleActivityRecommendationRequest, _callback);

    }

    /**
     * Adds or removes an activity as a recommendation in the activity chooser.
     * Adds or removes an activity as a recommendation in the activity chooser.
     * @param coreCourseToggleActivityRecommendationRequest  (required)
     * @return CoreCourseToggleActivityRecommendation200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreCourseToggleActivityRecommendation200Response coreCourseToggleActivityRecommendation(CoreCourseToggleActivityRecommendationRequest coreCourseToggleActivityRecommendationRequest) throws ApiException {
        ApiResponse<CoreCourseToggleActivityRecommendation200Response> localVarResp = coreCourseToggleActivityRecommendationWithHttpInfo(coreCourseToggleActivityRecommendationRequest);
        return localVarResp.getData();
    }

    /**
     * Adds or removes an activity as a recommendation in the activity chooser.
     * Adds or removes an activity as a recommendation in the activity chooser.
     * @param coreCourseToggleActivityRecommendationRequest  (required)
     * @return ApiResponse&lt;CoreCourseToggleActivityRecommendation200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreCourseToggleActivityRecommendation200Response> coreCourseToggleActivityRecommendationWithHttpInfo(CoreCourseToggleActivityRecommendationRequest coreCourseToggleActivityRecommendationRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCourseToggleActivityRecommendationValidateBeforeCall(coreCourseToggleActivityRecommendationRequest, null);
        Type localVarReturnType = new TypeToken<CoreCourseToggleActivityRecommendation200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Adds or removes an activity as a recommendation in the activity chooser. (asynchronously)
     * Adds or removes an activity as a recommendation in the activity chooser.
     * @param coreCourseToggleActivityRecommendationRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCourseToggleActivityRecommendationAsync(CoreCourseToggleActivityRecommendationRequest coreCourseToggleActivityRecommendationRequest, final ApiCallback<CoreCourseToggleActivityRecommendation200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCourseToggleActivityRecommendationValidateBeforeCall(coreCourseToggleActivityRecommendationRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreCourseToggleActivityRecommendation200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCourseUpdateCategories
     * @param coreCourseUpdateCategoriesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCourseUpdateCategoriesCall(CoreCourseUpdateCategoriesRequest coreCourseUpdateCategoriesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCourseUpdateCategoriesRequest;

        // create path and map variables
        String localVarPath = "/core_course_update_categories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCourseUpdateCategoriesValidateBeforeCall(CoreCourseUpdateCategoriesRequest coreCourseUpdateCategoriesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCourseUpdateCategoriesRequest' is set
        if (coreCourseUpdateCategoriesRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCourseUpdateCategoriesRequest' when calling coreCourseUpdateCategories(Async)");
        }

        return coreCourseUpdateCategoriesCall(coreCourseUpdateCategoriesRequest, _callback);

    }

    /**
     * Update categories
     * Update categories
     * @param coreCourseUpdateCategoriesRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreCourseUpdateCategories(CoreCourseUpdateCategoriesRequest coreCourseUpdateCategoriesRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreCourseUpdateCategoriesWithHttpInfo(coreCourseUpdateCategoriesRequest);
        return localVarResp.getData();
    }

    /**
     * Update categories
     * Update categories
     * @param coreCourseUpdateCategoriesRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreCourseUpdateCategoriesWithHttpInfo(CoreCourseUpdateCategoriesRequest coreCourseUpdateCategoriesRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCourseUpdateCategoriesValidateBeforeCall(coreCourseUpdateCategoriesRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update categories (asynchronously)
     * Update categories
     * @param coreCourseUpdateCategoriesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCourseUpdateCategoriesAsync(CoreCourseUpdateCategoriesRequest coreCourseUpdateCategoriesRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCourseUpdateCategoriesValidateBeforeCall(coreCourseUpdateCategoriesRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCourseUpdateCourses
     * @param coreCourseUpdateCoursesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCourseUpdateCoursesCall(CoreCourseUpdateCoursesRequest coreCourseUpdateCoursesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCourseUpdateCoursesRequest;

        // create path and map variables
        String localVarPath = "/core_course_update_courses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCourseUpdateCoursesValidateBeforeCall(CoreCourseUpdateCoursesRequest coreCourseUpdateCoursesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCourseUpdateCoursesRequest' is set
        if (coreCourseUpdateCoursesRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCourseUpdateCoursesRequest' when calling coreCourseUpdateCourses(Async)");
        }

        return coreCourseUpdateCoursesCall(coreCourseUpdateCoursesRequest, _callback);

    }

    /**
     * Update courses
     * Update courses
     * @param coreCourseUpdateCoursesRequest  (required)
     * @return CoreCohortAddCohortMembers200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreCohortAddCohortMembers200Response coreCourseUpdateCourses(CoreCourseUpdateCoursesRequest coreCourseUpdateCoursesRequest) throws ApiException {
        ApiResponse<CoreCohortAddCohortMembers200Response> localVarResp = coreCourseUpdateCoursesWithHttpInfo(coreCourseUpdateCoursesRequest);
        return localVarResp.getData();
    }

    /**
     * Update courses
     * Update courses
     * @param coreCourseUpdateCoursesRequest  (required)
     * @return ApiResponse&lt;CoreCohortAddCohortMembers200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreCohortAddCohortMembers200Response> coreCourseUpdateCoursesWithHttpInfo(CoreCourseUpdateCoursesRequest coreCourseUpdateCoursesRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCourseUpdateCoursesValidateBeforeCall(coreCourseUpdateCoursesRequest, null);
        Type localVarReturnType = new TypeToken<CoreCohortAddCohortMembers200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update courses (asynchronously)
     * Update courses
     * @param coreCourseUpdateCoursesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCourseUpdateCoursesAsync(CoreCourseUpdateCoursesRequest coreCourseUpdateCoursesRequest, final ApiCallback<CoreCohortAddCohortMembers200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCourseUpdateCoursesValidateBeforeCall(coreCourseUpdateCoursesRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreCohortAddCohortMembers200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCourseViewCourse
     * @param coreCourseViewCourseRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCourseViewCourseCall(CoreCourseViewCourseRequest coreCourseViewCourseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCourseViewCourseRequest;

        // create path and map variables
        String localVarPath = "/core_course_view_course";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCourseViewCourseValidateBeforeCall(CoreCourseViewCourseRequest coreCourseViewCourseRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCourseViewCourseRequest' is set
        if (coreCourseViewCourseRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCourseViewCourseRequest' when calling coreCourseViewCourse(Async)");
        }

        return coreCourseViewCourseCall(coreCourseViewCourseRequest, _callback);

    }

    /**
     * Log that the course was viewed
     * Log that the course was viewed
     * @param coreCourseViewCourseRequest  (required)
     * @return CoreCalendarDeleteSubscription200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreCalendarDeleteSubscription200Response coreCourseViewCourse(CoreCourseViewCourseRequest coreCourseViewCourseRequest) throws ApiException {
        ApiResponse<CoreCalendarDeleteSubscription200Response> localVarResp = coreCourseViewCourseWithHttpInfo(coreCourseViewCourseRequest);
        return localVarResp.getData();
    }

    /**
     * Log that the course was viewed
     * Log that the course was viewed
     * @param coreCourseViewCourseRequest  (required)
     * @return ApiResponse&lt;CoreCalendarDeleteSubscription200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreCalendarDeleteSubscription200Response> coreCourseViewCourseWithHttpInfo(CoreCourseViewCourseRequest coreCourseViewCourseRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCourseViewCourseValidateBeforeCall(coreCourseViewCourseRequest, null);
        Type localVarReturnType = new TypeToken<CoreCalendarDeleteSubscription200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Log that the course was viewed (asynchronously)
     * Log that the course was viewed
     * @param coreCourseViewCourseRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCourseViewCourseAsync(CoreCourseViewCourseRequest coreCourseViewCourseRequest, final ApiCallback<CoreCalendarDeleteSubscription200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCourseViewCourseValidateBeforeCall(coreCourseViewCourseRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreCalendarDeleteSubscription200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCourseformatFileHandlers
     * @param coreCourseformatFileHandlersRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCourseformatFileHandlersCall(CoreCourseformatFileHandlersRequest coreCourseformatFileHandlersRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCourseformatFileHandlersRequest;

        // create path and map variables
        String localVarPath = "/core_courseformat_file_handlers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCourseformatFileHandlersValidateBeforeCall(CoreCourseformatFileHandlersRequest coreCourseformatFileHandlersRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCourseformatFileHandlersRequest' is set
        if (coreCourseformatFileHandlersRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCourseformatFileHandlersRequest' when calling coreCourseformatFileHandlers(Async)");
        }

        return coreCourseformatFileHandlersCall(coreCourseformatFileHandlersRequest, _callback);

    }

    /**
     * Get the current course file hanlders.
     * Get the current course file hanlders.
     * @param coreCourseformatFileHandlersRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreCourseformatFileHandlers(CoreCourseformatFileHandlersRequest coreCourseformatFileHandlersRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreCourseformatFileHandlersWithHttpInfo(coreCourseformatFileHandlersRequest);
        return localVarResp.getData();
    }

    /**
     * Get the current course file hanlders.
     * Get the current course file hanlders.
     * @param coreCourseformatFileHandlersRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreCourseformatFileHandlersWithHttpInfo(CoreCourseformatFileHandlersRequest coreCourseformatFileHandlersRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCourseformatFileHandlersValidateBeforeCall(coreCourseformatFileHandlersRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the current course file hanlders. (asynchronously)
     * Get the current course file hanlders.
     * @param coreCourseformatFileHandlersRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCourseformatFileHandlersAsync(CoreCourseformatFileHandlersRequest coreCourseformatFileHandlersRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCourseformatFileHandlersValidateBeforeCall(coreCourseformatFileHandlersRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCourseformatGetState
     * @param coreCourseformatFileHandlersRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Encoded course state JSON </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCourseformatGetStateCall(CoreCourseformatFileHandlersRequest coreCourseformatFileHandlersRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCourseformatFileHandlersRequest;

        // create path and map variables
        String localVarPath = "/core_courseformat_get_state";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCourseformatGetStateValidateBeforeCall(CoreCourseformatFileHandlersRequest coreCourseformatFileHandlersRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCourseformatFileHandlersRequest' is set
        if (coreCourseformatFileHandlersRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCourseformatFileHandlersRequest' when calling coreCourseformatGetState(Async)");
        }

        return coreCourseformatGetStateCall(coreCourseformatFileHandlersRequest, _callback);

    }

    /**
     * Get the current course state.
     * Get the current course state.
     * @param coreCourseformatFileHandlersRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Encoded course state JSON </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreCourseformatGetState(CoreCourseformatFileHandlersRequest coreCourseformatFileHandlersRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreCourseformatGetStateWithHttpInfo(coreCourseformatFileHandlersRequest);
        return localVarResp.getData();
    }

    /**
     * Get the current course state.
     * Get the current course state.
     * @param coreCourseformatFileHandlersRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Encoded course state JSON </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreCourseformatGetStateWithHttpInfo(CoreCourseformatFileHandlersRequest coreCourseformatFileHandlersRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCourseformatGetStateValidateBeforeCall(coreCourseformatFileHandlersRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the current course state. (asynchronously)
     * Get the current course state.
     * @param coreCourseformatFileHandlersRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Encoded course state JSON </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCourseformatGetStateAsync(CoreCourseformatFileHandlersRequest coreCourseformatFileHandlersRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCourseformatGetStateValidateBeforeCall(coreCourseformatFileHandlersRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCourseformatUpdateCourse
     * @param coreCourseformatUpdateCourseRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Encoded course update JSON </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCourseformatUpdateCourseCall(CoreCourseformatUpdateCourseRequest coreCourseformatUpdateCourseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCourseformatUpdateCourseRequest;

        // create path and map variables
        String localVarPath = "/core_courseformat_update_course";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCourseformatUpdateCourseValidateBeforeCall(CoreCourseformatUpdateCourseRequest coreCourseformatUpdateCourseRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCourseformatUpdateCourseRequest' is set
        if (coreCourseformatUpdateCourseRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCourseformatUpdateCourseRequest' when calling coreCourseformatUpdateCourse(Async)");
        }

        return coreCourseformatUpdateCourseCall(coreCourseformatUpdateCourseRequest, _callback);

    }

    /**
     * Update course contents.
     * Update course contents.
     * @param coreCourseformatUpdateCourseRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Encoded course update JSON </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreCourseformatUpdateCourse(CoreCourseformatUpdateCourseRequest coreCourseformatUpdateCourseRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreCourseformatUpdateCourseWithHttpInfo(coreCourseformatUpdateCourseRequest);
        return localVarResp.getData();
    }

    /**
     * Update course contents.
     * Update course contents.
     * @param coreCourseformatUpdateCourseRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Encoded course update JSON </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreCourseformatUpdateCourseWithHttpInfo(CoreCourseformatUpdateCourseRequest coreCourseformatUpdateCourseRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCourseformatUpdateCourseValidateBeforeCall(coreCourseformatUpdateCourseRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update course contents. (asynchronously)
     * Update course contents.
     * @param coreCourseformatUpdateCourseRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Encoded course update JSON </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCourseformatUpdateCourseAsync(CoreCourseformatUpdateCourseRequest coreCourseformatUpdateCourseRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCourseformatUpdateCourseValidateBeforeCall(coreCourseformatUpdateCourseRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCreateUserfeedbackActionRecord
     * @param coreCreateUserfeedbackActionRecordRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCreateUserfeedbackActionRecordCall(CoreCreateUserfeedbackActionRecordRequest coreCreateUserfeedbackActionRecordRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCreateUserfeedbackActionRecordRequest;

        // create path and map variables
        String localVarPath = "/core_create_userfeedback_action_record";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCreateUserfeedbackActionRecordValidateBeforeCall(CoreCreateUserfeedbackActionRecordRequest coreCreateUserfeedbackActionRecordRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCreateUserfeedbackActionRecordRequest' is set
        if (coreCreateUserfeedbackActionRecordRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCreateUserfeedbackActionRecordRequest' when calling coreCreateUserfeedbackActionRecord(Async)");
        }

        return coreCreateUserfeedbackActionRecordCall(coreCreateUserfeedbackActionRecordRequest, _callback);

    }

    /**
     * Record the action that the user takes in the user feedback notification for future use.
     * Record the action that the user takes in the user feedback notification for future use.
     * @param coreCreateUserfeedbackActionRecordRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreCreateUserfeedbackActionRecord(CoreCreateUserfeedbackActionRecordRequest coreCreateUserfeedbackActionRecordRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreCreateUserfeedbackActionRecordWithHttpInfo(coreCreateUserfeedbackActionRecordRequest);
        return localVarResp.getData();
    }

    /**
     * Record the action that the user takes in the user feedback notification for future use.
     * Record the action that the user takes in the user feedback notification for future use.
     * @param coreCreateUserfeedbackActionRecordRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreCreateUserfeedbackActionRecordWithHttpInfo(CoreCreateUserfeedbackActionRecordRequest coreCreateUserfeedbackActionRecordRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCreateUserfeedbackActionRecordValidateBeforeCall(coreCreateUserfeedbackActionRecordRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Record the action that the user takes in the user feedback notification for future use. (asynchronously)
     * Record the action that the user takes in the user feedback notification for future use.
     * @param coreCreateUserfeedbackActionRecordRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCreateUserfeedbackActionRecordAsync(CoreCreateUserfeedbackActionRecordRequest coreCreateUserfeedbackActionRecordRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCreateUserfeedbackActionRecordValidateBeforeCall(coreCreateUserfeedbackActionRecordRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCustomfieldCreateCategory
     * @param coreCustomfieldCreateCategoryRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Id of the category </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCustomfieldCreateCategoryCall(CoreCustomfieldCreateCategoryRequest coreCustomfieldCreateCategoryRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCustomfieldCreateCategoryRequest;

        // create path and map variables
        String localVarPath = "/core_customfield_create_category";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCustomfieldCreateCategoryValidateBeforeCall(CoreCustomfieldCreateCategoryRequest coreCustomfieldCreateCategoryRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCustomfieldCreateCategoryRequest' is set
        if (coreCustomfieldCreateCategoryRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCustomfieldCreateCategoryRequest' when calling coreCustomfieldCreateCategory(Async)");
        }

        return coreCustomfieldCreateCategoryCall(coreCustomfieldCreateCategoryRequest, _callback);

    }

    /**
     * Creates a new category
     * Creates a new category
     * @param coreCustomfieldCreateCategoryRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Id of the category </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreCustomfieldCreateCategory(CoreCustomfieldCreateCategoryRequest coreCustomfieldCreateCategoryRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreCustomfieldCreateCategoryWithHttpInfo(coreCustomfieldCreateCategoryRequest);
        return localVarResp.getData();
    }

    /**
     * Creates a new category
     * Creates a new category
     * @param coreCustomfieldCreateCategoryRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Id of the category </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreCustomfieldCreateCategoryWithHttpInfo(CoreCustomfieldCreateCategoryRequest coreCustomfieldCreateCategoryRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCustomfieldCreateCategoryValidateBeforeCall(coreCustomfieldCreateCategoryRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a new category (asynchronously)
     * Creates a new category
     * @param coreCustomfieldCreateCategoryRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Id of the category </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCustomfieldCreateCategoryAsync(CoreCustomfieldCreateCategoryRequest coreCustomfieldCreateCategoryRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCustomfieldCreateCategoryValidateBeforeCall(coreCustomfieldCreateCategoryRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCustomfieldDeleteCategory
     * @param coreCustomfieldDeleteCategoryRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCustomfieldDeleteCategoryCall(CoreCustomfieldDeleteCategoryRequest coreCustomfieldDeleteCategoryRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCustomfieldDeleteCategoryRequest;

        // create path and map variables
        String localVarPath = "/core_customfield_delete_category";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCustomfieldDeleteCategoryValidateBeforeCall(CoreCustomfieldDeleteCategoryRequest coreCustomfieldDeleteCategoryRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCustomfieldDeleteCategoryRequest' is set
        if (coreCustomfieldDeleteCategoryRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCustomfieldDeleteCategoryRequest' when calling coreCustomfieldDeleteCategory(Async)");
        }

        return coreCustomfieldDeleteCategoryCall(coreCustomfieldDeleteCategoryRequest, _callback);

    }

    /**
     * Deletes a category
     * Deletes a category
     * @param coreCustomfieldDeleteCategoryRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreCustomfieldDeleteCategory(CoreCustomfieldDeleteCategoryRequest coreCustomfieldDeleteCategoryRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreCustomfieldDeleteCategoryWithHttpInfo(coreCustomfieldDeleteCategoryRequest);
        return localVarResp.getData();
    }

    /**
     * Deletes a category
     * Deletes a category
     * @param coreCustomfieldDeleteCategoryRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreCustomfieldDeleteCategoryWithHttpInfo(CoreCustomfieldDeleteCategoryRequest coreCustomfieldDeleteCategoryRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCustomfieldDeleteCategoryValidateBeforeCall(coreCustomfieldDeleteCategoryRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deletes a category (asynchronously)
     * Deletes a category
     * @param coreCustomfieldDeleteCategoryRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCustomfieldDeleteCategoryAsync(CoreCustomfieldDeleteCategoryRequest coreCustomfieldDeleteCategoryRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCustomfieldDeleteCategoryValidateBeforeCall(coreCustomfieldDeleteCategoryRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCustomfieldDeleteField
     * @param coreCustomfieldDeleteFieldRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCustomfieldDeleteFieldCall(CoreCustomfieldDeleteFieldRequest coreCustomfieldDeleteFieldRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCustomfieldDeleteFieldRequest;

        // create path and map variables
        String localVarPath = "/core_customfield_delete_field";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCustomfieldDeleteFieldValidateBeforeCall(CoreCustomfieldDeleteFieldRequest coreCustomfieldDeleteFieldRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCustomfieldDeleteFieldRequest' is set
        if (coreCustomfieldDeleteFieldRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCustomfieldDeleteFieldRequest' when calling coreCustomfieldDeleteField(Async)");
        }

        return coreCustomfieldDeleteFieldCall(coreCustomfieldDeleteFieldRequest, _callback);

    }

    /**
     * Deletes an entry
     * Deletes an entry
     * @param coreCustomfieldDeleteFieldRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreCustomfieldDeleteField(CoreCustomfieldDeleteFieldRequest coreCustomfieldDeleteFieldRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreCustomfieldDeleteFieldWithHttpInfo(coreCustomfieldDeleteFieldRequest);
        return localVarResp.getData();
    }

    /**
     * Deletes an entry
     * Deletes an entry
     * @param coreCustomfieldDeleteFieldRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreCustomfieldDeleteFieldWithHttpInfo(CoreCustomfieldDeleteFieldRequest coreCustomfieldDeleteFieldRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCustomfieldDeleteFieldValidateBeforeCall(coreCustomfieldDeleteFieldRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deletes an entry (asynchronously)
     * Deletes an entry
     * @param coreCustomfieldDeleteFieldRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCustomfieldDeleteFieldAsync(CoreCustomfieldDeleteFieldRequest coreCustomfieldDeleteFieldRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCustomfieldDeleteFieldValidateBeforeCall(coreCustomfieldDeleteFieldRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCustomfieldMoveCategory
     * @param coreCustomfieldMoveCategoryRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCustomfieldMoveCategoryCall(CoreCustomfieldMoveCategoryRequest coreCustomfieldMoveCategoryRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCustomfieldMoveCategoryRequest;

        // create path and map variables
        String localVarPath = "/core_customfield_move_category";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCustomfieldMoveCategoryValidateBeforeCall(CoreCustomfieldMoveCategoryRequest coreCustomfieldMoveCategoryRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCustomfieldMoveCategoryRequest' is set
        if (coreCustomfieldMoveCategoryRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCustomfieldMoveCategoryRequest' when calling coreCustomfieldMoveCategory(Async)");
        }

        return coreCustomfieldMoveCategoryCall(coreCustomfieldMoveCategoryRequest, _callback);

    }

    /**
     * Drag and drop categories
     * Drag and drop categories
     * @param coreCustomfieldMoveCategoryRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreCustomfieldMoveCategory(CoreCustomfieldMoveCategoryRequest coreCustomfieldMoveCategoryRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreCustomfieldMoveCategoryWithHttpInfo(coreCustomfieldMoveCategoryRequest);
        return localVarResp.getData();
    }

    /**
     * Drag and drop categories
     * Drag and drop categories
     * @param coreCustomfieldMoveCategoryRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreCustomfieldMoveCategoryWithHttpInfo(CoreCustomfieldMoveCategoryRequest coreCustomfieldMoveCategoryRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCustomfieldMoveCategoryValidateBeforeCall(coreCustomfieldMoveCategoryRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Drag and drop categories (asynchronously)
     * Drag and drop categories
     * @param coreCustomfieldMoveCategoryRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCustomfieldMoveCategoryAsync(CoreCustomfieldMoveCategoryRequest coreCustomfieldMoveCategoryRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCustomfieldMoveCategoryValidateBeforeCall(coreCustomfieldMoveCategoryRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCustomfieldMoveField
     * @param coreCustomfieldMoveFieldRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCustomfieldMoveFieldCall(CoreCustomfieldMoveFieldRequest coreCustomfieldMoveFieldRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCustomfieldMoveFieldRequest;

        // create path and map variables
        String localVarPath = "/core_customfield_move_field";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCustomfieldMoveFieldValidateBeforeCall(CoreCustomfieldMoveFieldRequest coreCustomfieldMoveFieldRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCustomfieldMoveFieldRequest' is set
        if (coreCustomfieldMoveFieldRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCustomfieldMoveFieldRequest' when calling coreCustomfieldMoveField(Async)");
        }

        return coreCustomfieldMoveFieldCall(coreCustomfieldMoveFieldRequest, _callback);

    }

    /**
     * Drag and drop
     * Drag and drop
     * @param coreCustomfieldMoveFieldRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreCustomfieldMoveField(CoreCustomfieldMoveFieldRequest coreCustomfieldMoveFieldRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreCustomfieldMoveFieldWithHttpInfo(coreCustomfieldMoveFieldRequest);
        return localVarResp.getData();
    }

    /**
     * Drag and drop
     * Drag and drop
     * @param coreCustomfieldMoveFieldRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreCustomfieldMoveFieldWithHttpInfo(CoreCustomfieldMoveFieldRequest coreCustomfieldMoveFieldRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCustomfieldMoveFieldValidateBeforeCall(coreCustomfieldMoveFieldRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Drag and drop (asynchronously)
     * Drag and drop
     * @param coreCustomfieldMoveFieldRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCustomfieldMoveFieldAsync(CoreCustomfieldMoveFieldRequest coreCustomfieldMoveFieldRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCustomfieldMoveFieldValidateBeforeCall(coreCustomfieldMoveFieldRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreCustomfieldReloadTemplate
     * @param coreCustomfieldReloadTemplateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCustomfieldReloadTemplateCall(CoreCustomfieldReloadTemplateRequest coreCustomfieldReloadTemplateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCustomfieldReloadTemplateRequest;

        // create path and map variables
        String localVarPath = "/core_customfield_reload_template";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreCustomfieldReloadTemplateValidateBeforeCall(CoreCustomfieldReloadTemplateRequest coreCustomfieldReloadTemplateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCustomfieldReloadTemplateRequest' is set
        if (coreCustomfieldReloadTemplateRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCustomfieldReloadTemplateRequest' when calling coreCustomfieldReloadTemplate(Async)");
        }

        return coreCustomfieldReloadTemplateCall(coreCustomfieldReloadTemplateRequest, _callback);

    }

    /**
     * Reloads template
     * Reloads template
     * @param coreCustomfieldReloadTemplateRequest  (required)
     * @return CoreCustomfieldReloadTemplate200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreCustomfieldReloadTemplate200Response coreCustomfieldReloadTemplate(CoreCustomfieldReloadTemplateRequest coreCustomfieldReloadTemplateRequest) throws ApiException {
        ApiResponse<CoreCustomfieldReloadTemplate200Response> localVarResp = coreCustomfieldReloadTemplateWithHttpInfo(coreCustomfieldReloadTemplateRequest);
        return localVarResp.getData();
    }

    /**
     * Reloads template
     * Reloads template
     * @param coreCustomfieldReloadTemplateRequest  (required)
     * @return ApiResponse&lt;CoreCustomfieldReloadTemplate200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreCustomfieldReloadTemplate200Response> coreCustomfieldReloadTemplateWithHttpInfo(CoreCustomfieldReloadTemplateRequest coreCustomfieldReloadTemplateRequest) throws ApiException {
        okhttp3.Call localVarCall = coreCustomfieldReloadTemplateValidateBeforeCall(coreCustomfieldReloadTemplateRequest, null);
        Type localVarReturnType = new TypeToken<CoreCustomfieldReloadTemplate200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Reloads template (asynchronously)
     * Reloads template
     * @param coreCustomfieldReloadTemplateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreCustomfieldReloadTemplateAsync(CoreCustomfieldReloadTemplateRequest coreCustomfieldReloadTemplateRequest, final ApiCallback<CoreCustomfieldReloadTemplate200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreCustomfieldReloadTemplateValidateBeforeCall(coreCustomfieldReloadTemplateRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreCustomfieldReloadTemplate200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreDynamicTabsGetContent
     * @param coreDynamicTabsGetContentRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreDynamicTabsGetContentCall(CoreDynamicTabsGetContentRequest coreDynamicTabsGetContentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreDynamicTabsGetContentRequest;

        // create path and map variables
        String localVarPath = "/core_dynamic_tabs_get_content";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreDynamicTabsGetContentValidateBeforeCall(CoreDynamicTabsGetContentRequest coreDynamicTabsGetContentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreDynamicTabsGetContentRequest' is set
        if (coreDynamicTabsGetContentRequest == null) {
            throw new ApiException("Missing the required parameter 'coreDynamicTabsGetContentRequest' when calling coreDynamicTabsGetContent(Async)");
        }

        return coreDynamicTabsGetContentCall(coreDynamicTabsGetContentRequest, _callback);

    }

    /**
     * Returns the content for a dynamic tab
     * Returns the content for a dynamic tab
     * @param coreDynamicTabsGetContentRequest  (required)
     * @return CoreDynamicTabsGetContent200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreDynamicTabsGetContent200Response coreDynamicTabsGetContent(CoreDynamicTabsGetContentRequest coreDynamicTabsGetContentRequest) throws ApiException {
        ApiResponse<CoreDynamicTabsGetContent200Response> localVarResp = coreDynamicTabsGetContentWithHttpInfo(coreDynamicTabsGetContentRequest);
        return localVarResp.getData();
    }

    /**
     * Returns the content for a dynamic tab
     * Returns the content for a dynamic tab
     * @param coreDynamicTabsGetContentRequest  (required)
     * @return ApiResponse&lt;CoreDynamicTabsGetContent200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreDynamicTabsGetContent200Response> coreDynamicTabsGetContentWithHttpInfo(CoreDynamicTabsGetContentRequest coreDynamicTabsGetContentRequest) throws ApiException {
        okhttp3.Call localVarCall = coreDynamicTabsGetContentValidateBeforeCall(coreDynamicTabsGetContentRequest, null);
        Type localVarReturnType = new TypeToken<CoreDynamicTabsGetContent200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the content for a dynamic tab (asynchronously)
     * Returns the content for a dynamic tab
     * @param coreDynamicTabsGetContentRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreDynamicTabsGetContentAsync(CoreDynamicTabsGetContentRequest coreDynamicTabsGetContentRequest, final ApiCallback<CoreDynamicTabsGetContent200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreDynamicTabsGetContentValidateBeforeCall(coreDynamicTabsGetContentRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreDynamicTabsGetContent200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreEnrolGetCourseEnrolmentMethods
     * @param coreEnrolGetCourseEnrolmentMethodsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreEnrolGetCourseEnrolmentMethodsCall(CoreEnrolGetCourseEnrolmentMethodsRequest coreEnrolGetCourseEnrolmentMethodsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreEnrolGetCourseEnrolmentMethodsRequest;

        // create path and map variables
        String localVarPath = "/core_enrol_get_course_enrolment_methods";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreEnrolGetCourseEnrolmentMethodsValidateBeforeCall(CoreEnrolGetCourseEnrolmentMethodsRequest coreEnrolGetCourseEnrolmentMethodsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreEnrolGetCourseEnrolmentMethodsRequest' is set
        if (coreEnrolGetCourseEnrolmentMethodsRequest == null) {
            throw new ApiException("Missing the required parameter 'coreEnrolGetCourseEnrolmentMethodsRequest' when calling coreEnrolGetCourseEnrolmentMethods(Async)");
        }

        return coreEnrolGetCourseEnrolmentMethodsCall(coreEnrolGetCourseEnrolmentMethodsRequest, _callback);

    }

    /**
     * Get the list of course enrolment methods
     * Get the list of course enrolment methods
     * @param coreEnrolGetCourseEnrolmentMethodsRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreEnrolGetCourseEnrolmentMethods(CoreEnrolGetCourseEnrolmentMethodsRequest coreEnrolGetCourseEnrolmentMethodsRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreEnrolGetCourseEnrolmentMethodsWithHttpInfo(coreEnrolGetCourseEnrolmentMethodsRequest);
        return localVarResp.getData();
    }

    /**
     * Get the list of course enrolment methods
     * Get the list of course enrolment methods
     * @param coreEnrolGetCourseEnrolmentMethodsRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreEnrolGetCourseEnrolmentMethodsWithHttpInfo(CoreEnrolGetCourseEnrolmentMethodsRequest coreEnrolGetCourseEnrolmentMethodsRequest) throws ApiException {
        okhttp3.Call localVarCall = coreEnrolGetCourseEnrolmentMethodsValidateBeforeCall(coreEnrolGetCourseEnrolmentMethodsRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the list of course enrolment methods (asynchronously)
     * Get the list of course enrolment methods
     * @param coreEnrolGetCourseEnrolmentMethodsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreEnrolGetCourseEnrolmentMethodsAsync(CoreEnrolGetCourseEnrolmentMethodsRequest coreEnrolGetCourseEnrolmentMethodsRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreEnrolGetCourseEnrolmentMethodsValidateBeforeCall(coreEnrolGetCourseEnrolmentMethodsRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreEnrolGetEnrolledUsers
     * @param coreEnrolGetEnrolledUsersRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreEnrolGetEnrolledUsersCall(CoreEnrolGetEnrolledUsersRequest coreEnrolGetEnrolledUsersRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreEnrolGetEnrolledUsersRequest;

        // create path and map variables
        String localVarPath = "/core_enrol_get_enrolled_users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreEnrolGetEnrolledUsersValidateBeforeCall(CoreEnrolGetEnrolledUsersRequest coreEnrolGetEnrolledUsersRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreEnrolGetEnrolledUsersRequest' is set
        if (coreEnrolGetEnrolledUsersRequest == null) {
            throw new ApiException("Missing the required parameter 'coreEnrolGetEnrolledUsersRequest' when calling coreEnrolGetEnrolledUsers(Async)");
        }

        return coreEnrolGetEnrolledUsersCall(coreEnrolGetEnrolledUsersRequest, _callback);

    }

    /**
     * Get enrolled users by course id.
     * Get enrolled users by course id.
     * @param coreEnrolGetEnrolledUsersRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreEnrolGetEnrolledUsers(CoreEnrolGetEnrolledUsersRequest coreEnrolGetEnrolledUsersRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreEnrolGetEnrolledUsersWithHttpInfo(coreEnrolGetEnrolledUsersRequest);
        return localVarResp.getData();
    }

    /**
     * Get enrolled users by course id.
     * Get enrolled users by course id.
     * @param coreEnrolGetEnrolledUsersRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreEnrolGetEnrolledUsersWithHttpInfo(CoreEnrolGetEnrolledUsersRequest coreEnrolGetEnrolledUsersRequest) throws ApiException {
        okhttp3.Call localVarCall = coreEnrolGetEnrolledUsersValidateBeforeCall(coreEnrolGetEnrolledUsersRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get enrolled users by course id. (asynchronously)
     * Get enrolled users by course id.
     * @param coreEnrolGetEnrolledUsersRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreEnrolGetEnrolledUsersAsync(CoreEnrolGetEnrolledUsersRequest coreEnrolGetEnrolledUsersRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreEnrolGetEnrolledUsersValidateBeforeCall(coreEnrolGetEnrolledUsersRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreEnrolGetEnrolledUsersWithCapability
     * @param coreEnrolGetEnrolledUsersWithCapabilityRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreEnrolGetEnrolledUsersWithCapabilityCall(CoreEnrolGetEnrolledUsersWithCapabilityRequest coreEnrolGetEnrolledUsersWithCapabilityRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreEnrolGetEnrolledUsersWithCapabilityRequest;

        // create path and map variables
        String localVarPath = "/core_enrol_get_enrolled_users_with_capability";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreEnrolGetEnrolledUsersWithCapabilityValidateBeforeCall(CoreEnrolGetEnrolledUsersWithCapabilityRequest coreEnrolGetEnrolledUsersWithCapabilityRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreEnrolGetEnrolledUsersWithCapabilityRequest' is set
        if (coreEnrolGetEnrolledUsersWithCapabilityRequest == null) {
            throw new ApiException("Missing the required parameter 'coreEnrolGetEnrolledUsersWithCapabilityRequest' when calling coreEnrolGetEnrolledUsersWithCapability(Async)");
        }

        return coreEnrolGetEnrolledUsersWithCapabilityCall(coreEnrolGetEnrolledUsersWithCapabilityRequest, _callback);

    }

    /**
     * For each course and capability specified, return a list of the users that are enrolled in the course                                   and have that capability
     * For each course and capability specified, return a list of the users that are enrolled in the course                                   and have that capability
     * @param coreEnrolGetEnrolledUsersWithCapabilityRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreEnrolGetEnrolledUsersWithCapability(CoreEnrolGetEnrolledUsersWithCapabilityRequest coreEnrolGetEnrolledUsersWithCapabilityRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreEnrolGetEnrolledUsersWithCapabilityWithHttpInfo(coreEnrolGetEnrolledUsersWithCapabilityRequest);
        return localVarResp.getData();
    }

    /**
     * For each course and capability specified, return a list of the users that are enrolled in the course                                   and have that capability
     * For each course and capability specified, return a list of the users that are enrolled in the course                                   and have that capability
     * @param coreEnrolGetEnrolledUsersWithCapabilityRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreEnrolGetEnrolledUsersWithCapabilityWithHttpInfo(CoreEnrolGetEnrolledUsersWithCapabilityRequest coreEnrolGetEnrolledUsersWithCapabilityRequest) throws ApiException {
        okhttp3.Call localVarCall = coreEnrolGetEnrolledUsersWithCapabilityValidateBeforeCall(coreEnrolGetEnrolledUsersWithCapabilityRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * For each course and capability specified, return a list of the users that are enrolled in the course                                   and have that capability (asynchronously)
     * For each course and capability specified, return a list of the users that are enrolled in the course                                   and have that capability
     * @param coreEnrolGetEnrolledUsersWithCapabilityRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreEnrolGetEnrolledUsersWithCapabilityAsync(CoreEnrolGetEnrolledUsersWithCapabilityRequest coreEnrolGetEnrolledUsersWithCapabilityRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreEnrolGetEnrolledUsersWithCapabilityValidateBeforeCall(coreEnrolGetEnrolledUsersWithCapabilityRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreEnrolGetPotentialUsers
     * @param coreEnrolGetPotentialUsersRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreEnrolGetPotentialUsersCall(CoreEnrolGetPotentialUsersRequest coreEnrolGetPotentialUsersRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreEnrolGetPotentialUsersRequest;

        // create path and map variables
        String localVarPath = "/core_enrol_get_potential_users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreEnrolGetPotentialUsersValidateBeforeCall(CoreEnrolGetPotentialUsersRequest coreEnrolGetPotentialUsersRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreEnrolGetPotentialUsersRequest' is set
        if (coreEnrolGetPotentialUsersRequest == null) {
            throw new ApiException("Missing the required parameter 'coreEnrolGetPotentialUsersRequest' when calling coreEnrolGetPotentialUsers(Async)");
        }

        return coreEnrolGetPotentialUsersCall(coreEnrolGetPotentialUsersRequest, _callback);

    }

    /**
     * Get the list of potential users to enrol
     * Get the list of potential users to enrol
     * @param coreEnrolGetPotentialUsersRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreEnrolGetPotentialUsers(CoreEnrolGetPotentialUsersRequest coreEnrolGetPotentialUsersRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreEnrolGetPotentialUsersWithHttpInfo(coreEnrolGetPotentialUsersRequest);
        return localVarResp.getData();
    }

    /**
     * Get the list of potential users to enrol
     * Get the list of potential users to enrol
     * @param coreEnrolGetPotentialUsersRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreEnrolGetPotentialUsersWithHttpInfo(CoreEnrolGetPotentialUsersRequest coreEnrolGetPotentialUsersRequest) throws ApiException {
        okhttp3.Call localVarCall = coreEnrolGetPotentialUsersValidateBeforeCall(coreEnrolGetPotentialUsersRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the list of potential users to enrol (asynchronously)
     * Get the list of potential users to enrol
     * @param coreEnrolGetPotentialUsersRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreEnrolGetPotentialUsersAsync(CoreEnrolGetPotentialUsersRequest coreEnrolGetPotentialUsersRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreEnrolGetPotentialUsersValidateBeforeCall(coreEnrolGetPotentialUsersRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreEnrolGetUsersCourses
     * @param coreEnrolGetUsersCoursesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreEnrolGetUsersCoursesCall(CoreEnrolGetUsersCoursesRequest coreEnrolGetUsersCoursesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreEnrolGetUsersCoursesRequest;

        // create path and map variables
        String localVarPath = "/core_enrol_get_users_courses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreEnrolGetUsersCoursesValidateBeforeCall(CoreEnrolGetUsersCoursesRequest coreEnrolGetUsersCoursesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreEnrolGetUsersCoursesRequest' is set
        if (coreEnrolGetUsersCoursesRequest == null) {
            throw new ApiException("Missing the required parameter 'coreEnrolGetUsersCoursesRequest' when calling coreEnrolGetUsersCourses(Async)");
        }

        return coreEnrolGetUsersCoursesCall(coreEnrolGetUsersCoursesRequest, _callback);

    }

    /**
     * Get the list of courses where a user is enrolled in
     * Get the list of courses where a user is enrolled in
     * @param coreEnrolGetUsersCoursesRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreEnrolGetUsersCourses(CoreEnrolGetUsersCoursesRequest coreEnrolGetUsersCoursesRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreEnrolGetUsersCoursesWithHttpInfo(coreEnrolGetUsersCoursesRequest);
        return localVarResp.getData();
    }

    /**
     * Get the list of courses where a user is enrolled in
     * Get the list of courses where a user is enrolled in
     * @param coreEnrolGetUsersCoursesRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreEnrolGetUsersCoursesWithHttpInfo(CoreEnrolGetUsersCoursesRequest coreEnrolGetUsersCoursesRequest) throws ApiException {
        okhttp3.Call localVarCall = coreEnrolGetUsersCoursesValidateBeforeCall(coreEnrolGetUsersCoursesRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the list of courses where a user is enrolled in (asynchronously)
     * Get the list of courses where a user is enrolled in
     * @param coreEnrolGetUsersCoursesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreEnrolGetUsersCoursesAsync(CoreEnrolGetUsersCoursesRequest coreEnrolGetUsersCoursesRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreEnrolGetUsersCoursesValidateBeforeCall(coreEnrolGetUsersCoursesRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreEnrolSearchUsers
     * @param coreEnrolSearchUsersRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreEnrolSearchUsersCall(CoreEnrolSearchUsersRequest coreEnrolSearchUsersRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreEnrolSearchUsersRequest;

        // create path and map variables
        String localVarPath = "/core_enrol_search_users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreEnrolSearchUsersValidateBeforeCall(CoreEnrolSearchUsersRequest coreEnrolSearchUsersRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreEnrolSearchUsersRequest' is set
        if (coreEnrolSearchUsersRequest == null) {
            throw new ApiException("Missing the required parameter 'coreEnrolSearchUsersRequest' when calling coreEnrolSearchUsers(Async)");
        }

        return coreEnrolSearchUsersCall(coreEnrolSearchUsersRequest, _callback);

    }

    /**
     * Search within the list of course participants
     * Search within the list of course participants
     * @param coreEnrolSearchUsersRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreEnrolSearchUsers(CoreEnrolSearchUsersRequest coreEnrolSearchUsersRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreEnrolSearchUsersWithHttpInfo(coreEnrolSearchUsersRequest);
        return localVarResp.getData();
    }

    /**
     * Search within the list of course participants
     * Search within the list of course participants
     * @param coreEnrolSearchUsersRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreEnrolSearchUsersWithHttpInfo(CoreEnrolSearchUsersRequest coreEnrolSearchUsersRequest) throws ApiException {
        okhttp3.Call localVarCall = coreEnrolSearchUsersValidateBeforeCall(coreEnrolSearchUsersRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search within the list of course participants (asynchronously)
     * Search within the list of course participants
     * @param coreEnrolSearchUsersRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreEnrolSearchUsersAsync(CoreEnrolSearchUsersRequest coreEnrolSearchUsersRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreEnrolSearchUsersValidateBeforeCall(coreEnrolSearchUsersRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreEnrolSubmitUserEnrolmentForm
     * @param coreEnrolSubmitUserEnrolmentFormRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreEnrolSubmitUserEnrolmentFormCall(CoreEnrolSubmitUserEnrolmentFormRequest coreEnrolSubmitUserEnrolmentFormRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreEnrolSubmitUserEnrolmentFormRequest;

        // create path and map variables
        String localVarPath = "/core_enrol_submit_user_enrolment_form";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreEnrolSubmitUserEnrolmentFormValidateBeforeCall(CoreEnrolSubmitUserEnrolmentFormRequest coreEnrolSubmitUserEnrolmentFormRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreEnrolSubmitUserEnrolmentFormRequest' is set
        if (coreEnrolSubmitUserEnrolmentFormRequest == null) {
            throw new ApiException("Missing the required parameter 'coreEnrolSubmitUserEnrolmentFormRequest' when calling coreEnrolSubmitUserEnrolmentForm(Async)");
        }

        return coreEnrolSubmitUserEnrolmentFormCall(coreEnrolSubmitUserEnrolmentFormRequest, _callback);

    }

    /**
     * Submit form data for enrolment form
     * Submit form data for enrolment form
     * @param coreEnrolSubmitUserEnrolmentFormRequest  (required)
     * @return CoreEnrolSubmitUserEnrolmentForm200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreEnrolSubmitUserEnrolmentForm200Response coreEnrolSubmitUserEnrolmentForm(CoreEnrolSubmitUserEnrolmentFormRequest coreEnrolSubmitUserEnrolmentFormRequest) throws ApiException {
        ApiResponse<CoreEnrolSubmitUserEnrolmentForm200Response> localVarResp = coreEnrolSubmitUserEnrolmentFormWithHttpInfo(coreEnrolSubmitUserEnrolmentFormRequest);
        return localVarResp.getData();
    }

    /**
     * Submit form data for enrolment form
     * Submit form data for enrolment form
     * @param coreEnrolSubmitUserEnrolmentFormRequest  (required)
     * @return ApiResponse&lt;CoreEnrolSubmitUserEnrolmentForm200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreEnrolSubmitUserEnrolmentForm200Response> coreEnrolSubmitUserEnrolmentFormWithHttpInfo(CoreEnrolSubmitUserEnrolmentFormRequest coreEnrolSubmitUserEnrolmentFormRequest) throws ApiException {
        okhttp3.Call localVarCall = coreEnrolSubmitUserEnrolmentFormValidateBeforeCall(coreEnrolSubmitUserEnrolmentFormRequest, null);
        Type localVarReturnType = new TypeToken<CoreEnrolSubmitUserEnrolmentForm200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Submit form data for enrolment form (asynchronously)
     * Submit form data for enrolment form
     * @param coreEnrolSubmitUserEnrolmentFormRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreEnrolSubmitUserEnrolmentFormAsync(CoreEnrolSubmitUserEnrolmentFormRequest coreEnrolSubmitUserEnrolmentFormRequest, final ApiCallback<CoreEnrolSubmitUserEnrolmentForm200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreEnrolSubmitUserEnrolmentFormValidateBeforeCall(coreEnrolSubmitUserEnrolmentFormRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreEnrolSubmitUserEnrolmentForm200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreEnrolUnenrolUserEnrolment
     * @param coreEnrolUnenrolUserEnrolmentRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreEnrolUnenrolUserEnrolmentCall(CoreEnrolUnenrolUserEnrolmentRequest coreEnrolUnenrolUserEnrolmentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreEnrolUnenrolUserEnrolmentRequest;

        // create path and map variables
        String localVarPath = "/core_enrol_unenrol_user_enrolment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreEnrolUnenrolUserEnrolmentValidateBeforeCall(CoreEnrolUnenrolUserEnrolmentRequest coreEnrolUnenrolUserEnrolmentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreEnrolUnenrolUserEnrolmentRequest' is set
        if (coreEnrolUnenrolUserEnrolmentRequest == null) {
            throw new ApiException("Missing the required parameter 'coreEnrolUnenrolUserEnrolmentRequest' when calling coreEnrolUnenrolUserEnrolment(Async)");
        }

        return coreEnrolUnenrolUserEnrolmentCall(coreEnrolUnenrolUserEnrolmentRequest, _callback);

    }

    /**
     * External function that unenrols a given user enrolment
     * External function that unenrols a given user enrolment
     * @param coreEnrolUnenrolUserEnrolmentRequest  (required)
     * @return CoreEnrolUnenrolUserEnrolment200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreEnrolUnenrolUserEnrolment200Response coreEnrolUnenrolUserEnrolment(CoreEnrolUnenrolUserEnrolmentRequest coreEnrolUnenrolUserEnrolmentRequest) throws ApiException {
        ApiResponse<CoreEnrolUnenrolUserEnrolment200Response> localVarResp = coreEnrolUnenrolUserEnrolmentWithHttpInfo(coreEnrolUnenrolUserEnrolmentRequest);
        return localVarResp.getData();
    }

    /**
     * External function that unenrols a given user enrolment
     * External function that unenrols a given user enrolment
     * @param coreEnrolUnenrolUserEnrolmentRequest  (required)
     * @return ApiResponse&lt;CoreEnrolUnenrolUserEnrolment200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreEnrolUnenrolUserEnrolment200Response> coreEnrolUnenrolUserEnrolmentWithHttpInfo(CoreEnrolUnenrolUserEnrolmentRequest coreEnrolUnenrolUserEnrolmentRequest) throws ApiException {
        okhttp3.Call localVarCall = coreEnrolUnenrolUserEnrolmentValidateBeforeCall(coreEnrolUnenrolUserEnrolmentRequest, null);
        Type localVarReturnType = new TypeToken<CoreEnrolUnenrolUserEnrolment200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * External function that unenrols a given user enrolment (asynchronously)
     * External function that unenrols a given user enrolment
     * @param coreEnrolUnenrolUserEnrolmentRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreEnrolUnenrolUserEnrolmentAsync(CoreEnrolUnenrolUserEnrolmentRequest coreEnrolUnenrolUserEnrolmentRequest, final ApiCallback<CoreEnrolUnenrolUserEnrolment200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreEnrolUnenrolUserEnrolmentValidateBeforeCall(coreEnrolUnenrolUserEnrolmentRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreEnrolUnenrolUserEnrolment200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreFetchNotifications
     * @param coreFetchNotificationsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreFetchNotificationsCall(CoreFetchNotificationsRequest coreFetchNotificationsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreFetchNotificationsRequest;

        // create path and map variables
        String localVarPath = "/core_fetch_notifications";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreFetchNotificationsValidateBeforeCall(CoreFetchNotificationsRequest coreFetchNotificationsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreFetchNotificationsRequest' is set
        if (coreFetchNotificationsRequest == null) {
            throw new ApiException("Missing the required parameter 'coreFetchNotificationsRequest' when calling coreFetchNotifications(Async)");
        }

        return coreFetchNotificationsCall(coreFetchNotificationsRequest, _callback);

    }

    /**
     * Return a list of notifications for the current session
     * Return a list of notifications for the current session
     * @param coreFetchNotificationsRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreFetchNotifications(CoreFetchNotificationsRequest coreFetchNotificationsRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreFetchNotificationsWithHttpInfo(coreFetchNotificationsRequest);
        return localVarResp.getData();
    }

    /**
     * Return a list of notifications for the current session
     * Return a list of notifications for the current session
     * @param coreFetchNotificationsRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreFetchNotificationsWithHttpInfo(CoreFetchNotificationsRequest coreFetchNotificationsRequest) throws ApiException {
        okhttp3.Call localVarCall = coreFetchNotificationsValidateBeforeCall(coreFetchNotificationsRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a list of notifications for the current session (asynchronously)
     * Return a list of notifications for the current session
     * @param coreFetchNotificationsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreFetchNotificationsAsync(CoreFetchNotificationsRequest coreFetchNotificationsRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreFetchNotificationsValidateBeforeCall(coreFetchNotificationsRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreFilesDeleteDraftFiles
     * @param coreFilesDeleteDraftFilesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreFilesDeleteDraftFilesCall(CoreFilesDeleteDraftFilesRequest coreFilesDeleteDraftFilesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreFilesDeleteDraftFilesRequest;

        // create path and map variables
        String localVarPath = "/core_files_delete_draft_files";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreFilesDeleteDraftFilesValidateBeforeCall(CoreFilesDeleteDraftFilesRequest coreFilesDeleteDraftFilesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreFilesDeleteDraftFilesRequest' is set
        if (coreFilesDeleteDraftFilesRequest == null) {
            throw new ApiException("Missing the required parameter 'coreFilesDeleteDraftFilesRequest' when calling coreFilesDeleteDraftFiles(Async)");
        }

        return coreFilesDeleteDraftFilesCall(coreFilesDeleteDraftFilesRequest, _callback);

    }

    /**
     * Delete the indicated files (or directories) from a user draft file area.
     * Delete the indicated files (or directories) from a user draft file area.
     * @param coreFilesDeleteDraftFilesRequest  (required)
     * @return CoreFilesDeleteDraftFiles200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreFilesDeleteDraftFiles200Response coreFilesDeleteDraftFiles(CoreFilesDeleteDraftFilesRequest coreFilesDeleteDraftFilesRequest) throws ApiException {
        ApiResponse<CoreFilesDeleteDraftFiles200Response> localVarResp = coreFilesDeleteDraftFilesWithHttpInfo(coreFilesDeleteDraftFilesRequest);
        return localVarResp.getData();
    }

    /**
     * Delete the indicated files (or directories) from a user draft file area.
     * Delete the indicated files (or directories) from a user draft file area.
     * @param coreFilesDeleteDraftFilesRequest  (required)
     * @return ApiResponse&lt;CoreFilesDeleteDraftFiles200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreFilesDeleteDraftFiles200Response> coreFilesDeleteDraftFilesWithHttpInfo(CoreFilesDeleteDraftFilesRequest coreFilesDeleteDraftFilesRequest) throws ApiException {
        okhttp3.Call localVarCall = coreFilesDeleteDraftFilesValidateBeforeCall(coreFilesDeleteDraftFilesRequest, null);
        Type localVarReturnType = new TypeToken<CoreFilesDeleteDraftFiles200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete the indicated files (or directories) from a user draft file area. (asynchronously)
     * Delete the indicated files (or directories) from a user draft file area.
     * @param coreFilesDeleteDraftFilesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreFilesDeleteDraftFilesAsync(CoreFilesDeleteDraftFilesRequest coreFilesDeleteDraftFilesRequest, final ApiCallback<CoreFilesDeleteDraftFiles200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreFilesDeleteDraftFilesValidateBeforeCall(coreFilesDeleteDraftFilesRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreFilesDeleteDraftFiles200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreFilesGetFiles
     * @param coreFilesGetFilesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreFilesGetFilesCall(CoreFilesGetFilesRequest coreFilesGetFilesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreFilesGetFilesRequest;

        // create path and map variables
        String localVarPath = "/core_files_get_files";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreFilesGetFilesValidateBeforeCall(CoreFilesGetFilesRequest coreFilesGetFilesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreFilesGetFilesRequest' is set
        if (coreFilesGetFilesRequest == null) {
            throw new ApiException("Missing the required parameter 'coreFilesGetFilesRequest' when calling coreFilesGetFiles(Async)");
        }

        return coreFilesGetFilesCall(coreFilesGetFilesRequest, _callback);

    }

    /**
     * browse moodle files
     * browse moodle files
     * @param coreFilesGetFilesRequest  (required)
     * @return CoreFilesGetFiles200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreFilesGetFiles200Response coreFilesGetFiles(CoreFilesGetFilesRequest coreFilesGetFilesRequest) throws ApiException {
        ApiResponse<CoreFilesGetFiles200Response> localVarResp = coreFilesGetFilesWithHttpInfo(coreFilesGetFilesRequest);
        return localVarResp.getData();
    }

    /**
     * browse moodle files
     * browse moodle files
     * @param coreFilesGetFilesRequest  (required)
     * @return ApiResponse&lt;CoreFilesGetFiles200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreFilesGetFiles200Response> coreFilesGetFilesWithHttpInfo(CoreFilesGetFilesRequest coreFilesGetFilesRequest) throws ApiException {
        okhttp3.Call localVarCall = coreFilesGetFilesValidateBeforeCall(coreFilesGetFilesRequest, null);
        Type localVarReturnType = new TypeToken<CoreFilesGetFiles200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * browse moodle files (asynchronously)
     * browse moodle files
     * @param coreFilesGetFilesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreFilesGetFilesAsync(CoreFilesGetFilesRequest coreFilesGetFilesRequest, final ApiCallback<CoreFilesGetFiles200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreFilesGetFilesValidateBeforeCall(coreFilesGetFilesRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreFilesGetFiles200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreFilesGetUnusedDraftItemid
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreFilesGetUnusedDraftItemidCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/core_files_get_unused_draft_itemid";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreFilesGetUnusedDraftItemidValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return coreFilesGetUnusedDraftItemidCall(_callback);

    }

    /**
     * Generate a new draft itemid for the current user.
     * Generate a new draft itemid for the current user.
     * @return CoreFilesGetUnusedDraftItemid200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreFilesGetUnusedDraftItemid200Response coreFilesGetUnusedDraftItemid() throws ApiException {
        ApiResponse<CoreFilesGetUnusedDraftItemid200Response> localVarResp = coreFilesGetUnusedDraftItemidWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Generate a new draft itemid for the current user.
     * Generate a new draft itemid for the current user.
     * @return ApiResponse&lt;CoreFilesGetUnusedDraftItemid200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreFilesGetUnusedDraftItemid200Response> coreFilesGetUnusedDraftItemidWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = coreFilesGetUnusedDraftItemidValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<CoreFilesGetUnusedDraftItemid200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generate a new draft itemid for the current user. (asynchronously)
     * Generate a new draft itemid for the current user.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreFilesGetUnusedDraftItemidAsync(final ApiCallback<CoreFilesGetUnusedDraftItemid200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreFilesGetUnusedDraftItemidValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<CoreFilesGetUnusedDraftItemid200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreFilesUpload
     * @param coreFilesUploadRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreFilesUploadCall(CoreFilesUploadRequest coreFilesUploadRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreFilesUploadRequest;

        // create path and map variables
        String localVarPath = "/core_files_upload";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreFilesUploadValidateBeforeCall(CoreFilesUploadRequest coreFilesUploadRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreFilesUploadRequest' is set
        if (coreFilesUploadRequest == null) {
            throw new ApiException("Missing the required parameter 'coreFilesUploadRequest' when calling coreFilesUpload(Async)");
        }

        return coreFilesUploadCall(coreFilesUploadRequest, _callback);

    }

    /**
     * upload a file to moodle
     * upload a file to moodle
     * @param coreFilesUploadRequest  (required)
     * @return CoreFilesUpload200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreFilesUpload200Response coreFilesUpload(CoreFilesUploadRequest coreFilesUploadRequest) throws ApiException {
        ApiResponse<CoreFilesUpload200Response> localVarResp = coreFilesUploadWithHttpInfo(coreFilesUploadRequest);
        return localVarResp.getData();
    }

    /**
     * upload a file to moodle
     * upload a file to moodle
     * @param coreFilesUploadRequest  (required)
     * @return ApiResponse&lt;CoreFilesUpload200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreFilesUpload200Response> coreFilesUploadWithHttpInfo(CoreFilesUploadRequest coreFilesUploadRequest) throws ApiException {
        okhttp3.Call localVarCall = coreFilesUploadValidateBeforeCall(coreFilesUploadRequest, null);
        Type localVarReturnType = new TypeToken<CoreFilesUpload200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * upload a file to moodle (asynchronously)
     * upload a file to moodle
     * @param coreFilesUploadRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreFilesUploadAsync(CoreFilesUploadRequest coreFilesUploadRequest, final ApiCallback<CoreFilesUpload200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreFilesUploadValidateBeforeCall(coreFilesUploadRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreFilesUpload200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreFiltersGetAvailableInContext
     * @param coreFiltersGetAvailableInContextRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreFiltersGetAvailableInContextCall(CoreFiltersGetAvailableInContextRequest coreFiltersGetAvailableInContextRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreFiltersGetAvailableInContextRequest;

        // create path and map variables
        String localVarPath = "/core_filters_get_available_in_context";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreFiltersGetAvailableInContextValidateBeforeCall(CoreFiltersGetAvailableInContextRequest coreFiltersGetAvailableInContextRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreFiltersGetAvailableInContextRequest' is set
        if (coreFiltersGetAvailableInContextRequest == null) {
            throw new ApiException("Missing the required parameter 'coreFiltersGetAvailableInContextRequest' when calling coreFiltersGetAvailableInContext(Async)");
        }

        return coreFiltersGetAvailableInContextCall(coreFiltersGetAvailableInContextRequest, _callback);

    }

    /**
     * Returns the filters available in the given contexts.
     * Returns the filters available in the given contexts.
     * @param coreFiltersGetAvailableInContextRequest  (required)
     * @return CoreFiltersGetAvailableInContext200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreFiltersGetAvailableInContext200Response coreFiltersGetAvailableInContext(CoreFiltersGetAvailableInContextRequest coreFiltersGetAvailableInContextRequest) throws ApiException {
        ApiResponse<CoreFiltersGetAvailableInContext200Response> localVarResp = coreFiltersGetAvailableInContextWithHttpInfo(coreFiltersGetAvailableInContextRequest);
        return localVarResp.getData();
    }

    /**
     * Returns the filters available in the given contexts.
     * Returns the filters available in the given contexts.
     * @param coreFiltersGetAvailableInContextRequest  (required)
     * @return ApiResponse&lt;CoreFiltersGetAvailableInContext200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreFiltersGetAvailableInContext200Response> coreFiltersGetAvailableInContextWithHttpInfo(CoreFiltersGetAvailableInContextRequest coreFiltersGetAvailableInContextRequest) throws ApiException {
        okhttp3.Call localVarCall = coreFiltersGetAvailableInContextValidateBeforeCall(coreFiltersGetAvailableInContextRequest, null);
        Type localVarReturnType = new TypeToken<CoreFiltersGetAvailableInContext200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the filters available in the given contexts. (asynchronously)
     * Returns the filters available in the given contexts.
     * @param coreFiltersGetAvailableInContextRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreFiltersGetAvailableInContextAsync(CoreFiltersGetAvailableInContextRequest coreFiltersGetAvailableInContextRequest, final ApiCallback<CoreFiltersGetAvailableInContext200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreFiltersGetAvailableInContextValidateBeforeCall(coreFiltersGetAvailableInContextRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreFiltersGetAvailableInContext200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreFormDynamicForm
     * @param coreFormDynamicFormRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreFormDynamicFormCall(CoreFormDynamicFormRequest coreFormDynamicFormRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreFormDynamicFormRequest;

        // create path and map variables
        String localVarPath = "/core_form_dynamic_form";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreFormDynamicFormValidateBeforeCall(CoreFormDynamicFormRequest coreFormDynamicFormRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreFormDynamicFormRequest' is set
        if (coreFormDynamicFormRequest == null) {
            throw new ApiException("Missing the required parameter 'coreFormDynamicFormRequest' when calling coreFormDynamicForm(Async)");
        }

        return coreFormDynamicFormCall(coreFormDynamicFormRequest, _callback);

    }

    /**
     * Process submission of a dynamic (modal) form
     * Process submission of a dynamic (modal) form
     * @param coreFormDynamicFormRequest  (required)
     * @return CoreFormDynamicForm200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreFormDynamicForm200Response coreFormDynamicForm(CoreFormDynamicFormRequest coreFormDynamicFormRequest) throws ApiException {
        ApiResponse<CoreFormDynamicForm200Response> localVarResp = coreFormDynamicFormWithHttpInfo(coreFormDynamicFormRequest);
        return localVarResp.getData();
    }

    /**
     * Process submission of a dynamic (modal) form
     * Process submission of a dynamic (modal) form
     * @param coreFormDynamicFormRequest  (required)
     * @return ApiResponse&lt;CoreFormDynamicForm200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreFormDynamicForm200Response> coreFormDynamicFormWithHttpInfo(CoreFormDynamicFormRequest coreFormDynamicFormRequest) throws ApiException {
        okhttp3.Call localVarCall = coreFormDynamicFormValidateBeforeCall(coreFormDynamicFormRequest, null);
        Type localVarReturnType = new TypeToken<CoreFormDynamicForm200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Process submission of a dynamic (modal) form (asynchronously)
     * Process submission of a dynamic (modal) form
     * @param coreFormDynamicFormRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreFormDynamicFormAsync(CoreFormDynamicFormRequest coreFormDynamicFormRequest, final ApiCallback<CoreFormDynamicForm200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreFormDynamicFormValidateBeforeCall(coreFormDynamicFormRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreFormDynamicForm200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreFormGetFiletypesBrowserData
     * @param coreFormGetFiletypesBrowserDataRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreFormGetFiletypesBrowserDataCall(CoreFormGetFiletypesBrowserDataRequest coreFormGetFiletypesBrowserDataRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreFormGetFiletypesBrowserDataRequest;

        // create path and map variables
        String localVarPath = "/core_form_get_filetypes_browser_data";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreFormGetFiletypesBrowserDataValidateBeforeCall(CoreFormGetFiletypesBrowserDataRequest coreFormGetFiletypesBrowserDataRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreFormGetFiletypesBrowserDataRequest' is set
        if (coreFormGetFiletypesBrowserDataRequest == null) {
            throw new ApiException("Missing the required parameter 'coreFormGetFiletypesBrowserDataRequest' when calling coreFormGetFiletypesBrowserData(Async)");
        }

        return coreFormGetFiletypesBrowserDataCall(coreFormGetFiletypesBrowserDataRequest, _callback);

    }

    /**
     * Provides data for the filetypes element browser.
     * Provides data for the filetypes element browser.
     * @param coreFormGetFiletypesBrowserDataRequest  (required)
     * @return CoreFormGetFiletypesBrowserData200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreFormGetFiletypesBrowserData200Response coreFormGetFiletypesBrowserData(CoreFormGetFiletypesBrowserDataRequest coreFormGetFiletypesBrowserDataRequest) throws ApiException {
        ApiResponse<CoreFormGetFiletypesBrowserData200Response> localVarResp = coreFormGetFiletypesBrowserDataWithHttpInfo(coreFormGetFiletypesBrowserDataRequest);
        return localVarResp.getData();
    }

    /**
     * Provides data for the filetypes element browser.
     * Provides data for the filetypes element browser.
     * @param coreFormGetFiletypesBrowserDataRequest  (required)
     * @return ApiResponse&lt;CoreFormGetFiletypesBrowserData200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreFormGetFiletypesBrowserData200Response> coreFormGetFiletypesBrowserDataWithHttpInfo(CoreFormGetFiletypesBrowserDataRequest coreFormGetFiletypesBrowserDataRequest) throws ApiException {
        okhttp3.Call localVarCall = coreFormGetFiletypesBrowserDataValidateBeforeCall(coreFormGetFiletypesBrowserDataRequest, null);
        Type localVarReturnType = new TypeToken<CoreFormGetFiletypesBrowserData200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Provides data for the filetypes element browser. (asynchronously)
     * Provides data for the filetypes element browser.
     * @param coreFormGetFiletypesBrowserDataRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreFormGetFiletypesBrowserDataAsync(CoreFormGetFiletypesBrowserDataRequest coreFormGetFiletypesBrowserDataRequest, final ApiCallback<CoreFormGetFiletypesBrowserData200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreFormGetFiletypesBrowserDataValidateBeforeCall(coreFormGetFiletypesBrowserDataRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreFormGetFiletypesBrowserData200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreGetComponentStrings
     * @param coreGetComponentStringsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreGetComponentStringsCall(CoreGetComponentStringsRequest coreGetComponentStringsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreGetComponentStringsRequest;

        // create path and map variables
        String localVarPath = "/core_get_component_strings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreGetComponentStringsValidateBeforeCall(CoreGetComponentStringsRequest coreGetComponentStringsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreGetComponentStringsRequest' is set
        if (coreGetComponentStringsRequest == null) {
            throw new ApiException("Missing the required parameter 'coreGetComponentStringsRequest' when calling coreGetComponentStrings(Async)");
        }

        return coreGetComponentStringsCall(coreGetComponentStringsRequest, _callback);

    }

    /**
     * Return all raw strings (with {$a-&gt;xxx}), for a specific component - similar to core get_component_strings(), call
     * Return all raw strings (with {$a-&gt;xxx}), for a specific component - similar to core get_component_strings(), call
     * @param coreGetComponentStringsRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreGetComponentStrings(CoreGetComponentStringsRequest coreGetComponentStringsRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreGetComponentStringsWithHttpInfo(coreGetComponentStringsRequest);
        return localVarResp.getData();
    }

    /**
     * Return all raw strings (with {$a-&gt;xxx}), for a specific component - similar to core get_component_strings(), call
     * Return all raw strings (with {$a-&gt;xxx}), for a specific component - similar to core get_component_strings(), call
     * @param coreGetComponentStringsRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreGetComponentStringsWithHttpInfo(CoreGetComponentStringsRequest coreGetComponentStringsRequest) throws ApiException {
        okhttp3.Call localVarCall = coreGetComponentStringsValidateBeforeCall(coreGetComponentStringsRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return all raw strings (with {$a-&gt;xxx}), for a specific component - similar to core get_component_strings(), call (asynchronously)
     * Return all raw strings (with {$a-&gt;xxx}), for a specific component - similar to core get_component_strings(), call
     * @param coreGetComponentStringsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreGetComponentStringsAsync(CoreGetComponentStringsRequest coreGetComponentStringsRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreGetComponentStringsValidateBeforeCall(coreGetComponentStringsRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreGetFragment
     * @param coreGetFragmentRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreGetFragmentCall(CoreGetFragmentRequest coreGetFragmentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreGetFragmentRequest;

        // create path and map variables
        String localVarPath = "/core_get_fragment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreGetFragmentValidateBeforeCall(CoreGetFragmentRequest coreGetFragmentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreGetFragmentRequest' is set
        if (coreGetFragmentRequest == null) {
            throw new ApiException("Missing the required parameter 'coreGetFragmentRequest' when calling coreGetFragment(Async)");
        }

        return coreGetFragmentCall(coreGetFragmentRequest, _callback);

    }

    /**
     * Return a fragment for inclusion, such as a JavaScript page.
     * Return a fragment for inclusion, such as a JavaScript page.
     * @param coreGetFragmentRequest  (required)
     * @return CoreGetFragment200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreGetFragment200Response coreGetFragment(CoreGetFragmentRequest coreGetFragmentRequest) throws ApiException {
        ApiResponse<CoreGetFragment200Response> localVarResp = coreGetFragmentWithHttpInfo(coreGetFragmentRequest);
        return localVarResp.getData();
    }

    /**
     * Return a fragment for inclusion, such as a JavaScript page.
     * Return a fragment for inclusion, such as a JavaScript page.
     * @param coreGetFragmentRequest  (required)
     * @return ApiResponse&lt;CoreGetFragment200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreGetFragment200Response> coreGetFragmentWithHttpInfo(CoreGetFragmentRequest coreGetFragmentRequest) throws ApiException {
        okhttp3.Call localVarCall = coreGetFragmentValidateBeforeCall(coreGetFragmentRequest, null);
        Type localVarReturnType = new TypeToken<CoreGetFragment200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a fragment for inclusion, such as a JavaScript page. (asynchronously)
     * Return a fragment for inclusion, such as a JavaScript page.
     * @param coreGetFragmentRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreGetFragmentAsync(CoreGetFragmentRequest coreGetFragmentRequest, final ApiCallback<CoreGetFragment200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreGetFragmentValidateBeforeCall(coreGetFragmentRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreGetFragment200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreGetString
     * @param coreGetStringRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> translated string </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreGetStringCall(CoreGetStringRequest coreGetStringRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreGetStringRequest;

        // create path and map variables
        String localVarPath = "/core_get_string";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreGetStringValidateBeforeCall(CoreGetStringRequest coreGetStringRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreGetStringRequest' is set
        if (coreGetStringRequest == null) {
            throw new ApiException("Missing the required parameter 'coreGetStringRequest' when calling coreGetString(Async)");
        }

        return coreGetStringCall(coreGetStringRequest, _callback);

    }

    /**
     * Return a translated string - similar to core get_string(), call
     * Return a translated string - similar to core get_string(), call
     * @param coreGetStringRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> translated string </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreGetString(CoreGetStringRequest coreGetStringRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreGetStringWithHttpInfo(coreGetStringRequest);
        return localVarResp.getData();
    }

    /**
     * Return a translated string - similar to core get_string(), call
     * Return a translated string - similar to core get_string(), call
     * @param coreGetStringRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> translated string </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreGetStringWithHttpInfo(CoreGetStringRequest coreGetStringRequest) throws ApiException {
        okhttp3.Call localVarCall = coreGetStringValidateBeforeCall(coreGetStringRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a translated string - similar to core get_string(), call (asynchronously)
     * Return a translated string - similar to core get_string(), call
     * @param coreGetStringRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> translated string </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreGetStringAsync(CoreGetStringRequest coreGetStringRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreGetStringValidateBeforeCall(coreGetStringRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreGetStrings
     * @param coreGetStringsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreGetStringsCall(CoreGetStringsRequest coreGetStringsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreGetStringsRequest;

        // create path and map variables
        String localVarPath = "/core_get_strings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreGetStringsValidateBeforeCall(CoreGetStringsRequest coreGetStringsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreGetStringsRequest' is set
        if (coreGetStringsRequest == null) {
            throw new ApiException("Missing the required parameter 'coreGetStringsRequest' when calling coreGetStrings(Async)");
        }

        return coreGetStringsCall(coreGetStringsRequest, _callback);

    }

    /**
     * Return some translated strings - like several core get_string(), calls
     * Return some translated strings - like several core get_string(), calls
     * @param coreGetStringsRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreGetStrings(CoreGetStringsRequest coreGetStringsRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreGetStringsWithHttpInfo(coreGetStringsRequest);
        return localVarResp.getData();
    }

    /**
     * Return some translated strings - like several core get_string(), calls
     * Return some translated strings - like several core get_string(), calls
     * @param coreGetStringsRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreGetStringsWithHttpInfo(CoreGetStringsRequest coreGetStringsRequest) throws ApiException {
        okhttp3.Call localVarCall = coreGetStringsValidateBeforeCall(coreGetStringsRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return some translated strings - like several core get_string(), calls (asynchronously)
     * Return some translated strings - like several core get_string(), calls
     * @param coreGetStringsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreGetStringsAsync(CoreGetStringsRequest coreGetStringsRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreGetStringsValidateBeforeCall(coreGetStringsRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreGetUserDates
     * @param coreGetUserDatesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreGetUserDatesCall(CoreGetUserDatesRequest coreGetUserDatesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreGetUserDatesRequest;

        // create path and map variables
        String localVarPath = "/core_get_user_dates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreGetUserDatesValidateBeforeCall(CoreGetUserDatesRequest coreGetUserDatesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreGetUserDatesRequest' is set
        if (coreGetUserDatesRequest == null) {
            throw new ApiException("Missing the required parameter 'coreGetUserDatesRequest' when calling coreGetUserDates(Async)");
        }

        return coreGetUserDatesCall(coreGetUserDatesRequest, _callback);

    }

    /**
     * Return formatted timestamps
     * Return formatted timestamps
     * @param coreGetUserDatesRequest  (required)
     * @return CoreGetUserDates200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreGetUserDates200Response coreGetUserDates(CoreGetUserDatesRequest coreGetUserDatesRequest) throws ApiException {
        ApiResponse<CoreGetUserDates200Response> localVarResp = coreGetUserDatesWithHttpInfo(coreGetUserDatesRequest);
        return localVarResp.getData();
    }

    /**
     * Return formatted timestamps
     * Return formatted timestamps
     * @param coreGetUserDatesRequest  (required)
     * @return ApiResponse&lt;CoreGetUserDates200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreGetUserDates200Response> coreGetUserDatesWithHttpInfo(CoreGetUserDatesRequest coreGetUserDatesRequest) throws ApiException {
        okhttp3.Call localVarCall = coreGetUserDatesValidateBeforeCall(coreGetUserDatesRequest, null);
        Type localVarReturnType = new TypeToken<CoreGetUserDates200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return formatted timestamps (asynchronously)
     * Return formatted timestamps
     * @param coreGetUserDatesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreGetUserDatesAsync(CoreGetUserDatesRequest coreGetUserDatesRequest, final ApiCallback<CoreGetUserDates200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreGetUserDatesValidateBeforeCall(coreGetUserDatesRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreGetUserDates200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreGradesCreateGradecategories
     * @param coreGradesCreateGradecategoriesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreGradesCreateGradecategoriesCall(CoreGradesCreateGradecategoriesRequest coreGradesCreateGradecategoriesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreGradesCreateGradecategoriesRequest;

        // create path and map variables
        String localVarPath = "/core_grades_create_gradecategories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreGradesCreateGradecategoriesValidateBeforeCall(CoreGradesCreateGradecategoriesRequest coreGradesCreateGradecategoriesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreGradesCreateGradecategoriesRequest' is set
        if (coreGradesCreateGradecategoriesRequest == null) {
            throw new ApiException("Missing the required parameter 'coreGradesCreateGradecategoriesRequest' when calling coreGradesCreateGradecategories(Async)");
        }

        return coreGradesCreateGradecategoriesCall(coreGradesCreateGradecategoriesRequest, _callback);

    }

    /**
     * Create grade categories inside a course gradebook.
     * Create grade categories inside a course gradebook.
     * @param coreGradesCreateGradecategoriesRequest  (required)
     * @return CoreGradesCreateGradecategories200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreGradesCreateGradecategories200Response coreGradesCreateGradecategories(CoreGradesCreateGradecategoriesRequest coreGradesCreateGradecategoriesRequest) throws ApiException {
        ApiResponse<CoreGradesCreateGradecategories200Response> localVarResp = coreGradesCreateGradecategoriesWithHttpInfo(coreGradesCreateGradecategoriesRequest);
        return localVarResp.getData();
    }

    /**
     * Create grade categories inside a course gradebook.
     * Create grade categories inside a course gradebook.
     * @param coreGradesCreateGradecategoriesRequest  (required)
     * @return ApiResponse&lt;CoreGradesCreateGradecategories200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreGradesCreateGradecategories200Response> coreGradesCreateGradecategoriesWithHttpInfo(CoreGradesCreateGradecategoriesRequest coreGradesCreateGradecategoriesRequest) throws ApiException {
        okhttp3.Call localVarCall = coreGradesCreateGradecategoriesValidateBeforeCall(coreGradesCreateGradecategoriesRequest, null);
        Type localVarReturnType = new TypeToken<CoreGradesCreateGradecategories200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create grade categories inside a course gradebook. (asynchronously)
     * Create grade categories inside a course gradebook.
     * @param coreGradesCreateGradecategoriesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreGradesCreateGradecategoriesAsync(CoreGradesCreateGradecategoriesRequest coreGradesCreateGradecategoriesRequest, final ApiCallback<CoreGradesCreateGradecategories200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreGradesCreateGradecategoriesValidateBeforeCall(coreGradesCreateGradecategoriesRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreGradesCreateGradecategories200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreGradesGetEnrolledUsersForSearchWidget
     * @param coreGradesGetEnrolledUsersForSearchWidgetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreGradesGetEnrolledUsersForSearchWidgetCall(CoreGradesGetEnrolledUsersForSearchWidgetRequest coreGradesGetEnrolledUsersForSearchWidgetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreGradesGetEnrolledUsersForSearchWidgetRequest;

        // create path and map variables
        String localVarPath = "/core_grades_get_enrolled_users_for_search_widget";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreGradesGetEnrolledUsersForSearchWidgetValidateBeforeCall(CoreGradesGetEnrolledUsersForSearchWidgetRequest coreGradesGetEnrolledUsersForSearchWidgetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreGradesGetEnrolledUsersForSearchWidgetRequest' is set
        if (coreGradesGetEnrolledUsersForSearchWidgetRequest == null) {
            throw new ApiException("Missing the required parameter 'coreGradesGetEnrolledUsersForSearchWidgetRequest' when calling coreGradesGetEnrolledUsersForSearchWidget(Async)");
        }

        return coreGradesGetEnrolledUsersForSearchWidgetCall(coreGradesGetEnrolledUsersForSearchWidgetRequest, _callback);

    }

    /**
     * ** DEPRECATED ** Please do not call this function any more. Use core_grades_get_enrolled_users_for_selector instead. Returns the enrolled users within and map some fields to the returned array of user objects.
     * ** DEPRECATED ** Please do not call this function any more. Use core_grades_get_enrolled_users_for_selector instead. Returns the enrolled users within and map some fields to the returned array of user objects.
     * @param coreGradesGetEnrolledUsersForSearchWidgetRequest  (required)
     * @return CoreGradesGetEnrolledUsersForSearchWidget200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreGradesGetEnrolledUsersForSearchWidget200Response coreGradesGetEnrolledUsersForSearchWidget(CoreGradesGetEnrolledUsersForSearchWidgetRequest coreGradesGetEnrolledUsersForSearchWidgetRequest) throws ApiException {
        ApiResponse<CoreGradesGetEnrolledUsersForSearchWidget200Response> localVarResp = coreGradesGetEnrolledUsersForSearchWidgetWithHttpInfo(coreGradesGetEnrolledUsersForSearchWidgetRequest);
        return localVarResp.getData();
    }

    /**
     * ** DEPRECATED ** Please do not call this function any more. Use core_grades_get_enrolled_users_for_selector instead. Returns the enrolled users within and map some fields to the returned array of user objects.
     * ** DEPRECATED ** Please do not call this function any more. Use core_grades_get_enrolled_users_for_selector instead. Returns the enrolled users within and map some fields to the returned array of user objects.
     * @param coreGradesGetEnrolledUsersForSearchWidgetRequest  (required)
     * @return ApiResponse&lt;CoreGradesGetEnrolledUsersForSearchWidget200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreGradesGetEnrolledUsersForSearchWidget200Response> coreGradesGetEnrolledUsersForSearchWidgetWithHttpInfo(CoreGradesGetEnrolledUsersForSearchWidgetRequest coreGradesGetEnrolledUsersForSearchWidgetRequest) throws ApiException {
        okhttp3.Call localVarCall = coreGradesGetEnrolledUsersForSearchWidgetValidateBeforeCall(coreGradesGetEnrolledUsersForSearchWidgetRequest, null);
        Type localVarReturnType = new TypeToken<CoreGradesGetEnrolledUsersForSearchWidget200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * ** DEPRECATED ** Please do not call this function any more. Use core_grades_get_enrolled_users_for_selector instead. Returns the enrolled users within and map some fields to the returned array of user objects. (asynchronously)
     * ** DEPRECATED ** Please do not call this function any more. Use core_grades_get_enrolled_users_for_selector instead. Returns the enrolled users within and map some fields to the returned array of user objects.
     * @param coreGradesGetEnrolledUsersForSearchWidgetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreGradesGetEnrolledUsersForSearchWidgetAsync(CoreGradesGetEnrolledUsersForSearchWidgetRequest coreGradesGetEnrolledUsersForSearchWidgetRequest, final ApiCallback<CoreGradesGetEnrolledUsersForSearchWidget200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreGradesGetEnrolledUsersForSearchWidgetValidateBeforeCall(coreGradesGetEnrolledUsersForSearchWidgetRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreGradesGetEnrolledUsersForSearchWidget200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreGradesGetEnrolledUsersForSelector
     * @param coreGradesGetEnrolledUsersForSelectorRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreGradesGetEnrolledUsersForSelectorCall(CoreGradesGetEnrolledUsersForSelectorRequest coreGradesGetEnrolledUsersForSelectorRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreGradesGetEnrolledUsersForSelectorRequest;

        // create path and map variables
        String localVarPath = "/core_grades_get_enrolled_users_for_selector";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreGradesGetEnrolledUsersForSelectorValidateBeforeCall(CoreGradesGetEnrolledUsersForSelectorRequest coreGradesGetEnrolledUsersForSelectorRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreGradesGetEnrolledUsersForSelectorRequest' is set
        if (coreGradesGetEnrolledUsersForSelectorRequest == null) {
            throw new ApiException("Missing the required parameter 'coreGradesGetEnrolledUsersForSelectorRequest' when calling coreGradesGetEnrolledUsersForSelector(Async)");
        }

        return coreGradesGetEnrolledUsersForSelectorCall(coreGradesGetEnrolledUsersForSelectorRequest, _callback);

    }

    /**
     * Returns the enrolled users within and map some fields to the returned array of user objects.
     * Returns the enrolled users within and map some fields to the returned array of user objects.
     * @param coreGradesGetEnrolledUsersForSelectorRequest  (required)
     * @return CoreGradesGetEnrolledUsersForSelector200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreGradesGetEnrolledUsersForSelector200Response coreGradesGetEnrolledUsersForSelector(CoreGradesGetEnrolledUsersForSelectorRequest coreGradesGetEnrolledUsersForSelectorRequest) throws ApiException {
        ApiResponse<CoreGradesGetEnrolledUsersForSelector200Response> localVarResp = coreGradesGetEnrolledUsersForSelectorWithHttpInfo(coreGradesGetEnrolledUsersForSelectorRequest);
        return localVarResp.getData();
    }

    /**
     * Returns the enrolled users within and map some fields to the returned array of user objects.
     * Returns the enrolled users within and map some fields to the returned array of user objects.
     * @param coreGradesGetEnrolledUsersForSelectorRequest  (required)
     * @return ApiResponse&lt;CoreGradesGetEnrolledUsersForSelector200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreGradesGetEnrolledUsersForSelector200Response> coreGradesGetEnrolledUsersForSelectorWithHttpInfo(CoreGradesGetEnrolledUsersForSelectorRequest coreGradesGetEnrolledUsersForSelectorRequest) throws ApiException {
        okhttp3.Call localVarCall = coreGradesGetEnrolledUsersForSelectorValidateBeforeCall(coreGradesGetEnrolledUsersForSelectorRequest, null);
        Type localVarReturnType = new TypeToken<CoreGradesGetEnrolledUsersForSelector200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the enrolled users within and map some fields to the returned array of user objects. (asynchronously)
     * Returns the enrolled users within and map some fields to the returned array of user objects.
     * @param coreGradesGetEnrolledUsersForSelectorRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreGradesGetEnrolledUsersForSelectorAsync(CoreGradesGetEnrolledUsersForSelectorRequest coreGradesGetEnrolledUsersForSelectorRequest, final ApiCallback<CoreGradesGetEnrolledUsersForSelector200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreGradesGetEnrolledUsersForSelectorValidateBeforeCall(coreGradesGetEnrolledUsersForSelectorRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreGradesGetEnrolledUsersForSelector200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreGradesGetFeedback
     * @param coreGradesGetFeedbackRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreGradesGetFeedbackCall(CoreGradesGetFeedbackRequest coreGradesGetFeedbackRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreGradesGetFeedbackRequest;

        // create path and map variables
        String localVarPath = "/core_grades_get_feedback";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreGradesGetFeedbackValidateBeforeCall(CoreGradesGetFeedbackRequest coreGradesGetFeedbackRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreGradesGetFeedbackRequest' is set
        if (coreGradesGetFeedbackRequest == null) {
            throw new ApiException("Missing the required parameter 'coreGradesGetFeedbackRequest' when calling coreGradesGetFeedback(Async)");
        }

        return coreGradesGetFeedbackCall(coreGradesGetFeedbackRequest, _callback);

    }

    /**
     * Get the feedback data for a grade item
     * Get the feedback data for a grade item
     * @param coreGradesGetFeedbackRequest  (required)
     * @return CoreGradesGetFeedback200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreGradesGetFeedback200Response coreGradesGetFeedback(CoreGradesGetFeedbackRequest coreGradesGetFeedbackRequest) throws ApiException {
        ApiResponse<CoreGradesGetFeedback200Response> localVarResp = coreGradesGetFeedbackWithHttpInfo(coreGradesGetFeedbackRequest);
        return localVarResp.getData();
    }

    /**
     * Get the feedback data for a grade item
     * Get the feedback data for a grade item
     * @param coreGradesGetFeedbackRequest  (required)
     * @return ApiResponse&lt;CoreGradesGetFeedback200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreGradesGetFeedback200Response> coreGradesGetFeedbackWithHttpInfo(CoreGradesGetFeedbackRequest coreGradesGetFeedbackRequest) throws ApiException {
        okhttp3.Call localVarCall = coreGradesGetFeedbackValidateBeforeCall(coreGradesGetFeedbackRequest, null);
        Type localVarReturnType = new TypeToken<CoreGradesGetFeedback200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the feedback data for a grade item (asynchronously)
     * Get the feedback data for a grade item
     * @param coreGradesGetFeedbackRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreGradesGetFeedbackAsync(CoreGradesGetFeedbackRequest coreGradesGetFeedbackRequest, final ApiCallback<CoreGradesGetFeedback200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreGradesGetFeedbackValidateBeforeCall(coreGradesGetFeedbackRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreGradesGetFeedback200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreGradesGetGradableUsers
     * @param coreGradesGetGradableUsersRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreGradesGetGradableUsersCall(CoreGradesGetGradableUsersRequest coreGradesGetGradableUsersRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreGradesGetGradableUsersRequest;

        // create path and map variables
        String localVarPath = "/core_grades_get_gradable_users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreGradesGetGradableUsersValidateBeforeCall(CoreGradesGetGradableUsersRequest coreGradesGetGradableUsersRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreGradesGetGradableUsersRequest' is set
        if (coreGradesGetGradableUsersRequest == null) {
            throw new ApiException("Missing the required parameter 'coreGradesGetGradableUsersRequest' when calling coreGradesGetGradableUsers(Async)");
        }

        return coreGradesGetGradableUsersCall(coreGradesGetGradableUsersRequest, _callback);

    }

    /**
     * Returns the gradable users in a course
     * Returns the gradable users in a course
     * @param coreGradesGetGradableUsersRequest  (required)
     * @return CoreGradesGetGradableUsers200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreGradesGetGradableUsers200Response coreGradesGetGradableUsers(CoreGradesGetGradableUsersRequest coreGradesGetGradableUsersRequest) throws ApiException {
        ApiResponse<CoreGradesGetGradableUsers200Response> localVarResp = coreGradesGetGradableUsersWithHttpInfo(coreGradesGetGradableUsersRequest);
        return localVarResp.getData();
    }

    /**
     * Returns the gradable users in a course
     * Returns the gradable users in a course
     * @param coreGradesGetGradableUsersRequest  (required)
     * @return ApiResponse&lt;CoreGradesGetGradableUsers200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreGradesGetGradableUsers200Response> coreGradesGetGradableUsersWithHttpInfo(CoreGradesGetGradableUsersRequest coreGradesGetGradableUsersRequest) throws ApiException {
        okhttp3.Call localVarCall = coreGradesGetGradableUsersValidateBeforeCall(coreGradesGetGradableUsersRequest, null);
        Type localVarReturnType = new TypeToken<CoreGradesGetGradableUsers200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the gradable users in a course (asynchronously)
     * Returns the gradable users in a course
     * @param coreGradesGetGradableUsersRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreGradesGetGradableUsersAsync(CoreGradesGetGradableUsersRequest coreGradesGetGradableUsersRequest, final ApiCallback<CoreGradesGetGradableUsers200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreGradesGetGradableUsersValidateBeforeCall(coreGradesGetGradableUsersRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreGradesGetGradableUsers200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreGradesGetGradeTree
     * @param coreCompletionMarkCourseSelfCompletedRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON encoded data representing the course grade tree structure. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreGradesGetGradeTreeCall(CoreCompletionMarkCourseSelfCompletedRequest coreCompletionMarkCourseSelfCompletedRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCompletionMarkCourseSelfCompletedRequest;

        // create path and map variables
        String localVarPath = "/core_grades_get_grade_tree";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreGradesGetGradeTreeValidateBeforeCall(CoreCompletionMarkCourseSelfCompletedRequest coreCompletionMarkCourseSelfCompletedRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCompletionMarkCourseSelfCompletedRequest' is set
        if (coreCompletionMarkCourseSelfCompletedRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCompletionMarkCourseSelfCompletedRequest' when calling coreGradesGetGradeTree(Async)");
        }

        return coreGradesGetGradeTreeCall(coreCompletionMarkCourseSelfCompletedRequest, _callback);

    }

    /**
     * Get the grade tree structure for a course
     * Get the grade tree structure for a course
     * @param coreCompletionMarkCourseSelfCompletedRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON encoded data representing the course grade tree structure. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreGradesGetGradeTree(CoreCompletionMarkCourseSelfCompletedRequest coreCompletionMarkCourseSelfCompletedRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreGradesGetGradeTreeWithHttpInfo(coreCompletionMarkCourseSelfCompletedRequest);
        return localVarResp.getData();
    }

    /**
     * Get the grade tree structure for a course
     * Get the grade tree structure for a course
     * @param coreCompletionMarkCourseSelfCompletedRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON encoded data representing the course grade tree structure. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreGradesGetGradeTreeWithHttpInfo(CoreCompletionMarkCourseSelfCompletedRequest coreCompletionMarkCourseSelfCompletedRequest) throws ApiException {
        okhttp3.Call localVarCall = coreGradesGetGradeTreeValidateBeforeCall(coreCompletionMarkCourseSelfCompletedRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the grade tree structure for a course (asynchronously)
     * Get the grade tree structure for a course
     * @param coreCompletionMarkCourseSelfCompletedRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON encoded data representing the course grade tree structure. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreGradesGetGradeTreeAsync(CoreCompletionMarkCourseSelfCompletedRequest coreCompletionMarkCourseSelfCompletedRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreGradesGetGradeTreeValidateBeforeCall(coreCompletionMarkCourseSelfCompletedRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreGradesGetGradeitems
     * @param coreCompletionMarkCourseSelfCompletedRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreGradesGetGradeitemsCall(CoreCompletionMarkCourseSelfCompletedRequest coreCompletionMarkCourseSelfCompletedRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCompletionMarkCourseSelfCompletedRequest;

        // create path and map variables
        String localVarPath = "/core_grades_get_gradeitems";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreGradesGetGradeitemsValidateBeforeCall(CoreCompletionMarkCourseSelfCompletedRequest coreCompletionMarkCourseSelfCompletedRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCompletionMarkCourseSelfCompletedRequest' is set
        if (coreCompletionMarkCourseSelfCompletedRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCompletionMarkCourseSelfCompletedRequest' when calling coreGradesGetGradeitems(Async)");
        }

        return coreGradesGetGradeitemsCall(coreCompletionMarkCourseSelfCompletedRequest, _callback);

    }

    /**
     * Get the gradeitems for a course
     * Get the gradeitems for a course
     * @param coreCompletionMarkCourseSelfCompletedRequest  (required)
     * @return CoreGradesGetGradeitems200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreGradesGetGradeitems200Response coreGradesGetGradeitems(CoreCompletionMarkCourseSelfCompletedRequest coreCompletionMarkCourseSelfCompletedRequest) throws ApiException {
        ApiResponse<CoreGradesGetGradeitems200Response> localVarResp = coreGradesGetGradeitemsWithHttpInfo(coreCompletionMarkCourseSelfCompletedRequest);
        return localVarResp.getData();
    }

    /**
     * Get the gradeitems for a course
     * Get the gradeitems for a course
     * @param coreCompletionMarkCourseSelfCompletedRequest  (required)
     * @return ApiResponse&lt;CoreGradesGetGradeitems200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreGradesGetGradeitems200Response> coreGradesGetGradeitemsWithHttpInfo(CoreCompletionMarkCourseSelfCompletedRequest coreCompletionMarkCourseSelfCompletedRequest) throws ApiException {
        okhttp3.Call localVarCall = coreGradesGetGradeitemsValidateBeforeCall(coreCompletionMarkCourseSelfCompletedRequest, null);
        Type localVarReturnType = new TypeToken<CoreGradesGetGradeitems200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the gradeitems for a course (asynchronously)
     * Get the gradeitems for a course
     * @param coreCompletionMarkCourseSelfCompletedRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreGradesGetGradeitemsAsync(CoreCompletionMarkCourseSelfCompletedRequest coreCompletionMarkCourseSelfCompletedRequest, final ApiCallback<CoreGradesGetGradeitems200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreGradesGetGradeitemsValidateBeforeCall(coreCompletionMarkCourseSelfCompletedRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreGradesGetGradeitems200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreGradesGetGroupsForSearchWidget
     * @param coreGradesGetGroupsForSearchWidgetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreGradesGetGroupsForSearchWidgetCall(CoreGradesGetGroupsForSearchWidgetRequest coreGradesGetGroupsForSearchWidgetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreGradesGetGroupsForSearchWidgetRequest;

        // create path and map variables
        String localVarPath = "/core_grades_get_groups_for_search_widget";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreGradesGetGroupsForSearchWidgetValidateBeforeCall(CoreGradesGetGroupsForSearchWidgetRequest coreGradesGetGroupsForSearchWidgetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreGradesGetGroupsForSearchWidgetRequest' is set
        if (coreGradesGetGroupsForSearchWidgetRequest == null) {
            throw new ApiException("Missing the required parameter 'coreGradesGetGroupsForSearchWidgetRequest' when calling coreGradesGetGroupsForSearchWidget(Async)");
        }

        return coreGradesGetGroupsForSearchWidgetCall(coreGradesGetGroupsForSearchWidgetRequest, _callback);

    }

    /**
     * ** DEPRECATED ** Please do not call this function any more. Use core_group_get_groups_for_selector instead. Get the group/(s) for a course
     * ** DEPRECATED ** Please do not call this function any more. Use core_group_get_groups_for_selector instead. Get the group/(s) for a course
     * @param coreGradesGetGroupsForSearchWidgetRequest  (required)
     * @return CoreGradesGetGroupsForSearchWidget200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreGradesGetGroupsForSearchWidget200Response coreGradesGetGroupsForSearchWidget(CoreGradesGetGroupsForSearchWidgetRequest coreGradesGetGroupsForSearchWidgetRequest) throws ApiException {
        ApiResponse<CoreGradesGetGroupsForSearchWidget200Response> localVarResp = coreGradesGetGroupsForSearchWidgetWithHttpInfo(coreGradesGetGroupsForSearchWidgetRequest);
        return localVarResp.getData();
    }

    /**
     * ** DEPRECATED ** Please do not call this function any more. Use core_group_get_groups_for_selector instead. Get the group/(s) for a course
     * ** DEPRECATED ** Please do not call this function any more. Use core_group_get_groups_for_selector instead. Get the group/(s) for a course
     * @param coreGradesGetGroupsForSearchWidgetRequest  (required)
     * @return ApiResponse&lt;CoreGradesGetGroupsForSearchWidget200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreGradesGetGroupsForSearchWidget200Response> coreGradesGetGroupsForSearchWidgetWithHttpInfo(CoreGradesGetGroupsForSearchWidgetRequest coreGradesGetGroupsForSearchWidgetRequest) throws ApiException {
        okhttp3.Call localVarCall = coreGradesGetGroupsForSearchWidgetValidateBeforeCall(coreGradesGetGroupsForSearchWidgetRequest, null);
        Type localVarReturnType = new TypeToken<CoreGradesGetGroupsForSearchWidget200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * ** DEPRECATED ** Please do not call this function any more. Use core_group_get_groups_for_selector instead. Get the group/(s) for a course (asynchronously)
     * ** DEPRECATED ** Please do not call this function any more. Use core_group_get_groups_for_selector instead. Get the group/(s) for a course
     * @param coreGradesGetGroupsForSearchWidgetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreGradesGetGroupsForSearchWidgetAsync(CoreGradesGetGroupsForSearchWidgetRequest coreGradesGetGroupsForSearchWidgetRequest, final ApiCallback<CoreGradesGetGroupsForSearchWidget200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreGradesGetGroupsForSearchWidgetValidateBeforeCall(coreGradesGetGroupsForSearchWidgetRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreGradesGetGroupsForSearchWidget200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreGradesGetGroupsForSelector
     * @param coreGradesGetGroupsForSearchWidgetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreGradesGetGroupsForSelectorCall(CoreGradesGetGroupsForSearchWidgetRequest coreGradesGetGroupsForSearchWidgetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreGradesGetGroupsForSearchWidgetRequest;

        // create path and map variables
        String localVarPath = "/core_grades_get_groups_for_selector";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreGradesGetGroupsForSelectorValidateBeforeCall(CoreGradesGetGroupsForSearchWidgetRequest coreGradesGetGroupsForSearchWidgetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreGradesGetGroupsForSearchWidgetRequest' is set
        if (coreGradesGetGroupsForSearchWidgetRequest == null) {
            throw new ApiException("Missing the required parameter 'coreGradesGetGroupsForSearchWidgetRequest' when calling coreGradesGetGroupsForSelector(Async)");
        }

        return coreGradesGetGroupsForSelectorCall(coreGradesGetGroupsForSearchWidgetRequest, _callback);

    }

    /**
     * ** DEPRECATED ** Please do not call this function any more. Use core_group_get_groups_for_selector instead. Get the group/(s) for a course
     * ** DEPRECATED ** Please do not call this function any more. Use core_group_get_groups_for_selector instead. Get the group/(s) for a course
     * @param coreGradesGetGroupsForSearchWidgetRequest  (required)
     * @return CoreGradesGetGroupsForSelector200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreGradesGetGroupsForSelector200Response coreGradesGetGroupsForSelector(CoreGradesGetGroupsForSearchWidgetRequest coreGradesGetGroupsForSearchWidgetRequest) throws ApiException {
        ApiResponse<CoreGradesGetGroupsForSelector200Response> localVarResp = coreGradesGetGroupsForSelectorWithHttpInfo(coreGradesGetGroupsForSearchWidgetRequest);
        return localVarResp.getData();
    }

    /**
     * ** DEPRECATED ** Please do not call this function any more. Use core_group_get_groups_for_selector instead. Get the group/(s) for a course
     * ** DEPRECATED ** Please do not call this function any more. Use core_group_get_groups_for_selector instead. Get the group/(s) for a course
     * @param coreGradesGetGroupsForSearchWidgetRequest  (required)
     * @return ApiResponse&lt;CoreGradesGetGroupsForSelector200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreGradesGetGroupsForSelector200Response> coreGradesGetGroupsForSelectorWithHttpInfo(CoreGradesGetGroupsForSearchWidgetRequest coreGradesGetGroupsForSearchWidgetRequest) throws ApiException {
        okhttp3.Call localVarCall = coreGradesGetGroupsForSelectorValidateBeforeCall(coreGradesGetGroupsForSearchWidgetRequest, null);
        Type localVarReturnType = new TypeToken<CoreGradesGetGroupsForSelector200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * ** DEPRECATED ** Please do not call this function any more. Use core_group_get_groups_for_selector instead. Get the group/(s) for a course (asynchronously)
     * ** DEPRECATED ** Please do not call this function any more. Use core_group_get_groups_for_selector instead. Get the group/(s) for a course
     * @param coreGradesGetGroupsForSearchWidgetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreGradesGetGroupsForSelectorAsync(CoreGradesGetGroupsForSearchWidgetRequest coreGradesGetGroupsForSearchWidgetRequest, final ApiCallback<CoreGradesGetGroupsForSelector200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreGradesGetGroupsForSelectorValidateBeforeCall(coreGradesGetGroupsForSearchWidgetRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreGradesGetGroupsForSelector200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreGradesGraderGradingpanelPointFetch
     * @param coreGradesGraderGradingpanelPointFetchRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreGradesGraderGradingpanelPointFetchCall(CoreGradesGraderGradingpanelPointFetchRequest coreGradesGraderGradingpanelPointFetchRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreGradesGraderGradingpanelPointFetchRequest;

        // create path and map variables
        String localVarPath = "/core_grades_grader_gradingpanel_point_fetch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreGradesGraderGradingpanelPointFetchValidateBeforeCall(CoreGradesGraderGradingpanelPointFetchRequest coreGradesGraderGradingpanelPointFetchRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreGradesGraderGradingpanelPointFetchRequest' is set
        if (coreGradesGraderGradingpanelPointFetchRequest == null) {
            throw new ApiException("Missing the required parameter 'coreGradesGraderGradingpanelPointFetchRequest' when calling coreGradesGraderGradingpanelPointFetch(Async)");
        }

        return coreGradesGraderGradingpanelPointFetchCall(coreGradesGraderGradingpanelPointFetchRequest, _callback);

    }

    /**
     * Fetch the data required to display the grader grading panel for simple grading, creating the grade item if required
     * Fetch the data required to display the grader grading panel for simple grading, creating the grade item if required
     * @param coreGradesGraderGradingpanelPointFetchRequest  (required)
     * @return CoreGradesGraderGradingpanelPointFetch200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreGradesGraderGradingpanelPointFetch200Response coreGradesGraderGradingpanelPointFetch(CoreGradesGraderGradingpanelPointFetchRequest coreGradesGraderGradingpanelPointFetchRequest) throws ApiException {
        ApiResponse<CoreGradesGraderGradingpanelPointFetch200Response> localVarResp = coreGradesGraderGradingpanelPointFetchWithHttpInfo(coreGradesGraderGradingpanelPointFetchRequest);
        return localVarResp.getData();
    }

    /**
     * Fetch the data required to display the grader grading panel for simple grading, creating the grade item if required
     * Fetch the data required to display the grader grading panel for simple grading, creating the grade item if required
     * @param coreGradesGraderGradingpanelPointFetchRequest  (required)
     * @return ApiResponse&lt;CoreGradesGraderGradingpanelPointFetch200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreGradesGraderGradingpanelPointFetch200Response> coreGradesGraderGradingpanelPointFetchWithHttpInfo(CoreGradesGraderGradingpanelPointFetchRequest coreGradesGraderGradingpanelPointFetchRequest) throws ApiException {
        okhttp3.Call localVarCall = coreGradesGraderGradingpanelPointFetchValidateBeforeCall(coreGradesGraderGradingpanelPointFetchRequest, null);
        Type localVarReturnType = new TypeToken<CoreGradesGraderGradingpanelPointFetch200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch the data required to display the grader grading panel for simple grading, creating the grade item if required (asynchronously)
     * Fetch the data required to display the grader grading panel for simple grading, creating the grade item if required
     * @param coreGradesGraderGradingpanelPointFetchRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreGradesGraderGradingpanelPointFetchAsync(CoreGradesGraderGradingpanelPointFetchRequest coreGradesGraderGradingpanelPointFetchRequest, final ApiCallback<CoreGradesGraderGradingpanelPointFetch200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreGradesGraderGradingpanelPointFetchValidateBeforeCall(coreGradesGraderGradingpanelPointFetchRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreGradesGraderGradingpanelPointFetch200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreGradesGraderGradingpanelPointStore
     * @param coreGradesGraderGradingpanelPointStoreRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreGradesGraderGradingpanelPointStoreCall(CoreGradesGraderGradingpanelPointStoreRequest coreGradesGraderGradingpanelPointStoreRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreGradesGraderGradingpanelPointStoreRequest;

        // create path and map variables
        String localVarPath = "/core_grades_grader_gradingpanel_point_store";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreGradesGraderGradingpanelPointStoreValidateBeforeCall(CoreGradesGraderGradingpanelPointStoreRequest coreGradesGraderGradingpanelPointStoreRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreGradesGraderGradingpanelPointStoreRequest' is set
        if (coreGradesGraderGradingpanelPointStoreRequest == null) {
            throw new ApiException("Missing the required parameter 'coreGradesGraderGradingpanelPointStoreRequest' when calling coreGradesGraderGradingpanelPointStore(Async)");
        }

        return coreGradesGraderGradingpanelPointStoreCall(coreGradesGraderGradingpanelPointStoreRequest, _callback);

    }

    /**
     * Store the data required to display the grader grading panel for simple grading
     * Store the data required to display the grader grading panel for simple grading
     * @param coreGradesGraderGradingpanelPointStoreRequest  (required)
     * @return CoreGradesGraderGradingpanelPointStore200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreGradesGraderGradingpanelPointStore200Response coreGradesGraderGradingpanelPointStore(CoreGradesGraderGradingpanelPointStoreRequest coreGradesGraderGradingpanelPointStoreRequest) throws ApiException {
        ApiResponse<CoreGradesGraderGradingpanelPointStore200Response> localVarResp = coreGradesGraderGradingpanelPointStoreWithHttpInfo(coreGradesGraderGradingpanelPointStoreRequest);
        return localVarResp.getData();
    }

    /**
     * Store the data required to display the grader grading panel for simple grading
     * Store the data required to display the grader grading panel for simple grading
     * @param coreGradesGraderGradingpanelPointStoreRequest  (required)
     * @return ApiResponse&lt;CoreGradesGraderGradingpanelPointStore200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreGradesGraderGradingpanelPointStore200Response> coreGradesGraderGradingpanelPointStoreWithHttpInfo(CoreGradesGraderGradingpanelPointStoreRequest coreGradesGraderGradingpanelPointStoreRequest) throws ApiException {
        okhttp3.Call localVarCall = coreGradesGraderGradingpanelPointStoreValidateBeforeCall(coreGradesGraderGradingpanelPointStoreRequest, null);
        Type localVarReturnType = new TypeToken<CoreGradesGraderGradingpanelPointStore200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Store the data required to display the grader grading panel for simple grading (asynchronously)
     * Store the data required to display the grader grading panel for simple grading
     * @param coreGradesGraderGradingpanelPointStoreRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreGradesGraderGradingpanelPointStoreAsync(CoreGradesGraderGradingpanelPointStoreRequest coreGradesGraderGradingpanelPointStoreRequest, final ApiCallback<CoreGradesGraderGradingpanelPointStore200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreGradesGraderGradingpanelPointStoreValidateBeforeCall(coreGradesGraderGradingpanelPointStoreRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreGradesGraderGradingpanelPointStore200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreGradesGraderGradingpanelScaleFetch
     * @param coreGradesGraderGradingpanelScaleFetchRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreGradesGraderGradingpanelScaleFetchCall(CoreGradesGraderGradingpanelScaleFetchRequest coreGradesGraderGradingpanelScaleFetchRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreGradesGraderGradingpanelScaleFetchRequest;

        // create path and map variables
        String localVarPath = "/core_grades_grader_gradingpanel_scale_fetch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreGradesGraderGradingpanelScaleFetchValidateBeforeCall(CoreGradesGraderGradingpanelScaleFetchRequest coreGradesGraderGradingpanelScaleFetchRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreGradesGraderGradingpanelScaleFetchRequest' is set
        if (coreGradesGraderGradingpanelScaleFetchRequest == null) {
            throw new ApiException("Missing the required parameter 'coreGradesGraderGradingpanelScaleFetchRequest' when calling coreGradesGraderGradingpanelScaleFetch(Async)");
        }

        return coreGradesGraderGradingpanelScaleFetchCall(coreGradesGraderGradingpanelScaleFetchRequest, _callback);

    }

    /**
     * Fetch the data required to display the grader grading panel for scale-based grading, creating the grade item if required
     * Fetch the data required to display the grader grading panel for scale-based grading, creating the grade item if required
     * @param coreGradesGraderGradingpanelScaleFetchRequest  (required)
     * @return CoreGradesGraderGradingpanelScaleFetch200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreGradesGraderGradingpanelScaleFetch200Response coreGradesGraderGradingpanelScaleFetch(CoreGradesGraderGradingpanelScaleFetchRequest coreGradesGraderGradingpanelScaleFetchRequest) throws ApiException {
        ApiResponse<CoreGradesGraderGradingpanelScaleFetch200Response> localVarResp = coreGradesGraderGradingpanelScaleFetchWithHttpInfo(coreGradesGraderGradingpanelScaleFetchRequest);
        return localVarResp.getData();
    }

    /**
     * Fetch the data required to display the grader grading panel for scale-based grading, creating the grade item if required
     * Fetch the data required to display the grader grading panel for scale-based grading, creating the grade item if required
     * @param coreGradesGraderGradingpanelScaleFetchRequest  (required)
     * @return ApiResponse&lt;CoreGradesGraderGradingpanelScaleFetch200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreGradesGraderGradingpanelScaleFetch200Response> coreGradesGraderGradingpanelScaleFetchWithHttpInfo(CoreGradesGraderGradingpanelScaleFetchRequest coreGradesGraderGradingpanelScaleFetchRequest) throws ApiException {
        okhttp3.Call localVarCall = coreGradesGraderGradingpanelScaleFetchValidateBeforeCall(coreGradesGraderGradingpanelScaleFetchRequest, null);
        Type localVarReturnType = new TypeToken<CoreGradesGraderGradingpanelScaleFetch200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch the data required to display the grader grading panel for scale-based grading, creating the grade item if required (asynchronously)
     * Fetch the data required to display the grader grading panel for scale-based grading, creating the grade item if required
     * @param coreGradesGraderGradingpanelScaleFetchRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreGradesGraderGradingpanelScaleFetchAsync(CoreGradesGraderGradingpanelScaleFetchRequest coreGradesGraderGradingpanelScaleFetchRequest, final ApiCallback<CoreGradesGraderGradingpanelScaleFetch200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreGradesGraderGradingpanelScaleFetchValidateBeforeCall(coreGradesGraderGradingpanelScaleFetchRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreGradesGraderGradingpanelScaleFetch200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreGradesGraderGradingpanelScaleStore
     * @param coreGradesGraderGradingpanelScaleStoreRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreGradesGraderGradingpanelScaleStoreCall(CoreGradesGraderGradingpanelScaleStoreRequest coreGradesGraderGradingpanelScaleStoreRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreGradesGraderGradingpanelScaleStoreRequest;

        // create path and map variables
        String localVarPath = "/core_grades_grader_gradingpanel_scale_store";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreGradesGraderGradingpanelScaleStoreValidateBeforeCall(CoreGradesGraderGradingpanelScaleStoreRequest coreGradesGraderGradingpanelScaleStoreRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreGradesGraderGradingpanelScaleStoreRequest' is set
        if (coreGradesGraderGradingpanelScaleStoreRequest == null) {
            throw new ApiException("Missing the required parameter 'coreGradesGraderGradingpanelScaleStoreRequest' when calling coreGradesGraderGradingpanelScaleStore(Async)");
        }

        return coreGradesGraderGradingpanelScaleStoreCall(coreGradesGraderGradingpanelScaleStoreRequest, _callback);

    }

    /**
     * Store the data required to display the grader grading panel for scale-based grading
     * Store the data required to display the grader grading panel for scale-based grading
     * @param coreGradesGraderGradingpanelScaleStoreRequest  (required)
     * @return CoreGradesGraderGradingpanelScaleStore200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreGradesGraderGradingpanelScaleStore200Response coreGradesGraderGradingpanelScaleStore(CoreGradesGraderGradingpanelScaleStoreRequest coreGradesGraderGradingpanelScaleStoreRequest) throws ApiException {
        ApiResponse<CoreGradesGraderGradingpanelScaleStore200Response> localVarResp = coreGradesGraderGradingpanelScaleStoreWithHttpInfo(coreGradesGraderGradingpanelScaleStoreRequest);
        return localVarResp.getData();
    }

    /**
     * Store the data required to display the grader grading panel for scale-based grading
     * Store the data required to display the grader grading panel for scale-based grading
     * @param coreGradesGraderGradingpanelScaleStoreRequest  (required)
     * @return ApiResponse&lt;CoreGradesGraderGradingpanelScaleStore200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreGradesGraderGradingpanelScaleStore200Response> coreGradesGraderGradingpanelScaleStoreWithHttpInfo(CoreGradesGraderGradingpanelScaleStoreRequest coreGradesGraderGradingpanelScaleStoreRequest) throws ApiException {
        okhttp3.Call localVarCall = coreGradesGraderGradingpanelScaleStoreValidateBeforeCall(coreGradesGraderGradingpanelScaleStoreRequest, null);
        Type localVarReturnType = new TypeToken<CoreGradesGraderGradingpanelScaleStore200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Store the data required to display the grader grading panel for scale-based grading (asynchronously)
     * Store the data required to display the grader grading panel for scale-based grading
     * @param coreGradesGraderGradingpanelScaleStoreRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreGradesGraderGradingpanelScaleStoreAsync(CoreGradesGraderGradingpanelScaleStoreRequest coreGradesGraderGradingpanelScaleStoreRequest, final ApiCallback<CoreGradesGraderGradingpanelScaleStore200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreGradesGraderGradingpanelScaleStoreValidateBeforeCall(coreGradesGraderGradingpanelScaleStoreRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreGradesGraderGradingpanelScaleStore200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreGradesUpdateGrades
     * @param coreGradesUpdateGradesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A value like 0 &#x3D;&gt; OK, 1 &#x3D;&gt; FAILED             as defined in lib/grade/constants.php </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreGradesUpdateGradesCall(CoreGradesUpdateGradesRequest coreGradesUpdateGradesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreGradesUpdateGradesRequest;

        // create path and map variables
        String localVarPath = "/core_grades_update_grades";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreGradesUpdateGradesValidateBeforeCall(CoreGradesUpdateGradesRequest coreGradesUpdateGradesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreGradesUpdateGradesRequest' is set
        if (coreGradesUpdateGradesRequest == null) {
            throw new ApiException("Missing the required parameter 'coreGradesUpdateGradesRequest' when calling coreGradesUpdateGrades(Async)");
        }

        return coreGradesUpdateGradesCall(coreGradesUpdateGradesRequest, _callback);

    }

    /**
     * Update a grade item and associated student grades.
     * Update a grade item and associated student grades.
     * @param coreGradesUpdateGradesRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A value like 0 &#x3D;&gt; OK, 1 &#x3D;&gt; FAILED             as defined in lib/grade/constants.php </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreGradesUpdateGrades(CoreGradesUpdateGradesRequest coreGradesUpdateGradesRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreGradesUpdateGradesWithHttpInfo(coreGradesUpdateGradesRequest);
        return localVarResp.getData();
    }

    /**
     * Update a grade item and associated student grades.
     * Update a grade item and associated student grades.
     * @param coreGradesUpdateGradesRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A value like 0 &#x3D;&gt; OK, 1 &#x3D;&gt; FAILED             as defined in lib/grade/constants.php </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreGradesUpdateGradesWithHttpInfo(CoreGradesUpdateGradesRequest coreGradesUpdateGradesRequest) throws ApiException {
        okhttp3.Call localVarCall = coreGradesUpdateGradesValidateBeforeCall(coreGradesUpdateGradesRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a grade item and associated student grades. (asynchronously)
     * Update a grade item and associated student grades.
     * @param coreGradesUpdateGradesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A value like 0 &#x3D;&gt; OK, 1 &#x3D;&gt; FAILED             as defined in lib/grade/constants.php </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreGradesUpdateGradesAsync(CoreGradesUpdateGradesRequest coreGradesUpdateGradesRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreGradesUpdateGradesValidateBeforeCall(coreGradesUpdateGradesRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreGradingGetDefinitions
     * @param coreGradingGetDefinitionsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreGradingGetDefinitionsCall(CoreGradingGetDefinitionsRequest coreGradingGetDefinitionsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreGradingGetDefinitionsRequest;

        // create path and map variables
        String localVarPath = "/core_grading_get_definitions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreGradingGetDefinitionsValidateBeforeCall(CoreGradingGetDefinitionsRequest coreGradingGetDefinitionsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreGradingGetDefinitionsRequest' is set
        if (coreGradingGetDefinitionsRequest == null) {
            throw new ApiException("Missing the required parameter 'coreGradingGetDefinitionsRequest' when calling coreGradingGetDefinitions(Async)");
        }

        return coreGradingGetDefinitionsCall(coreGradingGetDefinitionsRequest, _callback);

    }

    /**
     * Get grading definitions
     * Get grading definitions
     * @param coreGradingGetDefinitionsRequest  (required)
     * @return CoreGradingGetDefinitions200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreGradingGetDefinitions200Response coreGradingGetDefinitions(CoreGradingGetDefinitionsRequest coreGradingGetDefinitionsRequest) throws ApiException {
        ApiResponse<CoreGradingGetDefinitions200Response> localVarResp = coreGradingGetDefinitionsWithHttpInfo(coreGradingGetDefinitionsRequest);
        return localVarResp.getData();
    }

    /**
     * Get grading definitions
     * Get grading definitions
     * @param coreGradingGetDefinitionsRequest  (required)
     * @return ApiResponse&lt;CoreGradingGetDefinitions200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreGradingGetDefinitions200Response> coreGradingGetDefinitionsWithHttpInfo(CoreGradingGetDefinitionsRequest coreGradingGetDefinitionsRequest) throws ApiException {
        okhttp3.Call localVarCall = coreGradingGetDefinitionsValidateBeforeCall(coreGradingGetDefinitionsRequest, null);
        Type localVarReturnType = new TypeToken<CoreGradingGetDefinitions200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get grading definitions (asynchronously)
     * Get grading definitions
     * @param coreGradingGetDefinitionsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreGradingGetDefinitionsAsync(CoreGradingGetDefinitionsRequest coreGradingGetDefinitionsRequest, final ApiCallback<CoreGradingGetDefinitions200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreGradingGetDefinitionsValidateBeforeCall(coreGradingGetDefinitionsRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreGradingGetDefinitions200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreGradingGetGradingformInstances
     * @param coreGradingGetGradingformInstancesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreGradingGetGradingformInstancesCall(CoreGradingGetGradingformInstancesRequest coreGradingGetGradingformInstancesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreGradingGetGradingformInstancesRequest;

        // create path and map variables
        String localVarPath = "/core_grading_get_gradingform_instances";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreGradingGetGradingformInstancesValidateBeforeCall(CoreGradingGetGradingformInstancesRequest coreGradingGetGradingformInstancesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreGradingGetGradingformInstancesRequest' is set
        if (coreGradingGetGradingformInstancesRequest == null) {
            throw new ApiException("Missing the required parameter 'coreGradingGetGradingformInstancesRequest' when calling coreGradingGetGradingformInstances(Async)");
        }

        return coreGradingGetGradingformInstancesCall(coreGradingGetGradingformInstancesRequest, _callback);

    }

    /**
     * Get grading form instances
     * Get grading form instances
     * @param coreGradingGetGradingformInstancesRequest  (required)
     * @return CoreGradingGetGradingformInstances200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreGradingGetGradingformInstances200Response coreGradingGetGradingformInstances(CoreGradingGetGradingformInstancesRequest coreGradingGetGradingformInstancesRequest) throws ApiException {
        ApiResponse<CoreGradingGetGradingformInstances200Response> localVarResp = coreGradingGetGradingformInstancesWithHttpInfo(coreGradingGetGradingformInstancesRequest);
        return localVarResp.getData();
    }

    /**
     * Get grading form instances
     * Get grading form instances
     * @param coreGradingGetGradingformInstancesRequest  (required)
     * @return ApiResponse&lt;CoreGradingGetGradingformInstances200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreGradingGetGradingformInstances200Response> coreGradingGetGradingformInstancesWithHttpInfo(CoreGradingGetGradingformInstancesRequest coreGradingGetGradingformInstancesRequest) throws ApiException {
        okhttp3.Call localVarCall = coreGradingGetGradingformInstancesValidateBeforeCall(coreGradingGetGradingformInstancesRequest, null);
        Type localVarReturnType = new TypeToken<CoreGradingGetGradingformInstances200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get grading form instances (asynchronously)
     * Get grading form instances
     * @param coreGradingGetGradingformInstancesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreGradingGetGradingformInstancesAsync(CoreGradingGetGradingformInstancesRequest coreGradingGetGradingformInstancesRequest, final ApiCallback<CoreGradingGetGradingformInstances200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreGradingGetGradingformInstancesValidateBeforeCall(coreGradingGetGradingformInstancesRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreGradingGetGradingformInstances200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreGradingSaveDefinitions
     * @param coreGradingSaveDefinitionsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreGradingSaveDefinitionsCall(CoreGradingSaveDefinitionsRequest coreGradingSaveDefinitionsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreGradingSaveDefinitionsRequest;

        // create path and map variables
        String localVarPath = "/core_grading_save_definitions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreGradingSaveDefinitionsValidateBeforeCall(CoreGradingSaveDefinitionsRequest coreGradingSaveDefinitionsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreGradingSaveDefinitionsRequest' is set
        if (coreGradingSaveDefinitionsRequest == null) {
            throw new ApiException("Missing the required parameter 'coreGradingSaveDefinitionsRequest' when calling coreGradingSaveDefinitions(Async)");
        }

        return coreGradingSaveDefinitionsCall(coreGradingSaveDefinitionsRequest, _callback);

    }

    /**
     * Save grading definitions
     * Save grading definitions
     * @param coreGradingSaveDefinitionsRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreGradingSaveDefinitions(CoreGradingSaveDefinitionsRequest coreGradingSaveDefinitionsRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreGradingSaveDefinitionsWithHttpInfo(coreGradingSaveDefinitionsRequest);
        return localVarResp.getData();
    }

    /**
     * Save grading definitions
     * Save grading definitions
     * @param coreGradingSaveDefinitionsRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreGradingSaveDefinitionsWithHttpInfo(CoreGradingSaveDefinitionsRequest coreGradingSaveDefinitionsRequest) throws ApiException {
        okhttp3.Call localVarCall = coreGradingSaveDefinitionsValidateBeforeCall(coreGradingSaveDefinitionsRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Save grading definitions (asynchronously)
     * Save grading definitions
     * @param coreGradingSaveDefinitionsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreGradingSaveDefinitionsAsync(CoreGradingSaveDefinitionsRequest coreGradingSaveDefinitionsRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreGradingSaveDefinitionsValidateBeforeCall(coreGradingSaveDefinitionsRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreGroupAddGroupMembers
     * @param coreGroupAddGroupMembersRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreGroupAddGroupMembersCall(CoreGroupAddGroupMembersRequest coreGroupAddGroupMembersRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreGroupAddGroupMembersRequest;

        // create path and map variables
        String localVarPath = "/core_group_add_group_members";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreGroupAddGroupMembersValidateBeforeCall(CoreGroupAddGroupMembersRequest coreGroupAddGroupMembersRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreGroupAddGroupMembersRequest' is set
        if (coreGroupAddGroupMembersRequest == null) {
            throw new ApiException("Missing the required parameter 'coreGroupAddGroupMembersRequest' when calling coreGroupAddGroupMembers(Async)");
        }

        return coreGroupAddGroupMembersCall(coreGroupAddGroupMembersRequest, _callback);

    }

    /**
     * Adds group members.
     * Adds group members.
     * @param coreGroupAddGroupMembersRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreGroupAddGroupMembers(CoreGroupAddGroupMembersRequest coreGroupAddGroupMembersRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreGroupAddGroupMembersWithHttpInfo(coreGroupAddGroupMembersRequest);
        return localVarResp.getData();
    }

    /**
     * Adds group members.
     * Adds group members.
     * @param coreGroupAddGroupMembersRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreGroupAddGroupMembersWithHttpInfo(CoreGroupAddGroupMembersRequest coreGroupAddGroupMembersRequest) throws ApiException {
        okhttp3.Call localVarCall = coreGroupAddGroupMembersValidateBeforeCall(coreGroupAddGroupMembersRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Adds group members. (asynchronously)
     * Adds group members.
     * @param coreGroupAddGroupMembersRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreGroupAddGroupMembersAsync(CoreGroupAddGroupMembersRequest coreGroupAddGroupMembersRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreGroupAddGroupMembersValidateBeforeCall(coreGroupAddGroupMembersRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreGroupAssignGrouping
     * @param coreGroupAssignGroupingRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreGroupAssignGroupingCall(CoreGroupAssignGroupingRequest coreGroupAssignGroupingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreGroupAssignGroupingRequest;

        // create path and map variables
        String localVarPath = "/core_group_assign_grouping";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreGroupAssignGroupingValidateBeforeCall(CoreGroupAssignGroupingRequest coreGroupAssignGroupingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreGroupAssignGroupingRequest' is set
        if (coreGroupAssignGroupingRequest == null) {
            throw new ApiException("Missing the required parameter 'coreGroupAssignGroupingRequest' when calling coreGroupAssignGrouping(Async)");
        }

        return coreGroupAssignGroupingCall(coreGroupAssignGroupingRequest, _callback);

    }

    /**
     * Assing groups from groupings
     * Assing groups from groupings
     * @param coreGroupAssignGroupingRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreGroupAssignGrouping(CoreGroupAssignGroupingRequest coreGroupAssignGroupingRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreGroupAssignGroupingWithHttpInfo(coreGroupAssignGroupingRequest);
        return localVarResp.getData();
    }

    /**
     * Assing groups from groupings
     * Assing groups from groupings
     * @param coreGroupAssignGroupingRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreGroupAssignGroupingWithHttpInfo(CoreGroupAssignGroupingRequest coreGroupAssignGroupingRequest) throws ApiException {
        okhttp3.Call localVarCall = coreGroupAssignGroupingValidateBeforeCall(coreGroupAssignGroupingRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Assing groups from groupings (asynchronously)
     * Assing groups from groupings
     * @param coreGroupAssignGroupingRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreGroupAssignGroupingAsync(CoreGroupAssignGroupingRequest coreGroupAssignGroupingRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreGroupAssignGroupingValidateBeforeCall(coreGroupAssignGroupingRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreGroupCreateGroupings
     * @param coreGroupCreateGroupingsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of grouping object. A grouping has an id, a courseid, a name and a description. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreGroupCreateGroupingsCall(CoreGroupCreateGroupingsRequest coreGroupCreateGroupingsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreGroupCreateGroupingsRequest;

        // create path and map variables
        String localVarPath = "/core_group_create_groupings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreGroupCreateGroupingsValidateBeforeCall(CoreGroupCreateGroupingsRequest coreGroupCreateGroupingsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreGroupCreateGroupingsRequest' is set
        if (coreGroupCreateGroupingsRequest == null) {
            throw new ApiException("Missing the required parameter 'coreGroupCreateGroupingsRequest' when calling coreGroupCreateGroupings(Async)");
        }

        return coreGroupCreateGroupingsCall(coreGroupCreateGroupingsRequest, _callback);

    }

    /**
     * Creates new groupings
     * Creates new groupings
     * @param coreGroupCreateGroupingsRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of grouping object. A grouping has an id, a courseid, a name and a description. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreGroupCreateGroupings(CoreGroupCreateGroupingsRequest coreGroupCreateGroupingsRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreGroupCreateGroupingsWithHttpInfo(coreGroupCreateGroupingsRequest);
        return localVarResp.getData();
    }

    /**
     * Creates new groupings
     * Creates new groupings
     * @param coreGroupCreateGroupingsRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of grouping object. A grouping has an id, a courseid, a name and a description. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreGroupCreateGroupingsWithHttpInfo(CoreGroupCreateGroupingsRequest coreGroupCreateGroupingsRequest) throws ApiException {
        okhttp3.Call localVarCall = coreGroupCreateGroupingsValidateBeforeCall(coreGroupCreateGroupingsRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates new groupings (asynchronously)
     * Creates new groupings
     * @param coreGroupCreateGroupingsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of grouping object. A grouping has an id, a courseid, a name and a description. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreGroupCreateGroupingsAsync(CoreGroupCreateGroupingsRequest coreGroupCreateGroupingsRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreGroupCreateGroupingsValidateBeforeCall(coreGroupCreateGroupingsRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreGroupCreateGroups
     * @param coreGroupCreateGroupsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of group object. A group has an id, a courseid, a name, a description and an enrolment key. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreGroupCreateGroupsCall(CoreGroupCreateGroupsRequest coreGroupCreateGroupsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreGroupCreateGroupsRequest;

        // create path and map variables
        String localVarPath = "/core_group_create_groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreGroupCreateGroupsValidateBeforeCall(CoreGroupCreateGroupsRequest coreGroupCreateGroupsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreGroupCreateGroupsRequest' is set
        if (coreGroupCreateGroupsRequest == null) {
            throw new ApiException("Missing the required parameter 'coreGroupCreateGroupsRequest' when calling coreGroupCreateGroups(Async)");
        }

        return coreGroupCreateGroupsCall(coreGroupCreateGroupsRequest, _callback);

    }

    /**
     * Creates new groups.
     * Creates new groups.
     * @param coreGroupCreateGroupsRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of group object. A group has an id, a courseid, a name, a description and an enrolment key. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreGroupCreateGroups(CoreGroupCreateGroupsRequest coreGroupCreateGroupsRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreGroupCreateGroupsWithHttpInfo(coreGroupCreateGroupsRequest);
        return localVarResp.getData();
    }

    /**
     * Creates new groups.
     * Creates new groups.
     * @param coreGroupCreateGroupsRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of group object. A group has an id, a courseid, a name, a description and an enrolment key. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreGroupCreateGroupsWithHttpInfo(CoreGroupCreateGroupsRequest coreGroupCreateGroupsRequest) throws ApiException {
        okhttp3.Call localVarCall = coreGroupCreateGroupsValidateBeforeCall(coreGroupCreateGroupsRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates new groups. (asynchronously)
     * Creates new groups.
     * @param coreGroupCreateGroupsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of group object. A group has an id, a courseid, a name, a description and an enrolment key. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreGroupCreateGroupsAsync(CoreGroupCreateGroupsRequest coreGroupCreateGroupsRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreGroupCreateGroupsValidateBeforeCall(coreGroupCreateGroupsRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreGroupDeleteGroupMembers
     * @param coreGroupDeleteGroupMembersRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreGroupDeleteGroupMembersCall(CoreGroupDeleteGroupMembersRequest coreGroupDeleteGroupMembersRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreGroupDeleteGroupMembersRequest;

        // create path and map variables
        String localVarPath = "/core_group_delete_group_members";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreGroupDeleteGroupMembersValidateBeforeCall(CoreGroupDeleteGroupMembersRequest coreGroupDeleteGroupMembersRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreGroupDeleteGroupMembersRequest' is set
        if (coreGroupDeleteGroupMembersRequest == null) {
            throw new ApiException("Missing the required parameter 'coreGroupDeleteGroupMembersRequest' when calling coreGroupDeleteGroupMembers(Async)");
        }

        return coreGroupDeleteGroupMembersCall(coreGroupDeleteGroupMembersRequest, _callback);

    }

    /**
     * Deletes group members.
     * Deletes group members.
     * @param coreGroupDeleteGroupMembersRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreGroupDeleteGroupMembers(CoreGroupDeleteGroupMembersRequest coreGroupDeleteGroupMembersRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreGroupDeleteGroupMembersWithHttpInfo(coreGroupDeleteGroupMembersRequest);
        return localVarResp.getData();
    }

    /**
     * Deletes group members.
     * Deletes group members.
     * @param coreGroupDeleteGroupMembersRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreGroupDeleteGroupMembersWithHttpInfo(CoreGroupDeleteGroupMembersRequest coreGroupDeleteGroupMembersRequest) throws ApiException {
        okhttp3.Call localVarCall = coreGroupDeleteGroupMembersValidateBeforeCall(coreGroupDeleteGroupMembersRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deletes group members. (asynchronously)
     * Deletes group members.
     * @param coreGroupDeleteGroupMembersRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreGroupDeleteGroupMembersAsync(CoreGroupDeleteGroupMembersRequest coreGroupDeleteGroupMembersRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreGroupDeleteGroupMembersValidateBeforeCall(coreGroupDeleteGroupMembersRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreGroupDeleteGroupings
     * @param coreGroupDeleteGroupingsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreGroupDeleteGroupingsCall(CoreGroupDeleteGroupingsRequest coreGroupDeleteGroupingsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreGroupDeleteGroupingsRequest;

        // create path and map variables
        String localVarPath = "/core_group_delete_groupings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreGroupDeleteGroupingsValidateBeforeCall(CoreGroupDeleteGroupingsRequest coreGroupDeleteGroupingsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreGroupDeleteGroupingsRequest' is set
        if (coreGroupDeleteGroupingsRequest == null) {
            throw new ApiException("Missing the required parameter 'coreGroupDeleteGroupingsRequest' when calling coreGroupDeleteGroupings(Async)");
        }

        return coreGroupDeleteGroupingsCall(coreGroupDeleteGroupingsRequest, _callback);

    }

    /**
     * Deletes all specified groupings.
     * Deletes all specified groupings.
     * @param coreGroupDeleteGroupingsRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreGroupDeleteGroupings(CoreGroupDeleteGroupingsRequest coreGroupDeleteGroupingsRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreGroupDeleteGroupingsWithHttpInfo(coreGroupDeleteGroupingsRequest);
        return localVarResp.getData();
    }

    /**
     * Deletes all specified groupings.
     * Deletes all specified groupings.
     * @param coreGroupDeleteGroupingsRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreGroupDeleteGroupingsWithHttpInfo(CoreGroupDeleteGroupingsRequest coreGroupDeleteGroupingsRequest) throws ApiException {
        okhttp3.Call localVarCall = coreGroupDeleteGroupingsValidateBeforeCall(coreGroupDeleteGroupingsRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deletes all specified groupings. (asynchronously)
     * Deletes all specified groupings.
     * @param coreGroupDeleteGroupingsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreGroupDeleteGroupingsAsync(CoreGroupDeleteGroupingsRequest coreGroupDeleteGroupingsRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreGroupDeleteGroupingsValidateBeforeCall(coreGroupDeleteGroupingsRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreGroupDeleteGroups
     * @param coreGroupDeleteGroupsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreGroupDeleteGroupsCall(CoreGroupDeleteGroupsRequest coreGroupDeleteGroupsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreGroupDeleteGroupsRequest;

        // create path and map variables
        String localVarPath = "/core_group_delete_groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreGroupDeleteGroupsValidateBeforeCall(CoreGroupDeleteGroupsRequest coreGroupDeleteGroupsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreGroupDeleteGroupsRequest' is set
        if (coreGroupDeleteGroupsRequest == null) {
            throw new ApiException("Missing the required parameter 'coreGroupDeleteGroupsRequest' when calling coreGroupDeleteGroups(Async)");
        }

        return coreGroupDeleteGroupsCall(coreGroupDeleteGroupsRequest, _callback);

    }

    /**
     * Deletes all specified groups.
     * Deletes all specified groups.
     * @param coreGroupDeleteGroupsRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreGroupDeleteGroups(CoreGroupDeleteGroupsRequest coreGroupDeleteGroupsRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreGroupDeleteGroupsWithHttpInfo(coreGroupDeleteGroupsRequest);
        return localVarResp.getData();
    }

    /**
     * Deletes all specified groups.
     * Deletes all specified groups.
     * @param coreGroupDeleteGroupsRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreGroupDeleteGroupsWithHttpInfo(CoreGroupDeleteGroupsRequest coreGroupDeleteGroupsRequest) throws ApiException {
        okhttp3.Call localVarCall = coreGroupDeleteGroupsValidateBeforeCall(coreGroupDeleteGroupsRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deletes all specified groups. (asynchronously)
     * Deletes all specified groups.
     * @param coreGroupDeleteGroupsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreGroupDeleteGroupsAsync(CoreGroupDeleteGroupsRequest coreGroupDeleteGroupsRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreGroupDeleteGroupsValidateBeforeCall(coreGroupDeleteGroupsRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreGroupGetActivityAllowedGroups
     * @param coreGroupGetActivityAllowedGroupsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreGroupGetActivityAllowedGroupsCall(CoreGroupGetActivityAllowedGroupsRequest coreGroupGetActivityAllowedGroupsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreGroupGetActivityAllowedGroupsRequest;

        // create path and map variables
        String localVarPath = "/core_group_get_activity_allowed_groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreGroupGetActivityAllowedGroupsValidateBeforeCall(CoreGroupGetActivityAllowedGroupsRequest coreGroupGetActivityAllowedGroupsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreGroupGetActivityAllowedGroupsRequest' is set
        if (coreGroupGetActivityAllowedGroupsRequest == null) {
            throw new ApiException("Missing the required parameter 'coreGroupGetActivityAllowedGroupsRequest' when calling coreGroupGetActivityAllowedGroups(Async)");
        }

        return coreGroupGetActivityAllowedGroupsCall(coreGroupGetActivityAllowedGroupsRequest, _callback);

    }

    /**
     * Gets a list of groups that the user is allowed to access within the specified activity.
     * Gets a list of groups that the user is allowed to access within the specified activity.
     * @param coreGroupGetActivityAllowedGroupsRequest  (required)
     * @return CoreGroupGetActivityAllowedGroups200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreGroupGetActivityAllowedGroups200Response coreGroupGetActivityAllowedGroups(CoreGroupGetActivityAllowedGroupsRequest coreGroupGetActivityAllowedGroupsRequest) throws ApiException {
        ApiResponse<CoreGroupGetActivityAllowedGroups200Response> localVarResp = coreGroupGetActivityAllowedGroupsWithHttpInfo(coreGroupGetActivityAllowedGroupsRequest);
        return localVarResp.getData();
    }

    /**
     * Gets a list of groups that the user is allowed to access within the specified activity.
     * Gets a list of groups that the user is allowed to access within the specified activity.
     * @param coreGroupGetActivityAllowedGroupsRequest  (required)
     * @return ApiResponse&lt;CoreGroupGetActivityAllowedGroups200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreGroupGetActivityAllowedGroups200Response> coreGroupGetActivityAllowedGroupsWithHttpInfo(CoreGroupGetActivityAllowedGroupsRequest coreGroupGetActivityAllowedGroupsRequest) throws ApiException {
        okhttp3.Call localVarCall = coreGroupGetActivityAllowedGroupsValidateBeforeCall(coreGroupGetActivityAllowedGroupsRequest, null);
        Type localVarReturnType = new TypeToken<CoreGroupGetActivityAllowedGroups200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a list of groups that the user is allowed to access within the specified activity. (asynchronously)
     * Gets a list of groups that the user is allowed to access within the specified activity.
     * @param coreGroupGetActivityAllowedGroupsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreGroupGetActivityAllowedGroupsAsync(CoreGroupGetActivityAllowedGroupsRequest coreGroupGetActivityAllowedGroupsRequest, final ApiCallback<CoreGroupGetActivityAllowedGroups200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreGroupGetActivityAllowedGroupsValidateBeforeCall(coreGroupGetActivityAllowedGroupsRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreGroupGetActivityAllowedGroups200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreGroupGetActivityGroupmode
     * @param coreGroupGetActivityGroupmodeRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreGroupGetActivityGroupmodeCall(CoreGroupGetActivityGroupmodeRequest coreGroupGetActivityGroupmodeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreGroupGetActivityGroupmodeRequest;

        // create path and map variables
        String localVarPath = "/core_group_get_activity_groupmode";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreGroupGetActivityGroupmodeValidateBeforeCall(CoreGroupGetActivityGroupmodeRequest coreGroupGetActivityGroupmodeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreGroupGetActivityGroupmodeRequest' is set
        if (coreGroupGetActivityGroupmodeRequest == null) {
            throw new ApiException("Missing the required parameter 'coreGroupGetActivityGroupmodeRequest' when calling coreGroupGetActivityGroupmode(Async)");
        }

        return coreGroupGetActivityGroupmodeCall(coreGroupGetActivityGroupmodeRequest, _callback);

    }

    /**
     * Returns effective groupmode used in a given activity.
     * Returns effective groupmode used in a given activity.
     * @param coreGroupGetActivityGroupmodeRequest  (required)
     * @return CoreGroupGetActivityGroupmode200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreGroupGetActivityGroupmode200Response coreGroupGetActivityGroupmode(CoreGroupGetActivityGroupmodeRequest coreGroupGetActivityGroupmodeRequest) throws ApiException {
        ApiResponse<CoreGroupGetActivityGroupmode200Response> localVarResp = coreGroupGetActivityGroupmodeWithHttpInfo(coreGroupGetActivityGroupmodeRequest);
        return localVarResp.getData();
    }

    /**
     * Returns effective groupmode used in a given activity.
     * Returns effective groupmode used in a given activity.
     * @param coreGroupGetActivityGroupmodeRequest  (required)
     * @return ApiResponse&lt;CoreGroupGetActivityGroupmode200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreGroupGetActivityGroupmode200Response> coreGroupGetActivityGroupmodeWithHttpInfo(CoreGroupGetActivityGroupmodeRequest coreGroupGetActivityGroupmodeRequest) throws ApiException {
        okhttp3.Call localVarCall = coreGroupGetActivityGroupmodeValidateBeforeCall(coreGroupGetActivityGroupmodeRequest, null);
        Type localVarReturnType = new TypeToken<CoreGroupGetActivityGroupmode200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns effective groupmode used in a given activity. (asynchronously)
     * Returns effective groupmode used in a given activity.
     * @param coreGroupGetActivityGroupmodeRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreGroupGetActivityGroupmodeAsync(CoreGroupGetActivityGroupmodeRequest coreGroupGetActivityGroupmodeRequest, final ApiCallback<CoreGroupGetActivityGroupmode200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreGroupGetActivityGroupmodeValidateBeforeCall(coreGroupGetActivityGroupmodeRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreGroupGetActivityGroupmode200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreGroupGetCourseGroupings
     * @param coreGroupGetCourseGroupingsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreGroupGetCourseGroupingsCall(CoreGroupGetCourseGroupingsRequest coreGroupGetCourseGroupingsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreGroupGetCourseGroupingsRequest;

        // create path and map variables
        String localVarPath = "/core_group_get_course_groupings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreGroupGetCourseGroupingsValidateBeforeCall(CoreGroupGetCourseGroupingsRequest coreGroupGetCourseGroupingsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreGroupGetCourseGroupingsRequest' is set
        if (coreGroupGetCourseGroupingsRequest == null) {
            throw new ApiException("Missing the required parameter 'coreGroupGetCourseGroupingsRequest' when calling coreGroupGetCourseGroupings(Async)");
        }

        return coreGroupGetCourseGroupingsCall(coreGroupGetCourseGroupingsRequest, _callback);

    }

    /**
     * Returns all groupings in specified course.
     * Returns all groupings in specified course.
     * @param coreGroupGetCourseGroupingsRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreGroupGetCourseGroupings(CoreGroupGetCourseGroupingsRequest coreGroupGetCourseGroupingsRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreGroupGetCourseGroupingsWithHttpInfo(coreGroupGetCourseGroupingsRequest);
        return localVarResp.getData();
    }

    /**
     * Returns all groupings in specified course.
     * Returns all groupings in specified course.
     * @param coreGroupGetCourseGroupingsRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreGroupGetCourseGroupingsWithHttpInfo(CoreGroupGetCourseGroupingsRequest coreGroupGetCourseGroupingsRequest) throws ApiException {
        okhttp3.Call localVarCall = coreGroupGetCourseGroupingsValidateBeforeCall(coreGroupGetCourseGroupingsRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns all groupings in specified course. (asynchronously)
     * Returns all groupings in specified course.
     * @param coreGroupGetCourseGroupingsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreGroupGetCourseGroupingsAsync(CoreGroupGetCourseGroupingsRequest coreGroupGetCourseGroupingsRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreGroupGetCourseGroupingsValidateBeforeCall(coreGroupGetCourseGroupingsRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreGroupGetCourseGroups
     * @param coreGroupGetCourseGroupingsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreGroupGetCourseGroupsCall(CoreGroupGetCourseGroupingsRequest coreGroupGetCourseGroupingsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreGroupGetCourseGroupingsRequest;

        // create path and map variables
        String localVarPath = "/core_group_get_course_groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreGroupGetCourseGroupsValidateBeforeCall(CoreGroupGetCourseGroupingsRequest coreGroupGetCourseGroupingsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreGroupGetCourseGroupingsRequest' is set
        if (coreGroupGetCourseGroupingsRequest == null) {
            throw new ApiException("Missing the required parameter 'coreGroupGetCourseGroupingsRequest' when calling coreGroupGetCourseGroups(Async)");
        }

        return coreGroupGetCourseGroupsCall(coreGroupGetCourseGroupingsRequest, _callback);

    }

    /**
     * Returns all groups in specified course.
     * Returns all groups in specified course.
     * @param coreGroupGetCourseGroupingsRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreGroupGetCourseGroups(CoreGroupGetCourseGroupingsRequest coreGroupGetCourseGroupingsRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreGroupGetCourseGroupsWithHttpInfo(coreGroupGetCourseGroupingsRequest);
        return localVarResp.getData();
    }

    /**
     * Returns all groups in specified course.
     * Returns all groups in specified course.
     * @param coreGroupGetCourseGroupingsRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreGroupGetCourseGroupsWithHttpInfo(CoreGroupGetCourseGroupingsRequest coreGroupGetCourseGroupingsRequest) throws ApiException {
        okhttp3.Call localVarCall = coreGroupGetCourseGroupsValidateBeforeCall(coreGroupGetCourseGroupingsRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns all groups in specified course. (asynchronously)
     * Returns all groups in specified course.
     * @param coreGroupGetCourseGroupingsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreGroupGetCourseGroupsAsync(CoreGroupGetCourseGroupingsRequest coreGroupGetCourseGroupingsRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreGroupGetCourseGroupsValidateBeforeCall(coreGroupGetCourseGroupingsRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreGroupGetCourseUserGroups
     * @param coreGroupGetCourseUserGroupsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreGroupGetCourseUserGroupsCall(CoreGroupGetCourseUserGroupsRequest coreGroupGetCourseUserGroupsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreGroupGetCourseUserGroupsRequest;

        // create path and map variables
        String localVarPath = "/core_group_get_course_user_groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreGroupGetCourseUserGroupsValidateBeforeCall(CoreGroupGetCourseUserGroupsRequest coreGroupGetCourseUserGroupsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreGroupGetCourseUserGroupsRequest' is set
        if (coreGroupGetCourseUserGroupsRequest == null) {
            throw new ApiException("Missing the required parameter 'coreGroupGetCourseUserGroupsRequest' when calling coreGroupGetCourseUserGroups(Async)");
        }

        return coreGroupGetCourseUserGroupsCall(coreGroupGetCourseUserGroupsRequest, _callback);

    }

    /**
     * Returns all groups in specified course for the specified user.
     * Returns all groups in specified course for the specified user.
     * @param coreGroupGetCourseUserGroupsRequest  (required)
     * @return CoreGroupGetCourseUserGroups200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreGroupGetCourseUserGroups200Response coreGroupGetCourseUserGroups(CoreGroupGetCourseUserGroupsRequest coreGroupGetCourseUserGroupsRequest) throws ApiException {
        ApiResponse<CoreGroupGetCourseUserGroups200Response> localVarResp = coreGroupGetCourseUserGroupsWithHttpInfo(coreGroupGetCourseUserGroupsRequest);
        return localVarResp.getData();
    }

    /**
     * Returns all groups in specified course for the specified user.
     * Returns all groups in specified course for the specified user.
     * @param coreGroupGetCourseUserGroupsRequest  (required)
     * @return ApiResponse&lt;CoreGroupGetCourseUserGroups200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreGroupGetCourseUserGroups200Response> coreGroupGetCourseUserGroupsWithHttpInfo(CoreGroupGetCourseUserGroupsRequest coreGroupGetCourseUserGroupsRequest) throws ApiException {
        okhttp3.Call localVarCall = coreGroupGetCourseUserGroupsValidateBeforeCall(coreGroupGetCourseUserGroupsRequest, null);
        Type localVarReturnType = new TypeToken<CoreGroupGetCourseUserGroups200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns all groups in specified course for the specified user. (asynchronously)
     * Returns all groups in specified course for the specified user.
     * @param coreGroupGetCourseUserGroupsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreGroupGetCourseUserGroupsAsync(CoreGroupGetCourseUserGroupsRequest coreGroupGetCourseUserGroupsRequest, final ApiCallback<CoreGroupGetCourseUserGroups200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreGroupGetCourseUserGroupsValidateBeforeCall(coreGroupGetCourseUserGroupsRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreGroupGetCourseUserGroups200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreGroupGetGroupMembers
     * @param coreGroupGetGroupMembersRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreGroupGetGroupMembersCall(CoreGroupGetGroupMembersRequest coreGroupGetGroupMembersRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreGroupGetGroupMembersRequest;

        // create path and map variables
        String localVarPath = "/core_group_get_group_members";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreGroupGetGroupMembersValidateBeforeCall(CoreGroupGetGroupMembersRequest coreGroupGetGroupMembersRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreGroupGetGroupMembersRequest' is set
        if (coreGroupGetGroupMembersRequest == null) {
            throw new ApiException("Missing the required parameter 'coreGroupGetGroupMembersRequest' when calling coreGroupGetGroupMembers(Async)");
        }

        return coreGroupGetGroupMembersCall(coreGroupGetGroupMembersRequest, _callback);

    }

    /**
     * Returns group members.
     * Returns group members.
     * @param coreGroupGetGroupMembersRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreGroupGetGroupMembers(CoreGroupGetGroupMembersRequest coreGroupGetGroupMembersRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreGroupGetGroupMembersWithHttpInfo(coreGroupGetGroupMembersRequest);
        return localVarResp.getData();
    }

    /**
     * Returns group members.
     * Returns group members.
     * @param coreGroupGetGroupMembersRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreGroupGetGroupMembersWithHttpInfo(CoreGroupGetGroupMembersRequest coreGroupGetGroupMembersRequest) throws ApiException {
        okhttp3.Call localVarCall = coreGroupGetGroupMembersValidateBeforeCall(coreGroupGetGroupMembersRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns group members. (asynchronously)
     * Returns group members.
     * @param coreGroupGetGroupMembersRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreGroupGetGroupMembersAsync(CoreGroupGetGroupMembersRequest coreGroupGetGroupMembersRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreGroupGetGroupMembersValidateBeforeCall(coreGroupGetGroupMembersRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreGroupGetGroupings
     * @param coreGroupGetGroupingsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreGroupGetGroupingsCall(CoreGroupGetGroupingsRequest coreGroupGetGroupingsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreGroupGetGroupingsRequest;

        // create path and map variables
        String localVarPath = "/core_group_get_groupings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreGroupGetGroupingsValidateBeforeCall(CoreGroupGetGroupingsRequest coreGroupGetGroupingsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreGroupGetGroupingsRequest' is set
        if (coreGroupGetGroupingsRequest == null) {
            throw new ApiException("Missing the required parameter 'coreGroupGetGroupingsRequest' when calling coreGroupGetGroupings(Async)");
        }

        return coreGroupGetGroupingsCall(coreGroupGetGroupingsRequest, _callback);

    }

    /**
     * Returns groupings details.
     * Returns groupings details.
     * @param coreGroupGetGroupingsRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreGroupGetGroupings(CoreGroupGetGroupingsRequest coreGroupGetGroupingsRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreGroupGetGroupingsWithHttpInfo(coreGroupGetGroupingsRequest);
        return localVarResp.getData();
    }

    /**
     * Returns groupings details.
     * Returns groupings details.
     * @param coreGroupGetGroupingsRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreGroupGetGroupingsWithHttpInfo(CoreGroupGetGroupingsRequest coreGroupGetGroupingsRequest) throws ApiException {
        okhttp3.Call localVarCall = coreGroupGetGroupingsValidateBeforeCall(coreGroupGetGroupingsRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns groupings details. (asynchronously)
     * Returns groupings details.
     * @param coreGroupGetGroupingsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreGroupGetGroupingsAsync(CoreGroupGetGroupingsRequest coreGroupGetGroupingsRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreGroupGetGroupingsValidateBeforeCall(coreGroupGetGroupingsRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreGroupGetGroups
     * @param coreGroupGetGroupMembersRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreGroupGetGroupsCall(CoreGroupGetGroupMembersRequest coreGroupGetGroupMembersRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreGroupGetGroupMembersRequest;

        // create path and map variables
        String localVarPath = "/core_group_get_groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreGroupGetGroupsValidateBeforeCall(CoreGroupGetGroupMembersRequest coreGroupGetGroupMembersRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreGroupGetGroupMembersRequest' is set
        if (coreGroupGetGroupMembersRequest == null) {
            throw new ApiException("Missing the required parameter 'coreGroupGetGroupMembersRequest' when calling coreGroupGetGroups(Async)");
        }

        return coreGroupGetGroupsCall(coreGroupGetGroupMembersRequest, _callback);

    }

    /**
     * Returns group details.
     * Returns group details.
     * @param coreGroupGetGroupMembersRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreGroupGetGroups(CoreGroupGetGroupMembersRequest coreGroupGetGroupMembersRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreGroupGetGroupsWithHttpInfo(coreGroupGetGroupMembersRequest);
        return localVarResp.getData();
    }

    /**
     * Returns group details.
     * Returns group details.
     * @param coreGroupGetGroupMembersRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreGroupGetGroupsWithHttpInfo(CoreGroupGetGroupMembersRequest coreGroupGetGroupMembersRequest) throws ApiException {
        okhttp3.Call localVarCall = coreGroupGetGroupsValidateBeforeCall(coreGroupGetGroupMembersRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns group details. (asynchronously)
     * Returns group details.
     * @param coreGroupGetGroupMembersRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreGroupGetGroupsAsync(CoreGroupGetGroupMembersRequest coreGroupGetGroupMembersRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreGroupGetGroupsValidateBeforeCall(coreGroupGetGroupMembersRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreGroupGetGroupsForSelector
     * @param coreGradesGetGroupsForSearchWidgetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreGroupGetGroupsForSelectorCall(CoreGradesGetGroupsForSearchWidgetRequest coreGradesGetGroupsForSearchWidgetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreGradesGetGroupsForSearchWidgetRequest;

        // create path and map variables
        String localVarPath = "/core_group_get_groups_for_selector";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreGroupGetGroupsForSelectorValidateBeforeCall(CoreGradesGetGroupsForSearchWidgetRequest coreGradesGetGroupsForSearchWidgetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreGradesGetGroupsForSearchWidgetRequest' is set
        if (coreGradesGetGroupsForSearchWidgetRequest == null) {
            throw new ApiException("Missing the required parameter 'coreGradesGetGroupsForSearchWidgetRequest' when calling coreGroupGetGroupsForSelector(Async)");
        }

        return coreGroupGetGroupsForSelectorCall(coreGradesGetGroupsForSearchWidgetRequest, _callback);

    }

    /**
     * Get the group/(s) for a course
     * Get the group/(s) for a course
     * @param coreGradesGetGroupsForSearchWidgetRequest  (required)
     * @return CoreGradesGetGroupsForSelector200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreGradesGetGroupsForSelector200Response coreGroupGetGroupsForSelector(CoreGradesGetGroupsForSearchWidgetRequest coreGradesGetGroupsForSearchWidgetRequest) throws ApiException {
        ApiResponse<CoreGradesGetGroupsForSelector200Response> localVarResp = coreGroupGetGroupsForSelectorWithHttpInfo(coreGradesGetGroupsForSearchWidgetRequest);
        return localVarResp.getData();
    }

    /**
     * Get the group/(s) for a course
     * Get the group/(s) for a course
     * @param coreGradesGetGroupsForSearchWidgetRequest  (required)
     * @return ApiResponse&lt;CoreGradesGetGroupsForSelector200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreGradesGetGroupsForSelector200Response> coreGroupGetGroupsForSelectorWithHttpInfo(CoreGradesGetGroupsForSearchWidgetRequest coreGradesGetGroupsForSearchWidgetRequest) throws ApiException {
        okhttp3.Call localVarCall = coreGroupGetGroupsForSelectorValidateBeforeCall(coreGradesGetGroupsForSearchWidgetRequest, null);
        Type localVarReturnType = new TypeToken<CoreGradesGetGroupsForSelector200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the group/(s) for a course (asynchronously)
     * Get the group/(s) for a course
     * @param coreGradesGetGroupsForSearchWidgetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreGroupGetGroupsForSelectorAsync(CoreGradesGetGroupsForSearchWidgetRequest coreGradesGetGroupsForSearchWidgetRequest, final ApiCallback<CoreGradesGetGroupsForSelector200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreGroupGetGroupsForSelectorValidateBeforeCall(coreGradesGetGroupsForSearchWidgetRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreGradesGetGroupsForSelector200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreGroupUnassignGrouping
     * @param coreGroupUnassignGroupingRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreGroupUnassignGroupingCall(CoreGroupUnassignGroupingRequest coreGroupUnassignGroupingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreGroupUnassignGroupingRequest;

        // create path and map variables
        String localVarPath = "/core_group_unassign_grouping";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreGroupUnassignGroupingValidateBeforeCall(CoreGroupUnassignGroupingRequest coreGroupUnassignGroupingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreGroupUnassignGroupingRequest' is set
        if (coreGroupUnassignGroupingRequest == null) {
            throw new ApiException("Missing the required parameter 'coreGroupUnassignGroupingRequest' when calling coreGroupUnassignGrouping(Async)");
        }

        return coreGroupUnassignGroupingCall(coreGroupUnassignGroupingRequest, _callback);

    }

    /**
     * Unassing groups from groupings
     * Unassing groups from groupings
     * @param coreGroupUnassignGroupingRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreGroupUnassignGrouping(CoreGroupUnassignGroupingRequest coreGroupUnassignGroupingRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreGroupUnassignGroupingWithHttpInfo(coreGroupUnassignGroupingRequest);
        return localVarResp.getData();
    }

    /**
     * Unassing groups from groupings
     * Unassing groups from groupings
     * @param coreGroupUnassignGroupingRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreGroupUnassignGroupingWithHttpInfo(CoreGroupUnassignGroupingRequest coreGroupUnassignGroupingRequest) throws ApiException {
        okhttp3.Call localVarCall = coreGroupUnassignGroupingValidateBeforeCall(coreGroupUnassignGroupingRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Unassing groups from groupings (asynchronously)
     * Unassing groups from groupings
     * @param coreGroupUnassignGroupingRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreGroupUnassignGroupingAsync(CoreGroupUnassignGroupingRequest coreGroupUnassignGroupingRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreGroupUnassignGroupingValidateBeforeCall(coreGroupUnassignGroupingRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreGroupUpdateGroupings
     * @param coreGroupUpdateGroupingsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreGroupUpdateGroupingsCall(CoreGroupUpdateGroupingsRequest coreGroupUpdateGroupingsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreGroupUpdateGroupingsRequest;

        // create path and map variables
        String localVarPath = "/core_group_update_groupings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreGroupUpdateGroupingsValidateBeforeCall(CoreGroupUpdateGroupingsRequest coreGroupUpdateGroupingsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreGroupUpdateGroupingsRequest' is set
        if (coreGroupUpdateGroupingsRequest == null) {
            throw new ApiException("Missing the required parameter 'coreGroupUpdateGroupingsRequest' when calling coreGroupUpdateGroupings(Async)");
        }

        return coreGroupUpdateGroupingsCall(coreGroupUpdateGroupingsRequest, _callback);

    }

    /**
     * Updates existing groupings
     * Updates existing groupings
     * @param coreGroupUpdateGroupingsRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreGroupUpdateGroupings(CoreGroupUpdateGroupingsRequest coreGroupUpdateGroupingsRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreGroupUpdateGroupingsWithHttpInfo(coreGroupUpdateGroupingsRequest);
        return localVarResp.getData();
    }

    /**
     * Updates existing groupings
     * Updates existing groupings
     * @param coreGroupUpdateGroupingsRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreGroupUpdateGroupingsWithHttpInfo(CoreGroupUpdateGroupingsRequest coreGroupUpdateGroupingsRequest) throws ApiException {
        okhttp3.Call localVarCall = coreGroupUpdateGroupingsValidateBeforeCall(coreGroupUpdateGroupingsRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates existing groupings (asynchronously)
     * Updates existing groupings
     * @param coreGroupUpdateGroupingsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreGroupUpdateGroupingsAsync(CoreGroupUpdateGroupingsRequest coreGroupUpdateGroupingsRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreGroupUpdateGroupingsValidateBeforeCall(coreGroupUpdateGroupingsRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreGroupUpdateGroups
     * @param coreGroupUpdateGroupsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreGroupUpdateGroupsCall(CoreGroupUpdateGroupsRequest coreGroupUpdateGroupsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreGroupUpdateGroupsRequest;

        // create path and map variables
        String localVarPath = "/core_group_update_groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreGroupUpdateGroupsValidateBeforeCall(CoreGroupUpdateGroupsRequest coreGroupUpdateGroupsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreGroupUpdateGroupsRequest' is set
        if (coreGroupUpdateGroupsRequest == null) {
            throw new ApiException("Missing the required parameter 'coreGroupUpdateGroupsRequest' when calling coreGroupUpdateGroups(Async)");
        }

        return coreGroupUpdateGroupsCall(coreGroupUpdateGroupsRequest, _callback);

    }

    /**
     * Updates existing groups.
     * Updates existing groups.
     * @param coreGroupUpdateGroupsRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreGroupUpdateGroups(CoreGroupUpdateGroupsRequest coreGroupUpdateGroupsRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreGroupUpdateGroupsWithHttpInfo(coreGroupUpdateGroupsRequest);
        return localVarResp.getData();
    }

    /**
     * Updates existing groups.
     * Updates existing groups.
     * @param coreGroupUpdateGroupsRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreGroupUpdateGroupsWithHttpInfo(CoreGroupUpdateGroupsRequest coreGroupUpdateGroupsRequest) throws ApiException {
        okhttp3.Call localVarCall = coreGroupUpdateGroupsValidateBeforeCall(coreGroupUpdateGroupsRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates existing groups. (asynchronously)
     * Updates existing groups.
     * @param coreGroupUpdateGroupsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreGroupUpdateGroupsAsync(CoreGroupUpdateGroupsRequest coreGroupUpdateGroupsRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreGroupUpdateGroupsValidateBeforeCall(coreGroupUpdateGroupsRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreH5pGetTrustedH5pFile
     * @param coreH5pGetTrustedH5pFileRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreH5pGetTrustedH5pFileCall(CoreH5pGetTrustedH5pFileRequest coreH5pGetTrustedH5pFileRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreH5pGetTrustedH5pFileRequest;

        // create path and map variables
        String localVarPath = "/core_h5p_get_trusted_h5p_file";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreH5pGetTrustedH5pFileValidateBeforeCall(CoreH5pGetTrustedH5pFileRequest coreH5pGetTrustedH5pFileRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreH5pGetTrustedH5pFileRequest' is set
        if (coreH5pGetTrustedH5pFileRequest == null) {
            throw new ApiException("Missing the required parameter 'coreH5pGetTrustedH5pFileRequest' when calling coreH5pGetTrustedH5pFile(Async)");
        }

        return coreH5pGetTrustedH5pFileCall(coreH5pGetTrustedH5pFileRequest, _callback);

    }

    /**
     * Get the H5P file cleaned for Mobile App.
     * Get the H5P file cleaned for Mobile App.
     * @param coreH5pGetTrustedH5pFileRequest  (required)
     * @return CoreH5pGetTrustedH5pFile200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreH5pGetTrustedH5pFile200Response coreH5pGetTrustedH5pFile(CoreH5pGetTrustedH5pFileRequest coreH5pGetTrustedH5pFileRequest) throws ApiException {
        ApiResponse<CoreH5pGetTrustedH5pFile200Response> localVarResp = coreH5pGetTrustedH5pFileWithHttpInfo(coreH5pGetTrustedH5pFileRequest);
        return localVarResp.getData();
    }

    /**
     * Get the H5P file cleaned for Mobile App.
     * Get the H5P file cleaned for Mobile App.
     * @param coreH5pGetTrustedH5pFileRequest  (required)
     * @return ApiResponse&lt;CoreH5pGetTrustedH5pFile200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreH5pGetTrustedH5pFile200Response> coreH5pGetTrustedH5pFileWithHttpInfo(CoreH5pGetTrustedH5pFileRequest coreH5pGetTrustedH5pFileRequest) throws ApiException {
        okhttp3.Call localVarCall = coreH5pGetTrustedH5pFileValidateBeforeCall(coreH5pGetTrustedH5pFileRequest, null);
        Type localVarReturnType = new TypeToken<CoreH5pGetTrustedH5pFile200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the H5P file cleaned for Mobile App. (asynchronously)
     * Get the H5P file cleaned for Mobile App.
     * @param coreH5pGetTrustedH5pFileRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreH5pGetTrustedH5pFileAsync(CoreH5pGetTrustedH5pFileRequest coreH5pGetTrustedH5pFileRequest, final ApiCallback<CoreH5pGetTrustedH5pFile200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreH5pGetTrustedH5pFileValidateBeforeCall(coreH5pGetTrustedH5pFileRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreH5pGetTrustedH5pFile200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreMessageBlockUser
     * @param coreMessageBlockUserRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of warnings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreMessageBlockUserCall(CoreMessageBlockUserRequest coreMessageBlockUserRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreMessageBlockUserRequest;

        // create path and map variables
        String localVarPath = "/core_message_block_user";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreMessageBlockUserValidateBeforeCall(CoreMessageBlockUserRequest coreMessageBlockUserRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreMessageBlockUserRequest' is set
        if (coreMessageBlockUserRequest == null) {
            throw new ApiException("Missing the required parameter 'coreMessageBlockUserRequest' when calling coreMessageBlockUser(Async)");
        }

        return coreMessageBlockUserCall(coreMessageBlockUserRequest, _callback);

    }

    /**
     * Blocks a user
     * Blocks a user
     * @param coreMessageBlockUserRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of warnings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreMessageBlockUser(CoreMessageBlockUserRequest coreMessageBlockUserRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreMessageBlockUserWithHttpInfo(coreMessageBlockUserRequest);
        return localVarResp.getData();
    }

    /**
     * Blocks a user
     * Blocks a user
     * @param coreMessageBlockUserRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of warnings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreMessageBlockUserWithHttpInfo(CoreMessageBlockUserRequest coreMessageBlockUserRequest) throws ApiException {
        okhttp3.Call localVarCall = coreMessageBlockUserValidateBeforeCall(coreMessageBlockUserRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Blocks a user (asynchronously)
     * Blocks a user
     * @param coreMessageBlockUserRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of warnings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreMessageBlockUserAsync(CoreMessageBlockUserRequest coreMessageBlockUserRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreMessageBlockUserValidateBeforeCall(coreMessageBlockUserRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreMessageConfirmContactRequest
     * @param coreMessageConfirmContactRequestRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of warnings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreMessageConfirmContactRequestCall(CoreMessageConfirmContactRequestRequest coreMessageConfirmContactRequestRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreMessageConfirmContactRequestRequest;

        // create path and map variables
        String localVarPath = "/core_message_confirm_contact_request";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreMessageConfirmContactRequestValidateBeforeCall(CoreMessageConfirmContactRequestRequest coreMessageConfirmContactRequestRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreMessageConfirmContactRequestRequest' is set
        if (coreMessageConfirmContactRequestRequest == null) {
            throw new ApiException("Missing the required parameter 'coreMessageConfirmContactRequestRequest' when calling coreMessageConfirmContactRequest(Async)");
        }

        return coreMessageConfirmContactRequestCall(coreMessageConfirmContactRequestRequest, _callback);

    }

    /**
     * Confirms a contact request
     * Confirms a contact request
     * @param coreMessageConfirmContactRequestRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of warnings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreMessageConfirmContactRequest(CoreMessageConfirmContactRequestRequest coreMessageConfirmContactRequestRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreMessageConfirmContactRequestWithHttpInfo(coreMessageConfirmContactRequestRequest);
        return localVarResp.getData();
    }

    /**
     * Confirms a contact request
     * Confirms a contact request
     * @param coreMessageConfirmContactRequestRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of warnings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreMessageConfirmContactRequestWithHttpInfo(CoreMessageConfirmContactRequestRequest coreMessageConfirmContactRequestRequest) throws ApiException {
        okhttp3.Call localVarCall = coreMessageConfirmContactRequestValidateBeforeCall(coreMessageConfirmContactRequestRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Confirms a contact request (asynchronously)
     * Confirms a contact request
     * @param coreMessageConfirmContactRequestRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of warnings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreMessageConfirmContactRequestAsync(CoreMessageConfirmContactRequestRequest coreMessageConfirmContactRequestRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreMessageConfirmContactRequestValidateBeforeCall(coreMessageConfirmContactRequestRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreMessageCreateContactRequest
     * @param coreMessageCreateContactRequestRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreMessageCreateContactRequestCall(CoreMessageCreateContactRequestRequest coreMessageCreateContactRequestRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreMessageCreateContactRequestRequest;

        // create path and map variables
        String localVarPath = "/core_message_create_contact_request";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreMessageCreateContactRequestValidateBeforeCall(CoreMessageCreateContactRequestRequest coreMessageCreateContactRequestRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreMessageCreateContactRequestRequest' is set
        if (coreMessageCreateContactRequestRequest == null) {
            throw new ApiException("Missing the required parameter 'coreMessageCreateContactRequestRequest' when calling coreMessageCreateContactRequest(Async)");
        }

        return coreMessageCreateContactRequestCall(coreMessageCreateContactRequestRequest, _callback);

    }

    /**
     * Creates a contact request
     * Creates a contact request
     * @param coreMessageCreateContactRequestRequest  (required)
     * @return CoreMessageCreateContactRequest200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreMessageCreateContactRequest200Response coreMessageCreateContactRequest(CoreMessageCreateContactRequestRequest coreMessageCreateContactRequestRequest) throws ApiException {
        ApiResponse<CoreMessageCreateContactRequest200Response> localVarResp = coreMessageCreateContactRequestWithHttpInfo(coreMessageCreateContactRequestRequest);
        return localVarResp.getData();
    }

    /**
     * Creates a contact request
     * Creates a contact request
     * @param coreMessageCreateContactRequestRequest  (required)
     * @return ApiResponse&lt;CoreMessageCreateContactRequest200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreMessageCreateContactRequest200Response> coreMessageCreateContactRequestWithHttpInfo(CoreMessageCreateContactRequestRequest coreMessageCreateContactRequestRequest) throws ApiException {
        okhttp3.Call localVarCall = coreMessageCreateContactRequestValidateBeforeCall(coreMessageCreateContactRequestRequest, null);
        Type localVarReturnType = new TypeToken<CoreMessageCreateContactRequest200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a contact request (asynchronously)
     * Creates a contact request
     * @param coreMessageCreateContactRequestRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreMessageCreateContactRequestAsync(CoreMessageCreateContactRequestRequest coreMessageCreateContactRequestRequest, final ApiCallback<CoreMessageCreateContactRequest200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreMessageCreateContactRequestValidateBeforeCall(coreMessageCreateContactRequestRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreMessageCreateContactRequest200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreMessageDataForMessageareaSearchMessages
     * @param coreMessageDataForMessageareaSearchMessagesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreMessageDataForMessageareaSearchMessagesCall(CoreMessageDataForMessageareaSearchMessagesRequest coreMessageDataForMessageareaSearchMessagesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreMessageDataForMessageareaSearchMessagesRequest;

        // create path and map variables
        String localVarPath = "/core_message_data_for_messagearea_search_messages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreMessageDataForMessageareaSearchMessagesValidateBeforeCall(CoreMessageDataForMessageareaSearchMessagesRequest coreMessageDataForMessageareaSearchMessagesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreMessageDataForMessageareaSearchMessagesRequest' is set
        if (coreMessageDataForMessageareaSearchMessagesRequest == null) {
            throw new ApiException("Missing the required parameter 'coreMessageDataForMessageareaSearchMessagesRequest' when calling coreMessageDataForMessageareaSearchMessages(Async)");
        }

        return coreMessageDataForMessageareaSearchMessagesCall(coreMessageDataForMessageareaSearchMessagesRequest, _callback);

    }

    /**
     * Retrieve the template data for searching for messages
     * Retrieve the template data for searching for messages
     * @param coreMessageDataForMessageareaSearchMessagesRequest  (required)
     * @return CoreMessageDataForMessageareaSearchMessages200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreMessageDataForMessageareaSearchMessages200Response coreMessageDataForMessageareaSearchMessages(CoreMessageDataForMessageareaSearchMessagesRequest coreMessageDataForMessageareaSearchMessagesRequest) throws ApiException {
        ApiResponse<CoreMessageDataForMessageareaSearchMessages200Response> localVarResp = coreMessageDataForMessageareaSearchMessagesWithHttpInfo(coreMessageDataForMessageareaSearchMessagesRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieve the template data for searching for messages
     * Retrieve the template data for searching for messages
     * @param coreMessageDataForMessageareaSearchMessagesRequest  (required)
     * @return ApiResponse&lt;CoreMessageDataForMessageareaSearchMessages200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreMessageDataForMessageareaSearchMessages200Response> coreMessageDataForMessageareaSearchMessagesWithHttpInfo(CoreMessageDataForMessageareaSearchMessagesRequest coreMessageDataForMessageareaSearchMessagesRequest) throws ApiException {
        okhttp3.Call localVarCall = coreMessageDataForMessageareaSearchMessagesValidateBeforeCall(coreMessageDataForMessageareaSearchMessagesRequest, null);
        Type localVarReturnType = new TypeToken<CoreMessageDataForMessageareaSearchMessages200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve the template data for searching for messages (asynchronously)
     * Retrieve the template data for searching for messages
     * @param coreMessageDataForMessageareaSearchMessagesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreMessageDataForMessageareaSearchMessagesAsync(CoreMessageDataForMessageareaSearchMessagesRequest coreMessageDataForMessageareaSearchMessagesRequest, final ApiCallback<CoreMessageDataForMessageareaSearchMessages200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreMessageDataForMessageareaSearchMessagesValidateBeforeCall(coreMessageDataForMessageareaSearchMessagesRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreMessageDataForMessageareaSearchMessages200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreMessageDeclineContactRequest
     * @param coreMessageCreateContactRequestRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of warnings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreMessageDeclineContactRequestCall(CoreMessageCreateContactRequestRequest coreMessageCreateContactRequestRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreMessageCreateContactRequestRequest;

        // create path and map variables
        String localVarPath = "/core_message_decline_contact_request";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreMessageDeclineContactRequestValidateBeforeCall(CoreMessageCreateContactRequestRequest coreMessageCreateContactRequestRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreMessageCreateContactRequestRequest' is set
        if (coreMessageCreateContactRequestRequest == null) {
            throw new ApiException("Missing the required parameter 'coreMessageCreateContactRequestRequest' when calling coreMessageDeclineContactRequest(Async)");
        }

        return coreMessageDeclineContactRequestCall(coreMessageCreateContactRequestRequest, _callback);

    }

    /**
     * Declines a contact request
     * Declines a contact request
     * @param coreMessageCreateContactRequestRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of warnings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreMessageDeclineContactRequest(CoreMessageCreateContactRequestRequest coreMessageCreateContactRequestRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreMessageDeclineContactRequestWithHttpInfo(coreMessageCreateContactRequestRequest);
        return localVarResp.getData();
    }

    /**
     * Declines a contact request
     * Declines a contact request
     * @param coreMessageCreateContactRequestRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of warnings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreMessageDeclineContactRequestWithHttpInfo(CoreMessageCreateContactRequestRequest coreMessageCreateContactRequestRequest) throws ApiException {
        okhttp3.Call localVarCall = coreMessageDeclineContactRequestValidateBeforeCall(coreMessageCreateContactRequestRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Declines a contact request (asynchronously)
     * Declines a contact request
     * @param coreMessageCreateContactRequestRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of warnings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreMessageDeclineContactRequestAsync(CoreMessageCreateContactRequestRequest coreMessageCreateContactRequestRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreMessageDeclineContactRequestValidateBeforeCall(coreMessageCreateContactRequestRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreMessageDeleteContacts
     * @param coreMessageDeleteContactsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreMessageDeleteContactsCall(CoreMessageDeleteContactsRequest coreMessageDeleteContactsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreMessageDeleteContactsRequest;

        // create path and map variables
        String localVarPath = "/core_message_delete_contacts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreMessageDeleteContactsValidateBeforeCall(CoreMessageDeleteContactsRequest coreMessageDeleteContactsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreMessageDeleteContactsRequest' is set
        if (coreMessageDeleteContactsRequest == null) {
            throw new ApiException("Missing the required parameter 'coreMessageDeleteContactsRequest' when calling coreMessageDeleteContacts(Async)");
        }

        return coreMessageDeleteContactsCall(coreMessageDeleteContactsRequest, _callback);

    }

    /**
     * Remove contacts from the contact list
     * Remove contacts from the contact list
     * @param coreMessageDeleteContactsRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreMessageDeleteContacts(CoreMessageDeleteContactsRequest coreMessageDeleteContactsRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreMessageDeleteContactsWithHttpInfo(coreMessageDeleteContactsRequest);
        return localVarResp.getData();
    }

    /**
     * Remove contacts from the contact list
     * Remove contacts from the contact list
     * @param coreMessageDeleteContactsRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreMessageDeleteContactsWithHttpInfo(CoreMessageDeleteContactsRequest coreMessageDeleteContactsRequest) throws ApiException {
        okhttp3.Call localVarCall = coreMessageDeleteContactsValidateBeforeCall(coreMessageDeleteContactsRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove contacts from the contact list (asynchronously)
     * Remove contacts from the contact list
     * @param coreMessageDeleteContactsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreMessageDeleteContactsAsync(CoreMessageDeleteContactsRequest coreMessageDeleteContactsRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreMessageDeleteContactsValidateBeforeCall(coreMessageDeleteContactsRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreMessageDeleteConversationsById
     * @param coreMessageDeleteConversationsByIdRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of warnings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreMessageDeleteConversationsByIdCall(CoreMessageDeleteConversationsByIdRequest coreMessageDeleteConversationsByIdRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreMessageDeleteConversationsByIdRequest;

        // create path and map variables
        String localVarPath = "/core_message_delete_conversations_by_id";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreMessageDeleteConversationsByIdValidateBeforeCall(CoreMessageDeleteConversationsByIdRequest coreMessageDeleteConversationsByIdRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreMessageDeleteConversationsByIdRequest' is set
        if (coreMessageDeleteConversationsByIdRequest == null) {
            throw new ApiException("Missing the required parameter 'coreMessageDeleteConversationsByIdRequest' when calling coreMessageDeleteConversationsById(Async)");
        }

        return coreMessageDeleteConversationsByIdCall(coreMessageDeleteConversationsByIdRequest, _callback);

    }

    /**
     * Deletes a list of conversations.
     * Deletes a list of conversations.
     * @param coreMessageDeleteConversationsByIdRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of warnings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreMessageDeleteConversationsById(CoreMessageDeleteConversationsByIdRequest coreMessageDeleteConversationsByIdRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreMessageDeleteConversationsByIdWithHttpInfo(coreMessageDeleteConversationsByIdRequest);
        return localVarResp.getData();
    }

    /**
     * Deletes a list of conversations.
     * Deletes a list of conversations.
     * @param coreMessageDeleteConversationsByIdRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of warnings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreMessageDeleteConversationsByIdWithHttpInfo(CoreMessageDeleteConversationsByIdRequest coreMessageDeleteConversationsByIdRequest) throws ApiException {
        okhttp3.Call localVarCall = coreMessageDeleteConversationsByIdValidateBeforeCall(coreMessageDeleteConversationsByIdRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deletes a list of conversations. (asynchronously)
     * Deletes a list of conversations.
     * @param coreMessageDeleteConversationsByIdRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of warnings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreMessageDeleteConversationsByIdAsync(CoreMessageDeleteConversationsByIdRequest coreMessageDeleteConversationsByIdRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreMessageDeleteConversationsByIdValidateBeforeCall(coreMessageDeleteConversationsByIdRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreMessageDeleteMessage
     * @param coreMessageDeleteMessageRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreMessageDeleteMessageCall(CoreMessageDeleteMessageRequest coreMessageDeleteMessageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreMessageDeleteMessageRequest;

        // create path and map variables
        String localVarPath = "/core_message_delete_message";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreMessageDeleteMessageValidateBeforeCall(CoreMessageDeleteMessageRequest coreMessageDeleteMessageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreMessageDeleteMessageRequest' is set
        if (coreMessageDeleteMessageRequest == null) {
            throw new ApiException("Missing the required parameter 'coreMessageDeleteMessageRequest' when calling coreMessageDeleteMessage(Async)");
        }

        return coreMessageDeleteMessageCall(coreMessageDeleteMessageRequest, _callback);

    }

    /**
     * Deletes a message.
     * Deletes a message.
     * @param coreMessageDeleteMessageRequest  (required)
     * @return CoreMessageDeleteMessage200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreMessageDeleteMessage200Response coreMessageDeleteMessage(CoreMessageDeleteMessageRequest coreMessageDeleteMessageRequest) throws ApiException {
        ApiResponse<CoreMessageDeleteMessage200Response> localVarResp = coreMessageDeleteMessageWithHttpInfo(coreMessageDeleteMessageRequest);
        return localVarResp.getData();
    }

    /**
     * Deletes a message.
     * Deletes a message.
     * @param coreMessageDeleteMessageRequest  (required)
     * @return ApiResponse&lt;CoreMessageDeleteMessage200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreMessageDeleteMessage200Response> coreMessageDeleteMessageWithHttpInfo(CoreMessageDeleteMessageRequest coreMessageDeleteMessageRequest) throws ApiException {
        okhttp3.Call localVarCall = coreMessageDeleteMessageValidateBeforeCall(coreMessageDeleteMessageRequest, null);
        Type localVarReturnType = new TypeToken<CoreMessageDeleteMessage200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deletes a message. (asynchronously)
     * Deletes a message.
     * @param coreMessageDeleteMessageRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreMessageDeleteMessageAsync(CoreMessageDeleteMessageRequest coreMessageDeleteMessageRequest, final ApiCallback<CoreMessageDeleteMessage200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreMessageDeleteMessageValidateBeforeCall(coreMessageDeleteMessageRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreMessageDeleteMessage200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreMessageDeleteMessageForAllUsers
     * @param coreMessageDeleteMessageForAllUsersRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of warnings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreMessageDeleteMessageForAllUsersCall(CoreMessageDeleteMessageForAllUsersRequest coreMessageDeleteMessageForAllUsersRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreMessageDeleteMessageForAllUsersRequest;

        // create path and map variables
        String localVarPath = "/core_message_delete_message_for_all_users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreMessageDeleteMessageForAllUsersValidateBeforeCall(CoreMessageDeleteMessageForAllUsersRequest coreMessageDeleteMessageForAllUsersRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreMessageDeleteMessageForAllUsersRequest' is set
        if (coreMessageDeleteMessageForAllUsersRequest == null) {
            throw new ApiException("Missing the required parameter 'coreMessageDeleteMessageForAllUsersRequest' when calling coreMessageDeleteMessageForAllUsers(Async)");
        }

        return coreMessageDeleteMessageForAllUsersCall(coreMessageDeleteMessageForAllUsersRequest, _callback);

    }

    /**
     * Deletes a message for all users.
     * Deletes a message for all users.
     * @param coreMessageDeleteMessageForAllUsersRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of warnings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreMessageDeleteMessageForAllUsers(CoreMessageDeleteMessageForAllUsersRequest coreMessageDeleteMessageForAllUsersRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreMessageDeleteMessageForAllUsersWithHttpInfo(coreMessageDeleteMessageForAllUsersRequest);
        return localVarResp.getData();
    }

    /**
     * Deletes a message for all users.
     * Deletes a message for all users.
     * @param coreMessageDeleteMessageForAllUsersRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of warnings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreMessageDeleteMessageForAllUsersWithHttpInfo(CoreMessageDeleteMessageForAllUsersRequest coreMessageDeleteMessageForAllUsersRequest) throws ApiException {
        okhttp3.Call localVarCall = coreMessageDeleteMessageForAllUsersValidateBeforeCall(coreMessageDeleteMessageForAllUsersRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deletes a message for all users. (asynchronously)
     * Deletes a message for all users.
     * @param coreMessageDeleteMessageForAllUsersRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of warnings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreMessageDeleteMessageForAllUsersAsync(CoreMessageDeleteMessageForAllUsersRequest coreMessageDeleteMessageForAllUsersRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreMessageDeleteMessageForAllUsersValidateBeforeCall(coreMessageDeleteMessageForAllUsersRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreMessageGetBlockedUsers
     * @param coreMessageGetBlockedUsersRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreMessageGetBlockedUsersCall(CoreMessageGetBlockedUsersRequest coreMessageGetBlockedUsersRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreMessageGetBlockedUsersRequest;

        // create path and map variables
        String localVarPath = "/core_message_get_blocked_users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreMessageGetBlockedUsersValidateBeforeCall(CoreMessageGetBlockedUsersRequest coreMessageGetBlockedUsersRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreMessageGetBlockedUsersRequest' is set
        if (coreMessageGetBlockedUsersRequest == null) {
            throw new ApiException("Missing the required parameter 'coreMessageGetBlockedUsersRequest' when calling coreMessageGetBlockedUsers(Async)");
        }

        return coreMessageGetBlockedUsersCall(coreMessageGetBlockedUsersRequest, _callback);

    }

    /**
     * Retrieve a list of users blocked
     * Retrieve a list of users blocked
     * @param coreMessageGetBlockedUsersRequest  (required)
     * @return CoreMessageGetBlockedUsers200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreMessageGetBlockedUsers200Response coreMessageGetBlockedUsers(CoreMessageGetBlockedUsersRequest coreMessageGetBlockedUsersRequest) throws ApiException {
        ApiResponse<CoreMessageGetBlockedUsers200Response> localVarResp = coreMessageGetBlockedUsersWithHttpInfo(coreMessageGetBlockedUsersRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieve a list of users blocked
     * Retrieve a list of users blocked
     * @param coreMessageGetBlockedUsersRequest  (required)
     * @return ApiResponse&lt;CoreMessageGetBlockedUsers200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreMessageGetBlockedUsers200Response> coreMessageGetBlockedUsersWithHttpInfo(CoreMessageGetBlockedUsersRequest coreMessageGetBlockedUsersRequest) throws ApiException {
        okhttp3.Call localVarCall = coreMessageGetBlockedUsersValidateBeforeCall(coreMessageGetBlockedUsersRequest, null);
        Type localVarReturnType = new TypeToken<CoreMessageGetBlockedUsers200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a list of users blocked (asynchronously)
     * Retrieve a list of users blocked
     * @param coreMessageGetBlockedUsersRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreMessageGetBlockedUsersAsync(CoreMessageGetBlockedUsersRequest coreMessageGetBlockedUsersRequest, final ApiCallback<CoreMessageGetBlockedUsers200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreMessageGetBlockedUsersValidateBeforeCall(coreMessageGetBlockedUsersRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreMessageGetBlockedUsers200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreMessageGetContactRequests
     * @param coreMessageGetContactRequestsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreMessageGetContactRequestsCall(CoreMessageGetContactRequestsRequest coreMessageGetContactRequestsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreMessageGetContactRequestsRequest;

        // create path and map variables
        String localVarPath = "/core_message_get_contact_requests";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreMessageGetContactRequestsValidateBeforeCall(CoreMessageGetContactRequestsRequest coreMessageGetContactRequestsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreMessageGetContactRequestsRequest' is set
        if (coreMessageGetContactRequestsRequest == null) {
            throw new ApiException("Missing the required parameter 'coreMessageGetContactRequestsRequest' when calling coreMessageGetContactRequests(Async)");
        }

        return coreMessageGetContactRequestsCall(coreMessageGetContactRequestsRequest, _callback);

    }

    /**
     * Returns contact requests for a user
     * Returns contact requests for a user
     * @param coreMessageGetContactRequestsRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreMessageGetContactRequests(CoreMessageGetContactRequestsRequest coreMessageGetContactRequestsRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreMessageGetContactRequestsWithHttpInfo(coreMessageGetContactRequestsRequest);
        return localVarResp.getData();
    }

    /**
     * Returns contact requests for a user
     * Returns contact requests for a user
     * @param coreMessageGetContactRequestsRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreMessageGetContactRequestsWithHttpInfo(CoreMessageGetContactRequestsRequest coreMessageGetContactRequestsRequest) throws ApiException {
        okhttp3.Call localVarCall = coreMessageGetContactRequestsValidateBeforeCall(coreMessageGetContactRequestsRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns contact requests for a user (asynchronously)
     * Returns contact requests for a user
     * @param coreMessageGetContactRequestsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreMessageGetContactRequestsAsync(CoreMessageGetContactRequestsRequest coreMessageGetContactRequestsRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreMessageGetContactRequestsValidateBeforeCall(coreMessageGetContactRequestsRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreMessageGetConversation
     * @param coreMessageGetConversationRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreMessageGetConversationCall(CoreMessageGetConversationRequest coreMessageGetConversationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreMessageGetConversationRequest;

        // create path and map variables
        String localVarPath = "/core_message_get_conversation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreMessageGetConversationValidateBeforeCall(CoreMessageGetConversationRequest coreMessageGetConversationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreMessageGetConversationRequest' is set
        if (coreMessageGetConversationRequest == null) {
            throw new ApiException("Missing the required parameter 'coreMessageGetConversationRequest' when calling coreMessageGetConversation(Async)");
        }

        return coreMessageGetConversationCall(coreMessageGetConversationRequest, _callback);

    }

    /**
     * Retrieve a conversation for a user
     * Retrieve a conversation for a user
     * @param coreMessageGetConversationRequest  (required)
     * @return CoreMessageGetConversation200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreMessageGetConversation200Response coreMessageGetConversation(CoreMessageGetConversationRequest coreMessageGetConversationRequest) throws ApiException {
        ApiResponse<CoreMessageGetConversation200Response> localVarResp = coreMessageGetConversationWithHttpInfo(coreMessageGetConversationRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieve a conversation for a user
     * Retrieve a conversation for a user
     * @param coreMessageGetConversationRequest  (required)
     * @return ApiResponse&lt;CoreMessageGetConversation200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreMessageGetConversation200Response> coreMessageGetConversationWithHttpInfo(CoreMessageGetConversationRequest coreMessageGetConversationRequest) throws ApiException {
        okhttp3.Call localVarCall = coreMessageGetConversationValidateBeforeCall(coreMessageGetConversationRequest, null);
        Type localVarReturnType = new TypeToken<CoreMessageGetConversation200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a conversation for a user (asynchronously)
     * Retrieve a conversation for a user
     * @param coreMessageGetConversationRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreMessageGetConversationAsync(CoreMessageGetConversationRequest coreMessageGetConversationRequest, final ApiCallback<CoreMessageGetConversation200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreMessageGetConversationValidateBeforeCall(coreMessageGetConversationRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreMessageGetConversation200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreMessageGetConversationBetweenUsers
     * @param coreMessageGetConversationBetweenUsersRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreMessageGetConversationBetweenUsersCall(CoreMessageGetConversationBetweenUsersRequest coreMessageGetConversationBetweenUsersRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreMessageGetConversationBetweenUsersRequest;

        // create path and map variables
        String localVarPath = "/core_message_get_conversation_between_users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreMessageGetConversationBetweenUsersValidateBeforeCall(CoreMessageGetConversationBetweenUsersRequest coreMessageGetConversationBetweenUsersRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreMessageGetConversationBetweenUsersRequest' is set
        if (coreMessageGetConversationBetweenUsersRequest == null) {
            throw new ApiException("Missing the required parameter 'coreMessageGetConversationBetweenUsersRequest' when calling coreMessageGetConversationBetweenUsers(Async)");
        }

        return coreMessageGetConversationBetweenUsersCall(coreMessageGetConversationBetweenUsersRequest, _callback);

    }

    /**
     * Retrieve a conversation for a user between another user
     * Retrieve a conversation for a user between another user
     * @param coreMessageGetConversationBetweenUsersRequest  (required)
     * @return CoreMessageGetConversationBetweenUsers200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreMessageGetConversationBetweenUsers200Response coreMessageGetConversationBetweenUsers(CoreMessageGetConversationBetweenUsersRequest coreMessageGetConversationBetweenUsersRequest) throws ApiException {
        ApiResponse<CoreMessageGetConversationBetweenUsers200Response> localVarResp = coreMessageGetConversationBetweenUsersWithHttpInfo(coreMessageGetConversationBetweenUsersRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieve a conversation for a user between another user
     * Retrieve a conversation for a user between another user
     * @param coreMessageGetConversationBetweenUsersRequest  (required)
     * @return ApiResponse&lt;CoreMessageGetConversationBetweenUsers200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreMessageGetConversationBetweenUsers200Response> coreMessageGetConversationBetweenUsersWithHttpInfo(CoreMessageGetConversationBetweenUsersRequest coreMessageGetConversationBetweenUsersRequest) throws ApiException {
        okhttp3.Call localVarCall = coreMessageGetConversationBetweenUsersValidateBeforeCall(coreMessageGetConversationBetweenUsersRequest, null);
        Type localVarReturnType = new TypeToken<CoreMessageGetConversationBetweenUsers200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a conversation for a user between another user (asynchronously)
     * Retrieve a conversation for a user between another user
     * @param coreMessageGetConversationBetweenUsersRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreMessageGetConversationBetweenUsersAsync(CoreMessageGetConversationBetweenUsersRequest coreMessageGetConversationBetweenUsersRequest, final ApiCallback<CoreMessageGetConversationBetweenUsers200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreMessageGetConversationBetweenUsersValidateBeforeCall(coreMessageGetConversationBetweenUsersRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreMessageGetConversationBetweenUsers200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreMessageGetConversationCounts
     * @param coreMessageGetConversationCountsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreMessageGetConversationCountsCall(CoreMessageGetConversationCountsRequest coreMessageGetConversationCountsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreMessageGetConversationCountsRequest;

        // create path and map variables
        String localVarPath = "/core_message_get_conversation_counts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreMessageGetConversationCountsValidateBeforeCall(CoreMessageGetConversationCountsRequest coreMessageGetConversationCountsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreMessageGetConversationCountsRequest' is set
        if (coreMessageGetConversationCountsRequest == null) {
            throw new ApiException("Missing the required parameter 'coreMessageGetConversationCountsRequest' when calling coreMessageGetConversationCounts(Async)");
        }

        return coreMessageGetConversationCountsCall(coreMessageGetConversationCountsRequest, _callback);

    }

    /**
     * Retrieve a list of conversation counts, indexed by type.
     * Retrieve a list of conversation counts, indexed by type.
     * @param coreMessageGetConversationCountsRequest  (required)
     * @return CoreMessageGetConversationCounts200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreMessageGetConversationCounts200Response coreMessageGetConversationCounts(CoreMessageGetConversationCountsRequest coreMessageGetConversationCountsRequest) throws ApiException {
        ApiResponse<CoreMessageGetConversationCounts200Response> localVarResp = coreMessageGetConversationCountsWithHttpInfo(coreMessageGetConversationCountsRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieve a list of conversation counts, indexed by type.
     * Retrieve a list of conversation counts, indexed by type.
     * @param coreMessageGetConversationCountsRequest  (required)
     * @return ApiResponse&lt;CoreMessageGetConversationCounts200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreMessageGetConversationCounts200Response> coreMessageGetConversationCountsWithHttpInfo(CoreMessageGetConversationCountsRequest coreMessageGetConversationCountsRequest) throws ApiException {
        okhttp3.Call localVarCall = coreMessageGetConversationCountsValidateBeforeCall(coreMessageGetConversationCountsRequest, null);
        Type localVarReturnType = new TypeToken<CoreMessageGetConversationCounts200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a list of conversation counts, indexed by type. (asynchronously)
     * Retrieve a list of conversation counts, indexed by type.
     * @param coreMessageGetConversationCountsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreMessageGetConversationCountsAsync(CoreMessageGetConversationCountsRequest coreMessageGetConversationCountsRequest, final ApiCallback<CoreMessageGetConversationCounts200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreMessageGetConversationCountsValidateBeforeCall(coreMessageGetConversationCountsRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreMessageGetConversationCounts200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreMessageGetConversationMembers
     * @param coreMessageGetConversationMembersRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreMessageGetConversationMembersCall(CoreMessageGetConversationMembersRequest coreMessageGetConversationMembersRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreMessageGetConversationMembersRequest;

        // create path and map variables
        String localVarPath = "/core_message_get_conversation_members";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreMessageGetConversationMembersValidateBeforeCall(CoreMessageGetConversationMembersRequest coreMessageGetConversationMembersRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreMessageGetConversationMembersRequest' is set
        if (coreMessageGetConversationMembersRequest == null) {
            throw new ApiException("Missing the required parameter 'coreMessageGetConversationMembersRequest' when calling coreMessageGetConversationMembers(Async)");
        }

        return coreMessageGetConversationMembersCall(coreMessageGetConversationMembersRequest, _callback);

    }

    /**
     * Retrieve a list of members in a conversation
     * Retrieve a list of members in a conversation
     * @param coreMessageGetConversationMembersRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreMessageGetConversationMembers(CoreMessageGetConversationMembersRequest coreMessageGetConversationMembersRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreMessageGetConversationMembersWithHttpInfo(coreMessageGetConversationMembersRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieve a list of members in a conversation
     * Retrieve a list of members in a conversation
     * @param coreMessageGetConversationMembersRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreMessageGetConversationMembersWithHttpInfo(CoreMessageGetConversationMembersRequest coreMessageGetConversationMembersRequest) throws ApiException {
        okhttp3.Call localVarCall = coreMessageGetConversationMembersValidateBeforeCall(coreMessageGetConversationMembersRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a list of members in a conversation (asynchronously)
     * Retrieve a list of members in a conversation
     * @param coreMessageGetConversationMembersRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreMessageGetConversationMembersAsync(CoreMessageGetConversationMembersRequest coreMessageGetConversationMembersRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreMessageGetConversationMembersValidateBeforeCall(coreMessageGetConversationMembersRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreMessageGetConversationMessages
     * @param coreMessageGetConversationMessagesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreMessageGetConversationMessagesCall(CoreMessageGetConversationMessagesRequest coreMessageGetConversationMessagesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreMessageGetConversationMessagesRequest;

        // create path and map variables
        String localVarPath = "/core_message_get_conversation_messages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreMessageGetConversationMessagesValidateBeforeCall(CoreMessageGetConversationMessagesRequest coreMessageGetConversationMessagesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreMessageGetConversationMessagesRequest' is set
        if (coreMessageGetConversationMessagesRequest == null) {
            throw new ApiException("Missing the required parameter 'coreMessageGetConversationMessagesRequest' when calling coreMessageGetConversationMessages(Async)");
        }

        return coreMessageGetConversationMessagesCall(coreMessageGetConversationMessagesRequest, _callback);

    }

    /**
     * Retrieve the conversation messages and relevant member information
     * Retrieve the conversation messages and relevant member information
     * @param coreMessageGetConversationMessagesRequest  (required)
     * @return CoreMessageGetConversationMessages200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreMessageGetConversationMessages200Response coreMessageGetConversationMessages(CoreMessageGetConversationMessagesRequest coreMessageGetConversationMessagesRequest) throws ApiException {
        ApiResponse<CoreMessageGetConversationMessages200Response> localVarResp = coreMessageGetConversationMessagesWithHttpInfo(coreMessageGetConversationMessagesRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieve the conversation messages and relevant member information
     * Retrieve the conversation messages and relevant member information
     * @param coreMessageGetConversationMessagesRequest  (required)
     * @return ApiResponse&lt;CoreMessageGetConversationMessages200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreMessageGetConversationMessages200Response> coreMessageGetConversationMessagesWithHttpInfo(CoreMessageGetConversationMessagesRequest coreMessageGetConversationMessagesRequest) throws ApiException {
        okhttp3.Call localVarCall = coreMessageGetConversationMessagesValidateBeforeCall(coreMessageGetConversationMessagesRequest, null);
        Type localVarReturnType = new TypeToken<CoreMessageGetConversationMessages200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve the conversation messages and relevant member information (asynchronously)
     * Retrieve the conversation messages and relevant member information
     * @param coreMessageGetConversationMessagesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreMessageGetConversationMessagesAsync(CoreMessageGetConversationMessagesRequest coreMessageGetConversationMessagesRequest, final ApiCallback<CoreMessageGetConversationMessages200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreMessageGetConversationMessagesValidateBeforeCall(coreMessageGetConversationMessagesRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreMessageGetConversationMessages200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreMessageGetConversations
     * @param coreMessageGetConversationsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreMessageGetConversationsCall(CoreMessageGetConversationsRequest coreMessageGetConversationsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreMessageGetConversationsRequest;

        // create path and map variables
        String localVarPath = "/core_message_get_conversations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreMessageGetConversationsValidateBeforeCall(CoreMessageGetConversationsRequest coreMessageGetConversationsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreMessageGetConversationsRequest' is set
        if (coreMessageGetConversationsRequest == null) {
            throw new ApiException("Missing the required parameter 'coreMessageGetConversationsRequest' when calling coreMessageGetConversations(Async)");
        }

        return coreMessageGetConversationsCall(coreMessageGetConversationsRequest, _callback);

    }

    /**
     * Retrieve a list of conversations for a user
     * Retrieve a list of conversations for a user
     * @param coreMessageGetConversationsRequest  (required)
     * @return CoreMessageGetConversations200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreMessageGetConversations200Response coreMessageGetConversations(CoreMessageGetConversationsRequest coreMessageGetConversationsRequest) throws ApiException {
        ApiResponse<CoreMessageGetConversations200Response> localVarResp = coreMessageGetConversationsWithHttpInfo(coreMessageGetConversationsRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieve a list of conversations for a user
     * Retrieve a list of conversations for a user
     * @param coreMessageGetConversationsRequest  (required)
     * @return ApiResponse&lt;CoreMessageGetConversations200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreMessageGetConversations200Response> coreMessageGetConversationsWithHttpInfo(CoreMessageGetConversationsRequest coreMessageGetConversationsRequest) throws ApiException {
        okhttp3.Call localVarCall = coreMessageGetConversationsValidateBeforeCall(coreMessageGetConversationsRequest, null);
        Type localVarReturnType = new TypeToken<CoreMessageGetConversations200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a list of conversations for a user (asynchronously)
     * Retrieve a list of conversations for a user
     * @param coreMessageGetConversationsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreMessageGetConversationsAsync(CoreMessageGetConversationsRequest coreMessageGetConversationsRequest, final ApiCallback<CoreMessageGetConversations200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreMessageGetConversationsValidateBeforeCall(coreMessageGetConversationsRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreMessageGetConversations200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreMessageGetMemberInfo
     * @param coreMessageGetMemberInfoRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreMessageGetMemberInfoCall(CoreMessageGetMemberInfoRequest coreMessageGetMemberInfoRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreMessageGetMemberInfoRequest;

        // create path and map variables
        String localVarPath = "/core_message_get_member_info";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreMessageGetMemberInfoValidateBeforeCall(CoreMessageGetMemberInfoRequest coreMessageGetMemberInfoRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreMessageGetMemberInfoRequest' is set
        if (coreMessageGetMemberInfoRequest == null) {
            throw new ApiException("Missing the required parameter 'coreMessageGetMemberInfoRequest' when calling coreMessageGetMemberInfo(Async)");
        }

        return coreMessageGetMemberInfoCall(coreMessageGetMemberInfoRequest, _callback);

    }

    /**
     * Retrieve a user message profiles
     * Retrieve a user message profiles
     * @param coreMessageGetMemberInfoRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreMessageGetMemberInfo(CoreMessageGetMemberInfoRequest coreMessageGetMemberInfoRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreMessageGetMemberInfoWithHttpInfo(coreMessageGetMemberInfoRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieve a user message profiles
     * Retrieve a user message profiles
     * @param coreMessageGetMemberInfoRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreMessageGetMemberInfoWithHttpInfo(CoreMessageGetMemberInfoRequest coreMessageGetMemberInfoRequest) throws ApiException {
        okhttp3.Call localVarCall = coreMessageGetMemberInfoValidateBeforeCall(coreMessageGetMemberInfoRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a user message profiles (asynchronously)
     * Retrieve a user message profiles
     * @param coreMessageGetMemberInfoRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreMessageGetMemberInfoAsync(CoreMessageGetMemberInfoRequest coreMessageGetMemberInfoRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreMessageGetMemberInfoValidateBeforeCall(coreMessageGetMemberInfoRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreMessageGetMessageProcessor
     * @param coreMessageGetMessageProcessorRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreMessageGetMessageProcessorCall(CoreMessageGetMessageProcessorRequest coreMessageGetMessageProcessorRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreMessageGetMessageProcessorRequest;

        // create path and map variables
        String localVarPath = "/core_message_get_message_processor";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreMessageGetMessageProcessorValidateBeforeCall(CoreMessageGetMessageProcessorRequest coreMessageGetMessageProcessorRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreMessageGetMessageProcessorRequest' is set
        if (coreMessageGetMessageProcessorRequest == null) {
            throw new ApiException("Missing the required parameter 'coreMessageGetMessageProcessorRequest' when calling coreMessageGetMessageProcessor(Async)");
        }

        return coreMessageGetMessageProcessorCall(coreMessageGetMessageProcessorRequest, _callback);

    }

    /**
     * Get a message processor
     * Get a message processor
     * @param coreMessageGetMessageProcessorRequest  (required)
     * @return CoreMessageGetMessageProcessor200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreMessageGetMessageProcessor200Response coreMessageGetMessageProcessor(CoreMessageGetMessageProcessorRequest coreMessageGetMessageProcessorRequest) throws ApiException {
        ApiResponse<CoreMessageGetMessageProcessor200Response> localVarResp = coreMessageGetMessageProcessorWithHttpInfo(coreMessageGetMessageProcessorRequest);
        return localVarResp.getData();
    }

    /**
     * Get a message processor
     * Get a message processor
     * @param coreMessageGetMessageProcessorRequest  (required)
     * @return ApiResponse&lt;CoreMessageGetMessageProcessor200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreMessageGetMessageProcessor200Response> coreMessageGetMessageProcessorWithHttpInfo(CoreMessageGetMessageProcessorRequest coreMessageGetMessageProcessorRequest) throws ApiException {
        okhttp3.Call localVarCall = coreMessageGetMessageProcessorValidateBeforeCall(coreMessageGetMessageProcessorRequest, null);
        Type localVarReturnType = new TypeToken<CoreMessageGetMessageProcessor200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a message processor (asynchronously)
     * Get a message processor
     * @param coreMessageGetMessageProcessorRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreMessageGetMessageProcessorAsync(CoreMessageGetMessageProcessorRequest coreMessageGetMessageProcessorRequest, final ApiCallback<CoreMessageGetMessageProcessor200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreMessageGetMessageProcessorValidateBeforeCall(coreMessageGetMessageProcessorRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreMessageGetMessageProcessor200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreMessageGetMessages
     * @param coreMessageGetMessagesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreMessageGetMessagesCall(CoreMessageGetMessagesRequest coreMessageGetMessagesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreMessageGetMessagesRequest;

        // create path and map variables
        String localVarPath = "/core_message_get_messages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreMessageGetMessagesValidateBeforeCall(CoreMessageGetMessagesRequest coreMessageGetMessagesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreMessageGetMessagesRequest' is set
        if (coreMessageGetMessagesRequest == null) {
            throw new ApiException("Missing the required parameter 'coreMessageGetMessagesRequest' when calling coreMessageGetMessages(Async)");
        }

        return coreMessageGetMessagesCall(coreMessageGetMessagesRequest, _callback);

    }

    /**
     * Retrieve a list of messages sent and received by a user (conversations, notifications or both)
     * Retrieve a list of messages sent and received by a user (conversations, notifications or both)
     * @param coreMessageGetMessagesRequest  (required)
     * @return CoreMessageGetMessages200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreMessageGetMessages200Response coreMessageGetMessages(CoreMessageGetMessagesRequest coreMessageGetMessagesRequest) throws ApiException {
        ApiResponse<CoreMessageGetMessages200Response> localVarResp = coreMessageGetMessagesWithHttpInfo(coreMessageGetMessagesRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieve a list of messages sent and received by a user (conversations, notifications or both)
     * Retrieve a list of messages sent and received by a user (conversations, notifications or both)
     * @param coreMessageGetMessagesRequest  (required)
     * @return ApiResponse&lt;CoreMessageGetMessages200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreMessageGetMessages200Response> coreMessageGetMessagesWithHttpInfo(CoreMessageGetMessagesRequest coreMessageGetMessagesRequest) throws ApiException {
        okhttp3.Call localVarCall = coreMessageGetMessagesValidateBeforeCall(coreMessageGetMessagesRequest, null);
        Type localVarReturnType = new TypeToken<CoreMessageGetMessages200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a list of messages sent and received by a user (conversations, notifications or both) (asynchronously)
     * Retrieve a list of messages sent and received by a user (conversations, notifications or both)
     * @param coreMessageGetMessagesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreMessageGetMessagesAsync(CoreMessageGetMessagesRequest coreMessageGetMessagesRequest, final ApiCallback<CoreMessageGetMessages200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreMessageGetMessagesValidateBeforeCall(coreMessageGetMessagesRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreMessageGetMessages200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreMessageGetReceivedContactRequestsCount
     * @param coreMessageGetReceivedContactRequestsCountRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The number of received contact requests </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreMessageGetReceivedContactRequestsCountCall(CoreMessageGetReceivedContactRequestsCountRequest coreMessageGetReceivedContactRequestsCountRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreMessageGetReceivedContactRequestsCountRequest;

        // create path and map variables
        String localVarPath = "/core_message_get_received_contact_requests_count";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreMessageGetReceivedContactRequestsCountValidateBeforeCall(CoreMessageGetReceivedContactRequestsCountRequest coreMessageGetReceivedContactRequestsCountRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreMessageGetReceivedContactRequestsCountRequest' is set
        if (coreMessageGetReceivedContactRequestsCountRequest == null) {
            throw new ApiException("Missing the required parameter 'coreMessageGetReceivedContactRequestsCountRequest' when calling coreMessageGetReceivedContactRequestsCount(Async)");
        }

        return coreMessageGetReceivedContactRequestsCountCall(coreMessageGetReceivedContactRequestsCountRequest, _callback);

    }

    /**
     * Gets the number of received contact requests
     * Gets the number of received contact requests
     * @param coreMessageGetReceivedContactRequestsCountRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The number of received contact requests </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreMessageGetReceivedContactRequestsCount(CoreMessageGetReceivedContactRequestsCountRequest coreMessageGetReceivedContactRequestsCountRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreMessageGetReceivedContactRequestsCountWithHttpInfo(coreMessageGetReceivedContactRequestsCountRequest);
        return localVarResp.getData();
    }

    /**
     * Gets the number of received contact requests
     * Gets the number of received contact requests
     * @param coreMessageGetReceivedContactRequestsCountRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The number of received contact requests </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreMessageGetReceivedContactRequestsCountWithHttpInfo(CoreMessageGetReceivedContactRequestsCountRequest coreMessageGetReceivedContactRequestsCountRequest) throws ApiException {
        okhttp3.Call localVarCall = coreMessageGetReceivedContactRequestsCountValidateBeforeCall(coreMessageGetReceivedContactRequestsCountRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the number of received contact requests (asynchronously)
     * Gets the number of received contact requests
     * @param coreMessageGetReceivedContactRequestsCountRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The number of received contact requests </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreMessageGetReceivedContactRequestsCountAsync(CoreMessageGetReceivedContactRequestsCountRequest coreMessageGetReceivedContactRequestsCountRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreMessageGetReceivedContactRequestsCountValidateBeforeCall(coreMessageGetReceivedContactRequestsCountRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreMessageGetSelfConversation
     * @param coreMessageGetSelfConversationRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreMessageGetSelfConversationCall(CoreMessageGetSelfConversationRequest coreMessageGetSelfConversationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreMessageGetSelfConversationRequest;

        // create path and map variables
        String localVarPath = "/core_message_get_self_conversation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreMessageGetSelfConversationValidateBeforeCall(CoreMessageGetSelfConversationRequest coreMessageGetSelfConversationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreMessageGetSelfConversationRequest' is set
        if (coreMessageGetSelfConversationRequest == null) {
            throw new ApiException("Missing the required parameter 'coreMessageGetSelfConversationRequest' when calling coreMessageGetSelfConversation(Async)");
        }

        return coreMessageGetSelfConversationCall(coreMessageGetSelfConversationRequest, _callback);

    }

    /**
     * Retrieve a self-conversation for a user
     * Retrieve a self-conversation for a user
     * @param coreMessageGetSelfConversationRequest  (required)
     * @return CoreMessageGetConversationBetweenUsers200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreMessageGetConversationBetweenUsers200Response coreMessageGetSelfConversation(CoreMessageGetSelfConversationRequest coreMessageGetSelfConversationRequest) throws ApiException {
        ApiResponse<CoreMessageGetConversationBetweenUsers200Response> localVarResp = coreMessageGetSelfConversationWithHttpInfo(coreMessageGetSelfConversationRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieve a self-conversation for a user
     * Retrieve a self-conversation for a user
     * @param coreMessageGetSelfConversationRequest  (required)
     * @return ApiResponse&lt;CoreMessageGetConversationBetweenUsers200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreMessageGetConversationBetweenUsers200Response> coreMessageGetSelfConversationWithHttpInfo(CoreMessageGetSelfConversationRequest coreMessageGetSelfConversationRequest) throws ApiException {
        okhttp3.Call localVarCall = coreMessageGetSelfConversationValidateBeforeCall(coreMessageGetSelfConversationRequest, null);
        Type localVarReturnType = new TypeToken<CoreMessageGetConversationBetweenUsers200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a self-conversation for a user (asynchronously)
     * Retrieve a self-conversation for a user
     * @param coreMessageGetSelfConversationRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreMessageGetSelfConversationAsync(CoreMessageGetSelfConversationRequest coreMessageGetSelfConversationRequest, final ApiCallback<CoreMessageGetConversationBetweenUsers200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreMessageGetSelfConversationValidateBeforeCall(coreMessageGetSelfConversationRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreMessageGetConversationBetweenUsers200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreMessageGetUnreadConversationCounts
     * @param coreMessageGetConversationCountsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreMessageGetUnreadConversationCountsCall(CoreMessageGetConversationCountsRequest coreMessageGetConversationCountsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreMessageGetConversationCountsRequest;

        // create path and map variables
        String localVarPath = "/core_message_get_unread_conversation_counts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreMessageGetUnreadConversationCountsValidateBeforeCall(CoreMessageGetConversationCountsRequest coreMessageGetConversationCountsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreMessageGetConversationCountsRequest' is set
        if (coreMessageGetConversationCountsRequest == null) {
            throw new ApiException("Missing the required parameter 'coreMessageGetConversationCountsRequest' when calling coreMessageGetUnreadConversationCounts(Async)");
        }

        return coreMessageGetUnreadConversationCountsCall(coreMessageGetConversationCountsRequest, _callback);

    }

    /**
     * Retrieve a list of unread conversation counts, indexed by type.
     * Retrieve a list of unread conversation counts, indexed by type.
     * @param coreMessageGetConversationCountsRequest  (required)
     * @return CoreMessageGetUnreadConversationCounts200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreMessageGetUnreadConversationCounts200Response coreMessageGetUnreadConversationCounts(CoreMessageGetConversationCountsRequest coreMessageGetConversationCountsRequest) throws ApiException {
        ApiResponse<CoreMessageGetUnreadConversationCounts200Response> localVarResp = coreMessageGetUnreadConversationCountsWithHttpInfo(coreMessageGetConversationCountsRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieve a list of unread conversation counts, indexed by type.
     * Retrieve a list of unread conversation counts, indexed by type.
     * @param coreMessageGetConversationCountsRequest  (required)
     * @return ApiResponse&lt;CoreMessageGetUnreadConversationCounts200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreMessageGetUnreadConversationCounts200Response> coreMessageGetUnreadConversationCountsWithHttpInfo(CoreMessageGetConversationCountsRequest coreMessageGetConversationCountsRequest) throws ApiException {
        okhttp3.Call localVarCall = coreMessageGetUnreadConversationCountsValidateBeforeCall(coreMessageGetConversationCountsRequest, null);
        Type localVarReturnType = new TypeToken<CoreMessageGetUnreadConversationCounts200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a list of unread conversation counts, indexed by type. (asynchronously)
     * Retrieve a list of unread conversation counts, indexed by type.
     * @param coreMessageGetConversationCountsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreMessageGetUnreadConversationCountsAsync(CoreMessageGetConversationCountsRequest coreMessageGetConversationCountsRequest, final ApiCallback<CoreMessageGetUnreadConversationCounts200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreMessageGetUnreadConversationCountsValidateBeforeCall(coreMessageGetConversationCountsRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreMessageGetUnreadConversationCounts200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreMessageGetUnreadConversationsCount
     * @param coreMessageGetUnreadConversationsCountRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The count of unread messages for the user </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreMessageGetUnreadConversationsCountCall(CoreMessageGetUnreadConversationsCountRequest coreMessageGetUnreadConversationsCountRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreMessageGetUnreadConversationsCountRequest;

        // create path and map variables
        String localVarPath = "/core_message_get_unread_conversations_count";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreMessageGetUnreadConversationsCountValidateBeforeCall(CoreMessageGetUnreadConversationsCountRequest coreMessageGetUnreadConversationsCountRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreMessageGetUnreadConversationsCountRequest' is set
        if (coreMessageGetUnreadConversationsCountRequest == null) {
            throw new ApiException("Missing the required parameter 'coreMessageGetUnreadConversationsCountRequest' when calling coreMessageGetUnreadConversationsCount(Async)");
        }

        return coreMessageGetUnreadConversationsCountCall(coreMessageGetUnreadConversationsCountRequest, _callback);

    }

    /**
     * Retrieve the count of unread conversations for a given user
     * Retrieve the count of unread conversations for a given user
     * @param coreMessageGetUnreadConversationsCountRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The count of unread messages for the user </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreMessageGetUnreadConversationsCount(CoreMessageGetUnreadConversationsCountRequest coreMessageGetUnreadConversationsCountRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreMessageGetUnreadConversationsCountWithHttpInfo(coreMessageGetUnreadConversationsCountRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieve the count of unread conversations for a given user
     * Retrieve the count of unread conversations for a given user
     * @param coreMessageGetUnreadConversationsCountRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The count of unread messages for the user </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreMessageGetUnreadConversationsCountWithHttpInfo(CoreMessageGetUnreadConversationsCountRequest coreMessageGetUnreadConversationsCountRequest) throws ApiException {
        okhttp3.Call localVarCall = coreMessageGetUnreadConversationsCountValidateBeforeCall(coreMessageGetUnreadConversationsCountRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve the count of unread conversations for a given user (asynchronously)
     * Retrieve the count of unread conversations for a given user
     * @param coreMessageGetUnreadConversationsCountRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The count of unread messages for the user </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreMessageGetUnreadConversationsCountAsync(CoreMessageGetUnreadConversationsCountRequest coreMessageGetUnreadConversationsCountRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreMessageGetUnreadConversationsCountValidateBeforeCall(coreMessageGetUnreadConversationsCountRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreMessageGetUnreadNotificationCount
     * @param coreMessageGetUnreadNotificationCountRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The count of unread notifications. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreMessageGetUnreadNotificationCountCall(CoreMessageGetUnreadNotificationCountRequest coreMessageGetUnreadNotificationCountRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreMessageGetUnreadNotificationCountRequest;

        // create path and map variables
        String localVarPath = "/core_message_get_unread_notification_count";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreMessageGetUnreadNotificationCountValidateBeforeCall(CoreMessageGetUnreadNotificationCountRequest coreMessageGetUnreadNotificationCountRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreMessageGetUnreadNotificationCountRequest' is set
        if (coreMessageGetUnreadNotificationCountRequest == null) {
            throw new ApiException("Missing the required parameter 'coreMessageGetUnreadNotificationCountRequest' when calling coreMessageGetUnreadNotificationCount(Async)");
        }

        return coreMessageGetUnreadNotificationCountCall(coreMessageGetUnreadNotificationCountRequest, _callback);

    }

    /**
     * Get number of unread notifications.
     * Get number of unread notifications.
     * @param coreMessageGetUnreadNotificationCountRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The count of unread notifications. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreMessageGetUnreadNotificationCount(CoreMessageGetUnreadNotificationCountRequest coreMessageGetUnreadNotificationCountRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreMessageGetUnreadNotificationCountWithHttpInfo(coreMessageGetUnreadNotificationCountRequest);
        return localVarResp.getData();
    }

    /**
     * Get number of unread notifications.
     * Get number of unread notifications.
     * @param coreMessageGetUnreadNotificationCountRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The count of unread notifications. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreMessageGetUnreadNotificationCountWithHttpInfo(CoreMessageGetUnreadNotificationCountRequest coreMessageGetUnreadNotificationCountRequest) throws ApiException {
        okhttp3.Call localVarCall = coreMessageGetUnreadNotificationCountValidateBeforeCall(coreMessageGetUnreadNotificationCountRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get number of unread notifications. (asynchronously)
     * Get number of unread notifications.
     * @param coreMessageGetUnreadNotificationCountRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The count of unread notifications. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreMessageGetUnreadNotificationCountAsync(CoreMessageGetUnreadNotificationCountRequest coreMessageGetUnreadNotificationCountRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreMessageGetUnreadNotificationCountValidateBeforeCall(coreMessageGetUnreadNotificationCountRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreMessageGetUserContacts
     * @param coreMessageGetUserContactsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreMessageGetUserContactsCall(CoreMessageGetUserContactsRequest coreMessageGetUserContactsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreMessageGetUserContactsRequest;

        // create path and map variables
        String localVarPath = "/core_message_get_user_contacts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreMessageGetUserContactsValidateBeforeCall(CoreMessageGetUserContactsRequest coreMessageGetUserContactsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreMessageGetUserContactsRequest' is set
        if (coreMessageGetUserContactsRequest == null) {
            throw new ApiException("Missing the required parameter 'coreMessageGetUserContactsRequest' when calling coreMessageGetUserContacts(Async)");
        }

        return coreMessageGetUserContactsCall(coreMessageGetUserContactsRequest, _callback);

    }

    /**
     * Retrieve the contact list
     * Retrieve the contact list
     * @param coreMessageGetUserContactsRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreMessageGetUserContacts(CoreMessageGetUserContactsRequest coreMessageGetUserContactsRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreMessageGetUserContactsWithHttpInfo(coreMessageGetUserContactsRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieve the contact list
     * Retrieve the contact list
     * @param coreMessageGetUserContactsRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreMessageGetUserContactsWithHttpInfo(CoreMessageGetUserContactsRequest coreMessageGetUserContactsRequest) throws ApiException {
        okhttp3.Call localVarCall = coreMessageGetUserContactsValidateBeforeCall(coreMessageGetUserContactsRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve the contact list (asynchronously)
     * Retrieve the contact list
     * @param coreMessageGetUserContactsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreMessageGetUserContactsAsync(CoreMessageGetUserContactsRequest coreMessageGetUserContactsRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreMessageGetUserContactsValidateBeforeCall(coreMessageGetUserContactsRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreMessageGetUserMessagePreferences
     * @param coreMessageGetConversationCountsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreMessageGetUserMessagePreferencesCall(CoreMessageGetConversationCountsRequest coreMessageGetConversationCountsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreMessageGetConversationCountsRequest;

        // create path and map variables
        String localVarPath = "/core_message_get_user_message_preferences";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreMessageGetUserMessagePreferencesValidateBeforeCall(CoreMessageGetConversationCountsRequest coreMessageGetConversationCountsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreMessageGetConversationCountsRequest' is set
        if (coreMessageGetConversationCountsRequest == null) {
            throw new ApiException("Missing the required parameter 'coreMessageGetConversationCountsRequest' when calling coreMessageGetUserMessagePreferences(Async)");
        }

        return coreMessageGetUserMessagePreferencesCall(coreMessageGetConversationCountsRequest, _callback);

    }

    /**
     * Get the message preferences for a given user.
     * Get the message preferences for a given user.
     * @param coreMessageGetConversationCountsRequest  (required)
     * @return CoreMessageGetUserMessagePreferences200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreMessageGetUserMessagePreferences200Response coreMessageGetUserMessagePreferences(CoreMessageGetConversationCountsRequest coreMessageGetConversationCountsRequest) throws ApiException {
        ApiResponse<CoreMessageGetUserMessagePreferences200Response> localVarResp = coreMessageGetUserMessagePreferencesWithHttpInfo(coreMessageGetConversationCountsRequest);
        return localVarResp.getData();
    }

    /**
     * Get the message preferences for a given user.
     * Get the message preferences for a given user.
     * @param coreMessageGetConversationCountsRequest  (required)
     * @return ApiResponse&lt;CoreMessageGetUserMessagePreferences200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreMessageGetUserMessagePreferences200Response> coreMessageGetUserMessagePreferencesWithHttpInfo(CoreMessageGetConversationCountsRequest coreMessageGetConversationCountsRequest) throws ApiException {
        okhttp3.Call localVarCall = coreMessageGetUserMessagePreferencesValidateBeforeCall(coreMessageGetConversationCountsRequest, null);
        Type localVarReturnType = new TypeToken<CoreMessageGetUserMessagePreferences200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the message preferences for a given user. (asynchronously)
     * Get the message preferences for a given user.
     * @param coreMessageGetConversationCountsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreMessageGetUserMessagePreferencesAsync(CoreMessageGetConversationCountsRequest coreMessageGetConversationCountsRequest, final ApiCallback<CoreMessageGetUserMessagePreferences200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreMessageGetUserMessagePreferencesValidateBeforeCall(coreMessageGetConversationCountsRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreMessageGetUserMessagePreferences200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreMessageGetUserNotificationPreferences
     * @param coreMessageGetConversationCountsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreMessageGetUserNotificationPreferencesCall(CoreMessageGetConversationCountsRequest coreMessageGetConversationCountsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreMessageGetConversationCountsRequest;

        // create path and map variables
        String localVarPath = "/core_message_get_user_notification_preferences";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreMessageGetUserNotificationPreferencesValidateBeforeCall(CoreMessageGetConversationCountsRequest coreMessageGetConversationCountsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreMessageGetConversationCountsRequest' is set
        if (coreMessageGetConversationCountsRequest == null) {
            throw new ApiException("Missing the required parameter 'coreMessageGetConversationCountsRequest' when calling coreMessageGetUserNotificationPreferences(Async)");
        }

        return coreMessageGetUserNotificationPreferencesCall(coreMessageGetConversationCountsRequest, _callback);

    }

    /**
     * Get the notification preferences for a given user.
     * Get the notification preferences for a given user.
     * @param coreMessageGetConversationCountsRequest  (required)
     * @return CoreMessageGetUserNotificationPreferences200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreMessageGetUserNotificationPreferences200Response coreMessageGetUserNotificationPreferences(CoreMessageGetConversationCountsRequest coreMessageGetConversationCountsRequest) throws ApiException {
        ApiResponse<CoreMessageGetUserNotificationPreferences200Response> localVarResp = coreMessageGetUserNotificationPreferencesWithHttpInfo(coreMessageGetConversationCountsRequest);
        return localVarResp.getData();
    }

    /**
     * Get the notification preferences for a given user.
     * Get the notification preferences for a given user.
     * @param coreMessageGetConversationCountsRequest  (required)
     * @return ApiResponse&lt;CoreMessageGetUserNotificationPreferences200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreMessageGetUserNotificationPreferences200Response> coreMessageGetUserNotificationPreferencesWithHttpInfo(CoreMessageGetConversationCountsRequest coreMessageGetConversationCountsRequest) throws ApiException {
        okhttp3.Call localVarCall = coreMessageGetUserNotificationPreferencesValidateBeforeCall(coreMessageGetConversationCountsRequest, null);
        Type localVarReturnType = new TypeToken<CoreMessageGetUserNotificationPreferences200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the notification preferences for a given user. (asynchronously)
     * Get the notification preferences for a given user.
     * @param coreMessageGetConversationCountsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreMessageGetUserNotificationPreferencesAsync(CoreMessageGetConversationCountsRequest coreMessageGetConversationCountsRequest, final ApiCallback<CoreMessageGetUserNotificationPreferences200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreMessageGetUserNotificationPreferencesValidateBeforeCall(coreMessageGetConversationCountsRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreMessageGetUserNotificationPreferences200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreMessageMarkAllConversationMessagesAsRead
     * @param coreMessageMarkAllConversationMessagesAsReadRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreMessageMarkAllConversationMessagesAsReadCall(CoreMessageMarkAllConversationMessagesAsReadRequest coreMessageMarkAllConversationMessagesAsReadRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreMessageMarkAllConversationMessagesAsReadRequest;

        // create path and map variables
        String localVarPath = "/core_message_mark_all_conversation_messages_as_read";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreMessageMarkAllConversationMessagesAsReadValidateBeforeCall(CoreMessageMarkAllConversationMessagesAsReadRequest coreMessageMarkAllConversationMessagesAsReadRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreMessageMarkAllConversationMessagesAsReadRequest' is set
        if (coreMessageMarkAllConversationMessagesAsReadRequest == null) {
            throw new ApiException("Missing the required parameter 'coreMessageMarkAllConversationMessagesAsReadRequest' when calling coreMessageMarkAllConversationMessagesAsRead(Async)");
        }

        return coreMessageMarkAllConversationMessagesAsReadCall(coreMessageMarkAllConversationMessagesAsReadRequest, _callback);

    }

    /**
     * Mark all conversation messages as read for a given user
     * Mark all conversation messages as read for a given user
     * @param coreMessageMarkAllConversationMessagesAsReadRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreMessageMarkAllConversationMessagesAsRead(CoreMessageMarkAllConversationMessagesAsReadRequest coreMessageMarkAllConversationMessagesAsReadRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreMessageMarkAllConversationMessagesAsReadWithHttpInfo(coreMessageMarkAllConversationMessagesAsReadRequest);
        return localVarResp.getData();
    }

    /**
     * Mark all conversation messages as read for a given user
     * Mark all conversation messages as read for a given user
     * @param coreMessageMarkAllConversationMessagesAsReadRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreMessageMarkAllConversationMessagesAsReadWithHttpInfo(CoreMessageMarkAllConversationMessagesAsReadRequest coreMessageMarkAllConversationMessagesAsReadRequest) throws ApiException {
        okhttp3.Call localVarCall = coreMessageMarkAllConversationMessagesAsReadValidateBeforeCall(coreMessageMarkAllConversationMessagesAsReadRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Mark all conversation messages as read for a given user (asynchronously)
     * Mark all conversation messages as read for a given user
     * @param coreMessageMarkAllConversationMessagesAsReadRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreMessageMarkAllConversationMessagesAsReadAsync(CoreMessageMarkAllConversationMessagesAsReadRequest coreMessageMarkAllConversationMessagesAsReadRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreMessageMarkAllConversationMessagesAsReadValidateBeforeCall(coreMessageMarkAllConversationMessagesAsReadRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreMessageMarkAllNotificationsAsRead
     * @param coreMessageMarkAllNotificationsAsReadRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if the messages were marked read, false otherwise </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreMessageMarkAllNotificationsAsReadCall(CoreMessageMarkAllNotificationsAsReadRequest coreMessageMarkAllNotificationsAsReadRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreMessageMarkAllNotificationsAsReadRequest;

        // create path and map variables
        String localVarPath = "/core_message_mark_all_notifications_as_read";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreMessageMarkAllNotificationsAsReadValidateBeforeCall(CoreMessageMarkAllNotificationsAsReadRequest coreMessageMarkAllNotificationsAsReadRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreMessageMarkAllNotificationsAsReadRequest' is set
        if (coreMessageMarkAllNotificationsAsReadRequest == null) {
            throw new ApiException("Missing the required parameter 'coreMessageMarkAllNotificationsAsReadRequest' when calling coreMessageMarkAllNotificationsAsRead(Async)");
        }

        return coreMessageMarkAllNotificationsAsReadCall(coreMessageMarkAllNotificationsAsReadRequest, _callback);

    }

    /**
     * Mark all notifications as read for a given user
     * Mark all notifications as read for a given user
     * @param coreMessageMarkAllNotificationsAsReadRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if the messages were marked read, false otherwise </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreMessageMarkAllNotificationsAsRead(CoreMessageMarkAllNotificationsAsReadRequest coreMessageMarkAllNotificationsAsReadRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreMessageMarkAllNotificationsAsReadWithHttpInfo(coreMessageMarkAllNotificationsAsReadRequest);
        return localVarResp.getData();
    }

    /**
     * Mark all notifications as read for a given user
     * Mark all notifications as read for a given user
     * @param coreMessageMarkAllNotificationsAsReadRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if the messages were marked read, false otherwise </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreMessageMarkAllNotificationsAsReadWithHttpInfo(CoreMessageMarkAllNotificationsAsReadRequest coreMessageMarkAllNotificationsAsReadRequest) throws ApiException {
        okhttp3.Call localVarCall = coreMessageMarkAllNotificationsAsReadValidateBeforeCall(coreMessageMarkAllNotificationsAsReadRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Mark all notifications as read for a given user (asynchronously)
     * Mark all notifications as read for a given user
     * @param coreMessageMarkAllNotificationsAsReadRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> True if the messages were marked read, false otherwise </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreMessageMarkAllNotificationsAsReadAsync(CoreMessageMarkAllNotificationsAsReadRequest coreMessageMarkAllNotificationsAsReadRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreMessageMarkAllNotificationsAsReadValidateBeforeCall(coreMessageMarkAllNotificationsAsReadRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreMessageMarkMessageRead
     * @param coreMessageMarkMessageReadRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreMessageMarkMessageReadCall(CoreMessageMarkMessageReadRequest coreMessageMarkMessageReadRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreMessageMarkMessageReadRequest;

        // create path and map variables
        String localVarPath = "/core_message_mark_message_read";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreMessageMarkMessageReadValidateBeforeCall(CoreMessageMarkMessageReadRequest coreMessageMarkMessageReadRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreMessageMarkMessageReadRequest' is set
        if (coreMessageMarkMessageReadRequest == null) {
            throw new ApiException("Missing the required parameter 'coreMessageMarkMessageReadRequest' when calling coreMessageMarkMessageRead(Async)");
        }

        return coreMessageMarkMessageReadCall(coreMessageMarkMessageReadRequest, _callback);

    }

    /**
     * Mark a single message as read, trigger message_viewed event.
     * Mark a single message as read, trigger message_viewed event.
     * @param coreMessageMarkMessageReadRequest  (required)
     * @return CoreMessageMarkMessageRead200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreMessageMarkMessageRead200Response coreMessageMarkMessageRead(CoreMessageMarkMessageReadRequest coreMessageMarkMessageReadRequest) throws ApiException {
        ApiResponse<CoreMessageMarkMessageRead200Response> localVarResp = coreMessageMarkMessageReadWithHttpInfo(coreMessageMarkMessageReadRequest);
        return localVarResp.getData();
    }

    /**
     * Mark a single message as read, trigger message_viewed event.
     * Mark a single message as read, trigger message_viewed event.
     * @param coreMessageMarkMessageReadRequest  (required)
     * @return ApiResponse&lt;CoreMessageMarkMessageRead200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreMessageMarkMessageRead200Response> coreMessageMarkMessageReadWithHttpInfo(CoreMessageMarkMessageReadRequest coreMessageMarkMessageReadRequest) throws ApiException {
        okhttp3.Call localVarCall = coreMessageMarkMessageReadValidateBeforeCall(coreMessageMarkMessageReadRequest, null);
        Type localVarReturnType = new TypeToken<CoreMessageMarkMessageRead200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Mark a single message as read, trigger message_viewed event. (asynchronously)
     * Mark a single message as read, trigger message_viewed event.
     * @param coreMessageMarkMessageReadRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreMessageMarkMessageReadAsync(CoreMessageMarkMessageReadRequest coreMessageMarkMessageReadRequest, final ApiCallback<CoreMessageMarkMessageRead200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreMessageMarkMessageReadValidateBeforeCall(coreMessageMarkMessageReadRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreMessageMarkMessageRead200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreMessageMarkNotificationRead
     * @param coreMessageMarkNotificationReadRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreMessageMarkNotificationReadCall(CoreMessageMarkNotificationReadRequest coreMessageMarkNotificationReadRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreMessageMarkNotificationReadRequest;

        // create path and map variables
        String localVarPath = "/core_message_mark_notification_read";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreMessageMarkNotificationReadValidateBeforeCall(CoreMessageMarkNotificationReadRequest coreMessageMarkNotificationReadRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreMessageMarkNotificationReadRequest' is set
        if (coreMessageMarkNotificationReadRequest == null) {
            throw new ApiException("Missing the required parameter 'coreMessageMarkNotificationReadRequest' when calling coreMessageMarkNotificationRead(Async)");
        }

        return coreMessageMarkNotificationReadCall(coreMessageMarkNotificationReadRequest, _callback);

    }

    /**
     * Mark a single notification as read, trigger notification_viewed event.
     * Mark a single notification as read, trigger notification_viewed event.
     * @param coreMessageMarkNotificationReadRequest  (required)
     * @return CoreMessageMarkNotificationRead200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreMessageMarkNotificationRead200Response coreMessageMarkNotificationRead(CoreMessageMarkNotificationReadRequest coreMessageMarkNotificationReadRequest) throws ApiException {
        ApiResponse<CoreMessageMarkNotificationRead200Response> localVarResp = coreMessageMarkNotificationReadWithHttpInfo(coreMessageMarkNotificationReadRequest);
        return localVarResp.getData();
    }

    /**
     * Mark a single notification as read, trigger notification_viewed event.
     * Mark a single notification as read, trigger notification_viewed event.
     * @param coreMessageMarkNotificationReadRequest  (required)
     * @return ApiResponse&lt;CoreMessageMarkNotificationRead200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreMessageMarkNotificationRead200Response> coreMessageMarkNotificationReadWithHttpInfo(CoreMessageMarkNotificationReadRequest coreMessageMarkNotificationReadRequest) throws ApiException {
        okhttp3.Call localVarCall = coreMessageMarkNotificationReadValidateBeforeCall(coreMessageMarkNotificationReadRequest, null);
        Type localVarReturnType = new TypeToken<CoreMessageMarkNotificationRead200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Mark a single notification as read, trigger notification_viewed event. (asynchronously)
     * Mark a single notification as read, trigger notification_viewed event.
     * @param coreMessageMarkNotificationReadRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreMessageMarkNotificationReadAsync(CoreMessageMarkNotificationReadRequest coreMessageMarkNotificationReadRequest, final ApiCallback<CoreMessageMarkNotificationRead200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreMessageMarkNotificationReadValidateBeforeCall(coreMessageMarkNotificationReadRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreMessageMarkNotificationRead200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreMessageMessageProcessorConfigForm
     * @param coreMessageMessageProcessorConfigFormRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreMessageMessageProcessorConfigFormCall(CoreMessageMessageProcessorConfigFormRequest coreMessageMessageProcessorConfigFormRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreMessageMessageProcessorConfigFormRequest;

        // create path and map variables
        String localVarPath = "/core_message_message_processor_config_form";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreMessageMessageProcessorConfigFormValidateBeforeCall(CoreMessageMessageProcessorConfigFormRequest coreMessageMessageProcessorConfigFormRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreMessageMessageProcessorConfigFormRequest' is set
        if (coreMessageMessageProcessorConfigFormRequest == null) {
            throw new ApiException("Missing the required parameter 'coreMessageMessageProcessorConfigFormRequest' when calling coreMessageMessageProcessorConfigForm(Async)");
        }

        return coreMessageMessageProcessorConfigFormCall(coreMessageMessageProcessorConfigFormRequest, _callback);

    }

    /**
     * Process the message processor config form
     * Process the message processor config form
     * @param coreMessageMessageProcessorConfigFormRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreMessageMessageProcessorConfigForm(CoreMessageMessageProcessorConfigFormRequest coreMessageMessageProcessorConfigFormRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreMessageMessageProcessorConfigFormWithHttpInfo(coreMessageMessageProcessorConfigFormRequest);
        return localVarResp.getData();
    }

    /**
     * Process the message processor config form
     * Process the message processor config form
     * @param coreMessageMessageProcessorConfigFormRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreMessageMessageProcessorConfigFormWithHttpInfo(CoreMessageMessageProcessorConfigFormRequest coreMessageMessageProcessorConfigFormRequest) throws ApiException {
        okhttp3.Call localVarCall = coreMessageMessageProcessorConfigFormValidateBeforeCall(coreMessageMessageProcessorConfigFormRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Process the message processor config form (asynchronously)
     * Process the message processor config form
     * @param coreMessageMessageProcessorConfigFormRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreMessageMessageProcessorConfigFormAsync(CoreMessageMessageProcessorConfigFormRequest coreMessageMessageProcessorConfigFormRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreMessageMessageProcessorConfigFormValidateBeforeCall(coreMessageMessageProcessorConfigFormRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreMessageMessageSearchUsers
     * @param coreMessageMessageSearchUsersRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreMessageMessageSearchUsersCall(CoreMessageMessageSearchUsersRequest coreMessageMessageSearchUsersRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreMessageMessageSearchUsersRequest;

        // create path and map variables
        String localVarPath = "/core_message_message_search_users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreMessageMessageSearchUsersValidateBeforeCall(CoreMessageMessageSearchUsersRequest coreMessageMessageSearchUsersRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreMessageMessageSearchUsersRequest' is set
        if (coreMessageMessageSearchUsersRequest == null) {
            throw new ApiException("Missing the required parameter 'coreMessageMessageSearchUsersRequest' when calling coreMessageMessageSearchUsers(Async)");
        }

        return coreMessageMessageSearchUsersCall(coreMessageMessageSearchUsersRequest, _callback);

    }

    /**
     * Retrieve the data for searching for people
     * Retrieve the data for searching for people
     * @param coreMessageMessageSearchUsersRequest  (required)
     * @return CoreMessageMessageSearchUsers200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreMessageMessageSearchUsers200Response coreMessageMessageSearchUsers(CoreMessageMessageSearchUsersRequest coreMessageMessageSearchUsersRequest) throws ApiException {
        ApiResponse<CoreMessageMessageSearchUsers200Response> localVarResp = coreMessageMessageSearchUsersWithHttpInfo(coreMessageMessageSearchUsersRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieve the data for searching for people
     * Retrieve the data for searching for people
     * @param coreMessageMessageSearchUsersRequest  (required)
     * @return ApiResponse&lt;CoreMessageMessageSearchUsers200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreMessageMessageSearchUsers200Response> coreMessageMessageSearchUsersWithHttpInfo(CoreMessageMessageSearchUsersRequest coreMessageMessageSearchUsersRequest) throws ApiException {
        okhttp3.Call localVarCall = coreMessageMessageSearchUsersValidateBeforeCall(coreMessageMessageSearchUsersRequest, null);
        Type localVarReturnType = new TypeToken<CoreMessageMessageSearchUsers200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve the data for searching for people (asynchronously)
     * Retrieve the data for searching for people
     * @param coreMessageMessageSearchUsersRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreMessageMessageSearchUsersAsync(CoreMessageMessageSearchUsersRequest coreMessageMessageSearchUsersRequest, final ApiCallback<CoreMessageMessageSearchUsers200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreMessageMessageSearchUsersValidateBeforeCall(coreMessageMessageSearchUsersRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreMessageMessageSearchUsers200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreMessageMuteConversations
     * @param coreMessageMuteConversationsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of warnings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreMessageMuteConversationsCall(CoreMessageMuteConversationsRequest coreMessageMuteConversationsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreMessageMuteConversationsRequest;

        // create path and map variables
        String localVarPath = "/core_message_mute_conversations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreMessageMuteConversationsValidateBeforeCall(CoreMessageMuteConversationsRequest coreMessageMuteConversationsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreMessageMuteConversationsRequest' is set
        if (coreMessageMuteConversationsRequest == null) {
            throw new ApiException("Missing the required parameter 'coreMessageMuteConversationsRequest' when calling coreMessageMuteConversations(Async)");
        }

        return coreMessageMuteConversationsCall(coreMessageMuteConversationsRequest, _callback);

    }

    /**
     * Mutes a list of conversations
     * Mutes a list of conversations
     * @param coreMessageMuteConversationsRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of warnings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreMessageMuteConversations(CoreMessageMuteConversationsRequest coreMessageMuteConversationsRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreMessageMuteConversationsWithHttpInfo(coreMessageMuteConversationsRequest);
        return localVarResp.getData();
    }

    /**
     * Mutes a list of conversations
     * Mutes a list of conversations
     * @param coreMessageMuteConversationsRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of warnings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreMessageMuteConversationsWithHttpInfo(CoreMessageMuteConversationsRequest coreMessageMuteConversationsRequest) throws ApiException {
        okhttp3.Call localVarCall = coreMessageMuteConversationsValidateBeforeCall(coreMessageMuteConversationsRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Mutes a list of conversations (asynchronously)
     * Mutes a list of conversations
     * @param coreMessageMuteConversationsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of warnings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreMessageMuteConversationsAsync(CoreMessageMuteConversationsRequest coreMessageMuteConversationsRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreMessageMuteConversationsValidateBeforeCall(coreMessageMuteConversationsRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreMessageSearchContacts
     * @param coreMessageSearchContactsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of contacts </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreMessageSearchContactsCall(CoreMessageSearchContactsRequest coreMessageSearchContactsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreMessageSearchContactsRequest;

        // create path and map variables
        String localVarPath = "/core_message_search_contacts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreMessageSearchContactsValidateBeforeCall(CoreMessageSearchContactsRequest coreMessageSearchContactsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreMessageSearchContactsRequest' is set
        if (coreMessageSearchContactsRequest == null) {
            throw new ApiException("Missing the required parameter 'coreMessageSearchContactsRequest' when calling coreMessageSearchContacts(Async)");
        }

        return coreMessageSearchContactsCall(coreMessageSearchContactsRequest, _callback);

    }

    /**
     * Search for contacts
     * Search for contacts
     * @param coreMessageSearchContactsRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of contacts </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreMessageSearchContacts(CoreMessageSearchContactsRequest coreMessageSearchContactsRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreMessageSearchContactsWithHttpInfo(coreMessageSearchContactsRequest);
        return localVarResp.getData();
    }

    /**
     * Search for contacts
     * Search for contacts
     * @param coreMessageSearchContactsRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of contacts </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreMessageSearchContactsWithHttpInfo(CoreMessageSearchContactsRequest coreMessageSearchContactsRequest) throws ApiException {
        okhttp3.Call localVarCall = coreMessageSearchContactsValidateBeforeCall(coreMessageSearchContactsRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search for contacts (asynchronously)
     * Search for contacts
     * @param coreMessageSearchContactsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of contacts </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreMessageSearchContactsAsync(CoreMessageSearchContactsRequest coreMessageSearchContactsRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreMessageSearchContactsValidateBeforeCall(coreMessageSearchContactsRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreMessageSendInstantMessages
     * @param coreMessageSendInstantMessagesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreMessageSendInstantMessagesCall(CoreMessageSendInstantMessagesRequest coreMessageSendInstantMessagesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreMessageSendInstantMessagesRequest;

        // create path and map variables
        String localVarPath = "/core_message_send_instant_messages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreMessageSendInstantMessagesValidateBeforeCall(CoreMessageSendInstantMessagesRequest coreMessageSendInstantMessagesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreMessageSendInstantMessagesRequest' is set
        if (coreMessageSendInstantMessagesRequest == null) {
            throw new ApiException("Missing the required parameter 'coreMessageSendInstantMessagesRequest' when calling coreMessageSendInstantMessages(Async)");
        }

        return coreMessageSendInstantMessagesCall(coreMessageSendInstantMessagesRequest, _callback);

    }

    /**
     * Send instant messages
     * Send instant messages
     * @param coreMessageSendInstantMessagesRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreMessageSendInstantMessages(CoreMessageSendInstantMessagesRequest coreMessageSendInstantMessagesRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreMessageSendInstantMessagesWithHttpInfo(coreMessageSendInstantMessagesRequest);
        return localVarResp.getData();
    }

    /**
     * Send instant messages
     * Send instant messages
     * @param coreMessageSendInstantMessagesRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreMessageSendInstantMessagesWithHttpInfo(CoreMessageSendInstantMessagesRequest coreMessageSendInstantMessagesRequest) throws ApiException {
        okhttp3.Call localVarCall = coreMessageSendInstantMessagesValidateBeforeCall(coreMessageSendInstantMessagesRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Send instant messages (asynchronously)
     * Send instant messages
     * @param coreMessageSendInstantMessagesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreMessageSendInstantMessagesAsync(CoreMessageSendInstantMessagesRequest coreMessageSendInstantMessagesRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreMessageSendInstantMessagesValidateBeforeCall(coreMessageSendInstantMessagesRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreMessageSendMessagesToConversation
     * @param coreMessageSendMessagesToConversationRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreMessageSendMessagesToConversationCall(CoreMessageSendMessagesToConversationRequest coreMessageSendMessagesToConversationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreMessageSendMessagesToConversationRequest;

        // create path and map variables
        String localVarPath = "/core_message_send_messages_to_conversation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreMessageSendMessagesToConversationValidateBeforeCall(CoreMessageSendMessagesToConversationRequest coreMessageSendMessagesToConversationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreMessageSendMessagesToConversationRequest' is set
        if (coreMessageSendMessagesToConversationRequest == null) {
            throw new ApiException("Missing the required parameter 'coreMessageSendMessagesToConversationRequest' when calling coreMessageSendMessagesToConversation(Async)");
        }

        return coreMessageSendMessagesToConversationCall(coreMessageSendMessagesToConversationRequest, _callback);

    }

    /**
     * Send messages to an existing conversation between users
     * Send messages to an existing conversation between users
     * @param coreMessageSendMessagesToConversationRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreMessageSendMessagesToConversation(CoreMessageSendMessagesToConversationRequest coreMessageSendMessagesToConversationRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreMessageSendMessagesToConversationWithHttpInfo(coreMessageSendMessagesToConversationRequest);
        return localVarResp.getData();
    }

    /**
     * Send messages to an existing conversation between users
     * Send messages to an existing conversation between users
     * @param coreMessageSendMessagesToConversationRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreMessageSendMessagesToConversationWithHttpInfo(CoreMessageSendMessagesToConversationRequest coreMessageSendMessagesToConversationRequest) throws ApiException {
        okhttp3.Call localVarCall = coreMessageSendMessagesToConversationValidateBeforeCall(coreMessageSendMessagesToConversationRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Send messages to an existing conversation between users (asynchronously)
     * Send messages to an existing conversation between users
     * @param coreMessageSendMessagesToConversationRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreMessageSendMessagesToConversationAsync(CoreMessageSendMessagesToConversationRequest coreMessageSendMessagesToConversationRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreMessageSendMessagesToConversationValidateBeforeCall(coreMessageSendMessagesToConversationRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreMessageSetFavouriteConversations
     * @param coreMessageSetFavouriteConversationsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of warnings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreMessageSetFavouriteConversationsCall(CoreMessageSetFavouriteConversationsRequest coreMessageSetFavouriteConversationsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreMessageSetFavouriteConversationsRequest;

        // create path and map variables
        String localVarPath = "/core_message_set_favourite_conversations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreMessageSetFavouriteConversationsValidateBeforeCall(CoreMessageSetFavouriteConversationsRequest coreMessageSetFavouriteConversationsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreMessageSetFavouriteConversationsRequest' is set
        if (coreMessageSetFavouriteConversationsRequest == null) {
            throw new ApiException("Missing the required parameter 'coreMessageSetFavouriteConversationsRequest' when calling coreMessageSetFavouriteConversations(Async)");
        }

        return coreMessageSetFavouriteConversationsCall(coreMessageSetFavouriteConversationsRequest, _callback);

    }

    /**
     * Mark a conversation or group of conversations as favourites/starred conversations.
     * Mark a conversation or group of conversations as favourites/starred conversations.
     * @param coreMessageSetFavouriteConversationsRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of warnings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreMessageSetFavouriteConversations(CoreMessageSetFavouriteConversationsRequest coreMessageSetFavouriteConversationsRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreMessageSetFavouriteConversationsWithHttpInfo(coreMessageSetFavouriteConversationsRequest);
        return localVarResp.getData();
    }

    /**
     * Mark a conversation or group of conversations as favourites/starred conversations.
     * Mark a conversation or group of conversations as favourites/starred conversations.
     * @param coreMessageSetFavouriteConversationsRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of warnings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreMessageSetFavouriteConversationsWithHttpInfo(CoreMessageSetFavouriteConversationsRequest coreMessageSetFavouriteConversationsRequest) throws ApiException {
        okhttp3.Call localVarCall = coreMessageSetFavouriteConversationsValidateBeforeCall(coreMessageSetFavouriteConversationsRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Mark a conversation or group of conversations as favourites/starred conversations. (asynchronously)
     * Mark a conversation or group of conversations as favourites/starred conversations.
     * @param coreMessageSetFavouriteConversationsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of warnings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreMessageSetFavouriteConversationsAsync(CoreMessageSetFavouriteConversationsRequest coreMessageSetFavouriteConversationsRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreMessageSetFavouriteConversationsValidateBeforeCall(coreMessageSetFavouriteConversationsRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreMessageUnblockUser
     * @param coreMessageUnblockUserRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of warnings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreMessageUnblockUserCall(CoreMessageUnblockUserRequest coreMessageUnblockUserRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreMessageUnblockUserRequest;

        // create path and map variables
        String localVarPath = "/core_message_unblock_user";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreMessageUnblockUserValidateBeforeCall(CoreMessageUnblockUserRequest coreMessageUnblockUserRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreMessageUnblockUserRequest' is set
        if (coreMessageUnblockUserRequest == null) {
            throw new ApiException("Missing the required parameter 'coreMessageUnblockUserRequest' when calling coreMessageUnblockUser(Async)");
        }

        return coreMessageUnblockUserCall(coreMessageUnblockUserRequest, _callback);

    }

    /**
     * Unblocks a user
     * Unblocks a user
     * @param coreMessageUnblockUserRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of warnings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreMessageUnblockUser(CoreMessageUnblockUserRequest coreMessageUnblockUserRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreMessageUnblockUserWithHttpInfo(coreMessageUnblockUserRequest);
        return localVarResp.getData();
    }

    /**
     * Unblocks a user
     * Unblocks a user
     * @param coreMessageUnblockUserRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of warnings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreMessageUnblockUserWithHttpInfo(CoreMessageUnblockUserRequest coreMessageUnblockUserRequest) throws ApiException {
        okhttp3.Call localVarCall = coreMessageUnblockUserValidateBeforeCall(coreMessageUnblockUserRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Unblocks a user (asynchronously)
     * Unblocks a user
     * @param coreMessageUnblockUserRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of warnings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreMessageUnblockUserAsync(CoreMessageUnblockUserRequest coreMessageUnblockUserRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreMessageUnblockUserValidateBeforeCall(coreMessageUnblockUserRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreMessageUnmuteConversations
     * @param coreMessageUnmuteConversationsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of warnings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreMessageUnmuteConversationsCall(CoreMessageUnmuteConversationsRequest coreMessageUnmuteConversationsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreMessageUnmuteConversationsRequest;

        // create path and map variables
        String localVarPath = "/core_message_unmute_conversations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreMessageUnmuteConversationsValidateBeforeCall(CoreMessageUnmuteConversationsRequest coreMessageUnmuteConversationsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreMessageUnmuteConversationsRequest' is set
        if (coreMessageUnmuteConversationsRequest == null) {
            throw new ApiException("Missing the required parameter 'coreMessageUnmuteConversationsRequest' when calling coreMessageUnmuteConversations(Async)");
        }

        return coreMessageUnmuteConversationsCall(coreMessageUnmuteConversationsRequest, _callback);

    }

    /**
     * Unmutes a list of conversations
     * Unmutes a list of conversations
     * @param coreMessageUnmuteConversationsRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of warnings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreMessageUnmuteConversations(CoreMessageUnmuteConversationsRequest coreMessageUnmuteConversationsRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreMessageUnmuteConversationsWithHttpInfo(coreMessageUnmuteConversationsRequest);
        return localVarResp.getData();
    }

    /**
     * Unmutes a list of conversations
     * Unmutes a list of conversations
     * @param coreMessageUnmuteConversationsRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of warnings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreMessageUnmuteConversationsWithHttpInfo(CoreMessageUnmuteConversationsRequest coreMessageUnmuteConversationsRequest) throws ApiException {
        okhttp3.Call localVarCall = coreMessageUnmuteConversationsValidateBeforeCall(coreMessageUnmuteConversationsRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Unmutes a list of conversations (asynchronously)
     * Unmutes a list of conversations
     * @param coreMessageUnmuteConversationsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of warnings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreMessageUnmuteConversationsAsync(CoreMessageUnmuteConversationsRequest coreMessageUnmuteConversationsRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreMessageUnmuteConversationsValidateBeforeCall(coreMessageUnmuteConversationsRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreMessageUnsetFavouriteConversations
     * @param coreMessageSetFavouriteConversationsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of warnings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreMessageUnsetFavouriteConversationsCall(CoreMessageSetFavouriteConversationsRequest coreMessageSetFavouriteConversationsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreMessageSetFavouriteConversationsRequest;

        // create path and map variables
        String localVarPath = "/core_message_unset_favourite_conversations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreMessageUnsetFavouriteConversationsValidateBeforeCall(CoreMessageSetFavouriteConversationsRequest coreMessageSetFavouriteConversationsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreMessageSetFavouriteConversationsRequest' is set
        if (coreMessageSetFavouriteConversationsRequest == null) {
            throw new ApiException("Missing the required parameter 'coreMessageSetFavouriteConversationsRequest' when calling coreMessageUnsetFavouriteConversations(Async)");
        }

        return coreMessageUnsetFavouriteConversationsCall(coreMessageSetFavouriteConversationsRequest, _callback);

    }

    /**
     * Unset a conversation or group of conversations as favourites/starred conversations.
     * Unset a conversation or group of conversations as favourites/starred conversations.
     * @param coreMessageSetFavouriteConversationsRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of warnings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreMessageUnsetFavouriteConversations(CoreMessageSetFavouriteConversationsRequest coreMessageSetFavouriteConversationsRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreMessageUnsetFavouriteConversationsWithHttpInfo(coreMessageSetFavouriteConversationsRequest);
        return localVarResp.getData();
    }

    /**
     * Unset a conversation or group of conversations as favourites/starred conversations.
     * Unset a conversation or group of conversations as favourites/starred conversations.
     * @param coreMessageSetFavouriteConversationsRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of warnings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreMessageUnsetFavouriteConversationsWithHttpInfo(CoreMessageSetFavouriteConversationsRequest coreMessageSetFavouriteConversationsRequest) throws ApiException {
        okhttp3.Call localVarCall = coreMessageUnsetFavouriteConversationsValidateBeforeCall(coreMessageSetFavouriteConversationsRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Unset a conversation or group of conversations as favourites/starred conversations. (asynchronously)
     * Unset a conversation or group of conversations as favourites/starred conversations.
     * @param coreMessageSetFavouriteConversationsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of warnings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreMessageUnsetFavouriteConversationsAsync(CoreMessageSetFavouriteConversationsRequest coreMessageSetFavouriteConversationsRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreMessageUnsetFavouriteConversationsValidateBeforeCall(coreMessageSetFavouriteConversationsRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreMoodlenetAuthCheck
     * @param coreMoodlenetAuthCheckRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreMoodlenetAuthCheckCall(CoreMoodlenetAuthCheckRequest coreMoodlenetAuthCheckRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreMoodlenetAuthCheckRequest;

        // create path and map variables
        String localVarPath = "/core_moodlenet_auth_check";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreMoodlenetAuthCheckValidateBeforeCall(CoreMoodlenetAuthCheckRequest coreMoodlenetAuthCheckRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreMoodlenetAuthCheckRequest' is set
        if (coreMoodlenetAuthCheckRequest == null) {
            throw new ApiException("Missing the required parameter 'coreMoodlenetAuthCheckRequest' when calling coreMoodlenetAuthCheck(Async)");
        }

        return coreMoodlenetAuthCheckCall(coreMoodlenetAuthCheckRequest, _callback);

    }

    /**
     * Check a user has authorized for a given MoodleNet site
     * Check a user has authorized for a given MoodleNet site
     * @param coreMoodlenetAuthCheckRequest  (required)
     * @return CoreMoodlenetAuthCheck200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreMoodlenetAuthCheck200Response coreMoodlenetAuthCheck(CoreMoodlenetAuthCheckRequest coreMoodlenetAuthCheckRequest) throws ApiException {
        ApiResponse<CoreMoodlenetAuthCheck200Response> localVarResp = coreMoodlenetAuthCheckWithHttpInfo(coreMoodlenetAuthCheckRequest);
        return localVarResp.getData();
    }

    /**
     * Check a user has authorized for a given MoodleNet site
     * Check a user has authorized for a given MoodleNet site
     * @param coreMoodlenetAuthCheckRequest  (required)
     * @return ApiResponse&lt;CoreMoodlenetAuthCheck200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreMoodlenetAuthCheck200Response> coreMoodlenetAuthCheckWithHttpInfo(CoreMoodlenetAuthCheckRequest coreMoodlenetAuthCheckRequest) throws ApiException {
        okhttp3.Call localVarCall = coreMoodlenetAuthCheckValidateBeforeCall(coreMoodlenetAuthCheckRequest, null);
        Type localVarReturnType = new TypeToken<CoreMoodlenetAuthCheck200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Check a user has authorized for a given MoodleNet site (asynchronously)
     * Check a user has authorized for a given MoodleNet site
     * @param coreMoodlenetAuthCheckRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreMoodlenetAuthCheckAsync(CoreMoodlenetAuthCheckRequest coreMoodlenetAuthCheckRequest, final ApiCallback<CoreMoodlenetAuthCheck200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreMoodlenetAuthCheckValidateBeforeCall(coreMoodlenetAuthCheckRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreMoodlenetAuthCheck200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreMoodlenetGetShareInfoActivity
     * @param coreMoodlenetGetShareInfoActivityRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreMoodlenetGetShareInfoActivityCall(CoreMoodlenetGetShareInfoActivityRequest coreMoodlenetGetShareInfoActivityRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreMoodlenetGetShareInfoActivityRequest;

        // create path and map variables
        String localVarPath = "/core_moodlenet_get_share_info_activity";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreMoodlenetGetShareInfoActivityValidateBeforeCall(CoreMoodlenetGetShareInfoActivityRequest coreMoodlenetGetShareInfoActivityRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreMoodlenetGetShareInfoActivityRequest' is set
        if (coreMoodlenetGetShareInfoActivityRequest == null) {
            throw new ApiException("Missing the required parameter 'coreMoodlenetGetShareInfoActivityRequest' when calling coreMoodlenetGetShareInfoActivity(Async)");
        }

        return coreMoodlenetGetShareInfoActivityCall(coreMoodlenetGetShareInfoActivityRequest, _callback);

    }

    /**
     * Get information about an activity being shared
     * Get information about an activity being shared
     * @param coreMoodlenetGetShareInfoActivityRequest  (required)
     * @return CoreMoodlenetGetShareInfoActivity200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreMoodlenetGetShareInfoActivity200Response coreMoodlenetGetShareInfoActivity(CoreMoodlenetGetShareInfoActivityRequest coreMoodlenetGetShareInfoActivityRequest) throws ApiException {
        ApiResponse<CoreMoodlenetGetShareInfoActivity200Response> localVarResp = coreMoodlenetGetShareInfoActivityWithHttpInfo(coreMoodlenetGetShareInfoActivityRequest);
        return localVarResp.getData();
    }

    /**
     * Get information about an activity being shared
     * Get information about an activity being shared
     * @param coreMoodlenetGetShareInfoActivityRequest  (required)
     * @return ApiResponse&lt;CoreMoodlenetGetShareInfoActivity200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreMoodlenetGetShareInfoActivity200Response> coreMoodlenetGetShareInfoActivityWithHttpInfo(CoreMoodlenetGetShareInfoActivityRequest coreMoodlenetGetShareInfoActivityRequest) throws ApiException {
        okhttp3.Call localVarCall = coreMoodlenetGetShareInfoActivityValidateBeforeCall(coreMoodlenetGetShareInfoActivityRequest, null);
        Type localVarReturnType = new TypeToken<CoreMoodlenetGetShareInfoActivity200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get information about an activity being shared (asynchronously)
     * Get information about an activity being shared
     * @param coreMoodlenetGetShareInfoActivityRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreMoodlenetGetShareInfoActivityAsync(CoreMoodlenetGetShareInfoActivityRequest coreMoodlenetGetShareInfoActivityRequest, final ApiCallback<CoreMoodlenetGetShareInfoActivity200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreMoodlenetGetShareInfoActivityValidateBeforeCall(coreMoodlenetGetShareInfoActivityRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreMoodlenetGetShareInfoActivity200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreMoodlenetGetSharedCourseInfo
     * @param coreMoodlenetGetSharedCourseInfoRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreMoodlenetGetSharedCourseInfoCall(CoreMoodlenetGetSharedCourseInfoRequest coreMoodlenetGetSharedCourseInfoRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreMoodlenetGetSharedCourseInfoRequest;

        // create path and map variables
        String localVarPath = "/core_moodlenet_get_shared_course_info";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreMoodlenetGetSharedCourseInfoValidateBeforeCall(CoreMoodlenetGetSharedCourseInfoRequest coreMoodlenetGetSharedCourseInfoRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreMoodlenetGetSharedCourseInfoRequest' is set
        if (coreMoodlenetGetSharedCourseInfoRequest == null) {
            throw new ApiException("Missing the required parameter 'coreMoodlenetGetSharedCourseInfoRequest' when calling coreMoodlenetGetSharedCourseInfo(Async)");
        }

        return coreMoodlenetGetSharedCourseInfoCall(coreMoodlenetGetSharedCourseInfoRequest, _callback);

    }

    /**
     * Get information about an course being shared
     * Get information about an course being shared
     * @param coreMoodlenetGetSharedCourseInfoRequest  (required)
     * @return CoreMoodlenetGetSharedCourseInfo200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreMoodlenetGetSharedCourseInfo200Response coreMoodlenetGetSharedCourseInfo(CoreMoodlenetGetSharedCourseInfoRequest coreMoodlenetGetSharedCourseInfoRequest) throws ApiException {
        ApiResponse<CoreMoodlenetGetSharedCourseInfo200Response> localVarResp = coreMoodlenetGetSharedCourseInfoWithHttpInfo(coreMoodlenetGetSharedCourseInfoRequest);
        return localVarResp.getData();
    }

    /**
     * Get information about an course being shared
     * Get information about an course being shared
     * @param coreMoodlenetGetSharedCourseInfoRequest  (required)
     * @return ApiResponse&lt;CoreMoodlenetGetSharedCourseInfo200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreMoodlenetGetSharedCourseInfo200Response> coreMoodlenetGetSharedCourseInfoWithHttpInfo(CoreMoodlenetGetSharedCourseInfoRequest coreMoodlenetGetSharedCourseInfoRequest) throws ApiException {
        okhttp3.Call localVarCall = coreMoodlenetGetSharedCourseInfoValidateBeforeCall(coreMoodlenetGetSharedCourseInfoRequest, null);
        Type localVarReturnType = new TypeToken<CoreMoodlenetGetSharedCourseInfo200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get information about an course being shared (asynchronously)
     * Get information about an course being shared
     * @param coreMoodlenetGetSharedCourseInfoRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreMoodlenetGetSharedCourseInfoAsync(CoreMoodlenetGetSharedCourseInfoRequest coreMoodlenetGetSharedCourseInfoRequest, final ApiCallback<CoreMoodlenetGetSharedCourseInfo200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreMoodlenetGetSharedCourseInfoValidateBeforeCall(coreMoodlenetGetSharedCourseInfoRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreMoodlenetGetSharedCourseInfo200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreMoodlenetSendActivity
     * @param coreMoodlenetSendActivityRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreMoodlenetSendActivityCall(CoreMoodlenetSendActivityRequest coreMoodlenetSendActivityRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreMoodlenetSendActivityRequest;

        // create path and map variables
        String localVarPath = "/core_moodlenet_send_activity";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreMoodlenetSendActivityValidateBeforeCall(CoreMoodlenetSendActivityRequest coreMoodlenetSendActivityRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreMoodlenetSendActivityRequest' is set
        if (coreMoodlenetSendActivityRequest == null) {
            throw new ApiException("Missing the required parameter 'coreMoodlenetSendActivityRequest' when calling coreMoodlenetSendActivity(Async)");
        }

        return coreMoodlenetSendActivityCall(coreMoodlenetSendActivityRequest, _callback);

    }

    /**
     * Send activity to MoodleNet
     * Send activity to MoodleNet
     * @param coreMoodlenetSendActivityRequest  (required)
     * @return CoreMoodlenetSendActivity200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreMoodlenetSendActivity200Response coreMoodlenetSendActivity(CoreMoodlenetSendActivityRequest coreMoodlenetSendActivityRequest) throws ApiException {
        ApiResponse<CoreMoodlenetSendActivity200Response> localVarResp = coreMoodlenetSendActivityWithHttpInfo(coreMoodlenetSendActivityRequest);
        return localVarResp.getData();
    }

    /**
     * Send activity to MoodleNet
     * Send activity to MoodleNet
     * @param coreMoodlenetSendActivityRequest  (required)
     * @return ApiResponse&lt;CoreMoodlenetSendActivity200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreMoodlenetSendActivity200Response> coreMoodlenetSendActivityWithHttpInfo(CoreMoodlenetSendActivityRequest coreMoodlenetSendActivityRequest) throws ApiException {
        okhttp3.Call localVarCall = coreMoodlenetSendActivityValidateBeforeCall(coreMoodlenetSendActivityRequest, null);
        Type localVarReturnType = new TypeToken<CoreMoodlenetSendActivity200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Send activity to MoodleNet (asynchronously)
     * Send activity to MoodleNet
     * @param coreMoodlenetSendActivityRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreMoodlenetSendActivityAsync(CoreMoodlenetSendActivityRequest coreMoodlenetSendActivityRequest, final ApiCallback<CoreMoodlenetSendActivity200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreMoodlenetSendActivityValidateBeforeCall(coreMoodlenetSendActivityRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreMoodlenetSendActivity200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreMoodlenetSendCourse
     * @param coreMoodlenetSendCourseRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreMoodlenetSendCourseCall(CoreMoodlenetSendCourseRequest coreMoodlenetSendCourseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreMoodlenetSendCourseRequest;

        // create path and map variables
        String localVarPath = "/core_moodlenet_send_course";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreMoodlenetSendCourseValidateBeforeCall(CoreMoodlenetSendCourseRequest coreMoodlenetSendCourseRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreMoodlenetSendCourseRequest' is set
        if (coreMoodlenetSendCourseRequest == null) {
            throw new ApiException("Missing the required parameter 'coreMoodlenetSendCourseRequest' when calling coreMoodlenetSendCourse(Async)");
        }

        return coreMoodlenetSendCourseCall(coreMoodlenetSendCourseRequest, _callback);

    }

    /**
     * Send course to MoodleNet
     * Send course to MoodleNet
     * @param coreMoodlenetSendCourseRequest  (required)
     * @return CoreMoodlenetSendCourse200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreMoodlenetSendCourse200Response coreMoodlenetSendCourse(CoreMoodlenetSendCourseRequest coreMoodlenetSendCourseRequest) throws ApiException {
        ApiResponse<CoreMoodlenetSendCourse200Response> localVarResp = coreMoodlenetSendCourseWithHttpInfo(coreMoodlenetSendCourseRequest);
        return localVarResp.getData();
    }

    /**
     * Send course to MoodleNet
     * Send course to MoodleNet
     * @param coreMoodlenetSendCourseRequest  (required)
     * @return ApiResponse&lt;CoreMoodlenetSendCourse200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreMoodlenetSendCourse200Response> coreMoodlenetSendCourseWithHttpInfo(CoreMoodlenetSendCourseRequest coreMoodlenetSendCourseRequest) throws ApiException {
        okhttp3.Call localVarCall = coreMoodlenetSendCourseValidateBeforeCall(coreMoodlenetSendCourseRequest, null);
        Type localVarReturnType = new TypeToken<CoreMoodlenetSendCourse200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Send course to MoodleNet (asynchronously)
     * Send course to MoodleNet
     * @param coreMoodlenetSendCourseRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreMoodlenetSendCourseAsync(CoreMoodlenetSendCourseRequest coreMoodlenetSendCourseRequest, final ApiCallback<CoreMoodlenetSendCourse200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreMoodlenetSendCourseValidateBeforeCall(coreMoodlenetSendCourseRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreMoodlenetSendCourse200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreMyViewPage
     * @param coreMyViewPageRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreMyViewPageCall(CoreMyViewPageRequest coreMyViewPageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreMyViewPageRequest;

        // create path and map variables
        String localVarPath = "/core_my_view_page";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreMyViewPageValidateBeforeCall(CoreMyViewPageRequest coreMyViewPageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreMyViewPageRequest' is set
        if (coreMyViewPageRequest == null) {
            throw new ApiException("Missing the required parameter 'coreMyViewPageRequest' when calling coreMyViewPage(Async)");
        }

        return coreMyViewPageCall(coreMyViewPageRequest, _callback);

    }

    /**
     * Trigger the My or Dashboard viewed event.
     * Trigger the My or Dashboard viewed event.
     * @param coreMyViewPageRequest  (required)
     * @return CoreCalendarDeleteSubscription200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreCalendarDeleteSubscription200Response coreMyViewPage(CoreMyViewPageRequest coreMyViewPageRequest) throws ApiException {
        ApiResponse<CoreCalendarDeleteSubscription200Response> localVarResp = coreMyViewPageWithHttpInfo(coreMyViewPageRequest);
        return localVarResp.getData();
    }

    /**
     * Trigger the My or Dashboard viewed event.
     * Trigger the My or Dashboard viewed event.
     * @param coreMyViewPageRequest  (required)
     * @return ApiResponse&lt;CoreCalendarDeleteSubscription200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreCalendarDeleteSubscription200Response> coreMyViewPageWithHttpInfo(CoreMyViewPageRequest coreMyViewPageRequest) throws ApiException {
        okhttp3.Call localVarCall = coreMyViewPageValidateBeforeCall(coreMyViewPageRequest, null);
        Type localVarReturnType = new TypeToken<CoreCalendarDeleteSubscription200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Trigger the My or Dashboard viewed event. (asynchronously)
     * Trigger the My or Dashboard viewed event.
     * @param coreMyViewPageRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreMyViewPageAsync(CoreMyViewPageRequest coreMyViewPageRequest, final ApiCallback<CoreCalendarDeleteSubscription200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreMyViewPageValidateBeforeCall(coreMyViewPageRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreCalendarDeleteSubscription200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreNotesCreateNotes
     * @param coreNotesCreateNotesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreNotesCreateNotesCall(CoreNotesCreateNotesRequest coreNotesCreateNotesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreNotesCreateNotesRequest;

        // create path and map variables
        String localVarPath = "/core_notes_create_notes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreNotesCreateNotesValidateBeforeCall(CoreNotesCreateNotesRequest coreNotesCreateNotesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreNotesCreateNotesRequest' is set
        if (coreNotesCreateNotesRequest == null) {
            throw new ApiException("Missing the required parameter 'coreNotesCreateNotesRequest' when calling coreNotesCreateNotes(Async)");
        }

        return coreNotesCreateNotesCall(coreNotesCreateNotesRequest, _callback);

    }

    /**
     * Create notes
     * Create notes
     * @param coreNotesCreateNotesRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreNotesCreateNotes(CoreNotesCreateNotesRequest coreNotesCreateNotesRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreNotesCreateNotesWithHttpInfo(coreNotesCreateNotesRequest);
        return localVarResp.getData();
    }

    /**
     * Create notes
     * Create notes
     * @param coreNotesCreateNotesRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreNotesCreateNotesWithHttpInfo(CoreNotesCreateNotesRequest coreNotesCreateNotesRequest) throws ApiException {
        okhttp3.Call localVarCall = coreNotesCreateNotesValidateBeforeCall(coreNotesCreateNotesRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create notes (asynchronously)
     * Create notes
     * @param coreNotesCreateNotesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreNotesCreateNotesAsync(CoreNotesCreateNotesRequest coreNotesCreateNotesRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreNotesCreateNotesValidateBeforeCall(coreNotesCreateNotesRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreNotesDeleteNotes
     * @param coreNotesDeleteNotesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of warnings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreNotesDeleteNotesCall(CoreNotesDeleteNotesRequest coreNotesDeleteNotesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreNotesDeleteNotesRequest;

        // create path and map variables
        String localVarPath = "/core_notes_delete_notes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreNotesDeleteNotesValidateBeforeCall(CoreNotesDeleteNotesRequest coreNotesDeleteNotesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreNotesDeleteNotesRequest' is set
        if (coreNotesDeleteNotesRequest == null) {
            throw new ApiException("Missing the required parameter 'coreNotesDeleteNotesRequest' when calling coreNotesDeleteNotes(Async)");
        }

        return coreNotesDeleteNotesCall(coreNotesDeleteNotesRequest, _callback);

    }

    /**
     * Delete notes
     * Delete notes
     * @param coreNotesDeleteNotesRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of warnings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreNotesDeleteNotes(CoreNotesDeleteNotesRequest coreNotesDeleteNotesRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreNotesDeleteNotesWithHttpInfo(coreNotesDeleteNotesRequest);
        return localVarResp.getData();
    }

    /**
     * Delete notes
     * Delete notes
     * @param coreNotesDeleteNotesRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of warnings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreNotesDeleteNotesWithHttpInfo(CoreNotesDeleteNotesRequest coreNotesDeleteNotesRequest) throws ApiException {
        okhttp3.Call localVarCall = coreNotesDeleteNotesValidateBeforeCall(coreNotesDeleteNotesRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete notes (asynchronously)
     * Delete notes
     * @param coreNotesDeleteNotesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of warnings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreNotesDeleteNotesAsync(CoreNotesDeleteNotesRequest coreNotesDeleteNotesRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreNotesDeleteNotesValidateBeforeCall(coreNotesDeleteNotesRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreNotesGetCourseNotes
     * @param coreNotesGetCourseNotesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> notes </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreNotesGetCourseNotesCall(CoreNotesGetCourseNotesRequest coreNotesGetCourseNotesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreNotesGetCourseNotesRequest;

        // create path and map variables
        String localVarPath = "/core_notes_get_course_notes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreNotesGetCourseNotesValidateBeforeCall(CoreNotesGetCourseNotesRequest coreNotesGetCourseNotesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreNotesGetCourseNotesRequest' is set
        if (coreNotesGetCourseNotesRequest == null) {
            throw new ApiException("Missing the required parameter 'coreNotesGetCourseNotesRequest' when calling coreNotesGetCourseNotes(Async)");
        }

        return coreNotesGetCourseNotesCall(coreNotesGetCourseNotesRequest, _callback);

    }

    /**
     * Returns all notes in specified course (or site), for the specified user.
     * Returns all notes in specified course (or site), for the specified user.
     * @param coreNotesGetCourseNotesRequest  (required)
     * @return CoreNotesGetCourseNotes200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> notes </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreNotesGetCourseNotes200Response coreNotesGetCourseNotes(CoreNotesGetCourseNotesRequest coreNotesGetCourseNotesRequest) throws ApiException {
        ApiResponse<CoreNotesGetCourseNotes200Response> localVarResp = coreNotesGetCourseNotesWithHttpInfo(coreNotesGetCourseNotesRequest);
        return localVarResp.getData();
    }

    /**
     * Returns all notes in specified course (or site), for the specified user.
     * Returns all notes in specified course (or site), for the specified user.
     * @param coreNotesGetCourseNotesRequest  (required)
     * @return ApiResponse&lt;CoreNotesGetCourseNotes200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> notes </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreNotesGetCourseNotes200Response> coreNotesGetCourseNotesWithHttpInfo(CoreNotesGetCourseNotesRequest coreNotesGetCourseNotesRequest) throws ApiException {
        okhttp3.Call localVarCall = coreNotesGetCourseNotesValidateBeforeCall(coreNotesGetCourseNotesRequest, null);
        Type localVarReturnType = new TypeToken<CoreNotesGetCourseNotes200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns all notes in specified course (or site), for the specified user. (asynchronously)
     * Returns all notes in specified course (or site), for the specified user.
     * @param coreNotesGetCourseNotesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> notes </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreNotesGetCourseNotesAsync(CoreNotesGetCourseNotesRequest coreNotesGetCourseNotesRequest, final ApiCallback<CoreNotesGetCourseNotes200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreNotesGetCourseNotesValidateBeforeCall(coreNotesGetCourseNotesRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreNotesGetCourseNotes200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreNotesGetNotes
     * @param coreNotesGetNotesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreNotesGetNotesCall(CoreNotesGetNotesRequest coreNotesGetNotesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreNotesGetNotesRequest;

        // create path and map variables
        String localVarPath = "/core_notes_get_notes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreNotesGetNotesValidateBeforeCall(CoreNotesGetNotesRequest coreNotesGetNotesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreNotesGetNotesRequest' is set
        if (coreNotesGetNotesRequest == null) {
            throw new ApiException("Missing the required parameter 'coreNotesGetNotesRequest' when calling coreNotesGetNotes(Async)");
        }

        return coreNotesGetNotesCall(coreNotesGetNotesRequest, _callback);

    }

    /**
     * Get notes
     * Get notes
     * @param coreNotesGetNotesRequest  (required)
     * @return CoreNotesGetNotes200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreNotesGetNotes200Response coreNotesGetNotes(CoreNotesGetNotesRequest coreNotesGetNotesRequest) throws ApiException {
        ApiResponse<CoreNotesGetNotes200Response> localVarResp = coreNotesGetNotesWithHttpInfo(coreNotesGetNotesRequest);
        return localVarResp.getData();
    }

    /**
     * Get notes
     * Get notes
     * @param coreNotesGetNotesRequest  (required)
     * @return ApiResponse&lt;CoreNotesGetNotes200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreNotesGetNotes200Response> coreNotesGetNotesWithHttpInfo(CoreNotesGetNotesRequest coreNotesGetNotesRequest) throws ApiException {
        okhttp3.Call localVarCall = coreNotesGetNotesValidateBeforeCall(coreNotesGetNotesRequest, null);
        Type localVarReturnType = new TypeToken<CoreNotesGetNotes200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get notes (asynchronously)
     * Get notes
     * @param coreNotesGetNotesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreNotesGetNotesAsync(CoreNotesGetNotesRequest coreNotesGetNotesRequest, final ApiCallback<CoreNotesGetNotes200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreNotesGetNotesValidateBeforeCall(coreNotesGetNotesRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreNotesGetNotes200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreNotesUpdateNotes
     * @param coreNotesUpdateNotesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of warnings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreNotesUpdateNotesCall(CoreNotesUpdateNotesRequest coreNotesUpdateNotesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreNotesUpdateNotesRequest;

        // create path and map variables
        String localVarPath = "/core_notes_update_notes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreNotesUpdateNotesValidateBeforeCall(CoreNotesUpdateNotesRequest coreNotesUpdateNotesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreNotesUpdateNotesRequest' is set
        if (coreNotesUpdateNotesRequest == null) {
            throw new ApiException("Missing the required parameter 'coreNotesUpdateNotesRequest' when calling coreNotesUpdateNotes(Async)");
        }

        return coreNotesUpdateNotesCall(coreNotesUpdateNotesRequest, _callback);

    }

    /**
     * Update notes
     * Update notes
     * @param coreNotesUpdateNotesRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of warnings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreNotesUpdateNotes(CoreNotesUpdateNotesRequest coreNotesUpdateNotesRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreNotesUpdateNotesWithHttpInfo(coreNotesUpdateNotesRequest);
        return localVarResp.getData();
    }

    /**
     * Update notes
     * Update notes
     * @param coreNotesUpdateNotesRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of warnings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreNotesUpdateNotesWithHttpInfo(CoreNotesUpdateNotesRequest coreNotesUpdateNotesRequest) throws ApiException {
        okhttp3.Call localVarCall = coreNotesUpdateNotesValidateBeforeCall(coreNotesUpdateNotesRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update notes (asynchronously)
     * Update notes
     * @param coreNotesUpdateNotesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of warnings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreNotesUpdateNotesAsync(CoreNotesUpdateNotesRequest coreNotesUpdateNotesRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreNotesUpdateNotesValidateBeforeCall(coreNotesUpdateNotesRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreNotesViewNotes
     * @param coreNotesViewNotesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreNotesViewNotesCall(CoreNotesViewNotesRequest coreNotesViewNotesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreNotesViewNotesRequest;

        // create path and map variables
        String localVarPath = "/core_notes_view_notes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreNotesViewNotesValidateBeforeCall(CoreNotesViewNotesRequest coreNotesViewNotesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreNotesViewNotesRequest' is set
        if (coreNotesViewNotesRequest == null) {
            throw new ApiException("Missing the required parameter 'coreNotesViewNotesRequest' when calling coreNotesViewNotes(Async)");
        }

        return coreNotesViewNotesCall(coreNotesViewNotesRequest, _callback);

    }

    /**
     * Simulates the web interface view of notes/index.php: trigger events.
     * Simulates the web interface view of notes/index.php: trigger events.
     * @param coreNotesViewNotesRequest  (required)
     * @return CoreCalendarDeleteSubscription200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreCalendarDeleteSubscription200Response coreNotesViewNotes(CoreNotesViewNotesRequest coreNotesViewNotesRequest) throws ApiException {
        ApiResponse<CoreCalendarDeleteSubscription200Response> localVarResp = coreNotesViewNotesWithHttpInfo(coreNotesViewNotesRequest);
        return localVarResp.getData();
    }

    /**
     * Simulates the web interface view of notes/index.php: trigger events.
     * Simulates the web interface view of notes/index.php: trigger events.
     * @param coreNotesViewNotesRequest  (required)
     * @return ApiResponse&lt;CoreCalendarDeleteSubscription200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreCalendarDeleteSubscription200Response> coreNotesViewNotesWithHttpInfo(CoreNotesViewNotesRequest coreNotesViewNotesRequest) throws ApiException {
        okhttp3.Call localVarCall = coreNotesViewNotesValidateBeforeCall(coreNotesViewNotesRequest, null);
        Type localVarReturnType = new TypeToken<CoreCalendarDeleteSubscription200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Simulates the web interface view of notes/index.php: trigger events. (asynchronously)
     * Simulates the web interface view of notes/index.php: trigger events.
     * @param coreNotesViewNotesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreNotesViewNotesAsync(CoreNotesViewNotesRequest coreNotesViewNotesRequest, final ApiCallback<CoreCalendarDeleteSubscription200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreNotesViewNotesValidateBeforeCall(coreNotesViewNotesRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreCalendarDeleteSubscription200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreOutputLoadFontawesomeIconMap
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreOutputLoadFontawesomeIconMapCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/core_output_load_fontawesome_icon_map";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreOutputLoadFontawesomeIconMapValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return coreOutputLoadFontawesomeIconMapCall(_callback);

    }

    /**
     * Load the mapping of names to icons
     * Load the mapping of names to icons
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreOutputLoadFontawesomeIconMap() throws ApiException {
        ApiResponse<Object> localVarResp = coreOutputLoadFontawesomeIconMapWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Load the mapping of names to icons
     * Load the mapping of names to icons
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreOutputLoadFontawesomeIconMapWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = coreOutputLoadFontawesomeIconMapValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Load the mapping of names to icons (asynchronously)
     * Load the mapping of names to icons
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreOutputLoadFontawesomeIconMapAsync(final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreOutputLoadFontawesomeIconMapValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreOutputLoadFontawesomeIconSystemMap
     * @param coreOutputLoadFontawesomeIconSystemMapRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreOutputLoadFontawesomeIconSystemMapCall(CoreOutputLoadFontawesomeIconSystemMapRequest coreOutputLoadFontawesomeIconSystemMapRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreOutputLoadFontawesomeIconSystemMapRequest;

        // create path and map variables
        String localVarPath = "/core_output_load_fontawesome_icon_system_map";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreOutputLoadFontawesomeIconSystemMapValidateBeforeCall(CoreOutputLoadFontawesomeIconSystemMapRequest coreOutputLoadFontawesomeIconSystemMapRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreOutputLoadFontawesomeIconSystemMapRequest' is set
        if (coreOutputLoadFontawesomeIconSystemMapRequest == null) {
            throw new ApiException("Missing the required parameter 'coreOutputLoadFontawesomeIconSystemMapRequest' when calling coreOutputLoadFontawesomeIconSystemMap(Async)");
        }

        return coreOutputLoadFontawesomeIconSystemMapCall(coreOutputLoadFontawesomeIconSystemMapRequest, _callback);

    }

    /**
     * Load the mapping of moodle pix names to fontawesome icon names
     * Load the mapping of moodle pix names to fontawesome icon names
     * @param coreOutputLoadFontawesomeIconSystemMapRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreOutputLoadFontawesomeIconSystemMap(CoreOutputLoadFontawesomeIconSystemMapRequest coreOutputLoadFontawesomeIconSystemMapRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreOutputLoadFontawesomeIconSystemMapWithHttpInfo(coreOutputLoadFontawesomeIconSystemMapRequest);
        return localVarResp.getData();
    }

    /**
     * Load the mapping of moodle pix names to fontawesome icon names
     * Load the mapping of moodle pix names to fontawesome icon names
     * @param coreOutputLoadFontawesomeIconSystemMapRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreOutputLoadFontawesomeIconSystemMapWithHttpInfo(CoreOutputLoadFontawesomeIconSystemMapRequest coreOutputLoadFontawesomeIconSystemMapRequest) throws ApiException {
        okhttp3.Call localVarCall = coreOutputLoadFontawesomeIconSystemMapValidateBeforeCall(coreOutputLoadFontawesomeIconSystemMapRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Load the mapping of moodle pix names to fontawesome icon names (asynchronously)
     * Load the mapping of moodle pix names to fontawesome icon names
     * @param coreOutputLoadFontawesomeIconSystemMapRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreOutputLoadFontawesomeIconSystemMapAsync(CoreOutputLoadFontawesomeIconSystemMapRequest coreOutputLoadFontawesomeIconSystemMapRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreOutputLoadFontawesomeIconSystemMapValidateBeforeCall(coreOutputLoadFontawesomeIconSystemMapRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreOutputLoadTemplate
     * @param coreOutputLoadTemplateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> template </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreOutputLoadTemplateCall(CoreOutputLoadTemplateRequest coreOutputLoadTemplateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreOutputLoadTemplateRequest;

        // create path and map variables
        String localVarPath = "/core_output_load_template";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreOutputLoadTemplateValidateBeforeCall(CoreOutputLoadTemplateRequest coreOutputLoadTemplateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreOutputLoadTemplateRequest' is set
        if (coreOutputLoadTemplateRequest == null) {
            throw new ApiException("Missing the required parameter 'coreOutputLoadTemplateRequest' when calling coreOutputLoadTemplate(Async)");
        }

        return coreOutputLoadTemplateCall(coreOutputLoadTemplateRequest, _callback);

    }

    /**
     * Load a template for a renderable
     * Load a template for a renderable
     * @param coreOutputLoadTemplateRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> template </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreOutputLoadTemplate(CoreOutputLoadTemplateRequest coreOutputLoadTemplateRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreOutputLoadTemplateWithHttpInfo(coreOutputLoadTemplateRequest);
        return localVarResp.getData();
    }

    /**
     * Load a template for a renderable
     * Load a template for a renderable
     * @param coreOutputLoadTemplateRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> template </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreOutputLoadTemplateWithHttpInfo(CoreOutputLoadTemplateRequest coreOutputLoadTemplateRequest) throws ApiException {
        okhttp3.Call localVarCall = coreOutputLoadTemplateValidateBeforeCall(coreOutputLoadTemplateRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Load a template for a renderable (asynchronously)
     * Load a template for a renderable
     * @param coreOutputLoadTemplateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> template </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreOutputLoadTemplateAsync(CoreOutputLoadTemplateRequest coreOutputLoadTemplateRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreOutputLoadTemplateValidateBeforeCall(coreOutputLoadTemplateRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreOutputLoadTemplateWithDependencies
     * @param coreOutputLoadTemplateWithDependenciesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreOutputLoadTemplateWithDependenciesCall(CoreOutputLoadTemplateWithDependenciesRequest coreOutputLoadTemplateWithDependenciesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreOutputLoadTemplateWithDependenciesRequest;

        // create path and map variables
        String localVarPath = "/core_output_load_template_with_dependencies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreOutputLoadTemplateWithDependenciesValidateBeforeCall(CoreOutputLoadTemplateWithDependenciesRequest coreOutputLoadTemplateWithDependenciesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreOutputLoadTemplateWithDependenciesRequest' is set
        if (coreOutputLoadTemplateWithDependenciesRequest == null) {
            throw new ApiException("Missing the required parameter 'coreOutputLoadTemplateWithDependenciesRequest' when calling coreOutputLoadTemplateWithDependencies(Async)");
        }

        return coreOutputLoadTemplateWithDependenciesCall(coreOutputLoadTemplateWithDependenciesRequest, _callback);

    }

    /**
     * Load a template and its dependencies for a renderable
     * Load a template and its dependencies for a renderable
     * @param coreOutputLoadTemplateWithDependenciesRequest  (required)
     * @return CoreOutputLoadTemplateWithDependencies200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreOutputLoadTemplateWithDependencies200Response coreOutputLoadTemplateWithDependencies(CoreOutputLoadTemplateWithDependenciesRequest coreOutputLoadTemplateWithDependenciesRequest) throws ApiException {
        ApiResponse<CoreOutputLoadTemplateWithDependencies200Response> localVarResp = coreOutputLoadTemplateWithDependenciesWithHttpInfo(coreOutputLoadTemplateWithDependenciesRequest);
        return localVarResp.getData();
    }

    /**
     * Load a template and its dependencies for a renderable
     * Load a template and its dependencies for a renderable
     * @param coreOutputLoadTemplateWithDependenciesRequest  (required)
     * @return ApiResponse&lt;CoreOutputLoadTemplateWithDependencies200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreOutputLoadTemplateWithDependencies200Response> coreOutputLoadTemplateWithDependenciesWithHttpInfo(CoreOutputLoadTemplateWithDependenciesRequest coreOutputLoadTemplateWithDependenciesRequest) throws ApiException {
        okhttp3.Call localVarCall = coreOutputLoadTemplateWithDependenciesValidateBeforeCall(coreOutputLoadTemplateWithDependenciesRequest, null);
        Type localVarReturnType = new TypeToken<CoreOutputLoadTemplateWithDependencies200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Load a template and its dependencies for a renderable (asynchronously)
     * Load a template and its dependencies for a renderable
     * @param coreOutputLoadTemplateWithDependenciesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreOutputLoadTemplateWithDependenciesAsync(CoreOutputLoadTemplateWithDependenciesRequest coreOutputLoadTemplateWithDependenciesRequest, final ApiCallback<CoreOutputLoadTemplateWithDependencies200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreOutputLoadTemplateWithDependenciesValidateBeforeCall(coreOutputLoadTemplateWithDependenciesRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreOutputLoadTemplateWithDependencies200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for corePaymentGetAvailableGateways
     * @param corePaymentGetAvailableGatewaysRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call corePaymentGetAvailableGatewaysCall(CorePaymentGetAvailableGatewaysRequest corePaymentGetAvailableGatewaysRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = corePaymentGetAvailableGatewaysRequest;

        // create path and map variables
        String localVarPath = "/core_payment_get_available_gateways";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call corePaymentGetAvailableGatewaysValidateBeforeCall(CorePaymentGetAvailableGatewaysRequest corePaymentGetAvailableGatewaysRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'corePaymentGetAvailableGatewaysRequest' is set
        if (corePaymentGetAvailableGatewaysRequest == null) {
            throw new ApiException("Missing the required parameter 'corePaymentGetAvailableGatewaysRequest' when calling corePaymentGetAvailableGateways(Async)");
        }

        return corePaymentGetAvailableGatewaysCall(corePaymentGetAvailableGatewaysRequest, _callback);

    }

    /**
     * Get the list of payment gateways that support the given component/area
     * Get the list of payment gateways that support the given component/area
     * @param corePaymentGetAvailableGatewaysRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object corePaymentGetAvailableGateways(CorePaymentGetAvailableGatewaysRequest corePaymentGetAvailableGatewaysRequest) throws ApiException {
        ApiResponse<Object> localVarResp = corePaymentGetAvailableGatewaysWithHttpInfo(corePaymentGetAvailableGatewaysRequest);
        return localVarResp.getData();
    }

    /**
     * Get the list of payment gateways that support the given component/area
     * Get the list of payment gateways that support the given component/area
     * @param corePaymentGetAvailableGatewaysRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> corePaymentGetAvailableGatewaysWithHttpInfo(CorePaymentGetAvailableGatewaysRequest corePaymentGetAvailableGatewaysRequest) throws ApiException {
        okhttp3.Call localVarCall = corePaymentGetAvailableGatewaysValidateBeforeCall(corePaymentGetAvailableGatewaysRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the list of payment gateways that support the given component/area (asynchronously)
     * Get the list of payment gateways that support the given component/area
     * @param corePaymentGetAvailableGatewaysRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call corePaymentGetAvailableGatewaysAsync(CorePaymentGetAvailableGatewaysRequest corePaymentGetAvailableGatewaysRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = corePaymentGetAvailableGatewaysValidateBeforeCall(corePaymentGetAvailableGatewaysRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreQuestionGetRandomQuestionSummaries
     * @param coreQuestionGetRandomQuestionSummariesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreQuestionGetRandomQuestionSummariesCall(CoreQuestionGetRandomQuestionSummariesRequest coreQuestionGetRandomQuestionSummariesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreQuestionGetRandomQuestionSummariesRequest;

        // create path and map variables
        String localVarPath = "/core_question_get_random_question_summaries";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreQuestionGetRandomQuestionSummariesValidateBeforeCall(CoreQuestionGetRandomQuestionSummariesRequest coreQuestionGetRandomQuestionSummariesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreQuestionGetRandomQuestionSummariesRequest' is set
        if (coreQuestionGetRandomQuestionSummariesRequest == null) {
            throw new ApiException("Missing the required parameter 'coreQuestionGetRandomQuestionSummariesRequest' when calling coreQuestionGetRandomQuestionSummaries(Async)");
        }

        return coreQuestionGetRandomQuestionSummariesCall(coreQuestionGetRandomQuestionSummariesRequest, _callback);

    }

    /**
     * Get the random question set for a criteria
     * Get the random question set for a criteria
     * @param coreQuestionGetRandomQuestionSummariesRequest  (required)
     * @return CoreQuestionGetRandomQuestionSummaries200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreQuestionGetRandomQuestionSummaries200Response coreQuestionGetRandomQuestionSummaries(CoreQuestionGetRandomQuestionSummariesRequest coreQuestionGetRandomQuestionSummariesRequest) throws ApiException {
        ApiResponse<CoreQuestionGetRandomQuestionSummaries200Response> localVarResp = coreQuestionGetRandomQuestionSummariesWithHttpInfo(coreQuestionGetRandomQuestionSummariesRequest);
        return localVarResp.getData();
    }

    /**
     * Get the random question set for a criteria
     * Get the random question set for a criteria
     * @param coreQuestionGetRandomQuestionSummariesRequest  (required)
     * @return ApiResponse&lt;CoreQuestionGetRandomQuestionSummaries200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreQuestionGetRandomQuestionSummaries200Response> coreQuestionGetRandomQuestionSummariesWithHttpInfo(CoreQuestionGetRandomQuestionSummariesRequest coreQuestionGetRandomQuestionSummariesRequest) throws ApiException {
        okhttp3.Call localVarCall = coreQuestionGetRandomQuestionSummariesValidateBeforeCall(coreQuestionGetRandomQuestionSummariesRequest, null);
        Type localVarReturnType = new TypeToken<CoreQuestionGetRandomQuestionSummaries200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the random question set for a criteria (asynchronously)
     * Get the random question set for a criteria
     * @param coreQuestionGetRandomQuestionSummariesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreQuestionGetRandomQuestionSummariesAsync(CoreQuestionGetRandomQuestionSummariesRequest coreQuestionGetRandomQuestionSummariesRequest, final ApiCallback<CoreQuestionGetRandomQuestionSummaries200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreQuestionGetRandomQuestionSummariesValidateBeforeCall(coreQuestionGetRandomQuestionSummariesRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreQuestionGetRandomQuestionSummaries200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreQuestionSubmitTagsForm
     * @param coreQuestionSubmitTagsFormRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreQuestionSubmitTagsFormCall(CoreQuestionSubmitTagsFormRequest coreQuestionSubmitTagsFormRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreQuestionSubmitTagsFormRequest;

        // create path and map variables
        String localVarPath = "/core_question_submit_tags_form";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreQuestionSubmitTagsFormValidateBeforeCall(CoreQuestionSubmitTagsFormRequest coreQuestionSubmitTagsFormRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreQuestionSubmitTagsFormRequest' is set
        if (coreQuestionSubmitTagsFormRequest == null) {
            throw new ApiException("Missing the required parameter 'coreQuestionSubmitTagsFormRequest' when calling coreQuestionSubmitTagsForm(Async)");
        }

        return coreQuestionSubmitTagsFormCall(coreQuestionSubmitTagsFormRequest, _callback);

    }

    /**
     * Update the question tags.
     * Update the question tags.
     * @param coreQuestionSubmitTagsFormRequest  (required)
     * @return CoreQuestionSubmitTagsForm200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreQuestionSubmitTagsForm200Response coreQuestionSubmitTagsForm(CoreQuestionSubmitTagsFormRequest coreQuestionSubmitTagsFormRequest) throws ApiException {
        ApiResponse<CoreQuestionSubmitTagsForm200Response> localVarResp = coreQuestionSubmitTagsFormWithHttpInfo(coreQuestionSubmitTagsFormRequest);
        return localVarResp.getData();
    }

    /**
     * Update the question tags.
     * Update the question tags.
     * @param coreQuestionSubmitTagsFormRequest  (required)
     * @return ApiResponse&lt;CoreQuestionSubmitTagsForm200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreQuestionSubmitTagsForm200Response> coreQuestionSubmitTagsFormWithHttpInfo(CoreQuestionSubmitTagsFormRequest coreQuestionSubmitTagsFormRequest) throws ApiException {
        okhttp3.Call localVarCall = coreQuestionSubmitTagsFormValidateBeforeCall(coreQuestionSubmitTagsFormRequest, null);
        Type localVarReturnType = new TypeToken<CoreQuestionSubmitTagsForm200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the question tags. (asynchronously)
     * Update the question tags.
     * @param coreQuestionSubmitTagsFormRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreQuestionSubmitTagsFormAsync(CoreQuestionSubmitTagsFormRequest coreQuestionSubmitTagsFormRequest, final ApiCallback<CoreQuestionSubmitTagsForm200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreQuestionSubmitTagsFormValidateBeforeCall(coreQuestionSubmitTagsFormRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreQuestionSubmitTagsForm200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreQuestionUpdateFlag
     * @param coreQuestionUpdateFlagRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreQuestionUpdateFlagCall(CoreQuestionUpdateFlagRequest coreQuestionUpdateFlagRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreQuestionUpdateFlagRequest;

        // create path and map variables
        String localVarPath = "/core_question_update_flag";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreQuestionUpdateFlagValidateBeforeCall(CoreQuestionUpdateFlagRequest coreQuestionUpdateFlagRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreQuestionUpdateFlagRequest' is set
        if (coreQuestionUpdateFlagRequest == null) {
            throw new ApiException("Missing the required parameter 'coreQuestionUpdateFlagRequest' when calling coreQuestionUpdateFlag(Async)");
        }

        return coreQuestionUpdateFlagCall(coreQuestionUpdateFlagRequest, _callback);

    }

    /**
     * Update the flag state of a question attempt.
     * Update the flag state of a question attempt.
     * @param coreQuestionUpdateFlagRequest  (required)
     * @return CoreCalendarDeleteSubscription200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreCalendarDeleteSubscription200Response coreQuestionUpdateFlag(CoreQuestionUpdateFlagRequest coreQuestionUpdateFlagRequest) throws ApiException {
        ApiResponse<CoreCalendarDeleteSubscription200Response> localVarResp = coreQuestionUpdateFlagWithHttpInfo(coreQuestionUpdateFlagRequest);
        return localVarResp.getData();
    }

    /**
     * Update the flag state of a question attempt.
     * Update the flag state of a question attempt.
     * @param coreQuestionUpdateFlagRequest  (required)
     * @return ApiResponse&lt;CoreCalendarDeleteSubscription200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreCalendarDeleteSubscription200Response> coreQuestionUpdateFlagWithHttpInfo(CoreQuestionUpdateFlagRequest coreQuestionUpdateFlagRequest) throws ApiException {
        okhttp3.Call localVarCall = coreQuestionUpdateFlagValidateBeforeCall(coreQuestionUpdateFlagRequest, null);
        Type localVarReturnType = new TypeToken<CoreCalendarDeleteSubscription200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the flag state of a question attempt. (asynchronously)
     * Update the flag state of a question attempt.
     * @param coreQuestionUpdateFlagRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreQuestionUpdateFlagAsync(CoreQuestionUpdateFlagRequest coreQuestionUpdateFlagRequest, final ApiCallback<CoreCalendarDeleteSubscription200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreQuestionUpdateFlagValidateBeforeCall(coreQuestionUpdateFlagRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreCalendarDeleteSubscription200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreRatingAddRating
     * @param coreRatingAddRatingRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreRatingAddRatingCall(CoreRatingAddRatingRequest coreRatingAddRatingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreRatingAddRatingRequest;

        // create path and map variables
        String localVarPath = "/core_rating_add_rating";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreRatingAddRatingValidateBeforeCall(CoreRatingAddRatingRequest coreRatingAddRatingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreRatingAddRatingRequest' is set
        if (coreRatingAddRatingRequest == null) {
            throw new ApiException("Missing the required parameter 'coreRatingAddRatingRequest' when calling coreRatingAddRating(Async)");
        }

        return coreRatingAddRatingCall(coreRatingAddRatingRequest, _callback);

    }

    /**
     * Rates an item.
     * Rates an item.
     * @param coreRatingAddRatingRequest  (required)
     * @return CoreRatingAddRating200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreRatingAddRating200Response coreRatingAddRating(CoreRatingAddRatingRequest coreRatingAddRatingRequest) throws ApiException {
        ApiResponse<CoreRatingAddRating200Response> localVarResp = coreRatingAddRatingWithHttpInfo(coreRatingAddRatingRequest);
        return localVarResp.getData();
    }

    /**
     * Rates an item.
     * Rates an item.
     * @param coreRatingAddRatingRequest  (required)
     * @return ApiResponse&lt;CoreRatingAddRating200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreRatingAddRating200Response> coreRatingAddRatingWithHttpInfo(CoreRatingAddRatingRequest coreRatingAddRatingRequest) throws ApiException {
        okhttp3.Call localVarCall = coreRatingAddRatingValidateBeforeCall(coreRatingAddRatingRequest, null);
        Type localVarReturnType = new TypeToken<CoreRatingAddRating200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Rates an item. (asynchronously)
     * Rates an item.
     * @param coreRatingAddRatingRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreRatingAddRatingAsync(CoreRatingAddRatingRequest coreRatingAddRatingRequest, final ApiCallback<CoreRatingAddRating200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreRatingAddRatingValidateBeforeCall(coreRatingAddRatingRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreRatingAddRating200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreRatingGetItemRatings
     * @param coreRatingGetItemRatingsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreRatingGetItemRatingsCall(CoreRatingGetItemRatingsRequest coreRatingGetItemRatingsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreRatingGetItemRatingsRequest;

        // create path and map variables
        String localVarPath = "/core_rating_get_item_ratings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreRatingGetItemRatingsValidateBeforeCall(CoreRatingGetItemRatingsRequest coreRatingGetItemRatingsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreRatingGetItemRatingsRequest' is set
        if (coreRatingGetItemRatingsRequest == null) {
            throw new ApiException("Missing the required parameter 'coreRatingGetItemRatingsRequest' when calling coreRatingGetItemRatings(Async)");
        }

        return coreRatingGetItemRatingsCall(coreRatingGetItemRatingsRequest, _callback);

    }

    /**
     * Retrieve all the ratings for an item.
     * Retrieve all the ratings for an item.
     * @param coreRatingGetItemRatingsRequest  (required)
     * @return CoreRatingGetItemRatings200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreRatingGetItemRatings200Response coreRatingGetItemRatings(CoreRatingGetItemRatingsRequest coreRatingGetItemRatingsRequest) throws ApiException {
        ApiResponse<CoreRatingGetItemRatings200Response> localVarResp = coreRatingGetItemRatingsWithHttpInfo(coreRatingGetItemRatingsRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieve all the ratings for an item.
     * Retrieve all the ratings for an item.
     * @param coreRatingGetItemRatingsRequest  (required)
     * @return ApiResponse&lt;CoreRatingGetItemRatings200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreRatingGetItemRatings200Response> coreRatingGetItemRatingsWithHttpInfo(CoreRatingGetItemRatingsRequest coreRatingGetItemRatingsRequest) throws ApiException {
        okhttp3.Call localVarCall = coreRatingGetItemRatingsValidateBeforeCall(coreRatingGetItemRatingsRequest, null);
        Type localVarReturnType = new TypeToken<CoreRatingGetItemRatings200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve all the ratings for an item. (asynchronously)
     * Retrieve all the ratings for an item.
     * @param coreRatingGetItemRatingsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreRatingGetItemRatingsAsync(CoreRatingGetItemRatingsRequest coreRatingGetItemRatingsRequest, final ApiCallback<CoreRatingGetItemRatings200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreRatingGetItemRatingsValidateBeforeCall(coreRatingGetItemRatingsRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreRatingGetItemRatings200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreReportbuilderAudiencesDelete
     * @param coreReportbuilderAudiencesDeleteRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreReportbuilderAudiencesDeleteCall(CoreReportbuilderAudiencesDeleteRequest coreReportbuilderAudiencesDeleteRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreReportbuilderAudiencesDeleteRequest;

        // create path and map variables
        String localVarPath = "/core_reportbuilder_audiences_delete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreReportbuilderAudiencesDeleteValidateBeforeCall(CoreReportbuilderAudiencesDeleteRequest coreReportbuilderAudiencesDeleteRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreReportbuilderAudiencesDeleteRequest' is set
        if (coreReportbuilderAudiencesDeleteRequest == null) {
            throw new ApiException("Missing the required parameter 'coreReportbuilderAudiencesDeleteRequest' when calling coreReportbuilderAudiencesDelete(Async)");
        }

        return coreReportbuilderAudiencesDeleteCall(coreReportbuilderAudiencesDeleteRequest, _callback);

    }

    /**
     * Delete audience from report
     * Delete audience from report
     * @param coreReportbuilderAudiencesDeleteRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreReportbuilderAudiencesDelete(CoreReportbuilderAudiencesDeleteRequest coreReportbuilderAudiencesDeleteRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreReportbuilderAudiencesDeleteWithHttpInfo(coreReportbuilderAudiencesDeleteRequest);
        return localVarResp.getData();
    }

    /**
     * Delete audience from report
     * Delete audience from report
     * @param coreReportbuilderAudiencesDeleteRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreReportbuilderAudiencesDeleteWithHttpInfo(CoreReportbuilderAudiencesDeleteRequest coreReportbuilderAudiencesDeleteRequest) throws ApiException {
        okhttp3.Call localVarCall = coreReportbuilderAudiencesDeleteValidateBeforeCall(coreReportbuilderAudiencesDeleteRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete audience from report (asynchronously)
     * Delete audience from report
     * @param coreReportbuilderAudiencesDeleteRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreReportbuilderAudiencesDeleteAsync(CoreReportbuilderAudiencesDeleteRequest coreReportbuilderAudiencesDeleteRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreReportbuilderAudiencesDeleteValidateBeforeCall(coreReportbuilderAudiencesDeleteRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreReportbuilderCanViewSystemReport
     * @param coreReportbuilderCanViewSystemReportRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreReportbuilderCanViewSystemReportCall(CoreReportbuilderCanViewSystemReportRequest coreReportbuilderCanViewSystemReportRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreReportbuilderCanViewSystemReportRequest;

        // create path and map variables
        String localVarPath = "/core_reportbuilder_can_view_system_report";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreReportbuilderCanViewSystemReportValidateBeforeCall(CoreReportbuilderCanViewSystemReportRequest coreReportbuilderCanViewSystemReportRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreReportbuilderCanViewSystemReportRequest' is set
        if (coreReportbuilderCanViewSystemReportRequest == null) {
            throw new ApiException("Missing the required parameter 'coreReportbuilderCanViewSystemReportRequest' when calling coreReportbuilderCanViewSystemReport(Async)");
        }

        return coreReportbuilderCanViewSystemReportCall(coreReportbuilderCanViewSystemReportRequest, _callback);

    }

    /**
     * Determine access to a system report
     * Determine access to a system report
     * @param coreReportbuilderCanViewSystemReportRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreReportbuilderCanViewSystemReport(CoreReportbuilderCanViewSystemReportRequest coreReportbuilderCanViewSystemReportRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreReportbuilderCanViewSystemReportWithHttpInfo(coreReportbuilderCanViewSystemReportRequest);
        return localVarResp.getData();
    }

    /**
     * Determine access to a system report
     * Determine access to a system report
     * @param coreReportbuilderCanViewSystemReportRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreReportbuilderCanViewSystemReportWithHttpInfo(CoreReportbuilderCanViewSystemReportRequest coreReportbuilderCanViewSystemReportRequest) throws ApiException {
        okhttp3.Call localVarCall = coreReportbuilderCanViewSystemReportValidateBeforeCall(coreReportbuilderCanViewSystemReportRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Determine access to a system report (asynchronously)
     * Determine access to a system report
     * @param coreReportbuilderCanViewSystemReportRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreReportbuilderCanViewSystemReportAsync(CoreReportbuilderCanViewSystemReportRequest coreReportbuilderCanViewSystemReportRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreReportbuilderCanViewSystemReportValidateBeforeCall(coreReportbuilderCanViewSystemReportRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreReportbuilderColumnsAdd
     * @param coreReportbuilderColumnsAddRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreReportbuilderColumnsAddCall(CoreReportbuilderColumnsAddRequest coreReportbuilderColumnsAddRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreReportbuilderColumnsAddRequest;

        // create path and map variables
        String localVarPath = "/core_reportbuilder_columns_add";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreReportbuilderColumnsAddValidateBeforeCall(CoreReportbuilderColumnsAddRequest coreReportbuilderColumnsAddRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreReportbuilderColumnsAddRequest' is set
        if (coreReportbuilderColumnsAddRequest == null) {
            throw new ApiException("Missing the required parameter 'coreReportbuilderColumnsAddRequest' when calling coreReportbuilderColumnsAdd(Async)");
        }

        return coreReportbuilderColumnsAddCall(coreReportbuilderColumnsAddRequest, _callback);

    }

    /**
     * Add column to report
     * Add column to report
     * @param coreReportbuilderColumnsAddRequest  (required)
     * @return CoreReportbuilderColumnsAdd200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreReportbuilderColumnsAdd200Response coreReportbuilderColumnsAdd(CoreReportbuilderColumnsAddRequest coreReportbuilderColumnsAddRequest) throws ApiException {
        ApiResponse<CoreReportbuilderColumnsAdd200Response> localVarResp = coreReportbuilderColumnsAddWithHttpInfo(coreReportbuilderColumnsAddRequest);
        return localVarResp.getData();
    }

    /**
     * Add column to report
     * Add column to report
     * @param coreReportbuilderColumnsAddRequest  (required)
     * @return ApiResponse&lt;CoreReportbuilderColumnsAdd200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreReportbuilderColumnsAdd200Response> coreReportbuilderColumnsAddWithHttpInfo(CoreReportbuilderColumnsAddRequest coreReportbuilderColumnsAddRequest) throws ApiException {
        okhttp3.Call localVarCall = coreReportbuilderColumnsAddValidateBeforeCall(coreReportbuilderColumnsAddRequest, null);
        Type localVarReturnType = new TypeToken<CoreReportbuilderColumnsAdd200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add column to report (asynchronously)
     * Add column to report
     * @param coreReportbuilderColumnsAddRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreReportbuilderColumnsAddAsync(CoreReportbuilderColumnsAddRequest coreReportbuilderColumnsAddRequest, final ApiCallback<CoreReportbuilderColumnsAdd200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreReportbuilderColumnsAddValidateBeforeCall(coreReportbuilderColumnsAddRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreReportbuilderColumnsAdd200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreReportbuilderColumnsDelete
     * @param coreReportbuilderColumnsDeleteRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreReportbuilderColumnsDeleteCall(CoreReportbuilderColumnsDeleteRequest coreReportbuilderColumnsDeleteRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreReportbuilderColumnsDeleteRequest;

        // create path and map variables
        String localVarPath = "/core_reportbuilder_columns_delete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreReportbuilderColumnsDeleteValidateBeforeCall(CoreReportbuilderColumnsDeleteRequest coreReportbuilderColumnsDeleteRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreReportbuilderColumnsDeleteRequest' is set
        if (coreReportbuilderColumnsDeleteRequest == null) {
            throw new ApiException("Missing the required parameter 'coreReportbuilderColumnsDeleteRequest' when calling coreReportbuilderColumnsDelete(Async)");
        }

        return coreReportbuilderColumnsDeleteCall(coreReportbuilderColumnsDeleteRequest, _callback);

    }

    /**
     * Delete column from report
     * Delete column from report
     * @param coreReportbuilderColumnsDeleteRequest  (required)
     * @return CoreReportbuilderColumnsDelete200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreReportbuilderColumnsDelete200Response coreReportbuilderColumnsDelete(CoreReportbuilderColumnsDeleteRequest coreReportbuilderColumnsDeleteRequest) throws ApiException {
        ApiResponse<CoreReportbuilderColumnsDelete200Response> localVarResp = coreReportbuilderColumnsDeleteWithHttpInfo(coreReportbuilderColumnsDeleteRequest);
        return localVarResp.getData();
    }

    /**
     * Delete column from report
     * Delete column from report
     * @param coreReportbuilderColumnsDeleteRequest  (required)
     * @return ApiResponse&lt;CoreReportbuilderColumnsDelete200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreReportbuilderColumnsDelete200Response> coreReportbuilderColumnsDeleteWithHttpInfo(CoreReportbuilderColumnsDeleteRequest coreReportbuilderColumnsDeleteRequest) throws ApiException {
        okhttp3.Call localVarCall = coreReportbuilderColumnsDeleteValidateBeforeCall(coreReportbuilderColumnsDeleteRequest, null);
        Type localVarReturnType = new TypeToken<CoreReportbuilderColumnsDelete200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete column from report (asynchronously)
     * Delete column from report
     * @param coreReportbuilderColumnsDeleteRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreReportbuilderColumnsDeleteAsync(CoreReportbuilderColumnsDeleteRequest coreReportbuilderColumnsDeleteRequest, final ApiCallback<CoreReportbuilderColumnsDelete200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreReportbuilderColumnsDeleteValidateBeforeCall(coreReportbuilderColumnsDeleteRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreReportbuilderColumnsDelete200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreReportbuilderColumnsReorder
     * @param coreReportbuilderColumnsReorderRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreReportbuilderColumnsReorderCall(CoreReportbuilderColumnsReorderRequest coreReportbuilderColumnsReorderRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreReportbuilderColumnsReorderRequest;

        // create path and map variables
        String localVarPath = "/core_reportbuilder_columns_reorder";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreReportbuilderColumnsReorderValidateBeforeCall(CoreReportbuilderColumnsReorderRequest coreReportbuilderColumnsReorderRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreReportbuilderColumnsReorderRequest' is set
        if (coreReportbuilderColumnsReorderRequest == null) {
            throw new ApiException("Missing the required parameter 'coreReportbuilderColumnsReorderRequest' when calling coreReportbuilderColumnsReorder(Async)");
        }

        return coreReportbuilderColumnsReorderCall(coreReportbuilderColumnsReorderRequest, _callback);

    }

    /**
     * Re-order column within report
     * Re-order column within report
     * @param coreReportbuilderColumnsReorderRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreReportbuilderColumnsReorder(CoreReportbuilderColumnsReorderRequest coreReportbuilderColumnsReorderRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreReportbuilderColumnsReorderWithHttpInfo(coreReportbuilderColumnsReorderRequest);
        return localVarResp.getData();
    }

    /**
     * Re-order column within report
     * Re-order column within report
     * @param coreReportbuilderColumnsReorderRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreReportbuilderColumnsReorderWithHttpInfo(CoreReportbuilderColumnsReorderRequest coreReportbuilderColumnsReorderRequest) throws ApiException {
        okhttp3.Call localVarCall = coreReportbuilderColumnsReorderValidateBeforeCall(coreReportbuilderColumnsReorderRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Re-order column within report (asynchronously)
     * Re-order column within report
     * @param coreReportbuilderColumnsReorderRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreReportbuilderColumnsReorderAsync(CoreReportbuilderColumnsReorderRequest coreReportbuilderColumnsReorderRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreReportbuilderColumnsReorderValidateBeforeCall(coreReportbuilderColumnsReorderRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreReportbuilderColumnsSortGet
     * @param coreReportbuilderColumnsSortGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreReportbuilderColumnsSortGetCall(CoreReportbuilderColumnsSortGetRequest coreReportbuilderColumnsSortGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreReportbuilderColumnsSortGetRequest;

        // create path and map variables
        String localVarPath = "/core_reportbuilder_columns_sort_get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreReportbuilderColumnsSortGetValidateBeforeCall(CoreReportbuilderColumnsSortGetRequest coreReportbuilderColumnsSortGetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreReportbuilderColumnsSortGetRequest' is set
        if (coreReportbuilderColumnsSortGetRequest == null) {
            throw new ApiException("Missing the required parameter 'coreReportbuilderColumnsSortGetRequest' when calling coreReportbuilderColumnsSortGet(Async)");
        }

        return coreReportbuilderColumnsSortGetCall(coreReportbuilderColumnsSortGetRequest, _callback);

    }

    /**
     * Retrieve column sorting for report
     * Retrieve column sorting for report
     * @param coreReportbuilderColumnsSortGetRequest  (required)
     * @return CoreReportbuilderColumnsDelete200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreReportbuilderColumnsDelete200Response coreReportbuilderColumnsSortGet(CoreReportbuilderColumnsSortGetRequest coreReportbuilderColumnsSortGetRequest) throws ApiException {
        ApiResponse<CoreReportbuilderColumnsDelete200Response> localVarResp = coreReportbuilderColumnsSortGetWithHttpInfo(coreReportbuilderColumnsSortGetRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieve column sorting for report
     * Retrieve column sorting for report
     * @param coreReportbuilderColumnsSortGetRequest  (required)
     * @return ApiResponse&lt;CoreReportbuilderColumnsDelete200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreReportbuilderColumnsDelete200Response> coreReportbuilderColumnsSortGetWithHttpInfo(CoreReportbuilderColumnsSortGetRequest coreReportbuilderColumnsSortGetRequest) throws ApiException {
        okhttp3.Call localVarCall = coreReportbuilderColumnsSortGetValidateBeforeCall(coreReportbuilderColumnsSortGetRequest, null);
        Type localVarReturnType = new TypeToken<CoreReportbuilderColumnsDelete200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve column sorting for report (asynchronously)
     * Retrieve column sorting for report
     * @param coreReportbuilderColumnsSortGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreReportbuilderColumnsSortGetAsync(CoreReportbuilderColumnsSortGetRequest coreReportbuilderColumnsSortGetRequest, final ApiCallback<CoreReportbuilderColumnsDelete200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreReportbuilderColumnsSortGetValidateBeforeCall(coreReportbuilderColumnsSortGetRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreReportbuilderColumnsDelete200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreReportbuilderColumnsSortReorder
     * @param coreReportbuilderColumnsSortReorderRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreReportbuilderColumnsSortReorderCall(CoreReportbuilderColumnsSortReorderRequest coreReportbuilderColumnsSortReorderRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreReportbuilderColumnsSortReorderRequest;

        // create path and map variables
        String localVarPath = "/core_reportbuilder_columns_sort_reorder";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreReportbuilderColumnsSortReorderValidateBeforeCall(CoreReportbuilderColumnsSortReorderRequest coreReportbuilderColumnsSortReorderRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreReportbuilderColumnsSortReorderRequest' is set
        if (coreReportbuilderColumnsSortReorderRequest == null) {
            throw new ApiException("Missing the required parameter 'coreReportbuilderColumnsSortReorderRequest' when calling coreReportbuilderColumnsSortReorder(Async)");
        }

        return coreReportbuilderColumnsSortReorderCall(coreReportbuilderColumnsSortReorderRequest, _callback);

    }

    /**
     * Re-order column sorting within report
     * Re-order column sorting within report
     * @param coreReportbuilderColumnsSortReorderRequest  (required)
     * @return CoreReportbuilderColumnsDelete200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreReportbuilderColumnsDelete200Response coreReportbuilderColumnsSortReorder(CoreReportbuilderColumnsSortReorderRequest coreReportbuilderColumnsSortReorderRequest) throws ApiException {
        ApiResponse<CoreReportbuilderColumnsDelete200Response> localVarResp = coreReportbuilderColumnsSortReorderWithHttpInfo(coreReportbuilderColumnsSortReorderRequest);
        return localVarResp.getData();
    }

    /**
     * Re-order column sorting within report
     * Re-order column sorting within report
     * @param coreReportbuilderColumnsSortReorderRequest  (required)
     * @return ApiResponse&lt;CoreReportbuilderColumnsDelete200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreReportbuilderColumnsDelete200Response> coreReportbuilderColumnsSortReorderWithHttpInfo(CoreReportbuilderColumnsSortReorderRequest coreReportbuilderColumnsSortReorderRequest) throws ApiException {
        okhttp3.Call localVarCall = coreReportbuilderColumnsSortReorderValidateBeforeCall(coreReportbuilderColumnsSortReorderRequest, null);
        Type localVarReturnType = new TypeToken<CoreReportbuilderColumnsDelete200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Re-order column sorting within report (asynchronously)
     * Re-order column sorting within report
     * @param coreReportbuilderColumnsSortReorderRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreReportbuilderColumnsSortReorderAsync(CoreReportbuilderColumnsSortReorderRequest coreReportbuilderColumnsSortReorderRequest, final ApiCallback<CoreReportbuilderColumnsDelete200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreReportbuilderColumnsSortReorderValidateBeforeCall(coreReportbuilderColumnsSortReorderRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreReportbuilderColumnsDelete200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreReportbuilderColumnsSortToggle
     * @param coreReportbuilderColumnsSortToggleRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreReportbuilderColumnsSortToggleCall(CoreReportbuilderColumnsSortToggleRequest coreReportbuilderColumnsSortToggleRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreReportbuilderColumnsSortToggleRequest;

        // create path and map variables
        String localVarPath = "/core_reportbuilder_columns_sort_toggle";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreReportbuilderColumnsSortToggleValidateBeforeCall(CoreReportbuilderColumnsSortToggleRequest coreReportbuilderColumnsSortToggleRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreReportbuilderColumnsSortToggleRequest' is set
        if (coreReportbuilderColumnsSortToggleRequest == null) {
            throw new ApiException("Missing the required parameter 'coreReportbuilderColumnsSortToggleRequest' when calling coreReportbuilderColumnsSortToggle(Async)");
        }

        return coreReportbuilderColumnsSortToggleCall(coreReportbuilderColumnsSortToggleRequest, _callback);

    }

    /**
     * Toggle sorting of column within report
     * Toggle sorting of column within report
     * @param coreReportbuilderColumnsSortToggleRequest  (required)
     * @return CoreReportbuilderColumnsDelete200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreReportbuilderColumnsDelete200Response coreReportbuilderColumnsSortToggle(CoreReportbuilderColumnsSortToggleRequest coreReportbuilderColumnsSortToggleRequest) throws ApiException {
        ApiResponse<CoreReportbuilderColumnsDelete200Response> localVarResp = coreReportbuilderColumnsSortToggleWithHttpInfo(coreReportbuilderColumnsSortToggleRequest);
        return localVarResp.getData();
    }

    /**
     * Toggle sorting of column within report
     * Toggle sorting of column within report
     * @param coreReportbuilderColumnsSortToggleRequest  (required)
     * @return ApiResponse&lt;CoreReportbuilderColumnsDelete200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreReportbuilderColumnsDelete200Response> coreReportbuilderColumnsSortToggleWithHttpInfo(CoreReportbuilderColumnsSortToggleRequest coreReportbuilderColumnsSortToggleRequest) throws ApiException {
        okhttp3.Call localVarCall = coreReportbuilderColumnsSortToggleValidateBeforeCall(coreReportbuilderColumnsSortToggleRequest, null);
        Type localVarReturnType = new TypeToken<CoreReportbuilderColumnsDelete200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Toggle sorting of column within report (asynchronously)
     * Toggle sorting of column within report
     * @param coreReportbuilderColumnsSortToggleRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreReportbuilderColumnsSortToggleAsync(CoreReportbuilderColumnsSortToggleRequest coreReportbuilderColumnsSortToggleRequest, final ApiCallback<CoreReportbuilderColumnsDelete200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreReportbuilderColumnsSortToggleValidateBeforeCall(coreReportbuilderColumnsSortToggleRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreReportbuilderColumnsDelete200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreReportbuilderConditionsAdd
     * @param coreReportbuilderConditionsAddRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreReportbuilderConditionsAddCall(CoreReportbuilderConditionsAddRequest coreReportbuilderConditionsAddRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreReportbuilderConditionsAddRequest;

        // create path and map variables
        String localVarPath = "/core_reportbuilder_conditions_add";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreReportbuilderConditionsAddValidateBeforeCall(CoreReportbuilderConditionsAddRequest coreReportbuilderConditionsAddRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreReportbuilderConditionsAddRequest' is set
        if (coreReportbuilderConditionsAddRequest == null) {
            throw new ApiException("Missing the required parameter 'coreReportbuilderConditionsAddRequest' when calling coreReportbuilderConditionsAdd(Async)");
        }

        return coreReportbuilderConditionsAddCall(coreReportbuilderConditionsAddRequest, _callback);

    }

    /**
     * Add condition to report
     * Add condition to report
     * @param coreReportbuilderConditionsAddRequest  (required)
     * @return CoreReportbuilderConditionsAdd200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreReportbuilderConditionsAdd200Response coreReportbuilderConditionsAdd(CoreReportbuilderConditionsAddRequest coreReportbuilderConditionsAddRequest) throws ApiException {
        ApiResponse<CoreReportbuilderConditionsAdd200Response> localVarResp = coreReportbuilderConditionsAddWithHttpInfo(coreReportbuilderConditionsAddRequest);
        return localVarResp.getData();
    }

    /**
     * Add condition to report
     * Add condition to report
     * @param coreReportbuilderConditionsAddRequest  (required)
     * @return ApiResponse&lt;CoreReportbuilderConditionsAdd200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreReportbuilderConditionsAdd200Response> coreReportbuilderConditionsAddWithHttpInfo(CoreReportbuilderConditionsAddRequest coreReportbuilderConditionsAddRequest) throws ApiException {
        okhttp3.Call localVarCall = coreReportbuilderConditionsAddValidateBeforeCall(coreReportbuilderConditionsAddRequest, null);
        Type localVarReturnType = new TypeToken<CoreReportbuilderConditionsAdd200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add condition to report (asynchronously)
     * Add condition to report
     * @param coreReportbuilderConditionsAddRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreReportbuilderConditionsAddAsync(CoreReportbuilderConditionsAddRequest coreReportbuilderConditionsAddRequest, final ApiCallback<CoreReportbuilderConditionsAdd200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreReportbuilderConditionsAddValidateBeforeCall(coreReportbuilderConditionsAddRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreReportbuilderConditionsAdd200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreReportbuilderConditionsDelete
     * @param coreReportbuilderConditionsDeleteRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreReportbuilderConditionsDeleteCall(CoreReportbuilderConditionsDeleteRequest coreReportbuilderConditionsDeleteRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreReportbuilderConditionsDeleteRequest;

        // create path and map variables
        String localVarPath = "/core_reportbuilder_conditions_delete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreReportbuilderConditionsDeleteValidateBeforeCall(CoreReportbuilderConditionsDeleteRequest coreReportbuilderConditionsDeleteRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreReportbuilderConditionsDeleteRequest' is set
        if (coreReportbuilderConditionsDeleteRequest == null) {
            throw new ApiException("Missing the required parameter 'coreReportbuilderConditionsDeleteRequest' when calling coreReportbuilderConditionsDelete(Async)");
        }

        return coreReportbuilderConditionsDeleteCall(coreReportbuilderConditionsDeleteRequest, _callback);

    }

    /**
     * Delete condition from report
     * Delete condition from report
     * @param coreReportbuilderConditionsDeleteRequest  (required)
     * @return CoreReportbuilderConditionsDelete200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreReportbuilderConditionsDelete200Response coreReportbuilderConditionsDelete(CoreReportbuilderConditionsDeleteRequest coreReportbuilderConditionsDeleteRequest) throws ApiException {
        ApiResponse<CoreReportbuilderConditionsDelete200Response> localVarResp = coreReportbuilderConditionsDeleteWithHttpInfo(coreReportbuilderConditionsDeleteRequest);
        return localVarResp.getData();
    }

    /**
     * Delete condition from report
     * Delete condition from report
     * @param coreReportbuilderConditionsDeleteRequest  (required)
     * @return ApiResponse&lt;CoreReportbuilderConditionsDelete200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreReportbuilderConditionsDelete200Response> coreReportbuilderConditionsDeleteWithHttpInfo(CoreReportbuilderConditionsDeleteRequest coreReportbuilderConditionsDeleteRequest) throws ApiException {
        okhttp3.Call localVarCall = coreReportbuilderConditionsDeleteValidateBeforeCall(coreReportbuilderConditionsDeleteRequest, null);
        Type localVarReturnType = new TypeToken<CoreReportbuilderConditionsDelete200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete condition from report (asynchronously)
     * Delete condition from report
     * @param coreReportbuilderConditionsDeleteRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreReportbuilderConditionsDeleteAsync(CoreReportbuilderConditionsDeleteRequest coreReportbuilderConditionsDeleteRequest, final ApiCallback<CoreReportbuilderConditionsDelete200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreReportbuilderConditionsDeleteValidateBeforeCall(coreReportbuilderConditionsDeleteRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreReportbuilderConditionsDelete200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreReportbuilderConditionsReorder
     * @param coreReportbuilderConditionsReorderRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreReportbuilderConditionsReorderCall(CoreReportbuilderConditionsReorderRequest coreReportbuilderConditionsReorderRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreReportbuilderConditionsReorderRequest;

        // create path and map variables
        String localVarPath = "/core_reportbuilder_conditions_reorder";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreReportbuilderConditionsReorderValidateBeforeCall(CoreReportbuilderConditionsReorderRequest coreReportbuilderConditionsReorderRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreReportbuilderConditionsReorderRequest' is set
        if (coreReportbuilderConditionsReorderRequest == null) {
            throw new ApiException("Missing the required parameter 'coreReportbuilderConditionsReorderRequest' when calling coreReportbuilderConditionsReorder(Async)");
        }

        return coreReportbuilderConditionsReorderCall(coreReportbuilderConditionsReorderRequest, _callback);

    }

    /**
     * Re-order condition within report
     * Re-order condition within report
     * @param coreReportbuilderConditionsReorderRequest  (required)
     * @return CoreReportbuilderConditionsDelete200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreReportbuilderConditionsDelete200Response coreReportbuilderConditionsReorder(CoreReportbuilderConditionsReorderRequest coreReportbuilderConditionsReorderRequest) throws ApiException {
        ApiResponse<CoreReportbuilderConditionsDelete200Response> localVarResp = coreReportbuilderConditionsReorderWithHttpInfo(coreReportbuilderConditionsReorderRequest);
        return localVarResp.getData();
    }

    /**
     * Re-order condition within report
     * Re-order condition within report
     * @param coreReportbuilderConditionsReorderRequest  (required)
     * @return ApiResponse&lt;CoreReportbuilderConditionsDelete200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreReportbuilderConditionsDelete200Response> coreReportbuilderConditionsReorderWithHttpInfo(CoreReportbuilderConditionsReorderRequest coreReportbuilderConditionsReorderRequest) throws ApiException {
        okhttp3.Call localVarCall = coreReportbuilderConditionsReorderValidateBeforeCall(coreReportbuilderConditionsReorderRequest, null);
        Type localVarReturnType = new TypeToken<CoreReportbuilderConditionsDelete200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Re-order condition within report (asynchronously)
     * Re-order condition within report
     * @param coreReportbuilderConditionsReorderRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreReportbuilderConditionsReorderAsync(CoreReportbuilderConditionsReorderRequest coreReportbuilderConditionsReorderRequest, final ApiCallback<CoreReportbuilderConditionsDelete200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreReportbuilderConditionsReorderValidateBeforeCall(coreReportbuilderConditionsReorderRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreReportbuilderConditionsDelete200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreReportbuilderConditionsReset
     * @param coreReportbuilderColumnsSortGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreReportbuilderConditionsResetCall(CoreReportbuilderColumnsSortGetRequest coreReportbuilderColumnsSortGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreReportbuilderColumnsSortGetRequest;

        // create path and map variables
        String localVarPath = "/core_reportbuilder_conditions_reset";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreReportbuilderConditionsResetValidateBeforeCall(CoreReportbuilderColumnsSortGetRequest coreReportbuilderColumnsSortGetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreReportbuilderColumnsSortGetRequest' is set
        if (coreReportbuilderColumnsSortGetRequest == null) {
            throw new ApiException("Missing the required parameter 'coreReportbuilderColumnsSortGetRequest' when calling coreReportbuilderConditionsReset(Async)");
        }

        return coreReportbuilderConditionsResetCall(coreReportbuilderColumnsSortGetRequest, _callback);

    }

    /**
     * Reset conditions for given report
     * Reset conditions for given report
     * @param coreReportbuilderColumnsSortGetRequest  (required)
     * @return CoreReportbuilderConditionsDelete200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreReportbuilderConditionsDelete200Response coreReportbuilderConditionsReset(CoreReportbuilderColumnsSortGetRequest coreReportbuilderColumnsSortGetRequest) throws ApiException {
        ApiResponse<CoreReportbuilderConditionsDelete200Response> localVarResp = coreReportbuilderConditionsResetWithHttpInfo(coreReportbuilderColumnsSortGetRequest);
        return localVarResp.getData();
    }

    /**
     * Reset conditions for given report
     * Reset conditions for given report
     * @param coreReportbuilderColumnsSortGetRequest  (required)
     * @return ApiResponse&lt;CoreReportbuilderConditionsDelete200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreReportbuilderConditionsDelete200Response> coreReportbuilderConditionsResetWithHttpInfo(CoreReportbuilderColumnsSortGetRequest coreReportbuilderColumnsSortGetRequest) throws ApiException {
        okhttp3.Call localVarCall = coreReportbuilderConditionsResetValidateBeforeCall(coreReportbuilderColumnsSortGetRequest, null);
        Type localVarReturnType = new TypeToken<CoreReportbuilderConditionsDelete200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Reset conditions for given report (asynchronously)
     * Reset conditions for given report
     * @param coreReportbuilderColumnsSortGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreReportbuilderConditionsResetAsync(CoreReportbuilderColumnsSortGetRequest coreReportbuilderColumnsSortGetRequest, final ApiCallback<CoreReportbuilderConditionsDelete200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreReportbuilderConditionsResetValidateBeforeCall(coreReportbuilderColumnsSortGetRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreReportbuilderConditionsDelete200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreReportbuilderFiltersAdd
     * @param coreReportbuilderFiltersAddRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreReportbuilderFiltersAddCall(CoreReportbuilderFiltersAddRequest coreReportbuilderFiltersAddRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreReportbuilderFiltersAddRequest;

        // create path and map variables
        String localVarPath = "/core_reportbuilder_filters_add";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreReportbuilderFiltersAddValidateBeforeCall(CoreReportbuilderFiltersAddRequest coreReportbuilderFiltersAddRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreReportbuilderFiltersAddRequest' is set
        if (coreReportbuilderFiltersAddRequest == null) {
            throw new ApiException("Missing the required parameter 'coreReportbuilderFiltersAddRequest' when calling coreReportbuilderFiltersAdd(Async)");
        }

        return coreReportbuilderFiltersAddCall(coreReportbuilderFiltersAddRequest, _callback);

    }

    /**
     * Add filter to report
     * Add filter to report
     * @param coreReportbuilderFiltersAddRequest  (required)
     * @return CoreReportbuilderFiltersAdd200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreReportbuilderFiltersAdd200Response coreReportbuilderFiltersAdd(CoreReportbuilderFiltersAddRequest coreReportbuilderFiltersAddRequest) throws ApiException {
        ApiResponse<CoreReportbuilderFiltersAdd200Response> localVarResp = coreReportbuilderFiltersAddWithHttpInfo(coreReportbuilderFiltersAddRequest);
        return localVarResp.getData();
    }

    /**
     * Add filter to report
     * Add filter to report
     * @param coreReportbuilderFiltersAddRequest  (required)
     * @return ApiResponse&lt;CoreReportbuilderFiltersAdd200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreReportbuilderFiltersAdd200Response> coreReportbuilderFiltersAddWithHttpInfo(CoreReportbuilderFiltersAddRequest coreReportbuilderFiltersAddRequest) throws ApiException {
        okhttp3.Call localVarCall = coreReportbuilderFiltersAddValidateBeforeCall(coreReportbuilderFiltersAddRequest, null);
        Type localVarReturnType = new TypeToken<CoreReportbuilderFiltersAdd200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add filter to report (asynchronously)
     * Add filter to report
     * @param coreReportbuilderFiltersAddRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreReportbuilderFiltersAddAsync(CoreReportbuilderFiltersAddRequest coreReportbuilderFiltersAddRequest, final ApiCallback<CoreReportbuilderFiltersAdd200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreReportbuilderFiltersAddValidateBeforeCall(coreReportbuilderFiltersAddRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreReportbuilderFiltersAdd200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreReportbuilderFiltersDelete
     * @param coreReportbuilderFiltersDeleteRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreReportbuilderFiltersDeleteCall(CoreReportbuilderFiltersDeleteRequest coreReportbuilderFiltersDeleteRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreReportbuilderFiltersDeleteRequest;

        // create path and map variables
        String localVarPath = "/core_reportbuilder_filters_delete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreReportbuilderFiltersDeleteValidateBeforeCall(CoreReportbuilderFiltersDeleteRequest coreReportbuilderFiltersDeleteRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreReportbuilderFiltersDeleteRequest' is set
        if (coreReportbuilderFiltersDeleteRequest == null) {
            throw new ApiException("Missing the required parameter 'coreReportbuilderFiltersDeleteRequest' when calling coreReportbuilderFiltersDelete(Async)");
        }

        return coreReportbuilderFiltersDeleteCall(coreReportbuilderFiltersDeleteRequest, _callback);

    }

    /**
     * Delete filter from report
     * Delete filter from report
     * @param coreReportbuilderFiltersDeleteRequest  (required)
     * @return CoreReportbuilderFiltersDelete200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreReportbuilderFiltersDelete200Response coreReportbuilderFiltersDelete(CoreReportbuilderFiltersDeleteRequest coreReportbuilderFiltersDeleteRequest) throws ApiException {
        ApiResponse<CoreReportbuilderFiltersDelete200Response> localVarResp = coreReportbuilderFiltersDeleteWithHttpInfo(coreReportbuilderFiltersDeleteRequest);
        return localVarResp.getData();
    }

    /**
     * Delete filter from report
     * Delete filter from report
     * @param coreReportbuilderFiltersDeleteRequest  (required)
     * @return ApiResponse&lt;CoreReportbuilderFiltersDelete200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreReportbuilderFiltersDelete200Response> coreReportbuilderFiltersDeleteWithHttpInfo(CoreReportbuilderFiltersDeleteRequest coreReportbuilderFiltersDeleteRequest) throws ApiException {
        okhttp3.Call localVarCall = coreReportbuilderFiltersDeleteValidateBeforeCall(coreReportbuilderFiltersDeleteRequest, null);
        Type localVarReturnType = new TypeToken<CoreReportbuilderFiltersDelete200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete filter from report (asynchronously)
     * Delete filter from report
     * @param coreReportbuilderFiltersDeleteRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreReportbuilderFiltersDeleteAsync(CoreReportbuilderFiltersDeleteRequest coreReportbuilderFiltersDeleteRequest, final ApiCallback<CoreReportbuilderFiltersDelete200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreReportbuilderFiltersDeleteValidateBeforeCall(coreReportbuilderFiltersDeleteRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreReportbuilderFiltersDelete200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreReportbuilderFiltersReorder
     * @param coreReportbuilderFiltersReorderRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreReportbuilderFiltersReorderCall(CoreReportbuilderFiltersReorderRequest coreReportbuilderFiltersReorderRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreReportbuilderFiltersReorderRequest;

        // create path and map variables
        String localVarPath = "/core_reportbuilder_filters_reorder";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreReportbuilderFiltersReorderValidateBeforeCall(CoreReportbuilderFiltersReorderRequest coreReportbuilderFiltersReorderRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreReportbuilderFiltersReorderRequest' is set
        if (coreReportbuilderFiltersReorderRequest == null) {
            throw new ApiException("Missing the required parameter 'coreReportbuilderFiltersReorderRequest' when calling coreReportbuilderFiltersReorder(Async)");
        }

        return coreReportbuilderFiltersReorderCall(coreReportbuilderFiltersReorderRequest, _callback);

    }

    /**
     * Re-order filter within report
     * Re-order filter within report
     * @param coreReportbuilderFiltersReorderRequest  (required)
     * @return CoreReportbuilderFiltersDelete200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreReportbuilderFiltersDelete200Response coreReportbuilderFiltersReorder(CoreReportbuilderFiltersReorderRequest coreReportbuilderFiltersReorderRequest) throws ApiException {
        ApiResponse<CoreReportbuilderFiltersDelete200Response> localVarResp = coreReportbuilderFiltersReorderWithHttpInfo(coreReportbuilderFiltersReorderRequest);
        return localVarResp.getData();
    }

    /**
     * Re-order filter within report
     * Re-order filter within report
     * @param coreReportbuilderFiltersReorderRequest  (required)
     * @return ApiResponse&lt;CoreReportbuilderFiltersDelete200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreReportbuilderFiltersDelete200Response> coreReportbuilderFiltersReorderWithHttpInfo(CoreReportbuilderFiltersReorderRequest coreReportbuilderFiltersReorderRequest) throws ApiException {
        okhttp3.Call localVarCall = coreReportbuilderFiltersReorderValidateBeforeCall(coreReportbuilderFiltersReorderRequest, null);
        Type localVarReturnType = new TypeToken<CoreReportbuilderFiltersDelete200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Re-order filter within report (asynchronously)
     * Re-order filter within report
     * @param coreReportbuilderFiltersReorderRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreReportbuilderFiltersReorderAsync(CoreReportbuilderFiltersReorderRequest coreReportbuilderFiltersReorderRequest, final ApiCallback<CoreReportbuilderFiltersDelete200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreReportbuilderFiltersReorderValidateBeforeCall(coreReportbuilderFiltersReorderRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreReportbuilderFiltersDelete200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreReportbuilderFiltersReset
     * @param coreReportbuilderFiltersResetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreReportbuilderFiltersResetCall(CoreReportbuilderFiltersResetRequest coreReportbuilderFiltersResetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreReportbuilderFiltersResetRequest;

        // create path and map variables
        String localVarPath = "/core_reportbuilder_filters_reset";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreReportbuilderFiltersResetValidateBeforeCall(CoreReportbuilderFiltersResetRequest coreReportbuilderFiltersResetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreReportbuilderFiltersResetRequest' is set
        if (coreReportbuilderFiltersResetRequest == null) {
            throw new ApiException("Missing the required parameter 'coreReportbuilderFiltersResetRequest' when calling coreReportbuilderFiltersReset(Async)");
        }

        return coreReportbuilderFiltersResetCall(coreReportbuilderFiltersResetRequest, _callback);

    }

    /**
     * Reset filters for given report
     * Reset filters for given report
     * @param coreReportbuilderFiltersResetRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreReportbuilderFiltersReset(CoreReportbuilderFiltersResetRequest coreReportbuilderFiltersResetRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreReportbuilderFiltersResetWithHttpInfo(coreReportbuilderFiltersResetRequest);
        return localVarResp.getData();
    }

    /**
     * Reset filters for given report
     * Reset filters for given report
     * @param coreReportbuilderFiltersResetRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreReportbuilderFiltersResetWithHttpInfo(CoreReportbuilderFiltersResetRequest coreReportbuilderFiltersResetRequest) throws ApiException {
        okhttp3.Call localVarCall = coreReportbuilderFiltersResetValidateBeforeCall(coreReportbuilderFiltersResetRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Reset filters for given report (asynchronously)
     * Reset filters for given report
     * @param coreReportbuilderFiltersResetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreReportbuilderFiltersResetAsync(CoreReportbuilderFiltersResetRequest coreReportbuilderFiltersResetRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreReportbuilderFiltersResetValidateBeforeCall(coreReportbuilderFiltersResetRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreReportbuilderListReports
     * @param coreReportbuilderListReportsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreReportbuilderListReportsCall(CoreReportbuilderListReportsRequest coreReportbuilderListReportsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreReportbuilderListReportsRequest;

        // create path and map variables
        String localVarPath = "/core_reportbuilder_list_reports";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreReportbuilderListReportsValidateBeforeCall(CoreReportbuilderListReportsRequest coreReportbuilderListReportsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreReportbuilderListReportsRequest' is set
        if (coreReportbuilderListReportsRequest == null) {
            throw new ApiException("Missing the required parameter 'coreReportbuilderListReportsRequest' when calling coreReportbuilderListReports(Async)");
        }

        return coreReportbuilderListReportsCall(coreReportbuilderListReportsRequest, _callback);

    }

    /**
     * List custom reports for current user
     * List custom reports for current user
     * @param coreReportbuilderListReportsRequest  (required)
     * @return CoreReportbuilderListReports200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreReportbuilderListReports200Response coreReportbuilderListReports(CoreReportbuilderListReportsRequest coreReportbuilderListReportsRequest) throws ApiException {
        ApiResponse<CoreReportbuilderListReports200Response> localVarResp = coreReportbuilderListReportsWithHttpInfo(coreReportbuilderListReportsRequest);
        return localVarResp.getData();
    }

    /**
     * List custom reports for current user
     * List custom reports for current user
     * @param coreReportbuilderListReportsRequest  (required)
     * @return ApiResponse&lt;CoreReportbuilderListReports200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreReportbuilderListReports200Response> coreReportbuilderListReportsWithHttpInfo(CoreReportbuilderListReportsRequest coreReportbuilderListReportsRequest) throws ApiException {
        okhttp3.Call localVarCall = coreReportbuilderListReportsValidateBeforeCall(coreReportbuilderListReportsRequest, null);
        Type localVarReturnType = new TypeToken<CoreReportbuilderListReports200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List custom reports for current user (asynchronously)
     * List custom reports for current user
     * @param coreReportbuilderListReportsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreReportbuilderListReportsAsync(CoreReportbuilderListReportsRequest coreReportbuilderListReportsRequest, final ApiCallback<CoreReportbuilderListReports200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreReportbuilderListReportsValidateBeforeCall(coreReportbuilderListReportsRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreReportbuilderListReports200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreReportbuilderReportsDelete
     * @param coreReportbuilderColumnsSortGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreReportbuilderReportsDeleteCall(CoreReportbuilderColumnsSortGetRequest coreReportbuilderColumnsSortGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreReportbuilderColumnsSortGetRequest;

        // create path and map variables
        String localVarPath = "/core_reportbuilder_reports_delete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreReportbuilderReportsDeleteValidateBeforeCall(CoreReportbuilderColumnsSortGetRequest coreReportbuilderColumnsSortGetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreReportbuilderColumnsSortGetRequest' is set
        if (coreReportbuilderColumnsSortGetRequest == null) {
            throw new ApiException("Missing the required parameter 'coreReportbuilderColumnsSortGetRequest' when calling coreReportbuilderReportsDelete(Async)");
        }

        return coreReportbuilderReportsDeleteCall(coreReportbuilderColumnsSortGetRequest, _callback);

    }

    /**
     * Delete report
     * Delete report
     * @param coreReportbuilderColumnsSortGetRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreReportbuilderReportsDelete(CoreReportbuilderColumnsSortGetRequest coreReportbuilderColumnsSortGetRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreReportbuilderReportsDeleteWithHttpInfo(coreReportbuilderColumnsSortGetRequest);
        return localVarResp.getData();
    }

    /**
     * Delete report
     * Delete report
     * @param coreReportbuilderColumnsSortGetRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreReportbuilderReportsDeleteWithHttpInfo(CoreReportbuilderColumnsSortGetRequest coreReportbuilderColumnsSortGetRequest) throws ApiException {
        okhttp3.Call localVarCall = coreReportbuilderReportsDeleteValidateBeforeCall(coreReportbuilderColumnsSortGetRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete report (asynchronously)
     * Delete report
     * @param coreReportbuilderColumnsSortGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreReportbuilderReportsDeleteAsync(CoreReportbuilderColumnsSortGetRequest coreReportbuilderColumnsSortGetRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreReportbuilderReportsDeleteValidateBeforeCall(coreReportbuilderColumnsSortGetRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreReportbuilderReportsGet
     * @param coreReportbuilderReportsGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreReportbuilderReportsGetCall(CoreReportbuilderReportsGetRequest coreReportbuilderReportsGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreReportbuilderReportsGetRequest;

        // create path and map variables
        String localVarPath = "/core_reportbuilder_reports_get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreReportbuilderReportsGetValidateBeforeCall(CoreReportbuilderReportsGetRequest coreReportbuilderReportsGetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreReportbuilderReportsGetRequest' is set
        if (coreReportbuilderReportsGetRequest == null) {
            throw new ApiException("Missing the required parameter 'coreReportbuilderReportsGetRequest' when calling coreReportbuilderReportsGet(Async)");
        }

        return coreReportbuilderReportsGetCall(coreReportbuilderReportsGetRequest, _callback);

    }

    /**
     * Get custom report
     * Get custom report
     * @param coreReportbuilderReportsGetRequest  (required)
     * @return CoreReportbuilderReportsGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreReportbuilderReportsGet200Response coreReportbuilderReportsGet(CoreReportbuilderReportsGetRequest coreReportbuilderReportsGetRequest) throws ApiException {
        ApiResponse<CoreReportbuilderReportsGet200Response> localVarResp = coreReportbuilderReportsGetWithHttpInfo(coreReportbuilderReportsGetRequest);
        return localVarResp.getData();
    }

    /**
     * Get custom report
     * Get custom report
     * @param coreReportbuilderReportsGetRequest  (required)
     * @return ApiResponse&lt;CoreReportbuilderReportsGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreReportbuilderReportsGet200Response> coreReportbuilderReportsGetWithHttpInfo(CoreReportbuilderReportsGetRequest coreReportbuilderReportsGetRequest) throws ApiException {
        okhttp3.Call localVarCall = coreReportbuilderReportsGetValidateBeforeCall(coreReportbuilderReportsGetRequest, null);
        Type localVarReturnType = new TypeToken<CoreReportbuilderReportsGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get custom report (asynchronously)
     * Get custom report
     * @param coreReportbuilderReportsGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreReportbuilderReportsGetAsync(CoreReportbuilderReportsGetRequest coreReportbuilderReportsGetRequest, final ApiCallback<CoreReportbuilderReportsGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreReportbuilderReportsGetValidateBeforeCall(coreReportbuilderReportsGetRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreReportbuilderReportsGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreReportbuilderRetrieveReport
     * @param coreReportbuilderRetrieveReportRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreReportbuilderRetrieveReportCall(CoreReportbuilderRetrieveReportRequest coreReportbuilderRetrieveReportRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreReportbuilderRetrieveReportRequest;

        // create path and map variables
        String localVarPath = "/core_reportbuilder_retrieve_report";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreReportbuilderRetrieveReportValidateBeforeCall(CoreReportbuilderRetrieveReportRequest coreReportbuilderRetrieveReportRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreReportbuilderRetrieveReportRequest' is set
        if (coreReportbuilderRetrieveReportRequest == null) {
            throw new ApiException("Missing the required parameter 'coreReportbuilderRetrieveReportRequest' when calling coreReportbuilderRetrieveReport(Async)");
        }

        return coreReportbuilderRetrieveReportCall(coreReportbuilderRetrieveReportRequest, _callback);

    }

    /**
     * Retrieve custom report content
     * Retrieve custom report content
     * @param coreReportbuilderRetrieveReportRequest  (required)
     * @return CoreReportbuilderRetrieveReport200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreReportbuilderRetrieveReport200Response coreReportbuilderRetrieveReport(CoreReportbuilderRetrieveReportRequest coreReportbuilderRetrieveReportRequest) throws ApiException {
        ApiResponse<CoreReportbuilderRetrieveReport200Response> localVarResp = coreReportbuilderRetrieveReportWithHttpInfo(coreReportbuilderRetrieveReportRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieve custom report content
     * Retrieve custom report content
     * @param coreReportbuilderRetrieveReportRequest  (required)
     * @return ApiResponse&lt;CoreReportbuilderRetrieveReport200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreReportbuilderRetrieveReport200Response> coreReportbuilderRetrieveReportWithHttpInfo(CoreReportbuilderRetrieveReportRequest coreReportbuilderRetrieveReportRequest) throws ApiException {
        okhttp3.Call localVarCall = coreReportbuilderRetrieveReportValidateBeforeCall(coreReportbuilderRetrieveReportRequest, null);
        Type localVarReturnType = new TypeToken<CoreReportbuilderRetrieveReport200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve custom report content (asynchronously)
     * Retrieve custom report content
     * @param coreReportbuilderRetrieveReportRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreReportbuilderRetrieveReportAsync(CoreReportbuilderRetrieveReportRequest coreReportbuilderRetrieveReportRequest, final ApiCallback<CoreReportbuilderRetrieveReport200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreReportbuilderRetrieveReportValidateBeforeCall(coreReportbuilderRetrieveReportRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreReportbuilderRetrieveReport200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreReportbuilderRetrieveSystemReport
     * @param coreReportbuilderRetrieveSystemReportRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreReportbuilderRetrieveSystemReportCall(CoreReportbuilderRetrieveSystemReportRequest coreReportbuilderRetrieveSystemReportRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreReportbuilderRetrieveSystemReportRequest;

        // create path and map variables
        String localVarPath = "/core_reportbuilder_retrieve_system_report";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreReportbuilderRetrieveSystemReportValidateBeforeCall(CoreReportbuilderRetrieveSystemReportRequest coreReportbuilderRetrieveSystemReportRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreReportbuilderRetrieveSystemReportRequest' is set
        if (coreReportbuilderRetrieveSystemReportRequest == null) {
            throw new ApiException("Missing the required parameter 'coreReportbuilderRetrieveSystemReportRequest' when calling coreReportbuilderRetrieveSystemReport(Async)");
        }

        return coreReportbuilderRetrieveSystemReportCall(coreReportbuilderRetrieveSystemReportRequest, _callback);

    }

    /**
     * Retrieve system report content
     * Retrieve system report content
     * @param coreReportbuilderRetrieveSystemReportRequest  (required)
     * @return CoreReportbuilderRetrieveSystemReport200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreReportbuilderRetrieveSystemReport200Response coreReportbuilderRetrieveSystemReport(CoreReportbuilderRetrieveSystemReportRequest coreReportbuilderRetrieveSystemReportRequest) throws ApiException {
        ApiResponse<CoreReportbuilderRetrieveSystemReport200Response> localVarResp = coreReportbuilderRetrieveSystemReportWithHttpInfo(coreReportbuilderRetrieveSystemReportRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieve system report content
     * Retrieve system report content
     * @param coreReportbuilderRetrieveSystemReportRequest  (required)
     * @return ApiResponse&lt;CoreReportbuilderRetrieveSystemReport200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreReportbuilderRetrieveSystemReport200Response> coreReportbuilderRetrieveSystemReportWithHttpInfo(CoreReportbuilderRetrieveSystemReportRequest coreReportbuilderRetrieveSystemReportRequest) throws ApiException {
        okhttp3.Call localVarCall = coreReportbuilderRetrieveSystemReportValidateBeforeCall(coreReportbuilderRetrieveSystemReportRequest, null);
        Type localVarReturnType = new TypeToken<CoreReportbuilderRetrieveSystemReport200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve system report content (asynchronously)
     * Retrieve system report content
     * @param coreReportbuilderRetrieveSystemReportRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreReportbuilderRetrieveSystemReportAsync(CoreReportbuilderRetrieveSystemReportRequest coreReportbuilderRetrieveSystemReportRequest, final ApiCallback<CoreReportbuilderRetrieveSystemReport200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreReportbuilderRetrieveSystemReportValidateBeforeCall(coreReportbuilderRetrieveSystemReportRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreReportbuilderRetrieveSystemReport200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreReportbuilderSchedulesDelete
     * @param coreReportbuilderSchedulesDeleteRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreReportbuilderSchedulesDeleteCall(CoreReportbuilderSchedulesDeleteRequest coreReportbuilderSchedulesDeleteRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreReportbuilderSchedulesDeleteRequest;

        // create path and map variables
        String localVarPath = "/core_reportbuilder_schedules_delete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreReportbuilderSchedulesDeleteValidateBeforeCall(CoreReportbuilderSchedulesDeleteRequest coreReportbuilderSchedulesDeleteRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreReportbuilderSchedulesDeleteRequest' is set
        if (coreReportbuilderSchedulesDeleteRequest == null) {
            throw new ApiException("Missing the required parameter 'coreReportbuilderSchedulesDeleteRequest' when calling coreReportbuilderSchedulesDelete(Async)");
        }

        return coreReportbuilderSchedulesDeleteCall(coreReportbuilderSchedulesDeleteRequest, _callback);

    }

    /**
     * Delete schedule from report
     * Delete schedule from report
     * @param coreReportbuilderSchedulesDeleteRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreReportbuilderSchedulesDelete(CoreReportbuilderSchedulesDeleteRequest coreReportbuilderSchedulesDeleteRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreReportbuilderSchedulesDeleteWithHttpInfo(coreReportbuilderSchedulesDeleteRequest);
        return localVarResp.getData();
    }

    /**
     * Delete schedule from report
     * Delete schedule from report
     * @param coreReportbuilderSchedulesDeleteRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreReportbuilderSchedulesDeleteWithHttpInfo(CoreReportbuilderSchedulesDeleteRequest coreReportbuilderSchedulesDeleteRequest) throws ApiException {
        okhttp3.Call localVarCall = coreReportbuilderSchedulesDeleteValidateBeforeCall(coreReportbuilderSchedulesDeleteRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete schedule from report (asynchronously)
     * Delete schedule from report
     * @param coreReportbuilderSchedulesDeleteRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreReportbuilderSchedulesDeleteAsync(CoreReportbuilderSchedulesDeleteRequest coreReportbuilderSchedulesDeleteRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreReportbuilderSchedulesDeleteValidateBeforeCall(coreReportbuilderSchedulesDeleteRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreReportbuilderSchedulesSend
     * @param coreReportbuilderSchedulesSendRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreReportbuilderSchedulesSendCall(CoreReportbuilderSchedulesSendRequest coreReportbuilderSchedulesSendRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreReportbuilderSchedulesSendRequest;

        // create path and map variables
        String localVarPath = "/core_reportbuilder_schedules_send";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreReportbuilderSchedulesSendValidateBeforeCall(CoreReportbuilderSchedulesSendRequest coreReportbuilderSchedulesSendRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreReportbuilderSchedulesSendRequest' is set
        if (coreReportbuilderSchedulesSendRequest == null) {
            throw new ApiException("Missing the required parameter 'coreReportbuilderSchedulesSendRequest' when calling coreReportbuilderSchedulesSend(Async)");
        }

        return coreReportbuilderSchedulesSendCall(coreReportbuilderSchedulesSendRequest, _callback);

    }

    /**
     * Send report schedule
     * Send report schedule
     * @param coreReportbuilderSchedulesSendRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreReportbuilderSchedulesSend(CoreReportbuilderSchedulesSendRequest coreReportbuilderSchedulesSendRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreReportbuilderSchedulesSendWithHttpInfo(coreReportbuilderSchedulesSendRequest);
        return localVarResp.getData();
    }

    /**
     * Send report schedule
     * Send report schedule
     * @param coreReportbuilderSchedulesSendRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreReportbuilderSchedulesSendWithHttpInfo(CoreReportbuilderSchedulesSendRequest coreReportbuilderSchedulesSendRequest) throws ApiException {
        okhttp3.Call localVarCall = coreReportbuilderSchedulesSendValidateBeforeCall(coreReportbuilderSchedulesSendRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Send report schedule (asynchronously)
     * Send report schedule
     * @param coreReportbuilderSchedulesSendRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreReportbuilderSchedulesSendAsync(CoreReportbuilderSchedulesSendRequest coreReportbuilderSchedulesSendRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreReportbuilderSchedulesSendValidateBeforeCall(coreReportbuilderSchedulesSendRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreReportbuilderSchedulesToggle
     * @param coreReportbuilderSchedulesToggleRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreReportbuilderSchedulesToggleCall(CoreReportbuilderSchedulesToggleRequest coreReportbuilderSchedulesToggleRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreReportbuilderSchedulesToggleRequest;

        // create path and map variables
        String localVarPath = "/core_reportbuilder_schedules_toggle";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreReportbuilderSchedulesToggleValidateBeforeCall(CoreReportbuilderSchedulesToggleRequest coreReportbuilderSchedulesToggleRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreReportbuilderSchedulesToggleRequest' is set
        if (coreReportbuilderSchedulesToggleRequest == null) {
            throw new ApiException("Missing the required parameter 'coreReportbuilderSchedulesToggleRequest' when calling coreReportbuilderSchedulesToggle(Async)");
        }

        return coreReportbuilderSchedulesToggleCall(coreReportbuilderSchedulesToggleRequest, _callback);

    }

    /**
     * Toggle state of report schedule
     * Toggle state of report schedule
     * @param coreReportbuilderSchedulesToggleRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreReportbuilderSchedulesToggle(CoreReportbuilderSchedulesToggleRequest coreReportbuilderSchedulesToggleRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreReportbuilderSchedulesToggleWithHttpInfo(coreReportbuilderSchedulesToggleRequest);
        return localVarResp.getData();
    }

    /**
     * Toggle state of report schedule
     * Toggle state of report schedule
     * @param coreReportbuilderSchedulesToggleRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreReportbuilderSchedulesToggleWithHttpInfo(CoreReportbuilderSchedulesToggleRequest coreReportbuilderSchedulesToggleRequest) throws ApiException {
        okhttp3.Call localVarCall = coreReportbuilderSchedulesToggleValidateBeforeCall(coreReportbuilderSchedulesToggleRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Toggle state of report schedule (asynchronously)
     * Toggle state of report schedule
     * @param coreReportbuilderSchedulesToggleRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreReportbuilderSchedulesToggleAsync(CoreReportbuilderSchedulesToggleRequest coreReportbuilderSchedulesToggleRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreReportbuilderSchedulesToggleValidateBeforeCall(coreReportbuilderSchedulesToggleRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreReportbuilderSetFilters
     * @param coreReportbuilderSetFiltersRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreReportbuilderSetFiltersCall(CoreReportbuilderSetFiltersRequest coreReportbuilderSetFiltersRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreReportbuilderSetFiltersRequest;

        // create path and map variables
        String localVarPath = "/core_reportbuilder_set_filters";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreReportbuilderSetFiltersValidateBeforeCall(CoreReportbuilderSetFiltersRequest coreReportbuilderSetFiltersRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreReportbuilderSetFiltersRequest' is set
        if (coreReportbuilderSetFiltersRequest == null) {
            throw new ApiException("Missing the required parameter 'coreReportbuilderSetFiltersRequest' when calling coreReportbuilderSetFilters(Async)");
        }

        return coreReportbuilderSetFiltersCall(coreReportbuilderSetFiltersRequest, _callback);

    }

    /**
     * Set filter values for given report
     * Set filter values for given report
     * @param coreReportbuilderSetFiltersRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreReportbuilderSetFilters(CoreReportbuilderSetFiltersRequest coreReportbuilderSetFiltersRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreReportbuilderSetFiltersWithHttpInfo(coreReportbuilderSetFiltersRequest);
        return localVarResp.getData();
    }

    /**
     * Set filter values for given report
     * Set filter values for given report
     * @param coreReportbuilderSetFiltersRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreReportbuilderSetFiltersWithHttpInfo(CoreReportbuilderSetFiltersRequest coreReportbuilderSetFiltersRequest) throws ApiException {
        okhttp3.Call localVarCall = coreReportbuilderSetFiltersValidateBeforeCall(coreReportbuilderSetFiltersRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set filter values for given report (asynchronously)
     * Set filter values for given report
     * @param coreReportbuilderSetFiltersRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreReportbuilderSetFiltersAsync(CoreReportbuilderSetFiltersRequest coreReportbuilderSetFiltersRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreReportbuilderSetFiltersValidateBeforeCall(coreReportbuilderSetFiltersRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreReportbuilderViewReport
     * @param coreReportbuilderColumnsSortGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreReportbuilderViewReportCall(CoreReportbuilderColumnsSortGetRequest coreReportbuilderColumnsSortGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreReportbuilderColumnsSortGetRequest;

        // create path and map variables
        String localVarPath = "/core_reportbuilder_view_report";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreReportbuilderViewReportValidateBeforeCall(CoreReportbuilderColumnsSortGetRequest coreReportbuilderColumnsSortGetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreReportbuilderColumnsSortGetRequest' is set
        if (coreReportbuilderColumnsSortGetRequest == null) {
            throw new ApiException("Missing the required parameter 'coreReportbuilderColumnsSortGetRequest' when calling coreReportbuilderViewReport(Async)");
        }

        return coreReportbuilderViewReportCall(coreReportbuilderColumnsSortGetRequest, _callback);

    }

    /**
     * Trigger custom report viewed
     * Trigger custom report viewed
     * @param coreReportbuilderColumnsSortGetRequest  (required)
     * @return CoreReportbuilderViewReport200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreReportbuilderViewReport200Response coreReportbuilderViewReport(CoreReportbuilderColumnsSortGetRequest coreReportbuilderColumnsSortGetRequest) throws ApiException {
        ApiResponse<CoreReportbuilderViewReport200Response> localVarResp = coreReportbuilderViewReportWithHttpInfo(coreReportbuilderColumnsSortGetRequest);
        return localVarResp.getData();
    }

    /**
     * Trigger custom report viewed
     * Trigger custom report viewed
     * @param coreReportbuilderColumnsSortGetRequest  (required)
     * @return ApiResponse&lt;CoreReportbuilderViewReport200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreReportbuilderViewReport200Response> coreReportbuilderViewReportWithHttpInfo(CoreReportbuilderColumnsSortGetRequest coreReportbuilderColumnsSortGetRequest) throws ApiException {
        okhttp3.Call localVarCall = coreReportbuilderViewReportValidateBeforeCall(coreReportbuilderColumnsSortGetRequest, null);
        Type localVarReturnType = new TypeToken<CoreReportbuilderViewReport200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Trigger custom report viewed (asynchronously)
     * Trigger custom report viewed
     * @param coreReportbuilderColumnsSortGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreReportbuilderViewReportAsync(CoreReportbuilderColumnsSortGetRequest coreReportbuilderColumnsSortGetRequest, final ApiCallback<CoreReportbuilderViewReport200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreReportbuilderViewReportValidateBeforeCall(coreReportbuilderColumnsSortGetRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreReportbuilderViewReport200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreRoleAssignRoles
     * @param coreRoleAssignRolesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreRoleAssignRolesCall(CoreRoleAssignRolesRequest coreRoleAssignRolesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreRoleAssignRolesRequest;

        // create path and map variables
        String localVarPath = "/core_role_assign_roles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreRoleAssignRolesValidateBeforeCall(CoreRoleAssignRolesRequest coreRoleAssignRolesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreRoleAssignRolesRequest' is set
        if (coreRoleAssignRolesRequest == null) {
            throw new ApiException("Missing the required parameter 'coreRoleAssignRolesRequest' when calling coreRoleAssignRoles(Async)");
        }

        return coreRoleAssignRolesCall(coreRoleAssignRolesRequest, _callback);

    }

    /**
     * Manual role assignments.
     * Manual role assignments.
     * @param coreRoleAssignRolesRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreRoleAssignRoles(CoreRoleAssignRolesRequest coreRoleAssignRolesRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreRoleAssignRolesWithHttpInfo(coreRoleAssignRolesRequest);
        return localVarResp.getData();
    }

    /**
     * Manual role assignments.
     * Manual role assignments.
     * @param coreRoleAssignRolesRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreRoleAssignRolesWithHttpInfo(CoreRoleAssignRolesRequest coreRoleAssignRolesRequest) throws ApiException {
        okhttp3.Call localVarCall = coreRoleAssignRolesValidateBeforeCall(coreRoleAssignRolesRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Manual role assignments. (asynchronously)
     * Manual role assignments.
     * @param coreRoleAssignRolesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreRoleAssignRolesAsync(CoreRoleAssignRolesRequest coreRoleAssignRolesRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreRoleAssignRolesValidateBeforeCall(coreRoleAssignRolesRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreRoleUnassignRoles
     * @param coreRoleUnassignRolesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreRoleUnassignRolesCall(CoreRoleUnassignRolesRequest coreRoleUnassignRolesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreRoleUnassignRolesRequest;

        // create path and map variables
        String localVarPath = "/core_role_unassign_roles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreRoleUnassignRolesValidateBeforeCall(CoreRoleUnassignRolesRequest coreRoleUnassignRolesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreRoleUnassignRolesRequest' is set
        if (coreRoleUnassignRolesRequest == null) {
            throw new ApiException("Missing the required parameter 'coreRoleUnassignRolesRequest' when calling coreRoleUnassignRoles(Async)");
        }

        return coreRoleUnassignRolesCall(coreRoleUnassignRolesRequest, _callback);

    }

    /**
     * Manual role unassignments.
     * Manual role unassignments.
     * @param coreRoleUnassignRolesRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreRoleUnassignRoles(CoreRoleUnassignRolesRequest coreRoleUnassignRolesRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreRoleUnassignRolesWithHttpInfo(coreRoleUnassignRolesRequest);
        return localVarResp.getData();
    }

    /**
     * Manual role unassignments.
     * Manual role unassignments.
     * @param coreRoleUnassignRolesRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreRoleUnassignRolesWithHttpInfo(CoreRoleUnassignRolesRequest coreRoleUnassignRolesRequest) throws ApiException {
        okhttp3.Call localVarCall = coreRoleUnassignRolesValidateBeforeCall(coreRoleUnassignRolesRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Manual role unassignments. (asynchronously)
     * Manual role unassignments.
     * @param coreRoleUnassignRolesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreRoleUnassignRolesAsync(CoreRoleUnassignRolesRequest coreRoleUnassignRolesRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreRoleUnassignRolesValidateBeforeCall(coreRoleUnassignRolesRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreSearchGetRelevantUsers
     * @param coreSearchGetRelevantUsersRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreSearchGetRelevantUsersCall(CoreSearchGetRelevantUsersRequest coreSearchGetRelevantUsersRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreSearchGetRelevantUsersRequest;

        // create path and map variables
        String localVarPath = "/core_search_get_relevant_users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreSearchGetRelevantUsersValidateBeforeCall(CoreSearchGetRelevantUsersRequest coreSearchGetRelevantUsersRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreSearchGetRelevantUsersRequest' is set
        if (coreSearchGetRelevantUsersRequest == null) {
            throw new ApiException("Missing the required parameter 'coreSearchGetRelevantUsersRequest' when calling coreSearchGetRelevantUsers(Async)");
        }

        return coreSearchGetRelevantUsersCall(coreSearchGetRelevantUsersRequest, _callback);

    }

    /**
     * Gets relevant users for a search request.
     * Gets relevant users for a search request.
     * @param coreSearchGetRelevantUsersRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreSearchGetRelevantUsers(CoreSearchGetRelevantUsersRequest coreSearchGetRelevantUsersRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreSearchGetRelevantUsersWithHttpInfo(coreSearchGetRelevantUsersRequest);
        return localVarResp.getData();
    }

    /**
     * Gets relevant users for a search request.
     * Gets relevant users for a search request.
     * @param coreSearchGetRelevantUsersRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreSearchGetRelevantUsersWithHttpInfo(CoreSearchGetRelevantUsersRequest coreSearchGetRelevantUsersRequest) throws ApiException {
        okhttp3.Call localVarCall = coreSearchGetRelevantUsersValidateBeforeCall(coreSearchGetRelevantUsersRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets relevant users for a search request. (asynchronously)
     * Gets relevant users for a search request.
     * @param coreSearchGetRelevantUsersRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreSearchGetRelevantUsersAsync(CoreSearchGetRelevantUsersRequest coreSearchGetRelevantUsersRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreSearchGetRelevantUsersValidateBeforeCall(coreSearchGetRelevantUsersRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreSearchGetResults
     * @param coreSearchGetResultsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreSearchGetResultsCall(CoreSearchGetResultsRequest coreSearchGetResultsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreSearchGetResultsRequest;

        // create path and map variables
        String localVarPath = "/core_search_get_results";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreSearchGetResultsValidateBeforeCall(CoreSearchGetResultsRequest coreSearchGetResultsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreSearchGetResultsRequest' is set
        if (coreSearchGetResultsRequest == null) {
            throw new ApiException("Missing the required parameter 'coreSearchGetResultsRequest' when calling coreSearchGetResults(Async)");
        }

        return coreSearchGetResultsCall(coreSearchGetResultsRequest, _callback);

    }

    /**
     * Get search results.
     * Get search results.
     * @param coreSearchGetResultsRequest  (required)
     * @return CoreSearchGetResults200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreSearchGetResults200Response coreSearchGetResults(CoreSearchGetResultsRequest coreSearchGetResultsRequest) throws ApiException {
        ApiResponse<CoreSearchGetResults200Response> localVarResp = coreSearchGetResultsWithHttpInfo(coreSearchGetResultsRequest);
        return localVarResp.getData();
    }

    /**
     * Get search results.
     * Get search results.
     * @param coreSearchGetResultsRequest  (required)
     * @return ApiResponse&lt;CoreSearchGetResults200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreSearchGetResults200Response> coreSearchGetResultsWithHttpInfo(CoreSearchGetResultsRequest coreSearchGetResultsRequest) throws ApiException {
        okhttp3.Call localVarCall = coreSearchGetResultsValidateBeforeCall(coreSearchGetResultsRequest, null);
        Type localVarReturnType = new TypeToken<CoreSearchGetResults200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get search results. (asynchronously)
     * Get search results.
     * @param coreSearchGetResultsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreSearchGetResultsAsync(CoreSearchGetResultsRequest coreSearchGetResultsRequest, final ApiCallback<CoreSearchGetResults200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreSearchGetResultsValidateBeforeCall(coreSearchGetResultsRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreSearchGetResults200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreSearchGetSearchAreasList
     * @param coreSearchGetSearchAreasListRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreSearchGetSearchAreasListCall(CoreSearchGetSearchAreasListRequest coreSearchGetSearchAreasListRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreSearchGetSearchAreasListRequest;

        // create path and map variables
        String localVarPath = "/core_search_get_search_areas_list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreSearchGetSearchAreasListValidateBeforeCall(CoreSearchGetSearchAreasListRequest coreSearchGetSearchAreasListRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreSearchGetSearchAreasListRequest' is set
        if (coreSearchGetSearchAreasListRequest == null) {
            throw new ApiException("Missing the required parameter 'coreSearchGetSearchAreasListRequest' when calling coreSearchGetSearchAreasList(Async)");
        }

        return coreSearchGetSearchAreasListCall(coreSearchGetSearchAreasListRequest, _callback);

    }

    /**
     * Get search areas.
     * Get search areas.
     * @param coreSearchGetSearchAreasListRequest  (required)
     * @return CoreSearchGetSearchAreasList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreSearchGetSearchAreasList200Response coreSearchGetSearchAreasList(CoreSearchGetSearchAreasListRequest coreSearchGetSearchAreasListRequest) throws ApiException {
        ApiResponse<CoreSearchGetSearchAreasList200Response> localVarResp = coreSearchGetSearchAreasListWithHttpInfo(coreSearchGetSearchAreasListRequest);
        return localVarResp.getData();
    }

    /**
     * Get search areas.
     * Get search areas.
     * @param coreSearchGetSearchAreasListRequest  (required)
     * @return ApiResponse&lt;CoreSearchGetSearchAreasList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreSearchGetSearchAreasList200Response> coreSearchGetSearchAreasListWithHttpInfo(CoreSearchGetSearchAreasListRequest coreSearchGetSearchAreasListRequest) throws ApiException {
        okhttp3.Call localVarCall = coreSearchGetSearchAreasListValidateBeforeCall(coreSearchGetSearchAreasListRequest, null);
        Type localVarReturnType = new TypeToken<CoreSearchGetSearchAreasList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get search areas. (asynchronously)
     * Get search areas.
     * @param coreSearchGetSearchAreasListRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreSearchGetSearchAreasListAsync(CoreSearchGetSearchAreasListRequest coreSearchGetSearchAreasListRequest, final ApiCallback<CoreSearchGetSearchAreasList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreSearchGetSearchAreasListValidateBeforeCall(coreSearchGetSearchAreasListRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreSearchGetSearchAreasList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreSearchGetTopResults
     * @param coreSearchGetTopResultsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreSearchGetTopResultsCall(CoreSearchGetTopResultsRequest coreSearchGetTopResultsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreSearchGetTopResultsRequest;

        // create path and map variables
        String localVarPath = "/core_search_get_top_results";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreSearchGetTopResultsValidateBeforeCall(CoreSearchGetTopResultsRequest coreSearchGetTopResultsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreSearchGetTopResultsRequest' is set
        if (coreSearchGetTopResultsRequest == null) {
            throw new ApiException("Missing the required parameter 'coreSearchGetTopResultsRequest' when calling coreSearchGetTopResults(Async)");
        }

        return coreSearchGetTopResultsCall(coreSearchGetTopResultsRequest, _callback);

    }

    /**
     * Get top search results.
     * Get top search results.
     * @param coreSearchGetTopResultsRequest  (required)
     * @return CoreSearchGetTopResults200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreSearchGetTopResults200Response coreSearchGetTopResults(CoreSearchGetTopResultsRequest coreSearchGetTopResultsRequest) throws ApiException {
        ApiResponse<CoreSearchGetTopResults200Response> localVarResp = coreSearchGetTopResultsWithHttpInfo(coreSearchGetTopResultsRequest);
        return localVarResp.getData();
    }

    /**
     * Get top search results.
     * Get top search results.
     * @param coreSearchGetTopResultsRequest  (required)
     * @return ApiResponse&lt;CoreSearchGetTopResults200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreSearchGetTopResults200Response> coreSearchGetTopResultsWithHttpInfo(CoreSearchGetTopResultsRequest coreSearchGetTopResultsRequest) throws ApiException {
        okhttp3.Call localVarCall = coreSearchGetTopResultsValidateBeforeCall(coreSearchGetTopResultsRequest, null);
        Type localVarReturnType = new TypeToken<CoreSearchGetTopResults200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get top search results. (asynchronously)
     * Get top search results.
     * @param coreSearchGetTopResultsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreSearchGetTopResultsAsync(CoreSearchGetTopResultsRequest coreSearchGetTopResultsRequest, final ApiCallback<CoreSearchGetTopResults200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreSearchGetTopResultsValidateBeforeCall(coreSearchGetTopResultsRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreSearchGetTopResults200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreSearchViewResults
     * @param coreSearchViewResultsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreSearchViewResultsCall(CoreSearchViewResultsRequest coreSearchViewResultsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreSearchViewResultsRequest;

        // create path and map variables
        String localVarPath = "/core_search_view_results";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreSearchViewResultsValidateBeforeCall(CoreSearchViewResultsRequest coreSearchViewResultsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreSearchViewResultsRequest' is set
        if (coreSearchViewResultsRequest == null) {
            throw new ApiException("Missing the required parameter 'coreSearchViewResultsRequest' when calling coreSearchViewResults(Async)");
        }

        return coreSearchViewResultsCall(coreSearchViewResultsRequest, _callback);

    }

    /**
     * Trigger view search results event.
     * Trigger view search results event.
     * @param coreSearchViewResultsRequest  (required)
     * @return CoreCalendarDeleteSubscription200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreCalendarDeleteSubscription200Response coreSearchViewResults(CoreSearchViewResultsRequest coreSearchViewResultsRequest) throws ApiException {
        ApiResponse<CoreCalendarDeleteSubscription200Response> localVarResp = coreSearchViewResultsWithHttpInfo(coreSearchViewResultsRequest);
        return localVarResp.getData();
    }

    /**
     * Trigger view search results event.
     * Trigger view search results event.
     * @param coreSearchViewResultsRequest  (required)
     * @return ApiResponse&lt;CoreCalendarDeleteSubscription200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreCalendarDeleteSubscription200Response> coreSearchViewResultsWithHttpInfo(CoreSearchViewResultsRequest coreSearchViewResultsRequest) throws ApiException {
        okhttp3.Call localVarCall = coreSearchViewResultsValidateBeforeCall(coreSearchViewResultsRequest, null);
        Type localVarReturnType = new TypeToken<CoreCalendarDeleteSubscription200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Trigger view search results event. (asynchronously)
     * Trigger view search results event.
     * @param coreSearchViewResultsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreSearchViewResultsAsync(CoreSearchViewResultsRequest coreSearchViewResultsRequest, final ApiCallback<CoreCalendarDeleteSubscription200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreSearchViewResultsValidateBeforeCall(coreSearchViewResultsRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreCalendarDeleteSubscription200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreSessionTimeRemaining
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreSessionTimeRemainingCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/core_session_time_remaining";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreSessionTimeRemainingValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return coreSessionTimeRemainingCall(_callback);

    }

    /**
     * Count the seconds remaining in this session
     * Count the seconds remaining in this session
     * @return CoreSessionTimeRemaining200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreSessionTimeRemaining200Response coreSessionTimeRemaining() throws ApiException {
        ApiResponse<CoreSessionTimeRemaining200Response> localVarResp = coreSessionTimeRemainingWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Count the seconds remaining in this session
     * Count the seconds remaining in this session
     * @return ApiResponse&lt;CoreSessionTimeRemaining200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreSessionTimeRemaining200Response> coreSessionTimeRemainingWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = coreSessionTimeRemainingValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<CoreSessionTimeRemaining200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Count the seconds remaining in this session (asynchronously)
     * Count the seconds remaining in this session
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreSessionTimeRemainingAsync(final ApiCallback<CoreSessionTimeRemaining200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreSessionTimeRemainingValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<CoreSessionTimeRemaining200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreSessionTouch
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> result </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreSessionTouchCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/core_session_touch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreSessionTouchValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return coreSessionTouchCall(_callback);

    }

    /**
     * Keep the users session alive
     * Keep the users session alive
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> result </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreSessionTouch() throws ApiException {
        ApiResponse<Object> localVarResp = coreSessionTouchWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Keep the users session alive
     * Keep the users session alive
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> result </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreSessionTouchWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = coreSessionTouchValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Keep the users session alive (asynchronously)
     * Keep the users session alive
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> result </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreSessionTouchAsync(final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreSessionTouchValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreTableGetDynamicTableContent
     * @param coreTableGetDynamicTableContentRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreTableGetDynamicTableContentCall(CoreTableGetDynamicTableContentRequest coreTableGetDynamicTableContentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreTableGetDynamicTableContentRequest;

        // create path and map variables
        String localVarPath = "/core_table_get_dynamic_table_content";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreTableGetDynamicTableContentValidateBeforeCall(CoreTableGetDynamicTableContentRequest coreTableGetDynamicTableContentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreTableGetDynamicTableContentRequest' is set
        if (coreTableGetDynamicTableContentRequest == null) {
            throw new ApiException("Missing the required parameter 'coreTableGetDynamicTableContentRequest' when calling coreTableGetDynamicTableContent(Async)");
        }

        return coreTableGetDynamicTableContentCall(coreTableGetDynamicTableContentRequest, _callback);

    }

    /**
     * Get the dynamic table content raw html
     * Get the dynamic table content raw html
     * @param coreTableGetDynamicTableContentRequest  (required)
     * @return CoreTableGetDynamicTableContent200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreTableGetDynamicTableContent200Response coreTableGetDynamicTableContent(CoreTableGetDynamicTableContentRequest coreTableGetDynamicTableContentRequest) throws ApiException {
        ApiResponse<CoreTableGetDynamicTableContent200Response> localVarResp = coreTableGetDynamicTableContentWithHttpInfo(coreTableGetDynamicTableContentRequest);
        return localVarResp.getData();
    }

    /**
     * Get the dynamic table content raw html
     * Get the dynamic table content raw html
     * @param coreTableGetDynamicTableContentRequest  (required)
     * @return ApiResponse&lt;CoreTableGetDynamicTableContent200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreTableGetDynamicTableContent200Response> coreTableGetDynamicTableContentWithHttpInfo(CoreTableGetDynamicTableContentRequest coreTableGetDynamicTableContentRequest) throws ApiException {
        okhttp3.Call localVarCall = coreTableGetDynamicTableContentValidateBeforeCall(coreTableGetDynamicTableContentRequest, null);
        Type localVarReturnType = new TypeToken<CoreTableGetDynamicTableContent200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the dynamic table content raw html (asynchronously)
     * Get the dynamic table content raw html
     * @param coreTableGetDynamicTableContentRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreTableGetDynamicTableContentAsync(CoreTableGetDynamicTableContentRequest coreTableGetDynamicTableContentRequest, final ApiCallback<CoreTableGetDynamicTableContent200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreTableGetDynamicTableContentValidateBeforeCall(coreTableGetDynamicTableContentRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreTableGetDynamicTableContent200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreTagGetTagAreas
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreTagGetTagAreasCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/core_tag_get_tag_areas";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreTagGetTagAreasValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return coreTagGetTagAreasCall(_callback);

    }

    /**
     * Retrieves existing tag areas.
     * Retrieves existing tag areas.
     * @return CoreTagGetTagAreas200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreTagGetTagAreas200Response coreTagGetTagAreas() throws ApiException {
        ApiResponse<CoreTagGetTagAreas200Response> localVarResp = coreTagGetTagAreasWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Retrieves existing tag areas.
     * Retrieves existing tag areas.
     * @return ApiResponse&lt;CoreTagGetTagAreas200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreTagGetTagAreas200Response> coreTagGetTagAreasWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = coreTagGetTagAreasValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<CoreTagGetTagAreas200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves existing tag areas. (asynchronously)
     * Retrieves existing tag areas.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreTagGetTagAreasAsync(final ApiCallback<CoreTagGetTagAreas200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreTagGetTagAreasValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<CoreTagGetTagAreas200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreTagGetTagCloud
     * @param coreTagGetTagCloudRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreTagGetTagCloudCall(CoreTagGetTagCloudRequest coreTagGetTagCloudRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreTagGetTagCloudRequest;

        // create path and map variables
        String localVarPath = "/core_tag_get_tag_cloud";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreTagGetTagCloudValidateBeforeCall(CoreTagGetTagCloudRequest coreTagGetTagCloudRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreTagGetTagCloudRequest' is set
        if (coreTagGetTagCloudRequest == null) {
            throw new ApiException("Missing the required parameter 'coreTagGetTagCloudRequest' when calling coreTagGetTagCloud(Async)");
        }

        return coreTagGetTagCloudCall(coreTagGetTagCloudRequest, _callback);

    }

    /**
     * Retrieves a tag cloud for the given collection and/or query search.
     * Retrieves a tag cloud for the given collection and/or query search.
     * @param coreTagGetTagCloudRequest  (required)
     * @return CoreTagGetTagCloud200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreTagGetTagCloud200Response coreTagGetTagCloud(CoreTagGetTagCloudRequest coreTagGetTagCloudRequest) throws ApiException {
        ApiResponse<CoreTagGetTagCloud200Response> localVarResp = coreTagGetTagCloudWithHttpInfo(coreTagGetTagCloudRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieves a tag cloud for the given collection and/or query search.
     * Retrieves a tag cloud for the given collection and/or query search.
     * @param coreTagGetTagCloudRequest  (required)
     * @return ApiResponse&lt;CoreTagGetTagCloud200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreTagGetTagCloud200Response> coreTagGetTagCloudWithHttpInfo(CoreTagGetTagCloudRequest coreTagGetTagCloudRequest) throws ApiException {
        okhttp3.Call localVarCall = coreTagGetTagCloudValidateBeforeCall(coreTagGetTagCloudRequest, null);
        Type localVarReturnType = new TypeToken<CoreTagGetTagCloud200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a tag cloud for the given collection and/or query search. (asynchronously)
     * Retrieves a tag cloud for the given collection and/or query search.
     * @param coreTagGetTagCloudRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreTagGetTagCloudAsync(CoreTagGetTagCloudRequest coreTagGetTagCloudRequest, final ApiCallback<CoreTagGetTagCloud200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreTagGetTagCloudValidateBeforeCall(coreTagGetTagCloudRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreTagGetTagCloud200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreTagGetTagCollections
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreTagGetTagCollectionsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/core_tag_get_tag_collections";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreTagGetTagCollectionsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return coreTagGetTagCollectionsCall(_callback);

    }

    /**
     * Retrieves existing tag collections.
     * Retrieves existing tag collections.
     * @return CoreTagGetTagCollections200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreTagGetTagCollections200Response coreTagGetTagCollections() throws ApiException {
        ApiResponse<CoreTagGetTagCollections200Response> localVarResp = coreTagGetTagCollectionsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Retrieves existing tag collections.
     * Retrieves existing tag collections.
     * @return ApiResponse&lt;CoreTagGetTagCollections200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreTagGetTagCollections200Response> coreTagGetTagCollectionsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = coreTagGetTagCollectionsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<CoreTagGetTagCollections200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves existing tag collections. (asynchronously)
     * Retrieves existing tag collections.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreTagGetTagCollectionsAsync(final ApiCallback<CoreTagGetTagCollections200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreTagGetTagCollectionsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<CoreTagGetTagCollections200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreTagGetTagindex
     * @param coreTagGetTagindexRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> tag index </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreTagGetTagindexCall(CoreTagGetTagindexRequest coreTagGetTagindexRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreTagGetTagindexRequest;

        // create path and map variables
        String localVarPath = "/core_tag_get_tagindex";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreTagGetTagindexValidateBeforeCall(CoreTagGetTagindexRequest coreTagGetTagindexRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreTagGetTagindexRequest' is set
        if (coreTagGetTagindexRequest == null) {
            throw new ApiException("Missing the required parameter 'coreTagGetTagindexRequest' when calling coreTagGetTagindex(Async)");
        }

        return coreTagGetTagindexCall(coreTagGetTagindexRequest, _callback);

    }

    /**
     * Gets tag index page for one tag and one tag area
     * Gets tag index page for one tag and one tag area
     * @param coreTagGetTagindexRequest  (required)
     * @return CoreTagGetTagindex200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> tag index </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreTagGetTagindex200Response coreTagGetTagindex(CoreTagGetTagindexRequest coreTagGetTagindexRequest) throws ApiException {
        ApiResponse<CoreTagGetTagindex200Response> localVarResp = coreTagGetTagindexWithHttpInfo(coreTagGetTagindexRequest);
        return localVarResp.getData();
    }

    /**
     * Gets tag index page for one tag and one tag area
     * Gets tag index page for one tag and one tag area
     * @param coreTagGetTagindexRequest  (required)
     * @return ApiResponse&lt;CoreTagGetTagindex200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> tag index </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreTagGetTagindex200Response> coreTagGetTagindexWithHttpInfo(CoreTagGetTagindexRequest coreTagGetTagindexRequest) throws ApiException {
        okhttp3.Call localVarCall = coreTagGetTagindexValidateBeforeCall(coreTagGetTagindexRequest, null);
        Type localVarReturnType = new TypeToken<CoreTagGetTagindex200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets tag index page for one tag and one tag area (asynchronously)
     * Gets tag index page for one tag and one tag area
     * @param coreTagGetTagindexRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> tag index </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreTagGetTagindexAsync(CoreTagGetTagindexRequest coreTagGetTagindexRequest, final ApiCallback<CoreTagGetTagindex200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreTagGetTagindexValidateBeforeCall(coreTagGetTagindexRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreTagGetTagindex200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreTagGetTagindexPerArea
     * @param coreTagGetTagindexPerAreaRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreTagGetTagindexPerAreaCall(CoreTagGetTagindexPerAreaRequest coreTagGetTagindexPerAreaRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreTagGetTagindexPerAreaRequest;

        // create path and map variables
        String localVarPath = "/core_tag_get_tagindex_per_area";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreTagGetTagindexPerAreaValidateBeforeCall(CoreTagGetTagindexPerAreaRequest coreTagGetTagindexPerAreaRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreTagGetTagindexPerAreaRequest' is set
        if (coreTagGetTagindexPerAreaRequest == null) {
            throw new ApiException("Missing the required parameter 'coreTagGetTagindexPerAreaRequest' when calling coreTagGetTagindexPerArea(Async)");
        }

        return coreTagGetTagindexPerAreaCall(coreTagGetTagindexPerAreaRequest, _callback);

    }

    /**
     * Gets tag index page per different areas.
     * Gets tag index page per different areas.
     * @param coreTagGetTagindexPerAreaRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreTagGetTagindexPerArea(CoreTagGetTagindexPerAreaRequest coreTagGetTagindexPerAreaRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreTagGetTagindexPerAreaWithHttpInfo(coreTagGetTagindexPerAreaRequest);
        return localVarResp.getData();
    }

    /**
     * Gets tag index page per different areas.
     * Gets tag index page per different areas.
     * @param coreTagGetTagindexPerAreaRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreTagGetTagindexPerAreaWithHttpInfo(CoreTagGetTagindexPerAreaRequest coreTagGetTagindexPerAreaRequest) throws ApiException {
        okhttp3.Call localVarCall = coreTagGetTagindexPerAreaValidateBeforeCall(coreTagGetTagindexPerAreaRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets tag index page per different areas. (asynchronously)
     * Gets tag index page per different areas.
     * @param coreTagGetTagindexPerAreaRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreTagGetTagindexPerAreaAsync(CoreTagGetTagindexPerAreaRequest coreTagGetTagindexPerAreaRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreTagGetTagindexPerAreaValidateBeforeCall(coreTagGetTagindexPerAreaRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreTagGetTags
     * @param coreTagGetTagsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreTagGetTagsCall(CoreTagGetTagsRequest coreTagGetTagsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreTagGetTagsRequest;

        // create path and map variables
        String localVarPath = "/core_tag_get_tags";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreTagGetTagsValidateBeforeCall(CoreTagGetTagsRequest coreTagGetTagsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreTagGetTagsRequest' is set
        if (coreTagGetTagsRequest == null) {
            throw new ApiException("Missing the required parameter 'coreTagGetTagsRequest' when calling coreTagGetTags(Async)");
        }

        return coreTagGetTagsCall(coreTagGetTagsRequest, _callback);

    }

    /**
     * Gets tags by their ids
     * Gets tags by their ids
     * @param coreTagGetTagsRequest  (required)
     * @return CoreTagGetTags200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreTagGetTags200Response coreTagGetTags(CoreTagGetTagsRequest coreTagGetTagsRequest) throws ApiException {
        ApiResponse<CoreTagGetTags200Response> localVarResp = coreTagGetTagsWithHttpInfo(coreTagGetTagsRequest);
        return localVarResp.getData();
    }

    /**
     * Gets tags by their ids
     * Gets tags by their ids
     * @param coreTagGetTagsRequest  (required)
     * @return ApiResponse&lt;CoreTagGetTags200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreTagGetTags200Response> coreTagGetTagsWithHttpInfo(CoreTagGetTagsRequest coreTagGetTagsRequest) throws ApiException {
        okhttp3.Call localVarCall = coreTagGetTagsValidateBeforeCall(coreTagGetTagsRequest, null);
        Type localVarReturnType = new TypeToken<CoreTagGetTags200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets tags by their ids (asynchronously)
     * Gets tags by their ids
     * @param coreTagGetTagsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreTagGetTagsAsync(CoreTagGetTagsRequest coreTagGetTagsRequest, final ApiCallback<CoreTagGetTags200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreTagGetTagsValidateBeforeCall(coreTagGetTagsRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreTagGetTags200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreTagUpdateTags
     * @param coreTagUpdateTagsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreTagUpdateTagsCall(CoreTagUpdateTagsRequest coreTagUpdateTagsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreTagUpdateTagsRequest;

        // create path and map variables
        String localVarPath = "/core_tag_update_tags";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreTagUpdateTagsValidateBeforeCall(CoreTagUpdateTagsRequest coreTagUpdateTagsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreTagUpdateTagsRequest' is set
        if (coreTagUpdateTagsRequest == null) {
            throw new ApiException("Missing the required parameter 'coreTagUpdateTagsRequest' when calling coreTagUpdateTags(Async)");
        }

        return coreTagUpdateTagsCall(coreTagUpdateTagsRequest, _callback);

    }

    /**
     * Updates tags
     * Updates tags
     * @param coreTagUpdateTagsRequest  (required)
     * @return CoreCohortAddCohortMembers200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreCohortAddCohortMembers200Response coreTagUpdateTags(CoreTagUpdateTagsRequest coreTagUpdateTagsRequest) throws ApiException {
        ApiResponse<CoreCohortAddCohortMembers200Response> localVarResp = coreTagUpdateTagsWithHttpInfo(coreTagUpdateTagsRequest);
        return localVarResp.getData();
    }

    /**
     * Updates tags
     * Updates tags
     * @param coreTagUpdateTagsRequest  (required)
     * @return ApiResponse&lt;CoreCohortAddCohortMembers200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreCohortAddCohortMembers200Response> coreTagUpdateTagsWithHttpInfo(CoreTagUpdateTagsRequest coreTagUpdateTagsRequest) throws ApiException {
        okhttp3.Call localVarCall = coreTagUpdateTagsValidateBeforeCall(coreTagUpdateTagsRequest, null);
        Type localVarReturnType = new TypeToken<CoreCohortAddCohortMembers200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates tags (asynchronously)
     * Updates tags
     * @param coreTagUpdateTagsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreTagUpdateTagsAsync(CoreTagUpdateTagsRequest coreTagUpdateTagsRequest, final ApiCallback<CoreCohortAddCohortMembers200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreTagUpdateTagsValidateBeforeCall(coreTagUpdateTagsRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreCohortAddCohortMembers200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreUpdateInplaceEditable
     * @param coreUpdateInplaceEditableRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreUpdateInplaceEditableCall(CoreUpdateInplaceEditableRequest coreUpdateInplaceEditableRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreUpdateInplaceEditableRequest;

        // create path and map variables
        String localVarPath = "/core_update_inplace_editable";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreUpdateInplaceEditableValidateBeforeCall(CoreUpdateInplaceEditableRequest coreUpdateInplaceEditableRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreUpdateInplaceEditableRequest' is set
        if (coreUpdateInplaceEditableRequest == null) {
            throw new ApiException("Missing the required parameter 'coreUpdateInplaceEditableRequest' when calling coreUpdateInplaceEditable(Async)");
        }

        return coreUpdateInplaceEditableCall(coreUpdateInplaceEditableRequest, _callback);

    }

    /**
     * Generic service to update title
     * Generic service to update title
     * @param coreUpdateInplaceEditableRequest  (required)
     * @return CoreUpdateInplaceEditable200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreUpdateInplaceEditable200Response coreUpdateInplaceEditable(CoreUpdateInplaceEditableRequest coreUpdateInplaceEditableRequest) throws ApiException {
        ApiResponse<CoreUpdateInplaceEditable200Response> localVarResp = coreUpdateInplaceEditableWithHttpInfo(coreUpdateInplaceEditableRequest);
        return localVarResp.getData();
    }

    /**
     * Generic service to update title
     * Generic service to update title
     * @param coreUpdateInplaceEditableRequest  (required)
     * @return ApiResponse&lt;CoreUpdateInplaceEditable200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreUpdateInplaceEditable200Response> coreUpdateInplaceEditableWithHttpInfo(CoreUpdateInplaceEditableRequest coreUpdateInplaceEditableRequest) throws ApiException {
        okhttp3.Call localVarCall = coreUpdateInplaceEditableValidateBeforeCall(coreUpdateInplaceEditableRequest, null);
        Type localVarReturnType = new TypeToken<CoreUpdateInplaceEditable200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generic service to update title (asynchronously)
     * Generic service to update title
     * @param coreUpdateInplaceEditableRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreUpdateInplaceEditableAsync(CoreUpdateInplaceEditableRequest coreUpdateInplaceEditableRequest, final ApiCallback<CoreUpdateInplaceEditable200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreUpdateInplaceEditableValidateBeforeCall(coreUpdateInplaceEditableRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreUpdateInplaceEditable200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreUserAddUserDevice
     * @param coreUserAddUserDeviceRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreUserAddUserDeviceCall(CoreUserAddUserDeviceRequest coreUserAddUserDeviceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreUserAddUserDeviceRequest;

        // create path and map variables
        String localVarPath = "/core_user_add_user_device";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreUserAddUserDeviceValidateBeforeCall(CoreUserAddUserDeviceRequest coreUserAddUserDeviceRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreUserAddUserDeviceRequest' is set
        if (coreUserAddUserDeviceRequest == null) {
            throw new ApiException("Missing the required parameter 'coreUserAddUserDeviceRequest' when calling coreUserAddUserDevice(Async)");
        }

        return coreUserAddUserDeviceCall(coreUserAddUserDeviceRequest, _callback);

    }

    /**
     * Store mobile user devices information for PUSH Notifications.
     * Store mobile user devices information for PUSH Notifications.
     * @param coreUserAddUserDeviceRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreUserAddUserDevice(CoreUserAddUserDeviceRequest coreUserAddUserDeviceRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreUserAddUserDeviceWithHttpInfo(coreUserAddUserDeviceRequest);
        return localVarResp.getData();
    }

    /**
     * Store mobile user devices information for PUSH Notifications.
     * Store mobile user devices information for PUSH Notifications.
     * @param coreUserAddUserDeviceRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreUserAddUserDeviceWithHttpInfo(CoreUserAddUserDeviceRequest coreUserAddUserDeviceRequest) throws ApiException {
        okhttp3.Call localVarCall = coreUserAddUserDeviceValidateBeforeCall(coreUserAddUserDeviceRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Store mobile user devices information for PUSH Notifications. (asynchronously)
     * Store mobile user devices information for PUSH Notifications.
     * @param coreUserAddUserDeviceRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreUserAddUserDeviceAsync(CoreUserAddUserDeviceRequest coreUserAddUserDeviceRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreUserAddUserDeviceValidateBeforeCall(coreUserAddUserDeviceRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreUserAddUserPrivateFiles
     * @param coreUserAddUserPrivateFilesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreUserAddUserPrivateFilesCall(CoreUserAddUserPrivateFilesRequest coreUserAddUserPrivateFilesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreUserAddUserPrivateFilesRequest;

        // create path and map variables
        String localVarPath = "/core_user_add_user_private_files";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreUserAddUserPrivateFilesValidateBeforeCall(CoreUserAddUserPrivateFilesRequest coreUserAddUserPrivateFilesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreUserAddUserPrivateFilesRequest' is set
        if (coreUserAddUserPrivateFilesRequest == null) {
            throw new ApiException("Missing the required parameter 'coreUserAddUserPrivateFilesRequest' when calling coreUserAddUserPrivateFiles(Async)");
        }

        return coreUserAddUserPrivateFilesCall(coreUserAddUserPrivateFilesRequest, _callback);

    }

    /**
     * Copy files from a draft area to users private files area.
     * Copy files from a draft area to users private files area.
     * @param coreUserAddUserPrivateFilesRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreUserAddUserPrivateFiles(CoreUserAddUserPrivateFilesRequest coreUserAddUserPrivateFilesRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreUserAddUserPrivateFilesWithHttpInfo(coreUserAddUserPrivateFilesRequest);
        return localVarResp.getData();
    }

    /**
     * Copy files from a draft area to users private files area.
     * Copy files from a draft area to users private files area.
     * @param coreUserAddUserPrivateFilesRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreUserAddUserPrivateFilesWithHttpInfo(CoreUserAddUserPrivateFilesRequest coreUserAddUserPrivateFilesRequest) throws ApiException {
        okhttp3.Call localVarCall = coreUserAddUserPrivateFilesValidateBeforeCall(coreUserAddUserPrivateFilesRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Copy files from a draft area to users private files area. (asynchronously)
     * Copy files from a draft area to users private files area.
     * @param coreUserAddUserPrivateFilesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreUserAddUserPrivateFilesAsync(CoreUserAddUserPrivateFilesRequest coreUserAddUserPrivateFilesRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreUserAddUserPrivateFilesValidateBeforeCall(coreUserAddUserPrivateFilesRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreUserAgreeSitePolicy
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreUserAgreeSitePolicyCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/core_user_agree_site_policy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreUserAgreeSitePolicyValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return coreUserAgreeSitePolicyCall(_callback);

    }

    /**
     * Agree the site policy for the current user.
     * Agree the site policy for the current user.
     * @return CoreUserAgreeSitePolicy200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreUserAgreeSitePolicy200Response coreUserAgreeSitePolicy() throws ApiException {
        ApiResponse<CoreUserAgreeSitePolicy200Response> localVarResp = coreUserAgreeSitePolicyWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Agree the site policy for the current user.
     * Agree the site policy for the current user.
     * @return ApiResponse&lt;CoreUserAgreeSitePolicy200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreUserAgreeSitePolicy200Response> coreUserAgreeSitePolicyWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = coreUserAgreeSitePolicyValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<CoreUserAgreeSitePolicy200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Agree the site policy for the current user. (asynchronously)
     * Agree the site policy for the current user.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreUserAgreeSitePolicyAsync(final ApiCallback<CoreUserAgreeSitePolicy200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreUserAgreeSitePolicyValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<CoreUserAgreeSitePolicy200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreUserCreateUsers
     * @param coreUserCreateUsersRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreUserCreateUsersCall(CoreUserCreateUsersRequest coreUserCreateUsersRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreUserCreateUsersRequest;

        // create path and map variables
        String localVarPath = "/core_user_create_users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreUserCreateUsersValidateBeforeCall(CoreUserCreateUsersRequest coreUserCreateUsersRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreUserCreateUsersRequest' is set
        if (coreUserCreateUsersRequest == null) {
            throw new ApiException("Missing the required parameter 'coreUserCreateUsersRequest' when calling coreUserCreateUsers(Async)");
        }

        return coreUserCreateUsersCall(coreUserCreateUsersRequest, _callback);

    }

    /**
     * Create users.
     * Create users.
     * @param coreUserCreateUsersRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreUserCreateUsers(CoreUserCreateUsersRequest coreUserCreateUsersRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreUserCreateUsersWithHttpInfo(coreUserCreateUsersRequest);
        return localVarResp.getData();
    }

    /**
     * Create users.
     * Create users.
     * @param coreUserCreateUsersRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreUserCreateUsersWithHttpInfo(CoreUserCreateUsersRequest coreUserCreateUsersRequest) throws ApiException {
        okhttp3.Call localVarCall = coreUserCreateUsersValidateBeforeCall(coreUserCreateUsersRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create users. (asynchronously)
     * Create users.
     * @param coreUserCreateUsersRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreUserCreateUsersAsync(CoreUserCreateUsersRequest coreUserCreateUsersRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreUserCreateUsersValidateBeforeCall(coreUserCreateUsersRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreUserDeleteUsers
     * @param coreUserDeleteUsersRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreUserDeleteUsersCall(CoreUserDeleteUsersRequest coreUserDeleteUsersRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreUserDeleteUsersRequest;

        // create path and map variables
        String localVarPath = "/core_user_delete_users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreUserDeleteUsersValidateBeforeCall(CoreUserDeleteUsersRequest coreUserDeleteUsersRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreUserDeleteUsersRequest' is set
        if (coreUserDeleteUsersRequest == null) {
            throw new ApiException("Missing the required parameter 'coreUserDeleteUsersRequest' when calling coreUserDeleteUsers(Async)");
        }

        return coreUserDeleteUsersCall(coreUserDeleteUsersRequest, _callback);

    }

    /**
     * Delete users.
     * Delete users.
     * @param coreUserDeleteUsersRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreUserDeleteUsers(CoreUserDeleteUsersRequest coreUserDeleteUsersRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreUserDeleteUsersWithHttpInfo(coreUserDeleteUsersRequest);
        return localVarResp.getData();
    }

    /**
     * Delete users.
     * Delete users.
     * @param coreUserDeleteUsersRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreUserDeleteUsersWithHttpInfo(CoreUserDeleteUsersRequest coreUserDeleteUsersRequest) throws ApiException {
        okhttp3.Call localVarCall = coreUserDeleteUsersValidateBeforeCall(coreUserDeleteUsersRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete users. (asynchronously)
     * Delete users.
     * @param coreUserDeleteUsersRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreUserDeleteUsersAsync(CoreUserDeleteUsersRequest coreUserDeleteUsersRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreUserDeleteUsersValidateBeforeCall(coreUserDeleteUsersRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreUserGetCourseUserProfiles
     * @param coreUserGetCourseUserProfilesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreUserGetCourseUserProfilesCall(CoreUserGetCourseUserProfilesRequest coreUserGetCourseUserProfilesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreUserGetCourseUserProfilesRequest;

        // create path and map variables
        String localVarPath = "/core_user_get_course_user_profiles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreUserGetCourseUserProfilesValidateBeforeCall(CoreUserGetCourseUserProfilesRequest coreUserGetCourseUserProfilesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreUserGetCourseUserProfilesRequest' is set
        if (coreUserGetCourseUserProfilesRequest == null) {
            throw new ApiException("Missing the required parameter 'coreUserGetCourseUserProfilesRequest' when calling coreUserGetCourseUserProfiles(Async)");
        }

        return coreUserGetCourseUserProfilesCall(coreUserGetCourseUserProfilesRequest, _callback);

    }

    /**
     * Get course user profiles (each of the profils matching a course id and a user id),.
     * Get course user profiles (each of the profils matching a course id and a user id),.
     * @param coreUserGetCourseUserProfilesRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreUserGetCourseUserProfiles(CoreUserGetCourseUserProfilesRequest coreUserGetCourseUserProfilesRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreUserGetCourseUserProfilesWithHttpInfo(coreUserGetCourseUserProfilesRequest);
        return localVarResp.getData();
    }

    /**
     * Get course user profiles (each of the profils matching a course id and a user id),.
     * Get course user profiles (each of the profils matching a course id and a user id),.
     * @param coreUserGetCourseUserProfilesRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreUserGetCourseUserProfilesWithHttpInfo(CoreUserGetCourseUserProfilesRequest coreUserGetCourseUserProfilesRequest) throws ApiException {
        okhttp3.Call localVarCall = coreUserGetCourseUserProfilesValidateBeforeCall(coreUserGetCourseUserProfilesRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get course user profiles (each of the profils matching a course id and a user id),. (asynchronously)
     * Get course user profiles (each of the profils matching a course id and a user id),.
     * @param coreUserGetCourseUserProfilesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreUserGetCourseUserProfilesAsync(CoreUserGetCourseUserProfilesRequest coreUserGetCourseUserProfilesRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreUserGetCourseUserProfilesValidateBeforeCall(coreUserGetCourseUserProfilesRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreUserGetPrivateFilesInfo
     * @param coreUserGetPrivateFilesInfoRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreUserGetPrivateFilesInfoCall(CoreUserGetPrivateFilesInfoRequest coreUserGetPrivateFilesInfoRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreUserGetPrivateFilesInfoRequest;

        // create path and map variables
        String localVarPath = "/core_user_get_private_files_info";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreUserGetPrivateFilesInfoValidateBeforeCall(CoreUserGetPrivateFilesInfoRequest coreUserGetPrivateFilesInfoRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreUserGetPrivateFilesInfoRequest' is set
        if (coreUserGetPrivateFilesInfoRequest == null) {
            throw new ApiException("Missing the required parameter 'coreUserGetPrivateFilesInfoRequest' when calling coreUserGetPrivateFilesInfo(Async)");
        }

        return coreUserGetPrivateFilesInfoCall(coreUserGetPrivateFilesInfoRequest, _callback);

    }

    /**
     * Returns general information about files in the user private files area.
     * Returns general information about files in the user private files area.
     * @param coreUserGetPrivateFilesInfoRequest  (required)
     * @return CoreUserGetPrivateFilesInfo200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreUserGetPrivateFilesInfo200Response coreUserGetPrivateFilesInfo(CoreUserGetPrivateFilesInfoRequest coreUserGetPrivateFilesInfoRequest) throws ApiException {
        ApiResponse<CoreUserGetPrivateFilesInfo200Response> localVarResp = coreUserGetPrivateFilesInfoWithHttpInfo(coreUserGetPrivateFilesInfoRequest);
        return localVarResp.getData();
    }

    /**
     * Returns general information about files in the user private files area.
     * Returns general information about files in the user private files area.
     * @param coreUserGetPrivateFilesInfoRequest  (required)
     * @return ApiResponse&lt;CoreUserGetPrivateFilesInfo200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreUserGetPrivateFilesInfo200Response> coreUserGetPrivateFilesInfoWithHttpInfo(CoreUserGetPrivateFilesInfoRequest coreUserGetPrivateFilesInfoRequest) throws ApiException {
        okhttp3.Call localVarCall = coreUserGetPrivateFilesInfoValidateBeforeCall(coreUserGetPrivateFilesInfoRequest, null);
        Type localVarReturnType = new TypeToken<CoreUserGetPrivateFilesInfo200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns general information about files in the user private files area. (asynchronously)
     * Returns general information about files in the user private files area.
     * @param coreUserGetPrivateFilesInfoRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreUserGetPrivateFilesInfoAsync(CoreUserGetPrivateFilesInfoRequest coreUserGetPrivateFilesInfoRequest, final ApiCallback<CoreUserGetPrivateFilesInfo200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreUserGetPrivateFilesInfoValidateBeforeCall(coreUserGetPrivateFilesInfoRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreUserGetPrivateFilesInfo200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreUserGetUserPreferences
     * @param coreUserGetUserPreferencesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreUserGetUserPreferencesCall(CoreUserGetUserPreferencesRequest coreUserGetUserPreferencesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreUserGetUserPreferencesRequest;

        // create path and map variables
        String localVarPath = "/core_user_get_user_preferences";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreUserGetUserPreferencesValidateBeforeCall(CoreUserGetUserPreferencesRequest coreUserGetUserPreferencesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreUserGetUserPreferencesRequest' is set
        if (coreUserGetUserPreferencesRequest == null) {
            throw new ApiException("Missing the required parameter 'coreUserGetUserPreferencesRequest' when calling coreUserGetUserPreferences(Async)");
        }

        return coreUserGetUserPreferencesCall(coreUserGetUserPreferencesRequest, _callback);

    }

    /**
     * Return user preferences.
     * Return user preferences.
     * @param coreUserGetUserPreferencesRequest  (required)
     * @return CoreUserGetUserPreferences200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreUserGetUserPreferences200Response coreUserGetUserPreferences(CoreUserGetUserPreferencesRequest coreUserGetUserPreferencesRequest) throws ApiException {
        ApiResponse<CoreUserGetUserPreferences200Response> localVarResp = coreUserGetUserPreferencesWithHttpInfo(coreUserGetUserPreferencesRequest);
        return localVarResp.getData();
    }

    /**
     * Return user preferences.
     * Return user preferences.
     * @param coreUserGetUserPreferencesRequest  (required)
     * @return ApiResponse&lt;CoreUserGetUserPreferences200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreUserGetUserPreferences200Response> coreUserGetUserPreferencesWithHttpInfo(CoreUserGetUserPreferencesRequest coreUserGetUserPreferencesRequest) throws ApiException {
        okhttp3.Call localVarCall = coreUserGetUserPreferencesValidateBeforeCall(coreUserGetUserPreferencesRequest, null);
        Type localVarReturnType = new TypeToken<CoreUserGetUserPreferences200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return user preferences. (asynchronously)
     * Return user preferences.
     * @param coreUserGetUserPreferencesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreUserGetUserPreferencesAsync(CoreUserGetUserPreferencesRequest coreUserGetUserPreferencesRequest, final ApiCallback<CoreUserGetUserPreferences200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreUserGetUserPreferencesValidateBeforeCall(coreUserGetUserPreferencesRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreUserGetUserPreferences200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreUserGetUsers
     * @param coreUserGetUsersRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreUserGetUsersCall(CoreUserGetUsersRequest coreUserGetUsersRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreUserGetUsersRequest;

        // create path and map variables
        String localVarPath = "/core_user_get_users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreUserGetUsersValidateBeforeCall(CoreUserGetUsersRequest coreUserGetUsersRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreUserGetUsersRequest' is set
        if (coreUserGetUsersRequest == null) {
            throw new ApiException("Missing the required parameter 'coreUserGetUsersRequest' when calling coreUserGetUsers(Async)");
        }

        return coreUserGetUsersCall(coreUserGetUsersRequest, _callback);

    }

    /**
     * search for users matching the parameters
     * search for users matching the parameters
     * @param coreUserGetUsersRequest  (required)
     * @return CoreUserGetUsers200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreUserGetUsers200Response coreUserGetUsers(CoreUserGetUsersRequest coreUserGetUsersRequest) throws ApiException {
        ApiResponse<CoreUserGetUsers200Response> localVarResp = coreUserGetUsersWithHttpInfo(coreUserGetUsersRequest);
        return localVarResp.getData();
    }

    /**
     * search for users matching the parameters
     * search for users matching the parameters
     * @param coreUserGetUsersRequest  (required)
     * @return ApiResponse&lt;CoreUserGetUsers200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreUserGetUsers200Response> coreUserGetUsersWithHttpInfo(CoreUserGetUsersRequest coreUserGetUsersRequest) throws ApiException {
        okhttp3.Call localVarCall = coreUserGetUsersValidateBeforeCall(coreUserGetUsersRequest, null);
        Type localVarReturnType = new TypeToken<CoreUserGetUsers200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * search for users matching the parameters (asynchronously)
     * search for users matching the parameters
     * @param coreUserGetUsersRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreUserGetUsersAsync(CoreUserGetUsersRequest coreUserGetUsersRequest, final ApiCallback<CoreUserGetUsers200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreUserGetUsersValidateBeforeCall(coreUserGetUsersRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreUserGetUsers200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreUserGetUsersByField
     * @param coreUserGetUsersByFieldRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreUserGetUsersByFieldCall(CoreUserGetUsersByFieldRequest coreUserGetUsersByFieldRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreUserGetUsersByFieldRequest;

        // create path and map variables
        String localVarPath = "/core_user_get_users_by_field";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreUserGetUsersByFieldValidateBeforeCall(CoreUserGetUsersByFieldRequest coreUserGetUsersByFieldRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreUserGetUsersByFieldRequest' is set
        if (coreUserGetUsersByFieldRequest == null) {
            throw new ApiException("Missing the required parameter 'coreUserGetUsersByFieldRequest' when calling coreUserGetUsersByField(Async)");
        }

        return coreUserGetUsersByFieldCall(coreUserGetUsersByFieldRequest, _callback);

    }

    /**
     * Retrieve users&#39; information for a specified unique field - If you want to do a user search, use core_user_get_users() or core_user_search_identity().
     * Retrieve users&#39; information for a specified unique field - If you want to do a user search, use core_user_get_users() or core_user_search_identity().
     * @param coreUserGetUsersByFieldRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreUserGetUsersByField(CoreUserGetUsersByFieldRequest coreUserGetUsersByFieldRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreUserGetUsersByFieldWithHttpInfo(coreUserGetUsersByFieldRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieve users&#39; information for a specified unique field - If you want to do a user search, use core_user_get_users() or core_user_search_identity().
     * Retrieve users&#39; information for a specified unique field - If you want to do a user search, use core_user_get_users() or core_user_search_identity().
     * @param coreUserGetUsersByFieldRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreUserGetUsersByFieldWithHttpInfo(CoreUserGetUsersByFieldRequest coreUserGetUsersByFieldRequest) throws ApiException {
        okhttp3.Call localVarCall = coreUserGetUsersByFieldValidateBeforeCall(coreUserGetUsersByFieldRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve users&#39; information for a specified unique field - If you want to do a user search, use core_user_get_users() or core_user_search_identity(). (asynchronously)
     * Retrieve users&#39; information for a specified unique field - If you want to do a user search, use core_user_get_users() or core_user_search_identity().
     * @param coreUserGetUsersByFieldRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreUserGetUsersByFieldAsync(CoreUserGetUsersByFieldRequest coreUserGetUsersByFieldRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreUserGetUsersByFieldValidateBeforeCall(coreUserGetUsersByFieldRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreUserRemoveUserDevice
     * @param coreUserRemoveUserDeviceRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreUserRemoveUserDeviceCall(CoreUserRemoveUserDeviceRequest coreUserRemoveUserDeviceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreUserRemoveUserDeviceRequest;

        // create path and map variables
        String localVarPath = "/core_user_remove_user_device";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreUserRemoveUserDeviceValidateBeforeCall(CoreUserRemoveUserDeviceRequest coreUserRemoveUserDeviceRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreUserRemoveUserDeviceRequest' is set
        if (coreUserRemoveUserDeviceRequest == null) {
            throw new ApiException("Missing the required parameter 'coreUserRemoveUserDeviceRequest' when calling coreUserRemoveUserDevice(Async)");
        }

        return coreUserRemoveUserDeviceCall(coreUserRemoveUserDeviceRequest, _callback);

    }

    /**
     * Remove a user device from the Moodle database.
     * Remove a user device from the Moodle database.
     * @param coreUserRemoveUserDeviceRequest  (required)
     * @return CoreUserRemoveUserDevice200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreUserRemoveUserDevice200Response coreUserRemoveUserDevice(CoreUserRemoveUserDeviceRequest coreUserRemoveUserDeviceRequest) throws ApiException {
        ApiResponse<CoreUserRemoveUserDevice200Response> localVarResp = coreUserRemoveUserDeviceWithHttpInfo(coreUserRemoveUserDeviceRequest);
        return localVarResp.getData();
    }

    /**
     * Remove a user device from the Moodle database.
     * Remove a user device from the Moodle database.
     * @param coreUserRemoveUserDeviceRequest  (required)
     * @return ApiResponse&lt;CoreUserRemoveUserDevice200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreUserRemoveUserDevice200Response> coreUserRemoveUserDeviceWithHttpInfo(CoreUserRemoveUserDeviceRequest coreUserRemoveUserDeviceRequest) throws ApiException {
        okhttp3.Call localVarCall = coreUserRemoveUserDeviceValidateBeforeCall(coreUserRemoveUserDeviceRequest, null);
        Type localVarReturnType = new TypeToken<CoreUserRemoveUserDevice200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove a user device from the Moodle database. (asynchronously)
     * Remove a user device from the Moodle database.
     * @param coreUserRemoveUserDeviceRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreUserRemoveUserDeviceAsync(CoreUserRemoveUserDeviceRequest coreUserRemoveUserDeviceRequest, final ApiCallback<CoreUserRemoveUserDevice200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreUserRemoveUserDeviceValidateBeforeCall(coreUserRemoveUserDeviceRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreUserRemoveUserDevice200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreUserSearchIdentity
     * @param coreUserSearchIdentityRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreUserSearchIdentityCall(CoreUserSearchIdentityRequest coreUserSearchIdentityRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreUserSearchIdentityRequest;

        // create path and map variables
        String localVarPath = "/core_user_search_identity";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreUserSearchIdentityValidateBeforeCall(CoreUserSearchIdentityRequest coreUserSearchIdentityRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreUserSearchIdentityRequest' is set
        if (coreUserSearchIdentityRequest == null) {
            throw new ApiException("Missing the required parameter 'coreUserSearchIdentityRequest' when calling coreUserSearchIdentity(Async)");
        }

        return coreUserSearchIdentityCall(coreUserSearchIdentityRequest, _callback);

    }

    /**
     * Return list of users identities matching the given criteria in their name or other identity fields.
     * Return list of users identities matching the given criteria in their name or other identity fields.
     * @param coreUserSearchIdentityRequest  (required)
     * @return CoreUserSearchIdentity200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreUserSearchIdentity200Response coreUserSearchIdentity(CoreUserSearchIdentityRequest coreUserSearchIdentityRequest) throws ApiException {
        ApiResponse<CoreUserSearchIdentity200Response> localVarResp = coreUserSearchIdentityWithHttpInfo(coreUserSearchIdentityRequest);
        return localVarResp.getData();
    }

    /**
     * Return list of users identities matching the given criteria in their name or other identity fields.
     * Return list of users identities matching the given criteria in their name or other identity fields.
     * @param coreUserSearchIdentityRequest  (required)
     * @return ApiResponse&lt;CoreUserSearchIdentity200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreUserSearchIdentity200Response> coreUserSearchIdentityWithHttpInfo(CoreUserSearchIdentityRequest coreUserSearchIdentityRequest) throws ApiException {
        okhttp3.Call localVarCall = coreUserSearchIdentityValidateBeforeCall(coreUserSearchIdentityRequest, null);
        Type localVarReturnType = new TypeToken<CoreUserSearchIdentity200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return list of users identities matching the given criteria in their name or other identity fields. (asynchronously)
     * Return list of users identities matching the given criteria in their name or other identity fields.
     * @param coreUserSearchIdentityRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreUserSearchIdentityAsync(CoreUserSearchIdentityRequest coreUserSearchIdentityRequest, final ApiCallback<CoreUserSearchIdentity200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreUserSearchIdentityValidateBeforeCall(coreUserSearchIdentityRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreUserSearchIdentity200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreUserSetUserPreferences
     * @param coreUserSetUserPreferencesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreUserSetUserPreferencesCall(CoreUserSetUserPreferencesRequest coreUserSetUserPreferencesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreUserSetUserPreferencesRequest;

        // create path and map variables
        String localVarPath = "/core_user_set_user_preferences";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreUserSetUserPreferencesValidateBeforeCall(CoreUserSetUserPreferencesRequest coreUserSetUserPreferencesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreUserSetUserPreferencesRequest' is set
        if (coreUserSetUserPreferencesRequest == null) {
            throw new ApiException("Missing the required parameter 'coreUserSetUserPreferencesRequest' when calling coreUserSetUserPreferences(Async)");
        }

        return coreUserSetUserPreferencesCall(coreUserSetUserPreferencesRequest, _callback);

    }

    /**
     * Set user preferences.
     * Set user preferences.
     * @param coreUserSetUserPreferencesRequest  (required)
     * @return CoreUserSetUserPreferences200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreUserSetUserPreferences200Response coreUserSetUserPreferences(CoreUserSetUserPreferencesRequest coreUserSetUserPreferencesRequest) throws ApiException {
        ApiResponse<CoreUserSetUserPreferences200Response> localVarResp = coreUserSetUserPreferencesWithHttpInfo(coreUserSetUserPreferencesRequest);
        return localVarResp.getData();
    }

    /**
     * Set user preferences.
     * Set user preferences.
     * @param coreUserSetUserPreferencesRequest  (required)
     * @return ApiResponse&lt;CoreUserSetUserPreferences200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreUserSetUserPreferences200Response> coreUserSetUserPreferencesWithHttpInfo(CoreUserSetUserPreferencesRequest coreUserSetUserPreferencesRequest) throws ApiException {
        okhttp3.Call localVarCall = coreUserSetUserPreferencesValidateBeforeCall(coreUserSetUserPreferencesRequest, null);
        Type localVarReturnType = new TypeToken<CoreUserSetUserPreferences200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set user preferences. (asynchronously)
     * Set user preferences.
     * @param coreUserSetUserPreferencesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreUserSetUserPreferencesAsync(CoreUserSetUserPreferencesRequest coreUserSetUserPreferencesRequest, final ApiCallback<CoreUserSetUserPreferences200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreUserSetUserPreferencesValidateBeforeCall(coreUserSetUserPreferencesRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreUserSetUserPreferences200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreUserUpdatePicture
     * @param coreUserUpdatePictureRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreUserUpdatePictureCall(CoreUserUpdatePictureRequest coreUserUpdatePictureRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreUserUpdatePictureRequest;

        // create path and map variables
        String localVarPath = "/core_user_update_picture";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreUserUpdatePictureValidateBeforeCall(CoreUserUpdatePictureRequest coreUserUpdatePictureRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreUserUpdatePictureRequest' is set
        if (coreUserUpdatePictureRequest == null) {
            throw new ApiException("Missing the required parameter 'coreUserUpdatePictureRequest' when calling coreUserUpdatePicture(Async)");
        }

        return coreUserUpdatePictureCall(coreUserUpdatePictureRequest, _callback);

    }

    /**
     * Update or delete the user picture in the site
     * Update or delete the user picture in the site
     * @param coreUserUpdatePictureRequest  (required)
     * @return CoreUserUpdatePicture200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreUserUpdatePicture200Response coreUserUpdatePicture(CoreUserUpdatePictureRequest coreUserUpdatePictureRequest) throws ApiException {
        ApiResponse<CoreUserUpdatePicture200Response> localVarResp = coreUserUpdatePictureWithHttpInfo(coreUserUpdatePictureRequest);
        return localVarResp.getData();
    }

    /**
     * Update or delete the user picture in the site
     * Update or delete the user picture in the site
     * @param coreUserUpdatePictureRequest  (required)
     * @return ApiResponse&lt;CoreUserUpdatePicture200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreUserUpdatePicture200Response> coreUserUpdatePictureWithHttpInfo(CoreUserUpdatePictureRequest coreUserUpdatePictureRequest) throws ApiException {
        okhttp3.Call localVarCall = coreUserUpdatePictureValidateBeforeCall(coreUserUpdatePictureRequest, null);
        Type localVarReturnType = new TypeToken<CoreUserUpdatePicture200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update or delete the user picture in the site (asynchronously)
     * Update or delete the user picture in the site
     * @param coreUserUpdatePictureRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreUserUpdatePictureAsync(CoreUserUpdatePictureRequest coreUserUpdatePictureRequest, final ApiCallback<CoreUserUpdatePicture200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreUserUpdatePictureValidateBeforeCall(coreUserUpdatePictureRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreUserUpdatePicture200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreUserUpdateUserDevicePublicKey
     * @param coreUserUpdateUserDevicePublicKeyRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreUserUpdateUserDevicePublicKeyCall(CoreUserUpdateUserDevicePublicKeyRequest coreUserUpdateUserDevicePublicKeyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreUserUpdateUserDevicePublicKeyRequest;

        // create path and map variables
        String localVarPath = "/core_user_update_user_device_public_key";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreUserUpdateUserDevicePublicKeyValidateBeforeCall(CoreUserUpdateUserDevicePublicKeyRequest coreUserUpdateUserDevicePublicKeyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreUserUpdateUserDevicePublicKeyRequest' is set
        if (coreUserUpdateUserDevicePublicKeyRequest == null) {
            throw new ApiException("Missing the required parameter 'coreUserUpdateUserDevicePublicKeyRequest' when calling coreUserUpdateUserDevicePublicKey(Async)");
        }

        return coreUserUpdateUserDevicePublicKeyCall(coreUserUpdateUserDevicePublicKeyRequest, _callback);

    }

    /**
     * Store mobile user public key.
     * Store mobile user public key.
     * @param coreUserUpdateUserDevicePublicKeyRequest  (required)
     * @return CoreUserUpdateUserDevicePublicKey200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreUserUpdateUserDevicePublicKey200Response coreUserUpdateUserDevicePublicKey(CoreUserUpdateUserDevicePublicKeyRequest coreUserUpdateUserDevicePublicKeyRequest) throws ApiException {
        ApiResponse<CoreUserUpdateUserDevicePublicKey200Response> localVarResp = coreUserUpdateUserDevicePublicKeyWithHttpInfo(coreUserUpdateUserDevicePublicKeyRequest);
        return localVarResp.getData();
    }

    /**
     * Store mobile user public key.
     * Store mobile user public key.
     * @param coreUserUpdateUserDevicePublicKeyRequest  (required)
     * @return ApiResponse&lt;CoreUserUpdateUserDevicePublicKey200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreUserUpdateUserDevicePublicKey200Response> coreUserUpdateUserDevicePublicKeyWithHttpInfo(CoreUserUpdateUserDevicePublicKeyRequest coreUserUpdateUserDevicePublicKeyRequest) throws ApiException {
        okhttp3.Call localVarCall = coreUserUpdateUserDevicePublicKeyValidateBeforeCall(coreUserUpdateUserDevicePublicKeyRequest, null);
        Type localVarReturnType = new TypeToken<CoreUserUpdateUserDevicePublicKey200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Store mobile user public key. (asynchronously)
     * Store mobile user public key.
     * @param coreUserUpdateUserDevicePublicKeyRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreUserUpdateUserDevicePublicKeyAsync(CoreUserUpdateUserDevicePublicKeyRequest coreUserUpdateUserDevicePublicKeyRequest, final ApiCallback<CoreUserUpdateUserDevicePublicKey200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreUserUpdateUserDevicePublicKeyValidateBeforeCall(coreUserUpdateUserDevicePublicKeyRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreUserUpdateUserDevicePublicKey200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreUserUpdateUserPreferences
     * @param coreUserUpdateUserPreferencesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreUserUpdateUserPreferencesCall(CoreUserUpdateUserPreferencesRequest coreUserUpdateUserPreferencesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreUserUpdateUserPreferencesRequest;

        // create path and map variables
        String localVarPath = "/core_user_update_user_preferences";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreUserUpdateUserPreferencesValidateBeforeCall(CoreUserUpdateUserPreferencesRequest coreUserUpdateUserPreferencesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreUserUpdateUserPreferencesRequest' is set
        if (coreUserUpdateUserPreferencesRequest == null) {
            throw new ApiException("Missing the required parameter 'coreUserUpdateUserPreferencesRequest' when calling coreUserUpdateUserPreferences(Async)");
        }

        return coreUserUpdateUserPreferencesCall(coreUserUpdateUserPreferencesRequest, _callback);

    }

    /**
     * Update a user&#39;s preferences
     * Update a user&#39;s preferences
     * @param coreUserUpdateUserPreferencesRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreUserUpdateUserPreferences(CoreUserUpdateUserPreferencesRequest coreUserUpdateUserPreferencesRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreUserUpdateUserPreferencesWithHttpInfo(coreUserUpdateUserPreferencesRequest);
        return localVarResp.getData();
    }

    /**
     * Update a user&#39;s preferences
     * Update a user&#39;s preferences
     * @param coreUserUpdateUserPreferencesRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreUserUpdateUserPreferencesWithHttpInfo(CoreUserUpdateUserPreferencesRequest coreUserUpdateUserPreferencesRequest) throws ApiException {
        okhttp3.Call localVarCall = coreUserUpdateUserPreferencesValidateBeforeCall(coreUserUpdateUserPreferencesRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a user&#39;s preferences (asynchronously)
     * Update a user&#39;s preferences
     * @param coreUserUpdateUserPreferencesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreUserUpdateUserPreferencesAsync(CoreUserUpdateUserPreferencesRequest coreUserUpdateUserPreferencesRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreUserUpdateUserPreferencesValidateBeforeCall(coreUserUpdateUserPreferencesRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreUserUpdateUsers
     * @param coreUserUpdateUsersRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreUserUpdateUsersCall(CoreUserUpdateUsersRequest coreUserUpdateUsersRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreUserUpdateUsersRequest;

        // create path and map variables
        String localVarPath = "/core_user_update_users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreUserUpdateUsersValidateBeforeCall(CoreUserUpdateUsersRequest coreUserUpdateUsersRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreUserUpdateUsersRequest' is set
        if (coreUserUpdateUsersRequest == null) {
            throw new ApiException("Missing the required parameter 'coreUserUpdateUsersRequest' when calling coreUserUpdateUsers(Async)");
        }

        return coreUserUpdateUsersCall(coreUserUpdateUsersRequest, _callback);

    }

    /**
     * Update users.
     * Update users.
     * @param coreUserUpdateUsersRequest  (required)
     * @return CoreCohortAddCohortMembers200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreCohortAddCohortMembers200Response coreUserUpdateUsers(CoreUserUpdateUsersRequest coreUserUpdateUsersRequest) throws ApiException {
        ApiResponse<CoreCohortAddCohortMembers200Response> localVarResp = coreUserUpdateUsersWithHttpInfo(coreUserUpdateUsersRequest);
        return localVarResp.getData();
    }

    /**
     * Update users.
     * Update users.
     * @param coreUserUpdateUsersRequest  (required)
     * @return ApiResponse&lt;CoreCohortAddCohortMembers200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreCohortAddCohortMembers200Response> coreUserUpdateUsersWithHttpInfo(CoreUserUpdateUsersRequest coreUserUpdateUsersRequest) throws ApiException {
        okhttp3.Call localVarCall = coreUserUpdateUsersValidateBeforeCall(coreUserUpdateUsersRequest, null);
        Type localVarReturnType = new TypeToken<CoreCohortAddCohortMembers200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update users. (asynchronously)
     * Update users.
     * @param coreUserUpdateUsersRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreUserUpdateUsersAsync(CoreUserUpdateUsersRequest coreUserUpdateUsersRequest, final ApiCallback<CoreCohortAddCohortMembers200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreUserUpdateUsersValidateBeforeCall(coreUserUpdateUsersRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreCohortAddCohortMembers200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreUserViewUserList
     * @param coreUserViewUserListRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreUserViewUserListCall(CoreUserViewUserListRequest coreUserViewUserListRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreUserViewUserListRequest;

        // create path and map variables
        String localVarPath = "/core_user_view_user_list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreUserViewUserListValidateBeforeCall(CoreUserViewUserListRequest coreUserViewUserListRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreUserViewUserListRequest' is set
        if (coreUserViewUserListRequest == null) {
            throw new ApiException("Missing the required parameter 'coreUserViewUserListRequest' when calling coreUserViewUserList(Async)");
        }

        return coreUserViewUserListCall(coreUserViewUserListRequest, _callback);

    }

    /**
     * Simulates the web-interface view of user/index.php (triggering events),.
     * Simulates the web-interface view of user/index.php (triggering events),.
     * @param coreUserViewUserListRequest  (required)
     * @return CoreCalendarDeleteSubscription200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreCalendarDeleteSubscription200Response coreUserViewUserList(CoreUserViewUserListRequest coreUserViewUserListRequest) throws ApiException {
        ApiResponse<CoreCalendarDeleteSubscription200Response> localVarResp = coreUserViewUserListWithHttpInfo(coreUserViewUserListRequest);
        return localVarResp.getData();
    }

    /**
     * Simulates the web-interface view of user/index.php (triggering events),.
     * Simulates the web-interface view of user/index.php (triggering events),.
     * @param coreUserViewUserListRequest  (required)
     * @return ApiResponse&lt;CoreCalendarDeleteSubscription200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreCalendarDeleteSubscription200Response> coreUserViewUserListWithHttpInfo(CoreUserViewUserListRequest coreUserViewUserListRequest) throws ApiException {
        okhttp3.Call localVarCall = coreUserViewUserListValidateBeforeCall(coreUserViewUserListRequest, null);
        Type localVarReturnType = new TypeToken<CoreCalendarDeleteSubscription200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Simulates the web-interface view of user/index.php (triggering events),. (asynchronously)
     * Simulates the web-interface view of user/index.php (triggering events),.
     * @param coreUserViewUserListRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreUserViewUserListAsync(CoreUserViewUserListRequest coreUserViewUserListRequest, final ApiCallback<CoreCalendarDeleteSubscription200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreUserViewUserListValidateBeforeCall(coreUserViewUserListRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreCalendarDeleteSubscription200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreUserViewUserProfile
     * @param coreUserViewUserProfileRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreUserViewUserProfileCall(CoreUserViewUserProfileRequest coreUserViewUserProfileRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreUserViewUserProfileRequest;

        // create path and map variables
        String localVarPath = "/core_user_view_user_profile";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreUserViewUserProfileValidateBeforeCall(CoreUserViewUserProfileRequest coreUserViewUserProfileRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreUserViewUserProfileRequest' is set
        if (coreUserViewUserProfileRequest == null) {
            throw new ApiException("Missing the required parameter 'coreUserViewUserProfileRequest' when calling coreUserViewUserProfile(Async)");
        }

        return coreUserViewUserProfileCall(coreUserViewUserProfileRequest, _callback);

    }

    /**
     * Simulates the web-interface view of user/view.php and user/profile.php (triggering events),.
     * Simulates the web-interface view of user/view.php and user/profile.php (triggering events),.
     * @param coreUserViewUserProfileRequest  (required)
     * @return CoreCalendarDeleteSubscription200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreCalendarDeleteSubscription200Response coreUserViewUserProfile(CoreUserViewUserProfileRequest coreUserViewUserProfileRequest) throws ApiException {
        ApiResponse<CoreCalendarDeleteSubscription200Response> localVarResp = coreUserViewUserProfileWithHttpInfo(coreUserViewUserProfileRequest);
        return localVarResp.getData();
    }

    /**
     * Simulates the web-interface view of user/view.php and user/profile.php (triggering events),.
     * Simulates the web-interface view of user/view.php and user/profile.php (triggering events),.
     * @param coreUserViewUserProfileRequest  (required)
     * @return ApiResponse&lt;CoreCalendarDeleteSubscription200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreCalendarDeleteSubscription200Response> coreUserViewUserProfileWithHttpInfo(CoreUserViewUserProfileRequest coreUserViewUserProfileRequest) throws ApiException {
        okhttp3.Call localVarCall = coreUserViewUserProfileValidateBeforeCall(coreUserViewUserProfileRequest, null);
        Type localVarReturnType = new TypeToken<CoreCalendarDeleteSubscription200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Simulates the web-interface view of user/view.php and user/profile.php (triggering events),. (asynchronously)
     * Simulates the web-interface view of user/view.php and user/profile.php (triggering events),.
     * @param coreUserViewUserProfileRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreUserViewUserProfileAsync(CoreUserViewUserProfileRequest coreUserViewUserProfileRequest, final ApiCallback<CoreCalendarDeleteSubscription200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreUserViewUserProfileValidateBeforeCall(coreUserViewUserProfileRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreCalendarDeleteSubscription200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreWebserviceGetSiteInfo
     * @param coreWebserviceGetSiteInfoRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreWebserviceGetSiteInfoCall(CoreWebserviceGetSiteInfoRequest coreWebserviceGetSiteInfoRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreWebserviceGetSiteInfoRequest;

        // create path and map variables
        String localVarPath = "/core_webservice_get_site_info";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreWebserviceGetSiteInfoValidateBeforeCall(CoreWebserviceGetSiteInfoRequest coreWebserviceGetSiteInfoRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreWebserviceGetSiteInfoRequest' is set
        if (coreWebserviceGetSiteInfoRequest == null) {
            throw new ApiException("Missing the required parameter 'coreWebserviceGetSiteInfoRequest' when calling coreWebserviceGetSiteInfo(Async)");
        }

        return coreWebserviceGetSiteInfoCall(coreWebserviceGetSiteInfoRequest, _callback);

    }

    /**
     * Return some site info / user info / list web service functions
     * Return some site info / user info / list web service functions
     * @param coreWebserviceGetSiteInfoRequest  (required)
     * @return CoreWebserviceGetSiteInfo200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreWebserviceGetSiteInfo200Response coreWebserviceGetSiteInfo(CoreWebserviceGetSiteInfoRequest coreWebserviceGetSiteInfoRequest) throws ApiException {
        ApiResponse<CoreWebserviceGetSiteInfo200Response> localVarResp = coreWebserviceGetSiteInfoWithHttpInfo(coreWebserviceGetSiteInfoRequest);
        return localVarResp.getData();
    }

    /**
     * Return some site info / user info / list web service functions
     * Return some site info / user info / list web service functions
     * @param coreWebserviceGetSiteInfoRequest  (required)
     * @return ApiResponse&lt;CoreWebserviceGetSiteInfo200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreWebserviceGetSiteInfo200Response> coreWebserviceGetSiteInfoWithHttpInfo(CoreWebserviceGetSiteInfoRequest coreWebserviceGetSiteInfoRequest) throws ApiException {
        okhttp3.Call localVarCall = coreWebserviceGetSiteInfoValidateBeforeCall(coreWebserviceGetSiteInfoRequest, null);
        Type localVarReturnType = new TypeToken<CoreWebserviceGetSiteInfo200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return some site info / user info / list web service functions (asynchronously)
     * Return some site info / user info / list web service functions
     * @param coreWebserviceGetSiteInfoRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreWebserviceGetSiteInfoAsync(CoreWebserviceGetSiteInfoRequest coreWebserviceGetSiteInfoRequest, final ApiCallback<CoreWebserviceGetSiteInfo200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreWebserviceGetSiteInfoValidateBeforeCall(coreWebserviceGetSiteInfoRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreWebserviceGetSiteInfo200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreXapiDeleteState
     * @param coreXapiDeleteStateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If the state data is deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreXapiDeleteStateCall(CoreXapiDeleteStateRequest coreXapiDeleteStateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreXapiDeleteStateRequest;

        // create path and map variables
        String localVarPath = "/core_xapi_delete_state";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreXapiDeleteStateValidateBeforeCall(CoreXapiDeleteStateRequest coreXapiDeleteStateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreXapiDeleteStateRequest' is set
        if (coreXapiDeleteStateRequest == null) {
            throw new ApiException("Missing the required parameter 'coreXapiDeleteStateRequest' when calling coreXapiDeleteState(Async)");
        }

        return coreXapiDeleteStateCall(coreXapiDeleteStateRequest, _callback);

    }

    /**
     * Delete an xAPI state data from an activityId.
     * Delete an xAPI state data from an activityId.
     * @param coreXapiDeleteStateRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If the state data is deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreXapiDeleteState(CoreXapiDeleteStateRequest coreXapiDeleteStateRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreXapiDeleteStateWithHttpInfo(coreXapiDeleteStateRequest);
        return localVarResp.getData();
    }

    /**
     * Delete an xAPI state data from an activityId.
     * Delete an xAPI state data from an activityId.
     * @param coreXapiDeleteStateRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If the state data is deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreXapiDeleteStateWithHttpInfo(CoreXapiDeleteStateRequest coreXapiDeleteStateRequest) throws ApiException {
        okhttp3.Call localVarCall = coreXapiDeleteStateValidateBeforeCall(coreXapiDeleteStateRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete an xAPI state data from an activityId. (asynchronously)
     * Delete an xAPI state data from an activityId.
     * @param coreXapiDeleteStateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If the state data is deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreXapiDeleteStateAsync(CoreXapiDeleteStateRequest coreXapiDeleteStateRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreXapiDeleteStateValidateBeforeCall(coreXapiDeleteStateRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreXapiDeleteStates
     * @param coreXapiDeleteStatesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreXapiDeleteStatesCall(CoreXapiDeleteStatesRequest coreXapiDeleteStatesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreXapiDeleteStatesRequest;

        // create path and map variables
        String localVarPath = "/core_xapi_delete_states";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreXapiDeleteStatesValidateBeforeCall(CoreXapiDeleteStatesRequest coreXapiDeleteStatesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreXapiDeleteStatesRequest' is set
        if (coreXapiDeleteStatesRequest == null) {
            throw new ApiException("Missing the required parameter 'coreXapiDeleteStatesRequest' when calling coreXapiDeleteStates(Async)");
        }

        return coreXapiDeleteStatesCall(coreXapiDeleteStatesRequest, _callback);

    }

    /**
     * Delete all xAPI state data from an activityId.
     * Delete all xAPI state data from an activityId.
     * @param coreXapiDeleteStatesRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreXapiDeleteStates(CoreXapiDeleteStatesRequest coreXapiDeleteStatesRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreXapiDeleteStatesWithHttpInfo(coreXapiDeleteStatesRequest);
        return localVarResp.getData();
    }

    /**
     * Delete all xAPI state data from an activityId.
     * Delete all xAPI state data from an activityId.
     * @param coreXapiDeleteStatesRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreXapiDeleteStatesWithHttpInfo(CoreXapiDeleteStatesRequest coreXapiDeleteStatesRequest) throws ApiException {
        okhttp3.Call localVarCall = coreXapiDeleteStatesValidateBeforeCall(coreXapiDeleteStatesRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete all xAPI state data from an activityId. (asynchronously)
     * Delete all xAPI state data from an activityId.
     * @param coreXapiDeleteStatesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreXapiDeleteStatesAsync(CoreXapiDeleteStatesRequest coreXapiDeleteStatesRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreXapiDeleteStatesValidateBeforeCall(coreXapiDeleteStatesRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreXapiGetState
     * @param coreXapiGetStateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The state data json </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreXapiGetStateCall(CoreXapiGetStateRequest coreXapiGetStateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreXapiGetStateRequest;

        // create path and map variables
        String localVarPath = "/core_xapi_get_state";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreXapiGetStateValidateBeforeCall(CoreXapiGetStateRequest coreXapiGetStateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreXapiGetStateRequest' is set
        if (coreXapiGetStateRequest == null) {
            throw new ApiException("Missing the required parameter 'coreXapiGetStateRequest' when calling coreXapiGetState(Async)");
        }

        return coreXapiGetStateCall(coreXapiGetStateRequest, _callback);

    }

    /**
     * Get an xAPI state data from an activityId.
     * Get an xAPI state data from an activityId.
     * @param coreXapiGetStateRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The state data json </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreXapiGetState(CoreXapiGetStateRequest coreXapiGetStateRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreXapiGetStateWithHttpInfo(coreXapiGetStateRequest);
        return localVarResp.getData();
    }

    /**
     * Get an xAPI state data from an activityId.
     * Get an xAPI state data from an activityId.
     * @param coreXapiGetStateRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The state data json </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreXapiGetStateWithHttpInfo(CoreXapiGetStateRequest coreXapiGetStateRequest) throws ApiException {
        okhttp3.Call localVarCall = coreXapiGetStateValidateBeforeCall(coreXapiGetStateRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an xAPI state data from an activityId. (asynchronously)
     * Get an xAPI state data from an activityId.
     * @param coreXapiGetStateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The state data json </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreXapiGetStateAsync(CoreXapiGetStateRequest coreXapiGetStateRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreXapiGetStateValidateBeforeCall(coreXapiGetStateRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreXapiGetStates
     * @param coreXapiGetStatesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of state Ids </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreXapiGetStatesCall(CoreXapiGetStatesRequest coreXapiGetStatesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreXapiGetStatesRequest;

        // create path and map variables
        String localVarPath = "/core_xapi_get_states";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreXapiGetStatesValidateBeforeCall(CoreXapiGetStatesRequest coreXapiGetStatesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreXapiGetStatesRequest' is set
        if (coreXapiGetStatesRequest == null) {
            throw new ApiException("Missing the required parameter 'coreXapiGetStatesRequest' when calling coreXapiGetStates(Async)");
        }

        return coreXapiGetStatesCall(coreXapiGetStatesRequest, _callback);

    }

    /**
     * Get all state ID from an activityId.
     * Get all state ID from an activityId.
     * @param coreXapiGetStatesRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of state Ids </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreXapiGetStates(CoreXapiGetStatesRequest coreXapiGetStatesRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreXapiGetStatesWithHttpInfo(coreXapiGetStatesRequest);
        return localVarResp.getData();
    }

    /**
     * Get all state ID from an activityId.
     * Get all state ID from an activityId.
     * @param coreXapiGetStatesRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of state Ids </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreXapiGetStatesWithHttpInfo(CoreXapiGetStatesRequest coreXapiGetStatesRequest) throws ApiException {
        okhttp3.Call localVarCall = coreXapiGetStatesValidateBeforeCall(coreXapiGetStatesRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all state ID from an activityId. (asynchronously)
     * Get all state ID from an activityId.
     * @param coreXapiGetStatesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of state Ids </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreXapiGetStatesAsync(CoreXapiGetStatesRequest coreXapiGetStatesRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreXapiGetStatesValidateBeforeCall(coreXapiGetStatesRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreXapiPostState
     * @param coreXapiPostStateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If the state is accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreXapiPostStateCall(CoreXapiPostStateRequest coreXapiPostStateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreXapiPostStateRequest;

        // create path and map variables
        String localVarPath = "/core_xapi_post_state";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreXapiPostStateValidateBeforeCall(CoreXapiPostStateRequest coreXapiPostStateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreXapiPostStateRequest' is set
        if (coreXapiPostStateRequest == null) {
            throw new ApiException("Missing the required parameter 'coreXapiPostStateRequest' when calling coreXapiPostState(Async)");
        }

        return coreXapiPostStateCall(coreXapiPostStateRequest, _callback);

    }

    /**
     * Post an xAPI state into an activityId.
     * Post an xAPI state into an activityId.
     * @param coreXapiPostStateRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If the state is accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreXapiPostState(CoreXapiPostStateRequest coreXapiPostStateRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreXapiPostStateWithHttpInfo(coreXapiPostStateRequest);
        return localVarResp.getData();
    }

    /**
     * Post an xAPI state into an activityId.
     * Post an xAPI state into an activityId.
     * @param coreXapiPostStateRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If the state is accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreXapiPostStateWithHttpInfo(CoreXapiPostStateRequest coreXapiPostStateRequest) throws ApiException {
        okhttp3.Call localVarCall = coreXapiPostStateValidateBeforeCall(coreXapiPostStateRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Post an xAPI state into an activityId. (asynchronously)
     * Post an xAPI state into an activityId.
     * @param coreXapiPostStateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If the state is accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreXapiPostStateAsync(CoreXapiPostStateRequest coreXapiPostStateRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreXapiPostStateValidateBeforeCall(coreXapiPostStateRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coreXapiStatementPost
     * @param coreXapiStatementPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of statements storing acceptance results </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreXapiStatementPostCall(CoreXapiStatementPostRequest coreXapiStatementPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreXapiStatementPostRequest;

        // create path and map variables
        String localVarPath = "/core_xapi_statement_post";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coreXapiStatementPostValidateBeforeCall(CoreXapiStatementPostRequest coreXapiStatementPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreXapiStatementPostRequest' is set
        if (coreXapiStatementPostRequest == null) {
            throw new ApiException("Missing the required parameter 'coreXapiStatementPostRequest' when calling coreXapiStatementPost(Async)");
        }

        return coreXapiStatementPostCall(coreXapiStatementPostRequest, _callback);

    }

    /**
     * Post an xAPI statement.
     * Post an xAPI statement.
     * @param coreXapiStatementPostRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of statements storing acceptance results </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object coreXapiStatementPost(CoreXapiStatementPostRequest coreXapiStatementPostRequest) throws ApiException {
        ApiResponse<Object> localVarResp = coreXapiStatementPostWithHttpInfo(coreXapiStatementPostRequest);
        return localVarResp.getData();
    }

    /**
     * Post an xAPI statement.
     * Post an xAPI statement.
     * @param coreXapiStatementPostRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of statements storing acceptance results </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> coreXapiStatementPostWithHttpInfo(CoreXapiStatementPostRequest coreXapiStatementPostRequest) throws ApiException {
        okhttp3.Call localVarCall = coreXapiStatementPostValidateBeforeCall(coreXapiStatementPostRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Post an xAPI statement. (asynchronously)
     * Post an xAPI statement.
     * @param coreXapiStatementPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of statements storing acceptance results </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coreXapiStatementPostAsync(CoreXapiStatementPostRequest coreXapiStatementPostRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = coreXapiStatementPostValidateBeforeCall(coreXapiStatementPostRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
