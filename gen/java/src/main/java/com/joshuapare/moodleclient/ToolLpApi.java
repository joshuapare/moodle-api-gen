/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.joshuapare.moodleclient;

import com.joshuapare.ApiCallback;
import com.joshuapare.ApiClient;
import com.joshuapare.ApiException;
import com.joshuapare.ApiResponse;
import com.joshuapare.Configuration;
import com.joshuapare.Pair;
import com.joshuapare.ProgressRequestBody;
import com.joshuapare.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CoreCompetencyCompetencyViewedRequest;
import org.openapitools.client.model.CoreCompetencyCompletePlanRequest;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.ToolLpDataForCompetenciesManagePage200Response;
import org.openapitools.client.model.ToolLpDataForCompetenciesManagePageRequest;
import org.openapitools.client.model.ToolLpDataForCompetencyFrameworksManagePage200Response;
import org.openapitools.client.model.ToolLpDataForCompetencyFrameworksManagePageRequest;
import org.openapitools.client.model.ToolLpDataForCompetencySummary200Response;
import org.openapitools.client.model.ToolLpDataForCompetencySummaryRequest;
import org.openapitools.client.model.ToolLpDataForCourseCompetenciesPage200Response;
import org.openapitools.client.model.ToolLpDataForCourseCompetenciesPageRequest;
import org.openapitools.client.model.ToolLpDataForPlanPage200Response;
import org.openapitools.client.model.ToolLpDataForPlansPage200Response;
import org.openapitools.client.model.ToolLpDataForPlansPageRequest;
import org.openapitools.client.model.ToolLpDataForRelatedCompetenciesSection200Response;
import org.openapitools.client.model.ToolLpDataForRelatedCompetenciesSectionRequest;
import org.openapitools.client.model.ToolLpDataForTemplateCompetenciesPage200Response;
import org.openapitools.client.model.ToolLpDataForTemplateCompetenciesPageRequest;
import org.openapitools.client.model.ToolLpDataForTemplatesManagePage200Response;
import org.openapitools.client.model.ToolLpDataForUserCompetencySummary200Response;
import org.openapitools.client.model.ToolLpDataForUserCompetencySummaryInCourse200Response;
import org.openapitools.client.model.ToolLpDataForUserCompetencySummaryInCourseRequest;
import org.openapitools.client.model.ToolLpDataForUserCompetencySummaryInPlan200Response;
import org.openapitools.client.model.ToolLpDataForUserCompetencySummaryInPlanRequest;
import org.openapitools.client.model.ToolLpDataForUserCompetencySummaryRequest;
import org.openapitools.client.model.ToolLpDataForUserEvidenceListPage200Response;
import org.openapitools.client.model.ToolLpDataForUserEvidenceListPageRequest;
import org.openapitools.client.model.ToolLpDataForUserEvidencePage200Response;
import org.openapitools.client.model.ToolLpDataForUserEvidencePageRequest;
import org.openapitools.client.model.ToolLpSearchCohorts200Response;
import org.openapitools.client.model.ToolLpSearchCohortsRequest;
import org.openapitools.client.model.ToolLpSearchUsers200Response;
import org.openapitools.client.model.ToolLpSearchUsersRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ToolLpApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ToolLpApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ToolLpApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for toolLpDataForCompetenciesManagePage
     * @param toolLpDataForCompetenciesManagePageRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolLpDataForCompetenciesManagePageCall(ToolLpDataForCompetenciesManagePageRequest toolLpDataForCompetenciesManagePageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = toolLpDataForCompetenciesManagePageRequest;

        // create path and map variables
        String localVarPath = "/tool_lp_data_for_competencies_manage_page";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call toolLpDataForCompetenciesManagePageValidateBeforeCall(ToolLpDataForCompetenciesManagePageRequest toolLpDataForCompetenciesManagePageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'toolLpDataForCompetenciesManagePageRequest' is set
        if (toolLpDataForCompetenciesManagePageRequest == null) {
            throw new ApiException("Missing the required parameter 'toolLpDataForCompetenciesManagePageRequest' when calling toolLpDataForCompetenciesManagePage(Async)");
        }

        return toolLpDataForCompetenciesManagePageCall(toolLpDataForCompetenciesManagePageRequest, _callback);

    }

    /**
     * Load the data for the competencies manage page template
     * Load the data for the competencies manage page template
     * @param toolLpDataForCompetenciesManagePageRequest  (required)
     * @return ToolLpDataForCompetenciesManagePage200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ToolLpDataForCompetenciesManagePage200Response toolLpDataForCompetenciesManagePage(ToolLpDataForCompetenciesManagePageRequest toolLpDataForCompetenciesManagePageRequest) throws ApiException {
        ApiResponse<ToolLpDataForCompetenciesManagePage200Response> localVarResp = toolLpDataForCompetenciesManagePageWithHttpInfo(toolLpDataForCompetenciesManagePageRequest);
        return localVarResp.getData();
    }

    /**
     * Load the data for the competencies manage page template
     * Load the data for the competencies manage page template
     * @param toolLpDataForCompetenciesManagePageRequest  (required)
     * @return ApiResponse&lt;ToolLpDataForCompetenciesManagePage200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ToolLpDataForCompetenciesManagePage200Response> toolLpDataForCompetenciesManagePageWithHttpInfo(ToolLpDataForCompetenciesManagePageRequest toolLpDataForCompetenciesManagePageRequest) throws ApiException {
        okhttp3.Call localVarCall = toolLpDataForCompetenciesManagePageValidateBeforeCall(toolLpDataForCompetenciesManagePageRequest, null);
        Type localVarReturnType = new TypeToken<ToolLpDataForCompetenciesManagePage200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Load the data for the competencies manage page template (asynchronously)
     * Load the data for the competencies manage page template
     * @param toolLpDataForCompetenciesManagePageRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolLpDataForCompetenciesManagePageAsync(ToolLpDataForCompetenciesManagePageRequest toolLpDataForCompetenciesManagePageRequest, final ApiCallback<ToolLpDataForCompetenciesManagePage200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = toolLpDataForCompetenciesManagePageValidateBeforeCall(toolLpDataForCompetenciesManagePageRequest, _callback);
        Type localVarReturnType = new TypeToken<ToolLpDataForCompetenciesManagePage200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for toolLpDataForCompetencyFrameworksManagePage
     * @param toolLpDataForCompetencyFrameworksManagePageRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolLpDataForCompetencyFrameworksManagePageCall(ToolLpDataForCompetencyFrameworksManagePageRequest toolLpDataForCompetencyFrameworksManagePageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = toolLpDataForCompetencyFrameworksManagePageRequest;

        // create path and map variables
        String localVarPath = "/tool_lp_data_for_competency_frameworks_manage_page";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call toolLpDataForCompetencyFrameworksManagePageValidateBeforeCall(ToolLpDataForCompetencyFrameworksManagePageRequest toolLpDataForCompetencyFrameworksManagePageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'toolLpDataForCompetencyFrameworksManagePageRequest' is set
        if (toolLpDataForCompetencyFrameworksManagePageRequest == null) {
            throw new ApiException("Missing the required parameter 'toolLpDataForCompetencyFrameworksManagePageRequest' when calling toolLpDataForCompetencyFrameworksManagePage(Async)");
        }

        return toolLpDataForCompetencyFrameworksManagePageCall(toolLpDataForCompetencyFrameworksManagePageRequest, _callback);

    }

    /**
     * Load the data for the competency frameworks manage page template
     * Load the data for the competency frameworks manage page template
     * @param toolLpDataForCompetencyFrameworksManagePageRequest  (required)
     * @return ToolLpDataForCompetencyFrameworksManagePage200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ToolLpDataForCompetencyFrameworksManagePage200Response toolLpDataForCompetencyFrameworksManagePage(ToolLpDataForCompetencyFrameworksManagePageRequest toolLpDataForCompetencyFrameworksManagePageRequest) throws ApiException {
        ApiResponse<ToolLpDataForCompetencyFrameworksManagePage200Response> localVarResp = toolLpDataForCompetencyFrameworksManagePageWithHttpInfo(toolLpDataForCompetencyFrameworksManagePageRequest);
        return localVarResp.getData();
    }

    /**
     * Load the data for the competency frameworks manage page template
     * Load the data for the competency frameworks manage page template
     * @param toolLpDataForCompetencyFrameworksManagePageRequest  (required)
     * @return ApiResponse&lt;ToolLpDataForCompetencyFrameworksManagePage200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ToolLpDataForCompetencyFrameworksManagePage200Response> toolLpDataForCompetencyFrameworksManagePageWithHttpInfo(ToolLpDataForCompetencyFrameworksManagePageRequest toolLpDataForCompetencyFrameworksManagePageRequest) throws ApiException {
        okhttp3.Call localVarCall = toolLpDataForCompetencyFrameworksManagePageValidateBeforeCall(toolLpDataForCompetencyFrameworksManagePageRequest, null);
        Type localVarReturnType = new TypeToken<ToolLpDataForCompetencyFrameworksManagePage200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Load the data for the competency frameworks manage page template (asynchronously)
     * Load the data for the competency frameworks manage page template
     * @param toolLpDataForCompetencyFrameworksManagePageRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolLpDataForCompetencyFrameworksManagePageAsync(ToolLpDataForCompetencyFrameworksManagePageRequest toolLpDataForCompetencyFrameworksManagePageRequest, final ApiCallback<ToolLpDataForCompetencyFrameworksManagePage200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = toolLpDataForCompetencyFrameworksManagePageValidateBeforeCall(toolLpDataForCompetencyFrameworksManagePageRequest, _callback);
        Type localVarReturnType = new TypeToken<ToolLpDataForCompetencyFrameworksManagePage200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for toolLpDataForCompetencySummary
     * @param toolLpDataForCompetencySummaryRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolLpDataForCompetencySummaryCall(ToolLpDataForCompetencySummaryRequest toolLpDataForCompetencySummaryRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = toolLpDataForCompetencySummaryRequest;

        // create path and map variables
        String localVarPath = "/tool_lp_data_for_competency_summary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call toolLpDataForCompetencySummaryValidateBeforeCall(ToolLpDataForCompetencySummaryRequest toolLpDataForCompetencySummaryRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'toolLpDataForCompetencySummaryRequest' is set
        if (toolLpDataForCompetencySummaryRequest == null) {
            throw new ApiException("Missing the required parameter 'toolLpDataForCompetencySummaryRequest' when calling toolLpDataForCompetencySummary(Async)");
        }

        return toolLpDataForCompetencySummaryCall(toolLpDataForCompetencySummaryRequest, _callback);

    }

    /**
     * Load competency data for summary template.
     * Load competency data for summary template.
     * @param toolLpDataForCompetencySummaryRequest  (required)
     * @return ToolLpDataForCompetencySummary200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ToolLpDataForCompetencySummary200Response toolLpDataForCompetencySummary(ToolLpDataForCompetencySummaryRequest toolLpDataForCompetencySummaryRequest) throws ApiException {
        ApiResponse<ToolLpDataForCompetencySummary200Response> localVarResp = toolLpDataForCompetencySummaryWithHttpInfo(toolLpDataForCompetencySummaryRequest);
        return localVarResp.getData();
    }

    /**
     * Load competency data for summary template.
     * Load competency data for summary template.
     * @param toolLpDataForCompetencySummaryRequest  (required)
     * @return ApiResponse&lt;ToolLpDataForCompetencySummary200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ToolLpDataForCompetencySummary200Response> toolLpDataForCompetencySummaryWithHttpInfo(ToolLpDataForCompetencySummaryRequest toolLpDataForCompetencySummaryRequest) throws ApiException {
        okhttp3.Call localVarCall = toolLpDataForCompetencySummaryValidateBeforeCall(toolLpDataForCompetencySummaryRequest, null);
        Type localVarReturnType = new TypeToken<ToolLpDataForCompetencySummary200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Load competency data for summary template. (asynchronously)
     * Load competency data for summary template.
     * @param toolLpDataForCompetencySummaryRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolLpDataForCompetencySummaryAsync(ToolLpDataForCompetencySummaryRequest toolLpDataForCompetencySummaryRequest, final ApiCallback<ToolLpDataForCompetencySummary200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = toolLpDataForCompetencySummaryValidateBeforeCall(toolLpDataForCompetencySummaryRequest, _callback);
        Type localVarReturnType = new TypeToken<ToolLpDataForCompetencySummary200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for toolLpDataForCourseCompetenciesPage
     * @param toolLpDataForCourseCompetenciesPageRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolLpDataForCourseCompetenciesPageCall(ToolLpDataForCourseCompetenciesPageRequest toolLpDataForCourseCompetenciesPageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = toolLpDataForCourseCompetenciesPageRequest;

        // create path and map variables
        String localVarPath = "/tool_lp_data_for_course_competencies_page";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call toolLpDataForCourseCompetenciesPageValidateBeforeCall(ToolLpDataForCourseCompetenciesPageRequest toolLpDataForCourseCompetenciesPageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'toolLpDataForCourseCompetenciesPageRequest' is set
        if (toolLpDataForCourseCompetenciesPageRequest == null) {
            throw new ApiException("Missing the required parameter 'toolLpDataForCourseCompetenciesPageRequest' when calling toolLpDataForCourseCompetenciesPage(Async)");
        }

        return toolLpDataForCourseCompetenciesPageCall(toolLpDataForCourseCompetenciesPageRequest, _callback);

    }

    /**
     * Load the data for the course competencies page template.
     * Load the data for the course competencies page template.
     * @param toolLpDataForCourseCompetenciesPageRequest  (required)
     * @return ToolLpDataForCourseCompetenciesPage200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ToolLpDataForCourseCompetenciesPage200Response toolLpDataForCourseCompetenciesPage(ToolLpDataForCourseCompetenciesPageRequest toolLpDataForCourseCompetenciesPageRequest) throws ApiException {
        ApiResponse<ToolLpDataForCourseCompetenciesPage200Response> localVarResp = toolLpDataForCourseCompetenciesPageWithHttpInfo(toolLpDataForCourseCompetenciesPageRequest);
        return localVarResp.getData();
    }

    /**
     * Load the data for the course competencies page template.
     * Load the data for the course competencies page template.
     * @param toolLpDataForCourseCompetenciesPageRequest  (required)
     * @return ApiResponse&lt;ToolLpDataForCourseCompetenciesPage200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ToolLpDataForCourseCompetenciesPage200Response> toolLpDataForCourseCompetenciesPageWithHttpInfo(ToolLpDataForCourseCompetenciesPageRequest toolLpDataForCourseCompetenciesPageRequest) throws ApiException {
        okhttp3.Call localVarCall = toolLpDataForCourseCompetenciesPageValidateBeforeCall(toolLpDataForCourseCompetenciesPageRequest, null);
        Type localVarReturnType = new TypeToken<ToolLpDataForCourseCompetenciesPage200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Load the data for the course competencies page template. (asynchronously)
     * Load the data for the course competencies page template.
     * @param toolLpDataForCourseCompetenciesPageRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolLpDataForCourseCompetenciesPageAsync(ToolLpDataForCourseCompetenciesPageRequest toolLpDataForCourseCompetenciesPageRequest, final ApiCallback<ToolLpDataForCourseCompetenciesPage200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = toolLpDataForCourseCompetenciesPageValidateBeforeCall(toolLpDataForCourseCompetenciesPageRequest, _callback);
        Type localVarReturnType = new TypeToken<ToolLpDataForCourseCompetenciesPage200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for toolLpDataForPlanPage
     * @param coreCompetencyCompletePlanRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolLpDataForPlanPageCall(CoreCompetencyCompletePlanRequest coreCompetencyCompletePlanRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCompetencyCompletePlanRequest;

        // create path and map variables
        String localVarPath = "/tool_lp_data_for_plan_page";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call toolLpDataForPlanPageValidateBeforeCall(CoreCompetencyCompletePlanRequest coreCompetencyCompletePlanRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCompetencyCompletePlanRequest' is set
        if (coreCompetencyCompletePlanRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCompetencyCompletePlanRequest' when calling toolLpDataForPlanPage(Async)");
        }

        return toolLpDataForPlanPageCall(coreCompetencyCompletePlanRequest, _callback);

    }

    /**
     * Load the data for the plan page template.
     * Load the data for the plan page template.
     * @param coreCompetencyCompletePlanRequest  (required)
     * @return ToolLpDataForPlanPage200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ToolLpDataForPlanPage200Response toolLpDataForPlanPage(CoreCompetencyCompletePlanRequest coreCompetencyCompletePlanRequest) throws ApiException {
        ApiResponse<ToolLpDataForPlanPage200Response> localVarResp = toolLpDataForPlanPageWithHttpInfo(coreCompetencyCompletePlanRequest);
        return localVarResp.getData();
    }

    /**
     * Load the data for the plan page template.
     * Load the data for the plan page template.
     * @param coreCompetencyCompletePlanRequest  (required)
     * @return ApiResponse&lt;ToolLpDataForPlanPage200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ToolLpDataForPlanPage200Response> toolLpDataForPlanPageWithHttpInfo(CoreCompetencyCompletePlanRequest coreCompetencyCompletePlanRequest) throws ApiException {
        okhttp3.Call localVarCall = toolLpDataForPlanPageValidateBeforeCall(coreCompetencyCompletePlanRequest, null);
        Type localVarReturnType = new TypeToken<ToolLpDataForPlanPage200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Load the data for the plan page template. (asynchronously)
     * Load the data for the plan page template.
     * @param coreCompetencyCompletePlanRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolLpDataForPlanPageAsync(CoreCompetencyCompletePlanRequest coreCompetencyCompletePlanRequest, final ApiCallback<ToolLpDataForPlanPage200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = toolLpDataForPlanPageValidateBeforeCall(coreCompetencyCompletePlanRequest, _callback);
        Type localVarReturnType = new TypeToken<ToolLpDataForPlanPage200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for toolLpDataForPlansPage
     * @param toolLpDataForPlansPageRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolLpDataForPlansPageCall(ToolLpDataForPlansPageRequest toolLpDataForPlansPageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = toolLpDataForPlansPageRequest;

        // create path and map variables
        String localVarPath = "/tool_lp_data_for_plans_page";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call toolLpDataForPlansPageValidateBeforeCall(ToolLpDataForPlansPageRequest toolLpDataForPlansPageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'toolLpDataForPlansPageRequest' is set
        if (toolLpDataForPlansPageRequest == null) {
            throw new ApiException("Missing the required parameter 'toolLpDataForPlansPageRequest' when calling toolLpDataForPlansPage(Async)");
        }

        return toolLpDataForPlansPageCall(toolLpDataForPlansPageRequest, _callback);

    }

    /**
     * Load the data for the plans page template
     * Load the data for the plans page template
     * @param toolLpDataForPlansPageRequest  (required)
     * @return ToolLpDataForPlansPage200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ToolLpDataForPlansPage200Response toolLpDataForPlansPage(ToolLpDataForPlansPageRequest toolLpDataForPlansPageRequest) throws ApiException {
        ApiResponse<ToolLpDataForPlansPage200Response> localVarResp = toolLpDataForPlansPageWithHttpInfo(toolLpDataForPlansPageRequest);
        return localVarResp.getData();
    }

    /**
     * Load the data for the plans page template
     * Load the data for the plans page template
     * @param toolLpDataForPlansPageRequest  (required)
     * @return ApiResponse&lt;ToolLpDataForPlansPage200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ToolLpDataForPlansPage200Response> toolLpDataForPlansPageWithHttpInfo(ToolLpDataForPlansPageRequest toolLpDataForPlansPageRequest) throws ApiException {
        okhttp3.Call localVarCall = toolLpDataForPlansPageValidateBeforeCall(toolLpDataForPlansPageRequest, null);
        Type localVarReturnType = new TypeToken<ToolLpDataForPlansPage200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Load the data for the plans page template (asynchronously)
     * Load the data for the plans page template
     * @param toolLpDataForPlansPageRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolLpDataForPlansPageAsync(ToolLpDataForPlansPageRequest toolLpDataForPlansPageRequest, final ApiCallback<ToolLpDataForPlansPage200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = toolLpDataForPlansPageValidateBeforeCall(toolLpDataForPlansPageRequest, _callback);
        Type localVarReturnType = new TypeToken<ToolLpDataForPlansPage200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for toolLpDataForRelatedCompetenciesSection
     * @param toolLpDataForRelatedCompetenciesSectionRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolLpDataForRelatedCompetenciesSectionCall(ToolLpDataForRelatedCompetenciesSectionRequest toolLpDataForRelatedCompetenciesSectionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = toolLpDataForRelatedCompetenciesSectionRequest;

        // create path and map variables
        String localVarPath = "/tool_lp_data_for_related_competencies_section";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call toolLpDataForRelatedCompetenciesSectionValidateBeforeCall(ToolLpDataForRelatedCompetenciesSectionRequest toolLpDataForRelatedCompetenciesSectionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'toolLpDataForRelatedCompetenciesSectionRequest' is set
        if (toolLpDataForRelatedCompetenciesSectionRequest == null) {
            throw new ApiException("Missing the required parameter 'toolLpDataForRelatedCompetenciesSectionRequest' when calling toolLpDataForRelatedCompetenciesSection(Async)");
        }

        return toolLpDataForRelatedCompetenciesSectionCall(toolLpDataForRelatedCompetenciesSectionRequest, _callback);

    }

    /**
     * Load the data for the related competencies template.
     * Load the data for the related competencies template.
     * @param toolLpDataForRelatedCompetenciesSectionRequest  (required)
     * @return ToolLpDataForRelatedCompetenciesSection200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ToolLpDataForRelatedCompetenciesSection200Response toolLpDataForRelatedCompetenciesSection(ToolLpDataForRelatedCompetenciesSectionRequest toolLpDataForRelatedCompetenciesSectionRequest) throws ApiException {
        ApiResponse<ToolLpDataForRelatedCompetenciesSection200Response> localVarResp = toolLpDataForRelatedCompetenciesSectionWithHttpInfo(toolLpDataForRelatedCompetenciesSectionRequest);
        return localVarResp.getData();
    }

    /**
     * Load the data for the related competencies template.
     * Load the data for the related competencies template.
     * @param toolLpDataForRelatedCompetenciesSectionRequest  (required)
     * @return ApiResponse&lt;ToolLpDataForRelatedCompetenciesSection200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ToolLpDataForRelatedCompetenciesSection200Response> toolLpDataForRelatedCompetenciesSectionWithHttpInfo(ToolLpDataForRelatedCompetenciesSectionRequest toolLpDataForRelatedCompetenciesSectionRequest) throws ApiException {
        okhttp3.Call localVarCall = toolLpDataForRelatedCompetenciesSectionValidateBeforeCall(toolLpDataForRelatedCompetenciesSectionRequest, null);
        Type localVarReturnType = new TypeToken<ToolLpDataForRelatedCompetenciesSection200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Load the data for the related competencies template. (asynchronously)
     * Load the data for the related competencies template.
     * @param toolLpDataForRelatedCompetenciesSectionRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolLpDataForRelatedCompetenciesSectionAsync(ToolLpDataForRelatedCompetenciesSectionRequest toolLpDataForRelatedCompetenciesSectionRequest, final ApiCallback<ToolLpDataForRelatedCompetenciesSection200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = toolLpDataForRelatedCompetenciesSectionValidateBeforeCall(toolLpDataForRelatedCompetenciesSectionRequest, _callback);
        Type localVarReturnType = new TypeToken<ToolLpDataForRelatedCompetenciesSection200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for toolLpDataForTemplateCompetenciesPage
     * @param toolLpDataForTemplateCompetenciesPageRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolLpDataForTemplateCompetenciesPageCall(ToolLpDataForTemplateCompetenciesPageRequest toolLpDataForTemplateCompetenciesPageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = toolLpDataForTemplateCompetenciesPageRequest;

        // create path and map variables
        String localVarPath = "/tool_lp_data_for_template_competencies_page";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call toolLpDataForTemplateCompetenciesPageValidateBeforeCall(ToolLpDataForTemplateCompetenciesPageRequest toolLpDataForTemplateCompetenciesPageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'toolLpDataForTemplateCompetenciesPageRequest' is set
        if (toolLpDataForTemplateCompetenciesPageRequest == null) {
            throw new ApiException("Missing the required parameter 'toolLpDataForTemplateCompetenciesPageRequest' when calling toolLpDataForTemplateCompetenciesPage(Async)");
        }

        return toolLpDataForTemplateCompetenciesPageCall(toolLpDataForTemplateCompetenciesPageRequest, _callback);

    }

    /**
     * Load the data for the template competencies page template.
     * Load the data for the template competencies page template.
     * @param toolLpDataForTemplateCompetenciesPageRequest  (required)
     * @return ToolLpDataForTemplateCompetenciesPage200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ToolLpDataForTemplateCompetenciesPage200Response toolLpDataForTemplateCompetenciesPage(ToolLpDataForTemplateCompetenciesPageRequest toolLpDataForTemplateCompetenciesPageRequest) throws ApiException {
        ApiResponse<ToolLpDataForTemplateCompetenciesPage200Response> localVarResp = toolLpDataForTemplateCompetenciesPageWithHttpInfo(toolLpDataForTemplateCompetenciesPageRequest);
        return localVarResp.getData();
    }

    /**
     * Load the data for the template competencies page template.
     * Load the data for the template competencies page template.
     * @param toolLpDataForTemplateCompetenciesPageRequest  (required)
     * @return ApiResponse&lt;ToolLpDataForTemplateCompetenciesPage200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ToolLpDataForTemplateCompetenciesPage200Response> toolLpDataForTemplateCompetenciesPageWithHttpInfo(ToolLpDataForTemplateCompetenciesPageRequest toolLpDataForTemplateCompetenciesPageRequest) throws ApiException {
        okhttp3.Call localVarCall = toolLpDataForTemplateCompetenciesPageValidateBeforeCall(toolLpDataForTemplateCompetenciesPageRequest, null);
        Type localVarReturnType = new TypeToken<ToolLpDataForTemplateCompetenciesPage200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Load the data for the template competencies page template. (asynchronously)
     * Load the data for the template competencies page template.
     * @param toolLpDataForTemplateCompetenciesPageRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolLpDataForTemplateCompetenciesPageAsync(ToolLpDataForTemplateCompetenciesPageRequest toolLpDataForTemplateCompetenciesPageRequest, final ApiCallback<ToolLpDataForTemplateCompetenciesPage200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = toolLpDataForTemplateCompetenciesPageValidateBeforeCall(toolLpDataForTemplateCompetenciesPageRequest, _callback);
        Type localVarReturnType = new TypeToken<ToolLpDataForTemplateCompetenciesPage200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for toolLpDataForTemplatesManagePage
     * @param toolLpDataForCompetencyFrameworksManagePageRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolLpDataForTemplatesManagePageCall(ToolLpDataForCompetencyFrameworksManagePageRequest toolLpDataForCompetencyFrameworksManagePageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = toolLpDataForCompetencyFrameworksManagePageRequest;

        // create path and map variables
        String localVarPath = "/tool_lp_data_for_templates_manage_page";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call toolLpDataForTemplatesManagePageValidateBeforeCall(ToolLpDataForCompetencyFrameworksManagePageRequest toolLpDataForCompetencyFrameworksManagePageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'toolLpDataForCompetencyFrameworksManagePageRequest' is set
        if (toolLpDataForCompetencyFrameworksManagePageRequest == null) {
            throw new ApiException("Missing the required parameter 'toolLpDataForCompetencyFrameworksManagePageRequest' when calling toolLpDataForTemplatesManagePage(Async)");
        }

        return toolLpDataForTemplatesManagePageCall(toolLpDataForCompetencyFrameworksManagePageRequest, _callback);

    }

    /**
     * Load the data for the learning plan templates manage page template
     * Load the data for the learning plan templates manage page template
     * @param toolLpDataForCompetencyFrameworksManagePageRequest  (required)
     * @return ToolLpDataForTemplatesManagePage200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ToolLpDataForTemplatesManagePage200Response toolLpDataForTemplatesManagePage(ToolLpDataForCompetencyFrameworksManagePageRequest toolLpDataForCompetencyFrameworksManagePageRequest) throws ApiException {
        ApiResponse<ToolLpDataForTemplatesManagePage200Response> localVarResp = toolLpDataForTemplatesManagePageWithHttpInfo(toolLpDataForCompetencyFrameworksManagePageRequest);
        return localVarResp.getData();
    }

    /**
     * Load the data for the learning plan templates manage page template
     * Load the data for the learning plan templates manage page template
     * @param toolLpDataForCompetencyFrameworksManagePageRequest  (required)
     * @return ApiResponse&lt;ToolLpDataForTemplatesManagePage200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ToolLpDataForTemplatesManagePage200Response> toolLpDataForTemplatesManagePageWithHttpInfo(ToolLpDataForCompetencyFrameworksManagePageRequest toolLpDataForCompetencyFrameworksManagePageRequest) throws ApiException {
        okhttp3.Call localVarCall = toolLpDataForTemplatesManagePageValidateBeforeCall(toolLpDataForCompetencyFrameworksManagePageRequest, null);
        Type localVarReturnType = new TypeToken<ToolLpDataForTemplatesManagePage200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Load the data for the learning plan templates manage page template (asynchronously)
     * Load the data for the learning plan templates manage page template
     * @param toolLpDataForCompetencyFrameworksManagePageRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolLpDataForTemplatesManagePageAsync(ToolLpDataForCompetencyFrameworksManagePageRequest toolLpDataForCompetencyFrameworksManagePageRequest, final ApiCallback<ToolLpDataForTemplatesManagePage200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = toolLpDataForTemplatesManagePageValidateBeforeCall(toolLpDataForCompetencyFrameworksManagePageRequest, _callback);
        Type localVarReturnType = new TypeToken<ToolLpDataForTemplatesManagePage200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for toolLpDataForUserCompetencySummary
     * @param toolLpDataForUserCompetencySummaryRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolLpDataForUserCompetencySummaryCall(ToolLpDataForUserCompetencySummaryRequest toolLpDataForUserCompetencySummaryRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = toolLpDataForUserCompetencySummaryRequest;

        // create path and map variables
        String localVarPath = "/tool_lp_data_for_user_competency_summary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call toolLpDataForUserCompetencySummaryValidateBeforeCall(ToolLpDataForUserCompetencySummaryRequest toolLpDataForUserCompetencySummaryRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'toolLpDataForUserCompetencySummaryRequest' is set
        if (toolLpDataForUserCompetencySummaryRequest == null) {
            throw new ApiException("Missing the required parameter 'toolLpDataForUserCompetencySummaryRequest' when calling toolLpDataForUserCompetencySummary(Async)");
        }

        return toolLpDataForUserCompetencySummaryCall(toolLpDataForUserCompetencySummaryRequest, _callback);

    }

    /**
     * Load a summary of a user competency.
     * Load a summary of a user competency.
     * @param toolLpDataForUserCompetencySummaryRequest  (required)
     * @return ToolLpDataForUserCompetencySummary200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ToolLpDataForUserCompetencySummary200Response toolLpDataForUserCompetencySummary(ToolLpDataForUserCompetencySummaryRequest toolLpDataForUserCompetencySummaryRequest) throws ApiException {
        ApiResponse<ToolLpDataForUserCompetencySummary200Response> localVarResp = toolLpDataForUserCompetencySummaryWithHttpInfo(toolLpDataForUserCompetencySummaryRequest);
        return localVarResp.getData();
    }

    /**
     * Load a summary of a user competency.
     * Load a summary of a user competency.
     * @param toolLpDataForUserCompetencySummaryRequest  (required)
     * @return ApiResponse&lt;ToolLpDataForUserCompetencySummary200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ToolLpDataForUserCompetencySummary200Response> toolLpDataForUserCompetencySummaryWithHttpInfo(ToolLpDataForUserCompetencySummaryRequest toolLpDataForUserCompetencySummaryRequest) throws ApiException {
        okhttp3.Call localVarCall = toolLpDataForUserCompetencySummaryValidateBeforeCall(toolLpDataForUserCompetencySummaryRequest, null);
        Type localVarReturnType = new TypeToken<ToolLpDataForUserCompetencySummary200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Load a summary of a user competency. (asynchronously)
     * Load a summary of a user competency.
     * @param toolLpDataForUserCompetencySummaryRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolLpDataForUserCompetencySummaryAsync(ToolLpDataForUserCompetencySummaryRequest toolLpDataForUserCompetencySummaryRequest, final ApiCallback<ToolLpDataForUserCompetencySummary200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = toolLpDataForUserCompetencySummaryValidateBeforeCall(toolLpDataForUserCompetencySummaryRequest, _callback);
        Type localVarReturnType = new TypeToken<ToolLpDataForUserCompetencySummary200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for toolLpDataForUserCompetencySummaryInCourse
     * @param toolLpDataForUserCompetencySummaryInCourseRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolLpDataForUserCompetencySummaryInCourseCall(ToolLpDataForUserCompetencySummaryInCourseRequest toolLpDataForUserCompetencySummaryInCourseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = toolLpDataForUserCompetencySummaryInCourseRequest;

        // create path and map variables
        String localVarPath = "/tool_lp_data_for_user_competency_summary_in_course";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call toolLpDataForUserCompetencySummaryInCourseValidateBeforeCall(ToolLpDataForUserCompetencySummaryInCourseRequest toolLpDataForUserCompetencySummaryInCourseRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'toolLpDataForUserCompetencySummaryInCourseRequest' is set
        if (toolLpDataForUserCompetencySummaryInCourseRequest == null) {
            throw new ApiException("Missing the required parameter 'toolLpDataForUserCompetencySummaryInCourseRequest' when calling toolLpDataForUserCompetencySummaryInCourse(Async)");
        }

        return toolLpDataForUserCompetencySummaryInCourseCall(toolLpDataForUserCompetencySummaryInCourseRequest, _callback);

    }

    /**
     * Load a summary of a user competency.
     * Load a summary of a user competency.
     * @param toolLpDataForUserCompetencySummaryInCourseRequest  (required)
     * @return ToolLpDataForUserCompetencySummaryInCourse200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ToolLpDataForUserCompetencySummaryInCourse200Response toolLpDataForUserCompetencySummaryInCourse(ToolLpDataForUserCompetencySummaryInCourseRequest toolLpDataForUserCompetencySummaryInCourseRequest) throws ApiException {
        ApiResponse<ToolLpDataForUserCompetencySummaryInCourse200Response> localVarResp = toolLpDataForUserCompetencySummaryInCourseWithHttpInfo(toolLpDataForUserCompetencySummaryInCourseRequest);
        return localVarResp.getData();
    }

    /**
     * Load a summary of a user competency.
     * Load a summary of a user competency.
     * @param toolLpDataForUserCompetencySummaryInCourseRequest  (required)
     * @return ApiResponse&lt;ToolLpDataForUserCompetencySummaryInCourse200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ToolLpDataForUserCompetencySummaryInCourse200Response> toolLpDataForUserCompetencySummaryInCourseWithHttpInfo(ToolLpDataForUserCompetencySummaryInCourseRequest toolLpDataForUserCompetencySummaryInCourseRequest) throws ApiException {
        okhttp3.Call localVarCall = toolLpDataForUserCompetencySummaryInCourseValidateBeforeCall(toolLpDataForUserCompetencySummaryInCourseRequest, null);
        Type localVarReturnType = new TypeToken<ToolLpDataForUserCompetencySummaryInCourse200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Load a summary of a user competency. (asynchronously)
     * Load a summary of a user competency.
     * @param toolLpDataForUserCompetencySummaryInCourseRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolLpDataForUserCompetencySummaryInCourseAsync(ToolLpDataForUserCompetencySummaryInCourseRequest toolLpDataForUserCompetencySummaryInCourseRequest, final ApiCallback<ToolLpDataForUserCompetencySummaryInCourse200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = toolLpDataForUserCompetencySummaryInCourseValidateBeforeCall(toolLpDataForUserCompetencySummaryInCourseRequest, _callback);
        Type localVarReturnType = new TypeToken<ToolLpDataForUserCompetencySummaryInCourse200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for toolLpDataForUserCompetencySummaryInPlan
     * @param toolLpDataForUserCompetencySummaryInPlanRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolLpDataForUserCompetencySummaryInPlanCall(ToolLpDataForUserCompetencySummaryInPlanRequest toolLpDataForUserCompetencySummaryInPlanRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = toolLpDataForUserCompetencySummaryInPlanRequest;

        // create path and map variables
        String localVarPath = "/tool_lp_data_for_user_competency_summary_in_plan";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call toolLpDataForUserCompetencySummaryInPlanValidateBeforeCall(ToolLpDataForUserCompetencySummaryInPlanRequest toolLpDataForUserCompetencySummaryInPlanRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'toolLpDataForUserCompetencySummaryInPlanRequest' is set
        if (toolLpDataForUserCompetencySummaryInPlanRequest == null) {
            throw new ApiException("Missing the required parameter 'toolLpDataForUserCompetencySummaryInPlanRequest' when calling toolLpDataForUserCompetencySummaryInPlan(Async)");
        }

        return toolLpDataForUserCompetencySummaryInPlanCall(toolLpDataForUserCompetencySummaryInPlanRequest, _callback);

    }

    /**
     * Load a summary of a user competency.
     * Load a summary of a user competency.
     * @param toolLpDataForUserCompetencySummaryInPlanRequest  (required)
     * @return ToolLpDataForUserCompetencySummaryInPlan200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ToolLpDataForUserCompetencySummaryInPlan200Response toolLpDataForUserCompetencySummaryInPlan(ToolLpDataForUserCompetencySummaryInPlanRequest toolLpDataForUserCompetencySummaryInPlanRequest) throws ApiException {
        ApiResponse<ToolLpDataForUserCompetencySummaryInPlan200Response> localVarResp = toolLpDataForUserCompetencySummaryInPlanWithHttpInfo(toolLpDataForUserCompetencySummaryInPlanRequest);
        return localVarResp.getData();
    }

    /**
     * Load a summary of a user competency.
     * Load a summary of a user competency.
     * @param toolLpDataForUserCompetencySummaryInPlanRequest  (required)
     * @return ApiResponse&lt;ToolLpDataForUserCompetencySummaryInPlan200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ToolLpDataForUserCompetencySummaryInPlan200Response> toolLpDataForUserCompetencySummaryInPlanWithHttpInfo(ToolLpDataForUserCompetencySummaryInPlanRequest toolLpDataForUserCompetencySummaryInPlanRequest) throws ApiException {
        okhttp3.Call localVarCall = toolLpDataForUserCompetencySummaryInPlanValidateBeforeCall(toolLpDataForUserCompetencySummaryInPlanRequest, null);
        Type localVarReturnType = new TypeToken<ToolLpDataForUserCompetencySummaryInPlan200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Load a summary of a user competency. (asynchronously)
     * Load a summary of a user competency.
     * @param toolLpDataForUserCompetencySummaryInPlanRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolLpDataForUserCompetencySummaryInPlanAsync(ToolLpDataForUserCompetencySummaryInPlanRequest toolLpDataForUserCompetencySummaryInPlanRequest, final ApiCallback<ToolLpDataForUserCompetencySummaryInPlan200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = toolLpDataForUserCompetencySummaryInPlanValidateBeforeCall(toolLpDataForUserCompetencySummaryInPlanRequest, _callback);
        Type localVarReturnType = new TypeToken<ToolLpDataForUserCompetencySummaryInPlan200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for toolLpDataForUserEvidenceListPage
     * @param toolLpDataForUserEvidenceListPageRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolLpDataForUserEvidenceListPageCall(ToolLpDataForUserEvidenceListPageRequest toolLpDataForUserEvidenceListPageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = toolLpDataForUserEvidenceListPageRequest;

        // create path and map variables
        String localVarPath = "/tool_lp_data_for_user_evidence_list_page";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call toolLpDataForUserEvidenceListPageValidateBeforeCall(ToolLpDataForUserEvidenceListPageRequest toolLpDataForUserEvidenceListPageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'toolLpDataForUserEvidenceListPageRequest' is set
        if (toolLpDataForUserEvidenceListPageRequest == null) {
            throw new ApiException("Missing the required parameter 'toolLpDataForUserEvidenceListPageRequest' when calling toolLpDataForUserEvidenceListPage(Async)");
        }

        return toolLpDataForUserEvidenceListPageCall(toolLpDataForUserEvidenceListPageRequest, _callback);

    }

    /**
     * Load the data for the user evidence list page template
     * Load the data for the user evidence list page template
     * @param toolLpDataForUserEvidenceListPageRequest  (required)
     * @return ToolLpDataForUserEvidenceListPage200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ToolLpDataForUserEvidenceListPage200Response toolLpDataForUserEvidenceListPage(ToolLpDataForUserEvidenceListPageRequest toolLpDataForUserEvidenceListPageRequest) throws ApiException {
        ApiResponse<ToolLpDataForUserEvidenceListPage200Response> localVarResp = toolLpDataForUserEvidenceListPageWithHttpInfo(toolLpDataForUserEvidenceListPageRequest);
        return localVarResp.getData();
    }

    /**
     * Load the data for the user evidence list page template
     * Load the data for the user evidence list page template
     * @param toolLpDataForUserEvidenceListPageRequest  (required)
     * @return ApiResponse&lt;ToolLpDataForUserEvidenceListPage200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ToolLpDataForUserEvidenceListPage200Response> toolLpDataForUserEvidenceListPageWithHttpInfo(ToolLpDataForUserEvidenceListPageRequest toolLpDataForUserEvidenceListPageRequest) throws ApiException {
        okhttp3.Call localVarCall = toolLpDataForUserEvidenceListPageValidateBeforeCall(toolLpDataForUserEvidenceListPageRequest, null);
        Type localVarReturnType = new TypeToken<ToolLpDataForUserEvidenceListPage200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Load the data for the user evidence list page template (asynchronously)
     * Load the data for the user evidence list page template
     * @param toolLpDataForUserEvidenceListPageRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolLpDataForUserEvidenceListPageAsync(ToolLpDataForUserEvidenceListPageRequest toolLpDataForUserEvidenceListPageRequest, final ApiCallback<ToolLpDataForUserEvidenceListPage200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = toolLpDataForUserEvidenceListPageValidateBeforeCall(toolLpDataForUserEvidenceListPageRequest, _callback);
        Type localVarReturnType = new TypeToken<ToolLpDataForUserEvidenceListPage200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for toolLpDataForUserEvidencePage
     * @param toolLpDataForUserEvidencePageRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolLpDataForUserEvidencePageCall(ToolLpDataForUserEvidencePageRequest toolLpDataForUserEvidencePageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = toolLpDataForUserEvidencePageRequest;

        // create path and map variables
        String localVarPath = "/tool_lp_data_for_user_evidence_page";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call toolLpDataForUserEvidencePageValidateBeforeCall(ToolLpDataForUserEvidencePageRequest toolLpDataForUserEvidencePageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'toolLpDataForUserEvidencePageRequest' is set
        if (toolLpDataForUserEvidencePageRequest == null) {
            throw new ApiException("Missing the required parameter 'toolLpDataForUserEvidencePageRequest' when calling toolLpDataForUserEvidencePage(Async)");
        }

        return toolLpDataForUserEvidencePageCall(toolLpDataForUserEvidencePageRequest, _callback);

    }

    /**
     * Load the data for the user evidence page template
     * Load the data for the user evidence page template
     * @param toolLpDataForUserEvidencePageRequest  (required)
     * @return ToolLpDataForUserEvidencePage200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ToolLpDataForUserEvidencePage200Response toolLpDataForUserEvidencePage(ToolLpDataForUserEvidencePageRequest toolLpDataForUserEvidencePageRequest) throws ApiException {
        ApiResponse<ToolLpDataForUserEvidencePage200Response> localVarResp = toolLpDataForUserEvidencePageWithHttpInfo(toolLpDataForUserEvidencePageRequest);
        return localVarResp.getData();
    }

    /**
     * Load the data for the user evidence page template
     * Load the data for the user evidence page template
     * @param toolLpDataForUserEvidencePageRequest  (required)
     * @return ApiResponse&lt;ToolLpDataForUserEvidencePage200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ToolLpDataForUserEvidencePage200Response> toolLpDataForUserEvidencePageWithHttpInfo(ToolLpDataForUserEvidencePageRequest toolLpDataForUserEvidencePageRequest) throws ApiException {
        okhttp3.Call localVarCall = toolLpDataForUserEvidencePageValidateBeforeCall(toolLpDataForUserEvidencePageRequest, null);
        Type localVarReturnType = new TypeToken<ToolLpDataForUserEvidencePage200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Load the data for the user evidence page template (asynchronously)
     * Load the data for the user evidence page template
     * @param toolLpDataForUserEvidencePageRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolLpDataForUserEvidencePageAsync(ToolLpDataForUserEvidencePageRequest toolLpDataForUserEvidencePageRequest, final ApiCallback<ToolLpDataForUserEvidencePage200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = toolLpDataForUserEvidencePageValidateBeforeCall(toolLpDataForUserEvidencePageRequest, _callback);
        Type localVarReturnType = new TypeToken<ToolLpDataForUserEvidencePage200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for toolLpListCoursesUsingCompetency
     * @param coreCompetencyCompetencyViewedRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolLpListCoursesUsingCompetencyCall(CoreCompetencyCompetencyViewedRequest coreCompetencyCompetencyViewedRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coreCompetencyCompetencyViewedRequest;

        // create path and map variables
        String localVarPath = "/tool_lp_list_courses_using_competency";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call toolLpListCoursesUsingCompetencyValidateBeforeCall(CoreCompetencyCompetencyViewedRequest coreCompetencyCompetencyViewedRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coreCompetencyCompetencyViewedRequest' is set
        if (coreCompetencyCompetencyViewedRequest == null) {
            throw new ApiException("Missing the required parameter 'coreCompetencyCompetencyViewedRequest' when calling toolLpListCoursesUsingCompetency(Async)");
        }

        return toolLpListCoursesUsingCompetencyCall(coreCompetencyCompetencyViewedRequest, _callback);

    }

    /**
     * List the courses using a competency
     * List the courses using a competency
     * @param coreCompetencyCompetencyViewedRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object toolLpListCoursesUsingCompetency(CoreCompetencyCompetencyViewedRequest coreCompetencyCompetencyViewedRequest) throws ApiException {
        ApiResponse<Object> localVarResp = toolLpListCoursesUsingCompetencyWithHttpInfo(coreCompetencyCompetencyViewedRequest);
        return localVarResp.getData();
    }

    /**
     * List the courses using a competency
     * List the courses using a competency
     * @param coreCompetencyCompetencyViewedRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> toolLpListCoursesUsingCompetencyWithHttpInfo(CoreCompetencyCompetencyViewedRequest coreCompetencyCompetencyViewedRequest) throws ApiException {
        okhttp3.Call localVarCall = toolLpListCoursesUsingCompetencyValidateBeforeCall(coreCompetencyCompetencyViewedRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the courses using a competency (asynchronously)
     * List the courses using a competency
     * @param coreCompetencyCompetencyViewedRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolLpListCoursesUsingCompetencyAsync(CoreCompetencyCompetencyViewedRequest coreCompetencyCompetencyViewedRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = toolLpListCoursesUsingCompetencyValidateBeforeCall(coreCompetencyCompetencyViewedRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for toolLpSearchCohorts
     * @param toolLpSearchCohortsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolLpSearchCohortsCall(ToolLpSearchCohortsRequest toolLpSearchCohortsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = toolLpSearchCohortsRequest;

        // create path and map variables
        String localVarPath = "/tool_lp_search_cohorts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call toolLpSearchCohortsValidateBeforeCall(ToolLpSearchCohortsRequest toolLpSearchCohortsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'toolLpSearchCohortsRequest' is set
        if (toolLpSearchCohortsRequest == null) {
            throw new ApiException("Missing the required parameter 'toolLpSearchCohortsRequest' when calling toolLpSearchCohorts(Async)");
        }

        return toolLpSearchCohortsCall(toolLpSearchCohortsRequest, _callback);

    }

    /**
     * Search for cohorts. This method is deprecated, please call &#39;core_cohort_search_cohorts&#39; instead
     * Search for cohorts. This method is deprecated, please call &#39;core_cohort_search_cohorts&#39; instead
     * @param toolLpSearchCohortsRequest  (required)
     * @return ToolLpSearchCohorts200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ToolLpSearchCohorts200Response toolLpSearchCohorts(ToolLpSearchCohortsRequest toolLpSearchCohortsRequest) throws ApiException {
        ApiResponse<ToolLpSearchCohorts200Response> localVarResp = toolLpSearchCohortsWithHttpInfo(toolLpSearchCohortsRequest);
        return localVarResp.getData();
    }

    /**
     * Search for cohorts. This method is deprecated, please call &#39;core_cohort_search_cohorts&#39; instead
     * Search for cohorts. This method is deprecated, please call &#39;core_cohort_search_cohorts&#39; instead
     * @param toolLpSearchCohortsRequest  (required)
     * @return ApiResponse&lt;ToolLpSearchCohorts200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ToolLpSearchCohorts200Response> toolLpSearchCohortsWithHttpInfo(ToolLpSearchCohortsRequest toolLpSearchCohortsRequest) throws ApiException {
        okhttp3.Call localVarCall = toolLpSearchCohortsValidateBeforeCall(toolLpSearchCohortsRequest, null);
        Type localVarReturnType = new TypeToken<ToolLpSearchCohorts200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search for cohorts. This method is deprecated, please call &#39;core_cohort_search_cohorts&#39; instead (asynchronously)
     * Search for cohorts. This method is deprecated, please call &#39;core_cohort_search_cohorts&#39; instead
     * @param toolLpSearchCohortsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolLpSearchCohortsAsync(ToolLpSearchCohortsRequest toolLpSearchCohortsRequest, final ApiCallback<ToolLpSearchCohorts200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = toolLpSearchCohortsValidateBeforeCall(toolLpSearchCohortsRequest, _callback);
        Type localVarReturnType = new TypeToken<ToolLpSearchCohorts200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for toolLpSearchUsers
     * @param toolLpSearchUsersRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolLpSearchUsersCall(ToolLpSearchUsersRequest toolLpSearchUsersRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = toolLpSearchUsersRequest;

        // create path and map variables
        String localVarPath = "/tool_lp_search_users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call toolLpSearchUsersValidateBeforeCall(ToolLpSearchUsersRequest toolLpSearchUsersRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'toolLpSearchUsersRequest' is set
        if (toolLpSearchUsersRequest == null) {
            throw new ApiException("Missing the required parameter 'toolLpSearchUsersRequest' when calling toolLpSearchUsers(Async)");
        }

        return toolLpSearchUsersCall(toolLpSearchUsersRequest, _callback);

    }

    /**
     * Search for users.
     * Search for users.
     * @param toolLpSearchUsersRequest  (required)
     * @return ToolLpSearchUsers200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ToolLpSearchUsers200Response toolLpSearchUsers(ToolLpSearchUsersRequest toolLpSearchUsersRequest) throws ApiException {
        ApiResponse<ToolLpSearchUsers200Response> localVarResp = toolLpSearchUsersWithHttpInfo(toolLpSearchUsersRequest);
        return localVarResp.getData();
    }

    /**
     * Search for users.
     * Search for users.
     * @param toolLpSearchUsersRequest  (required)
     * @return ApiResponse&lt;ToolLpSearchUsers200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ToolLpSearchUsers200Response> toolLpSearchUsersWithHttpInfo(ToolLpSearchUsersRequest toolLpSearchUsersRequest) throws ApiException {
        okhttp3.Call localVarCall = toolLpSearchUsersValidateBeforeCall(toolLpSearchUsersRequest, null);
        Type localVarReturnType = new TypeToken<ToolLpSearchUsers200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search for users. (asynchronously)
     * Search for users.
     * @param toolLpSearchUsersRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolLpSearchUsersAsync(ToolLpSearchUsersRequest toolLpSearchUsersRequest, final ApiCallback<ToolLpSearchUsers200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = toolLpSearchUsersValidateBeforeCall(toolLpSearchUsersRequest, _callback);
        Type localVarReturnType = new TypeToken<ToolLpSearchUsers200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
