/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.joshuapare.moodleclient;

import com.joshuapare.ApiCallback;
import com.joshuapare.ApiClient;
import com.joshuapare.ApiException;
import com.joshuapare.ApiResponse;
import com.joshuapare.Configuration;
import com.joshuapare.Pair;
import com.joshuapare.ProgressRequestBody;
import com.joshuapare.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CoreCalendarDeleteSubscription200Response;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest;
import org.openapitools.client.model.ModWorkshopAddSubmission200Response;
import org.openapitools.client.model.ModWorkshopAddSubmissionRequest;
import org.openapitools.client.model.ModWorkshopDeleteSubmission200Response;
import org.openapitools.client.model.ModWorkshopDeleteSubmissionRequest;
import org.openapitools.client.model.ModWorkshopEvaluateAssessment200Response;
import org.openapitools.client.model.ModWorkshopEvaluateAssessmentRequest;
import org.openapitools.client.model.ModWorkshopEvaluateSubmission200Response;
import org.openapitools.client.model.ModWorkshopEvaluateSubmissionRequest;
import org.openapitools.client.model.ModWorkshopGetAssessment200Response;
import org.openapitools.client.model.ModWorkshopGetAssessmentFormDefinition200Response;
import org.openapitools.client.model.ModWorkshopGetAssessmentFormDefinitionRequest;
import org.openapitools.client.model.ModWorkshopGetAssessmentRequest;
import org.openapitools.client.model.ModWorkshopGetGrades200Response;
import org.openapitools.client.model.ModWorkshopGetGradesReport200Response;
import org.openapitools.client.model.ModWorkshopGetGradesReportRequest;
import org.openapitools.client.model.ModWorkshopGetGradesRequest;
import org.openapitools.client.model.ModWorkshopGetReviewerAssessments200Response;
import org.openapitools.client.model.ModWorkshopGetReviewerAssessmentsRequest;
import org.openapitools.client.model.ModWorkshopGetSubmission200Response;
import org.openapitools.client.model.ModWorkshopGetSubmissionRequest;
import org.openapitools.client.model.ModWorkshopGetSubmissions200Response;
import org.openapitools.client.model.ModWorkshopGetSubmissionsRequest;
import org.openapitools.client.model.ModWorkshopGetUserPlan200Response;
import org.openapitools.client.model.ModWorkshopGetUserPlanRequest;
import org.openapitools.client.model.ModWorkshopGetWorkshopAccessInformation200Response;
import org.openapitools.client.model.ModWorkshopGetWorkshopAccessInformationRequest;
import org.openapitools.client.model.ModWorkshopGetWorkshopsByCourses200Response;
import org.openapitools.client.model.ModWorkshopUpdateAssessment200Response;
import org.openapitools.client.model.ModWorkshopUpdateAssessmentRequest;
import org.openapitools.client.model.ModWorkshopUpdateSubmission200Response;
import org.openapitools.client.model.ModWorkshopUpdateSubmissionRequest;
import org.openapitools.client.model.ModWorkshopViewWorkshopRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ModWorkshopApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ModWorkshopApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ModWorkshopApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for modWorkshopAddSubmission
     * @param modWorkshopAddSubmissionRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modWorkshopAddSubmissionCall(ModWorkshopAddSubmissionRequest modWorkshopAddSubmissionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modWorkshopAddSubmissionRequest;

        // create path and map variables
        String localVarPath = "/mod_workshop_add_submission";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modWorkshopAddSubmissionValidateBeforeCall(ModWorkshopAddSubmissionRequest modWorkshopAddSubmissionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modWorkshopAddSubmissionRequest' is set
        if (modWorkshopAddSubmissionRequest == null) {
            throw new ApiException("Missing the required parameter 'modWorkshopAddSubmissionRequest' when calling modWorkshopAddSubmission(Async)");
        }

        return modWorkshopAddSubmissionCall(modWorkshopAddSubmissionRequest, _callback);

    }

    /**
     * Add a new submission to a given workshop.
     * Add a new submission to a given workshop.
     * @param modWorkshopAddSubmissionRequest  (required)
     * @return ModWorkshopAddSubmission200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModWorkshopAddSubmission200Response modWorkshopAddSubmission(ModWorkshopAddSubmissionRequest modWorkshopAddSubmissionRequest) throws ApiException {
        ApiResponse<ModWorkshopAddSubmission200Response> localVarResp = modWorkshopAddSubmissionWithHttpInfo(modWorkshopAddSubmissionRequest);
        return localVarResp.getData();
    }

    /**
     * Add a new submission to a given workshop.
     * Add a new submission to a given workshop.
     * @param modWorkshopAddSubmissionRequest  (required)
     * @return ApiResponse&lt;ModWorkshopAddSubmission200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModWorkshopAddSubmission200Response> modWorkshopAddSubmissionWithHttpInfo(ModWorkshopAddSubmissionRequest modWorkshopAddSubmissionRequest) throws ApiException {
        okhttp3.Call localVarCall = modWorkshopAddSubmissionValidateBeforeCall(modWorkshopAddSubmissionRequest, null);
        Type localVarReturnType = new TypeToken<ModWorkshopAddSubmission200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a new submission to a given workshop. (asynchronously)
     * Add a new submission to a given workshop.
     * @param modWorkshopAddSubmissionRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modWorkshopAddSubmissionAsync(ModWorkshopAddSubmissionRequest modWorkshopAddSubmissionRequest, final ApiCallback<ModWorkshopAddSubmission200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modWorkshopAddSubmissionValidateBeforeCall(modWorkshopAddSubmissionRequest, _callback);
        Type localVarReturnType = new TypeToken<ModWorkshopAddSubmission200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modWorkshopDeleteSubmission
     * @param modWorkshopDeleteSubmissionRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modWorkshopDeleteSubmissionCall(ModWorkshopDeleteSubmissionRequest modWorkshopDeleteSubmissionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modWorkshopDeleteSubmissionRequest;

        // create path and map variables
        String localVarPath = "/mod_workshop_delete_submission";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modWorkshopDeleteSubmissionValidateBeforeCall(ModWorkshopDeleteSubmissionRequest modWorkshopDeleteSubmissionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modWorkshopDeleteSubmissionRequest' is set
        if (modWorkshopDeleteSubmissionRequest == null) {
            throw new ApiException("Missing the required parameter 'modWorkshopDeleteSubmissionRequest' when calling modWorkshopDeleteSubmission(Async)");
        }

        return modWorkshopDeleteSubmissionCall(modWorkshopDeleteSubmissionRequest, _callback);

    }

    /**
     * Deletes the given submission.
     * Deletes the given submission.
     * @param modWorkshopDeleteSubmissionRequest  (required)
     * @return ModWorkshopDeleteSubmission200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModWorkshopDeleteSubmission200Response modWorkshopDeleteSubmission(ModWorkshopDeleteSubmissionRequest modWorkshopDeleteSubmissionRequest) throws ApiException {
        ApiResponse<ModWorkshopDeleteSubmission200Response> localVarResp = modWorkshopDeleteSubmissionWithHttpInfo(modWorkshopDeleteSubmissionRequest);
        return localVarResp.getData();
    }

    /**
     * Deletes the given submission.
     * Deletes the given submission.
     * @param modWorkshopDeleteSubmissionRequest  (required)
     * @return ApiResponse&lt;ModWorkshopDeleteSubmission200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModWorkshopDeleteSubmission200Response> modWorkshopDeleteSubmissionWithHttpInfo(ModWorkshopDeleteSubmissionRequest modWorkshopDeleteSubmissionRequest) throws ApiException {
        okhttp3.Call localVarCall = modWorkshopDeleteSubmissionValidateBeforeCall(modWorkshopDeleteSubmissionRequest, null);
        Type localVarReturnType = new TypeToken<ModWorkshopDeleteSubmission200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deletes the given submission. (asynchronously)
     * Deletes the given submission.
     * @param modWorkshopDeleteSubmissionRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modWorkshopDeleteSubmissionAsync(ModWorkshopDeleteSubmissionRequest modWorkshopDeleteSubmissionRequest, final ApiCallback<ModWorkshopDeleteSubmission200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modWorkshopDeleteSubmissionValidateBeforeCall(modWorkshopDeleteSubmissionRequest, _callback);
        Type localVarReturnType = new TypeToken<ModWorkshopDeleteSubmission200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modWorkshopEvaluateAssessment
     * @param modWorkshopEvaluateAssessmentRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modWorkshopEvaluateAssessmentCall(ModWorkshopEvaluateAssessmentRequest modWorkshopEvaluateAssessmentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modWorkshopEvaluateAssessmentRequest;

        // create path and map variables
        String localVarPath = "/mod_workshop_evaluate_assessment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modWorkshopEvaluateAssessmentValidateBeforeCall(ModWorkshopEvaluateAssessmentRequest modWorkshopEvaluateAssessmentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modWorkshopEvaluateAssessmentRequest' is set
        if (modWorkshopEvaluateAssessmentRequest == null) {
            throw new ApiException("Missing the required parameter 'modWorkshopEvaluateAssessmentRequest' when calling modWorkshopEvaluateAssessment(Async)");
        }

        return modWorkshopEvaluateAssessmentCall(modWorkshopEvaluateAssessmentRequest, _callback);

    }

    /**
     * Evaluates an assessment (used by teachers for provide feedback to the reviewer).
     * Evaluates an assessment (used by teachers for provide feedback to the reviewer).
     * @param modWorkshopEvaluateAssessmentRequest  (required)
     * @return ModWorkshopEvaluateAssessment200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModWorkshopEvaluateAssessment200Response modWorkshopEvaluateAssessment(ModWorkshopEvaluateAssessmentRequest modWorkshopEvaluateAssessmentRequest) throws ApiException {
        ApiResponse<ModWorkshopEvaluateAssessment200Response> localVarResp = modWorkshopEvaluateAssessmentWithHttpInfo(modWorkshopEvaluateAssessmentRequest);
        return localVarResp.getData();
    }

    /**
     * Evaluates an assessment (used by teachers for provide feedback to the reviewer).
     * Evaluates an assessment (used by teachers for provide feedback to the reviewer).
     * @param modWorkshopEvaluateAssessmentRequest  (required)
     * @return ApiResponse&lt;ModWorkshopEvaluateAssessment200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModWorkshopEvaluateAssessment200Response> modWorkshopEvaluateAssessmentWithHttpInfo(ModWorkshopEvaluateAssessmentRequest modWorkshopEvaluateAssessmentRequest) throws ApiException {
        okhttp3.Call localVarCall = modWorkshopEvaluateAssessmentValidateBeforeCall(modWorkshopEvaluateAssessmentRequest, null);
        Type localVarReturnType = new TypeToken<ModWorkshopEvaluateAssessment200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Evaluates an assessment (used by teachers for provide feedback to the reviewer). (asynchronously)
     * Evaluates an assessment (used by teachers for provide feedback to the reviewer).
     * @param modWorkshopEvaluateAssessmentRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modWorkshopEvaluateAssessmentAsync(ModWorkshopEvaluateAssessmentRequest modWorkshopEvaluateAssessmentRequest, final ApiCallback<ModWorkshopEvaluateAssessment200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modWorkshopEvaluateAssessmentValidateBeforeCall(modWorkshopEvaluateAssessmentRequest, _callback);
        Type localVarReturnType = new TypeToken<ModWorkshopEvaluateAssessment200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modWorkshopEvaluateSubmission
     * @param modWorkshopEvaluateSubmissionRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modWorkshopEvaluateSubmissionCall(ModWorkshopEvaluateSubmissionRequest modWorkshopEvaluateSubmissionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modWorkshopEvaluateSubmissionRequest;

        // create path and map variables
        String localVarPath = "/mod_workshop_evaluate_submission";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modWorkshopEvaluateSubmissionValidateBeforeCall(ModWorkshopEvaluateSubmissionRequest modWorkshopEvaluateSubmissionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modWorkshopEvaluateSubmissionRequest' is set
        if (modWorkshopEvaluateSubmissionRequest == null) {
            throw new ApiException("Missing the required parameter 'modWorkshopEvaluateSubmissionRequest' when calling modWorkshopEvaluateSubmission(Async)");
        }

        return modWorkshopEvaluateSubmissionCall(modWorkshopEvaluateSubmissionRequest, _callback);

    }

    /**
     * Evaluates a submission (used by teachers for provide feedback or override the submission grade).
     * Evaluates a submission (used by teachers for provide feedback or override the submission grade).
     * @param modWorkshopEvaluateSubmissionRequest  (required)
     * @return ModWorkshopEvaluateSubmission200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModWorkshopEvaluateSubmission200Response modWorkshopEvaluateSubmission(ModWorkshopEvaluateSubmissionRequest modWorkshopEvaluateSubmissionRequest) throws ApiException {
        ApiResponse<ModWorkshopEvaluateSubmission200Response> localVarResp = modWorkshopEvaluateSubmissionWithHttpInfo(modWorkshopEvaluateSubmissionRequest);
        return localVarResp.getData();
    }

    /**
     * Evaluates a submission (used by teachers for provide feedback or override the submission grade).
     * Evaluates a submission (used by teachers for provide feedback or override the submission grade).
     * @param modWorkshopEvaluateSubmissionRequest  (required)
     * @return ApiResponse&lt;ModWorkshopEvaluateSubmission200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModWorkshopEvaluateSubmission200Response> modWorkshopEvaluateSubmissionWithHttpInfo(ModWorkshopEvaluateSubmissionRequest modWorkshopEvaluateSubmissionRequest) throws ApiException {
        okhttp3.Call localVarCall = modWorkshopEvaluateSubmissionValidateBeforeCall(modWorkshopEvaluateSubmissionRequest, null);
        Type localVarReturnType = new TypeToken<ModWorkshopEvaluateSubmission200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Evaluates a submission (used by teachers for provide feedback or override the submission grade). (asynchronously)
     * Evaluates a submission (used by teachers for provide feedback or override the submission grade).
     * @param modWorkshopEvaluateSubmissionRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modWorkshopEvaluateSubmissionAsync(ModWorkshopEvaluateSubmissionRequest modWorkshopEvaluateSubmissionRequest, final ApiCallback<ModWorkshopEvaluateSubmission200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modWorkshopEvaluateSubmissionValidateBeforeCall(modWorkshopEvaluateSubmissionRequest, _callback);
        Type localVarReturnType = new TypeToken<ModWorkshopEvaluateSubmission200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modWorkshopGetAssessment
     * @param modWorkshopGetAssessmentRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modWorkshopGetAssessmentCall(ModWorkshopGetAssessmentRequest modWorkshopGetAssessmentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modWorkshopGetAssessmentRequest;

        // create path and map variables
        String localVarPath = "/mod_workshop_get_assessment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modWorkshopGetAssessmentValidateBeforeCall(ModWorkshopGetAssessmentRequest modWorkshopGetAssessmentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modWorkshopGetAssessmentRequest' is set
        if (modWorkshopGetAssessmentRequest == null) {
            throw new ApiException("Missing the required parameter 'modWorkshopGetAssessmentRequest' when calling modWorkshopGetAssessment(Async)");
        }

        return modWorkshopGetAssessmentCall(modWorkshopGetAssessmentRequest, _callback);

    }

    /**
     * Retrieves the given assessment.
     * Retrieves the given assessment.
     * @param modWorkshopGetAssessmentRequest  (required)
     * @return ModWorkshopGetAssessment200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModWorkshopGetAssessment200Response modWorkshopGetAssessment(ModWorkshopGetAssessmentRequest modWorkshopGetAssessmentRequest) throws ApiException {
        ApiResponse<ModWorkshopGetAssessment200Response> localVarResp = modWorkshopGetAssessmentWithHttpInfo(modWorkshopGetAssessmentRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieves the given assessment.
     * Retrieves the given assessment.
     * @param modWorkshopGetAssessmentRequest  (required)
     * @return ApiResponse&lt;ModWorkshopGetAssessment200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModWorkshopGetAssessment200Response> modWorkshopGetAssessmentWithHttpInfo(ModWorkshopGetAssessmentRequest modWorkshopGetAssessmentRequest) throws ApiException {
        okhttp3.Call localVarCall = modWorkshopGetAssessmentValidateBeforeCall(modWorkshopGetAssessmentRequest, null);
        Type localVarReturnType = new TypeToken<ModWorkshopGetAssessment200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves the given assessment. (asynchronously)
     * Retrieves the given assessment.
     * @param modWorkshopGetAssessmentRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modWorkshopGetAssessmentAsync(ModWorkshopGetAssessmentRequest modWorkshopGetAssessmentRequest, final ApiCallback<ModWorkshopGetAssessment200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modWorkshopGetAssessmentValidateBeforeCall(modWorkshopGetAssessmentRequest, _callback);
        Type localVarReturnType = new TypeToken<ModWorkshopGetAssessment200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modWorkshopGetAssessmentFormDefinition
     * @param modWorkshopGetAssessmentFormDefinitionRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modWorkshopGetAssessmentFormDefinitionCall(ModWorkshopGetAssessmentFormDefinitionRequest modWorkshopGetAssessmentFormDefinitionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modWorkshopGetAssessmentFormDefinitionRequest;

        // create path and map variables
        String localVarPath = "/mod_workshop_get_assessment_form_definition";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modWorkshopGetAssessmentFormDefinitionValidateBeforeCall(ModWorkshopGetAssessmentFormDefinitionRequest modWorkshopGetAssessmentFormDefinitionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modWorkshopGetAssessmentFormDefinitionRequest' is set
        if (modWorkshopGetAssessmentFormDefinitionRequest == null) {
            throw new ApiException("Missing the required parameter 'modWorkshopGetAssessmentFormDefinitionRequest' when calling modWorkshopGetAssessmentFormDefinition(Async)");
        }

        return modWorkshopGetAssessmentFormDefinitionCall(modWorkshopGetAssessmentFormDefinitionRequest, _callback);

    }

    /**
     * Retrieves the assessment form definition.
     * Retrieves the assessment form definition.
     * @param modWorkshopGetAssessmentFormDefinitionRequest  (required)
     * @return ModWorkshopGetAssessmentFormDefinition200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModWorkshopGetAssessmentFormDefinition200Response modWorkshopGetAssessmentFormDefinition(ModWorkshopGetAssessmentFormDefinitionRequest modWorkshopGetAssessmentFormDefinitionRequest) throws ApiException {
        ApiResponse<ModWorkshopGetAssessmentFormDefinition200Response> localVarResp = modWorkshopGetAssessmentFormDefinitionWithHttpInfo(modWorkshopGetAssessmentFormDefinitionRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieves the assessment form definition.
     * Retrieves the assessment form definition.
     * @param modWorkshopGetAssessmentFormDefinitionRequest  (required)
     * @return ApiResponse&lt;ModWorkshopGetAssessmentFormDefinition200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModWorkshopGetAssessmentFormDefinition200Response> modWorkshopGetAssessmentFormDefinitionWithHttpInfo(ModWorkshopGetAssessmentFormDefinitionRequest modWorkshopGetAssessmentFormDefinitionRequest) throws ApiException {
        okhttp3.Call localVarCall = modWorkshopGetAssessmentFormDefinitionValidateBeforeCall(modWorkshopGetAssessmentFormDefinitionRequest, null);
        Type localVarReturnType = new TypeToken<ModWorkshopGetAssessmentFormDefinition200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves the assessment form definition. (asynchronously)
     * Retrieves the assessment form definition.
     * @param modWorkshopGetAssessmentFormDefinitionRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modWorkshopGetAssessmentFormDefinitionAsync(ModWorkshopGetAssessmentFormDefinitionRequest modWorkshopGetAssessmentFormDefinitionRequest, final ApiCallback<ModWorkshopGetAssessmentFormDefinition200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modWorkshopGetAssessmentFormDefinitionValidateBeforeCall(modWorkshopGetAssessmentFormDefinitionRequest, _callback);
        Type localVarReturnType = new TypeToken<ModWorkshopGetAssessmentFormDefinition200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modWorkshopGetGrades
     * @param modWorkshopGetGradesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modWorkshopGetGradesCall(ModWorkshopGetGradesRequest modWorkshopGetGradesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modWorkshopGetGradesRequest;

        // create path and map variables
        String localVarPath = "/mod_workshop_get_grades";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modWorkshopGetGradesValidateBeforeCall(ModWorkshopGetGradesRequest modWorkshopGetGradesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modWorkshopGetGradesRequest' is set
        if (modWorkshopGetGradesRequest == null) {
            throw new ApiException("Missing the required parameter 'modWorkshopGetGradesRequest' when calling modWorkshopGetGrades(Async)");
        }

        return modWorkshopGetGradesCall(modWorkshopGetGradesRequest, _callback);

    }

    /**
     * Returns the assessment and submission grade for the given user.
     * Returns the assessment and submission grade for the given user.
     * @param modWorkshopGetGradesRequest  (required)
     * @return ModWorkshopGetGrades200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModWorkshopGetGrades200Response modWorkshopGetGrades(ModWorkshopGetGradesRequest modWorkshopGetGradesRequest) throws ApiException {
        ApiResponse<ModWorkshopGetGrades200Response> localVarResp = modWorkshopGetGradesWithHttpInfo(modWorkshopGetGradesRequest);
        return localVarResp.getData();
    }

    /**
     * Returns the assessment and submission grade for the given user.
     * Returns the assessment and submission grade for the given user.
     * @param modWorkshopGetGradesRequest  (required)
     * @return ApiResponse&lt;ModWorkshopGetGrades200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModWorkshopGetGrades200Response> modWorkshopGetGradesWithHttpInfo(ModWorkshopGetGradesRequest modWorkshopGetGradesRequest) throws ApiException {
        okhttp3.Call localVarCall = modWorkshopGetGradesValidateBeforeCall(modWorkshopGetGradesRequest, null);
        Type localVarReturnType = new TypeToken<ModWorkshopGetGrades200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the assessment and submission grade for the given user. (asynchronously)
     * Returns the assessment and submission grade for the given user.
     * @param modWorkshopGetGradesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modWorkshopGetGradesAsync(ModWorkshopGetGradesRequest modWorkshopGetGradesRequest, final ApiCallback<ModWorkshopGetGrades200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modWorkshopGetGradesValidateBeforeCall(modWorkshopGetGradesRequest, _callback);
        Type localVarReturnType = new TypeToken<ModWorkshopGetGrades200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modWorkshopGetGradesReport
     * @param modWorkshopGetGradesReportRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modWorkshopGetGradesReportCall(ModWorkshopGetGradesReportRequest modWorkshopGetGradesReportRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modWorkshopGetGradesReportRequest;

        // create path and map variables
        String localVarPath = "/mod_workshop_get_grades_report";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modWorkshopGetGradesReportValidateBeforeCall(ModWorkshopGetGradesReportRequest modWorkshopGetGradesReportRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modWorkshopGetGradesReportRequest' is set
        if (modWorkshopGetGradesReportRequest == null) {
            throw new ApiException("Missing the required parameter 'modWorkshopGetGradesReportRequest' when calling modWorkshopGetGradesReport(Async)");
        }

        return modWorkshopGetGradesReportCall(modWorkshopGetGradesReportRequest, _callback);

    }

    /**
     * Retrieves the assessment grades report.
     * Retrieves the assessment grades report.
     * @param modWorkshopGetGradesReportRequest  (required)
     * @return ModWorkshopGetGradesReport200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModWorkshopGetGradesReport200Response modWorkshopGetGradesReport(ModWorkshopGetGradesReportRequest modWorkshopGetGradesReportRequest) throws ApiException {
        ApiResponse<ModWorkshopGetGradesReport200Response> localVarResp = modWorkshopGetGradesReportWithHttpInfo(modWorkshopGetGradesReportRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieves the assessment grades report.
     * Retrieves the assessment grades report.
     * @param modWorkshopGetGradesReportRequest  (required)
     * @return ApiResponse&lt;ModWorkshopGetGradesReport200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModWorkshopGetGradesReport200Response> modWorkshopGetGradesReportWithHttpInfo(ModWorkshopGetGradesReportRequest modWorkshopGetGradesReportRequest) throws ApiException {
        okhttp3.Call localVarCall = modWorkshopGetGradesReportValidateBeforeCall(modWorkshopGetGradesReportRequest, null);
        Type localVarReturnType = new TypeToken<ModWorkshopGetGradesReport200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves the assessment grades report. (asynchronously)
     * Retrieves the assessment grades report.
     * @param modWorkshopGetGradesReportRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modWorkshopGetGradesReportAsync(ModWorkshopGetGradesReportRequest modWorkshopGetGradesReportRequest, final ApiCallback<ModWorkshopGetGradesReport200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modWorkshopGetGradesReportValidateBeforeCall(modWorkshopGetGradesReportRequest, _callback);
        Type localVarReturnType = new TypeToken<ModWorkshopGetGradesReport200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modWorkshopGetReviewerAssessments
     * @param modWorkshopGetReviewerAssessmentsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modWorkshopGetReviewerAssessmentsCall(ModWorkshopGetReviewerAssessmentsRequest modWorkshopGetReviewerAssessmentsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modWorkshopGetReviewerAssessmentsRequest;

        // create path and map variables
        String localVarPath = "/mod_workshop_get_reviewer_assessments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modWorkshopGetReviewerAssessmentsValidateBeforeCall(ModWorkshopGetReviewerAssessmentsRequest modWorkshopGetReviewerAssessmentsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modWorkshopGetReviewerAssessmentsRequest' is set
        if (modWorkshopGetReviewerAssessmentsRequest == null) {
            throw new ApiException("Missing the required parameter 'modWorkshopGetReviewerAssessmentsRequest' when calling modWorkshopGetReviewerAssessments(Async)");
        }

        return modWorkshopGetReviewerAssessmentsCall(modWorkshopGetReviewerAssessmentsRequest, _callback);

    }

    /**
     * Retrieves all the assessments reviewed by the given user.
     * Retrieves all the assessments reviewed by the given user.
     * @param modWorkshopGetReviewerAssessmentsRequest  (required)
     * @return ModWorkshopGetReviewerAssessments200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModWorkshopGetReviewerAssessments200Response modWorkshopGetReviewerAssessments(ModWorkshopGetReviewerAssessmentsRequest modWorkshopGetReviewerAssessmentsRequest) throws ApiException {
        ApiResponse<ModWorkshopGetReviewerAssessments200Response> localVarResp = modWorkshopGetReviewerAssessmentsWithHttpInfo(modWorkshopGetReviewerAssessmentsRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieves all the assessments reviewed by the given user.
     * Retrieves all the assessments reviewed by the given user.
     * @param modWorkshopGetReviewerAssessmentsRequest  (required)
     * @return ApiResponse&lt;ModWorkshopGetReviewerAssessments200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModWorkshopGetReviewerAssessments200Response> modWorkshopGetReviewerAssessmentsWithHttpInfo(ModWorkshopGetReviewerAssessmentsRequest modWorkshopGetReviewerAssessmentsRequest) throws ApiException {
        okhttp3.Call localVarCall = modWorkshopGetReviewerAssessmentsValidateBeforeCall(modWorkshopGetReviewerAssessmentsRequest, null);
        Type localVarReturnType = new TypeToken<ModWorkshopGetReviewerAssessments200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves all the assessments reviewed by the given user. (asynchronously)
     * Retrieves all the assessments reviewed by the given user.
     * @param modWorkshopGetReviewerAssessmentsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modWorkshopGetReviewerAssessmentsAsync(ModWorkshopGetReviewerAssessmentsRequest modWorkshopGetReviewerAssessmentsRequest, final ApiCallback<ModWorkshopGetReviewerAssessments200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modWorkshopGetReviewerAssessmentsValidateBeforeCall(modWorkshopGetReviewerAssessmentsRequest, _callback);
        Type localVarReturnType = new TypeToken<ModWorkshopGetReviewerAssessments200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modWorkshopGetSubmission
     * @param modWorkshopGetSubmissionRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modWorkshopGetSubmissionCall(ModWorkshopGetSubmissionRequest modWorkshopGetSubmissionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modWorkshopGetSubmissionRequest;

        // create path and map variables
        String localVarPath = "/mod_workshop_get_submission";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modWorkshopGetSubmissionValidateBeforeCall(ModWorkshopGetSubmissionRequest modWorkshopGetSubmissionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modWorkshopGetSubmissionRequest' is set
        if (modWorkshopGetSubmissionRequest == null) {
            throw new ApiException("Missing the required parameter 'modWorkshopGetSubmissionRequest' when calling modWorkshopGetSubmission(Async)");
        }

        return modWorkshopGetSubmissionCall(modWorkshopGetSubmissionRequest, _callback);

    }

    /**
     * Retrieves the given submission.
     * Retrieves the given submission.
     * @param modWorkshopGetSubmissionRequest  (required)
     * @return ModWorkshopGetSubmission200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModWorkshopGetSubmission200Response modWorkshopGetSubmission(ModWorkshopGetSubmissionRequest modWorkshopGetSubmissionRequest) throws ApiException {
        ApiResponse<ModWorkshopGetSubmission200Response> localVarResp = modWorkshopGetSubmissionWithHttpInfo(modWorkshopGetSubmissionRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieves the given submission.
     * Retrieves the given submission.
     * @param modWorkshopGetSubmissionRequest  (required)
     * @return ApiResponse&lt;ModWorkshopGetSubmission200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModWorkshopGetSubmission200Response> modWorkshopGetSubmissionWithHttpInfo(ModWorkshopGetSubmissionRequest modWorkshopGetSubmissionRequest) throws ApiException {
        okhttp3.Call localVarCall = modWorkshopGetSubmissionValidateBeforeCall(modWorkshopGetSubmissionRequest, null);
        Type localVarReturnType = new TypeToken<ModWorkshopGetSubmission200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves the given submission. (asynchronously)
     * Retrieves the given submission.
     * @param modWorkshopGetSubmissionRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modWorkshopGetSubmissionAsync(ModWorkshopGetSubmissionRequest modWorkshopGetSubmissionRequest, final ApiCallback<ModWorkshopGetSubmission200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modWorkshopGetSubmissionValidateBeforeCall(modWorkshopGetSubmissionRequest, _callback);
        Type localVarReturnType = new TypeToken<ModWorkshopGetSubmission200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modWorkshopGetSubmissionAssessments
     * @param modWorkshopGetSubmissionRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modWorkshopGetSubmissionAssessmentsCall(ModWorkshopGetSubmissionRequest modWorkshopGetSubmissionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modWorkshopGetSubmissionRequest;

        // create path and map variables
        String localVarPath = "/mod_workshop_get_submission_assessments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modWorkshopGetSubmissionAssessmentsValidateBeforeCall(ModWorkshopGetSubmissionRequest modWorkshopGetSubmissionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modWorkshopGetSubmissionRequest' is set
        if (modWorkshopGetSubmissionRequest == null) {
            throw new ApiException("Missing the required parameter 'modWorkshopGetSubmissionRequest' when calling modWorkshopGetSubmissionAssessments(Async)");
        }

        return modWorkshopGetSubmissionAssessmentsCall(modWorkshopGetSubmissionRequest, _callback);

    }

    /**
     * Retrieves all the assessments of the given submission.
     * Retrieves all the assessments of the given submission.
     * @param modWorkshopGetSubmissionRequest  (required)
     * @return ModWorkshopGetReviewerAssessments200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModWorkshopGetReviewerAssessments200Response modWorkshopGetSubmissionAssessments(ModWorkshopGetSubmissionRequest modWorkshopGetSubmissionRequest) throws ApiException {
        ApiResponse<ModWorkshopGetReviewerAssessments200Response> localVarResp = modWorkshopGetSubmissionAssessmentsWithHttpInfo(modWorkshopGetSubmissionRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieves all the assessments of the given submission.
     * Retrieves all the assessments of the given submission.
     * @param modWorkshopGetSubmissionRequest  (required)
     * @return ApiResponse&lt;ModWorkshopGetReviewerAssessments200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModWorkshopGetReviewerAssessments200Response> modWorkshopGetSubmissionAssessmentsWithHttpInfo(ModWorkshopGetSubmissionRequest modWorkshopGetSubmissionRequest) throws ApiException {
        okhttp3.Call localVarCall = modWorkshopGetSubmissionAssessmentsValidateBeforeCall(modWorkshopGetSubmissionRequest, null);
        Type localVarReturnType = new TypeToken<ModWorkshopGetReviewerAssessments200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves all the assessments of the given submission. (asynchronously)
     * Retrieves all the assessments of the given submission.
     * @param modWorkshopGetSubmissionRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modWorkshopGetSubmissionAssessmentsAsync(ModWorkshopGetSubmissionRequest modWorkshopGetSubmissionRequest, final ApiCallback<ModWorkshopGetReviewerAssessments200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modWorkshopGetSubmissionAssessmentsValidateBeforeCall(modWorkshopGetSubmissionRequest, _callback);
        Type localVarReturnType = new TypeToken<ModWorkshopGetReviewerAssessments200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modWorkshopGetSubmissions
     * @param modWorkshopGetSubmissionsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modWorkshopGetSubmissionsCall(ModWorkshopGetSubmissionsRequest modWorkshopGetSubmissionsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modWorkshopGetSubmissionsRequest;

        // create path and map variables
        String localVarPath = "/mod_workshop_get_submissions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modWorkshopGetSubmissionsValidateBeforeCall(ModWorkshopGetSubmissionsRequest modWorkshopGetSubmissionsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modWorkshopGetSubmissionsRequest' is set
        if (modWorkshopGetSubmissionsRequest == null) {
            throw new ApiException("Missing the required parameter 'modWorkshopGetSubmissionsRequest' when calling modWorkshopGetSubmissions(Async)");
        }

        return modWorkshopGetSubmissionsCall(modWorkshopGetSubmissionsRequest, _callback);

    }

    /**
     * Retrieves all the workshop submissions or the one done by the given user (except example submissions).
     * Retrieves all the workshop submissions or the one done by the given user (except example submissions).
     * @param modWorkshopGetSubmissionsRequest  (required)
     * @return ModWorkshopGetSubmissions200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModWorkshopGetSubmissions200Response modWorkshopGetSubmissions(ModWorkshopGetSubmissionsRequest modWorkshopGetSubmissionsRequest) throws ApiException {
        ApiResponse<ModWorkshopGetSubmissions200Response> localVarResp = modWorkshopGetSubmissionsWithHttpInfo(modWorkshopGetSubmissionsRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieves all the workshop submissions or the one done by the given user (except example submissions).
     * Retrieves all the workshop submissions or the one done by the given user (except example submissions).
     * @param modWorkshopGetSubmissionsRequest  (required)
     * @return ApiResponse&lt;ModWorkshopGetSubmissions200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModWorkshopGetSubmissions200Response> modWorkshopGetSubmissionsWithHttpInfo(ModWorkshopGetSubmissionsRequest modWorkshopGetSubmissionsRequest) throws ApiException {
        okhttp3.Call localVarCall = modWorkshopGetSubmissionsValidateBeforeCall(modWorkshopGetSubmissionsRequest, null);
        Type localVarReturnType = new TypeToken<ModWorkshopGetSubmissions200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves all the workshop submissions or the one done by the given user (except example submissions). (asynchronously)
     * Retrieves all the workshop submissions or the one done by the given user (except example submissions).
     * @param modWorkshopGetSubmissionsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modWorkshopGetSubmissionsAsync(ModWorkshopGetSubmissionsRequest modWorkshopGetSubmissionsRequest, final ApiCallback<ModWorkshopGetSubmissions200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modWorkshopGetSubmissionsValidateBeforeCall(modWorkshopGetSubmissionsRequest, _callback);
        Type localVarReturnType = new TypeToken<ModWorkshopGetSubmissions200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modWorkshopGetUserPlan
     * @param modWorkshopGetUserPlanRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modWorkshopGetUserPlanCall(ModWorkshopGetUserPlanRequest modWorkshopGetUserPlanRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modWorkshopGetUserPlanRequest;

        // create path and map variables
        String localVarPath = "/mod_workshop_get_user_plan";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modWorkshopGetUserPlanValidateBeforeCall(ModWorkshopGetUserPlanRequest modWorkshopGetUserPlanRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modWorkshopGetUserPlanRequest' is set
        if (modWorkshopGetUserPlanRequest == null) {
            throw new ApiException("Missing the required parameter 'modWorkshopGetUserPlanRequest' when calling modWorkshopGetUserPlan(Async)");
        }

        return modWorkshopGetUserPlanCall(modWorkshopGetUserPlanRequest, _callback);

    }

    /**
     * Return the planner information for the given user.
     * Return the planner information for the given user.
     * @param modWorkshopGetUserPlanRequest  (required)
     * @return ModWorkshopGetUserPlan200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModWorkshopGetUserPlan200Response modWorkshopGetUserPlan(ModWorkshopGetUserPlanRequest modWorkshopGetUserPlanRequest) throws ApiException {
        ApiResponse<ModWorkshopGetUserPlan200Response> localVarResp = modWorkshopGetUserPlanWithHttpInfo(modWorkshopGetUserPlanRequest);
        return localVarResp.getData();
    }

    /**
     * Return the planner information for the given user.
     * Return the planner information for the given user.
     * @param modWorkshopGetUserPlanRequest  (required)
     * @return ApiResponse&lt;ModWorkshopGetUserPlan200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModWorkshopGetUserPlan200Response> modWorkshopGetUserPlanWithHttpInfo(ModWorkshopGetUserPlanRequest modWorkshopGetUserPlanRequest) throws ApiException {
        okhttp3.Call localVarCall = modWorkshopGetUserPlanValidateBeforeCall(modWorkshopGetUserPlanRequest, null);
        Type localVarReturnType = new TypeToken<ModWorkshopGetUserPlan200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the planner information for the given user. (asynchronously)
     * Return the planner information for the given user.
     * @param modWorkshopGetUserPlanRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modWorkshopGetUserPlanAsync(ModWorkshopGetUserPlanRequest modWorkshopGetUserPlanRequest, final ApiCallback<ModWorkshopGetUserPlan200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modWorkshopGetUserPlanValidateBeforeCall(modWorkshopGetUserPlanRequest, _callback);
        Type localVarReturnType = new TypeToken<ModWorkshopGetUserPlan200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modWorkshopGetWorkshopAccessInformation
     * @param modWorkshopGetWorkshopAccessInformationRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modWorkshopGetWorkshopAccessInformationCall(ModWorkshopGetWorkshopAccessInformationRequest modWorkshopGetWorkshopAccessInformationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modWorkshopGetWorkshopAccessInformationRequest;

        // create path and map variables
        String localVarPath = "/mod_workshop_get_workshop_access_information";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modWorkshopGetWorkshopAccessInformationValidateBeforeCall(ModWorkshopGetWorkshopAccessInformationRequest modWorkshopGetWorkshopAccessInformationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modWorkshopGetWorkshopAccessInformationRequest' is set
        if (modWorkshopGetWorkshopAccessInformationRequest == null) {
            throw new ApiException("Missing the required parameter 'modWorkshopGetWorkshopAccessInformationRequest' when calling modWorkshopGetWorkshopAccessInformation(Async)");
        }

        return modWorkshopGetWorkshopAccessInformationCall(modWorkshopGetWorkshopAccessInformationRequest, _callback);

    }

    /**
     * Return access information for a given workshop.
     * Return access information for a given workshop.
     * @param modWorkshopGetWorkshopAccessInformationRequest  (required)
     * @return ModWorkshopGetWorkshopAccessInformation200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModWorkshopGetWorkshopAccessInformation200Response modWorkshopGetWorkshopAccessInformation(ModWorkshopGetWorkshopAccessInformationRequest modWorkshopGetWorkshopAccessInformationRequest) throws ApiException {
        ApiResponse<ModWorkshopGetWorkshopAccessInformation200Response> localVarResp = modWorkshopGetWorkshopAccessInformationWithHttpInfo(modWorkshopGetWorkshopAccessInformationRequest);
        return localVarResp.getData();
    }

    /**
     * Return access information for a given workshop.
     * Return access information for a given workshop.
     * @param modWorkshopGetWorkshopAccessInformationRequest  (required)
     * @return ApiResponse&lt;ModWorkshopGetWorkshopAccessInformation200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModWorkshopGetWorkshopAccessInformation200Response> modWorkshopGetWorkshopAccessInformationWithHttpInfo(ModWorkshopGetWorkshopAccessInformationRequest modWorkshopGetWorkshopAccessInformationRequest) throws ApiException {
        okhttp3.Call localVarCall = modWorkshopGetWorkshopAccessInformationValidateBeforeCall(modWorkshopGetWorkshopAccessInformationRequest, null);
        Type localVarReturnType = new TypeToken<ModWorkshopGetWorkshopAccessInformation200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return access information for a given workshop. (asynchronously)
     * Return access information for a given workshop.
     * @param modWorkshopGetWorkshopAccessInformationRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modWorkshopGetWorkshopAccessInformationAsync(ModWorkshopGetWorkshopAccessInformationRequest modWorkshopGetWorkshopAccessInformationRequest, final ApiCallback<ModWorkshopGetWorkshopAccessInformation200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modWorkshopGetWorkshopAccessInformationValidateBeforeCall(modWorkshopGetWorkshopAccessInformationRequest, _callback);
        Type localVarReturnType = new TypeToken<ModWorkshopGetWorkshopAccessInformation200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modWorkshopGetWorkshopsByCourses
     * @param modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modWorkshopGetWorkshopsByCoursesCall(ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest;

        // create path and map variables
        String localVarPath = "/mod_workshop_get_workshops_by_courses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modWorkshopGetWorkshopsByCoursesValidateBeforeCall(ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest' is set
        if (modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest == null) {
            throw new ApiException("Missing the required parameter 'modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest' when calling modWorkshopGetWorkshopsByCourses(Async)");
        }

        return modWorkshopGetWorkshopsByCoursesCall(modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest, _callback);

    }

    /**
     * Returns a list of workshops in a provided list of courses, if no list is provided all workshops that                             the user can view will be returned.
     * Returns a list of workshops in a provided list of courses, if no list is provided all workshops that                             the user can view will be returned.
     * @param modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest  (required)
     * @return ModWorkshopGetWorkshopsByCourses200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModWorkshopGetWorkshopsByCourses200Response modWorkshopGetWorkshopsByCourses(ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest) throws ApiException {
        ApiResponse<ModWorkshopGetWorkshopsByCourses200Response> localVarResp = modWorkshopGetWorkshopsByCoursesWithHttpInfo(modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest);
        return localVarResp.getData();
    }

    /**
     * Returns a list of workshops in a provided list of courses, if no list is provided all workshops that                             the user can view will be returned.
     * Returns a list of workshops in a provided list of courses, if no list is provided all workshops that                             the user can view will be returned.
     * @param modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest  (required)
     * @return ApiResponse&lt;ModWorkshopGetWorkshopsByCourses200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModWorkshopGetWorkshopsByCourses200Response> modWorkshopGetWorkshopsByCoursesWithHttpInfo(ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest) throws ApiException {
        okhttp3.Call localVarCall = modWorkshopGetWorkshopsByCoursesValidateBeforeCall(modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest, null);
        Type localVarReturnType = new TypeToken<ModWorkshopGetWorkshopsByCourses200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a list of workshops in a provided list of courses, if no list is provided all workshops that                             the user can view will be returned. (asynchronously)
     * Returns a list of workshops in a provided list of courses, if no list is provided all workshops that                             the user can view will be returned.
     * @param modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modWorkshopGetWorkshopsByCoursesAsync(ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest, final ApiCallback<ModWorkshopGetWorkshopsByCourses200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modWorkshopGetWorkshopsByCoursesValidateBeforeCall(modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest, _callback);
        Type localVarReturnType = new TypeToken<ModWorkshopGetWorkshopsByCourses200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modWorkshopUpdateAssessment
     * @param modWorkshopUpdateAssessmentRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modWorkshopUpdateAssessmentCall(ModWorkshopUpdateAssessmentRequest modWorkshopUpdateAssessmentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modWorkshopUpdateAssessmentRequest;

        // create path and map variables
        String localVarPath = "/mod_workshop_update_assessment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modWorkshopUpdateAssessmentValidateBeforeCall(ModWorkshopUpdateAssessmentRequest modWorkshopUpdateAssessmentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modWorkshopUpdateAssessmentRequest' is set
        if (modWorkshopUpdateAssessmentRequest == null) {
            throw new ApiException("Missing the required parameter 'modWorkshopUpdateAssessmentRequest' when calling modWorkshopUpdateAssessment(Async)");
        }

        return modWorkshopUpdateAssessmentCall(modWorkshopUpdateAssessmentRequest, _callback);

    }

    /**
     * Add information to an allocated assessment.
     * Add information to an allocated assessment.
     * @param modWorkshopUpdateAssessmentRequest  (required)
     * @return ModWorkshopUpdateAssessment200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModWorkshopUpdateAssessment200Response modWorkshopUpdateAssessment(ModWorkshopUpdateAssessmentRequest modWorkshopUpdateAssessmentRequest) throws ApiException {
        ApiResponse<ModWorkshopUpdateAssessment200Response> localVarResp = modWorkshopUpdateAssessmentWithHttpInfo(modWorkshopUpdateAssessmentRequest);
        return localVarResp.getData();
    }

    /**
     * Add information to an allocated assessment.
     * Add information to an allocated assessment.
     * @param modWorkshopUpdateAssessmentRequest  (required)
     * @return ApiResponse&lt;ModWorkshopUpdateAssessment200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModWorkshopUpdateAssessment200Response> modWorkshopUpdateAssessmentWithHttpInfo(ModWorkshopUpdateAssessmentRequest modWorkshopUpdateAssessmentRequest) throws ApiException {
        okhttp3.Call localVarCall = modWorkshopUpdateAssessmentValidateBeforeCall(modWorkshopUpdateAssessmentRequest, null);
        Type localVarReturnType = new TypeToken<ModWorkshopUpdateAssessment200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add information to an allocated assessment. (asynchronously)
     * Add information to an allocated assessment.
     * @param modWorkshopUpdateAssessmentRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modWorkshopUpdateAssessmentAsync(ModWorkshopUpdateAssessmentRequest modWorkshopUpdateAssessmentRequest, final ApiCallback<ModWorkshopUpdateAssessment200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modWorkshopUpdateAssessmentValidateBeforeCall(modWorkshopUpdateAssessmentRequest, _callback);
        Type localVarReturnType = new TypeToken<ModWorkshopUpdateAssessment200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modWorkshopUpdateSubmission
     * @param modWorkshopUpdateSubmissionRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modWorkshopUpdateSubmissionCall(ModWorkshopUpdateSubmissionRequest modWorkshopUpdateSubmissionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modWorkshopUpdateSubmissionRequest;

        // create path and map variables
        String localVarPath = "/mod_workshop_update_submission";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modWorkshopUpdateSubmissionValidateBeforeCall(ModWorkshopUpdateSubmissionRequest modWorkshopUpdateSubmissionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modWorkshopUpdateSubmissionRequest' is set
        if (modWorkshopUpdateSubmissionRequest == null) {
            throw new ApiException("Missing the required parameter 'modWorkshopUpdateSubmissionRequest' when calling modWorkshopUpdateSubmission(Async)");
        }

        return modWorkshopUpdateSubmissionCall(modWorkshopUpdateSubmissionRequest, _callback);

    }

    /**
     * Update the given submission.
     * Update the given submission.
     * @param modWorkshopUpdateSubmissionRequest  (required)
     * @return ModWorkshopUpdateSubmission200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModWorkshopUpdateSubmission200Response modWorkshopUpdateSubmission(ModWorkshopUpdateSubmissionRequest modWorkshopUpdateSubmissionRequest) throws ApiException {
        ApiResponse<ModWorkshopUpdateSubmission200Response> localVarResp = modWorkshopUpdateSubmissionWithHttpInfo(modWorkshopUpdateSubmissionRequest);
        return localVarResp.getData();
    }

    /**
     * Update the given submission.
     * Update the given submission.
     * @param modWorkshopUpdateSubmissionRequest  (required)
     * @return ApiResponse&lt;ModWorkshopUpdateSubmission200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModWorkshopUpdateSubmission200Response> modWorkshopUpdateSubmissionWithHttpInfo(ModWorkshopUpdateSubmissionRequest modWorkshopUpdateSubmissionRequest) throws ApiException {
        okhttp3.Call localVarCall = modWorkshopUpdateSubmissionValidateBeforeCall(modWorkshopUpdateSubmissionRequest, null);
        Type localVarReturnType = new TypeToken<ModWorkshopUpdateSubmission200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the given submission. (asynchronously)
     * Update the given submission.
     * @param modWorkshopUpdateSubmissionRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modWorkshopUpdateSubmissionAsync(ModWorkshopUpdateSubmissionRequest modWorkshopUpdateSubmissionRequest, final ApiCallback<ModWorkshopUpdateSubmission200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modWorkshopUpdateSubmissionValidateBeforeCall(modWorkshopUpdateSubmissionRequest, _callback);
        Type localVarReturnType = new TypeToken<ModWorkshopUpdateSubmission200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modWorkshopViewSubmission
     * @param modWorkshopGetSubmissionRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modWorkshopViewSubmissionCall(ModWorkshopGetSubmissionRequest modWorkshopGetSubmissionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modWorkshopGetSubmissionRequest;

        // create path and map variables
        String localVarPath = "/mod_workshop_view_submission";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modWorkshopViewSubmissionValidateBeforeCall(ModWorkshopGetSubmissionRequest modWorkshopGetSubmissionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modWorkshopGetSubmissionRequest' is set
        if (modWorkshopGetSubmissionRequest == null) {
            throw new ApiException("Missing the required parameter 'modWorkshopGetSubmissionRequest' when calling modWorkshopViewSubmission(Async)");
        }

        return modWorkshopViewSubmissionCall(modWorkshopGetSubmissionRequest, _callback);

    }

    /**
     * Trigger the submission viewed event.
     * Trigger the submission viewed event.
     * @param modWorkshopGetSubmissionRequest  (required)
     * @return CoreCalendarDeleteSubscription200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreCalendarDeleteSubscription200Response modWorkshopViewSubmission(ModWorkshopGetSubmissionRequest modWorkshopGetSubmissionRequest) throws ApiException {
        ApiResponse<CoreCalendarDeleteSubscription200Response> localVarResp = modWorkshopViewSubmissionWithHttpInfo(modWorkshopGetSubmissionRequest);
        return localVarResp.getData();
    }

    /**
     * Trigger the submission viewed event.
     * Trigger the submission viewed event.
     * @param modWorkshopGetSubmissionRequest  (required)
     * @return ApiResponse&lt;CoreCalendarDeleteSubscription200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreCalendarDeleteSubscription200Response> modWorkshopViewSubmissionWithHttpInfo(ModWorkshopGetSubmissionRequest modWorkshopGetSubmissionRequest) throws ApiException {
        okhttp3.Call localVarCall = modWorkshopViewSubmissionValidateBeforeCall(modWorkshopGetSubmissionRequest, null);
        Type localVarReturnType = new TypeToken<CoreCalendarDeleteSubscription200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Trigger the submission viewed event. (asynchronously)
     * Trigger the submission viewed event.
     * @param modWorkshopGetSubmissionRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modWorkshopViewSubmissionAsync(ModWorkshopGetSubmissionRequest modWorkshopGetSubmissionRequest, final ApiCallback<CoreCalendarDeleteSubscription200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modWorkshopViewSubmissionValidateBeforeCall(modWorkshopGetSubmissionRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreCalendarDeleteSubscription200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modWorkshopViewWorkshop
     * @param modWorkshopViewWorkshopRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modWorkshopViewWorkshopCall(ModWorkshopViewWorkshopRequest modWorkshopViewWorkshopRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modWorkshopViewWorkshopRequest;

        // create path and map variables
        String localVarPath = "/mod_workshop_view_workshop";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modWorkshopViewWorkshopValidateBeforeCall(ModWorkshopViewWorkshopRequest modWorkshopViewWorkshopRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modWorkshopViewWorkshopRequest' is set
        if (modWorkshopViewWorkshopRequest == null) {
            throw new ApiException("Missing the required parameter 'modWorkshopViewWorkshopRequest' when calling modWorkshopViewWorkshop(Async)");
        }

        return modWorkshopViewWorkshopCall(modWorkshopViewWorkshopRequest, _callback);

    }

    /**
     * Trigger the course module viewed event and update the module completion status.
     * Trigger the course module viewed event and update the module completion status.
     * @param modWorkshopViewWorkshopRequest  (required)
     * @return CoreCalendarDeleteSubscription200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreCalendarDeleteSubscription200Response modWorkshopViewWorkshop(ModWorkshopViewWorkshopRequest modWorkshopViewWorkshopRequest) throws ApiException {
        ApiResponse<CoreCalendarDeleteSubscription200Response> localVarResp = modWorkshopViewWorkshopWithHttpInfo(modWorkshopViewWorkshopRequest);
        return localVarResp.getData();
    }

    /**
     * Trigger the course module viewed event and update the module completion status.
     * Trigger the course module viewed event and update the module completion status.
     * @param modWorkshopViewWorkshopRequest  (required)
     * @return ApiResponse&lt;CoreCalendarDeleteSubscription200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreCalendarDeleteSubscription200Response> modWorkshopViewWorkshopWithHttpInfo(ModWorkshopViewWorkshopRequest modWorkshopViewWorkshopRequest) throws ApiException {
        okhttp3.Call localVarCall = modWorkshopViewWorkshopValidateBeforeCall(modWorkshopViewWorkshopRequest, null);
        Type localVarReturnType = new TypeToken<CoreCalendarDeleteSubscription200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Trigger the course module viewed event and update the module completion status. (asynchronously)
     * Trigger the course module viewed event and update the module completion status.
     * @param modWorkshopViewWorkshopRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modWorkshopViewWorkshopAsync(ModWorkshopViewWorkshopRequest modWorkshopViewWorkshopRequest, final ApiCallback<CoreCalendarDeleteSubscription200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modWorkshopViewWorkshopValidateBeforeCall(modWorkshopViewWorkshopRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreCalendarDeleteSubscription200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
