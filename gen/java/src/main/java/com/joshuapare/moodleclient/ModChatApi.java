/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.joshuapare.moodleclient;

import com.joshuapare.ApiCallback;
import com.joshuapare.ApiClient;
import com.joshuapare.ApiException;
import com.joshuapare.ApiResponse;
import com.joshuapare.Configuration;
import com.joshuapare.Pair;
import com.joshuapare.ProgressRequestBody;
import com.joshuapare.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CoreCalendarDeleteSubscription200Response;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.ModChatGetChatLatestMessages200Response;
import org.openapitools.client.model.ModChatGetChatLatestMessagesRequest;
import org.openapitools.client.model.ModChatGetChatUsers200Response;
import org.openapitools.client.model.ModChatGetChatUsersRequest;
import org.openapitools.client.model.ModChatGetChatsByCourses200Response;
import org.openapitools.client.model.ModChatGetChatsByCoursesRequest;
import org.openapitools.client.model.ModChatGetSessionMessages200Response;
import org.openapitools.client.model.ModChatGetSessionMessagesRequest;
import org.openapitools.client.model.ModChatGetSessions200Response;
import org.openapitools.client.model.ModChatGetSessionsRequest;
import org.openapitools.client.model.ModChatLoginUser200Response;
import org.openapitools.client.model.ModChatLoginUserRequest;
import org.openapitools.client.model.ModChatSendChatMessage200Response;
import org.openapitools.client.model.ModChatSendChatMessageRequest;
import org.openapitools.client.model.ModChatViewChatRequest;
import org.openapitools.client.model.ModChatViewSessionsRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ModChatApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ModChatApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ModChatApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for modChatGetChatLatestMessages
     * @param modChatGetChatLatestMessagesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modChatGetChatLatestMessagesCall(ModChatGetChatLatestMessagesRequest modChatGetChatLatestMessagesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modChatGetChatLatestMessagesRequest;

        // create path and map variables
        String localVarPath = "/mod_chat_get_chat_latest_messages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modChatGetChatLatestMessagesValidateBeforeCall(ModChatGetChatLatestMessagesRequest modChatGetChatLatestMessagesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modChatGetChatLatestMessagesRequest' is set
        if (modChatGetChatLatestMessagesRequest == null) {
            throw new ApiException("Missing the required parameter 'modChatGetChatLatestMessagesRequest' when calling modChatGetChatLatestMessages(Async)");
        }

        return modChatGetChatLatestMessagesCall(modChatGetChatLatestMessagesRequest, _callback);

    }

    /**
     * Get the latest messages from the given chat session.
     * Get the latest messages from the given chat session.
     * @param modChatGetChatLatestMessagesRequest  (required)
     * @return ModChatGetChatLatestMessages200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModChatGetChatLatestMessages200Response modChatGetChatLatestMessages(ModChatGetChatLatestMessagesRequest modChatGetChatLatestMessagesRequest) throws ApiException {
        ApiResponse<ModChatGetChatLatestMessages200Response> localVarResp = modChatGetChatLatestMessagesWithHttpInfo(modChatGetChatLatestMessagesRequest);
        return localVarResp.getData();
    }

    /**
     * Get the latest messages from the given chat session.
     * Get the latest messages from the given chat session.
     * @param modChatGetChatLatestMessagesRequest  (required)
     * @return ApiResponse&lt;ModChatGetChatLatestMessages200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModChatGetChatLatestMessages200Response> modChatGetChatLatestMessagesWithHttpInfo(ModChatGetChatLatestMessagesRequest modChatGetChatLatestMessagesRequest) throws ApiException {
        okhttp3.Call localVarCall = modChatGetChatLatestMessagesValidateBeforeCall(modChatGetChatLatestMessagesRequest, null);
        Type localVarReturnType = new TypeToken<ModChatGetChatLatestMessages200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the latest messages from the given chat session. (asynchronously)
     * Get the latest messages from the given chat session.
     * @param modChatGetChatLatestMessagesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modChatGetChatLatestMessagesAsync(ModChatGetChatLatestMessagesRequest modChatGetChatLatestMessagesRequest, final ApiCallback<ModChatGetChatLatestMessages200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modChatGetChatLatestMessagesValidateBeforeCall(modChatGetChatLatestMessagesRequest, _callback);
        Type localVarReturnType = new TypeToken<ModChatGetChatLatestMessages200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modChatGetChatUsers
     * @param modChatGetChatUsersRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modChatGetChatUsersCall(ModChatGetChatUsersRequest modChatGetChatUsersRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modChatGetChatUsersRequest;

        // create path and map variables
        String localVarPath = "/mod_chat_get_chat_users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modChatGetChatUsersValidateBeforeCall(ModChatGetChatUsersRequest modChatGetChatUsersRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modChatGetChatUsersRequest' is set
        if (modChatGetChatUsersRequest == null) {
            throw new ApiException("Missing the required parameter 'modChatGetChatUsersRequest' when calling modChatGetChatUsers(Async)");
        }

        return modChatGetChatUsersCall(modChatGetChatUsersRequest, _callback);

    }

    /**
     * Get the list of users in the given chat session.
     * Get the list of users in the given chat session.
     * @param modChatGetChatUsersRequest  (required)
     * @return ModChatGetChatUsers200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModChatGetChatUsers200Response modChatGetChatUsers(ModChatGetChatUsersRequest modChatGetChatUsersRequest) throws ApiException {
        ApiResponse<ModChatGetChatUsers200Response> localVarResp = modChatGetChatUsersWithHttpInfo(modChatGetChatUsersRequest);
        return localVarResp.getData();
    }

    /**
     * Get the list of users in the given chat session.
     * Get the list of users in the given chat session.
     * @param modChatGetChatUsersRequest  (required)
     * @return ApiResponse&lt;ModChatGetChatUsers200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModChatGetChatUsers200Response> modChatGetChatUsersWithHttpInfo(ModChatGetChatUsersRequest modChatGetChatUsersRequest) throws ApiException {
        okhttp3.Call localVarCall = modChatGetChatUsersValidateBeforeCall(modChatGetChatUsersRequest, null);
        Type localVarReturnType = new TypeToken<ModChatGetChatUsers200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the list of users in the given chat session. (asynchronously)
     * Get the list of users in the given chat session.
     * @param modChatGetChatUsersRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modChatGetChatUsersAsync(ModChatGetChatUsersRequest modChatGetChatUsersRequest, final ApiCallback<ModChatGetChatUsers200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modChatGetChatUsersValidateBeforeCall(modChatGetChatUsersRequest, _callback);
        Type localVarReturnType = new TypeToken<ModChatGetChatUsers200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modChatGetChatsByCourses
     * @param modChatGetChatsByCoursesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modChatGetChatsByCoursesCall(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modChatGetChatsByCoursesRequest;

        // create path and map variables
        String localVarPath = "/mod_chat_get_chats_by_courses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modChatGetChatsByCoursesValidateBeforeCall(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modChatGetChatsByCoursesRequest' is set
        if (modChatGetChatsByCoursesRequest == null) {
            throw new ApiException("Missing the required parameter 'modChatGetChatsByCoursesRequest' when calling modChatGetChatsByCourses(Async)");
        }

        return modChatGetChatsByCoursesCall(modChatGetChatsByCoursesRequest, _callback);

    }

    /**
     * Returns a list of chat instances in a provided set of courses,                             if no courses are provided then all the chat instances the user has access to will be returned.
     * Returns a list of chat instances in a provided set of courses,                             if no courses are provided then all the chat instances the user has access to will be returned.
     * @param modChatGetChatsByCoursesRequest  (required)
     * @return ModChatGetChatsByCourses200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModChatGetChatsByCourses200Response modChatGetChatsByCourses(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest) throws ApiException {
        ApiResponse<ModChatGetChatsByCourses200Response> localVarResp = modChatGetChatsByCoursesWithHttpInfo(modChatGetChatsByCoursesRequest);
        return localVarResp.getData();
    }

    /**
     * Returns a list of chat instances in a provided set of courses,                             if no courses are provided then all the chat instances the user has access to will be returned.
     * Returns a list of chat instances in a provided set of courses,                             if no courses are provided then all the chat instances the user has access to will be returned.
     * @param modChatGetChatsByCoursesRequest  (required)
     * @return ApiResponse&lt;ModChatGetChatsByCourses200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModChatGetChatsByCourses200Response> modChatGetChatsByCoursesWithHttpInfo(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest) throws ApiException {
        okhttp3.Call localVarCall = modChatGetChatsByCoursesValidateBeforeCall(modChatGetChatsByCoursesRequest, null);
        Type localVarReturnType = new TypeToken<ModChatGetChatsByCourses200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a list of chat instances in a provided set of courses,                             if no courses are provided then all the chat instances the user has access to will be returned. (asynchronously)
     * Returns a list of chat instances in a provided set of courses,                             if no courses are provided then all the chat instances the user has access to will be returned.
     * @param modChatGetChatsByCoursesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modChatGetChatsByCoursesAsync(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest, final ApiCallback<ModChatGetChatsByCourses200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modChatGetChatsByCoursesValidateBeforeCall(modChatGetChatsByCoursesRequest, _callback);
        Type localVarReturnType = new TypeToken<ModChatGetChatsByCourses200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modChatGetSessionMessages
     * @param modChatGetSessionMessagesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modChatGetSessionMessagesCall(ModChatGetSessionMessagesRequest modChatGetSessionMessagesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modChatGetSessionMessagesRequest;

        // create path and map variables
        String localVarPath = "/mod_chat_get_session_messages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modChatGetSessionMessagesValidateBeforeCall(ModChatGetSessionMessagesRequest modChatGetSessionMessagesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modChatGetSessionMessagesRequest' is set
        if (modChatGetSessionMessagesRequest == null) {
            throw new ApiException("Missing the required parameter 'modChatGetSessionMessagesRequest' when calling modChatGetSessionMessages(Async)");
        }

        return modChatGetSessionMessagesCall(modChatGetSessionMessagesRequest, _callback);

    }

    /**
     * Retrieves messages of the given chat session.
     * Retrieves messages of the given chat session.
     * @param modChatGetSessionMessagesRequest  (required)
     * @return ModChatGetSessionMessages200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModChatGetSessionMessages200Response modChatGetSessionMessages(ModChatGetSessionMessagesRequest modChatGetSessionMessagesRequest) throws ApiException {
        ApiResponse<ModChatGetSessionMessages200Response> localVarResp = modChatGetSessionMessagesWithHttpInfo(modChatGetSessionMessagesRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieves messages of the given chat session.
     * Retrieves messages of the given chat session.
     * @param modChatGetSessionMessagesRequest  (required)
     * @return ApiResponse&lt;ModChatGetSessionMessages200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModChatGetSessionMessages200Response> modChatGetSessionMessagesWithHttpInfo(ModChatGetSessionMessagesRequest modChatGetSessionMessagesRequest) throws ApiException {
        okhttp3.Call localVarCall = modChatGetSessionMessagesValidateBeforeCall(modChatGetSessionMessagesRequest, null);
        Type localVarReturnType = new TypeToken<ModChatGetSessionMessages200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves messages of the given chat session. (asynchronously)
     * Retrieves messages of the given chat session.
     * @param modChatGetSessionMessagesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modChatGetSessionMessagesAsync(ModChatGetSessionMessagesRequest modChatGetSessionMessagesRequest, final ApiCallback<ModChatGetSessionMessages200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modChatGetSessionMessagesValidateBeforeCall(modChatGetSessionMessagesRequest, _callback);
        Type localVarReturnType = new TypeToken<ModChatGetSessionMessages200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modChatGetSessions
     * @param modChatGetSessionsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modChatGetSessionsCall(ModChatGetSessionsRequest modChatGetSessionsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modChatGetSessionsRequest;

        // create path and map variables
        String localVarPath = "/mod_chat_get_sessions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modChatGetSessionsValidateBeforeCall(ModChatGetSessionsRequest modChatGetSessionsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modChatGetSessionsRequest' is set
        if (modChatGetSessionsRequest == null) {
            throw new ApiException("Missing the required parameter 'modChatGetSessionsRequest' when calling modChatGetSessions(Async)");
        }

        return modChatGetSessionsCall(modChatGetSessionsRequest, _callback);

    }

    /**
     * Retrieves chat sessions for a given chat.
     * Retrieves chat sessions for a given chat.
     * @param modChatGetSessionsRequest  (required)
     * @return ModChatGetSessions200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModChatGetSessions200Response modChatGetSessions(ModChatGetSessionsRequest modChatGetSessionsRequest) throws ApiException {
        ApiResponse<ModChatGetSessions200Response> localVarResp = modChatGetSessionsWithHttpInfo(modChatGetSessionsRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieves chat sessions for a given chat.
     * Retrieves chat sessions for a given chat.
     * @param modChatGetSessionsRequest  (required)
     * @return ApiResponse&lt;ModChatGetSessions200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModChatGetSessions200Response> modChatGetSessionsWithHttpInfo(ModChatGetSessionsRequest modChatGetSessionsRequest) throws ApiException {
        okhttp3.Call localVarCall = modChatGetSessionsValidateBeforeCall(modChatGetSessionsRequest, null);
        Type localVarReturnType = new TypeToken<ModChatGetSessions200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves chat sessions for a given chat. (asynchronously)
     * Retrieves chat sessions for a given chat.
     * @param modChatGetSessionsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modChatGetSessionsAsync(ModChatGetSessionsRequest modChatGetSessionsRequest, final ApiCallback<ModChatGetSessions200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modChatGetSessionsValidateBeforeCall(modChatGetSessionsRequest, _callback);
        Type localVarReturnType = new TypeToken<ModChatGetSessions200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modChatLoginUser
     * @param modChatLoginUserRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modChatLoginUserCall(ModChatLoginUserRequest modChatLoginUserRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modChatLoginUserRequest;

        // create path and map variables
        String localVarPath = "/mod_chat_login_user";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modChatLoginUserValidateBeforeCall(ModChatLoginUserRequest modChatLoginUserRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modChatLoginUserRequest' is set
        if (modChatLoginUserRequest == null) {
            throw new ApiException("Missing the required parameter 'modChatLoginUserRequest' when calling modChatLoginUser(Async)");
        }

        return modChatLoginUserCall(modChatLoginUserRequest, _callback);

    }

    /**
     * Log a user into a chat room in the given chat.
     * Log a user into a chat room in the given chat.
     * @param modChatLoginUserRequest  (required)
     * @return ModChatLoginUser200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModChatLoginUser200Response modChatLoginUser(ModChatLoginUserRequest modChatLoginUserRequest) throws ApiException {
        ApiResponse<ModChatLoginUser200Response> localVarResp = modChatLoginUserWithHttpInfo(modChatLoginUserRequest);
        return localVarResp.getData();
    }

    /**
     * Log a user into a chat room in the given chat.
     * Log a user into a chat room in the given chat.
     * @param modChatLoginUserRequest  (required)
     * @return ApiResponse&lt;ModChatLoginUser200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModChatLoginUser200Response> modChatLoginUserWithHttpInfo(ModChatLoginUserRequest modChatLoginUserRequest) throws ApiException {
        okhttp3.Call localVarCall = modChatLoginUserValidateBeforeCall(modChatLoginUserRequest, null);
        Type localVarReturnType = new TypeToken<ModChatLoginUser200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Log a user into a chat room in the given chat. (asynchronously)
     * Log a user into a chat room in the given chat.
     * @param modChatLoginUserRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modChatLoginUserAsync(ModChatLoginUserRequest modChatLoginUserRequest, final ApiCallback<ModChatLoginUser200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modChatLoginUserValidateBeforeCall(modChatLoginUserRequest, _callback);
        Type localVarReturnType = new TypeToken<ModChatLoginUser200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modChatSendChatMessage
     * @param modChatSendChatMessageRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modChatSendChatMessageCall(ModChatSendChatMessageRequest modChatSendChatMessageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modChatSendChatMessageRequest;

        // create path and map variables
        String localVarPath = "/mod_chat_send_chat_message";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modChatSendChatMessageValidateBeforeCall(ModChatSendChatMessageRequest modChatSendChatMessageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modChatSendChatMessageRequest' is set
        if (modChatSendChatMessageRequest == null) {
            throw new ApiException("Missing the required parameter 'modChatSendChatMessageRequest' when calling modChatSendChatMessage(Async)");
        }

        return modChatSendChatMessageCall(modChatSendChatMessageRequest, _callback);

    }

    /**
     * Send a message on the given chat session.
     * Send a message on the given chat session.
     * @param modChatSendChatMessageRequest  (required)
     * @return ModChatSendChatMessage200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModChatSendChatMessage200Response modChatSendChatMessage(ModChatSendChatMessageRequest modChatSendChatMessageRequest) throws ApiException {
        ApiResponse<ModChatSendChatMessage200Response> localVarResp = modChatSendChatMessageWithHttpInfo(modChatSendChatMessageRequest);
        return localVarResp.getData();
    }

    /**
     * Send a message on the given chat session.
     * Send a message on the given chat session.
     * @param modChatSendChatMessageRequest  (required)
     * @return ApiResponse&lt;ModChatSendChatMessage200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModChatSendChatMessage200Response> modChatSendChatMessageWithHttpInfo(ModChatSendChatMessageRequest modChatSendChatMessageRequest) throws ApiException {
        okhttp3.Call localVarCall = modChatSendChatMessageValidateBeforeCall(modChatSendChatMessageRequest, null);
        Type localVarReturnType = new TypeToken<ModChatSendChatMessage200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Send a message on the given chat session. (asynchronously)
     * Send a message on the given chat session.
     * @param modChatSendChatMessageRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modChatSendChatMessageAsync(ModChatSendChatMessageRequest modChatSendChatMessageRequest, final ApiCallback<ModChatSendChatMessage200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modChatSendChatMessageValidateBeforeCall(modChatSendChatMessageRequest, _callback);
        Type localVarReturnType = new TypeToken<ModChatSendChatMessage200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modChatViewChat
     * @param modChatViewChatRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modChatViewChatCall(ModChatViewChatRequest modChatViewChatRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modChatViewChatRequest;

        // create path and map variables
        String localVarPath = "/mod_chat_view_chat";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modChatViewChatValidateBeforeCall(ModChatViewChatRequest modChatViewChatRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modChatViewChatRequest' is set
        if (modChatViewChatRequest == null) {
            throw new ApiException("Missing the required parameter 'modChatViewChatRequest' when calling modChatViewChat(Async)");
        }

        return modChatViewChatCall(modChatViewChatRequest, _callback);

    }

    /**
     * Trigger the course module viewed event and update the module completion status.
     * Trigger the course module viewed event and update the module completion status.
     * @param modChatViewChatRequest  (required)
     * @return CoreCalendarDeleteSubscription200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreCalendarDeleteSubscription200Response modChatViewChat(ModChatViewChatRequest modChatViewChatRequest) throws ApiException {
        ApiResponse<CoreCalendarDeleteSubscription200Response> localVarResp = modChatViewChatWithHttpInfo(modChatViewChatRequest);
        return localVarResp.getData();
    }

    /**
     * Trigger the course module viewed event and update the module completion status.
     * Trigger the course module viewed event and update the module completion status.
     * @param modChatViewChatRequest  (required)
     * @return ApiResponse&lt;CoreCalendarDeleteSubscription200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreCalendarDeleteSubscription200Response> modChatViewChatWithHttpInfo(ModChatViewChatRequest modChatViewChatRequest) throws ApiException {
        okhttp3.Call localVarCall = modChatViewChatValidateBeforeCall(modChatViewChatRequest, null);
        Type localVarReturnType = new TypeToken<CoreCalendarDeleteSubscription200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Trigger the course module viewed event and update the module completion status. (asynchronously)
     * Trigger the course module viewed event and update the module completion status.
     * @param modChatViewChatRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modChatViewChatAsync(ModChatViewChatRequest modChatViewChatRequest, final ApiCallback<CoreCalendarDeleteSubscription200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modChatViewChatValidateBeforeCall(modChatViewChatRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreCalendarDeleteSubscription200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modChatViewSessions
     * @param modChatViewSessionsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modChatViewSessionsCall(ModChatViewSessionsRequest modChatViewSessionsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modChatViewSessionsRequest;

        // create path and map variables
        String localVarPath = "/mod_chat_view_sessions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modChatViewSessionsValidateBeforeCall(ModChatViewSessionsRequest modChatViewSessionsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modChatViewSessionsRequest' is set
        if (modChatViewSessionsRequest == null) {
            throw new ApiException("Missing the required parameter 'modChatViewSessionsRequest' when calling modChatViewSessions(Async)");
        }

        return modChatViewSessionsCall(modChatViewSessionsRequest, _callback);

    }

    /**
     * Trigger the chat session viewed event.
     * Trigger the chat session viewed event.
     * @param modChatViewSessionsRequest  (required)
     * @return CoreCalendarDeleteSubscription200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreCalendarDeleteSubscription200Response modChatViewSessions(ModChatViewSessionsRequest modChatViewSessionsRequest) throws ApiException {
        ApiResponse<CoreCalendarDeleteSubscription200Response> localVarResp = modChatViewSessionsWithHttpInfo(modChatViewSessionsRequest);
        return localVarResp.getData();
    }

    /**
     * Trigger the chat session viewed event.
     * Trigger the chat session viewed event.
     * @param modChatViewSessionsRequest  (required)
     * @return ApiResponse&lt;CoreCalendarDeleteSubscription200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreCalendarDeleteSubscription200Response> modChatViewSessionsWithHttpInfo(ModChatViewSessionsRequest modChatViewSessionsRequest) throws ApiException {
        okhttp3.Call localVarCall = modChatViewSessionsValidateBeforeCall(modChatViewSessionsRequest, null);
        Type localVarReturnType = new TypeToken<CoreCalendarDeleteSubscription200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Trigger the chat session viewed event. (asynchronously)
     * Trigger the chat session viewed event.
     * @param modChatViewSessionsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modChatViewSessionsAsync(ModChatViewSessionsRequest modChatViewSessionsRequest, final ApiCallback<CoreCalendarDeleteSubscription200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modChatViewSessionsValidateBeforeCall(modChatViewSessionsRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreCalendarDeleteSubscription200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
