/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.joshuapare.moodleclient;

import com.joshuapare.ApiCallback;
import com.joshuapare.ApiClient;
import com.joshuapare.ApiException;
import com.joshuapare.ApiResponse;
import com.joshuapare.Configuration;
import com.joshuapare.Pair;
import com.joshuapare.ProgressRequestBody;
import com.joshuapare.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.ToolMobileCallExternalFunctions200Response;
import org.openapitools.client.model.ToolMobileCallExternalFunctionsRequest;
import org.openapitools.client.model.ToolMobileGetAutologinKey200Response;
import org.openapitools.client.model.ToolMobileGetAutologinKeyRequest;
import org.openapitools.client.model.ToolMobileGetConfig200Response;
import org.openapitools.client.model.ToolMobileGetConfigRequest;
import org.openapitools.client.model.ToolMobileGetContent200Response;
import org.openapitools.client.model.ToolMobileGetContentRequest;
import org.openapitools.client.model.ToolMobileGetPluginsSupportingMobile200Response;
import org.openapitools.client.model.ToolMobileGetPublicConfig200Response;
import org.openapitools.client.model.ToolMobileGetTokensForQrLogin200Response;
import org.openapitools.client.model.ToolMobileGetTokensForQrLoginRequest;
import org.openapitools.client.model.ToolMobileValidateSubscriptionKey200Response;
import org.openapitools.client.model.ToolMobileValidateSubscriptionKeyRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ToolMobileApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ToolMobileApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ToolMobileApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for toolMobileCallExternalFunctions
     * @param toolMobileCallExternalFunctionsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolMobileCallExternalFunctionsCall(ToolMobileCallExternalFunctionsRequest toolMobileCallExternalFunctionsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = toolMobileCallExternalFunctionsRequest;

        // create path and map variables
        String localVarPath = "/tool_mobile_call_external_functions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call toolMobileCallExternalFunctionsValidateBeforeCall(ToolMobileCallExternalFunctionsRequest toolMobileCallExternalFunctionsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'toolMobileCallExternalFunctionsRequest' is set
        if (toolMobileCallExternalFunctionsRequest == null) {
            throw new ApiException("Missing the required parameter 'toolMobileCallExternalFunctionsRequest' when calling toolMobileCallExternalFunctions(Async)");
        }

        return toolMobileCallExternalFunctionsCall(toolMobileCallExternalFunctionsRequest, _callback);

    }

    /**
     * Call multiple external functions and return all responses.
     * Call multiple external functions and return all responses.
     * @param toolMobileCallExternalFunctionsRequest  (required)
     * @return ToolMobileCallExternalFunctions200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ToolMobileCallExternalFunctions200Response toolMobileCallExternalFunctions(ToolMobileCallExternalFunctionsRequest toolMobileCallExternalFunctionsRequest) throws ApiException {
        ApiResponse<ToolMobileCallExternalFunctions200Response> localVarResp = toolMobileCallExternalFunctionsWithHttpInfo(toolMobileCallExternalFunctionsRequest);
        return localVarResp.getData();
    }

    /**
     * Call multiple external functions and return all responses.
     * Call multiple external functions and return all responses.
     * @param toolMobileCallExternalFunctionsRequest  (required)
     * @return ApiResponse&lt;ToolMobileCallExternalFunctions200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ToolMobileCallExternalFunctions200Response> toolMobileCallExternalFunctionsWithHttpInfo(ToolMobileCallExternalFunctionsRequest toolMobileCallExternalFunctionsRequest) throws ApiException {
        okhttp3.Call localVarCall = toolMobileCallExternalFunctionsValidateBeforeCall(toolMobileCallExternalFunctionsRequest, null);
        Type localVarReturnType = new TypeToken<ToolMobileCallExternalFunctions200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Call multiple external functions and return all responses. (asynchronously)
     * Call multiple external functions and return all responses.
     * @param toolMobileCallExternalFunctionsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolMobileCallExternalFunctionsAsync(ToolMobileCallExternalFunctionsRequest toolMobileCallExternalFunctionsRequest, final ApiCallback<ToolMobileCallExternalFunctions200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = toolMobileCallExternalFunctionsValidateBeforeCall(toolMobileCallExternalFunctionsRequest, _callback);
        Type localVarReturnType = new TypeToken<ToolMobileCallExternalFunctions200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for toolMobileGetAutologinKey
     * @param toolMobileGetAutologinKeyRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolMobileGetAutologinKeyCall(ToolMobileGetAutologinKeyRequest toolMobileGetAutologinKeyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = toolMobileGetAutologinKeyRequest;

        // create path and map variables
        String localVarPath = "/tool_mobile_get_autologin_key";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call toolMobileGetAutologinKeyValidateBeforeCall(ToolMobileGetAutologinKeyRequest toolMobileGetAutologinKeyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'toolMobileGetAutologinKeyRequest' is set
        if (toolMobileGetAutologinKeyRequest == null) {
            throw new ApiException("Missing the required parameter 'toolMobileGetAutologinKeyRequest' when calling toolMobileGetAutologinKey(Async)");
        }

        return toolMobileGetAutologinKeyCall(toolMobileGetAutologinKeyRequest, _callback);

    }

    /**
     * Creates an auto-login key for the current user.                             Is created only in https sites and is restricted by time, ip address and only works if the request                             comes from the Moodle mobile or desktop app.
     * Creates an auto-login key for the current user.                             Is created only in https sites and is restricted by time, ip address and only works if the request                             comes from the Moodle mobile or desktop app.
     * @param toolMobileGetAutologinKeyRequest  (required)
     * @return ToolMobileGetAutologinKey200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ToolMobileGetAutologinKey200Response toolMobileGetAutologinKey(ToolMobileGetAutologinKeyRequest toolMobileGetAutologinKeyRequest) throws ApiException {
        ApiResponse<ToolMobileGetAutologinKey200Response> localVarResp = toolMobileGetAutologinKeyWithHttpInfo(toolMobileGetAutologinKeyRequest);
        return localVarResp.getData();
    }

    /**
     * Creates an auto-login key for the current user.                             Is created only in https sites and is restricted by time, ip address and only works if the request                             comes from the Moodle mobile or desktop app.
     * Creates an auto-login key for the current user.                             Is created only in https sites and is restricted by time, ip address and only works if the request                             comes from the Moodle mobile or desktop app.
     * @param toolMobileGetAutologinKeyRequest  (required)
     * @return ApiResponse&lt;ToolMobileGetAutologinKey200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ToolMobileGetAutologinKey200Response> toolMobileGetAutologinKeyWithHttpInfo(ToolMobileGetAutologinKeyRequest toolMobileGetAutologinKeyRequest) throws ApiException {
        okhttp3.Call localVarCall = toolMobileGetAutologinKeyValidateBeforeCall(toolMobileGetAutologinKeyRequest, null);
        Type localVarReturnType = new TypeToken<ToolMobileGetAutologinKey200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates an auto-login key for the current user.                             Is created only in https sites and is restricted by time, ip address and only works if the request                             comes from the Moodle mobile or desktop app. (asynchronously)
     * Creates an auto-login key for the current user.                             Is created only in https sites and is restricted by time, ip address and only works if the request                             comes from the Moodle mobile or desktop app.
     * @param toolMobileGetAutologinKeyRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolMobileGetAutologinKeyAsync(ToolMobileGetAutologinKeyRequest toolMobileGetAutologinKeyRequest, final ApiCallback<ToolMobileGetAutologinKey200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = toolMobileGetAutologinKeyValidateBeforeCall(toolMobileGetAutologinKeyRequest, _callback);
        Type localVarReturnType = new TypeToken<ToolMobileGetAutologinKey200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for toolMobileGetConfig
     * @param toolMobileGetConfigRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolMobileGetConfigCall(ToolMobileGetConfigRequest toolMobileGetConfigRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = toolMobileGetConfigRequest;

        // create path and map variables
        String localVarPath = "/tool_mobile_get_config";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call toolMobileGetConfigValidateBeforeCall(ToolMobileGetConfigRequest toolMobileGetConfigRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'toolMobileGetConfigRequest' is set
        if (toolMobileGetConfigRequest == null) {
            throw new ApiException("Missing the required parameter 'toolMobileGetConfigRequest' when calling toolMobileGetConfig(Async)");
        }

        return toolMobileGetConfigCall(toolMobileGetConfigRequest, _callback);

    }

    /**
     * Returns a list of the site configurations, filtering by section.
     * Returns a list of the site configurations, filtering by section.
     * @param toolMobileGetConfigRequest  (required)
     * @return ToolMobileGetConfig200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ToolMobileGetConfig200Response toolMobileGetConfig(ToolMobileGetConfigRequest toolMobileGetConfigRequest) throws ApiException {
        ApiResponse<ToolMobileGetConfig200Response> localVarResp = toolMobileGetConfigWithHttpInfo(toolMobileGetConfigRequest);
        return localVarResp.getData();
    }

    /**
     * Returns a list of the site configurations, filtering by section.
     * Returns a list of the site configurations, filtering by section.
     * @param toolMobileGetConfigRequest  (required)
     * @return ApiResponse&lt;ToolMobileGetConfig200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ToolMobileGetConfig200Response> toolMobileGetConfigWithHttpInfo(ToolMobileGetConfigRequest toolMobileGetConfigRequest) throws ApiException {
        okhttp3.Call localVarCall = toolMobileGetConfigValidateBeforeCall(toolMobileGetConfigRequest, null);
        Type localVarReturnType = new TypeToken<ToolMobileGetConfig200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a list of the site configurations, filtering by section. (asynchronously)
     * Returns a list of the site configurations, filtering by section.
     * @param toolMobileGetConfigRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolMobileGetConfigAsync(ToolMobileGetConfigRequest toolMobileGetConfigRequest, final ApiCallback<ToolMobileGetConfig200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = toolMobileGetConfigValidateBeforeCall(toolMobileGetConfigRequest, _callback);
        Type localVarReturnType = new TypeToken<ToolMobileGetConfig200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for toolMobileGetContent
     * @param toolMobileGetContentRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolMobileGetContentCall(ToolMobileGetContentRequest toolMobileGetContentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = toolMobileGetContentRequest;

        // create path and map variables
        String localVarPath = "/tool_mobile_get_content";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call toolMobileGetContentValidateBeforeCall(ToolMobileGetContentRequest toolMobileGetContentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'toolMobileGetContentRequest' is set
        if (toolMobileGetContentRequest == null) {
            throw new ApiException("Missing the required parameter 'toolMobileGetContentRequest' when calling toolMobileGetContent(Async)");
        }

        return toolMobileGetContentCall(toolMobileGetContentRequest, _callback);

    }

    /**
     * Returns a piece of content to be displayed in the Mobile app.
     * Returns a piece of content to be displayed in the Mobile app.
     * @param toolMobileGetContentRequest  (required)
     * @return ToolMobileGetContent200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ToolMobileGetContent200Response toolMobileGetContent(ToolMobileGetContentRequest toolMobileGetContentRequest) throws ApiException {
        ApiResponse<ToolMobileGetContent200Response> localVarResp = toolMobileGetContentWithHttpInfo(toolMobileGetContentRequest);
        return localVarResp.getData();
    }

    /**
     * Returns a piece of content to be displayed in the Mobile app.
     * Returns a piece of content to be displayed in the Mobile app.
     * @param toolMobileGetContentRequest  (required)
     * @return ApiResponse&lt;ToolMobileGetContent200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ToolMobileGetContent200Response> toolMobileGetContentWithHttpInfo(ToolMobileGetContentRequest toolMobileGetContentRequest) throws ApiException {
        okhttp3.Call localVarCall = toolMobileGetContentValidateBeforeCall(toolMobileGetContentRequest, null);
        Type localVarReturnType = new TypeToken<ToolMobileGetContent200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a piece of content to be displayed in the Mobile app. (asynchronously)
     * Returns a piece of content to be displayed in the Mobile app.
     * @param toolMobileGetContentRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolMobileGetContentAsync(ToolMobileGetContentRequest toolMobileGetContentRequest, final ApiCallback<ToolMobileGetContent200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = toolMobileGetContentValidateBeforeCall(toolMobileGetContentRequest, _callback);
        Type localVarReturnType = new TypeToken<ToolMobileGetContent200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for toolMobileGetPluginsSupportingMobile
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolMobileGetPluginsSupportingMobileCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tool_mobile_get_plugins_supporting_mobile";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call toolMobileGetPluginsSupportingMobileValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return toolMobileGetPluginsSupportingMobileCall(_callback);

    }

    /**
     * Returns a list of Moodle plugins supporting the mobile app.
     * Returns a list of Moodle plugins supporting the mobile app.
     * @return ToolMobileGetPluginsSupportingMobile200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ToolMobileGetPluginsSupportingMobile200Response toolMobileGetPluginsSupportingMobile() throws ApiException {
        ApiResponse<ToolMobileGetPluginsSupportingMobile200Response> localVarResp = toolMobileGetPluginsSupportingMobileWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Returns a list of Moodle plugins supporting the mobile app.
     * Returns a list of Moodle plugins supporting the mobile app.
     * @return ApiResponse&lt;ToolMobileGetPluginsSupportingMobile200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ToolMobileGetPluginsSupportingMobile200Response> toolMobileGetPluginsSupportingMobileWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = toolMobileGetPluginsSupportingMobileValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ToolMobileGetPluginsSupportingMobile200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a list of Moodle plugins supporting the mobile app. (asynchronously)
     * Returns a list of Moodle plugins supporting the mobile app.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolMobileGetPluginsSupportingMobileAsync(final ApiCallback<ToolMobileGetPluginsSupportingMobile200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = toolMobileGetPluginsSupportingMobileValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ToolMobileGetPluginsSupportingMobile200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for toolMobileGetPublicConfig
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolMobileGetPublicConfigCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tool_mobile_get_public_config";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call toolMobileGetPublicConfigValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return toolMobileGetPublicConfigCall(_callback);

    }

    /**
     * Returns a list of the site public settings, those not requiring authentication.
     * Returns a list of the site public settings, those not requiring authentication.
     * @return ToolMobileGetPublicConfig200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ToolMobileGetPublicConfig200Response toolMobileGetPublicConfig() throws ApiException {
        ApiResponse<ToolMobileGetPublicConfig200Response> localVarResp = toolMobileGetPublicConfigWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Returns a list of the site public settings, those not requiring authentication.
     * Returns a list of the site public settings, those not requiring authentication.
     * @return ApiResponse&lt;ToolMobileGetPublicConfig200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ToolMobileGetPublicConfig200Response> toolMobileGetPublicConfigWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = toolMobileGetPublicConfigValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ToolMobileGetPublicConfig200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a list of the site public settings, those not requiring authentication. (asynchronously)
     * Returns a list of the site public settings, those not requiring authentication.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolMobileGetPublicConfigAsync(final ApiCallback<ToolMobileGetPublicConfig200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = toolMobileGetPublicConfigValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ToolMobileGetPublicConfig200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for toolMobileGetTokensForQrLogin
     * @param toolMobileGetTokensForQrLoginRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolMobileGetTokensForQrLoginCall(ToolMobileGetTokensForQrLoginRequest toolMobileGetTokensForQrLoginRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = toolMobileGetTokensForQrLoginRequest;

        // create path and map variables
        String localVarPath = "/tool_mobile_get_tokens_for_qr_login";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call toolMobileGetTokensForQrLoginValidateBeforeCall(ToolMobileGetTokensForQrLoginRequest toolMobileGetTokensForQrLoginRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'toolMobileGetTokensForQrLoginRequest' is set
        if (toolMobileGetTokensForQrLoginRequest == null) {
            throw new ApiException("Missing the required parameter 'toolMobileGetTokensForQrLoginRequest' when calling toolMobileGetTokensForQrLogin(Async)");
        }

        return toolMobileGetTokensForQrLoginCall(toolMobileGetTokensForQrLoginRequest, _callback);

    }

    /**
     * Returns a WebService token (and private token) for QR login.
     * Returns a WebService token (and private token) for QR login.
     * @param toolMobileGetTokensForQrLoginRequest  (required)
     * @return ToolMobileGetTokensForQrLogin200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ToolMobileGetTokensForQrLogin200Response toolMobileGetTokensForQrLogin(ToolMobileGetTokensForQrLoginRequest toolMobileGetTokensForQrLoginRequest) throws ApiException {
        ApiResponse<ToolMobileGetTokensForQrLogin200Response> localVarResp = toolMobileGetTokensForQrLoginWithHttpInfo(toolMobileGetTokensForQrLoginRequest);
        return localVarResp.getData();
    }

    /**
     * Returns a WebService token (and private token) for QR login.
     * Returns a WebService token (and private token) for QR login.
     * @param toolMobileGetTokensForQrLoginRequest  (required)
     * @return ApiResponse&lt;ToolMobileGetTokensForQrLogin200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ToolMobileGetTokensForQrLogin200Response> toolMobileGetTokensForQrLoginWithHttpInfo(ToolMobileGetTokensForQrLoginRequest toolMobileGetTokensForQrLoginRequest) throws ApiException {
        okhttp3.Call localVarCall = toolMobileGetTokensForQrLoginValidateBeforeCall(toolMobileGetTokensForQrLoginRequest, null);
        Type localVarReturnType = new TypeToken<ToolMobileGetTokensForQrLogin200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a WebService token (and private token) for QR login. (asynchronously)
     * Returns a WebService token (and private token) for QR login.
     * @param toolMobileGetTokensForQrLoginRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolMobileGetTokensForQrLoginAsync(ToolMobileGetTokensForQrLoginRequest toolMobileGetTokensForQrLoginRequest, final ApiCallback<ToolMobileGetTokensForQrLogin200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = toolMobileGetTokensForQrLoginValidateBeforeCall(toolMobileGetTokensForQrLoginRequest, _callback);
        Type localVarReturnType = new TypeToken<ToolMobileGetTokensForQrLogin200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for toolMobileValidateSubscriptionKey
     * @param toolMobileValidateSubscriptionKeyRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolMobileValidateSubscriptionKeyCall(ToolMobileValidateSubscriptionKeyRequest toolMobileValidateSubscriptionKeyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = toolMobileValidateSubscriptionKeyRequest;

        // create path and map variables
        String localVarPath = "/tool_mobile_validate_subscription_key";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call toolMobileValidateSubscriptionKeyValidateBeforeCall(ToolMobileValidateSubscriptionKeyRequest toolMobileValidateSubscriptionKeyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'toolMobileValidateSubscriptionKeyRequest' is set
        if (toolMobileValidateSubscriptionKeyRequest == null) {
            throw new ApiException("Missing the required parameter 'toolMobileValidateSubscriptionKeyRequest' when calling toolMobileValidateSubscriptionKey(Async)");
        }

        return toolMobileValidateSubscriptionKeyCall(toolMobileValidateSubscriptionKeyRequest, _callback);

    }

    /**
     * Check if the given site subscription key is valid.
     * Check if the given site subscription key is valid.
     * @param toolMobileValidateSubscriptionKeyRequest  (required)
     * @return ToolMobileValidateSubscriptionKey200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ToolMobileValidateSubscriptionKey200Response toolMobileValidateSubscriptionKey(ToolMobileValidateSubscriptionKeyRequest toolMobileValidateSubscriptionKeyRequest) throws ApiException {
        ApiResponse<ToolMobileValidateSubscriptionKey200Response> localVarResp = toolMobileValidateSubscriptionKeyWithHttpInfo(toolMobileValidateSubscriptionKeyRequest);
        return localVarResp.getData();
    }

    /**
     * Check if the given site subscription key is valid.
     * Check if the given site subscription key is valid.
     * @param toolMobileValidateSubscriptionKeyRequest  (required)
     * @return ApiResponse&lt;ToolMobileValidateSubscriptionKey200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ToolMobileValidateSubscriptionKey200Response> toolMobileValidateSubscriptionKeyWithHttpInfo(ToolMobileValidateSubscriptionKeyRequest toolMobileValidateSubscriptionKeyRequest) throws ApiException {
        okhttp3.Call localVarCall = toolMobileValidateSubscriptionKeyValidateBeforeCall(toolMobileValidateSubscriptionKeyRequest, null);
        Type localVarReturnType = new TypeToken<ToolMobileValidateSubscriptionKey200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Check if the given site subscription key is valid. (asynchronously)
     * Check if the given site subscription key is valid.
     * @param toolMobileValidateSubscriptionKeyRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolMobileValidateSubscriptionKeyAsync(ToolMobileValidateSubscriptionKeyRequest toolMobileValidateSubscriptionKeyRequest, final ApiCallback<ToolMobileValidateSubscriptionKey200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = toolMobileValidateSubscriptionKeyValidateBeforeCall(toolMobileValidateSubscriptionKeyRequest, _callback);
        Type localVarReturnType = new TypeToken<ToolMobileValidateSubscriptionKey200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
