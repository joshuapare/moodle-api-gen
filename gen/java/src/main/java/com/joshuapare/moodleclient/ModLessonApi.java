/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.joshuapare.moodleclient;

import com.joshuapare.ApiCallback;
import com.joshuapare.ApiClient;
import com.joshuapare.ApiException;
import com.joshuapare.ApiResponse;
import com.joshuapare.Configuration;
import com.joshuapare.Pair;
import com.joshuapare.ProgressRequestBody;
import com.joshuapare.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CoreCalendarDeleteSubscription200Response;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.ModChatGetChatsByCoursesRequest;
import org.openapitools.client.model.ModLessonFinishAttempt200Response;
import org.openapitools.client.model.ModLessonFinishAttemptRequest;
import org.openapitools.client.model.ModLessonGetAttemptsOverview200Response;
import org.openapitools.client.model.ModLessonGetAttemptsOverviewRequest;
import org.openapitools.client.model.ModLessonGetContentPagesViewed200Response;
import org.openapitools.client.model.ModLessonGetContentPagesViewedRequest;
import org.openapitools.client.model.ModLessonGetLesson200Response;
import org.openapitools.client.model.ModLessonGetLessonAccessInformation200Response;
import org.openapitools.client.model.ModLessonGetLessonAccessInformationRequest;
import org.openapitools.client.model.ModLessonGetLessonRequest;
import org.openapitools.client.model.ModLessonGetLessonsByCourses200Response;
import org.openapitools.client.model.ModLessonGetPageData200Response;
import org.openapitools.client.model.ModLessonGetPageDataRequest;
import org.openapitools.client.model.ModLessonGetPages200Response;
import org.openapitools.client.model.ModLessonGetPagesPossibleJumps200Response;
import org.openapitools.client.model.ModLessonGetPagesRequest;
import org.openapitools.client.model.ModLessonGetQuestionsAttempts200Response;
import org.openapitools.client.model.ModLessonGetQuestionsAttemptsRequest;
import org.openapitools.client.model.ModLessonGetUserAttempt200Response;
import org.openapitools.client.model.ModLessonGetUserAttemptGrade200Response;
import org.openapitools.client.model.ModLessonGetUserAttemptGradeRequest;
import org.openapitools.client.model.ModLessonGetUserAttemptRequest;
import org.openapitools.client.model.ModLessonGetUserGrade200Response;
import org.openapitools.client.model.ModLessonGetUserGradeRequest;
import org.openapitools.client.model.ModLessonGetUserTimers200Response;
import org.openapitools.client.model.ModLessonLaunchAttempt200Response;
import org.openapitools.client.model.ModLessonLaunchAttemptRequest;
import org.openapitools.client.model.ModLessonProcessPage200Response;
import org.openapitools.client.model.ModLessonProcessPageRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ModLessonApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ModLessonApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ModLessonApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for modLessonFinishAttempt
     * @param modLessonFinishAttemptRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modLessonFinishAttemptCall(ModLessonFinishAttemptRequest modLessonFinishAttemptRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modLessonFinishAttemptRequest;

        // create path and map variables
        String localVarPath = "/mod_lesson_finish_attempt";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modLessonFinishAttemptValidateBeforeCall(ModLessonFinishAttemptRequest modLessonFinishAttemptRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modLessonFinishAttemptRequest' is set
        if (modLessonFinishAttemptRequest == null) {
            throw new ApiException("Missing the required parameter 'modLessonFinishAttemptRequest' when calling modLessonFinishAttempt(Async)");
        }

        return modLessonFinishAttemptCall(modLessonFinishAttemptRequest, _callback);

    }

    /**
     * Finishes the current attempt.
     * Finishes the current attempt.
     * @param modLessonFinishAttemptRequest  (required)
     * @return ModLessonFinishAttempt200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModLessonFinishAttempt200Response modLessonFinishAttempt(ModLessonFinishAttemptRequest modLessonFinishAttemptRequest) throws ApiException {
        ApiResponse<ModLessonFinishAttempt200Response> localVarResp = modLessonFinishAttemptWithHttpInfo(modLessonFinishAttemptRequest);
        return localVarResp.getData();
    }

    /**
     * Finishes the current attempt.
     * Finishes the current attempt.
     * @param modLessonFinishAttemptRequest  (required)
     * @return ApiResponse&lt;ModLessonFinishAttempt200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModLessonFinishAttempt200Response> modLessonFinishAttemptWithHttpInfo(ModLessonFinishAttemptRequest modLessonFinishAttemptRequest) throws ApiException {
        okhttp3.Call localVarCall = modLessonFinishAttemptValidateBeforeCall(modLessonFinishAttemptRequest, null);
        Type localVarReturnType = new TypeToken<ModLessonFinishAttempt200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Finishes the current attempt. (asynchronously)
     * Finishes the current attempt.
     * @param modLessonFinishAttemptRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modLessonFinishAttemptAsync(ModLessonFinishAttemptRequest modLessonFinishAttemptRequest, final ApiCallback<ModLessonFinishAttempt200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modLessonFinishAttemptValidateBeforeCall(modLessonFinishAttemptRequest, _callback);
        Type localVarReturnType = new TypeToken<ModLessonFinishAttempt200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modLessonGetAttemptsOverview
     * @param modLessonGetAttemptsOverviewRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modLessonGetAttemptsOverviewCall(ModLessonGetAttemptsOverviewRequest modLessonGetAttemptsOverviewRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modLessonGetAttemptsOverviewRequest;

        // create path and map variables
        String localVarPath = "/mod_lesson_get_attempts_overview";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modLessonGetAttemptsOverviewValidateBeforeCall(ModLessonGetAttemptsOverviewRequest modLessonGetAttemptsOverviewRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modLessonGetAttemptsOverviewRequest' is set
        if (modLessonGetAttemptsOverviewRequest == null) {
            throw new ApiException("Missing the required parameter 'modLessonGetAttemptsOverviewRequest' when calling modLessonGetAttemptsOverview(Async)");
        }

        return modLessonGetAttemptsOverviewCall(modLessonGetAttemptsOverviewRequest, _callback);

    }

    /**
     * Get a list of all the attempts made by users in a lesson.
     * Get a list of all the attempts made by users in a lesson.
     * @param modLessonGetAttemptsOverviewRequest  (required)
     * @return ModLessonGetAttemptsOverview200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModLessonGetAttemptsOverview200Response modLessonGetAttemptsOverview(ModLessonGetAttemptsOverviewRequest modLessonGetAttemptsOverviewRequest) throws ApiException {
        ApiResponse<ModLessonGetAttemptsOverview200Response> localVarResp = modLessonGetAttemptsOverviewWithHttpInfo(modLessonGetAttemptsOverviewRequest);
        return localVarResp.getData();
    }

    /**
     * Get a list of all the attempts made by users in a lesson.
     * Get a list of all the attempts made by users in a lesson.
     * @param modLessonGetAttemptsOverviewRequest  (required)
     * @return ApiResponse&lt;ModLessonGetAttemptsOverview200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModLessonGetAttemptsOverview200Response> modLessonGetAttemptsOverviewWithHttpInfo(ModLessonGetAttemptsOverviewRequest modLessonGetAttemptsOverviewRequest) throws ApiException {
        okhttp3.Call localVarCall = modLessonGetAttemptsOverviewValidateBeforeCall(modLessonGetAttemptsOverviewRequest, null);
        Type localVarReturnType = new TypeToken<ModLessonGetAttemptsOverview200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of all the attempts made by users in a lesson. (asynchronously)
     * Get a list of all the attempts made by users in a lesson.
     * @param modLessonGetAttemptsOverviewRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modLessonGetAttemptsOverviewAsync(ModLessonGetAttemptsOverviewRequest modLessonGetAttemptsOverviewRequest, final ApiCallback<ModLessonGetAttemptsOverview200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modLessonGetAttemptsOverviewValidateBeforeCall(modLessonGetAttemptsOverviewRequest, _callback);
        Type localVarReturnType = new TypeToken<ModLessonGetAttemptsOverview200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modLessonGetContentPagesViewed
     * @param modLessonGetContentPagesViewedRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modLessonGetContentPagesViewedCall(ModLessonGetContentPagesViewedRequest modLessonGetContentPagesViewedRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modLessonGetContentPagesViewedRequest;

        // create path and map variables
        String localVarPath = "/mod_lesson_get_content_pages_viewed";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modLessonGetContentPagesViewedValidateBeforeCall(ModLessonGetContentPagesViewedRequest modLessonGetContentPagesViewedRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modLessonGetContentPagesViewedRequest' is set
        if (modLessonGetContentPagesViewedRequest == null) {
            throw new ApiException("Missing the required parameter 'modLessonGetContentPagesViewedRequest' when calling modLessonGetContentPagesViewed(Async)");
        }

        return modLessonGetContentPagesViewedCall(modLessonGetContentPagesViewedRequest, _callback);

    }

    /**
     * Return the list of content pages viewed by a user during a lesson attempt.
     * Return the list of content pages viewed by a user during a lesson attempt.
     * @param modLessonGetContentPagesViewedRequest  (required)
     * @return ModLessonGetContentPagesViewed200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModLessonGetContentPagesViewed200Response modLessonGetContentPagesViewed(ModLessonGetContentPagesViewedRequest modLessonGetContentPagesViewedRequest) throws ApiException {
        ApiResponse<ModLessonGetContentPagesViewed200Response> localVarResp = modLessonGetContentPagesViewedWithHttpInfo(modLessonGetContentPagesViewedRequest);
        return localVarResp.getData();
    }

    /**
     * Return the list of content pages viewed by a user during a lesson attempt.
     * Return the list of content pages viewed by a user during a lesson attempt.
     * @param modLessonGetContentPagesViewedRequest  (required)
     * @return ApiResponse&lt;ModLessonGetContentPagesViewed200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModLessonGetContentPagesViewed200Response> modLessonGetContentPagesViewedWithHttpInfo(ModLessonGetContentPagesViewedRequest modLessonGetContentPagesViewedRequest) throws ApiException {
        okhttp3.Call localVarCall = modLessonGetContentPagesViewedValidateBeforeCall(modLessonGetContentPagesViewedRequest, null);
        Type localVarReturnType = new TypeToken<ModLessonGetContentPagesViewed200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the list of content pages viewed by a user during a lesson attempt. (asynchronously)
     * Return the list of content pages viewed by a user during a lesson attempt.
     * @param modLessonGetContentPagesViewedRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modLessonGetContentPagesViewedAsync(ModLessonGetContentPagesViewedRequest modLessonGetContentPagesViewedRequest, final ApiCallback<ModLessonGetContentPagesViewed200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modLessonGetContentPagesViewedValidateBeforeCall(modLessonGetContentPagesViewedRequest, _callback);
        Type localVarReturnType = new TypeToken<ModLessonGetContentPagesViewed200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modLessonGetLesson
     * @param modLessonGetLessonRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modLessonGetLessonCall(ModLessonGetLessonRequest modLessonGetLessonRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modLessonGetLessonRequest;

        // create path and map variables
        String localVarPath = "/mod_lesson_get_lesson";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modLessonGetLessonValidateBeforeCall(ModLessonGetLessonRequest modLessonGetLessonRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modLessonGetLessonRequest' is set
        if (modLessonGetLessonRequest == null) {
            throw new ApiException("Missing the required parameter 'modLessonGetLessonRequest' when calling modLessonGetLesson(Async)");
        }

        return modLessonGetLessonCall(modLessonGetLessonRequest, _callback);

    }

    /**
     * Return information of a given lesson.
     * Return information of a given lesson.
     * @param modLessonGetLessonRequest  (required)
     * @return ModLessonGetLesson200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModLessonGetLesson200Response modLessonGetLesson(ModLessonGetLessonRequest modLessonGetLessonRequest) throws ApiException {
        ApiResponse<ModLessonGetLesson200Response> localVarResp = modLessonGetLessonWithHttpInfo(modLessonGetLessonRequest);
        return localVarResp.getData();
    }

    /**
     * Return information of a given lesson.
     * Return information of a given lesson.
     * @param modLessonGetLessonRequest  (required)
     * @return ApiResponse&lt;ModLessonGetLesson200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModLessonGetLesson200Response> modLessonGetLessonWithHttpInfo(ModLessonGetLessonRequest modLessonGetLessonRequest) throws ApiException {
        okhttp3.Call localVarCall = modLessonGetLessonValidateBeforeCall(modLessonGetLessonRequest, null);
        Type localVarReturnType = new TypeToken<ModLessonGetLesson200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return information of a given lesson. (asynchronously)
     * Return information of a given lesson.
     * @param modLessonGetLessonRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modLessonGetLessonAsync(ModLessonGetLessonRequest modLessonGetLessonRequest, final ApiCallback<ModLessonGetLesson200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modLessonGetLessonValidateBeforeCall(modLessonGetLessonRequest, _callback);
        Type localVarReturnType = new TypeToken<ModLessonGetLesson200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modLessonGetLessonAccessInformation
     * @param modLessonGetLessonAccessInformationRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modLessonGetLessonAccessInformationCall(ModLessonGetLessonAccessInformationRequest modLessonGetLessonAccessInformationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modLessonGetLessonAccessInformationRequest;

        // create path and map variables
        String localVarPath = "/mod_lesson_get_lesson_access_information";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modLessonGetLessonAccessInformationValidateBeforeCall(ModLessonGetLessonAccessInformationRequest modLessonGetLessonAccessInformationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modLessonGetLessonAccessInformationRequest' is set
        if (modLessonGetLessonAccessInformationRequest == null) {
            throw new ApiException("Missing the required parameter 'modLessonGetLessonAccessInformationRequest' when calling modLessonGetLessonAccessInformation(Async)");
        }

        return modLessonGetLessonAccessInformationCall(modLessonGetLessonAccessInformationRequest, _callback);

    }

    /**
     * Return access information for a given lesson.
     * Return access information for a given lesson.
     * @param modLessonGetLessonAccessInformationRequest  (required)
     * @return ModLessonGetLessonAccessInformation200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModLessonGetLessonAccessInformation200Response modLessonGetLessonAccessInformation(ModLessonGetLessonAccessInformationRequest modLessonGetLessonAccessInformationRequest) throws ApiException {
        ApiResponse<ModLessonGetLessonAccessInformation200Response> localVarResp = modLessonGetLessonAccessInformationWithHttpInfo(modLessonGetLessonAccessInformationRequest);
        return localVarResp.getData();
    }

    /**
     * Return access information for a given lesson.
     * Return access information for a given lesson.
     * @param modLessonGetLessonAccessInformationRequest  (required)
     * @return ApiResponse&lt;ModLessonGetLessonAccessInformation200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModLessonGetLessonAccessInformation200Response> modLessonGetLessonAccessInformationWithHttpInfo(ModLessonGetLessonAccessInformationRequest modLessonGetLessonAccessInformationRequest) throws ApiException {
        okhttp3.Call localVarCall = modLessonGetLessonAccessInformationValidateBeforeCall(modLessonGetLessonAccessInformationRequest, null);
        Type localVarReturnType = new TypeToken<ModLessonGetLessonAccessInformation200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return access information for a given lesson. (asynchronously)
     * Return access information for a given lesson.
     * @param modLessonGetLessonAccessInformationRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modLessonGetLessonAccessInformationAsync(ModLessonGetLessonAccessInformationRequest modLessonGetLessonAccessInformationRequest, final ApiCallback<ModLessonGetLessonAccessInformation200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modLessonGetLessonAccessInformationValidateBeforeCall(modLessonGetLessonAccessInformationRequest, _callback);
        Type localVarReturnType = new TypeToken<ModLessonGetLessonAccessInformation200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modLessonGetLessonsByCourses
     * @param modChatGetChatsByCoursesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modLessonGetLessonsByCoursesCall(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modChatGetChatsByCoursesRequest;

        // create path and map variables
        String localVarPath = "/mod_lesson_get_lessons_by_courses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modLessonGetLessonsByCoursesValidateBeforeCall(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modChatGetChatsByCoursesRequest' is set
        if (modChatGetChatsByCoursesRequest == null) {
            throw new ApiException("Missing the required parameter 'modChatGetChatsByCoursesRequest' when calling modLessonGetLessonsByCourses(Async)");
        }

        return modLessonGetLessonsByCoursesCall(modChatGetChatsByCoursesRequest, _callback);

    }

    /**
     * Returns a list of lessons in a provided list of courses,                             if no list is provided all lessons that the user can view will be returned.
     * Returns a list of lessons in a provided list of courses,                             if no list is provided all lessons that the user can view will be returned.
     * @param modChatGetChatsByCoursesRequest  (required)
     * @return ModLessonGetLessonsByCourses200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModLessonGetLessonsByCourses200Response modLessonGetLessonsByCourses(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest) throws ApiException {
        ApiResponse<ModLessonGetLessonsByCourses200Response> localVarResp = modLessonGetLessonsByCoursesWithHttpInfo(modChatGetChatsByCoursesRequest);
        return localVarResp.getData();
    }

    /**
     * Returns a list of lessons in a provided list of courses,                             if no list is provided all lessons that the user can view will be returned.
     * Returns a list of lessons in a provided list of courses,                             if no list is provided all lessons that the user can view will be returned.
     * @param modChatGetChatsByCoursesRequest  (required)
     * @return ApiResponse&lt;ModLessonGetLessonsByCourses200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModLessonGetLessonsByCourses200Response> modLessonGetLessonsByCoursesWithHttpInfo(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest) throws ApiException {
        okhttp3.Call localVarCall = modLessonGetLessonsByCoursesValidateBeforeCall(modChatGetChatsByCoursesRequest, null);
        Type localVarReturnType = new TypeToken<ModLessonGetLessonsByCourses200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a list of lessons in a provided list of courses,                             if no list is provided all lessons that the user can view will be returned. (asynchronously)
     * Returns a list of lessons in a provided list of courses,                             if no list is provided all lessons that the user can view will be returned.
     * @param modChatGetChatsByCoursesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modLessonGetLessonsByCoursesAsync(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest, final ApiCallback<ModLessonGetLessonsByCourses200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modLessonGetLessonsByCoursesValidateBeforeCall(modChatGetChatsByCoursesRequest, _callback);
        Type localVarReturnType = new TypeToken<ModLessonGetLessonsByCourses200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modLessonGetPageData
     * @param modLessonGetPageDataRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modLessonGetPageDataCall(ModLessonGetPageDataRequest modLessonGetPageDataRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modLessonGetPageDataRequest;

        // create path and map variables
        String localVarPath = "/mod_lesson_get_page_data";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modLessonGetPageDataValidateBeforeCall(ModLessonGetPageDataRequest modLessonGetPageDataRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modLessonGetPageDataRequest' is set
        if (modLessonGetPageDataRequest == null) {
            throw new ApiException("Missing the required parameter 'modLessonGetPageDataRequest' when calling modLessonGetPageData(Async)");
        }

        return modLessonGetPageDataCall(modLessonGetPageDataRequest, _callback);

    }

    /**
     * Return information of a given page, including its contents.
     * Return information of a given page, including its contents.
     * @param modLessonGetPageDataRequest  (required)
     * @return ModLessonGetPageData200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModLessonGetPageData200Response modLessonGetPageData(ModLessonGetPageDataRequest modLessonGetPageDataRequest) throws ApiException {
        ApiResponse<ModLessonGetPageData200Response> localVarResp = modLessonGetPageDataWithHttpInfo(modLessonGetPageDataRequest);
        return localVarResp.getData();
    }

    /**
     * Return information of a given page, including its contents.
     * Return information of a given page, including its contents.
     * @param modLessonGetPageDataRequest  (required)
     * @return ApiResponse&lt;ModLessonGetPageData200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModLessonGetPageData200Response> modLessonGetPageDataWithHttpInfo(ModLessonGetPageDataRequest modLessonGetPageDataRequest) throws ApiException {
        okhttp3.Call localVarCall = modLessonGetPageDataValidateBeforeCall(modLessonGetPageDataRequest, null);
        Type localVarReturnType = new TypeToken<ModLessonGetPageData200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return information of a given page, including its contents. (asynchronously)
     * Return information of a given page, including its contents.
     * @param modLessonGetPageDataRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modLessonGetPageDataAsync(ModLessonGetPageDataRequest modLessonGetPageDataRequest, final ApiCallback<ModLessonGetPageData200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modLessonGetPageDataValidateBeforeCall(modLessonGetPageDataRequest, _callback);
        Type localVarReturnType = new TypeToken<ModLessonGetPageData200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modLessonGetPages
     * @param modLessonGetPagesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modLessonGetPagesCall(ModLessonGetPagesRequest modLessonGetPagesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modLessonGetPagesRequest;

        // create path and map variables
        String localVarPath = "/mod_lesson_get_pages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modLessonGetPagesValidateBeforeCall(ModLessonGetPagesRequest modLessonGetPagesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modLessonGetPagesRequest' is set
        if (modLessonGetPagesRequest == null) {
            throw new ApiException("Missing the required parameter 'modLessonGetPagesRequest' when calling modLessonGetPages(Async)");
        }

        return modLessonGetPagesCall(modLessonGetPagesRequest, _callback);

    }

    /**
     * Return the list of pages in a lesson (based on the user permissions).
     * Return the list of pages in a lesson (based on the user permissions).
     * @param modLessonGetPagesRequest  (required)
     * @return ModLessonGetPages200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModLessonGetPages200Response modLessonGetPages(ModLessonGetPagesRequest modLessonGetPagesRequest) throws ApiException {
        ApiResponse<ModLessonGetPages200Response> localVarResp = modLessonGetPagesWithHttpInfo(modLessonGetPagesRequest);
        return localVarResp.getData();
    }

    /**
     * Return the list of pages in a lesson (based on the user permissions).
     * Return the list of pages in a lesson (based on the user permissions).
     * @param modLessonGetPagesRequest  (required)
     * @return ApiResponse&lt;ModLessonGetPages200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModLessonGetPages200Response> modLessonGetPagesWithHttpInfo(ModLessonGetPagesRequest modLessonGetPagesRequest) throws ApiException {
        okhttp3.Call localVarCall = modLessonGetPagesValidateBeforeCall(modLessonGetPagesRequest, null);
        Type localVarReturnType = new TypeToken<ModLessonGetPages200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the list of pages in a lesson (based on the user permissions). (asynchronously)
     * Return the list of pages in a lesson (based on the user permissions).
     * @param modLessonGetPagesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modLessonGetPagesAsync(ModLessonGetPagesRequest modLessonGetPagesRequest, final ApiCallback<ModLessonGetPages200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modLessonGetPagesValidateBeforeCall(modLessonGetPagesRequest, _callback);
        Type localVarReturnType = new TypeToken<ModLessonGetPages200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modLessonGetPagesPossibleJumps
     * @param modLessonGetLessonAccessInformationRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modLessonGetPagesPossibleJumpsCall(ModLessonGetLessonAccessInformationRequest modLessonGetLessonAccessInformationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modLessonGetLessonAccessInformationRequest;

        // create path and map variables
        String localVarPath = "/mod_lesson_get_pages_possible_jumps";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modLessonGetPagesPossibleJumpsValidateBeforeCall(ModLessonGetLessonAccessInformationRequest modLessonGetLessonAccessInformationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modLessonGetLessonAccessInformationRequest' is set
        if (modLessonGetLessonAccessInformationRequest == null) {
            throw new ApiException("Missing the required parameter 'modLessonGetLessonAccessInformationRequest' when calling modLessonGetPagesPossibleJumps(Async)");
        }

        return modLessonGetPagesPossibleJumpsCall(modLessonGetLessonAccessInformationRequest, _callback);

    }

    /**
     * Return all the possible jumps for the pages in a given lesson.
     * Return all the possible jumps for the pages in a given lesson.
     * @param modLessonGetLessonAccessInformationRequest  (required)
     * @return ModLessonGetPagesPossibleJumps200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModLessonGetPagesPossibleJumps200Response modLessonGetPagesPossibleJumps(ModLessonGetLessonAccessInformationRequest modLessonGetLessonAccessInformationRequest) throws ApiException {
        ApiResponse<ModLessonGetPagesPossibleJumps200Response> localVarResp = modLessonGetPagesPossibleJumpsWithHttpInfo(modLessonGetLessonAccessInformationRequest);
        return localVarResp.getData();
    }

    /**
     * Return all the possible jumps for the pages in a given lesson.
     * Return all the possible jumps for the pages in a given lesson.
     * @param modLessonGetLessonAccessInformationRequest  (required)
     * @return ApiResponse&lt;ModLessonGetPagesPossibleJumps200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModLessonGetPagesPossibleJumps200Response> modLessonGetPagesPossibleJumpsWithHttpInfo(ModLessonGetLessonAccessInformationRequest modLessonGetLessonAccessInformationRequest) throws ApiException {
        okhttp3.Call localVarCall = modLessonGetPagesPossibleJumpsValidateBeforeCall(modLessonGetLessonAccessInformationRequest, null);
        Type localVarReturnType = new TypeToken<ModLessonGetPagesPossibleJumps200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return all the possible jumps for the pages in a given lesson. (asynchronously)
     * Return all the possible jumps for the pages in a given lesson.
     * @param modLessonGetLessonAccessInformationRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modLessonGetPagesPossibleJumpsAsync(ModLessonGetLessonAccessInformationRequest modLessonGetLessonAccessInformationRequest, final ApiCallback<ModLessonGetPagesPossibleJumps200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modLessonGetPagesPossibleJumpsValidateBeforeCall(modLessonGetLessonAccessInformationRequest, _callback);
        Type localVarReturnType = new TypeToken<ModLessonGetPagesPossibleJumps200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modLessonGetQuestionsAttempts
     * @param modLessonGetQuestionsAttemptsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modLessonGetQuestionsAttemptsCall(ModLessonGetQuestionsAttemptsRequest modLessonGetQuestionsAttemptsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modLessonGetQuestionsAttemptsRequest;

        // create path and map variables
        String localVarPath = "/mod_lesson_get_questions_attempts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modLessonGetQuestionsAttemptsValidateBeforeCall(ModLessonGetQuestionsAttemptsRequest modLessonGetQuestionsAttemptsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modLessonGetQuestionsAttemptsRequest' is set
        if (modLessonGetQuestionsAttemptsRequest == null) {
            throw new ApiException("Missing the required parameter 'modLessonGetQuestionsAttemptsRequest' when calling modLessonGetQuestionsAttempts(Async)");
        }

        return modLessonGetQuestionsAttemptsCall(modLessonGetQuestionsAttemptsRequest, _callback);

    }

    /**
     * Return the list of questions attempts in a given lesson.
     * Return the list of questions attempts in a given lesson.
     * @param modLessonGetQuestionsAttemptsRequest  (required)
     * @return ModLessonGetQuestionsAttempts200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModLessonGetQuestionsAttempts200Response modLessonGetQuestionsAttempts(ModLessonGetQuestionsAttemptsRequest modLessonGetQuestionsAttemptsRequest) throws ApiException {
        ApiResponse<ModLessonGetQuestionsAttempts200Response> localVarResp = modLessonGetQuestionsAttemptsWithHttpInfo(modLessonGetQuestionsAttemptsRequest);
        return localVarResp.getData();
    }

    /**
     * Return the list of questions attempts in a given lesson.
     * Return the list of questions attempts in a given lesson.
     * @param modLessonGetQuestionsAttemptsRequest  (required)
     * @return ApiResponse&lt;ModLessonGetQuestionsAttempts200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModLessonGetQuestionsAttempts200Response> modLessonGetQuestionsAttemptsWithHttpInfo(ModLessonGetQuestionsAttemptsRequest modLessonGetQuestionsAttemptsRequest) throws ApiException {
        okhttp3.Call localVarCall = modLessonGetQuestionsAttemptsValidateBeforeCall(modLessonGetQuestionsAttemptsRequest, null);
        Type localVarReturnType = new TypeToken<ModLessonGetQuestionsAttempts200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the list of questions attempts in a given lesson. (asynchronously)
     * Return the list of questions attempts in a given lesson.
     * @param modLessonGetQuestionsAttemptsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modLessonGetQuestionsAttemptsAsync(ModLessonGetQuestionsAttemptsRequest modLessonGetQuestionsAttemptsRequest, final ApiCallback<ModLessonGetQuestionsAttempts200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modLessonGetQuestionsAttemptsValidateBeforeCall(modLessonGetQuestionsAttemptsRequest, _callback);
        Type localVarReturnType = new TypeToken<ModLessonGetQuestionsAttempts200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modLessonGetUserAttempt
     * @param modLessonGetUserAttemptRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modLessonGetUserAttemptCall(ModLessonGetUserAttemptRequest modLessonGetUserAttemptRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modLessonGetUserAttemptRequest;

        // create path and map variables
        String localVarPath = "/mod_lesson_get_user_attempt";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modLessonGetUserAttemptValidateBeforeCall(ModLessonGetUserAttemptRequest modLessonGetUserAttemptRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modLessonGetUserAttemptRequest' is set
        if (modLessonGetUserAttemptRequest == null) {
            throw new ApiException("Missing the required parameter 'modLessonGetUserAttemptRequest' when calling modLessonGetUserAttempt(Async)");
        }

        return modLessonGetUserAttemptCall(modLessonGetUserAttemptRequest, _callback);

    }

    /**
     * Return information about the given user attempt (including answers).
     * Return information about the given user attempt (including answers).
     * @param modLessonGetUserAttemptRequest  (required)
     * @return ModLessonGetUserAttempt200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModLessonGetUserAttempt200Response modLessonGetUserAttempt(ModLessonGetUserAttemptRequest modLessonGetUserAttemptRequest) throws ApiException {
        ApiResponse<ModLessonGetUserAttempt200Response> localVarResp = modLessonGetUserAttemptWithHttpInfo(modLessonGetUserAttemptRequest);
        return localVarResp.getData();
    }

    /**
     * Return information about the given user attempt (including answers).
     * Return information about the given user attempt (including answers).
     * @param modLessonGetUserAttemptRequest  (required)
     * @return ApiResponse&lt;ModLessonGetUserAttempt200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModLessonGetUserAttempt200Response> modLessonGetUserAttemptWithHttpInfo(ModLessonGetUserAttemptRequest modLessonGetUserAttemptRequest) throws ApiException {
        okhttp3.Call localVarCall = modLessonGetUserAttemptValidateBeforeCall(modLessonGetUserAttemptRequest, null);
        Type localVarReturnType = new TypeToken<ModLessonGetUserAttempt200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return information about the given user attempt (including answers). (asynchronously)
     * Return information about the given user attempt (including answers).
     * @param modLessonGetUserAttemptRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modLessonGetUserAttemptAsync(ModLessonGetUserAttemptRequest modLessonGetUserAttemptRequest, final ApiCallback<ModLessonGetUserAttempt200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modLessonGetUserAttemptValidateBeforeCall(modLessonGetUserAttemptRequest, _callback);
        Type localVarReturnType = new TypeToken<ModLessonGetUserAttempt200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modLessonGetUserAttemptGrade
     * @param modLessonGetUserAttemptGradeRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modLessonGetUserAttemptGradeCall(ModLessonGetUserAttemptGradeRequest modLessonGetUserAttemptGradeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modLessonGetUserAttemptGradeRequest;

        // create path and map variables
        String localVarPath = "/mod_lesson_get_user_attempt_grade";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modLessonGetUserAttemptGradeValidateBeforeCall(ModLessonGetUserAttemptGradeRequest modLessonGetUserAttemptGradeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modLessonGetUserAttemptGradeRequest' is set
        if (modLessonGetUserAttemptGradeRequest == null) {
            throw new ApiException("Missing the required parameter 'modLessonGetUserAttemptGradeRequest' when calling modLessonGetUserAttemptGrade(Async)");
        }

        return modLessonGetUserAttemptGradeCall(modLessonGetUserAttemptGradeRequest, _callback);

    }

    /**
     * Return grade information in the attempt for a given user.
     * Return grade information in the attempt for a given user.
     * @param modLessonGetUserAttemptGradeRequest  (required)
     * @return ModLessonGetUserAttemptGrade200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModLessonGetUserAttemptGrade200Response modLessonGetUserAttemptGrade(ModLessonGetUserAttemptGradeRequest modLessonGetUserAttemptGradeRequest) throws ApiException {
        ApiResponse<ModLessonGetUserAttemptGrade200Response> localVarResp = modLessonGetUserAttemptGradeWithHttpInfo(modLessonGetUserAttemptGradeRequest);
        return localVarResp.getData();
    }

    /**
     * Return grade information in the attempt for a given user.
     * Return grade information in the attempt for a given user.
     * @param modLessonGetUserAttemptGradeRequest  (required)
     * @return ApiResponse&lt;ModLessonGetUserAttemptGrade200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModLessonGetUserAttemptGrade200Response> modLessonGetUserAttemptGradeWithHttpInfo(ModLessonGetUserAttemptGradeRequest modLessonGetUserAttemptGradeRequest) throws ApiException {
        okhttp3.Call localVarCall = modLessonGetUserAttemptGradeValidateBeforeCall(modLessonGetUserAttemptGradeRequest, null);
        Type localVarReturnType = new TypeToken<ModLessonGetUserAttemptGrade200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return grade information in the attempt for a given user. (asynchronously)
     * Return grade information in the attempt for a given user.
     * @param modLessonGetUserAttemptGradeRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modLessonGetUserAttemptGradeAsync(ModLessonGetUserAttemptGradeRequest modLessonGetUserAttemptGradeRequest, final ApiCallback<ModLessonGetUserAttemptGrade200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modLessonGetUserAttemptGradeValidateBeforeCall(modLessonGetUserAttemptGradeRequest, _callback);
        Type localVarReturnType = new TypeToken<ModLessonGetUserAttemptGrade200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modLessonGetUserGrade
     * @param modLessonGetUserGradeRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modLessonGetUserGradeCall(ModLessonGetUserGradeRequest modLessonGetUserGradeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modLessonGetUserGradeRequest;

        // create path and map variables
        String localVarPath = "/mod_lesson_get_user_grade";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modLessonGetUserGradeValidateBeforeCall(ModLessonGetUserGradeRequest modLessonGetUserGradeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modLessonGetUserGradeRequest' is set
        if (modLessonGetUserGradeRequest == null) {
            throw new ApiException("Missing the required parameter 'modLessonGetUserGradeRequest' when calling modLessonGetUserGrade(Async)");
        }

        return modLessonGetUserGradeCall(modLessonGetUserGradeRequest, _callback);

    }

    /**
     * Return the final grade in the lesson for the given user.
     * Return the final grade in the lesson for the given user.
     * @param modLessonGetUserGradeRequest  (required)
     * @return ModLessonGetUserGrade200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModLessonGetUserGrade200Response modLessonGetUserGrade(ModLessonGetUserGradeRequest modLessonGetUserGradeRequest) throws ApiException {
        ApiResponse<ModLessonGetUserGrade200Response> localVarResp = modLessonGetUserGradeWithHttpInfo(modLessonGetUserGradeRequest);
        return localVarResp.getData();
    }

    /**
     * Return the final grade in the lesson for the given user.
     * Return the final grade in the lesson for the given user.
     * @param modLessonGetUserGradeRequest  (required)
     * @return ApiResponse&lt;ModLessonGetUserGrade200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModLessonGetUserGrade200Response> modLessonGetUserGradeWithHttpInfo(ModLessonGetUserGradeRequest modLessonGetUserGradeRequest) throws ApiException {
        okhttp3.Call localVarCall = modLessonGetUserGradeValidateBeforeCall(modLessonGetUserGradeRequest, null);
        Type localVarReturnType = new TypeToken<ModLessonGetUserGrade200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the final grade in the lesson for the given user. (asynchronously)
     * Return the final grade in the lesson for the given user.
     * @param modLessonGetUserGradeRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modLessonGetUserGradeAsync(ModLessonGetUserGradeRequest modLessonGetUserGradeRequest, final ApiCallback<ModLessonGetUserGrade200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modLessonGetUserGradeValidateBeforeCall(modLessonGetUserGradeRequest, _callback);
        Type localVarReturnType = new TypeToken<ModLessonGetUserGrade200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modLessonGetUserTimers
     * @param modLessonGetUserGradeRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modLessonGetUserTimersCall(ModLessonGetUserGradeRequest modLessonGetUserGradeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modLessonGetUserGradeRequest;

        // create path and map variables
        String localVarPath = "/mod_lesson_get_user_timers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modLessonGetUserTimersValidateBeforeCall(ModLessonGetUserGradeRequest modLessonGetUserGradeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modLessonGetUserGradeRequest' is set
        if (modLessonGetUserGradeRequest == null) {
            throw new ApiException("Missing the required parameter 'modLessonGetUserGradeRequest' when calling modLessonGetUserTimers(Async)");
        }

        return modLessonGetUserTimersCall(modLessonGetUserGradeRequest, _callback);

    }

    /**
     * Return the timers in the current lesson for the given user.
     * Return the timers in the current lesson for the given user.
     * @param modLessonGetUserGradeRequest  (required)
     * @return ModLessonGetUserTimers200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModLessonGetUserTimers200Response modLessonGetUserTimers(ModLessonGetUserGradeRequest modLessonGetUserGradeRequest) throws ApiException {
        ApiResponse<ModLessonGetUserTimers200Response> localVarResp = modLessonGetUserTimersWithHttpInfo(modLessonGetUserGradeRequest);
        return localVarResp.getData();
    }

    /**
     * Return the timers in the current lesson for the given user.
     * Return the timers in the current lesson for the given user.
     * @param modLessonGetUserGradeRequest  (required)
     * @return ApiResponse&lt;ModLessonGetUserTimers200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModLessonGetUserTimers200Response> modLessonGetUserTimersWithHttpInfo(ModLessonGetUserGradeRequest modLessonGetUserGradeRequest) throws ApiException {
        okhttp3.Call localVarCall = modLessonGetUserTimersValidateBeforeCall(modLessonGetUserGradeRequest, null);
        Type localVarReturnType = new TypeToken<ModLessonGetUserTimers200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the timers in the current lesson for the given user. (asynchronously)
     * Return the timers in the current lesson for the given user.
     * @param modLessonGetUserGradeRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modLessonGetUserTimersAsync(ModLessonGetUserGradeRequest modLessonGetUserGradeRequest, final ApiCallback<ModLessonGetUserTimers200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modLessonGetUserTimersValidateBeforeCall(modLessonGetUserGradeRequest, _callback);
        Type localVarReturnType = new TypeToken<ModLessonGetUserTimers200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modLessonLaunchAttempt
     * @param modLessonLaunchAttemptRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modLessonLaunchAttemptCall(ModLessonLaunchAttemptRequest modLessonLaunchAttemptRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modLessonLaunchAttemptRequest;

        // create path and map variables
        String localVarPath = "/mod_lesson_launch_attempt";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modLessonLaunchAttemptValidateBeforeCall(ModLessonLaunchAttemptRequest modLessonLaunchAttemptRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modLessonLaunchAttemptRequest' is set
        if (modLessonLaunchAttemptRequest == null) {
            throw new ApiException("Missing the required parameter 'modLessonLaunchAttemptRequest' when calling modLessonLaunchAttempt(Async)");
        }

        return modLessonLaunchAttemptCall(modLessonLaunchAttemptRequest, _callback);

    }

    /**
     * Starts a new attempt or continues an existing one.
     * Starts a new attempt or continues an existing one.
     * @param modLessonLaunchAttemptRequest  (required)
     * @return ModLessonLaunchAttempt200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModLessonLaunchAttempt200Response modLessonLaunchAttempt(ModLessonLaunchAttemptRequest modLessonLaunchAttemptRequest) throws ApiException {
        ApiResponse<ModLessonLaunchAttempt200Response> localVarResp = modLessonLaunchAttemptWithHttpInfo(modLessonLaunchAttemptRequest);
        return localVarResp.getData();
    }

    /**
     * Starts a new attempt or continues an existing one.
     * Starts a new attempt or continues an existing one.
     * @param modLessonLaunchAttemptRequest  (required)
     * @return ApiResponse&lt;ModLessonLaunchAttempt200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModLessonLaunchAttempt200Response> modLessonLaunchAttemptWithHttpInfo(ModLessonLaunchAttemptRequest modLessonLaunchAttemptRequest) throws ApiException {
        okhttp3.Call localVarCall = modLessonLaunchAttemptValidateBeforeCall(modLessonLaunchAttemptRequest, null);
        Type localVarReturnType = new TypeToken<ModLessonLaunchAttempt200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Starts a new attempt or continues an existing one. (asynchronously)
     * Starts a new attempt or continues an existing one.
     * @param modLessonLaunchAttemptRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modLessonLaunchAttemptAsync(ModLessonLaunchAttemptRequest modLessonLaunchAttemptRequest, final ApiCallback<ModLessonLaunchAttempt200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modLessonLaunchAttemptValidateBeforeCall(modLessonLaunchAttemptRequest, _callback);
        Type localVarReturnType = new TypeToken<ModLessonLaunchAttempt200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modLessonProcessPage
     * @param modLessonProcessPageRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modLessonProcessPageCall(ModLessonProcessPageRequest modLessonProcessPageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modLessonProcessPageRequest;

        // create path and map variables
        String localVarPath = "/mod_lesson_process_page";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modLessonProcessPageValidateBeforeCall(ModLessonProcessPageRequest modLessonProcessPageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modLessonProcessPageRequest' is set
        if (modLessonProcessPageRequest == null) {
            throw new ApiException("Missing the required parameter 'modLessonProcessPageRequest' when calling modLessonProcessPage(Async)");
        }

        return modLessonProcessPageCall(modLessonProcessPageRequest, _callback);

    }

    /**
     * Processes page responses.
     * Processes page responses.
     * @param modLessonProcessPageRequest  (required)
     * @return ModLessonProcessPage200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModLessonProcessPage200Response modLessonProcessPage(ModLessonProcessPageRequest modLessonProcessPageRequest) throws ApiException {
        ApiResponse<ModLessonProcessPage200Response> localVarResp = modLessonProcessPageWithHttpInfo(modLessonProcessPageRequest);
        return localVarResp.getData();
    }

    /**
     * Processes page responses.
     * Processes page responses.
     * @param modLessonProcessPageRequest  (required)
     * @return ApiResponse&lt;ModLessonProcessPage200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModLessonProcessPage200Response> modLessonProcessPageWithHttpInfo(ModLessonProcessPageRequest modLessonProcessPageRequest) throws ApiException {
        okhttp3.Call localVarCall = modLessonProcessPageValidateBeforeCall(modLessonProcessPageRequest, null);
        Type localVarReturnType = new TypeToken<ModLessonProcessPage200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Processes page responses. (asynchronously)
     * Processes page responses.
     * @param modLessonProcessPageRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modLessonProcessPageAsync(ModLessonProcessPageRequest modLessonProcessPageRequest, final ApiCallback<ModLessonProcessPage200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modLessonProcessPageValidateBeforeCall(modLessonProcessPageRequest, _callback);
        Type localVarReturnType = new TypeToken<ModLessonProcessPage200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modLessonViewLesson
     * @param modLessonGetLessonRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modLessonViewLessonCall(ModLessonGetLessonRequest modLessonGetLessonRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modLessonGetLessonRequest;

        // create path and map variables
        String localVarPath = "/mod_lesson_view_lesson";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modLessonViewLessonValidateBeforeCall(ModLessonGetLessonRequest modLessonGetLessonRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modLessonGetLessonRequest' is set
        if (modLessonGetLessonRequest == null) {
            throw new ApiException("Missing the required parameter 'modLessonGetLessonRequest' when calling modLessonViewLesson(Async)");
        }

        return modLessonViewLessonCall(modLessonGetLessonRequest, _callback);

    }

    /**
     * Trigger the course module viewed event and update the module completion status.
     * Trigger the course module viewed event and update the module completion status.
     * @param modLessonGetLessonRequest  (required)
     * @return CoreCalendarDeleteSubscription200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreCalendarDeleteSubscription200Response modLessonViewLesson(ModLessonGetLessonRequest modLessonGetLessonRequest) throws ApiException {
        ApiResponse<CoreCalendarDeleteSubscription200Response> localVarResp = modLessonViewLessonWithHttpInfo(modLessonGetLessonRequest);
        return localVarResp.getData();
    }

    /**
     * Trigger the course module viewed event and update the module completion status.
     * Trigger the course module viewed event and update the module completion status.
     * @param modLessonGetLessonRequest  (required)
     * @return ApiResponse&lt;CoreCalendarDeleteSubscription200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreCalendarDeleteSubscription200Response> modLessonViewLessonWithHttpInfo(ModLessonGetLessonRequest modLessonGetLessonRequest) throws ApiException {
        okhttp3.Call localVarCall = modLessonViewLessonValidateBeforeCall(modLessonGetLessonRequest, null);
        Type localVarReturnType = new TypeToken<CoreCalendarDeleteSubscription200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Trigger the course module viewed event and update the module completion status. (asynchronously)
     * Trigger the course module viewed event and update the module completion status.
     * @param modLessonGetLessonRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modLessonViewLessonAsync(ModLessonGetLessonRequest modLessonGetLessonRequest, final ApiCallback<CoreCalendarDeleteSubscription200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modLessonViewLessonValidateBeforeCall(modLessonGetLessonRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreCalendarDeleteSubscription200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
