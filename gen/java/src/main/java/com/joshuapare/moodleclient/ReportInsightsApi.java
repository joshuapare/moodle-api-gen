/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.joshuapare.moodleclient;

import com.joshuapare.ApiCallback;
import com.joshuapare.ApiClient;
import com.joshuapare.ApiException;
import com.joshuapare.ApiResponse;
import com.joshuapare.Configuration;
import com.joshuapare.Pair;
import com.joshuapare.ProgressRequestBody;
import com.joshuapare.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CoreCohortAddCohortMembers200Response;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.ReportInsightsActionExecutedRequest;
import org.openapitools.client.model.ReportInsightsSetFixedPrediction200Response;
import org.openapitools.client.model.ReportInsightsSetFixedPredictionRequest;
import org.openapitools.client.model.ReportInsightsSetNotusefulPrediction200Response;
import org.openapitools.client.model.ReportInsightsSetNotusefulPredictionRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ReportInsightsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ReportInsightsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ReportInsightsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for reportInsightsActionExecuted
     * @param reportInsightsActionExecutedRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportInsightsActionExecutedCall(ReportInsightsActionExecutedRequest reportInsightsActionExecutedRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reportInsightsActionExecutedRequest;

        // create path and map variables
        String localVarPath = "/report_insights_action_executed";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportInsightsActionExecutedValidateBeforeCall(ReportInsightsActionExecutedRequest reportInsightsActionExecutedRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'reportInsightsActionExecutedRequest' is set
        if (reportInsightsActionExecutedRequest == null) {
            throw new ApiException("Missing the required parameter 'reportInsightsActionExecutedRequest' when calling reportInsightsActionExecuted(Async)");
        }

        return reportInsightsActionExecutedCall(reportInsightsActionExecutedRequest, _callback);

    }

    /**
     * Stores an action executed over a group of predictions.
     * Stores an action executed over a group of predictions.
     * @param reportInsightsActionExecutedRequest  (required)
     * @return CoreCohortAddCohortMembers200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreCohortAddCohortMembers200Response reportInsightsActionExecuted(ReportInsightsActionExecutedRequest reportInsightsActionExecutedRequest) throws ApiException {
        ApiResponse<CoreCohortAddCohortMembers200Response> localVarResp = reportInsightsActionExecutedWithHttpInfo(reportInsightsActionExecutedRequest);
        return localVarResp.getData();
    }

    /**
     * Stores an action executed over a group of predictions.
     * Stores an action executed over a group of predictions.
     * @param reportInsightsActionExecutedRequest  (required)
     * @return ApiResponse&lt;CoreCohortAddCohortMembers200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreCohortAddCohortMembers200Response> reportInsightsActionExecutedWithHttpInfo(ReportInsightsActionExecutedRequest reportInsightsActionExecutedRequest) throws ApiException {
        okhttp3.Call localVarCall = reportInsightsActionExecutedValidateBeforeCall(reportInsightsActionExecutedRequest, null);
        Type localVarReturnType = new TypeToken<CoreCohortAddCohortMembers200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Stores an action executed over a group of predictions. (asynchronously)
     * Stores an action executed over a group of predictions.
     * @param reportInsightsActionExecutedRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportInsightsActionExecutedAsync(ReportInsightsActionExecutedRequest reportInsightsActionExecutedRequest, final ApiCallback<CoreCohortAddCohortMembers200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportInsightsActionExecutedValidateBeforeCall(reportInsightsActionExecutedRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreCohortAddCohortMembers200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportInsightsSetFixedPrediction
     * @param reportInsightsSetFixedPredictionRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportInsightsSetFixedPredictionCall(ReportInsightsSetFixedPredictionRequest reportInsightsSetFixedPredictionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reportInsightsSetFixedPredictionRequest;

        // create path and map variables
        String localVarPath = "/report_insights_set_fixed_prediction";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportInsightsSetFixedPredictionValidateBeforeCall(ReportInsightsSetFixedPredictionRequest reportInsightsSetFixedPredictionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'reportInsightsSetFixedPredictionRequest' is set
        if (reportInsightsSetFixedPredictionRequest == null) {
            throw new ApiException("Missing the required parameter 'reportInsightsSetFixedPredictionRequest' when calling reportInsightsSetFixedPrediction(Async)");
        }

        return reportInsightsSetFixedPredictionCall(reportInsightsSetFixedPredictionRequest, _callback);

    }

    /**
     * Flags a prediction as fixed.
     * Flags a prediction as fixed.
     * @param reportInsightsSetFixedPredictionRequest  (required)
     * @return ReportInsightsSetFixedPrediction200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ReportInsightsSetFixedPrediction200Response reportInsightsSetFixedPrediction(ReportInsightsSetFixedPredictionRequest reportInsightsSetFixedPredictionRequest) throws ApiException {
        ApiResponse<ReportInsightsSetFixedPrediction200Response> localVarResp = reportInsightsSetFixedPredictionWithHttpInfo(reportInsightsSetFixedPredictionRequest);
        return localVarResp.getData();
    }

    /**
     * Flags a prediction as fixed.
     * Flags a prediction as fixed.
     * @param reportInsightsSetFixedPredictionRequest  (required)
     * @return ApiResponse&lt;ReportInsightsSetFixedPrediction200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReportInsightsSetFixedPrediction200Response> reportInsightsSetFixedPredictionWithHttpInfo(ReportInsightsSetFixedPredictionRequest reportInsightsSetFixedPredictionRequest) throws ApiException {
        okhttp3.Call localVarCall = reportInsightsSetFixedPredictionValidateBeforeCall(reportInsightsSetFixedPredictionRequest, null);
        Type localVarReturnType = new TypeToken<ReportInsightsSetFixedPrediction200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Flags a prediction as fixed. (asynchronously)
     * Flags a prediction as fixed.
     * @param reportInsightsSetFixedPredictionRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportInsightsSetFixedPredictionAsync(ReportInsightsSetFixedPredictionRequest reportInsightsSetFixedPredictionRequest, final ApiCallback<ReportInsightsSetFixedPrediction200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportInsightsSetFixedPredictionValidateBeforeCall(reportInsightsSetFixedPredictionRequest, _callback);
        Type localVarReturnType = new TypeToken<ReportInsightsSetFixedPrediction200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportInsightsSetNotusefulPrediction
     * @param reportInsightsSetNotusefulPredictionRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportInsightsSetNotusefulPredictionCall(ReportInsightsSetNotusefulPredictionRequest reportInsightsSetNotusefulPredictionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reportInsightsSetNotusefulPredictionRequest;

        // create path and map variables
        String localVarPath = "/report_insights_set_notuseful_prediction";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportInsightsSetNotusefulPredictionValidateBeforeCall(ReportInsightsSetNotusefulPredictionRequest reportInsightsSetNotusefulPredictionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'reportInsightsSetNotusefulPredictionRequest' is set
        if (reportInsightsSetNotusefulPredictionRequest == null) {
            throw new ApiException("Missing the required parameter 'reportInsightsSetNotusefulPredictionRequest' when calling reportInsightsSetNotusefulPrediction(Async)");
        }

        return reportInsightsSetNotusefulPredictionCall(reportInsightsSetNotusefulPredictionRequest, _callback);

    }

    /**
     * Flags the prediction as not useful.
     * Flags the prediction as not useful.
     * @param reportInsightsSetNotusefulPredictionRequest  (required)
     * @return ReportInsightsSetNotusefulPrediction200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ReportInsightsSetNotusefulPrediction200Response reportInsightsSetNotusefulPrediction(ReportInsightsSetNotusefulPredictionRequest reportInsightsSetNotusefulPredictionRequest) throws ApiException {
        ApiResponse<ReportInsightsSetNotusefulPrediction200Response> localVarResp = reportInsightsSetNotusefulPredictionWithHttpInfo(reportInsightsSetNotusefulPredictionRequest);
        return localVarResp.getData();
    }

    /**
     * Flags the prediction as not useful.
     * Flags the prediction as not useful.
     * @param reportInsightsSetNotusefulPredictionRequest  (required)
     * @return ApiResponse&lt;ReportInsightsSetNotusefulPrediction200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReportInsightsSetNotusefulPrediction200Response> reportInsightsSetNotusefulPredictionWithHttpInfo(ReportInsightsSetNotusefulPredictionRequest reportInsightsSetNotusefulPredictionRequest) throws ApiException {
        okhttp3.Call localVarCall = reportInsightsSetNotusefulPredictionValidateBeforeCall(reportInsightsSetNotusefulPredictionRequest, null);
        Type localVarReturnType = new TypeToken<ReportInsightsSetNotusefulPrediction200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Flags the prediction as not useful. (asynchronously)
     * Flags the prediction as not useful.
     * @param reportInsightsSetNotusefulPredictionRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportInsightsSetNotusefulPredictionAsync(ReportInsightsSetNotusefulPredictionRequest reportInsightsSetNotusefulPredictionRequest, final ApiCallback<ReportInsightsSetNotusefulPrediction200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportInsightsSetNotusefulPredictionValidateBeforeCall(reportInsightsSetNotusefulPredictionRequest, _callback);
        Type localVarReturnType = new TypeToken<ReportInsightsSetNotusefulPrediction200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
