/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.joshuapare.moodleclient;

import com.joshuapare.ApiCallback;
import com.joshuapare.ApiClient;
import com.joshuapare.ApiException;
import com.joshuapare.ApiResponse;
import com.joshuapare.Configuration;
import com.joshuapare.Pair;
import com.joshuapare.ProgressRequestBody;
import com.joshuapare.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CoreCalendarDeleteSubscription200Response;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.ModChatGetChatsByCoursesRequest;
import org.openapitools.client.model.ModLtiCreateToolProxy200Response;
import org.openapitools.client.model.ModLtiCreateToolProxyRequest;
import org.openapitools.client.model.ModLtiCreateToolType200Response;
import org.openapitools.client.model.ModLtiCreateToolTypeRequest;
import org.openapitools.client.model.ModLtiDeleteCourseToolTypeRequest;
import org.openapitools.client.model.ModLtiDeleteToolProxy200Response;
import org.openapitools.client.model.ModLtiDeleteToolProxyRequest;
import org.openapitools.client.model.ModLtiDeleteToolTypeRequest;
import org.openapitools.client.model.ModLtiGetLtisByCourses200Response;
import org.openapitools.client.model.ModLtiGetToolLaunchData200Response;
import org.openapitools.client.model.ModLtiGetToolLaunchDataRequest;
import org.openapitools.client.model.ModLtiGetToolProxiesRequest;
import org.openapitools.client.model.ModLtiGetToolProxyRegistrationRequest200Response;
import org.openapitools.client.model.ModLtiGetToolTypesAndProxies200Response;
import org.openapitools.client.model.ModLtiGetToolTypesAndProxiesCount200Response;
import org.openapitools.client.model.ModLtiGetToolTypesAndProxiesCountRequest;
import org.openapitools.client.model.ModLtiGetToolTypesAndProxiesRequest;
import org.openapitools.client.model.ModLtiGetToolTypesRequest;
import org.openapitools.client.model.ModLtiIsCartridge200Response;
import org.openapitools.client.model.ModLtiIsCartridgeRequest;
import org.openapitools.client.model.ModLtiToggleShowinactivitychooserRequest;
import org.openapitools.client.model.ModLtiUpdateToolType200Response;
import org.openapitools.client.model.ModLtiUpdateToolTypeRequest;
import org.openapitools.client.model.ModLtiViewLtiRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ModLtiApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ModLtiApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ModLtiApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for modLtiCreateToolProxy
     * @param modLtiCreateToolProxyRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modLtiCreateToolProxyCall(ModLtiCreateToolProxyRequest modLtiCreateToolProxyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modLtiCreateToolProxyRequest;

        // create path and map variables
        String localVarPath = "/mod_lti_create_tool_proxy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modLtiCreateToolProxyValidateBeforeCall(ModLtiCreateToolProxyRequest modLtiCreateToolProxyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modLtiCreateToolProxyRequest' is set
        if (modLtiCreateToolProxyRequest == null) {
            throw new ApiException("Missing the required parameter 'modLtiCreateToolProxyRequest' when calling modLtiCreateToolProxy(Async)");
        }

        return modLtiCreateToolProxyCall(modLtiCreateToolProxyRequest, _callback);

    }

    /**
     * Create a tool proxy
     * Create a tool proxy
     * @param modLtiCreateToolProxyRequest  (required)
     * @return ModLtiCreateToolProxy200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModLtiCreateToolProxy200Response modLtiCreateToolProxy(ModLtiCreateToolProxyRequest modLtiCreateToolProxyRequest) throws ApiException {
        ApiResponse<ModLtiCreateToolProxy200Response> localVarResp = modLtiCreateToolProxyWithHttpInfo(modLtiCreateToolProxyRequest);
        return localVarResp.getData();
    }

    /**
     * Create a tool proxy
     * Create a tool proxy
     * @param modLtiCreateToolProxyRequest  (required)
     * @return ApiResponse&lt;ModLtiCreateToolProxy200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModLtiCreateToolProxy200Response> modLtiCreateToolProxyWithHttpInfo(ModLtiCreateToolProxyRequest modLtiCreateToolProxyRequest) throws ApiException {
        okhttp3.Call localVarCall = modLtiCreateToolProxyValidateBeforeCall(modLtiCreateToolProxyRequest, null);
        Type localVarReturnType = new TypeToken<ModLtiCreateToolProxy200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a tool proxy (asynchronously)
     * Create a tool proxy
     * @param modLtiCreateToolProxyRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modLtiCreateToolProxyAsync(ModLtiCreateToolProxyRequest modLtiCreateToolProxyRequest, final ApiCallback<ModLtiCreateToolProxy200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modLtiCreateToolProxyValidateBeforeCall(modLtiCreateToolProxyRequest, _callback);
        Type localVarReturnType = new TypeToken<ModLtiCreateToolProxy200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modLtiCreateToolType
     * @param modLtiCreateToolTypeRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tool </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modLtiCreateToolTypeCall(ModLtiCreateToolTypeRequest modLtiCreateToolTypeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modLtiCreateToolTypeRequest;

        // create path and map variables
        String localVarPath = "/mod_lti_create_tool_type";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modLtiCreateToolTypeValidateBeforeCall(ModLtiCreateToolTypeRequest modLtiCreateToolTypeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modLtiCreateToolTypeRequest' is set
        if (modLtiCreateToolTypeRequest == null) {
            throw new ApiException("Missing the required parameter 'modLtiCreateToolTypeRequest' when calling modLtiCreateToolType(Async)");
        }

        return modLtiCreateToolTypeCall(modLtiCreateToolTypeRequest, _callback);

    }

    /**
     * Create a tool type
     * Create a tool type
     * @param modLtiCreateToolTypeRequest  (required)
     * @return ModLtiCreateToolType200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tool </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModLtiCreateToolType200Response modLtiCreateToolType(ModLtiCreateToolTypeRequest modLtiCreateToolTypeRequest) throws ApiException {
        ApiResponse<ModLtiCreateToolType200Response> localVarResp = modLtiCreateToolTypeWithHttpInfo(modLtiCreateToolTypeRequest);
        return localVarResp.getData();
    }

    /**
     * Create a tool type
     * Create a tool type
     * @param modLtiCreateToolTypeRequest  (required)
     * @return ApiResponse&lt;ModLtiCreateToolType200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tool </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModLtiCreateToolType200Response> modLtiCreateToolTypeWithHttpInfo(ModLtiCreateToolTypeRequest modLtiCreateToolTypeRequest) throws ApiException {
        okhttp3.Call localVarCall = modLtiCreateToolTypeValidateBeforeCall(modLtiCreateToolTypeRequest, null);
        Type localVarReturnType = new TypeToken<ModLtiCreateToolType200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a tool type (asynchronously)
     * Create a tool type
     * @param modLtiCreateToolTypeRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tool </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modLtiCreateToolTypeAsync(ModLtiCreateToolTypeRequest modLtiCreateToolTypeRequest, final ApiCallback<ModLtiCreateToolType200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modLtiCreateToolTypeValidateBeforeCall(modLtiCreateToolTypeRequest, _callback);
        Type localVarReturnType = new TypeToken<ModLtiCreateToolType200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modLtiDeleteCourseToolType
     * @param modLtiDeleteCourseToolTypeRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modLtiDeleteCourseToolTypeCall(ModLtiDeleteCourseToolTypeRequest modLtiDeleteCourseToolTypeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modLtiDeleteCourseToolTypeRequest;

        // create path and map variables
        String localVarPath = "/mod_lti_delete_course_tool_type";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modLtiDeleteCourseToolTypeValidateBeforeCall(ModLtiDeleteCourseToolTypeRequest modLtiDeleteCourseToolTypeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modLtiDeleteCourseToolTypeRequest' is set
        if (modLtiDeleteCourseToolTypeRequest == null) {
            throw new ApiException("Missing the required parameter 'modLtiDeleteCourseToolTypeRequest' when calling modLtiDeleteCourseToolType(Async)");
        }

        return modLtiDeleteCourseToolTypeCall(modLtiDeleteCourseToolTypeRequest, _callback);

    }

    /**
     * Delete a course tool type
     * Delete a course tool type
     * @param modLtiDeleteCourseToolTypeRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object modLtiDeleteCourseToolType(ModLtiDeleteCourseToolTypeRequest modLtiDeleteCourseToolTypeRequest) throws ApiException {
        ApiResponse<Object> localVarResp = modLtiDeleteCourseToolTypeWithHttpInfo(modLtiDeleteCourseToolTypeRequest);
        return localVarResp.getData();
    }

    /**
     * Delete a course tool type
     * Delete a course tool type
     * @param modLtiDeleteCourseToolTypeRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> modLtiDeleteCourseToolTypeWithHttpInfo(ModLtiDeleteCourseToolTypeRequest modLtiDeleteCourseToolTypeRequest) throws ApiException {
        okhttp3.Call localVarCall = modLtiDeleteCourseToolTypeValidateBeforeCall(modLtiDeleteCourseToolTypeRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a course tool type (asynchronously)
     * Delete a course tool type
     * @param modLtiDeleteCourseToolTypeRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modLtiDeleteCourseToolTypeAsync(ModLtiDeleteCourseToolTypeRequest modLtiDeleteCourseToolTypeRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = modLtiDeleteCourseToolTypeValidateBeforeCall(modLtiDeleteCourseToolTypeRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modLtiDeleteToolProxy
     * @param modLtiDeleteToolProxyRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modLtiDeleteToolProxyCall(ModLtiDeleteToolProxyRequest modLtiDeleteToolProxyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modLtiDeleteToolProxyRequest;

        // create path and map variables
        String localVarPath = "/mod_lti_delete_tool_proxy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modLtiDeleteToolProxyValidateBeforeCall(ModLtiDeleteToolProxyRequest modLtiDeleteToolProxyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modLtiDeleteToolProxyRequest' is set
        if (modLtiDeleteToolProxyRequest == null) {
            throw new ApiException("Missing the required parameter 'modLtiDeleteToolProxyRequest' when calling modLtiDeleteToolProxy(Async)");
        }

        return modLtiDeleteToolProxyCall(modLtiDeleteToolProxyRequest, _callback);

    }

    /**
     * Delete a tool proxy
     * Delete a tool proxy
     * @param modLtiDeleteToolProxyRequest  (required)
     * @return ModLtiDeleteToolProxy200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModLtiDeleteToolProxy200Response modLtiDeleteToolProxy(ModLtiDeleteToolProxyRequest modLtiDeleteToolProxyRequest) throws ApiException {
        ApiResponse<ModLtiDeleteToolProxy200Response> localVarResp = modLtiDeleteToolProxyWithHttpInfo(modLtiDeleteToolProxyRequest);
        return localVarResp.getData();
    }

    /**
     * Delete a tool proxy
     * Delete a tool proxy
     * @param modLtiDeleteToolProxyRequest  (required)
     * @return ApiResponse&lt;ModLtiDeleteToolProxy200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModLtiDeleteToolProxy200Response> modLtiDeleteToolProxyWithHttpInfo(ModLtiDeleteToolProxyRequest modLtiDeleteToolProxyRequest) throws ApiException {
        okhttp3.Call localVarCall = modLtiDeleteToolProxyValidateBeforeCall(modLtiDeleteToolProxyRequest, null);
        Type localVarReturnType = new TypeToken<ModLtiDeleteToolProxy200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a tool proxy (asynchronously)
     * Delete a tool proxy
     * @param modLtiDeleteToolProxyRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modLtiDeleteToolProxyAsync(ModLtiDeleteToolProxyRequest modLtiDeleteToolProxyRequest, final ApiCallback<ModLtiDeleteToolProxy200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modLtiDeleteToolProxyValidateBeforeCall(modLtiDeleteToolProxyRequest, _callback);
        Type localVarReturnType = new TypeToken<ModLtiDeleteToolProxy200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modLtiDeleteToolType
     * @param modLtiDeleteToolTypeRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modLtiDeleteToolTypeCall(ModLtiDeleteToolTypeRequest modLtiDeleteToolTypeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modLtiDeleteToolTypeRequest;

        // create path and map variables
        String localVarPath = "/mod_lti_delete_tool_type";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modLtiDeleteToolTypeValidateBeforeCall(ModLtiDeleteToolTypeRequest modLtiDeleteToolTypeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modLtiDeleteToolTypeRequest' is set
        if (modLtiDeleteToolTypeRequest == null) {
            throw new ApiException("Missing the required parameter 'modLtiDeleteToolTypeRequest' when calling modLtiDeleteToolType(Async)");
        }

        return modLtiDeleteToolTypeCall(modLtiDeleteToolTypeRequest, _callback);

    }

    /**
     * Delete a tool type
     * Delete a tool type
     * @param modLtiDeleteToolTypeRequest  (required)
     * @return ModLtiDeleteToolTypeRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModLtiDeleteToolTypeRequest modLtiDeleteToolType(ModLtiDeleteToolTypeRequest modLtiDeleteToolTypeRequest) throws ApiException {
        ApiResponse<ModLtiDeleteToolTypeRequest> localVarResp = modLtiDeleteToolTypeWithHttpInfo(modLtiDeleteToolTypeRequest);
        return localVarResp.getData();
    }

    /**
     * Delete a tool type
     * Delete a tool type
     * @param modLtiDeleteToolTypeRequest  (required)
     * @return ApiResponse&lt;ModLtiDeleteToolTypeRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModLtiDeleteToolTypeRequest> modLtiDeleteToolTypeWithHttpInfo(ModLtiDeleteToolTypeRequest modLtiDeleteToolTypeRequest) throws ApiException {
        okhttp3.Call localVarCall = modLtiDeleteToolTypeValidateBeforeCall(modLtiDeleteToolTypeRequest, null);
        Type localVarReturnType = new TypeToken<ModLtiDeleteToolTypeRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a tool type (asynchronously)
     * Delete a tool type
     * @param modLtiDeleteToolTypeRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modLtiDeleteToolTypeAsync(ModLtiDeleteToolTypeRequest modLtiDeleteToolTypeRequest, final ApiCallback<ModLtiDeleteToolTypeRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = modLtiDeleteToolTypeValidateBeforeCall(modLtiDeleteToolTypeRequest, _callback);
        Type localVarReturnType = new TypeToken<ModLtiDeleteToolTypeRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modLtiGetLtisByCourses
     * @param modChatGetChatsByCoursesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modLtiGetLtisByCoursesCall(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modChatGetChatsByCoursesRequest;

        // create path and map variables
        String localVarPath = "/mod_lti_get_ltis_by_courses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modLtiGetLtisByCoursesValidateBeforeCall(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modChatGetChatsByCoursesRequest' is set
        if (modChatGetChatsByCoursesRequest == null) {
            throw new ApiException("Missing the required parameter 'modChatGetChatsByCoursesRequest' when calling modLtiGetLtisByCourses(Async)");
        }

        return modLtiGetLtisByCoursesCall(modChatGetChatsByCoursesRequest, _callback);

    }

    /**
     * Returns a list of external tool instances in a provided set of courses, if                             no courses are provided then all the external tool instances the user has access to will be returned.
     * Returns a list of external tool instances in a provided set of courses, if                             no courses are provided then all the external tool instances the user has access to will be returned.
     * @param modChatGetChatsByCoursesRequest  (required)
     * @return ModLtiGetLtisByCourses200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModLtiGetLtisByCourses200Response modLtiGetLtisByCourses(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest) throws ApiException {
        ApiResponse<ModLtiGetLtisByCourses200Response> localVarResp = modLtiGetLtisByCoursesWithHttpInfo(modChatGetChatsByCoursesRequest);
        return localVarResp.getData();
    }

    /**
     * Returns a list of external tool instances in a provided set of courses, if                             no courses are provided then all the external tool instances the user has access to will be returned.
     * Returns a list of external tool instances in a provided set of courses, if                             no courses are provided then all the external tool instances the user has access to will be returned.
     * @param modChatGetChatsByCoursesRequest  (required)
     * @return ApiResponse&lt;ModLtiGetLtisByCourses200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModLtiGetLtisByCourses200Response> modLtiGetLtisByCoursesWithHttpInfo(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest) throws ApiException {
        okhttp3.Call localVarCall = modLtiGetLtisByCoursesValidateBeforeCall(modChatGetChatsByCoursesRequest, null);
        Type localVarReturnType = new TypeToken<ModLtiGetLtisByCourses200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a list of external tool instances in a provided set of courses, if                             no courses are provided then all the external tool instances the user has access to will be returned. (asynchronously)
     * Returns a list of external tool instances in a provided set of courses, if                             no courses are provided then all the external tool instances the user has access to will be returned.
     * @param modChatGetChatsByCoursesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modLtiGetLtisByCoursesAsync(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest, final ApiCallback<ModLtiGetLtisByCourses200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modLtiGetLtisByCoursesValidateBeforeCall(modChatGetChatsByCoursesRequest, _callback);
        Type localVarReturnType = new TypeToken<ModLtiGetLtisByCourses200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modLtiGetToolLaunchData
     * @param modLtiGetToolLaunchDataRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modLtiGetToolLaunchDataCall(ModLtiGetToolLaunchDataRequest modLtiGetToolLaunchDataRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modLtiGetToolLaunchDataRequest;

        // create path and map variables
        String localVarPath = "/mod_lti_get_tool_launch_data";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modLtiGetToolLaunchDataValidateBeforeCall(ModLtiGetToolLaunchDataRequest modLtiGetToolLaunchDataRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modLtiGetToolLaunchDataRequest' is set
        if (modLtiGetToolLaunchDataRequest == null) {
            throw new ApiException("Missing the required parameter 'modLtiGetToolLaunchDataRequest' when calling modLtiGetToolLaunchData(Async)");
        }

        return modLtiGetToolLaunchDataCall(modLtiGetToolLaunchDataRequest, _callback);

    }

    /**
     * Return the launch data for a given external tool.
     * Return the launch data for a given external tool.
     * @param modLtiGetToolLaunchDataRequest  (required)
     * @return ModLtiGetToolLaunchData200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModLtiGetToolLaunchData200Response modLtiGetToolLaunchData(ModLtiGetToolLaunchDataRequest modLtiGetToolLaunchDataRequest) throws ApiException {
        ApiResponse<ModLtiGetToolLaunchData200Response> localVarResp = modLtiGetToolLaunchDataWithHttpInfo(modLtiGetToolLaunchDataRequest);
        return localVarResp.getData();
    }

    /**
     * Return the launch data for a given external tool.
     * Return the launch data for a given external tool.
     * @param modLtiGetToolLaunchDataRequest  (required)
     * @return ApiResponse&lt;ModLtiGetToolLaunchData200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModLtiGetToolLaunchData200Response> modLtiGetToolLaunchDataWithHttpInfo(ModLtiGetToolLaunchDataRequest modLtiGetToolLaunchDataRequest) throws ApiException {
        okhttp3.Call localVarCall = modLtiGetToolLaunchDataValidateBeforeCall(modLtiGetToolLaunchDataRequest, null);
        Type localVarReturnType = new TypeToken<ModLtiGetToolLaunchData200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the launch data for a given external tool. (asynchronously)
     * Return the launch data for a given external tool.
     * @param modLtiGetToolLaunchDataRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modLtiGetToolLaunchDataAsync(ModLtiGetToolLaunchDataRequest modLtiGetToolLaunchDataRequest, final ApiCallback<ModLtiGetToolLaunchData200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modLtiGetToolLaunchDataValidateBeforeCall(modLtiGetToolLaunchDataRequest, _callback);
        Type localVarReturnType = new TypeToken<ModLtiGetToolLaunchData200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modLtiGetToolProxies
     * @param modLtiGetToolProxiesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modLtiGetToolProxiesCall(ModLtiGetToolProxiesRequest modLtiGetToolProxiesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modLtiGetToolProxiesRequest;

        // create path and map variables
        String localVarPath = "/mod_lti_get_tool_proxies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modLtiGetToolProxiesValidateBeforeCall(ModLtiGetToolProxiesRequest modLtiGetToolProxiesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modLtiGetToolProxiesRequest' is set
        if (modLtiGetToolProxiesRequest == null) {
            throw new ApiException("Missing the required parameter 'modLtiGetToolProxiesRequest' when calling modLtiGetToolProxies(Async)");
        }

        return modLtiGetToolProxiesCall(modLtiGetToolProxiesRequest, _callback);

    }

    /**
     * Get a list of the tool proxies
     * Get a list of the tool proxies
     * @param modLtiGetToolProxiesRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object modLtiGetToolProxies(ModLtiGetToolProxiesRequest modLtiGetToolProxiesRequest) throws ApiException {
        ApiResponse<Object> localVarResp = modLtiGetToolProxiesWithHttpInfo(modLtiGetToolProxiesRequest);
        return localVarResp.getData();
    }

    /**
     * Get a list of the tool proxies
     * Get a list of the tool proxies
     * @param modLtiGetToolProxiesRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> modLtiGetToolProxiesWithHttpInfo(ModLtiGetToolProxiesRequest modLtiGetToolProxiesRequest) throws ApiException {
        okhttp3.Call localVarCall = modLtiGetToolProxiesValidateBeforeCall(modLtiGetToolProxiesRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of the tool proxies (asynchronously)
     * Get a list of the tool proxies
     * @param modLtiGetToolProxiesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modLtiGetToolProxiesAsync(ModLtiGetToolProxiesRequest modLtiGetToolProxiesRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = modLtiGetToolProxiesValidateBeforeCall(modLtiGetToolProxiesRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modLtiGetToolProxyRegistrationRequest
     * @param modLtiDeleteToolProxyRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modLtiGetToolProxyRegistrationRequestCall(ModLtiDeleteToolProxyRequest modLtiDeleteToolProxyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modLtiDeleteToolProxyRequest;

        // create path and map variables
        String localVarPath = "/mod_lti_get_tool_proxy_registration_request";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modLtiGetToolProxyRegistrationRequestValidateBeforeCall(ModLtiDeleteToolProxyRequest modLtiDeleteToolProxyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modLtiDeleteToolProxyRequest' is set
        if (modLtiDeleteToolProxyRequest == null) {
            throw new ApiException("Missing the required parameter 'modLtiDeleteToolProxyRequest' when calling modLtiGetToolProxyRegistrationRequest(Async)");
        }

        return modLtiGetToolProxyRegistrationRequestCall(modLtiDeleteToolProxyRequest, _callback);

    }

    /**
     * Get a registration request for a tool proxy
     * Get a registration request for a tool proxy
     * @param modLtiDeleteToolProxyRequest  (required)
     * @return ModLtiGetToolProxyRegistrationRequest200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModLtiGetToolProxyRegistrationRequest200Response modLtiGetToolProxyRegistrationRequest(ModLtiDeleteToolProxyRequest modLtiDeleteToolProxyRequest) throws ApiException {
        ApiResponse<ModLtiGetToolProxyRegistrationRequest200Response> localVarResp = modLtiGetToolProxyRegistrationRequestWithHttpInfo(modLtiDeleteToolProxyRequest);
        return localVarResp.getData();
    }

    /**
     * Get a registration request for a tool proxy
     * Get a registration request for a tool proxy
     * @param modLtiDeleteToolProxyRequest  (required)
     * @return ApiResponse&lt;ModLtiGetToolProxyRegistrationRequest200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModLtiGetToolProxyRegistrationRequest200Response> modLtiGetToolProxyRegistrationRequestWithHttpInfo(ModLtiDeleteToolProxyRequest modLtiDeleteToolProxyRequest) throws ApiException {
        okhttp3.Call localVarCall = modLtiGetToolProxyRegistrationRequestValidateBeforeCall(modLtiDeleteToolProxyRequest, null);
        Type localVarReturnType = new TypeToken<ModLtiGetToolProxyRegistrationRequest200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a registration request for a tool proxy (asynchronously)
     * Get a registration request for a tool proxy
     * @param modLtiDeleteToolProxyRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modLtiGetToolProxyRegistrationRequestAsync(ModLtiDeleteToolProxyRequest modLtiDeleteToolProxyRequest, final ApiCallback<ModLtiGetToolProxyRegistrationRequest200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modLtiGetToolProxyRegistrationRequestValidateBeforeCall(modLtiDeleteToolProxyRequest, _callback);
        Type localVarReturnType = new TypeToken<ModLtiGetToolProxyRegistrationRequest200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modLtiGetToolTypes
     * @param modLtiGetToolTypesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modLtiGetToolTypesCall(ModLtiGetToolTypesRequest modLtiGetToolTypesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modLtiGetToolTypesRequest;

        // create path and map variables
        String localVarPath = "/mod_lti_get_tool_types";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modLtiGetToolTypesValidateBeforeCall(ModLtiGetToolTypesRequest modLtiGetToolTypesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modLtiGetToolTypesRequest' is set
        if (modLtiGetToolTypesRequest == null) {
            throw new ApiException("Missing the required parameter 'modLtiGetToolTypesRequest' when calling modLtiGetToolTypes(Async)");
        }

        return modLtiGetToolTypesCall(modLtiGetToolTypesRequest, _callback);

    }

    /**
     * Get a list of the tool types
     * Get a list of the tool types
     * @param modLtiGetToolTypesRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object modLtiGetToolTypes(ModLtiGetToolTypesRequest modLtiGetToolTypesRequest) throws ApiException {
        ApiResponse<Object> localVarResp = modLtiGetToolTypesWithHttpInfo(modLtiGetToolTypesRequest);
        return localVarResp.getData();
    }

    /**
     * Get a list of the tool types
     * Get a list of the tool types
     * @param modLtiGetToolTypesRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> modLtiGetToolTypesWithHttpInfo(ModLtiGetToolTypesRequest modLtiGetToolTypesRequest) throws ApiException {
        okhttp3.Call localVarCall = modLtiGetToolTypesValidateBeforeCall(modLtiGetToolTypesRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of the tool types (asynchronously)
     * Get a list of the tool types
     * @param modLtiGetToolTypesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modLtiGetToolTypesAsync(ModLtiGetToolTypesRequest modLtiGetToolTypesRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = modLtiGetToolTypesValidateBeforeCall(modLtiGetToolTypesRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modLtiGetToolTypesAndProxies
     * @param modLtiGetToolTypesAndProxiesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modLtiGetToolTypesAndProxiesCall(ModLtiGetToolTypesAndProxiesRequest modLtiGetToolTypesAndProxiesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modLtiGetToolTypesAndProxiesRequest;

        // create path and map variables
        String localVarPath = "/mod_lti_get_tool_types_and_proxies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modLtiGetToolTypesAndProxiesValidateBeforeCall(ModLtiGetToolTypesAndProxiesRequest modLtiGetToolTypesAndProxiesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modLtiGetToolTypesAndProxiesRequest' is set
        if (modLtiGetToolTypesAndProxiesRequest == null) {
            throw new ApiException("Missing the required parameter 'modLtiGetToolTypesAndProxiesRequest' when calling modLtiGetToolTypesAndProxies(Async)");
        }

        return modLtiGetToolTypesAndProxiesCall(modLtiGetToolTypesAndProxiesRequest, _callback);

    }

    /**
     * Get a list of the tool types and tool proxies
     * Get a list of the tool types and tool proxies
     * @param modLtiGetToolTypesAndProxiesRequest  (required)
     * @return ModLtiGetToolTypesAndProxies200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModLtiGetToolTypesAndProxies200Response modLtiGetToolTypesAndProxies(ModLtiGetToolTypesAndProxiesRequest modLtiGetToolTypesAndProxiesRequest) throws ApiException {
        ApiResponse<ModLtiGetToolTypesAndProxies200Response> localVarResp = modLtiGetToolTypesAndProxiesWithHttpInfo(modLtiGetToolTypesAndProxiesRequest);
        return localVarResp.getData();
    }

    /**
     * Get a list of the tool types and tool proxies
     * Get a list of the tool types and tool proxies
     * @param modLtiGetToolTypesAndProxiesRequest  (required)
     * @return ApiResponse&lt;ModLtiGetToolTypesAndProxies200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModLtiGetToolTypesAndProxies200Response> modLtiGetToolTypesAndProxiesWithHttpInfo(ModLtiGetToolTypesAndProxiesRequest modLtiGetToolTypesAndProxiesRequest) throws ApiException {
        okhttp3.Call localVarCall = modLtiGetToolTypesAndProxiesValidateBeforeCall(modLtiGetToolTypesAndProxiesRequest, null);
        Type localVarReturnType = new TypeToken<ModLtiGetToolTypesAndProxies200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of the tool types and tool proxies (asynchronously)
     * Get a list of the tool types and tool proxies
     * @param modLtiGetToolTypesAndProxiesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modLtiGetToolTypesAndProxiesAsync(ModLtiGetToolTypesAndProxiesRequest modLtiGetToolTypesAndProxiesRequest, final ApiCallback<ModLtiGetToolTypesAndProxies200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modLtiGetToolTypesAndProxiesValidateBeforeCall(modLtiGetToolTypesAndProxiesRequest, _callback);
        Type localVarReturnType = new TypeToken<ModLtiGetToolTypesAndProxies200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modLtiGetToolTypesAndProxiesCount
     * @param modLtiGetToolTypesAndProxiesCountRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modLtiGetToolTypesAndProxiesCountCall(ModLtiGetToolTypesAndProxiesCountRequest modLtiGetToolTypesAndProxiesCountRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modLtiGetToolTypesAndProxiesCountRequest;

        // create path and map variables
        String localVarPath = "/mod_lti_get_tool_types_and_proxies_count";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modLtiGetToolTypesAndProxiesCountValidateBeforeCall(ModLtiGetToolTypesAndProxiesCountRequest modLtiGetToolTypesAndProxiesCountRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modLtiGetToolTypesAndProxiesCountRequest' is set
        if (modLtiGetToolTypesAndProxiesCountRequest == null) {
            throw new ApiException("Missing the required parameter 'modLtiGetToolTypesAndProxiesCountRequest' when calling modLtiGetToolTypesAndProxiesCount(Async)");
        }

        return modLtiGetToolTypesAndProxiesCountCall(modLtiGetToolTypesAndProxiesCountRequest, _callback);

    }

    /**
     * Get total number of the tool types and tool proxies
     * Get total number of the tool types and tool proxies
     * @param modLtiGetToolTypesAndProxiesCountRequest  (required)
     * @return ModLtiGetToolTypesAndProxiesCount200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModLtiGetToolTypesAndProxiesCount200Response modLtiGetToolTypesAndProxiesCount(ModLtiGetToolTypesAndProxiesCountRequest modLtiGetToolTypesAndProxiesCountRequest) throws ApiException {
        ApiResponse<ModLtiGetToolTypesAndProxiesCount200Response> localVarResp = modLtiGetToolTypesAndProxiesCountWithHttpInfo(modLtiGetToolTypesAndProxiesCountRequest);
        return localVarResp.getData();
    }

    /**
     * Get total number of the tool types and tool proxies
     * Get total number of the tool types and tool proxies
     * @param modLtiGetToolTypesAndProxiesCountRequest  (required)
     * @return ApiResponse&lt;ModLtiGetToolTypesAndProxiesCount200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModLtiGetToolTypesAndProxiesCount200Response> modLtiGetToolTypesAndProxiesCountWithHttpInfo(ModLtiGetToolTypesAndProxiesCountRequest modLtiGetToolTypesAndProxiesCountRequest) throws ApiException {
        okhttp3.Call localVarCall = modLtiGetToolTypesAndProxiesCountValidateBeforeCall(modLtiGetToolTypesAndProxiesCountRequest, null);
        Type localVarReturnType = new TypeToken<ModLtiGetToolTypesAndProxiesCount200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get total number of the tool types and tool proxies (asynchronously)
     * Get total number of the tool types and tool proxies
     * @param modLtiGetToolTypesAndProxiesCountRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modLtiGetToolTypesAndProxiesCountAsync(ModLtiGetToolTypesAndProxiesCountRequest modLtiGetToolTypesAndProxiesCountRequest, final ApiCallback<ModLtiGetToolTypesAndProxiesCount200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modLtiGetToolTypesAndProxiesCountValidateBeforeCall(modLtiGetToolTypesAndProxiesCountRequest, _callback);
        Type localVarReturnType = new TypeToken<ModLtiGetToolTypesAndProxiesCount200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modLtiIsCartridge
     * @param modLtiIsCartridgeRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modLtiIsCartridgeCall(ModLtiIsCartridgeRequest modLtiIsCartridgeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modLtiIsCartridgeRequest;

        // create path and map variables
        String localVarPath = "/mod_lti_is_cartridge";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modLtiIsCartridgeValidateBeforeCall(ModLtiIsCartridgeRequest modLtiIsCartridgeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modLtiIsCartridgeRequest' is set
        if (modLtiIsCartridgeRequest == null) {
            throw new ApiException("Missing the required parameter 'modLtiIsCartridgeRequest' when calling modLtiIsCartridge(Async)");
        }

        return modLtiIsCartridgeCall(modLtiIsCartridgeRequest, _callback);

    }

    /**
     * Determine if the given url is for a cartridge
     * Determine if the given url is for a cartridge
     * @param modLtiIsCartridgeRequest  (required)
     * @return ModLtiIsCartridge200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModLtiIsCartridge200Response modLtiIsCartridge(ModLtiIsCartridgeRequest modLtiIsCartridgeRequest) throws ApiException {
        ApiResponse<ModLtiIsCartridge200Response> localVarResp = modLtiIsCartridgeWithHttpInfo(modLtiIsCartridgeRequest);
        return localVarResp.getData();
    }

    /**
     * Determine if the given url is for a cartridge
     * Determine if the given url is for a cartridge
     * @param modLtiIsCartridgeRequest  (required)
     * @return ApiResponse&lt;ModLtiIsCartridge200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModLtiIsCartridge200Response> modLtiIsCartridgeWithHttpInfo(ModLtiIsCartridgeRequest modLtiIsCartridgeRequest) throws ApiException {
        okhttp3.Call localVarCall = modLtiIsCartridgeValidateBeforeCall(modLtiIsCartridgeRequest, null);
        Type localVarReturnType = new TypeToken<ModLtiIsCartridge200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Determine if the given url is for a cartridge (asynchronously)
     * Determine if the given url is for a cartridge
     * @param modLtiIsCartridgeRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modLtiIsCartridgeAsync(ModLtiIsCartridgeRequest modLtiIsCartridgeRequest, final ApiCallback<ModLtiIsCartridge200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modLtiIsCartridgeValidateBeforeCall(modLtiIsCartridgeRequest, _callback);
        Type localVarReturnType = new TypeToken<ModLtiIsCartridge200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modLtiToggleShowinactivitychooser
     * @param modLtiToggleShowinactivitychooserRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modLtiToggleShowinactivitychooserCall(ModLtiToggleShowinactivitychooserRequest modLtiToggleShowinactivitychooserRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modLtiToggleShowinactivitychooserRequest;

        // create path and map variables
        String localVarPath = "/mod_lti_toggle_showinactivitychooser";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modLtiToggleShowinactivitychooserValidateBeforeCall(ModLtiToggleShowinactivitychooserRequest modLtiToggleShowinactivitychooserRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modLtiToggleShowinactivitychooserRequest' is set
        if (modLtiToggleShowinactivitychooserRequest == null) {
            throw new ApiException("Missing the required parameter 'modLtiToggleShowinactivitychooserRequest' when calling modLtiToggleShowinactivitychooser(Async)");
        }

        return modLtiToggleShowinactivitychooserCall(modLtiToggleShowinactivitychooserRequest, _callback);

    }

    /**
     * Toggle showinactivitychooser for a tool type in a course
     * Toggle showinactivitychooser for a tool type in a course
     * @param modLtiToggleShowinactivitychooserRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object modLtiToggleShowinactivitychooser(ModLtiToggleShowinactivitychooserRequest modLtiToggleShowinactivitychooserRequest) throws ApiException {
        ApiResponse<Object> localVarResp = modLtiToggleShowinactivitychooserWithHttpInfo(modLtiToggleShowinactivitychooserRequest);
        return localVarResp.getData();
    }

    /**
     * Toggle showinactivitychooser for a tool type in a course
     * Toggle showinactivitychooser for a tool type in a course
     * @param modLtiToggleShowinactivitychooserRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> modLtiToggleShowinactivitychooserWithHttpInfo(ModLtiToggleShowinactivitychooserRequest modLtiToggleShowinactivitychooserRequest) throws ApiException {
        okhttp3.Call localVarCall = modLtiToggleShowinactivitychooserValidateBeforeCall(modLtiToggleShowinactivitychooserRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Toggle showinactivitychooser for a tool type in a course (asynchronously)
     * Toggle showinactivitychooser for a tool type in a course
     * @param modLtiToggleShowinactivitychooserRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modLtiToggleShowinactivitychooserAsync(ModLtiToggleShowinactivitychooserRequest modLtiToggleShowinactivitychooserRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = modLtiToggleShowinactivitychooserValidateBeforeCall(modLtiToggleShowinactivitychooserRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modLtiUpdateToolType
     * @param modLtiUpdateToolTypeRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tool </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modLtiUpdateToolTypeCall(ModLtiUpdateToolTypeRequest modLtiUpdateToolTypeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modLtiUpdateToolTypeRequest;

        // create path and map variables
        String localVarPath = "/mod_lti_update_tool_type";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modLtiUpdateToolTypeValidateBeforeCall(ModLtiUpdateToolTypeRequest modLtiUpdateToolTypeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modLtiUpdateToolTypeRequest' is set
        if (modLtiUpdateToolTypeRequest == null) {
            throw new ApiException("Missing the required parameter 'modLtiUpdateToolTypeRequest' when calling modLtiUpdateToolType(Async)");
        }

        return modLtiUpdateToolTypeCall(modLtiUpdateToolTypeRequest, _callback);

    }

    /**
     * Update a tool type
     * Update a tool type
     * @param modLtiUpdateToolTypeRequest  (required)
     * @return ModLtiUpdateToolType200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tool </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModLtiUpdateToolType200Response modLtiUpdateToolType(ModLtiUpdateToolTypeRequest modLtiUpdateToolTypeRequest) throws ApiException {
        ApiResponse<ModLtiUpdateToolType200Response> localVarResp = modLtiUpdateToolTypeWithHttpInfo(modLtiUpdateToolTypeRequest);
        return localVarResp.getData();
    }

    /**
     * Update a tool type
     * Update a tool type
     * @param modLtiUpdateToolTypeRequest  (required)
     * @return ApiResponse&lt;ModLtiUpdateToolType200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tool </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModLtiUpdateToolType200Response> modLtiUpdateToolTypeWithHttpInfo(ModLtiUpdateToolTypeRequest modLtiUpdateToolTypeRequest) throws ApiException {
        okhttp3.Call localVarCall = modLtiUpdateToolTypeValidateBeforeCall(modLtiUpdateToolTypeRequest, null);
        Type localVarReturnType = new TypeToken<ModLtiUpdateToolType200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a tool type (asynchronously)
     * Update a tool type
     * @param modLtiUpdateToolTypeRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tool </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modLtiUpdateToolTypeAsync(ModLtiUpdateToolTypeRequest modLtiUpdateToolTypeRequest, final ApiCallback<ModLtiUpdateToolType200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modLtiUpdateToolTypeValidateBeforeCall(modLtiUpdateToolTypeRequest, _callback);
        Type localVarReturnType = new TypeToken<ModLtiUpdateToolType200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modLtiViewLti
     * @param modLtiViewLtiRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modLtiViewLtiCall(ModLtiViewLtiRequest modLtiViewLtiRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modLtiViewLtiRequest;

        // create path and map variables
        String localVarPath = "/mod_lti_view_lti";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modLtiViewLtiValidateBeforeCall(ModLtiViewLtiRequest modLtiViewLtiRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modLtiViewLtiRequest' is set
        if (modLtiViewLtiRequest == null) {
            throw new ApiException("Missing the required parameter 'modLtiViewLtiRequest' when calling modLtiViewLti(Async)");
        }

        return modLtiViewLtiCall(modLtiViewLtiRequest, _callback);

    }

    /**
     * Trigger the course module viewed event and update the module completion status.
     * Trigger the course module viewed event and update the module completion status.
     * @param modLtiViewLtiRequest  (required)
     * @return CoreCalendarDeleteSubscription200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreCalendarDeleteSubscription200Response modLtiViewLti(ModLtiViewLtiRequest modLtiViewLtiRequest) throws ApiException {
        ApiResponse<CoreCalendarDeleteSubscription200Response> localVarResp = modLtiViewLtiWithHttpInfo(modLtiViewLtiRequest);
        return localVarResp.getData();
    }

    /**
     * Trigger the course module viewed event and update the module completion status.
     * Trigger the course module viewed event and update the module completion status.
     * @param modLtiViewLtiRequest  (required)
     * @return ApiResponse&lt;CoreCalendarDeleteSubscription200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreCalendarDeleteSubscription200Response> modLtiViewLtiWithHttpInfo(ModLtiViewLtiRequest modLtiViewLtiRequest) throws ApiException {
        okhttp3.Call localVarCall = modLtiViewLtiValidateBeforeCall(modLtiViewLtiRequest, null);
        Type localVarReturnType = new TypeToken<CoreCalendarDeleteSubscription200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Trigger the course module viewed event and update the module completion status. (asynchronously)
     * Trigger the course module viewed event and update the module completion status.
     * @param modLtiViewLtiRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modLtiViewLtiAsync(ModLtiViewLtiRequest modLtiViewLtiRequest, final ApiCallback<CoreCalendarDeleteSubscription200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modLtiViewLtiValidateBeforeCall(modLtiViewLtiRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreCalendarDeleteSubscription200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
